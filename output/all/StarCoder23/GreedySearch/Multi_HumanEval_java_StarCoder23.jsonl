{"ID": 0, "source": "Multi_HumanEval_java:HumanEval_java/0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\t\tif (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        } else {\n            return numbers[numbers.length - 1];\n        }\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        } else {\n            return -1;\n        }\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n    public"}
{"ID": 1, "source": "Multi_HumanEval_java:HumanEval_java/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tint start = 0;\n\t\tfor (int i = 0; i < parenString.length(); i++) {\n\t\t\tchar c = parenString.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\tresult.add(parenString.substring(start, i));\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/kun/datastructure/tree/BinarySearchTree.java\npackage com.kun.datastructure.tree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BinarySearchTree {\n    private TreeNode root;\n\n    public BinarySearchTree() {\n        this.root = null;\n    }\n\n    public BinarySearchTree(int value) {\n        this.root = new TreeNode(value);\n    }\n\n    public void insert(int value) {\n        if (this.root == null) {\n            this.root = new TreeNode(value);\n        } else {\n            this.root.insert(value);\n        }\n    }\n\n    public boolean contains(int value) {\n        if (this.root == null) {\n            return false;\n        } else {\n            return this.root.contains(value);\n        }\n    }\n\n    public void remove(int value) {\n        if (this.root == null) {\n            return;\n        } else {\n            this.root = this.root.remove(value);\n        }\n    }\n\n    public List<Integer> inOrderTraversal() {\n        List<Integer> result = new ArrayList<Integer>();\n        if (this.root!= null) {\n            this.root.inOrderTraversal(result);\n        }\n        return result;\n    }\n\n    public List<Integer> preOrderTraversal() {\n        List<Integer> result = new ArrayList<Integer>();\n        if (this.root!= null) {\n            this.root.preOrderTraversal(result);\n        }\n        return result;\n    }\n\n    public List<Integer> postOrderTraversal() {\n        List<Integer> result"}
{"ID": 2, "source": "Multi_HumanEval_java:HumanEval_java/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t\treturn number - (int)number;\n    }\n\n    public static void main(String[] args) {\n        Double number = 3.5;\n        System.out.println(truncateNumber(number));\n    }\n}\n<file_sep>/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java\n/**\n * BinarySearchTree.java\n *\n * @author <NAME>\n * @version 1.0\n */\npackage com.williamfiset.algorithms.datastructures.binarysearchtree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BinarySearchTree<T extends Comparable<T>> {\n\n  private BinarySearchTreeNode<T> root;\n\n  public BinarySearchTree() {\n    root = null;\n  }\n\n  public BinarySearchTree(BinarySearchTreeNode<T> root) {\n    this.root = root;\n  }\n\n  public BinarySearchTreeNode<T> getRoot() {\n    return root;\n  }\n\n  public void setRoot(BinarySearchTreeNode<T> root) {\n    this.root = root;\n  }\n\n  public void insert(T data) {\n    if (root == null) {\n      root = new BinarySearchTreeNode<T>(data);\n      return;\n    }\n    insert(root, data);\n  }\n\n  private void insert(BinarySearchTreeNode<T> node, T data) {\n    if (data.compareTo(node.getData()) < 0) {\n      if (node.getLeft() == null) {\n        node.setLeft(new BinarySearchTreeNode<T>(data));\n      } else {\n        insert(node.getLeft(), data);\n      }\n    } else {\n      if (node.getRight() == null) {\n        node.setRight(new BinarySearchTreeNode<T>(data));\n      } else {\n        insert(node.getRight(), data);\n      }\n    }\n  }\n\n  public void inorder() {\n    inorder(root);\n  }\n\n  private void inorder(BinarySearchTreeNode<T> node) {\n    if (node == null) return;\n    inorder(node.getLeft());\n    System.out.print(node.getData() + \" \");\n    inorder(node.getRight());\n  }\n\n  public void preorder() {\n    preorder(root);\n  }\n\n  private void preorder(BinarySearchTreeNode<"}
{"ID": 3, "source": "Multi_HumanEval_java:HumanEval_java/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t\tint balance = 0;\n\t\tfor (Object operation : operations) {\n\t\t\tif (operation instanceof Integer) {\n\t\t\t\tbalance += (Integer) operation;\n\t\t\t}\n\t\t}\n\t\treturn balance < 0;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    /**\n     * We want to know the index of the vowels in a given word, for example, there are two vowels in the word\n     * super (the second and fourth letters).\n     *\n     * So given a string \"super\", we should return a list of [2, 4].\n     *\n     * Some examples:\n     * Mmmm  => []\n     * Super => [2, 4]\n     * Apple => [1, 5]\n     * YoMama -> [1, 5, 7]\n     *\n     * @param word\n     * @return\n     */\n    public static List<Integer> vowelIndices(String word) {\n        List<Integer> vowelIndices = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                vowelIndices.add(i + 1);\n            }\n        }\n        return vowelIndices;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Example:\n     * divisors(12); //should return [2, 3, 4, 6]\n     * divisors(25); //should return [5]\n     * divisors("}
{"ID": 4, "source": "Multi_HumanEval_java:HumanEval_java/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t\tDouble sum = 0.0;\n\t\tfor (Double number : numbers) {\n\t\t\tsum += number;\n\t\t}\n\t\tDouble mean = sum / numbers.size();\n\t\tDouble sumOfDifferences = 0.0;\n\t\tfor (Double number : numbers) {\n\t\t\tsumOfDifferences += Math.abs(number - mean);\n\t\t}\n\t\treturn sumOfDifferences / numbers.size();\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem2/Node.java\npackage com.github.pedrovgs.problem2;\n\nimport java.util.List;\n\npublic class Node {\n\n    private final String name;\n    private final List<Node> children;\n\n    public Node(String name, List<Node> children) {\n        this.name = name;\n        this.children = children;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<Node> getChildren() {\n        return children;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"name='\" + name + '\\'' +\n                \", children=\" + children +\n                '}';\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem1/Solution.java\npackage com.github.pedrovgs.problem1;\n\nimport java.util.List;\n\npublic class Solution {\n\n    public static int findMaximum(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers can't be null or empty\");\n        }\n        int maximum = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > maximum) {\n                maximum = numbers.get(i);\n            }\n        }\n        return maximum;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem2/Solution.java\npackage com.github.pedrovgs.problem2;\n\nimport java.util.List;\n\npublic class Solution {\n\n    public static int findMaximum(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers can't be null or empty\");\n        }\n        return find"}
{"ID": 5, "source": "Multi_HumanEval_java:HumanEval_java/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tresult.add(numbers.get(i));\n\t\t\tif (i!= numbers.size() - 1) {\n\t\t\t\tresult.add(delimeter);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n\nclass FindTheDivisorsTest {\n    public static void main(String[] args) {\n        System.out.println(FindTheDivisors.divisors(15));\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars"}
{"ID": 6, "source": "Multi_HumanEval_java:HumanEval_java/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tString[] groups = parenString.split(\" \");\n\t\tfor (String group : groups) {\n\t\t\tresult.add(maxDepth(group));\n\t\t}\n\t\treturn result;\n    }\n\n\tprivate static int maxDepth(String group) {\n\t\tint max = 0;\n\t\tint curr = 0;\n\t\tfor (char c : group.toCharArray()) {\n\t\t\tif (c == '(') {\n\t\t\t\tcurr++;\n\t\t\t\tmax = Math.max(max, curr);\n\t\t\t} else if (c == ')') {\n\t\t\t\tcurr--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n<file_sep>/src/main/java/com/leetcode/problems/medium/LongestPalindromicSubstring.java\npackage com.leetcode.problems.medium;\n\npublic class LongestPalindromicSubstring {\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n\n        int start = 0;\n        int end = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandFromCenter(s, i, i);\n            int len2 = expandFromCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n\n        return s.substring(start, end + 1);\n    }\n\n    private int expandFromCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n\n        return right - left - 1;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/problems/medium/FindAllAnagramsInString.java\npackage com.leetcode.problems.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindAllAnagramsInString {\n    public List<Integer> findAnagrams(String s, String p"}
{"ID": 7, "source": "Multi_HumanEval_java:HumanEval_java/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().contains(substring)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTreeDepth.java\npackage com.github.pedrovgs.problem10;\n\nimport com.github.pedrovgs.problem10.BinaryTree;\nimport com.github.pedrovgs.problem10.BinaryTree.Node;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class BinaryTreeDepth {\n\n    public static int depth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        int leftDepth = depth(root.getLeft());\n        int rightDepth = depth(root.getRight());\n        return Math.max(leftDepth, rightDepth) + 1;\n    }\n\n    public static int depthBFS(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        Queue<Node> queue = new LinkedList<Node>();\n        queue.add(root);\n        int depth = 0;\n        while (!queue.isEmpty()) {\n            depth++;\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                Node node = queue.poll();\n                if (node.getLeft()!= null) {\n                    queue.add(node.getLeft());\n                }\n                if (node.getRight()!= null) {\n                    queue.add(node.getRight());\n                }\n            }\n        }\n        return depth;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTree.java\npackage com.github.pedrovgs.problem10;\n\npublic class BinaryTree {\n\n    public static class Node {\n\n        private int value;\n        private Node left;\n        private Node right;\n\n        public Node(int value) {\n            this.value = value;\n        }\n\n        public int getValue() {\n            return value;\n        }\n\n        public void setValue(int value) {\n            this.value = value;\n        }\n\n        public Node getLeft() {\n            return left;\n        }\n\n        public"}
{"ID": 8, "source": "Multi_HumanEval_java:HumanEval_java/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t\tint sum = 0;\n\t\tint product = 1;\n\t\tfor (Object number : numbers) {\n\t\t\tsum += (int) number;\n\t\t\tproduct *= (int) number;\n\t\t}\n\t\treturn Arrays.asList(sum, product);\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * @param number\n     * @return\n     */\n    public static List<Integer> divisors(int number) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could be very large) containing integers.\n     * The array is either entirely composed of odd integers or entirely composed of even integers except for a single integer N.\n     * Write a method that takes the array as an argument and returns N.\n     *\n     * @param numbers\n     * @return\n     */\n    public static int stray(int[] numbers) {\n        int[] sorted = Arrays.stream(numbers).sorted().toArray();\n        if (sorted[0] == sorted[1]) {\n            return sorted[sorted.length - 1];\n        } else {\n            return sorted[0];\n        }\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * Given a positive integer, find the next perfect square.\n     *"}
{"ID": 9, "source": "Multi_HumanEval_java:HumanEval_java/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tStack<Object> stack = new Stack<Object>();\n\t\tfor (Object num : numbers) {\n\t\t\twhile (!stack.isEmpty() && (int)stack.peek() < (int)num) {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tstack.push(num);\n\t\t\tresult.add(stack.peek());\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTreeDepth.java\npackage com.github.pedrovgs.problem10;\n\nimport com.github.pedrovgs.problem10.BinaryTree.Node;\n\n/**\n * @author <NAME>.\n */\npublic class BinaryTreeDepth {\n\n  public static int depth(Node root) {\n    if (root == null) {\n      return 0;\n    }\n    return 1 + Math.max(depth(root.getLeft()), depth(root.getRight()));\n  }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem1/Fibonacci.java\npackage com.github.pedrovgs.problem1;\n\n/**\n * @author <NAME>.\n */\npublic class Fibonacci {\n\n  public static int fibonacci(int n) {\n    if (n == 0) {\n      return 0;\n    }\n    if (n == 1) {\n      return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n\n  public static int fibonacciIterative(int n) {\n    if (n == 0) {\n      return 0;\n    }\n    if (n == 1) {\n      return 1;\n    }\n    int previous = 0;\n    int current = 1;\n    for (int i = 2; i <= n; i++) {\n      int temp = current;\n      current += previous;\n      previous = temp;\n    }\n    return current;\n  }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem1/FibonacciTest.java\npackage com.github.pedrovgs.problem1;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\n/**\n"}
{"ID": 10, "source": "Multi_HumanEval_java:HumanEval_java/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t\tif (string.length() == 0) {\n\t\t\treturn string;\n\t\t}\n\t\tint length = string.length();\n\t\tint i = 0;\n\t\tint j = length - 1;\n\t\twhile (i < j) {\n\t\t\tif (string.charAt(i) == string.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (i >= j) {\n\t\t\treturn string;\n\t\t}\n\t\tString prefix = string.substring(0, i);\n\t\tString postfix = string.substring(i, length);\n\t\tString reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\t\treturn string + reversedPrefix;\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/Graph.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private List<Vertex> vertices;\n    private List<Edge> edges;\n\n    public Graph() {\n        this.vertices = new ArrayList<Vertex>();\n        this.edges = new ArrayList<Edge>();\n    }\n\n    public void addVertex(Vertex vertex) {\n        this.vertices.add(vertex);\n    }\n\n    public void addEdge(Edge edge) {\n        this.edges.add(edge);\n    }\n\n    public List<Vertex> getVertices() {\n        return this.vertices;\n    }\n\n    public List<Edge> getEdges() {\n        return this.edges;\n    }\n\n    public void printGraph() {\n        for (Vertex vertex : this.vertices) {\n            System.out.println(\"Vertex \" + vertex);\n            System.out.print(\"Edges \");\n            for (Edge edge : this.edges) {\n                if (edge.getSource().equals(vertex)) {\n                    System.out.print(edge.getDestination() + \" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/Vertex.java\npackage com.interview.graph;\n\npublic class Vertex {\n    private String name;\n    private boolean visited;\n\n    public Vertex(String name) {\n        this.name = name;\n        this.visited = false;\n    }\n\n    public String getName() {\n        return this.name"}
{"ID": 11, "source": "Multi_HumanEval_java:HumanEval_java/11", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t\tint aInt = Integer.parseInt(a, 2);\n\t\tint bInt = Integer.parseInt(b, 2);\n\t\tint xor = aInt ^ bInt;\n\t\tString xorString = Integer.toBinaryString(xor);\n\t\treturn xorString;\n    }\n}\n<file_sep>/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java\n/**\n * BinarySearchTree.java\n *\n * @author <NAME>, <EMAIL>\n *\n * A binary search tree is a binary tree where every node has a value and\n * every node's value is greater than all values in its left subtree and less\n * than all values in its right subtree.\n *\n * This implementation supports the following operations:\n *\n * - Insertion\n * - Deletion\n * - Searching\n * - Finding the minimum and maximum values\n * - Finding the successor and predecessor of a value\n * - Finding the kth smallest value\n * - Finding the height of the tree\n * - Finding the size of the tree\n * - Checking if the tree is balanced\n * - Checking if the tree is a BST\n * - Finding the lowest common ancestor of two values\n * - Finding the distance between two values\n * - Finding the kth largest value\n * - Finding the kth smallest value\n * - Finding the inorder successor of a node\n * - Finding the inorder predecessor of a node\n * - Finding the kth smallest value in a subtree\n * - Finding the kth largest value in a subtree\n * - Finding the inorder successor of a node in a subtree\n * - Finding the inorder predecessor of a node in a subtree\n * - Finding the number of nodes in a subtree\n * - Finding the number of nodes in a subtree with a given value\n * - Finding the number of nodes in a subtree with a value greater than a given value\n * - Finding the number of nodes in a subtree with a value less than a given value\n * - Finding the number of nodes in a subtree with a value greater than or equal to a given value\n * - Finding the number of nodes in a subtree with a value less than or equal to a given value\n * - Finding the number of nodes"}
{"ID": 12, "source": "Multi_HumanEval_java:HumanEval_java/12", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t\tif (strings.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString longest = (String) strings.get(0);\n\t\tfor (int i = 1; i < strings.size(); i++) {\n\t\t\tString s = (String) strings.get(i);\n\t\t\tif (s.length() > longest.length()) {\n\t\t\t\tlongest = s;\n\t\t\t}\n\t\t}\n\t\treturn longest;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class"}
{"ID": 13, "source": "Multi_HumanEval_java:HumanEval_java/13", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t\tif (a == 0) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b == 0) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a == b) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a > b) {\n\t\t\treturn greatestCommonDivisor(a-b, b);\n\t\t}\n\t\treturn greatestCommonDivisor(a, b-a);\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code"}
{"ID": 14, "source": "Multi_HumanEval_java:HumanEval_java/14", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t\tList<Object> prefixes = new ArrayList<Object>();\n\t\tfor (int i = 1; i <= string.length(); i++) {\n\t\t\tprefixes.add(string.substring(0, i));\n\t\t}\n\t\treturn prefixes;\n    }\n}\n<file_sep>/src/main/java/com/clayton/coding/problems/FindMissingNumber.java\npackage com.clayton.coding.problems;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMissingNumber {\n    /**\n     * Given an array of integers where each integer represents a different\n     * position in the array, find the first missing integer in the array.\n     *\n     * Example:\n     * >>> find_missing_number([3, 2, 0, 4])\n     * 1\n     *\n     * The integer 1 is missing from the array.\n     *\n     */\n    public static int findMissingNumber(int[] numbers) {\n\t\tint i = 0;\n\t\twhile (i < numbers.length) {\n\t\t\tif (numbers[i]!= i && numbers[i] >= 0 && numbers[i] < numbers.length && numbers[i]!= numbers[numbers[i]]) {\n\t\t\t\tint temp = numbers[i];\n\t\t\t\tnumbers[i] = numbers[temp];\n\t\t\t\tnumbers[temp] = temp;\n\t\t\t} else {\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < numbers.length; i++) {\n\t\t\tif (numbers[i]!= i) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn numbers.length;\n    }\n}\n<file_sep>/src/main/java/com/clayton/coding/problems/FindMissingNumber2.java\npackage com.clayton.coding.problems;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMissingNumber2 {\n    /**\n     * Given an array of integers where each integer represents a different\n     * position in the array, find the first missing integer in the array.\n     *\n     * Example:\n     * >>> find_missing_number([3, 2, 0, 4])\n     * 1\n     *\n     * The integer"}
{"ID": 15, "source": "Multi_HumanEval_java:HumanEval_java/15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tresult += i + \" \";\n\t\t}\n\t\treturn result.trim();\n    }\n}\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 16, "source": "Multi_HumanEval_java:HumanEval_java/16", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t\tint count = 0;\n\t\tboolean[] seen = new boolean[256];\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tchar c = string.charAt(i);\n\t\t\tif (!seen[c]) {\n\t\t\t\tcount++;\n\t\t\t\tseen[c] = true;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/jlee/problem/leetcode/LeetCode129.java\npackage com.jlee.problem.leetcode;\n\nimport com.jlee.datastructure.TreeNode;\n\npublic class LeetCode129 {\n\t/*\n\t * Given a binary tree containing digits from 0-9 only, each root-to-leaf path\n\t * could represent a number.\n\t * \n\t * An example is the root-to-leaf path 1->2->3 which represents the number 123.\n\t * \n\t * Find the total sum of all root-to-leaf numbers.\n\t * \n\t * For example,\n\t * \n\t * 1 2 3\n\t * \n\t * The total sum is 123 + 124 + 125 = 372.\n\t */\n\tpublic int sumNumbers(TreeNode root) {\n\t\treturn sumNumbers(root, 0);\n\t}\n\n\tprivate int sumNumbers(TreeNode root, int sum) {\n\t\tif (root == null)\n\t\t\treturn 0;\n\t\tsum = sum * 10 + root.val;\n\t\tif (root.left == null && root.right == null)\n\t\t\treturn sum;\n\t\treturn sumNumbers(root.left, sum) + sumNumbers(root.right, sum);\n\t}\n}\n<file_sep>/src/main/java/com/jlee/problem/leetcode/LeetCode209.java\npackage com.jlee.problem.leetcode;\n\npublic class LeetCode209 {\n\t/*\n\t * Given an array of n positive integers and a positive integer s, find the\n\t * minimal length of a subarray of which the sum >= s. If there isn't one,\n\t * return 0 instead.\n\t * \n\t * For example, given the array [2,3,1,2,4,3] and s = 7, the subarray [4"}
{"ID": 17, "source": "Multi_HumanEval_java:HumanEval_java/17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tString[] notes = musicString.split(\" \");\n\t\tfor (String note : notes) {\n\t\t\tif (note.equals(\"o\")) {\n\t\t\t\tresult.add(4);\n\t\t\t} else if (note.equals(\"o|\")) {\n\t\t\t\tresult.add(2);\n\t\t\t} else if (note.equals(\".|\")) {\n\t\t\t\tresult.add(1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheCapitals.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheCapitals {\n    public static List<Integer> findCapitals(String text) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isUpperCase(text.charAt(i))) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt == (int) sqrt) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/"}
{"ID": 18, "source": "Multi_HumanEval_java:HumanEval_java/18", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t\tif (string.length() == 0 || substring.length() == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tif (string.substring(i).startsWith(substring)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code"}
{"ID": 19, "source": "Multi_HumanEval_java:HumanEval_java/19", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t\tString[] numArray = numbers.split(\" \");\n\t\tint[] numInt = new int[numArray.length];\n\t\tfor (int i = 0; i < numArray.length; i++) {\n\t\t\tif (numArray[i].equals(\"zero\")) {\n\t\t\t\tnumInt[i] = 0;\n\t\t\t} else if (numArray[i].equals(\"one\")) {\n\t\t\t\tnumInt[i] = 1;\n\t\t\t} else if (numArray[i].equals(\"two\")) {\n\t\t\t\tnumInt[i] = 2;\n\t\t\t} else if (numArray[i].equals(\"three\")) {\n\t\t\t\tnumInt[i] = 3;\n\t\t\t} else if (numArray[i].equals(\"four\")) {\n\t\t\t\tnumInt[i] = 4;\n\t\t\t} else if (numArray[i].equals(\"five\")) {\n\t\t\t\tnumInt[i] = 5;\n\t\t\t} else if (numArray[i].equals(\"six\")) {\n\t\t\t\tnumInt[i] = 6;\n\t\t\t} else if (numArray[i].equals(\"seven\")) {\n\t\t\t\tnumInt[i] = 7;\n\t\t\t} else if (numArray[i].equals(\"eight\")) {\n\t\t\t\tnumInt[i] = 8;\n\t\t\t} else if (numArray[i].equals(\"nine\")) {\n\t\t\t\tnumInt[i] = 9;\n\t\t\t}\n\t\t}\n\t\tArrays.sort(numInt);\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < numInt.length; i++) {\n\t\t\tif (numInt[i] == 0) {\n\t\t\t\tresult += \"zero \";\n\t\t\t} else if (numInt[i] == 1) {\n\t\t\t\tresult += \"one \";\n\t\t\t} else if (numInt[i] == 2) {\n\t\t\t\tresult += \"two \";\n\t\t\t} else if (numInt[i] == 3) {\n\t\t\t\tresult += \"three \";\n\t\t\t} else if (numInt[i] == 4) {\n\t\t\t\tresult += \"four \";\n\t\t\t} else if (numInt[i] == 5) {\n\t\t\t\tresult += \"five \";\n\t\t\t} else if (numInt[i] == 6) {\n\t\t\t\tresult"}
{"ID": 20, "source": "Multi_HumanEval_java:HumanEval_java/20", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t\tList<Double> result = new ArrayList<Double>();\n\t\tdouble min = Double.MAX_VALUE;\n\t\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\t\tif (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n\t\t\t\t\tmin = Math.abs(numbers.get(i) - numbers.get(j));\n\t\t\t\t\tresult.clear();\n\t\t\t\t\tresult.add(numbers.get(i));\n\t\t\t\t\tresult.add(numbers.get(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/FindTheMissingLetter.java\npackage com.codewars;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingLetter {\n    /**\n     * Write a method that takes an array of consecutive letters as input and returns the missing letter in the array.\n     *\n     * You will always get an valid array. And it will be always exactly one letter be missing. The length of the array\n     * will always be at least 2.\n     * The array will always contain letters in only one case.\n     *\n     * Example:\n     *\n     * ['a','b','c','d','f'] -> 'e'\n     * ['O','Q','R','S'] -> 'P'\n     *\n     * (Use the English alphabet with 26 letters!)\n     */\n    public static char findMissingLetter(char[] array) {\n\t\tfor (int i = 0; i < array.length - 1; i++) {\n\t\t\tif (array[i + 1] - array[i]!= 1) {\n\t\t\t\treturn (char) (array[i] + 1);\n\t\t\t}\n\t\t}\n\t\treturn'';\n    }\n}\n<file_sep>/src/main/java/com/codewars/FindTheMissingNumber.java\npackage com.codewars;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingNumber {\n    /**\n     * An array of integers"}
{"ID": 21, "source": "Multi_HumanEval_java:HumanEval_java/21", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t\tList<Double> result = new ArrayList<Double>();\n\t\tdouble min = Collections.min(numbers);\n\t\tdouble max = Collections.max(numbers);\n\t\tfor (double num : numbers) {\n\t\t\tresult.add((num - min) / (max - min));\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                result.add(i);\n                if (i!= n / i) {\n                    result.add(n / i);\n                }\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt == (int) sqrt) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n    public static int findSmallest("}
{"ID": 22, "source": "Multi_HumanEval_java:HumanEval_java/22", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object value : values) {\n\t\t\tif (value instanceof Integer) {\n\t\t\t\tresult.add(value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTreeDepth.java\npackage com.github.pedrovgs.problem10;\n\nimport com.github.pedrovgs.problem9.BinaryTree;\n\n/**\n * @author <NAME>.\n */\npublic class BinaryTreeDepth {\n\n    public static int calculateDepth(BinaryTree tree) {\n        if (tree == null) {\n            return 0;\n        }\n        return 1 + Math.max(calculateDepth(tree.getLeft()), calculateDepth(tree.getRight()));\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem1/Fibonacci.java\npackage com.github.pedrovgs.problem1;\n\n/**\n * @author <NAME>.\n */\npublic class Fibonacci {\n\n    public static int calculateFibonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem11/BinaryTreeInOrderTraversal.java\npackage com.github.pedrovgs.problem11;\n\nimport com.github.pedrovgs.problem9.BinaryTree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author <NAME>.\n */\npublic class BinaryTreeInOrderTraversal {\n\n    public static List<Integer> traverse(BinaryTree tree) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (tree!= null) {\n            result.addAll(traverse(tree.getLeft()));\n            result.add(tree.getValue());\n            result.addAll(traverse(tree.getRight()));\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem12/BinaryTreePreOrderTraversal."}
{"ID": 23, "source": "Multi_HumanEval_java:HumanEval_java/23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t\tint length = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tlength += 1;\n\t\t}\n\t\treturn length;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String string = in.next();\n        System.out.println(strlen(string));\n    }\n}\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 24, "source": "Multi_HumanEval_java:HumanEval_java/24", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t\tint largestDivisor = 1;\n\t\tfor (int i = 2; i <= n/2; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tlargestDivisor = i;\n\t\t\t}\n\t\t}\n\t\treturn largestDivisor;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_"}
{"ID": 25, "source": "Multi_HumanEval_java:HumanEval_java/25", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t\tList<Integer> factors = new ArrayList<Integer>();\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tfactors.add(i);\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\treturn factors;\n    }\n}\n<file_sep>/Python/Python_1/Python_1_1/Python_1_1_1/Python_1_1_1_1/Python_1_1_1_1_1/Python_1_1_1_1_1_1/Python_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1/Python_1_1_1_1_1_1_1_1_1"}
{"ID": 26, "source": "Multi_HumanEval_java:HumanEval_java/26", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object n : numbers) {\n\t\t\tif (!result.contains(n)) {\n\t\t\t\tresult.add(n);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallestIntegerInTheArray.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheSmallestIntegerInTheArray {\n    public static int findSmallestInt(int[] args) {\n        Arrays.sort(args);\n        return"}
{"ID": 27, "source": "Multi_HumanEval_java:HumanEval_java/27", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t\tchar[] chars = string.toCharArray();\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tif (Character.isUpperCase(chars[i])) {\n\t\t\t\tchars[i] = Character.toLowerCase(chars[i]);\n\t\t\t} else if (Character.isLowerCase(chars[i])) {\n\t\t\t\tchars[i] = Character.toUpperCase(chars[i]);\n\t\t\t}\n\t\t}\n\t\treturn new String(chars);\n    }\n}\n<file_sep>/Python/Python_Data_Structures/Lists/Find_the_Second_Largest_Number.py\ndef find_second_largest(nums):\n    largest = second_largest = nums[0]\n    for num in nums:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest:\n            second_largest = num\n    return second_largest\n<file_sep>/Python/Python_Data_Structures/Lists/Find_the_Smallest_Number.py\ndef find_smallest(nums):\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n<file_sep>/Python/Python_Data_Structures/Lists/Find_the_Largest_Number.py\ndef find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n<file_sep>/Python/Python_Data_Structures/Lists/Find_the_Smallest_and_Largest_Numbers.py\ndef find_smallest_and_largest(nums):\n    smallest = largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n<file_sep>/Python/Python_Data_Structures/Lists/Find_the_Second_Smallest_Number.py\ndef find_second_smallest(nums):\n    smallest = second_smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest\n<|endoftext|><repo_name>kamlesh-kumar-singh/kamlesh-kumar-singh<file_sep>/README.md\n"}
{"ID": 28, "source": "Multi_HumanEval_java:HumanEval_java/28", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t\tString result = \"\";\n\t\tfor (Object s : strings) {\n\t\t\tresult += s;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/python/src/main/python/codewars/kyu6/FindTheMissingLetter.py\ndef find_missing_letter(chars):\n    \"\"\"\n    Find the missing letter\n    :param chars:\n    :return:\n    \"\"\"\n    for i in range(len(chars)-1):\n        if ord(chars[i+1])!= ord(chars[i]) + 1:\n            return chr(ord(chars[i]) + 1)\n    return None\n<file_sep>/python/src/main/python/codewars/kyu6/FindTheParityOutlier.py\ndef find_outlier(integers):\n    \"\"\"\n    Find the parity outlier\n    :param integers:\n    :return:\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in integers:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even > odd:\n        for i in integers:\n            if i % 2!= 0:\n                return i\n    else:\n        for i in integers:\n            if i % 2 == 0:\n                return i\n<file_sep>/python/src/main/python/codewars/kyu6/FindTheOddInt.py\ndef find_it(seq):\n    \"\"\"\n    Find the odd int\n    :param seq:\n    :return:\n    \"\"\"\n    counts = {}\n    for i in seq:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for k, v in counts.items():\n        if v % 2!= 0:\n            return k\n<file_sep>/python/src/main/python/codewars/kyu6/YourOrderPlease.py\ndef order(sentence):\n    \"\"\"\n    Your order, please\n    :param sentence:\n    :return:\n    \"\"\"\n    words = sentence.split()\n    result = [\"\"] * len(words)\n    for w in words:\n        for i in range(len(w)):\n            if w[i].isdigit():\n                result[int(w[i]) - 1] = w\n    return \" \".join(result)\n<file_sep>/python/src/main/python/code"}
{"ID": 29, "source": "Multi_HumanEval_java:HumanEval_java/29", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().startsWith(prefix)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    public static String vowelIndices(String word) {\n        List<Integer> vowels = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            if (\"aeiouAEIOU\".contains(word.substring(i, i + 1))) {\n                vowels.add(i + 1);\n            }\n        }\n        return vowels.toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\", \", \",\");\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors.isEmpty()? new ArrayList<Integer>() {{\n            add(n);\n        }} : divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/"}
{"ID": 30, "source": "Multi_HumanEval_java:HumanEval_java/30", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object i : l) {\n\t\t\tif ((Integer)i > 0) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/"}
{"ID": 31, "source": "Multi_HumanEval_java:HumanEval_java/31", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t\tif (n == 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code"}
{"ID": 32, "source": "Multi_HumanEval_java:HumanEval_java/33", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 3 == 0) {\n\t\t\t\tresult.add(l.get(i));\n\t\t\t} else {\n\t\t\t\tresult.add(l.get(i));\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < result.size(); i += 3) {\n\t\t\tList<Integer> temp = new ArrayList<Integer>();\n\t\t\tfor (int j = i; j < i + 3; j++) {\n\t\t\t\ttemp.add(result.get(j));\n\t\t\t}\n\t\t\tCollections.sort(temp);\n\t\t\tfor (int j = i; j < i + 3; j++) {\n\t\t\t\tresult.set(j, temp.get(j - i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                result.add(i);\n                if (i!= n / i) {\n                    result.add(n / i);\n                }\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors2.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors2 {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
{"ID": 33, "source": "Multi_HumanEval_java:HumanEval_java/34", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (Integer i : l) {\n\t\t\tif (!result.contains(i)) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(Unique.unique(l));\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python"}
{"ID": 34, "source": "Multi_HumanEval_java:HumanEval_java/35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t\tint max = l.get(0);\n\t\tfor (int i = 1; i < l.size(); i++) {\n\t\t\tif (l.get(i) > max) {\n\t\t\t\tmax = l.get(i);\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/epam/rd/autotest/java/practice1/Part1.java\npackage com.epam.rd.autotest.java.practice1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Part1 {\n    /**\n     * Return the sum of the first n integers.\n     * >>> sum_of_n(5)\n     * 15\n     * >>> sum_of_n(10)\n     * 55\n     */\n    public static int sumOfN(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n    }\n\n    /**\n     * Return the sum of the first n cubes.\n     * >>> sum_of_n_cubes(5)\n     * 225\n     * >>> sum_of_n_cubes(10)\n     * 3025\n     */\n    public static int sumOfNCubes(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i * i * i;\n\t\t}\n\t\treturn sum;\n    }\n\n    /**\n     * Return the sum of the first n even integers.\n     * >>> sum_of_n_even_integers(5)\n     * 30\n     * >>> sum_of_n_even_integers(10)\n     * 110\n     */\n    public static int sumOfNEvenIntegers(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 2; i <= 2 * n; i += 2) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n    }\n\n    /**\n     * Return the sum of the first n odd integers.\n     * >>> sum_of_n_odd_integers"}
{"ID": 35, "source": "Multi_HumanEval_java:HumanEval_java/36", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t\tString s = Integer.toString(i);\n\t\t\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\t\t\tif (s.charAt(j) == '7') {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/"}
{"ID": 36, "source": "Multi_HumanEval_java:HumanEval_java/37", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t\tList<Integer> even = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\teven.add(l.get(i));\n\t\t\t}\n\t\t}\n\t\tCollections.sort(even);\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tl.set(i, even.get(i/2));\n\t\t\t}\n\t\t}\n\t\treturn l;\n    }\n}\n<file_sep>/hw1/src/main/java/edu/cmu/cs/cs214/hw1/Test.java\npackage edu.cmu.cs.cs214.hw1;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Test {\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        l.add(5);\n        l.add(6);\n        l.add(7);\n        l.add(8);\n        l.add(9);\n        l.add(10);\n        l.add(11);\n        l.add(12);\n        l.add(13);\n        l.add(14);\n        l.add(15);\n        l.add(16);\n        l.add(17);\n        l.add(18);\n        l.add(19);\n        l.add(20);\n        l.add(21);\n        l.add(22);\n        l.add(23);\n        l.add(24);\n        l.add(25);\n        l.add(26);\n        l.add(27);\n        l.add(28);\n        l.add(29);\n        l.add(30);\n        l.add(31);\n        l.add(32);\n        l.add(33);\n        l.add(34);\n        l.add(35);\n        l.add(36);\n        l.add(37"}
{"ID": 37, "source": "Multi_HumanEval_java:HumanEval_java/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tint c = 0;\n\t\tint count = 0;\n\t\twhile (count < n) {\n\t\t\tc = a + b;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tif (isPrime(c)) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn c;\n    }\n    \n    public static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n    \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(primeFib(n));\n    }\n}\n<file_sep>/Python/Python_Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Pro"}
{"ID": 38, "source": "Multi_HumanEval_java:HumanEval_java/40", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\t\tfor (int k = j + 1; k < l.size(); k++) {\n\t\t\t\t\tif (l.get(i) + l.get(j) + l.get(k) == 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/Python/Python_OOP/bank_account.py\nclass BankAccount:\n    def __init__(self, int_rate=0.01, balance=0):\n        self.int_rate = int_rate\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n        return self\n    \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self\n    \n    def display_account_info(self):\n        print(f\"Balance: ${self.balance}\")\n        return self\n    \n    def yield_interest(self):\n        self.balance *= (1 + self.int_rate)\n        return self\n\naccount1 = BankAccount(0.01, 100)\naccount2 = BankAccount(0.02, 200)\n\naccount1.deposit(100).deposit(200).deposit(300).withdraw(100).yield_interest().display_account_info()\naccount2.deposit(100).deposit(200).withdraw(100).withdraw(100).withdraw(100).withdraw(100).yield_interest().display_account_info()\n<file_sep>/Python/Python_OOP/user.py\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.account_balance = 0\n    \n    def make_deposit(self, amount):\n        self.account_balance += amount\n    \n    def make_withdrawal(self, amount):\n        self.account_balance -= amount\n    \n    def display_user_balance(self):\n        print(f\"User: {self.name}, Balance: ${self.account_balance}\")\n    \n    def transfer_money(self, other_user, amount):\n        self"}
{"ID": 39, "source": "Multi_HumanEval_java:HumanEval_java/41", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tif (i == j) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = carRaceCollision(n);\n        System.out.println(result);\n    }\n}\n<file_sep>/src/main/java/com/example/demo/BinarySearch.java\npackage com.example.demo;\n\npublic class BinarySearch {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int target = 10;\n        int result = binarySearch(arr, target);\n        System.out.println(result);\n    }\n\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;\n        int right = arr.length - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == target) {\n                return mid;\n            } else if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/BinarySearchTree.java\npackage com.example.demo;\n\npublic class BinarySearchTree {\n    public static void main(String[] args) {\n        BinarySearchTree tree = new BinarySearchTree();\n        tree.insert(5);\n        tree.insert(3);\n        tree.insert(7);\n        tree.insert(2);\n        tree.insert(4);\n        tree.insert(6);\n        tree.insert(8);\n        tree.inorderTraversal();\n        System.out.println();\n        tree.preorderTraversal();\n        System.out.println();\n        tree.postorderTraversal();\n        System.out.println();\n        System.out.println(tree.search(6));\n        System.out.println(tree.search("}
{"ID": 40, "source": "Multi_HumanEval_java:HumanEval_java/42", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t\tList<Object> newList = new ArrayList<Object>();\n\t\tfor (Object elem : l) {\n\t\t\tnewList.add((Integer)elem + 1);\n\t\t}\n\t\treturn newList;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python"}
{"ID": 41, "source": "Multi_HumanEval_java:HumanEval_java/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t\tif (l.size() < 2) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\t\tif (l.get(i) + l.get(j) == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/"}
{"ID": 42, "source": "Multi_HumanEval_java:HumanEval_java/44", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t\tString result = \"\";\n\t\twhile (x > 0) {\n\t\t\tresult = x % base + result;\n\t\t\tx = x / base;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/chen0040/leetcode/binarysearch/SearchInRotatedSortedArray.java\npackage com.github.chen0040.leetcode.binarysearch;\n\nimport java.util.Arrays;\n\npublic class SearchInRotatedSortedArray {\n    public int search(int[] nums, int target) {\n        if (nums == null || nums.length == 0) {\n            return -1;\n        }\n\n        int pivot = findPivot(nums);\n\n        int left = binarySearch(nums, 0, pivot - 1, target);\n        if (left!= -1) {\n            return left;\n        }\n\n        int right = binarySearch(nums, pivot, nums.length - 1, target);\n        return right;\n    }\n\n    private int findPivot(int[] nums) {\n        int low = 0;\n        int high = nums.length - 1;\n\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n\n            if (nums[mid] > nums[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    private int binarySearch(int[] nums, int low, int high, int target) {\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        SearchInRotatedSortedArray solution = new SearchInRotatedSortedArray();\n        int[] nums = {4, 5, 6, 7, 0, 1, 2};\n        int target = 0;\n        int result = solution.search(nums, target);\n        System.out.println(result);\n    }\n}\n<file_sep>/src/main/java/com/github/chen"}
{"ID": 43, "source": "Multi_HumanEval_java:HumanEval_java/45", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t\treturn (a*h)/2.0;\n    }\n}\n<file_sep>/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/Python/"}
{"ID": 44, "source": "Multi_HumanEval_java:HumanEval_java/46", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t\tif (n == 0) return 0;\n\t\tif (n == 1) return 0;\n\t\tif (n == 2) return 2;\n\t\tif (n == 3) return 0;\n\t\tint[] fib = new int[n+1];\n\t\tfib[0] = 0;\n\t\tfib[1] = 0;\n\t\tfib[2] = 2;\n\t\tfib[3] = 0;\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\t\t}\n\t\treturn fib[n];\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(fib4(n));\n    }\n}\n<file_sep>/src/main/java/com/code/interview/questions/arrays/FindAllDuplicatesInArray.java\npackage com.code.interview.questions.arrays;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.\n * Find all the elements that appear twice in this array.\n * Could you do it without extra space and in O(n) runtime?\n * Example:\n * Input:\n * [4,3,2,7,8,2,3,1]\n * Output:\n * [2,3]\n */\npublic class FindAllDuplicatesInArray {\n    public List<Integer> findDuplicates(int[] nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            int index = Math.abs(nums[i]) - 1;\n            if (nums[index] < 0) {\n                result.add(index + 1);\n            } else {\n                nums[index] = -nums[index];\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/code/interview/questions/"}
{"ID": 45, "source": "Multi_HumanEval_java:HumanEval_java/47", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t\tif (l.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tCollections.sort(l);\n\t\tint mid = l.size() / 2;\n\t\tif (l.size() % 2 == 1) {\n\t\t\treturn l.get(mid);\n\t\t} else {\n\t\t\treturn (l.get(mid) + l.get(mid - 1)) / 2.0;\n\t\t}\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python"}
{"ID": 46, "source": "Multi_HumanEval_java:HumanEval_java/48", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t\tif (text.length() == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (text.length() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (text.length() == 2) {\n\t\t\treturn text.charAt(0) == text.charAt(1);\n\t\t}\n\t\tif (text.charAt(0) == text.charAt(text.length() - 1)) {\n\t\t\treturn isPalindrome(text.substring(1, text.length() - 1));\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n\nclass FindTheDivisorsTest {\n    public static void main(String[] args) {\n        System.out.println(FindTheDivisors.divisors(15));\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;"}
{"ID": 47, "source": "Multi_HumanEval_java:HumanEval_java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tif (n == 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (n % 2 == 1) {\n\t\t\treturn (2 * modp(n-1, p)) % p;\n\t\t}\n\t\tint x = modp(n/2, p);\n\t\treturn (x * x) % p;\n    }\n}\n<file_sep>/Python/factorial.py\ndef factorial(n):\n    \"\"\"Return the factorial of n, an exact integer >= 0.\n\n    >>> [factorial(n) for n in range(6)]\n    [1, 1, 2, 6, 24, 120]\n    >>> factorial(30)\n    265252859812191058636308480000000\n    >>> factorial(-1)\n    Traceback (most recent call last):\n       ...\n    ValueError: n must be >= 0\n\n    Factorial is only defined for integers.\n    >>> factorial(30.1)\n    Traceback (most recent call last):\n       ...\n    ValueError: n must be an integer\n\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n<file_sep>/Python/is_prime.py\ndef is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\n\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16"}
{"ID": 48, "source": "Multi_HumanEval_java:HumanEval_java/51", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\tif (vowels.indexOf(text.charAt(i)) == -1) {\n\t\t\t\tresult += text.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n<file_sep>/Python/remove_vowels.py\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n<file_sep>/Python/remove_vowels_test.py\nimport unittest\nfrom remove_vowels import remove_vowels\n\n\nclass RemoveVowelsTest(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertEqual(remove_vowels(''), '')\n\n    def test_string_with_vowels(self):\n        self.assertEqual(remove_vowels('abcdef'), 'bcdf')\n\n    def test_string_with_all_vowels(self):\n        self.assertEqual(remove_vowels('aaaaa'), '')\n\n    def test_string_with_consonants(self):\n        self.assertEqual(remove_vowels('zbcd'), 'zbcd')\n\n    def test_string_with_mixed_vowels_and_consonants(self):\n        self.assertEqual(remove_vowels('abcde'), 'bcde')\n\n    def test_string_with_uppercase_vowels(self):\n        self.assertEqual(remove_vowels('AAABAA'), 'BB')\n\n    def test_string_with_newlines(self):"}
{"ID": 49, "source": "Multi_HumanEval_java:HumanEval_java/52", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t\tfor (Integer i : l) {\n\t\t\tif (i >= t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    public static String vowelIndices(String word) {\n        List<Integer> vowels = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            if (\"aeiouAEIOU\".contains(String.valueOf(word.charAt(i)))) {\n                vowels.add(i + 1);\n            }\n        }\n        return vowels.toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\", \", \",\");\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n   "}
{"ID": 50, "source": "Multi_HumanEval_java:HumanEval_java/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t\treturn x + y;\n    }\n}\n\nclass Subtract {\n    /**\n     * Subtract two numbers x and y\n     * >>> subtract(5, 3)\n     * 2\n     * >>> subtract(10, 5)\n     * 5\n     *\n     */\n    public static int subtract(int x, int y) {\n\t\treturn x - y;\n    }\n}\n\nclass Multiply {\n    /**\n     * Multiply two numbers x and y\n     * >>> multiply(2, 3)\n     * 6\n     * >>> multiply(5, 7)\n     * 35\n     *\n     */\n    public static int multiply(int x, int y) {\n\t\treturn x * y;\n    }\n}\n\nclass Divide {\n    /**\n     * Divide two numbers x and y\n     * >>> divide(10, 2)\n     * 5\n     * >>> divide(15, 3)\n     * 5\n     *\n     */\n    public static int divide(int x, int y) {\n\t\treturn x / y;\n    }\n}\n\nclass Calculator {\n    /**\n     * A simple calculator\n     *\n     * >>> add(2, 3)\n     * 5\n     * >>> subtract(5, 3)\n     * 2\n     * >>> multiply(2, 3)\n     * 6\n     * >>> divide(10, 2)\n     * 5\n     *\n     */\n    public static int add(int x, int y) {\n\t\treturn x + y;\n    }\n\n    public static int subtract(int x, int y) {\n\t\treturn x - y;\n    }\n\n    public static int multiply(int x, int y) {\n\t\treturn x * y;\n    }\n\n    public static int divide(int x, int y) {\n\t\treturn x / y;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n\t\tint x = 2;\n\t\tint y = 3;\n\t\tint sum = Add.add(x, y);\n\t\tint difference = Subtract.subtract(x, y);\n\t\tint product = Multiply.multiply(x, y);\n\t\tint quotient = Divide.divide(x, y);\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tSystem.out.println(\"Difference: \" + difference);\n\t\tSystem."}
{"ID": 51, "source": "Multi_HumanEval_java:HumanEval_java/54", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t\tif (s0.length()!= s1.length()) {\n\t\t\treturn false;\n\t\t}\n\t\tint[] counts = new int[256];\n\t\tfor (int i = 0; i < s0.length(); i++) {\n\t\t\tcounts[s0.charAt(i)]++;\n\t\t}\n\t\tfor (int i = 0; i < s1.length(); i++) {\n\t\t\tcounts[s1.charAt(i)]--;\n\t\t}\n\t\tfor (int i = 0; i < counts.length; i++) {\n\t\t\tif (counts[i]!= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTreeDepth.java\npackage com.github.pedrovgs.problem10;\n\nimport com.github.pedrovgs.problem10.BinaryTree.Node;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinaryTreeDepth {\n    /**\n     * * Given a binary tree, find its maximum depth.\n     * The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n     *\n     * >>> tree = BinaryTree([1, [2, [4], [5]], [3, [6], [7]]])\n     * >>> tree.depth()\n     * 3\n     *\n     */\n    public static Integer depth(Node root) {\n\t\tif (root == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1 + Math.max(depth(root.left), depth(root.right));\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem11/BinaryTreeInOrderTraversal.java\npackage com.github.pedrovgs.problem11;\n\nimport com.github.pedrovgs.problem11.BinaryTree.Node;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinaryTreeInOrderTraversal {\n    /**\n     * * Given a binary tree, return the inorder traversal of its nodes' values.\n     * >>>"}
{"ID": 52, "source": "Multi_HumanEval_java:HumanEval_java/55", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t\tif (n == 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (n == 2) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn fib(n-1) + fib(n-2);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(fib(n));\n    }\n}\n<file_sep>/Python/Python_Functionals/Validating_Email_Addresses_With_Filter.py\nimport re\n\ndef fun(s):\n    pattern = r'^[a-zA-Z][\\w\\-]+@[a-zA-Z]+\\.[a-zA-Z]{1,3}$'\n    return re.match(pattern, s)\n\ndef filter_mail(emails):\n    return list(filter(fun, emails))\n\nif __name__ == '__main__':\n    n = int(input())\n    emails = []\n    for _ in range(n):\n        emails.append(input())\n\nfiltered_emails = filter_mail(emails)\nfiltered_emails.sort()\nprint(filtered_emails)\n<file_sep>/Python/Python_Functionals/Map_and_Lambda_Function.py\ncube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[0:n]\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n<file_sep>/Python/Python_Functionals/Reduce_Function.py\nfrom functools import reduce\n\ndef product(fracs):\n    t = reduce(lambda x, y: x*y, fracs)\n    return t.numerator, t.denominator\n\nif __name__ == '__main__':\n    from fractions import Fraction\n    fracs = [Fraction(*map(int, input().split())) for _ in range(int(input()))]\n    result = product(fracs)\n    print(*result)\n<file_sep>/Python/Python_Functionals/Validating_and_"}
{"ID": 53, "source": "Multi_HumanEval_java:HumanEval_java/56", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tif (brackets.charAt(i) == '<') {\n\t\t\t\tstack.push(brackets.charAt(i));\n\t\t\t} else if (brackets.charAt(i) == '>') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (stack.isEmpty()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/"}
{"ID": 54, "source": "Multi_HumanEval_java:HumanEval_java/57", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t\tif (l.size() < 2) {\n\t\t\treturn true;\n\t\t}\n\t\tBoolean increasing = l.get(1) >= l.get(0);\n\t\tfor (int i = 1; i < l.size() - 1; i++) {\n\t\t\tif (increasing) {\n\t\t\t\tif (l.get(i + 1) < l.get(i)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (l.get(i + 1) > l.get(i)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/clayton/coding/problems/FindTheDifference.java\npackage com.clayton.coding.problems;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     * String t is generated by random shuffling string s and then add one more letter at a random position.\n     * Find the letter that was added in t.\n     *\n     * Example:\n     *\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public static char findTheDifference(String s, String t) {\n        char[] sArray = s.toCharArray();\n        char[] tArray = t.toCharArray();\n        Arrays.sort(sArray);\n        Arrays.sort(tArray);\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i]!= tArray[i]) {\n                return tArray[i];\n            }\n        }\n        return tArray[tArray.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/clayton/coding/problems/FindAllNumbersDisappearedInAnArray.java\npackage com.clayton.coding.problems;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindAllNumbersDisappe"}
{"ID": 55, "source": "Multi_HumanEval_java:HumanEval_java/58", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t\tList<Object> common = new ArrayList<Object>();\n\t\tfor (Object o : l1) {\n\t\t\tif (l2.contains(o) &&!common.contains(o)) {\n\t\t\t\tcommon.add(o);\n\t\t\t}\n\t\t}\n\t\treturn common;\n    }\n}\n<file_sep>/Python/Python_OOP/car.py\nclass Car(object):\n    def __init__(self, price, speed, fuel, mileage):\n        self.price = price\n        self.speed = speed\n        self.fuel = fuel\n        self.mileage = mileage\n        if price > 10000:\n            self.tax = 0.15\n        else:\n            self.tax = 0.12\n        self.display_all()\n\n    def display_all(self):\n        print \"Price: ${}\".format(self.price)\n        print \"Speed: {} mph\".format(self.speed)\n        print \"Fuel: {}\".format(self.fuel)\n        print \"Mileage: {} mpg\".format(self.mileage)\n        print \"Tax: {}\".format(self.tax)\n\ncar1 = Car(2000, 35, \"Full\", 15)\ncar2 = Car(2000, 5, \"Not Full\", 105)\ncar3 = Car(2000, 15, \"Kind of Full\", 95)\ncar4 = Car(2000, 25, \"Full\", 25)\ncar5 = Car(2000, 45, \"Empty\", 25)\ncar6 = Car(20000, 35, \"Empty\", 15)\n<file_sep>/Python/Python_OOP/math_dojo.py\nclass MathDojo(object):\n    def __init__(self):\n        self.result = 0\n\n    def add(self, *args):\n        for arg in args:\n            if type(arg) == list or type(arg) == tuple:\n                for num in arg:\n                    self.result += num\n            else:\n                self.result += arg\n        return self\n\n    def subtract(self, *args):\n        for arg in args:\n            if type(arg) == list or type(arg) == tuple:\n                for"}
{"ID": 56, "source": "Multi_HumanEval_java:HumanEval_java/59", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t\tint largestPrimeFactor = 1;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t\tlargestPrimeFactor = i;\n\t\t\t}\n\t\t}\n\t\treturn largestPrimeFactor;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(largestPrimeFactor(n));\n    }\n}\n<file_sep>/src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTree.java\n/**\n * BinarySearchTree.java\n *\n * @author <NAME>\n * @version 1.0\n */\npackage com.williamfiset.algorithms.datastructures.binarysearchtree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BinarySearchTree<T extends Comparable<T>> {\n\n  private BinarySearchTreeNode<T> root;\n\n  public BinarySearchTree() {\n    root = null;\n  }\n\n  public BinarySearchTree(BinarySearchTreeNode<T> root) {\n    this.root = root;\n  }\n\n  public BinarySearchTreeNode<T> getRoot() {\n    return root;\n  }\n\n  public void setRoot(BinarySearchTreeNode<T> root) {\n    this.root = root;\n  }\n\n  public void insert(T value) {\n    if (root == null) {\n      root = new BinarySearchTreeNode<>(value);\n      return;\n    }\n    insert(root, value);\n  }\n\n  private void insert(BinarySearchTreeNode<T> node, T value) {\n    if (value.compareTo(node.getValue()) < 0) {\n      if (node.getLeft() == null) {\n        node.setLeft(new BinarySearchTreeNode<>(value));\n      } else {\n        insert(node.getLeft(), value);\n      }\n    } else {\n      if (node.getRight() == null) {\n        node.setRight(new BinarySearchTreeNode<>(value));\n      } else {\n        insert(node.getRight(), value);\n      }\n    }\n  }\n\n  public void inorder() {\n    inorder(root);\n  }\n\n  private void inorder(BinarySearchTreeNode<T> node) {\n    if (node == null)"}
{"ID": 57, "source": "Multi_HumanEval_java:HumanEval_java/60", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(sumToN(n));\n    }\n}\n<file_sep>/Python/Python_Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/"}
{"ID": 58, "source": "Multi_HumanEval_java:HumanEval_java/61", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tchar c = brackets.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheCapitals.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheCapitals {\n    public static List<Integer> findCapitals(String text) {\n        List<Integer> capitals = new ArrayList<Integer>();\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isUpperCase(text.charAt(i))) {\n                capitals.add(i);\n            }\n        }\n        return capitals;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.java.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n       "}
{"ID": 59, "source": "Multi_HumanEval_java:HumanEval_java/62", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 +....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\tresult.add(xs.get(i) * i);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/Python/Python-1/Python-1-1/Python-1-1-1/Python-1-1-1-1/Python-1-1-1-1-1/Python-1-1-1-1-1-1/Python-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1/Python-1-1-1-1"}
{"ID": 60, "source": "Multi_HumanEval_java:HumanEval_java/63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (n == 1) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (n == 2) {\n\t\t\treturn 1;\n\t\t}\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint d = a + b + c;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t}\n\t\treturn c;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     * findNextSquare(114) --> -"}
{"ID": 61, "source": "Multi_HumanEval_java:HumanEval_java/64", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tcount++;\n\t\t\t} else if (c == 'y' && i == s.length() - 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     * >>> divisors(12) #should return [2, 3, 4, 6]\n     *\n     * Note:\n     * The array of divisors should be sorted in ascending order\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     * >>> findNextSquare(121) # returns 144\n     * >>> findNextSquare(6"}
{"ID": 62, "source": "Multi_HumanEval_java:HumanEval_java/65", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t\tString s = Integer.toString(x);\n\t\tint n = s.length();\n\t\tshift = shift % n;\n\t\tString s1 = s.substring(n-shift, n);\n\t\tString s2 = s.substring(0, n-shift);\n\t\treturn s1+s2;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x = in.nextInt();\n        int shift = in.nextInt();\n        System.out.println(circularShift(x, shift));\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code"}
{"ID": 63, "source": "Multi_HumanEval_java:HumanEval_java/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c >= 'A' && c <= 'Z') {\n\t\t\t\tsum += (int) c;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     *\n     * divisors(12); //should return [2,3,4,6]\n     * divisors(25); //should return [5]\n     * divisors(13); //should return [13]\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     * findNextSquare(114) --> -1\n     */\n    public static long findNextSquare(long"}
{"ID": 64, "source": "Multi_HumanEval_java:HumanEval_java/67", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t\tString[] arr = s.split(\" \");\n\t\tint apples = Integer.parseInt(arr[0]);\n\t\tint oranges = Integer.parseInt(arr[3]);\n\t\treturn n - apples - oranges;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrongestAge.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindTheStrongestAge {\n    public static int strongestAge(List<String> people) {\n        int max = 0;\n        for (String person : people) {\n            String[] parts = person.split(\" \");\n            int age = Integer.parseInt(parts[0]);\n            int strength = Integer.parseInt(parts[1]);\n            if (strength > max) {\n                max = strength;\n            }\n        }\n        return max;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n    public static int findSmallest(int[] numbers) {\n        int min = Integer.MAX_VALUE;\n        for (int number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }\n        return min;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallestIntegerInTheArray.java"}
{"ID": 65, "source": "Multi_HumanEval_java:HumanEval_java/68", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t\tif (arr.size() == 0) {\n\t\t\treturn new ArrayList<Object>();\n\t\t}\n\t\tint minEven = Integer.MAX_VALUE;\n\t\tint minEvenIndex = -1;\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tint val = (int) arr.get(i);\n\t\t\tif (val % 2 == 0 && val < minEven) {\n\t\t\t\tminEven = val;\n\t\t\t\tminEvenIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (minEvenIndex == -1) {\n\t\t\treturn new ArrayList<Object>();\n\t\t}\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tresult.add(minEven);\n\t\tresult.add(minEvenIndex);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * \"We want to know the index of the vowels in a given word,\n     * *  so we need a method that returns an array of numbers.\n     * *  Note that there can be duplicates in the array,\n     * *  but they should only be counted once.\n     * *  The vowels we want to count are: a, e, i, o, u.\n     *\n     * * Example 1:\n     * *     Input: \"apple\"\n     * *     Output: [1, 3]\n     * *     Explanation: The index of the vowels in \"apple\" are 1 and 3.\n     *\n     * * Example 2:\n     * *     Input: \"hello\"\n     * *     Output: [1]\n     * *     Explanation: The index of the vowels in \"hello\" are 1.\n     *\n     * * Example 3:\n     * *     Input: \"sky\"\n     * *     Output: []\n     * *     Explanation: There are no vowels in \"sky\".\n     *\n     * * Example 4:\n     * *     Input: \"mellow\"\n     *"}
{"ID": 66, "source": "Multi_HumanEval_java:HumanEval_java/69", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor (int i : lst) {\n\t\t\tmap.put(i, map.getOrDefault(i, 0) + 1);\n\t\t}\n\t\tfor (int i : lst) {\n\t\t\tif (map.get(i) >= i) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    public static List<Character> vowelIndices(String word) {\n        List<Character> vowels = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            if (isVowel(word.charAt(i))) {\n                vowels.add(word.charAt(i));\n            }"}
{"ID": 67, "source": "Multi_HumanEval_java:HumanEval_java/70", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tList<Object> temp = new ArrayList<Object>(lst);\n\t\twhile (temp.size() > 0) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint minIndex = 0;\n\t\t\tint maxIndex = 0;\n\t\t\tfor (int i = 0; i < temp.size(); i++) {\n\t\t\t\tif ((int) temp.get(i) < min) {\n\t\t\t\t\tmin = (int) temp.get(i);\n\t\t\t\t\tminIndex = i;\n\t\t\t\t}\n\t\t\t\tif ((int) temp.get(i) > max) {\n\t\t\t\t\tmax = (int) temp.get(i);\n\t\t\t\t\tmaxIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(min);\n\t\t\ttemp.remove(minIndex);\n\t\t\tif (temp.size() > 0) {\n\t\t\t\tresult.add(max);\n\t\t\t\ttemp.remove(maxIndex);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Given a string, return the number of vowels in the string.\n     *\n     * Examples:\n     * getCount(\"abracadabra\") == 5\n     * getCount(\"\") == 0\n     * getCount(\"pear tree\") == 4\n     * getCount(\"o a kak ushakov lil vo kashu kakao\") == 13\n     *\n     */\n    public static int getCount(String str) {\n\t\tint vowelsCount = 0;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {\n\t\t\t\tvowelsCount++;\n\t\t"}
{"ID": 68, "source": "Multi_HumanEval_java:HumanEval_java/71", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t\tif(a+b>c && a+c>b && b+c>a){\n\t\t\tdouble s = (a+b+c)/2.0;\n\t\t\treturn Math.sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t}\n\t\treturn -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n    public"}
{"ID": 69, "source": "Multi_HumanEval_java:HumanEval_java/72", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t\tif (q.size() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (q.size() == 2) {\n\t\t\treturn q.get(0) == q.get(1);\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\tsum += q.get(i);\n\t\t}\n\t\tif (sum > w) {\n\t\t\treturn false;\n\t\t}\n\t\tList<Integer> left = q.subList(0, q.size() / 2);\n\t\tList<Integer> right = q.subList(q.size() / 2, q.size());\n\t\tif (left.equals(right)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Create a function that takes a string and returns the number of vowels contained within it.\n     *\n     * Examples\n     * countVowels(\"Celebration\") ➞ 5\n     *\n     * countVowels(\"Palm\") ➞ 1\n     *\n     * countVowels(\"Prediction\") ➞ 4\n     *\n     * Notes\n     * a, e, i, o, u are considered vowels (not y).\n     * All test cases are one word and only contain letters.\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/"}
{"ID": 70, "source": "Multi_HumanEval_java:HumanEval_java/73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t\tint left = 0;\n\t\tint right = arr.size() - 1;\n\t\tint count = 0;\n\t\twhile (left < right) {\n\t\t\tif (arr.get(left) == arr.get(right)) {\n\t\t\t\tleft++;\n\t\t\t\tright--;\n\t\t\t} else if (arr.get(left) < arr.get(right)) {\n\t\t\t\tarr.set(right, arr.get(left));\n\t\t\t\tcount++;\n\t\t\t\tright--;\n\t\t\t} else {\n\t\t\t\tarr.set(left, arr.get(right));\n\t\t\t\tcount++;\n\t\t\t\tleft++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6));\n        System.out.println(smallestChange(arr));\n    }\n}\n<file_sep>/src/main/java/com/example/demo/algorithm/array/FindAllSubsets.java\npackage com.example.demo.algorithm.array;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindAllSubsets {\n    /**\n     * Given a set of distinct integers, nums, return all possible subsets (the power set).\n     * Note: The solution set must not contain duplicate subsets.\n     *\n     * Example:\n     * Input: nums = [1,2,3]\n     * Output:\n     * [\n     *   [3],\n     *   [1],\n     *   [2],\n     *   [1,2,3],\n     *   [1,3],\n     *   [2,3],\n     *   [1,2],\n     *   []\n     * ]\n     */\n    public List<List<Integer>> subsets(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums == null || nums.length == 0) {\n            return result;\n        }\n        List<Integer> list = new ArrayList<>();\n        helper(result, list, nums, 0);\n        return result;\n    }\n\n    private void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int pos) {\n        result.add(new ArrayList<>(list"}
{"ID": 71, "source": "Multi_HumanEval_java:HumanEval_java/74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t\tint sum1 = 0;\n\t\tint sum2 = 0;\n\t\tfor (Object s : lst1) {\n\t\t\tsum1 += ((String) s).length();\n\t\t}\n\t\tfor (Object s : lst2) {\n\t\t\tsum2 += ((String) s).length();\n\t\t}\n\t\tif (sum1 < sum2) {\n\t\t\treturn lst1;\n\t\t} else if (sum2 < sum1) {\n\t\t\treturn lst2;\n\t\t} else {\n\t\t\treturn lst1;\n\t\t}\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Create a function that takes a string and returns the number of vowels contained in the string.\n     *\n     * Examples\n     * countVowels(\"Celebration\") ➞ 5\n     * countVowels(\"Palm\") ➞ 1\n     * countVowels(\"Prediction\") ➞ 4\n     *\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheMissingNumber.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingNumber {\n    /**\n     * * Create a function that takes an array of numbers between 1 and 10 (inclusive) and returns the missing number.\n     *\n     * Examples\n     * missingNum([1, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ 5\n     * missing"}
{"ID": 72, "source": "Multi_HumanEval_java:HumanEval_java/75", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t\tif(a<100){\n\t\t\tfor(int i=2;i<a;i++){\n\t\t\t\tif(a%i==0){\n\t\t\t\t\tif(isPrime(i)&&isPrime(a/i)&&isPrime(a/i/i)){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n\tpublic static Boolean isPrime(int a){\n\t\tfor(int i=2;i<a;i++){\n\t\t\tif(a%i==0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/hackerrank/algorithms/implementation/FindDigits.java\npackage com.hackerrank.algorithms.implementation;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class FindDigits {\n\n    static int findDigits(int n) {\n        int count = 0;\n        int temp = n;\n        while(temp>0){\n            int digit = temp%10;\n            if(digit!=0 && n%digit==0){\n                count++;\n            }\n            temp = temp/10;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int a0 = 0; a0 < t; a0++){\n            int n = in.nextInt();\n            int result = findDigits(n);\n            System.out.println(result);\n        }\n        in.close();\n    }\n}\n<file_sep>/src/main/java/com/hackerrank/algorithms/implementation/SherlockAndSquares.java\npackage com.hackerrank.algorithms.implementation;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class SherlockAndSquares {\n\n    static int squares(int a, int b) {\n        int count = 0;\n        for(int i=a;i<=b;i++){\n            double sq = Math.sqrt(i);\n            if(sq == (int)sq){\n               "}
{"ID": 73, "source": "Multi_HumanEval_java:HumanEval_java/76", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t\tif (x == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x % n!= 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isSimplePower(x / n, n);\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * We want to create a function that will take a string as input and return a string with only the vowels in order as they appear in the original string.\n     *\n     * Example:\n     *\n     * vowelOrder(\"This is a test!\") -> \"iiae\"\n     *\n     */\n    public static String vowelOrder(String str) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (vowels.contains(str.substring(i, i + 1))) {\n\t\t\t\tresult += str.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors sorted from smallest to largest.\n     *\n     * Example:\n     *\n     * findDivisors(12) --> [2, 3, 4, 6, 12]\n     * findDivisors(25) --> [5, 25]\n     * findDivisors(13) --> [13]\n     *\n     */\n    public static int[] findDivisors(int num) {\n\t\tList<Integer> divisors = new ArrayList<Integer>();\n\t\tfor (int i = 1; i <= num; i++) {"}
{"ID": 74, "source": "Multi_HumanEval_java:HumanEval_java/77", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t\tif(a==0) return true;\n\t\tif(a<0) a=-a;\n\t\tint b=1;\n\t\twhile(b*b*b<=a) {\n\t\t\tif(b*b*b==a) return true;\n\t\t\tb++;\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/Python/is_prime.py\ndef is_prime(num):\n    \"\"\"\n    Write a function that checks if a given number is prime.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(8) ==> False\n    is_prime(11) ==> True\n    is_prime(17) ==> True\n    is_prime(22) ==> False\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n<file_sep>/Python/is_divisible.py\ndef is_divisible(n, x, y):\n    \"\"\"\n    Write a function that checks if a number is divisible by two other numbers.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_divisible(3, 1, 3) ==> True\n    is_divisible(4, 2, 2) ==> True\n    is_divisible(12, 3, 4) ==> True\n    is_divisible(8, 3, 4) ==> False\n    is_divisible(24, 2, 6) ==> False\n    is_divisible(12, 2, 6) ==> True\n    \"\"\"\n    return n % x == 0 and n % y == 0\n<file_sep>/Python/is_divisible_by_7.py\ndef is_divisible_by_7(num):\n    \"\"\"\n    Write a function that checks if a given number is divisible by 7.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_divisible_by_7(1) ==> False\n    is_divisible_by_7(7) ==> True\n    is_divisible_by_7(14) ==> True\n    is_divisible_by_7(21) ==> True\n    is_"}
{"ID": 75, "source": "Multi_HumanEval_java:HumanEval_java/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t\tint count = 0;\n\t\tString hex = num.toString();\n\t\tfor (int i = 0; i < hex.length(); i++) {\n\t\t\tchar c = hex.charAt(i);\n\t\t\tif (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n    \n    public static void main(String[] args) {\n\t\tSystem.out.println(hexKey(\"AB\"));\n\t\tSystem.out.println(hexKey(\"1077E\"));\n\t\tSystem.out.println(hexKey(\"ABED1A33\"));\n\t\tSystem.out.println(hexKey(\"123456789ABCDEF0\"));\n\t\tSystem.out.println(hexKey(\"2020\"));\n    }\n}\n<file_sep>/src/main/java/com/codesignal/interview/sumOfTwo.java\npackage com.codesignal.interview;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass sumOfTwo {\n    /**\n     * Given two arrays of integers a and b, determine whether there is a pair of numbers (one from a and one from b) that sums up to a given integer target.\n     * Example\n     * For a = [1, 2, 3], b = [10, 20, 30, 40], and target = 42, the output should be\n     * sumOfTwo(a, b, target) = true.\n     *\n     */\n    public static boolean sumOfTwo(int[] a, int[] b, int target) {\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < b.length; j++) {\n\t\t\t\tif (a[i] + b[j] == target) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n    \n    public static void main(String[] args) {\n\t\tint[] a = {1, 2, 3};\n\t\tint[] b = {10, 20, 30"}
{"ID": 76, "source": "Multi_HumanEval_java:HumanEval_java/79", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t\tString binary = Integer.toBinaryString(decimal);\n\t\treturn \"db\" + binary + \"db\";\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    /**\n     * We want to know the index of the vowels in a given word, for example, there are two vowels in the word\n     * \"super\". The first vowel is \"u\" and the second is \"e\".\n     *\n     * Given a string \"super\", we should return a list of [2, 4].\n     *\n     * Some cases:\n     * - There can be duplicate vowels in a word.\n     * - The vowels can be in both upper and lowercase.\n     *\n     * @param word\n     * @return\n     */\n    public static List<Integer> vowelIndices(String word) {\n        List<Integer> vowelIndices = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (isVowel(c)) {\n                vowelIndices.add(i + 1);\n            }\n        }\n        return vowelIndices;\n    }\n\n    private static boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Example:\n     * findDivisors(12); // should return [2, 3, 4, 6]\n     *\n     * @param number\n     * @return"}
{"ID": 77, "source": "Multi_HumanEval_java:HumanEval_java/80", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t\tif(s.length() < 3) return false;\n\t\tfor(int i = 0; i < s.length() - 2; i++) {\n\t\t\tif(s.substring(i, i+3).chars().distinct().count()!= 3) return false;\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/Python/Is_It_Possible.py\ndef is_it_possible(arr, k):\n    \"\"\"\n    Given an array of integers arr and an integer k,\n    return True if it's possible to divide the array into k non-empty subsets\n    such that the sum of the numbers in each subset is the same,\n    otherwise return False.\n    \"\"\"\n    if len(arr) < k:\n        return False\n    if sum(arr) % k!= 0:\n        return False\n    target = sum(arr) // k\n    arr.sort(reverse=True)\n    def dfs(idx, curr_sum):\n        if curr_sum == target:\n            return True\n        for i in range(idx, len(arr)):\n            if curr_sum + arr[i] > target:\n                continue\n            if dfs(i+1, curr_sum+arr[i]):\n                return True\n        return False\n    return dfs(0, 0)\n<file_sep>/Python/Is_It_Possible.py\ndef is_it_possible(arr, k):\n    \"\"\"\n    Given an array of integers arr and an integer k,\n    return True if it's possible to divide the array into k non-empty subsets\n    such that the sum of the numbers in each subset is the same,\n    otherwise return False.\n    \"\"\"\n    if len(arr) < k:\n        return False\n    if sum(arr) % k!= 0:\n        return False\n    target = sum(arr) // k\n    arr.sort(reverse=True)\n    def dfs(idx, curr_sum):\n        if curr_sum == target:\n            return True\n        for i in range(idx, len(arr)):\n            if curr_sum + arr[i] > target:\n                continue\n            if dfs(i+1, curr_sum+arr[i]):\n                return True\n        return False\n    return dfs(0, 0)\n\nprint(is_it_possible([4, 3, 2, 3, 5, 2, 1], 4"}
{"ID": 78, "source": "Multi_HumanEval_java:HumanEval_java/81", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t\tList<String> letterGrades = new ArrayList<String>();\n\t\tfor (Number grade : grades) {\n\t\t\tif (grade.doubleValue() >= 4.0) {\n\t\t\t\tletterGrades.add(\"A+\");\n\t\t\t} else if (grade.doubleValue() > 3.7) {\n\t\t\t\tletterGrades.add(\"A\");\n\t\t\t} else if (grade.doubleValue() > 3.3) {\n\t\t\t\tletterGrades.add(\"A-\");\n\t\t\t} else if (grade.doubleValue() > 3.0) {\n\t\t\t\tletterGrades.add(\"B+\");\n\t\t\t} else if (grade.doubleValue() > 2.7) {\n\t\t\t\tletterGrades.add(\"B\");\n\t\t\t} else if (grade.doubleValue() > 2.3) {\n\t\t\t\tletterGrades.add(\"B-\");\n\t\t\t} else if (grade.doubleValue() > 2.0) {\n\t\t\t\tletterGrades.add(\"C+\");\n\t\t\t} else if (grade.doubleValue() > 1.7) {\n\t\t\t\tletterGrades.add(\"C\");\n\t\t\t} else if (grade.doubleValue() > 1.3) {\n\t\t\t\tletterGrades.add(\"C-\");\n\t\t\t} else if (grade.doubleValue() > 1.0) {\n\t\t\t\tletterGrades.add(\"D+\");\n\t\t\t} else if (grade.doubleValue() > 0.7) {\n\t\t\t\tletterGrades.add(\"D\");\n\t\t\t} else if (grade.doubleValue() > 0.0) {\n\t\t\t\tletterGrades.add(\"D-\");\n\t\t\t} else {\n\t\t\t\tletterGrades.add(\"E\");\n\t\t\t}\n\t\t}\n\t\treturn letterGrades;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     * findDivisors(12); //should return [2,3,4,6]\n     * findDivisors("}
{"ID": 79, "source": "Multi_HumanEval_java:HumanEval_java/82", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t\tint length = string.length();\n\t\tfor (int i = 2; i < length; i++) {\n\t\t\tif (length % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/Python/is_palindrome.py\nclass IsPalindrome:\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    palindrome or False otherwise.\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('hello') == False\n    is_palindrome('amanaplanacanalpanama') == True\n    is_palindrome('10801') == True\n    \"\"\"\n    def is_palindrome(self, string):\n        return string == string[::-1]\n<file_sep>/Python/is_isogram.py\nclass IsIsogram:\n    \"\"\"\n    An isogram is a word that has no repeating letters, consecutive or\n    non-consecutive. Write a function that takes a string and returns True if\n    the string is an isogram or False otherwise.\n    Examples\n    is_isogram('Algorism') == True\n    is_isogram('Pascal') == False\n    is_isogram('Consecutive') == False\n    \"\"\"\n    def is_isogram(self, string):\n        string = string.lower()\n        for char in string:\n            if string.count(char) > 1:\n                return False\n        return True\n<file_sep>/Python/is_power_of_two.py\nclass IsPowerOfTwo:\n    \"\"\"\n    Write a function that takes a number and returns True if the number is a\n    power of two or False otherwise.\n    Examples\n    is_power_of_two(1) == True\n    is_power_of_two(2) == True\n    is_power_of_two(3) == False\n    is_power_of_two(4) == True\n    is_power_of_two(5) == False\n    is_power_of_two(6) == False\n    is_power_of_two(7) == False\n    is_power_of_two(8) == True\n    is_power_of_two(9) == False\n    \"\"\"\n    def is_power_of_two(self, number):\n        return number & (number - 1) == 0"}
{"ID": 80, "source": "Multi_HumanEval_java:HumanEval_java/83", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t\tif (n == 1) {\n\t\t\treturn 2;\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tcount += startsOneEnds(n - i) * startsOneEnds(i - 1);\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/fishercoder/solutions/MaximumSubarraySumWithOneDeletion.java\npackage com.fishercoder.solutions;\n\npublic class MaximumSubarraySumWithOneDeletion {\n    public static class Solution1 {\n        public int maximumSum(int[] arr) {\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i < arr.length; i++) {\n                int sum = 0;\n                for (int j = i; j < arr.length; j++) {\n                    sum += arr[j];\n                    max = Math.max(max, sum);\n                }\n            }\n            return max;\n        }\n    }\n\n    public static class Solution2 {\n        public int maximumSum(int[] arr) {\n            int max = Integer.MIN_VALUE;\n            for (int i = 0; i < arr.length; i++) {\n                int sum = 0;\n                for (int j = i; j < arr.length; j++) {\n                    sum += arr[j];\n                    if (j - i > 0) {\n                        sum -= arr[j - 1];\n                    }\n                    max = Math.max(max, sum);\n                }\n            }\n            return max;\n        }\n    }\n}\n<file_sep>/src/main/java/com/fishercoder/solutions/FindTheWinnerOfTheCircularGame.java\npackage com.fishercoder.solutions;\n\npublic class FindTheWinnerOfTheCircularGame {\n    public static class Solution1 {\n        public int findTheWinner(int n, int k) {\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = i + 1;\n            }\n            int idx = 0;\n            while (n > 1) {\n                idx = (idx + k - 1) % n;\n                for (int i = idx; i < n - 1; i++) {\n                    arr[i"}
{"ID": 81, "source": "Multi_HumanEval_java:HumanEval_java/84", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t\tString binary = Integer.toBinaryString(n);\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < binary.length(); i++) {\n\t\t\tif (binary.charAt(i) == '1') {\n\t\t\t\tsum += 1;\n\t\t\t}\n\t\t}\n\t\treturn Integer.toBinaryString(sum);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String result = Solve.solve(n);\n        System.out.println(result);\n    }\n}\n<file_sep>/Python/BinarySearch/BinarySearch.py\ndef binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 5\nresult = binarySearch(arr, target)\nprint(result)\n<file_sep>/Python/BinarySearch/BinarySearch.cpp\n#include <iostream>\nusing namespace std;\n\nint binarySearch(int arr[], int target, int left, int right) {\n    if (left > right) {\n        return -1;\n    }\n    int mid = (left + right) / 2;\n    if (arr[mid] == target) {\n        return mid;\n    } else if (arr[mid] < target) {\n        return binarySearch(arr, target, mid + 1, right);\n    } else {\n        return binarySearch(arr, target, left, mid - 1);\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int target = 5;\n    int left = 0;\n    int right = sizeof(arr) / sizeof(arr[0]) - 1;\n    int result = binarySearch(arr,"}
{"ID": 82, "source": "Multi_HumanEval_java:HumanEval_java/85", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (lst.get(i) % 2 == 0 && i % 2!= 0) {\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Example:\n     *\n     * findDivisors(12); //=> [1, 2, 3, 4, 6, 12]\n     * findDivisors(25); //=> [1, 5, 25]\n     * findDivisors(13); //=> [1, 13]\n     */\n    public static List<Integer> findDivisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     *"}
{"ID": 83, "source": "Multi_HumanEval_java:HumanEval_java/86", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t\tString[] words = s.split(\" \");\n\t\tfor (int i = 0; i < words.length; i++) {\n\t\t\tchar[] chars = words[i].toCharArray();\n\t\t\tArrays.sort(chars);\n\t\t\twords[i] = new String(chars);\n\t\t}\n\t\treturn String.join(\" \", words);\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/Graph.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private List<Vertex> vertices;\n    private List<Edge> edges;\n\n    public Graph() {\n        this.vertices = new ArrayList<>();\n        this.edges = new ArrayList<>();\n    }\n\n    public void addVertex(Vertex vertex) {\n        this.vertices.add(vertex);\n    }\n\n    public void addEdge(Edge edge) {\n        this.edges.add(edge);\n    }\n\n    public List<Vertex> getVertices() {\n        return vertices;\n    }\n\n    public List<Edge> getEdges() {\n        return edges;\n    }\n\n    @Override\n    public String toString() {\n        return \"Graph{\" +\n                \"vertices=\" + vertices +\n                \", edges=\" + edges +\n                '}';\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/Vertex.java\npackage com.interview.graph;\n\npublic class Vertex {\n    private String name;\n    private boolean visited;\n\n    public Vertex(String name) {\n        this.name = name;\n        this.visited = false;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public boolean isVisited() {\n        return visited;\n    }\n\n    public void setVisited(boolean visited) {\n        this.visited = visited;\n    }\n\n    @Override\n    public String toString() {\n        return \"Vertex{\" +\n                \"name='\" + name + '\\'' +\n                \", visited=\" + visited +\n                '}';\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/GraphTraversal.java\npackage com.interview.graph;\n\nimport java.util.List;\nimport java.util.Stack;\n\npublic class GraphTraversal {\n    public void depthFirstSearch(Graph graph) {\n        Stack<Vertex"}
{"ID": 84, "source": "Multi_HumanEval_java:HumanEval_java/87", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2)...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tList<Object> row = (List<Object>) lst.get(i);\n\t\t\tfor (int j = 0; j < row.size(); j++) {\n\t\t\t\tif (row.get(j).equals(x)) {\n\t\t\t\t\tresult.add(new int[] { i, j });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    /**\n     * * We want to create a function that will find all the vowels in a string and\n     * * return them as an array.\n     * *\n     * * The inputs will always be a string, no need to validate that.\n     *\n     * @param str\n     * @return\n     */\n    public static List<Character> vowelFinder(String str) {\n        List<Character> vowels = new ArrayList<Character>();\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (isVowel(c)) {\n                vowels.add(c);\n            }\n        }\n        return vowels;\n    }\n\n    private static boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * * Create a function that takes an integer and returns an array of its divisors.\n     * *\n     * * Example:\n     * * divisors(12); //should return [2,3,4,6]\n     * * divisors(25); //should return"}
{"ID": 85, "source": "Multi_HumanEval_java:HumanEval_java/88", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t\tif (array.size() == 0) {\n\t\t\treturn array;\n\t\t}\n\t\tint first = (int) array.get(0);\n\t\tint last = (int) array.get(array.size() - 1);\n\t\tint sum = first + last;\n\t\tList<Object> sortedArray = new ArrayList<Object>(array);\n\t\tif (sum % 2 == 0) {\n\t\t\tCollections.sort(sortedArray, Collections.reverseOrder());\n\t\t} else {\n\t\t\tCollections.sort(sortedArray);\n\t\t}\n\t\treturn sortedArray;\n    }\n}\n<file_sep>/Python/src/main/python/codewars/FindTheMissingLetter.py\ndef find_missing_letter(chars):\n    \"\"\"\n    * Find the missing letter\n    *\n    * Write a method that takes an array of consecutive letters as input and returns the missing letter in the array.\n    *\n    * You will always get an valid array. And it will be always exactly one letter missing. The length of the array\n    * will always be at least 2. The array will always contain letters in only one case.\n    *\n    * Example:\n    *\n    * ['a','b','c','d','f'] -> 'e'\n    * ['O','Q','R','S'] -> 'P'\n    *\n    * (Use the English alphabet with 26 letters!)\n    *\n    * Have fun coding it and please don't forget to vote and rank this kata!\n    *\n    *\n    * @param chars\n    * @return\n    \"\"\"\n    for i in range(len(chars) - 1):\n        if ord(chars[i + 1]) - ord(chars[i])!= 1:\n            return chr(ord(chars[i]) + 1)\n<file_sep>/Python/src/main/python/codewars/FindTheMissingLetter.java\npackage codewars;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingLetter {\n    /**\n     * * Find the missing letter\n     * *\n     * * Write a method that takes an array of consecutive letters as input and returns the missing letter in the array.\n     * *\n     * * You will always get an valid array. And it will be always exactly one letter missing. The length of the array\n    "}
{"ID": 86, "source": "Multi_HumanEval_java:HumanEval_java/89", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tString newAlphabet = alphabet.substring(2) + alphabet.substring(0, 2);\n\t\tString encrypted = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar ch = s.charAt(i);\n\t\t\tint idx = alphabet.indexOf(ch);\n\t\t\tencrypted += newAlphabet.charAt(idx);\n\t\t}\n\t\treturn encrypted;\n    }\n}\n<file_sep>/Python/Python_OOP/bank_account.py\nclass BankAccount:\n    def __init__(self, int_rate=0.01, balance=0):\n        self.int_rate = int_rate\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n        return self\n    \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self\n    \n    def display_account_info(self):\n        print(f\"Balance: ${self.balance}\")\n        return self\n    \n    def yield_interest(self):\n        self.balance *= (1 + self.int_rate)\n        return self\n\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.account = BankAccount()\n    \n    def make_deposit(self, amount):\n        self.account.deposit(amount)\n        return self\n    \n    def make_withdrawal(self, amount):\n        self.account.withdraw(amount)\n        return self\n    \n    def display_user_balance(self):\n        print(f\"User: {self.name}, Balance: ${self.account.balance}\")\n        return self\n    \n    def transfer_money(self, other_user, amount):\n        self.account.withdraw(amount)\n        other_user.account.deposit(amount)\n        return self\n\nguido = User(\"<NAME>\", \"<EMAIL>\")\nmonty = User(\"<NAME>\", \"<EMAIL>\")\n\nguido.make_deposit(100).make_deposit(200).make_deposit(300).make_withdrawal(100).display_user_balance()\nmonty.make_deposit(50).make_deposit(100).make_withdrawal(50).make_withdrawal(50).display_user_balance()\n\nguido.transfer_money("}
{"ID": 87, "source": "Multi_HumanEval_java:HumanEval_java/90", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t\tif (lst.size() < 2) {\n\t\t\treturn null;\n\t\t}\n\t\tInteger smallest = (Integer) lst.get(0);\n\t\tInteger nextSmallest = (Integer) lst.get(1);\n\t\tif (nextSmallest < smallest) {\n\t\t\tInteger temp = smallest;\n\t\t\tsmallest = nextSmallest;\n\t\t\tnextSmallest = temp;\n\t\t}\n\t\tfor (int i = 2; i < lst.size(); i++) {\n\t\t\tInteger current = (Integer) lst.get(i);\n\t\t\tif (current < nextSmallest) {\n\t\t\t\tif (current < smallest) {\n\t\t\t\t\tnextSmallest = smallest;\n\t\t\t\t\tsmallest = current;\n\t\t\t\t} else {\n\t\t\t\t\tnextSmallest = current;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nextSmallest;\n\t}\n}\n<file_sep>/src/main/java/com/interview/graph/Graph.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private List<Vertex> vertices;\n    private List<Edge> edges;\n    \n    public Graph() {\n        vertices = new ArrayList<Vertex>();\n        edges = new ArrayList<Edge>();\n    }\n    \n    public void addVertex(Vertex v) {\n        vertices.add(v);\n    }\n    \n    public void addEdge(Edge e) {\n        edges.add(e);\n    }\n    \n    public List<Vertex> getVertices() {\n        return vertices;\n    }\n    \n    public List<Edge> getEdges() {\n        return edges;\n    }\n    \n    public void printGraph() {\n        for (Vertex v : vertices) {\n            System.out.println(\"Vertex: \" + v);\n            for (Edge e : v.getEdges()) {\n                System.out.println(\"Edge: \" + e);\n            }\n        }\n    }\n    \n    public void printGraphBFS() {\n        for (Vertex v : vertices) {\n            System.out.println(\"Vertex: \" + v);\n            for (Edge e : v.getEdges()) {\n                System.out.println(\"Edge: \" + e);\n            }\n        }\n    }\n    \n    public void printGraphDFS() {\n        for (Vertex v : vertices) {\n            System.out.println(\"Vertex: \" + v);\n            for (Edge e : v.getEdges"}
{"ID": 88, "source": "Multi_HumanEval_java:HumanEval_java/91", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t\tint count = 0;\n\t\tString[] sentences = s.split(\"[.?!]\");\n\t\tfor (String sentence : sentences) {\n\t\t\tif (sentence.trim().startsWith(\"I\")) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/Python/CodeWars/7kyu/Find the next perfect square.py\nimport math\n\n\ndef find_next_square(sq):\n    root = math.sqrt(sq)\n    if root.is_integer():\n        return (root + 1) ** 2\n    return -1\n<file_sep>/Python/CodeWars/7kyu/Find the stray number.py\ndef stray(arr):\n    counts = {}\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n    for num, count in counts.items():\n        if count == 1:\n            return num\n<file_sep>/Python/CodeWars/7kyu/Find the divisors.py\ndef divisors(n):\n    divisors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    if len(divisors) == 0:\n        return f\"{n} is prime\"\n    return divisors\n<file_sep>/Python/CodeWars/7kyu/Find the smallest integer in the array.py\ndef find_smallest_int(arr):\n    return min(arr)\n<file_sep>/Python/CodeWars/7kyu/Find the vowels.py\ndef vowel_indices(word):\n    vowels = \"aeiouAEIOU\"\n    return [i + 1 for i, c in enumerate(word) if c in vowels]\n<file_sep>/Python/CodeWars/7kyu/Find the capitals.py\nimport re\n\n\ndef capitals(word):\n    return [i for i, c in enumerate(word) if c.isupper()]\n\n\ndef capitals_regex(word):\n    return [m.start() for m in re.finditer(r\"[A-Z]\", word)]\n<file_sep>/"}
{"ID": 89, "source": "Multi_HumanEval_java:HumanEval_java/92", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t\tif (x.intValue() == y.intValue() + z.intValue() || x.intValue() == y.intValue() - z.intValue() || x.intValue() == z.intValue() - y.intValue()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (y.intValue() == x.intValue() + z.intValue() || y.intValue() == x.intValue() - z.intValue() || y.intValue() == z.intValue() - x.intValue()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (z.intValue() == x.intValue() + y.intValue() || z.intValue() == x.intValue() - y.intValue() || z.intValue() == y.intValue() - x.intValue()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Examples\n     * divisors(12) ➞ [1, 2, 3, 4, 6, 12]\n     *\n     * divisors(25) ➞ [1, 5, 25]\n     *\n     * divisors(13) ➞ [1, 13]\n     *\n     *\n     *\n     */\n    public static int[] divisors(int n) {\n\t\tList<Integer> divisors = new ArrayList<Integer>();\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tdivisors.add(i);\n\t\t\t}\n\t\t}\n\t\tint[] result = new int[divisors.size()];\n\t\tfor (int i = 0; i < divisors.size(); i++) {\n\t\t\tresult[i] = divisors.get(i);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codew"}
{"ID": 90, "source": "Multi_HumanEval_java:HumanEval_java/93", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t\tString encoded = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar c = message.charAt(i);\n\t\t\tif (Character.isLetter(c)) {\n\t\t\t\tif (Character.isUpperCase(c)) {\n\t\t\t\t\tc = Character.toLowerCase(c);\n\t\t\t\t} else {\n\t\t\t\t\tc = Character.toUpperCase(c);\n\t\t\t\t}\n\t\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\t\tc += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tencoded += c;\n\t\t}\n\t\treturn encoded;\n    }\n}\n<file_sep>/Python/Python_OOP/bank_account.py\nclass BankAccount:\n    def __init__(self, int_rate=0.01, balance=0):\n        self.int_rate = int_rate\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n        return self\n    \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self\n    \n    def display_account_info(self):\n        print(f\"Balance: ${self.balance}\")\n        return self\n    \n    def yield_interest(self):\n        self.balance *= (1 + self.int_rate)\n        return self\n\naccount1 = BankAccount(0.01, 100)\naccount2 = BankAccount(0.02, 200)\n\naccount1.deposit(100).deposit(200).deposit(300).withdraw(100).yield_interest().display_account_info()\naccount2.deposit(100).deposit(200).withdraw(100).withdraw(100).withdraw(100).withdraw(100).yield_interest().display_account_info()\n<file_sep>/Python/Python_OOP/user.py\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.account_balance = 0\n    \n    def make_deposit(self, amount):\n        self.account_balance += amount\n    \n    def make_withdrawal(self, amount):\n        self.account_balance -= amount\n    \n    def display_user_balance(self):"}
{"ID": 91, "source": "Multi_HumanEval_java:HumanEval_java/94", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (isPrime(lst.get(i)) && lst.get(i) > max) {\n\t\t\t\tmax = lst.get(i);\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\twhile (max > 0) {\n\t\t\tsum += max % 10;\n\t\t\tmax /= 10;\n\t\t}\n\t\treturn sum;\n    }\n\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i * i <= n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/codesignal/interview/sumOfTwo.java\npackage com.codesignal.interview;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class sumOfTwo {\n    /**\n     * Given two arrays of integers a and b, determine whether there is a pair of numbers (one from a and one from b) that sums up to a given target value.\n     *\n     * Example\n     *\n     * For a = [1, 2, 3], b = [10, 20, 30, 40], and target = 42, the output should be\n     * sumOfTwo(a, b, target) = true.\n     *\n     * Input/Output\n     *\n     * [execution time limit] 3 seconds (java)\n     *\n     * [input] array.integer a\n     *\n     * An array of integers.\n     *\n     * Guaranteed constraints:\n     * 0 ≤ a.length ≤ 105,\n     * -109 ≤ a[i] ≤ 109.\n     *\n     * [input] array.integer b\n     *\n     * An array of integers.\n     *\n     * Guaranteed constraints:\n     * 0 ≤ b.length ≤ 105,\n     * -109 ≤ b[i] ≤ 109"}
{"ID": 92, "source": "Multi_HumanEval_java:HumanEval_java/95", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t\tif (dict == null || dict.getClass()!= HashMap.class) {\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, String> d = (HashMap<String, String>) dict;\n\t\tif (d.size() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tString firstKey = d.keySet().iterator().next();\n\t\tif (firstKey.equals(firstKey.toLowerCase())) {\n\t\t\tfor (String key : d.keySet()) {\n\t\t\t\tif (!key.equals(key.toLowerCase())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (firstKey.equals(firstKey.toUpperCase())) {\n\t\t\tfor (String key : d.keySet()) {\n\t\t\t\tif (!key.equals(key.toUpperCase())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Given a string, return the number of vowels in the string.\n     * Examples:\n     * findTheVowels(\"hello\") should return 2.\n     * findTheVowels(\"coderbyte\") should return 3.\n     * findTheVowels(\"machinelearning\") should return 5.\n     * findTheVowels(\"aeiou\") should return 5.\n     * findTheVowels(\"abcdefghijklmnopqrstuvwxyz\") should return 5.\n     *\n     */\n    public static Integer findTheVowels(String str) {\n\t\tif (str == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint count = 0;\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7"}
{"ID": 93, "source": "Multi_HumanEval_java:HumanEval_java/96", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (n <= 1) {\n\t\t\treturn result;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime(i)) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * We want to create a function that will take a string as input and return a string with only the vowels in order.\n     *\n     * Example:\n     *\n     * vowelOrder(\"Hello World\") => \"eoo\"\n     * vowelOrder(\"Codewars\") => \"ao\"\n     * vowelOrder(\"Edabit\") => \"a\"\n     * vowelOrder(\"aeiou\") => \"aeiou\"\n     * vowelOrder(\"aeiouaeiou\") => \"aeiouaeiou\"\n     * vowelOrder(\"aeiouaeiouaeiou\") => \"aeiouaeiouaeiou\"\n     * vowelOrder(\"abcdefghijklmnopqrstuvwxyz\") => \"\"\n     * vowelOrder(\"1234567890\") => \"\"\n     * vowelOrder(\"!@#$%^&*()_+\") => \"\"\n     * vowelOrder(\"AEIOU\") => \"AEIOU\"\n     * vowelOrder(\"AEIOUAEIOU\") => \"AEIOUAEIOU\"\n     * vowelOrder(\"AEIOUAEIOUAEIOU\") => \"AEIOUAEIOUAEIOU\"\n     * vowelOrder(\"BCDFGHJKLMNPQRSTVWXYZ\") => \"\"\n     * vowelOrder(\"!@#$%^&*()"}
{"ID": 94, "source": "Multi_HumanEval_java:HumanEval_java/97", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t\tint a1 = a%10;\n\t\tint b1 = b%10;\n\t\treturn a1*b1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors2.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors2 {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors3.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors3 {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                divisors.add(n / i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src"}
{"ID": 95, "source": "Multi_HumanEval_java:HumanEval_java/98", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDivisors {\n    /**\n     * * Create a function that takes an integer and returns an array of all its divisors sorted in ascending order.\n     *\n     * Example:\n     * findDivisors(12) #should return [2,3,4,6,12]\n     * findDivisors(25) #should return [5,25]\n     * findDivisors(13) #should return [13]\n     *\n     */\n    public static int[] findDivisors(int n) {\n\t\tList<Integer> divisors = new ArrayList<Integer>();\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tdivisors.add(i);\n\t\t\t}\n\t\t}\n\t\tint[] result = new int[divisors.size()];\n\t\tfor (int i = 0; i < divisors.size(); i++) {\n\t\t\tresult[i] = divisors.get(i);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheNextPerfectSquare {\n    /**\n     * * Given a positive integer, find the next perfect square.\n     *\n    "}
{"ID": 96, "source": "Multi_HumanEval_java:HumanEval_java/99", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t\tdouble num = Double.parseDouble(value);\n\t\tint rounded = (int) Math.round(num);\n\t\tif (num > rounded) {\n\t\t\treturn rounded;\n\t\t} else if (num < rounded) {\n\t\t\treturn rounded;\n\t\t} else {\n\t\t\treturn (int) num;\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Create a function that takes a string and returns the number of\n     * vowels (a, e, i, o, u) in the string.\n     *\n     * Examples\n     * >>> count_vowels(\"Celebration\")\n     * 5\n     * >>> count_vowels(\"Palm\")\n     * 1\n     * >>> count_vowels(\"Prediction\")\n     * 4\n     *\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheMissingNumber.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingNumber {\n    /**\n     * * Create a function that takes an array of numbers between 1 and 10\n     * (inclusive) and returns the missing number.\n     *\n     * Examples\n     * >>> missing_num([1, 2, 3, 4, 6, 7, 8, 9, 10])\n     * 5"}
{"ID": 97, "source": "Multi_HumanEval_java:HumanEval_java/100", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tint current = n;\n\t\twhile (current > 0) {\n\t\t\tresult.add(current);\n\t\t\tif (current % 2 == 0) {\n\t\t\t\tcurrent += 2;\n\t\t\t} else {\n\t\t\t\tcurrent += 1;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * We want to know the index of the vowels in a given word,\n     * * so we need a method that returns an array of numbers.\n     * *\n     * * Ex:\n     * * findVowels(\"apple\") => [0, 2, 4]\n     * * findVowels(\"hello\") => [1, 3]\n     *\n     */\n    public static List<Integer> findVowels(String word) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tchar c = word.charAt(i);\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDivisors {\n    /**\n     * * Create a function that takes an integer and returns an array of its divisors.\n     * *\n     * * Example:\n     * * findDivisors(12) #should return [2, 3, 4, 6]\n     *\n     */\n    public static List<Integer> findDivisors(int n) {\n\t\tList<Integer> result"}
{"ID": 98, "source": "Multi_HumanEval_java:HumanEval_java/101", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t\tList<Object> words = new ArrayList<Object>();\n\t\tString[] splitted = s.split(\"[, ]\");\n\t\tfor (String word : splitted) {\n\t\t\tif (!word.isEmpty()) {\n\t\t\t\twords.add(word);\n\t\t\t}\n\t\t}\n\t\treturn words;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheCapitals.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheCapitals {\n    /**\n     * Write a function that takes a single string as argument and returns an array of all the capitals in the string\n     *\n     * @param word\n     * @return\n     */\n    public static List<Character> capital(String word) {\n        List<Character> capitals = new ArrayList<Character>();\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isUpperCase(word.charAt(i))) {\n                capitals.add(word.charAt(i));\n            }\n        }\n        return capitals;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * Given a positive integer, find the next perfect square.\n     *\n     * @param n\n    "}
{"ID": 99, "source": "Multi_HumanEval_java:HumanEval_java/102", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t\tif (x > y) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\treturn chooseNum(x + 1, y);\n    }\n}\n<file_sep>/src/main/java/com/hackerrank/datastructures/arrays/SparseArrays.java\npackage com.hackerrank.datastructures.arrays;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class SparseArrays {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String[] strings = new String[n];\n        for(int i = 0; i < n; i++){\n            strings[i] = in.next();\n        }\n        int q = in.nextInt();\n        for(int i = 0; i < q; i++){\n            String query = in.next();\n            int count = 0;\n            for(int j = 0; j < n; j++){\n                if(strings[j].equals(query)){\n                    count++;\n                }\n            }\n            System.out.println(count);\n        }\n    }\n}\n<file_sep>/src/main/java/com/hackerrank/datastructures/arrays/ArrayManipulation.java\npackage com.hackerrank.datastructures.arrays;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class ArrayManipulation {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        long[] arr = new long[n + 1];\n        for(int a0 = 0; a0 < m; a0++){\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int k = in.nextInt();\n            arr[a] += k;\n            if(b + 1 <= n){\n                arr[b + 1] -= k;\n            }\n        }\n        long max = 0;\n        long sum = 0;\n        for(int i = 1"}
{"ID": 100, "source": "Multi_HumanEval_java:HumanEval_java/103", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t\tif (n > m) {\n\t\t\treturn -1;\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int i = n; i <= m; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\tint avg = sum / (m - n + 1);\n\t\treturn Integer.toBinaryString(avg);\n    }\n}\n<file_sep>/Python/is_prime.py\ndef is_prime(num):\n    \"\"\"\n    Given a number, return True if it is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n<file_sep>/Python/is_isogram.py\ndef is_isogram(string):\n    \"\"\"\n    An isogram is a word that has no repeating letters, \n    consecutive or non-consecutive. \n    Implement a function that determines whether a string that \n    contains only letters is an isogram. \n    Assume the empty string is an isogram. \n    Ignore case.\n    \"\"\"\n    string = string.lower()\n    seen = set()\n    for char in string:\n        if char in seen:\n            return False\n        seen.add(char)\n    return True\n<file_sep>/Python/is_power_of_two.py\ndef is_power_of_two(n):\n    \"\"\"\n    Given an integer, return True if it is a power of two.\n    \"\"\"\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n<file_sep>/Python/is_power_of_three.py\ndef is_power_of_three(n):\n    \"\"\"\n    Given an integer, return True if it is a power of three.\n    \"\"\"\n    if n < 1:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n<file_sep>/Python/is_power_of_four.py\ndef is_power_of_four(n):\n    \"\"\"\n    Given an integer, return True if it is a power of four.\n    \"\"\"\n    if n < 1:\n        return False\n    while n % 4 == 0:\n        n //= 4\n    return n == 1\n<file_sep>/Python/is_power_of_five.py\ndef"}
{"ID": 101, "source": "Multi_HumanEval_java:HumanEval_java/104", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor(int i=0;i<x.size();i++)\n\t\t{\n\t\t\tint num=x.get(i);\n\t\t\twhile(num>0)\n\t\t\t{\n\t\t\t\tint digit=num%10;\n\t\t\t\tif(digit%2==0)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnum=num/10;\n\t\t\t}\n\t\t\tif(num==0)\n\t\t\t{\n\t\t\t\tresult.add(x.get(i));\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * We want to know the index of the vowels in a given word,\n     *  so we need a method that returns an array of integers.\n     *\n     * Example:\n     * >>> vowelIndices(\"super\")\n     * [2, 4]\n     *\n     * >>> vowelIndices(\"apple\")\n     * [1, 5]\n     *\n     * >>> vowelIndices(\"hi\")\n     * []\n     */\n    public static List<Integer> vowelIndices(String word) {\n\t\tList<Integer> result=new ArrayList<Integer>();\n\t\tfor(int i=0;i<word.length();i++)\n\t\t{\n\t\t\tif(word.charAt(i)=='a' || word.charAt(i)=='e' || word.charAt(i)=='i' || word.charAt(i)=='o' || word.charAt(i)=='u')\n\t\t\t{\n\t\t\t\tresult.add(i+1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDivisors {\n    /**\n     *"}
{"ID": 102, "source": "Multi_HumanEval_java:HumanEval_java/105", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1, 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tList<Object> temp = new ArrayList<Object>();\n\t\tfor(Object i : arr) {\n\t\t\tif(i instanceof Integer) {\n\t\t\t\tif((int)i >= 1 && (int)i <= 9) {\n\t\t\t\t\ttemp.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCollections.sort(temp);\n\t\tCollections.reverse(temp);\n\t\tfor(Object i : temp) {\n\t\t\tswitch((int)i) {\n\t\t\t\tcase 1: result.add(\"One\"); break;\n\t\t\t\tcase 2: result.add(\"Two\"); break;\n\t\t\t\tcase 3: result.add(\"Three\"); break;\n\t\t\t\tcase 4: result.add(\"Four\"); break;\n\t\t\t\tcase 5: result.add(\"Five\"); break;\n\t\t\t\tcase 6: result.add(\"Six\"); break;\n\t\t\t\tcase 7: result.add(\"Seven\"); break;\n\t\t\t\tcase 8: result.add(\"Eight\"); break;\n\t\t\t\tcase 9: result.add(\"Nine\"); break;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrongestAge.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindTheStrongestAge {\n    public static int strongestAge(List<String> people) {\n        int max = 0;\n        int index = 0;\n        for(int i = 0; i < people.size();"}
{"ID": 103, "source": "Multi_HumanEval_java:HumanEval_java/106", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(factorial(i));\n\t\t\t} else {\n\t\t\t\tresult.add(sum(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n\tprivate static int factorial(int n) {\n\t\tif (n == 1) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn n * factorial(n - 1);\n\t}\n\n\tprivate static int sum(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n}\n<file_sep>/src/main/java/com/codesignal/interview/sumOfTwo.java\npackage com.codesignal.interview;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class sumOfTwo {\n    boolean sumOfTwo(int[] a, int[] b, int v) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : a) {\n            map.put(i, i);\n        }\n        for (int i : b) {\n            if (map.containsKey(v - i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/codesignal/interview/firstNotRepeatingCharacter.java\npackage com.codesignal.interview;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class firstNotRepeatingCharacter {\n    char firstNotRepeatingCharacter(String s) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < s.length(); i++) {\n           "}
{"ID": 104, "source": "Multi_HumanEval_java:HumanEval_java/107", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t\tint even = 0;\n\t\tint odd = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (isPalindrome(i)) {\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\teven++;\n\t\t\t\t} else {\n\t\t\t\t\todd++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tresult.add(even);\n\t\tresult.add(odd);\n\t\treturn result;\n    }\n\n\tpublic static boolean isPalindrome(int n) {\n\t\tString s = String.valueOf(n);\n\t\tint left = 0;\n\t\tint right = s.length() - 1;\n\t\twhile (left < right) {\n\t\t\tif (s.charAt(left)!= s.charAt(right)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/jlee/problem/leetcode/Medium_127_WordLadder.java\npackage com.jlee.problem.leetcode;\n\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Set;\n\npublic class Medium_127_WordLadder {\n\t/*\n\t * Given two words (beginWord and endWord), and a dictionary's word list, find\n\t * the length of shortest transformation sequence from beginWord to endWord,\n\t * such that:\n\t * \n\t * 1. Only one letter can be changed at a time.\n\t * 2. Each transformed word must exist in the word list. Note that beginWord is\n\t * not a transformed word.\n\t * \n\t * Note:\n\t * \n\t * 1. Return 0 if there is no such transformation sequence.\n\t * 2. All words have the same length.\n\t * 3. All words contain only lowercase alphabetic characters.\n\t * 4. You may assume no duplicates in the word list.\n\t * 5. You may assume beginWord and endWord are non-empty and are not the same.\n\t * \n\t * Example 1:\n\t * \n\t * Input: beginWord = \"hit\", endWord = \"cog\", wordList =\n\t * [\"hot\",\"dot"}
{"ID": 105, "source": "Multi_HumanEval_java:HumanEval_java/108", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t\tint count = 0;\n\t\tfor (Object num : arr) {\n\t\t\tif (num instanceof Integer) {\n\t\t\t\tint sum = 0;\n\t\t\t\tint n = (int) num;\n\t\t\t\twhile (n!= 0) {\n\t\t\t\t\tsum += n % 10;\n\t\t\t\t\tn /= 10;\n\t\t\t\t}\n\t\t\t\tif (sum > 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could be very large) containing integers.\n     * The array is either entirely composed of odd integers or entirely composed of even integers except for a single integer N.\n     * Write a method that takes the array as an argument and returns N.\n     *\n     * @param numbers\n     * @return\n     */\n    public static int find(int[] numbers) {\n        int oddCount = 0;\n        int evenCount = 0;\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        if (oddCount > evenCount) {\n            return Arrays.stream(numbers).filter(num -> num % "}
{"ID": 106, "source": "Multi_HumanEval_java:HumanEval_java/109", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t\tif(arr.size() == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tint[] arr1 = new int[arr.size()];\n\t\tfor(int i = 0; i < arr.size(); i++) {\n\t\t\tarr1[i] = (int)arr.get(i);\n\t\t}\n\t\tint[] arr2 = new int[arr1.length];\n\t\tfor(int i = 0; i < arr1.length; i++) {\n\t\t\tarr2[i] = arr1[i];\n\t\t}\n\t\tArrays.sort(arr2);\n\t\tfor(int i = 0; i < arr1.length; i++) {\n\t\t\tint[] arr3 = new int[arr1.length];\n\t\t\tfor(int j = 0; j < arr1.length; j++) {\n\t\t\t\tarr3[j] = arr1[(j+i)%arr1.length];\n\t\t\t}\n\t\t\tif(Arrays.equals(arr3, arr2)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/ankit/practice/datastructures/arrays/FindMissingNumber.java\npackage com.ankit.practice.datastructures.arrays;\n\nimport java.util.Arrays;\n\npublic class FindMissingNumber {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 6};\n        System.out.println(findMissingNumber(arr));\n    }\n\n    private static int findMissingNumber(int[] arr) {\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i+1] - arr[i] > 1) {\n                return arr[i] + 1;\n            }\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/ankit/practice/datastructures/arrays/FindAllSubsets.java\npackage com.ankit.practice.datastructures.arrays;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindAllSubsets {\n    public static void main(String[] args) {\n        int"}
{"ID": 107, "source": "Multi_HumanEval_java:HumanEval_java/110", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t\tint even = 0;\n\t\tint odd = 0;\n\t\tfor (int i = 0; i < lst1.size(); i++) {\n\t\t\tif (lst1.get(i) % 2 == 0) {\n\t\t\t\teven++;\n\t\t\t} else {\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\tif (lst2.get(i) % 2 == 0) {\n\t\t\t\teven++;\n\t\t\t\todd--;\n\t\t\t} else {\n\t\t\t\teven--;\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t\tif (even == lst1.size() && odd == 0) {\n\t\t\treturn \"YES\";\n\t\t} else {\n\t\t\treturn \"NO\";\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrongestAge.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindTheStrongestAge {\n    public static int strongestAge(List<String> people) {\n        int max = 0;\n        for (String person : people) {\n            String[] parts = person.split(\" \");\n            int age = Integer.parseInt(parts[0]);\n            int strength = Integer.parseInt(parts[1]);\n            if (strength > max) {\n                max = strength;\n            }\n        }\n        return max;\n    }\n}\n<file_sep>/src"}
{"ID": 108, "source": "Multi_HumanEval_java:HumanEval_java/111", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t\tMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tString[] arr = test.split(\" \");\n\t\tfor (String s : arr) {\n\t\t\tif (map.containsKey(s)) {\n\t\t\t\tmap.put(s, map.get(s) + 1);\n\t\t\t} else {\n\t\t\t\tmap.put(s, 1);\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (String s : map.keySet()) {\n\t\t\tif (map.get(s) > max) {\n\t\t\t\tmax = map.get(s);\n\t\t\t}\n\t\t}\n\t\tMap<String, Integer> result = new HashMap<String, Integer>();\n\t\tfor (String s : map.keySet()) {\n\t\t\tif (map.get(s) == max) {\n\t\t\t\tresult.put(s, map.get(s));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                result.add(i);\n                if (i!= n / i) {\n                    result.add(n / i);\n                }\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt == (int) sqrt) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage"}
{"ID": 109, "source": "Multi_HumanEval_java:HumanEval_java/112", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (c.contains(s.substring(i, i + 1))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult += s.substring(i, i + 1);\n\t\t}\n\t\tboolean isPalindrome = true;\n\t\tfor (int i = 0; i < result.length() / 2; i++) {\n\t\t\tif (result.substring(i, i + 1).equals(result.substring(result.length() - i - 1, result.length() - i))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tisPalindrome = false;\n\t\t\tbreak;\n\t\t}\n\t\tList<Object> output = new ArrayList<Object>();\n\t\toutput.add(result);\n\t\toutput.add(isPalindrome);\n\t\treturn output;\n    }\n}\n<file_sep>/src/main/java/com/codesignal/interview/sumOfTwo.java\npackage com.codesignal.interview;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class sumOfTwo {\n    /**\n     * Given two arrays of integers a and b, determine whether there is a pair of numbers (one from a and one from b) that\n     * sums up to a given integer target.\n     * Example\n     * For a = [1, 2, 3], b = [10, 20, 30, 40], and target = 42, the output should be\n     * sumOfTwo(a, b, target) = true.\n     *\n     * @param a\n     * @param b\n     * @param target\n     * @return\n     */\n    boolean sumOfTwo(int[] a, int[] b, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < a.length; i++) {\n            map.put(a[i], i);\n        }\n        for (int i = 0; i < b.length; i++) {\n            if (map.containsKey(target - b[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/"}
{"ID": 110, "source": "Multi_HumanEval_java:HumanEval_java/113", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tfor (String s : lst) {\n\t\t\tint count = 0;\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tif (s.charAt(i) % 2!= 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/Python/src/main/python/codewars/kyu_7/FindTheDivisors.py\ndef divisors(n):\n    \"\"\"\n    Create a function that returns an array of all the divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n<file_sep>/Python/src/main/python/codewars/kyu_7/FindTheDivisors.java\npackage codewars.kyu_7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that returns an array of all the divisors of a number.\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/Python/src/main/python/codewars/kyu_7/FindTheDivisors.cpp\n#include <vector>\n\nstd::vector<int> divisors(int n) {\n  std::vector<int> divisors;\n  for (int i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      divisors.push_back(i);\n    }\n  }\n  return divisors;\n}\n<file_sep>/Python/src/"}
{"ID": 111, "source": "Multi_HumanEval_java:HumanEval_java/114", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t\tlong minsum = 0;\n\t\tlong sum = 0;\n\t\tfor (Object num : nums) {\n\t\t\tsum += (long) num;\n\t\t\tminsum = Math.min(minsum, sum);\n\t\t\tif (sum > 0) {\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\treturn minsum;\n\t}\n}\n<file_sep>/src/main/java/com/code/algo/dp/Maxsubarraysum.java\npackage com.code.algo.dp;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maxsubarraysum {\n    /**\n     * * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n     * maxSubArraySum([-1, -2, -3]) == -1\n     *\n     */\n    public static int maxsubarraysum(List<Object> nums) {\n\t\tint maxsum = 0;\n\t\tint sum = 0;\n\t\tfor (Object num : nums) {\n\t\t\tsum += (int) num;\n\t\t\tmaxsum = Math.max(maxsum, sum);\n\t\t\tif (sum < 0) {\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\treturn maxsum;\n\t}\n}\n<file_sep>/src/main/java/com/code/algo/dp/Maxsubarraysum2.java\npackage com.code.algo.dp;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maxsubarraysum2 {\n    /**\n     * * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n     * maxSubArraySum([-1, -2, -3]) == -1\n     *\n     */\n    public static int maxsubarraysum2(List<Object> nums) {\n\t\tint maxsum = 0;\n\t\tint sum ="}
{"ID": 112, "source": "Multi_HumanEval_java:HumanEval_java/115", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t\tint rows = grid.size();\n\t\tint cols = grid.get(0).size();\n\t\tint count = 0;\n\t\tfor (int i = 0; i < rows; i++) {\n\t\t\tfor (int j = 0; j < cols; j++) {\n\t\t\t\tif (grid.get(i).get(j) == 1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count / capacity;\n    }\n    \n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<List<Integer>>();\n        grid.add(Arrays.asList(0, 0, 1, 0));\n        grid.add(Arrays.asList(0, 1, 0, 0));\n        grid.add(Arrays.asList(1, 1, 1, 1));\n        int capacity = 1;\n        System.out.println(maxFill(grid, capacity));\n    }\n}\n<file_sep>/src/main/java/com/fishercoder/solutions/MaximumSubarraySumWithOneDeletion.java\npackage com.fishercoder.solutions;\n\npublic class MaximumSubarraySumWithOneDeletion {\n    public static int maximumSum(int[] arr) {\n        int max = arr[0];\n        int maxSoFar = arr[0];\n        int maxWithOneDeletion = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            maxSoFar = Math.max(maxSoFar + arr[i], arr[i]);\n            maxWithOneDeletion = Math.max(maxWithOneDeletion, maxSoFar);\n            max = Math.max(max, maxWithOneDeletion);\n        }\n        return max;\n    }\n}\n<file_sep>/src/main/java/com/fishercoder/solutions/FindTheWinnerOfTheCircularGame.java\npackage com.fishercoder.solutions;\n\npublic class FindTheWinnerOfTheCircularGame {\n    public static int findTheWinner(int n, int k) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int idx = 0;\n        while (n > 1) {\n            idx = (idx + k"}
{"ID": 113, "source": "Multi_HumanEval_java:HumanEval_java/116", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t\treturn arr;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * @param sq\n     * @return\n     */\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could be very large) containing integers.\n     * The array is either entirely composed of odd integers or entirely composed of even integers except"}
{"ID": 114, "source": "Multi_HumanEval_java:HumanEval_java/117", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tString[] words = s.split(\" \");\n\t\tfor (String word : words) {\n\t\t\tif (countConsonants(word) == n) {\n\t\t\t\tresult.add(word);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n    \n    private static int countConsonants(String word) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tchar ch = word.charAt(i);\n\t\t\tif (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     *\n     * divisors(12); //should return [2,3,4,6]\n     * divisors(25); //should return [5]\n     * divisors(13); //should return [13]\n     *\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        if (result.size() == 0) {\n            result.add(n);\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after"}
{"ID": 115, "source": "Multi_HumanEval_java:HumanEval_java/118", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tint i = word.length() - 1;\n\t\twhile (i >= 0) {\n\t\t\tif (vowels.contains(word.substring(i, i + 1))) {\n\t\t\t\treturn word.substring(i, i + 1);\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\treturn \"\";\n    }\n}\n<file_sep>/Python/is_palindrome.py\ndef is_palindrome(s):\n    \"\"\"\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n    Note: For the purpose of this problem, we define empty string as valid palindrome.\n\n    Example 1:\n    Input: \"A man, a plan, a canal: Panama\"\n    Output: true\n\n    Example 2:\n    Input: \"race a car\"\n    Output: false\n    \"\"\"\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]\n<file_sep>/Python/is_power_of_two.py\ndef is_power_of_two(n):\n    \"\"\"\n    Given an integer, write a function to determine if it is a power of two.\n\n    Example 1:\n    Input: 1\n    Output: true \n    Explanation: 2^0 = 1\n\n    Example 2:\n    Input: 16\n    Output: true\n    Explanation: 2^4 = 16\n\n    Example 3:\n    Input: 218\n    Output: false\n    \"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n<file_sep>/Python/is_power_of_three.py\ndef is_power_of_three(n):\n    \"\"\"\n    Given an integer, write a function to determine if it is a power of three.\n\n    Example 1:\n    Input: 27\n    Output: true\n\n    Example 2:\n    Input: 0\n    Output: false\n\n    Example 3:\n    Input: 9\n    Output: true\n\n    Example 4:\n    Input: 45\n    Output: false\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n<file_sep>/Python/is_power_of_four"}
{"ID": 116, "source": "Multi_HumanEval_java:HumanEval_java/119", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor(String s : lst) {\n\t\t\tfor(int i = 0; i < s.length(); i++) {\n\t\t\t\tif(s.charAt(i) == '(') {\n\t\t\t\t\tstack.push(s.charAt(i));\n\t\t\t\t} else if(s.charAt(i) == ')') {\n\t\t\t\t\tif(stack.isEmpty()) {\n\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(stack.isEmpty()) {\n\t\t\treturn \"Yes\";\n\t\t} else {\n\t\t\treturn \"No\";\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/kun/datastructure/graph/Graph.java\npackage com.kun.datastructure.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private int v;\n    private List<Integer> adj[];\n\n    public Graph(int v) {\n        this.v = v;\n        adj = new ArrayList[v];\n        for(int i = 0; i < v; i++) {\n            adj[i] = new ArrayList<Integer>();\n        }\n    }\n\n    public void addEdge(int v, int w) {\n        adj[v].add(w);\n    }\n\n    public void DFS(int s) {\n        boolean visited[] = new boolean[v];\n        DFSUtil(s, visited);\n    }\n\n    private void DFSUtil(int s, boolean[] visited) {\n        visited[s] = true;\n        System.out.print(s + \" \");\n        for(int i : adj[s]) {\n            if(!visited[i]) {\n                DFSUtil(i, visited);\n            }\n        }\n    }\n\n    public void BFS(int s) {\n        boolean visited[] = new boolean[v];\n        visited[s] = true;\n        List<Integer> queue = new ArrayList<Integer>();\n        queue.add(s);\n        while(!queue.isEmpty()) {\n            s = queue.remove(0);\n            System.out.print(s + \" \");\n            for(int i : adj[s]) {\n                if(!visited[i]) {\n                    visited[i] = true;\n                    queue.add(i);\n                }\n            }\n        }"}
{"ID": 117, "source": "Multi_HumanEval_java:HumanEval_java/120", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tPriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>(){\n\t\t\tpublic int compare(Integer a, Integer b) {\n\t\t\t\treturn b - a;\n\t\t\t}\n\t\t});\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tif (pq.size() < k) {\n\t\t\t\tpq.add(arr.get(i));\n\t\t\t} else if (arr.get(i) > pq.peek()) {\n\t\t\t\tpq.poll();\n\t\t\t\tpq.add(arr.get(i));\n\t\t\t}\n\t\t}\n\t\twhile (!pq.isEmpty()) {\n\t\t\tresult.add(pq.poll());\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/jlee/problem/leetcode/LeetCode129.java\npackage com.jlee.problem.leetcode;\n\nimport com.jlee.datastructure.TreeNode;\n\npublic class LeetCode129 {\n\t/*\n\t * Given a binary tree containing digits from 0-9 only, each root-to-leaf path\n\t * could represent a number.\n\t * \n\t * An example is the root-to-leaf path 1->2->3 which represents the number 123.\n\t * \n\t * Find the total sum of all root-to-leaf numbers.\n\t * \n\t * For example,\n\t * \n\t * 1 2 3\n\t * \n\t * The total sum is 123 + 124 + 125 = 379.\n\t */\n\tpublic int sumNumbers(TreeNode root) {\n\t\treturn sumNumbers(root, 0);\n\t}\n\n\tprivate int sumNumbers(TreeNode root, int sum) {\n\t\tif (root == null)\n\t\t\treturn 0;\n\t\tsum = sum * 10 + root.val;\n\t\tif (root.left == null && root.right == null)\n\t\t\treturn sum;\n\t\treturn sumNumbers(root.left, sum) + sumNumbers(root.right, sum);\n\t}\n}\n<file_sep>/src/main/java/com/jlee/problem/leetcode/LeetCode127.java\npackage com.jlee.problem.leetcode;\n\n"}
{"ID": 118, "source": "Multi_HumanEval_java:HumanEval_java/121", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (lst.get(i) % 2!= 0 && i % 2 == 0) {\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_"}
{"ID": 119, "source": "Multi_HumanEval_java:HumanEval_java/122", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tint num = arr.get(i);\n\t\t\tif (num < 100) {\n\t\t\t\tsum += num;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/code/challenge/FindTheDifference.java\npackage com.code.challenge;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDifference {\n    /**\n     * Given two strings s and t, return the character in t that is\n     * present in t but not in s.\n     *\n     * Example:\n     *\n     *     Input: s = \"abcd\", t = \"abcde\"\n     *     Output: \"e\"\n     *\n     * Constraints:\n     *     1. 1 <= s.length <= 100\n     *     2. t.length == s.length + 1\n     *     3. s and t consist of lowercase English letters.\n     *\n     */\n    public static char findTheDifference(String s, String t) {\n\t\tint[] freq = new int[26];\n\t\tfor (char c : s.toCharArray()) {\n\t\t\tfreq[c - 'a']++;\n\t\t}\n\t\tfor (char c : t.toCharArray()) {\n\t\t\tif (freq[c - 'a'] == 0) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\tfreq[c - 'a']--;\n\t\t}\n\t\treturn'';\n    }\n}\n<file_sep>/src/main/java/com/code/challenge/FindTheDifferenceOfTwoArrays.java\npackage com.code.challenge;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDifferenceOfTwoArrays {\n    /**\n     * Given two integer arrays nums1 and nums2, return an array of\n     * all the numbers that are present in nums1 but not present in nums2.\n     *\n     * Example:\n     *\n     *     Input: nums1 = [1,2,3], nums2 = [2,3,4]\n     *     Output: [1]\n     *\n     * Constraints:\n     *     1. 1 <= nums1"}
{"ID": 120, "source": "Multi_HumanEval_java:HumanEval_java/123", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t\tList<Integer> res = new ArrayList<Integer>();\n\t\tif (n == 1) {\n\t\t\tres.add(1);\n\t\t\treturn res;\n\t\t}\n\t\twhile (n!= 1) {\n\t\t\tif (n % 2 == 1) {\n\t\t\t\tres.add(n);\n\t\t\t\tn = 3 * n + 1;\n\t\t\t} else {\n\t\t\t\tn = n / 2;\n\t\t\t}\n\t\t}\n\t\tres.add(1);\n\t\treturn res;\n    }\n}\n<file_sep>/src/main/java/com/shawn/leetcode/medium/FindTheDifference.java\npackage com.shawn.leetcode.medium;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     * String t is generated by random shuffling string s and then add one more letter at a random position.\n     * Find the letter that was added in t.\n     *\n     * Example:\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public char findTheDifference(String s, String t) {\n        char[] sArr = s.toCharArray();\n        char[] tArr = t.toCharArray();\n        Arrays.sort(sArr);\n        Arrays.sort(tArr);\n        for (int i = 0; i < sArr.length; i++) {\n            if (sArr[i]!= tArr[i]) {\n                return tArr[i];\n            }\n        }\n        return tArr[tArr.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/shawn/leetcode/medium/FindAllAnagramsInAString.java\npackage com.shawn.leetcode.medium;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindAllAnagramsInAString {\n    /**\n     * Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n     *\n     * Strings consists"}
{"ID": 121, "source": "Multi_HumanEval_java:HumanEval_java/124", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t\tString[] dateSplit = date.split(\"-\");\n\t\tif (dateSplit.length!= 3) {\n\t\t\treturn false;\n\t\t}\n\t\tint month = Integer.parseInt(dateSplit[0]);\n\t\tint day = Integer.parseInt(dateSplit[1]);\n\t\tint year = Integer.parseInt(dateSplit[2]);\n\t\tif (month < 1 || month > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day < 1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (month == 2) {\n\t\t\tif (day > 29) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\t\t\tif (day > 30) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (day > 31) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqRoot = Math.sqrt(sq);\n        if (sqRoot % 1 == 0) {\n            return (long) Math.pow(sqRoot + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber"}
{"ID": 122, "source": "Multi_HumanEval_java:HumanEval_java/125", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t\tString[] words = txt.split(\" \");\n\t\tif (words.length > 1) {\n\t\t\treturn Arrays.asList(words);\n\t\t}\n\t\twords = txt.split(\",\");\n\t\tif (words.length > 1) {\n\t\t\treturn Arrays.asList(words);\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < txt.length(); i++) {\n\t\t\tif (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheStrongestAge.java\npackage com.codewars.java.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindTheStrongestAge {\n    /**\n     * Given a list of people with their name, age and strength, return a list of the strongest people whose age is\n     * between 18 and 21 inclusive.\n     *\n     * @param people\n     * @return\n     */\n    public static List<String> strongestAge(List<String> people) {\n        return people.stream()\n               .filter(person -> {\n                    String[] personInfo = person.split(\" \");\n                    int age = Integer"}
{"ID": 123, "source": "Multi_HumanEval_java:HumanEval_java/126", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t\tif (lst.size() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst.get(i).equals(lst.get(i + 1))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ((int) lst.get(i) > (int) lst.get(i + 1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Create a function that takes a string and returns the number of vowels\n     *  in that string.\n     *\n     * Examples\n     * countVowels(\"Celebration\") ➞ 5\n     * countVowels(\"Palm\") ➞ 1\n     * countVowels(\"Prediction\") ➞ 4\n     *\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o'\n\t\t\t\t\t|| str.charAt(i) == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheMissingNumber.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingNumber {\n    /**\n     * * Create a function that takes an array of numbers between 1 and 10\n     * (inclusive) and returns the missing number.\n     *\n     * Examples\n     * missingNum(["}
{"ID": 124, "source": "Multi_HumanEval_java:HumanEval_java/127", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t\tint start1 = interval1.get(0);\n\t\tint end1 = interval1.get(1);\n\t\tint start2 = interval2.get(0);\n\t\tint end2 = interval2.get(1);\n\t\tif (start1 > end1 || start2 > end2) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\tif (start1 <= start2 && end1 >= start2) {\n\t\t\tint start = start2;\n\t\t\tint end = Math.min(end1, end2);\n\t\t\tint length = end - start + 1;\n\t\t\tif (isPrime(length)) {\n\t\t\t\treturn \"YES\";\n\t\t\t}\n\t\t}\n\t\tif (start2 <= start1 && end2 >= start1) {\n\t\t\tint start = start1;\n\t\t\tint end = Math.min(end1, end2);\n\t\t\tint length = end - start + 1;\n\t\t\tif (isPrime(length)) {\n\t\t\t\treturn \"YES\";\n\t\t\t}\n\t\t}\n\t\treturn \"NO\";\n    }\n    \n    public static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/codesignal/arcade/intro/IsLucky.java\npackage com.codesignal.arcade.intro;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsLucky {\n    /**\n     * Ticket numbers usually consist of an even number of digits.\n     * A ticket number is considered lucky if the sum of the first half\n     * of the digits is equal to the sum of the second half.\n     * Given a ticket number n, determine if it is lucky or not.\n     * Example\n     * For n = 1230, the output should be\n     * isLucky(n) = true;\n     * For n = 239017, the output should be\n     * isLucky(n) = false.\n     * [input"}
{"ID": 125, "source": "Multi_HumanEval_java:HumanEval_java/128", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t\tif (arr.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tint prod = 1;\n\t\tint sum = 0;\n\t\tfor (Object num : arr) {\n\t\t\tif (num instanceof Integer) {\n\t\t\t\tif ((int) num == 0) {\n\t\t\t\t\tprod = 0;\n\t\t\t\t} else if ((int) num < 0) {\n\t\t\t\t\tprod *= -1;\n\t\t\t\t}\n\t\t\t\tsum += Math.abs((int) num);\n\t\t\t}\n\t\t}\n\t\treturn prod * sum;\n    }\n}\n<file_sep>/Python/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_code_challenges/Python_"}
{"ID": 126, "source": "Multi_HumanEval_java:HumanEval_java/129", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t\tint n = grid.size();\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (i == 0 && j == 0) {\n\t\t\t\t\tdp[i][j] = grid.get(i).get(j);\n\t\t\t\t} else if (i == 0) {\n\t\t\t\t\tdp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n\t\t\t\t} else if (j == 0) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<Integer> res = new ArrayList<>();\n\t\tint i = n - 1;\n\t\tint j = n - 1;\n\t\twhile (i >= 0 && j >= 0) {\n\t\t\tres.add(grid.get(i).get(j));\n\t\t\tif (i == 0 && j == 0) {\n\t\t\t\tbreak;\n\t\t\t} else if (i == 0) {\n\t\t\t\tj--;\n\t\t\t} else if (j == 0) {\n\t\t\t\ti--;\n\t\t\t} else {\n\t\t\t\tif (dp[i - 1][j] < dp[i][j - 1]) {\n\t\t\t\t\ti--;\n\t\t\t\t} else {\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(res);\n\t\treturn res;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(1, 2, 3));\n        grid.add(Arrays.asList(4,"}
{"ID": 127, "source": "Multi_HumanEval_java:HumanEval_java/130", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t\tList<Number> result = new ArrayList<Number>();\n\t\tif (n == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(1);\n\t\tif (n == 1) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(3);\n\t\tif (n == 2) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(2);\n\t\tif (n == 3) {\n\t\t\treturn result;\n\t\t}\n\t\tfor (int i = 3; i < n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(1 + i / 2);\n\t\t\t} else {\n\t\t\t\tresult.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could be very large) containing integers.\n     * The array is either entirely composed of odd integers or entirely composed of even integers except for a single integer N.\n     * Write a method that takes the array as an argument and returns N.\n     *\n     */\n    public static int stray(int[] numbers) {"}
{"ID": 128, "source": "Multi_HumanEval_java:HumanEval_java/131", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t\tint product = 1;\n\t\twhile (n > 0) {\n\t\t\tint digit = n % 10;\n\t\t\tif (digit % 2!= 0) {\n\t\t\t\tproduct *= digit;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\treturn product;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if (numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    public static List<Character> vowelIndices(String word) {\n        List<Character> vowels = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                v"}
{"ID": 129, "source": "Multi_HumanEval_java:HumanEval_java/132", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tchar ch = string.charAt(i);\n\t\t\tif (ch == '[') {\n\t\t\t\tstack.push(ch);\n\t\t\t} else if (ch == ']') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n<file_sep>/src/main/java/com/code/challenge/IsPalindrome.java\npackage com.code.challenge;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * Create a function that takes a string and returns True if it's a palindrome, False otherwise.\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     * is_palindrome(\"racecar\")\n     *\n     * is_palindrome(\"racecar\") ➞ True\n     *"}
{"ID": 130, "source": "Multi_HumanEval_java:HumanEval_java/133", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t\tint sum = 0;\n\t\tfor (Number n : lst) {\n\t\t\tsum += Math.pow(Math.ceil(n.doubleValue()), 2);\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     *\n     * divisors(12); //should return [2,3,4,6]\n     * divisors(25); //should return [5]\n     * divisors(13); //should return [13]\n     *\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     * findNextSquare(114) --> -1\n     *\n     */\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {"}
{"ID": 131, "source": "Multi_HumanEval_java:HumanEval_java/134", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t\tif (txt.length() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tchar lastChar = txt.charAt(txt.length() - 1);\n\t\tif (Character.isLetter(lastChar) && txt.charAt(txt.length() - 2) =='') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n}<file_sep>/Python/CheckIfLastCharIsALetter.py\nclass CheckIfLastCharIsALetter:\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    \"\"\"\n    def checkIfLastCharIsALetter(self, txt: str) -> bool:\n        if len(txt) == 0:\n            return False\n        lastChar = txt[len(txt) - 1]\n        if lastChar.isalpha() and txt[len(txt) - 2] =='':\n            return True\n        return False\n<file_sep>/Python/FindTheMissingNumber.py\nclass FindTheMissingNumber:\n    \"\"\"\n    Create a function that takes a list of numbers between 1 and 10\n    (excluding one number) and returns the missing number.\n\n    Examples:\n    find_the_missing_number([1, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ 5\n    find_the_missing_number([7, 2, 3, 6, 5, 9, 1, 4, 8]) ➞ 10\n    find_the_missing_number([10, 5, 1, 2, 4, 6, 8, 3, 9]) ➞ 7\n    \"\"\"\n    def findTheMissingNumber(self, lst: list)"}
{"ID": 132, "source": "Multi_HumanEval_java:HumanEval_java/135", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t\tint maxIndex = -1;\n\t\tfor (int i = 1; i < arr.size(); i++) {\n\t\t\tif ((int)arr.get(i) < (int)arr.get(i-1)) {\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn maxIndex;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * Create a function that takes a string and returns the number (count) of\n     * vowels contained within it.\n     *\n     * Examples:\n     * countVowels(\"Celebration\") = 5\n     * countVowels(\"Palm\") = 1\n     * countVowels(\"Prediction\") = 4\n     *\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (char c : str.toCharArray()) {\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheMissingNumber.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingNumber {\n    /**\n     * An ordered array of numbers from 1 to N is given. One number is missing\n     * in the array (number from 1 to N). The function finds the missing number.\n     *\n     * Examples:\n     * findMissingNumber([1, 2, 3, 4, 6]) = 5\n     * findMissingNumber([1, 3, 4, 5]) = 2\n     * findMissingNumber([1, 2, 3, 4, 5, 7, 8, 9]) = 6\n    "}
{"ID": 133, "source": "Multi_HumanEval_java:HumanEval_java/136", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tint largestNegative = Integer.MIN_VALUE;\n\t\tint smallestPositive = Integer.MAX_VALUE;\n\t\tboolean hasNegative = false;\n\t\tboolean hasPositive = false;\n\t\tfor (Object obj : lst) {\n\t\t\tif (obj instanceof Integer) {\n\t\t\t\tint num = (int) obj;\n\t\t\t\tif (num < 0) {\n\t\t\t\t\thasNegative = true;\n\t\t\t\t\tlargestNegative = Math.max(largestNegative, num);\n\t\t\t\t} else if (num > 0) {\n\t\t\t\t\thasPositive = true;\n\t\t\t\t\tsmallestPositive = Math.min(smallestPositive, num);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (hasNegative) {\n\t\t\tresult.add(largestNegative);\n\t\t} else {\n\t\t\tresult.add(null);\n\t\t}\n\t\tif (hasPositive) {\n\t\t\tresult.add(smallestPositive);\n\t\t} else {\n\t\t\tresult.add(null);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Create a function that takes a string and returns the number of vowels\n     * in it.\n     *\n     * Examples:\n     * countVowels(\"Celebration\") == 5\n     * countVowels(\"Palm\") == 1\n     * countVowels(\"Prediction\") == 4\n     *\n     */\n    public static int countVowels(String str) {\n\t\tint count = 0;\n\t\tfor (char ch : str.toCharArray()) {\n\t\t\tif (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheMissingNumber.java\npackage com.codewars.java.kyu7;\n\n"}
{"ID": 134, "source": "Multi_HumanEval_java:HumanEval_java/137", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be. or,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t\tif (a instanceof Integer && b instanceof Integer) {\n\t\t\treturn (Integer) a > (Integer) b? a : b;\n\t\t} else if (a instanceof Float && b instanceof Float) {\n\t\t\treturn (Float) a > (Float) b? a : b;\n\t\t} else if (a instanceof String && b instanceof String) {\n\t\t\treturn a.toString().replace(\",\", \".\").compareTo(b.toString().replace(\",\", \".\")) > 0? a : b;\n\t\t}\n\t\treturn null;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Examples\n     * divisors(12) ➞ [1, 2, 3, 4, 6, 12]\n     *\n     * divisors(25) ➞ [1, 5, 25]\n     *\n     * divisors(13) ➞ [1, 13]\n     * Notes\n     * The number will always be positive.\n     * The function should return an array, not a string.\n     * The divisors should be ordered from smallest to largest.\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrongestInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrongestInt {\n    /**\n     * Given an array of integers, find the strongest integer in the array.\n     *\n     * An integer is strongest if it is strictly greater than all its neighbors.\n     *\n     * For example, in the array [1"}
{"ID": 135, "source": "Multi_HumanEval_java:HumanEval_java/138", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t\tif (n < 8) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int a = 2; a <= n/4; a += 2) {\n\t\t\tfor (int b = 2; b <= n/4; b += 2) {\n\t\t\t\tfor (int c = 2; c <= n/4; c += 2) {\n\t\t\t\t\tfor (int d = 2; d <= n/4; d += 2) {\n\t\t\t\t\t\tif (a + b + c + d == n) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/Python/IsPowerOfTwo.py\nclass IsPowerOfTwo:\n    \"\"\"\n    Determine whether the given number is a power of two\n    Example\n    is_power_of_two(1) == True\n    is_power_of_two(2) == True\n    is_power_of_two(3) == False\n    is_power_of_two(4) == True\n    is_power_of_two(5) == False\n    \"\"\"\n    def is_power_of_two(self, n):\n        return n > 0 and (n & (n - 1)) == 0\n<file_sep>/Python/IsPowerOfTwo.java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPowerOfTwo {\n    /**\n     * Determine whether the given number is a power of two\n     * Example\n     * is_power_of_two(1) == True\n     * is_power_of_two(2) == True\n     * is_power_of_two(3) == False\n     * is_power_of_two(4) == True\n     * is_power_of_two(5) == False\n     */\n    public static Boolean isPowerOfTwo(int n) {\n\t\treturn n > 0 && (n & (n - 1)) == 0;\n    }\n}\n<file_sep>/Python/IsPowerOfTwo.cpp\nclass IsPowerOfTwo {\n    /**\n     * Determine whether the given number is a power of two\n     * Example\n     * is_power_of_two(1) == True\n     * is_power_of_two(2"}
{"ID": 136, "source": "Multi_HumanEval_java:HumanEval_java/139", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tlong result = 1;\n\t\tfor (int i = n; i > 0; i--) {\n\t\t\tresult *= factorial(i);\n\t\t}\n\t\treturn result;\n    }\n\n\tpublic static long factorial(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tlong result = 1;\n\t\tfor (int i = n; i > 0; i--) {\n\t\t\tresult *= i;\n\t\t}\n\t\treturn result;\n\t}\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem10/BinaryTreeDepth.java\npackage com.github.pedrovgs.problem10;\n\nimport com.github.pedrovgs.problem1.BinaryTree;\n\n/**\n * @author <NAME>.\n */\npublic class BinaryTreeDepth {\n\n    public static int depth(BinaryTree tree) {\n        if (tree == null) {\n            return 0;\n        }\n        return 1 + Math.max(depth(tree.getLeft()), depth(tree.getRight()));\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem11/BinaryTreeInOrderTraversal.java\npackage com.github.pedrovgs.problem11;\n\nimport com.github.pedrovgs.problem1.BinaryTree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author <NAME>.\n */\npublic class BinaryTreeInOrderTraversal {\n\n    public static List<Integer> inOrderTraversal(BinaryTree tree) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (tree == null) {\n            return result;\n        }\n        result.addAll(inOrderTraversal(tree.getLeft()));\n        result.add(tree.getValue());\n        result.addAll(inOrderTraversal(tree.getRight()));\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/github/pedrovgs/problem12/BinaryTreePreOrderTraversal.java\npackage com.github.pedrovgs.problem12;\n\nimport com.github.pedrovgs.problem1.BinaryTree;\n\nimport"}
{"ID": 137, "source": "Multi_HumanEval_java:HumanEval_java/140", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t\tString result = text.replace(\" \", \"_\");\n\t\tresult = result.replace(\"__\", \"-\");\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * * Create a function that takes an integer and returns an array of all its divisors.\n     *\n     * Example:\n     *\n     * divisors(12); //should return [2,3,4,6]\n     * divisors(25); //should return [5]\n     * divisors(13); //should return [13]\n     *\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * * Given a positive integer, find the next perfect square.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     * findNextSquare(114) --> -1\n     *\n     */\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if (sqrt % 1 == 0) {\n            return (long) Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheSmallest.java\npackage com.codewars.kyu7;\n\npublic class FindTheSmallest {\n    /**\n     * * Given an array of integers, find the smallest integer in the array.\n     *\n     *"}
{"ID": 138, "source": "Multi_HumanEval_java:HumanEval_java/141", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t\tString[] parts = fileName.split(\"\\\\.\");\n\t\tif (parts.length!= 2) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (!parts[0].matches(\"[a-zA-Z].*\")) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (!parts[1].matches(\"(txt|exe|dll)\")) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (parts[0].matches(\".*[0-9]{4,}.*\")) {\n\t\t\treturn \"No\";\n\t\t}\n\t\treturn \"Yes\";\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     * findDivisors(12); // => [1, 2, 3, 4, 6, 12]\n     * findDivisors(25); // => [1, 5, 25]\n     *\n     */\n    public static List<Integer> findDivisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheVowels.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    /**\n     * Create a function that takes a string and returns an array of its vowels.\n     *\n     * Example:\n     * findVowels(\"Celebration\"); // => ['e', 'e', 'a', 'i', 'o']\n     * findVowels(\"Palm\"); // => ['a', 'o']\n     * findVowels(\"Prediction\"); // =>"}
{"ID": 139, "source": "Multi_HumanEval_java:HumanEval_java/142", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (i % 3 == 0 && i % 4!= 0) {\n\t\t\t\tlst.set(i, (int) Math.pow((int) lst.get(i), 2));\n\t\t\t} else if (i % 4 == 0) {\n\t\t\t\tlst.set(i, (int) Math.pow((int) lst.get(i), 3));\n\t\t\t}\n\t\t\tsum += (int) lst.get(i);\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codesignal/arcade/intro/IsLucky.java\npackage com.codesignal.arcade.intro;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsLucky {\n    /**\n     * \"\n     * Ticket numbers usually consist of an even number of digits. A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half.\n     * Given a ticket number n, determine if it's lucky or not.\n     *\n     * Example\n     * For n = 1230, the output should be\n     * isLucky(n) = true;\n     * For n = 239017, the output should be\n     * isLucky(n) = false.\n     *\n     */\n    public static boolean isLucky(int n) {\n\t\tString s = Integer.toString(n);\n\t\tint firstHalf = 0;\n\t\tint secondHalf = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (i < s.length() / 2) {\n\t\t\t\tfirstHalf += Integer.parseInt(s.substring(i, i + 1));\n\t\t\t} else {\n\t\t\t\tsecondHalf += Integer.parseInt(s.substring(i, i + 1));\n\t\t\t}\n\t\t}\n\t\treturn firstHalf == secondHalf;\n    }\n}\n<file_sep>/src/main/java/com/codesignal/arcade/intro/AreSimilar.java\npackage com.codesignal.arcade."}
{"ID": 140, "source": "Multi_HumanEval_java:HumanEval_java/143", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t\tString[] words = sentence.split(\" \");\n\t\tString result = \"\";\n\t\tfor (String word : words) {\n\t\t\tif (isPrime(word.length())) {\n\t\t\t\tresult += word + \" \";\n\t\t\t}\n\t\t}\n\t\treturn result.trim();\n\t}\n\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/fishercoder/solutions/MaximumSubarraySumWithOneDeletion.java\npackage com.fishercoder.solutions;\n\npublic class MaximumSubarraySumWithOneDeletion {\n    /**\n     * Given an array of integers,\n     * return the maximum sum for a non-empty subarray\n     * after deleting at most one element.\n     *\n     * Example 1:\n     * Input: arr = [1,-2,0,3]\n     * Output: 4\n     * Explanation: Because we can choose to delete -2 and 0,\n     * the subarray [3] has the maximum sum.\n     *\n     * Example 2:\n     * Input: arr = [1,-2,-2,3]\n     * Output: 3\n     * Explanation: Because we can choose to delete -2, -2, or 1,\n     * the subarray [3] has the maximum sum.\n     *\n     * Example 3:\n     * Input: arr = [-1,-1,-1,-1]\n     * Output: -1\n     * Explanation: The subarray [1] has the maximum sum in the case of one deletion.\n     *\n     * Constraints:\n     * 1 <= arr.length <= 10^5\n     * -10^4 <= arr[i] <= 10^4\n     */\n    public int maximumSum(int[] arr) {\n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.length; i++) {\n            int sum = 0;\n            for (int j = i; j < arr.length; j++) {\n                sum += arr[j];\n                maxSum = Math."}
{"ID": 141, "source": "Multi_HumanEval_java:HumanEval_java/144", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t\tString[] x_arr = x.split(\"/\");\n\t\tString[] n_arr = n.split(\"/\");\n\t\tint x_num = Integer.parseInt(x_arr[0]);\n\t\tint x_den = Integer.parseInt(x_arr[1]);\n\t\tint n_num = Integer.parseInt(n_arr[0]);\n\t\tint n_den = Integer.parseInt(n_arr[1]);\n\t\tint gcd = gcd(x_den, n_den);\n\t\tif (gcd == 1) {\n\t\t\treturn false;\n\t\t}\n\t\tx_num *= n_num;\n\t\tx_den /= gcd;\n\t\tn_den /= gcd;\n\t\tif (x_den == 1) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n\n\tpublic static int gcd(int a, int b) {\n\t\tif (a == 0) {\n\t\t\treturn b;\n\t\t}\n\t\treturn gcd(b % a, a);\n\t}\n}\n<file_sep>/src/main/java/com/interview/graph/Graph.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private List<Vertex> vertices;\n    private List<Edge> edges;\n\n    public Graph() {\n        this.vertices = new ArrayList<>();\n        this.edges = new ArrayList<>();\n    }\n\n    public void addVertex(Vertex vertex) {\n        this.vertices.add(vertex);\n    }\n\n    public void addEdge(Edge edge) {\n        this.edges.add(edge);\n    }\n\n    public List<Vertex> getVertices() {\n        return this.vertices;\n    }\n\n    public List<Edge> getEdges() {\n        return this.edges;\n    }\n\n    public void printGraph() {\n        for (Vertex vertex : this.vertices) {\n            System.out.print(vertex.getValue() + \" -> \");\n            for (Edge edge : vertex.getEdges()) {\n                System.out.print(edge.getDestination().getValue() + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n<file_sep>/src/main/java/com/interview/graph/Vertex.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util"}
{"ID": 142, "source": "Multi_HumanEval_java:HumanEval_java/145", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (nums.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tint[] sums = new int[nums.size()];\n\t\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\tint num = (int) nums.get(i);\n\t\t\tint sum = 0;\n\t\t\twhile (num!= 0) {\n\t\t\t\tsum += num % 10;\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t\tsums[i] = sum;\n\t\t}\n\t\tint[] indices = new int[nums.size()];\n\t\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\tindices[i] = i;\n\t\t}\n\t\tfor (int i = 0; i < sums.length; i++) {\n\t\t\tfor (int j = i + 1; j < sums.length; j++) {\n\t\t\t\tif (sums[i] > sums[j]) {\n\t\t\t\t\tint temp = sums[i];\n\t\t\t\t\tsums[i] = sums[j];\n\t\t\t\t\tsums[j] = temp;\n\t\t\t\t\ttemp = indices[i];\n\t\t\t\t\tindices[i] = indices[j];\n\t\t\t\t\tindices[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < indices.length; i++) {\n\t\t\tresult.add(nums.get(indices[i]));\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Write a function which returns a string containing all vowels\n     * found in the input string, with their positions in the input string.\n     * If there are duplicates, only count the first one.\n     *\n     * For example:\n     * >>> find_the_vowels(\"Hello World\") == \"e1o1u1\"\n     * >>> find_the_vowels(\"Happy Anniversary\") == \"a1e1i1o"}
{"ID": 143, "source": "Multi_HumanEval_java:HumanEval_java/146", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t\tint count = 0;\n\t\tfor (Object num : nums) {\n\t\t\tif (num instanceof Integer) {\n\t\t\t\tint n = (int) num;\n\t\t\t\tif (n > 10 && (n % 2 == 1) && (n / 10 % 2 == 1)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrongestAge.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindTheStrongestAge {\n    public static int strongestAge(List<String> people) {\n        int max = 0;\n        for (String person : people) {\n            String[] parts = person.split(\" \");\n            int age = Integer.parseInt(parts[0]);\n            int strength = Integer.parseInt(parts[1]);\n            if (strength > max) {\n                max = strength;\n            }\n        }\n        return max;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n       "}
{"ID": 144, "source": "Multi_HumanEval_java:HumanEval_java/147", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tfor (int k = j + 1; k <= n; k++) {\n\t\t\t\t\tif ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n    \n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(getMaxTriples(n));\n    }\n}\n<file_sep>/src/main/java/com/skalicky/java/interview/array/FindMissingNumber.java\npackage com.skalicky.java.interview.array;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMissingNumber {\n    /**\n     * * Given an array of size n-1 and given that there are numbers from 1 to n with one missing,\n     *     find the missing number.\n     *\n     * Example :\n     *     Input: [1, 2, 4]\n     *     Output: 3\n     *\n     */\n    public static int findMissingNumber(int[] arr) {\n\t\tint n = arr.length + 1;\n\t\tint sum = n * (n + 1) / 2;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tsum -= arr[i];\n\t\t}\n\t\treturn sum;\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {1, 2, 4};\n        System.out.println(findMissingNumber(arr));\n    }\n}\n<file_sep>/src/main/java/com/skalicky/java/interview/array/FindMaxSumSubArray.java\npackage com.skalicky.java.interview.array;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMaxSumSubArray {\n    /**\n     * * Given an array of integers, find the"}
{"ID": 145, "source": "Multi_HumanEval_java:HumanEval_java/148", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t\tList<Object> planets = new ArrayList<Object>();\n\t\tplanets.add(\"Mercury\");\n\t\tplanets.add(\"Venus\");\n\t\tplanets.add(\"Earth\");\n\t\tplanets.add(\"Mars\");\n\t\tplanets.add(\"Jupiter\");\n\t\tplanets.add(\"Saturn\");\n\t\tplanets.add(\"Uranus\");\n\t\tplanets.add(\"Neptune\");\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (planets.contains(planet1) && planets.contains(planet2)) {\n\t\t\tint index1 = planets.indexOf(planet1);\n\t\t\tint index2 = planets.indexOf(planet2);\n\t\t\tif (index1 < index2) {\n\t\t\t\tfor (int i = index1 + 1; i < index2; i++) {\n\t\t\t\t\tresult.add(planets.get(i));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int i = index2 + 1; i < index1; i++) {\n\t\t\t\t\tresult.add(planets.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/Python/8kyu/Find_the_smallest_integer_in_the_array.py\n\"\"\"\nGiven an array of integers, find the smallest integer in the array.\n\nExample\nFor inputArray = [4, 1, 3, 2], the output should be\nsmallestInteger(inputArray) = 1.\n\nInput/Output\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer inputArray\n\nGuaranteed constraints:\n1 ≤ inputArray.length ≤ 10,\n-1000 ≤ inputArray[i] ≤ 1000.\n\n[output] integer\n\nThe smallest integer in inputArray.\n\"\"\"\n\n\ndef smallestInteger(inputArray):\n    return min(inputArray)\n<file_sep>/Python/8kyu/Find_the_first_non-consecutive_number.py\n\"\"\"\nYour task is to find the first element of an array that is not consecutive.\n\nBy not consecutive we mean not exactly 1 larger than the previous element of the array.\n\nE.g."}
{"ID": 146, "source": "Multi_HumanEval_java:HumanEval_java/149", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tfor (String s : lst) {\n\t\t\tif (s.length() % 2 == 0) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\tresult.sort(new Comparator<String>() {\n\t\t\t@Override\n\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\tif (s1.length() == s2.length()) {\n\t\t\t\t\treturn s1.compareTo(s2);\n\t\t\t\t}\n\t\t\t\treturn s1.length() - s2.length();\n\t\t\t}\n\t\t});\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of all its divisors\n     * sorted from smallest to largest.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could be\n     * very large) containing integers. The array is either entirely comprised of odd\n     * integers or entirely comprised of even integers except for a single integer N.\n     * Write a method that takes the array as an argument and returns this \"stray\"\n     * number.\n     *\n     * @param numbers\n     * @return\n     */\n    public static int stray(int[] numbers) {\n        int oddCount = 0;\n        int evenCount = 0;\n        for (int n : numbers) {\n            if (n"}
{"ID": 147, "source": "Multi_HumanEval_java:HumanEval_java/150", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t\tif (isPrime(n)) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n    }\n    \n    public static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/interview/graph/Graph.java\npackage com.interview.graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Graph {\n    private List<Vertex> vertices;\n    private List<Edge> edges;\n    \n    public Graph() {\n        vertices = new ArrayList<Vertex>();\n        edges = new ArrayList<Edge>();\n    }\n    \n    public void addVertex(Vertex v) {\n        vertices.add(v);\n    }\n    \n    public void addEdge(Edge e) {\n        edges.add(e);\n    }\n    \n    public List<Vertex> getVertices() {\n        return vertices;\n    }\n    \n    public List<Edge> getEdges() {\n        return edges;\n    }\n    \n    public void printGraph() {\n        for (Vertex v : vertices) {\n            System.out.println(\"Vertex: \" + v);\n        }\n        \n        for (Edge e : edges) {\n            System.out.println(\"Edge: \" + e);\n        }\n    }\n    \n    public void bfs(Vertex start) {\n        start.setVisited(true);\n        start.setDistance(0);\n        \n        List<Vertex> queue = new ArrayList<Vertex>();\n        queue.add(start);\n        \n        while (!queue.isEmpty()) {\n            Vertex v = queue.remove(0);\n            \n            for (Vertex n : v.getNeighbours()) {\n                if (!n.isVisited()) {\n                    n.setVisited(true);\n                    n.setDistance(v.getDistance() + 1);\n                    n.setPredecessor(v);\n                    queue.add(n);\n                }\n            }\n        }\n    }\n    \n    public void dfs(Vertex start) {\n        start.setVisited(true);\n        \n        for (Vertex n : start.getNeighbours()) {\n            if (!n.isVisited()) {\n                dfs(n);\n            }\n        }\n    }\n    \n    public void dfsWithStack(Vertex start)"}
{"ID": 148, "source": "Multi_HumanEval_java:HumanEval_java/151", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor (Object obj : lst) {\n\t\t\tif (obj instanceof Integer) {\n\t\t\t\tint num = (int) obj;\n\t\t\t\tif (num % 2!= 0) {\n\t\t\t\t\tsum += num * num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/Python/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Challenges/Python_Code_Ch"}
{"ID": 149, "source": "Multi_HumanEval_java:HumanEval_java/152", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < game.size(); i++) {\n\t\t\tif(game.get(i) == guess.get(i)) {\n\t\t\t\tresult.add(0);\n\t\t\t} else {\n\t\t\t\tresult.add(Math.abs(game.get(i) - guess.get(i)));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its divisors.\n     *\n     * Example:\n     *\n     * divisors(12); //should return [2,3,4,6]\n     * divisors(25); //should return [5]\n     * divisors(13); //should return [13]\n     *\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n            if(n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    /**\n     * You might know some pretty large perfect squares. But what about the NEXT one?\n     *\n     * Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter.\n     * Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n     *\n     * If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.\n     *\n     * Examples:\n     *\n     * findNextSquare(121) --> 144\n     * findNextSquare(625) --> 676\n     * find"}
{"ID": 150, "source": "Multi_HumanEval_java:HumanEval_java/153", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t\tint maxStrength = Integer.MIN_VALUE;\n\t\tString strongestExtension = \"\";\n\t\tfor (String extension : extensions) {\n\t\t\tint strength = 0;\n\t\t\tfor (char c : extension.toCharArray()) {\n\t\t\t\tif (Character.isUpperCase(c)) {\n\t\t\t\t\tstrength++;\n\t\t\t\t} else if (Character.isLowerCase(c)) {\n\t\t\t\t\tstrength--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (strength > maxStrength) {\n\t\t\t\tmaxStrength = strength;\n\t\t\t\tstrongestExtension = extension;\n\t\t\t}\n\t\t}\n\t\treturn className + \".\" + strongestExtension;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * We want to know the index of the vowels in a given word, for example,\n     * there are two vowels in the word super (the second and fourth letters).\n     *\n     * So given a string \"super\", we should return a list of [2, 4].\n     *\n     * Some cases:\n     * - there are no vowels in the given string => return []\n     * - given string is empty => return []\n     *\n     * Note: Vowels in this context refers to: a, o, u, i, e\n     *\n     */\n    public static List<Integer> vowelIndices(String word) {\n\t\tList<Integer> vowelIndices = new ArrayList<>();\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tchar c = word.charAt(i);\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\t\tvowelIndices.add(i + 1);\n\t\t\t}\n\t\t}\n\t\treturn vowelIndices;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java"}
{"ID": 151, "source": "Multi_HumanEval_java:HumanEval_java/154", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t\tif(a.length() < b.length()) return false;\n\t\tfor(int i = 0; i < b.length(); i++) {\n\t\t\tif(a.contains(b)) return true;\n\t\t\tb = b.substring(1) + b.substring(0,1);\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i == 0) {\n                divisors.add(i);\n                if(i!= n/i) divisors.add(n/i);\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheVowels {\n    public static List<Character> vowelIndices(String word) {\n        List<Character> vowels = new ArrayList<>();\n        for(int i = 0; i < word.length(); i++) {\n            if(\"aeiouAEIOU\".contains(word.substring(i, i+1))) vowels.add(word.charAt(i));\n        }\n        return vowels;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheCapitals.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheCapitals {\n    public static List<Integer> findCapitals(String word) {\n        List<Integer> capitals = new ArrayList<>();\n        for(int i = 0; i < word.length(); i++) {\n            if("}
{"ID": 152, "source": "Multi_HumanEval_java:HumanEval_java/155", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t\tint even = 0;\n\t\tint odd = 0;\n\t\tif (num < 0) {\n\t\t\tnum = -num;\n\t\t}\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\teven++;\n\t\t\t} else {\n\t\t\t\todd++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tresult.add(even);\n\t\tresult.add(odd);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * We want to know the index of the vowels in a given word, for example, there are two vowels in the word super (the second and fourth letters).\n     *\n     * So given a string \"super\", we should return a list of [2, 4].\n     *\n     * Some cases:\n     * - there are no vowels in the given string => return an empty list\n     * - given string is empty => return an empty list\n     *\n     * Note: Vowels in this context refers to: a, o, u, i, e\n     *\n     */\n    public static List<Integer> vowelIndices(String word) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tif (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n\t\t\t\tresult.add(i + 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java."}
{"ID": 153, "source": "Multi_HumanEval_java:HumanEval_java/156", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t\tif (number < 1 || number > 1000) {\n\t\t\treturn null;\n\t\t}\n\t\tString[] roman = {\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\", \"m\", \"mm\", \"mmm\"};\n\t\tint[] arabic = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000};\n\t\tString result = \"\";\n\t\tfor (int i = arabic.length - 1; i >= 0; i--) {\n\t\t\twhile (number >= arabic[i]) {\n\t\t\t\tnumber -= arabic[i];\n\t\t\t\tresult += roman[i];\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheVowels {\n    /**\n     * * Given a string, return the number of vowels in the string.\n     *\n     * Examples:\n     * >>> find_the_vowels(\"Hello\") == 2\n     * >>> find_the_vowels(\"Tomato\") == 3\n     * >>> find_the_vowels(\"School\") == 2\n     * >>> find_the_vowels(\"Yellow\") == 3\n     *\n     */\n    public static int findTheVowels("}
{"ID": 154, "source": "Multi_HumanEval_java:HumanEval_java/157", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t\tint max = Math.max(a, Math.max(b, c));\n\t\tint sum = a + b + c - max;\n\t\tif (max * max == sum * sum) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/Python/src/main/python/codewars/FindTheMissingLetter.py\ndef find_missing_letter(chars):\n    \"\"\"\n    * Find the missing letter in the passed letter range and return it.\n    * If all letters are present, return None.\n    * Example:\n    * find_missing_letter(['a','b','c','d','f']) == 'e'\n    * find_missing_letter(['O','Q','R','S']) == 'P'\n    \"\"\"\n    for i in range(len(chars) - 1):\n        if ord(chars[i + 1]) - ord(chars[i])!= 1:\n            return chr(ord(chars[i]) + 1)\n    return None\n<file_sep>/Python/src/main/python/codewars/FindTheMissingLetter.java\npackage codewars;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTheMissingLetter {\n    /**\n     * * Find the missing letter in the passed letter range and return it.\n     * If all letters are present, return None.\n     * Example:\n     * find_missing_letter(['a','b','c','d','f']) == 'e'\n     * find_missing_letter(['O','Q','R','S']) == 'P'\n     */\n    public static Character findMissingLetter(List<Character> chars) {\n\t\tfor (int i = 0; i < chars.size() - 1; i++) {\n\t\t\tif (chars.get(i + 1) - chars.get(i)!= 1) {\n\t\t\t\treturn (char) (chars.get(i) + 1);\n\t\t\t}\n\t\t}\n\t\treturn null;\n    }\n}\n<file_sep>/Python/src/main/python/codewars/FindTheMissingLetter.cpp\n#include <vector>\n\nusing namespace std;\n\nclass FindTheMissingLetter {\n  /**\n   * * Find the missing letter in the passed letter range and return it."}
{"ID": 155, "source": "Multi_HumanEval_java:HumanEval_java/158", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t\tString max = \"\";\n\t\tint max_unique = 0;\n\t\tfor (String word : words) {\n\t\t\tSet<Character> unique = new HashSet<Character>();\n\t\t\tfor (char c : word.toCharArray()) {\n\t\t\t\tunique.add(c);\n\t\t\t}\n\t\t\tif (unique.size() > max_unique) {\n\t\t\t\tmax = word;\n\t\t\t\tmax_unique = unique.size();\n\t\t\t} else if (unique.size() == max_unique && word.compareTo(max) < 0) {\n\t\t\t\tmax = word;\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/interview/tree/BinaryTree.java\npackage com.interview.tree;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class BinaryTree {\n    public static void main(String[] args) {\n        BinaryTree tree = new BinaryTree();\n        tree.root = new Node(1);\n        tree.root.left = new Node(2);\n        tree.root.right = new Node(3);\n        tree.root.left.left = new Node(4);\n        tree.root.left.right = new Node(5);\n\n        System.out.println(\"Preorder traversal of binary tree is \");\n        tree.printPreorder(tree.root);\n\n        System.out.println(\"\\nInorder traversal of binary tree is \");\n        tree.printInorder(tree.root);\n\n        System.out.println(\"\\nPostorder traversal of binary tree is \");\n        tree.printPostorder(tree.root);\n\n        System.out.println(\"\\nLevel order traversal of binary tree is \");\n        tree.printLevelOrder(tree.root);\n    }\n\n    Node root;\n\n    void printPreorder(Node node) {\n        if (node == null) {\n            return;\n        }\n\n        System.out.print(node.data + \" \");\n        printPreorder(node.left);\n        printPreorder(node.right);\n    }\n\n    void printInorder(Node node) {\n        if (node == null) {\n            return;\n        }\n\n        printInorder(node.left);\n        System.out.print(node.data + \" \");\n        printInorder(node.right);\n    }\n\n    void printPostorder(Node node) {\n        if (node"}
{"ID": 156, "source": "Multi_HumanEval_java:HumanEval_java/159", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tint total = number + remaining;\n\t\tif(total >= need) {\n\t\t\tresult.add(need);\n\t\t\tresult.add(total - need);\n\t\t} else {\n\t\t\tresult.add(total);\n\t\t\tresult.add(0);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheDivisors.java\npackage com.codewars.java.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                result.add(i);\n            }\n        }\n        if(result.size() == 0) {\n            return null;\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheNextPerfectSquare.java\npackage com.codewars.java.kyu7;\n\npublic class FindTheNextPerfectSquare {\n    public static long findNextSquare(long sq) {\n        double sqrt = Math.sqrt(sq);\n        if(sqrt % 1 == 0) {\n            return (long)Math.pow(sqrt + 1, 2);\n        }\n        return -1;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheStrayNumber.java\npackage com.codewars.java.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    public static int stray(int[] numbers) {\n        Arrays.sort(numbers);\n        if(numbers[0]!= numbers[1]) {\n            return numbers[0];\n        }\n        return numbers[numbers.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kyu7/FindTheSmallest.java\npackage com.codewars.java."}
{"ID": 157, "source": "Multi_HumanEval_java:HumanEval_java/160", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t\tString expression = operand.get(0).toString();\n\t\tfor (int i = 1; i < operand.size(); i++) {\n\t\t\texpression += \" \" + operator.get(i - 1) + \" \" + operand.get(i);\n\t\t}\n\t\treturn (int) eval(expression);\n    }\n\n\tpublic static double eval(String str) {\n\t\treturn new Object() {\n\t\t\tint pos = -1, ch;\n\n\t\t\tvoid nextChar() {\n\t\t\t\tch = (++pos < str.length())? str.charAt(pos) : -1;\n\t\t\t}\n\n\t\t\tboolean eat(int charToEat) {\n\t\t\t\twhile (ch =='') nextChar();\n\t\t\t\tif (ch == charToEat) {\n\t\t\t\t\tnextChar();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tdouble parse() {\n\t\t\t\tnextChar();\n\t\t\t\tdouble x = parseExpression();\n\t\t\t\tif (pos < str.length()) throw new RuntimeException(\"Unexpected: \" + (char)ch);\n\t\t\t\treturn x;\n\t\t\t}\n\n\t\t\t// Grammar:\n\t\t\t// expression = term | expression `+` term | expression `-` term\n\t\t\t// term = factor | term `*` factor | term `/` factor\n\t\t\t// factor = `+` factor | `-` factor | `(` expression `)`\n\t\t\t//        | number | function `(` expression `)`\n\t\t\t// number = float\n\n\t\t\tdouble parseExpression() {\n\t\t\t\tdouble x = parseTerm();\n\t\t\t\tfor (;;) {\n\t\t\t\t\tif      (eat('+')) x += parseTerm(); // addition\n\t\t\t\t\telse if (eat('-')) x -= parseTerm(); // subtraction\n\t\t\t\t\telse return x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdouble parseTerm() {\n\t\t\t\tdouble x = parseFactor();\n\t\t\t\tfor (;;) {\n\t\t\t\t\tif      (eat('*')) x *= parseFactor(); // multiplication\n\t\t\t\t\telse if (eat('/')) x /= parseFactor(); // division\n\t\t\t\t\telse return x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdouble parseFactor() {\n\t\t\t\tif (eat('+')) return parseFactor(); // unary plus\n\t\t\t\tif (eat('-')) return -parseFactor(); // unary minus\n\n\t\t\t\tdouble x;\n\t\t\t\tint startPos = pos;\n\t\t\t\tif (eat('(')) { // parentheses\n\t\t\t\t\tx = parseExpression();\n\t\t\t\t\teat(')');"}
{"ID": 158, "source": "Multi_HumanEval_java:HumanEval_java/161", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t\tchar[] chars = s.toCharArray();\n\t\tboolean hasLetter = false;\n\t\tfor (char c : chars) {\n\t\t\tif (Character.isLetter(c)) {\n\t\t\t\thasLetter = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (hasLetter) {\n\t\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\t\tif (Character.isLetter(chars[i])) {\n\t\t\t\t\tchars[i] = Character.isUpperCase(chars[i])? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < chars.length / 2; i++) {\n\t\t\t\tchar temp = chars[i];\n\t\t\t\tchars[i] = chars[chars.length - 1 - i];\n\t\t\t\tchars[chars.length - 1 - i] = temp;\n\t\t\t}\n\t\t}\n\t\treturn new String(chars);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        String result = Solve.solve(s);\n        System.out.println(result);\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    public static List<Integer> divisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n                if (i!= n / i) {\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheVowels.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class"}
{"ID": 159, "source": "Multi_HumanEval_java:HumanEval_java/162", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t\tif (text.length() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tbyte[] messageDigest = md.digest(text.getBytes());\n\t\t\tBigInteger number = new BigInteger(1, messageDigest);\n\t\t\tString hashtext = number.toString(16);\n\t\t\twhile (hashtext.length() < 32) {\n\t\t\t\thashtext = \"0\" + hashtext;\n\t\t\t}\n\t\t\treturn hashtext;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n    }\n}\n<file_sep>/Python/is_palindrome.py\ndef is_palindrome(text):\n    \"\"\"\n    * Given a string 'text', return True if it is a palindrome, False otherwise.\n    * A palindrome is a string that reads the same forward and backward.\n    * This function should be case-insensitive, and should disregard all non-alphanumeric characters.\n\n    >>> is_palindrome(\"race car\")\n    True\n    >>> is_palindrome(\"A man, a plan, a canal: Panama\")\n    True\n    >>> is_palindrome(\"never odd or even\")\n    True\n    >>> is_palindrome(\"Hello, world!\")\n    False\n    \"\"\"\n    text = text.lower()\n    text = ''.join(ch for ch in text if ch.isalnum())\n    return text == text[::-1]\n<file_sep>/Python/is_power_of_two.py\ndef is_power_of_two(n):\n    \"\"\"\n    * Given an integer 'n', return True if it is a power of two, False otherwise.\n    * A power of two is a number that is equal to 2^x for some integer x.\n\n    >>> is_power_of_two(1)\n    True\n    >>> is_power_of_two(16)\n    True\n    >>> is_power_of_two(32)\n    True\n    >>> is_power_of_two(10)\n    False\n    \"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n<file_sep>/Python/is_palindrome_number.py\ndef is_palindrome_number(n):\n    \"\"\"\n    * Given an integer 'n', return True if it is"}
{"ID": 160, "source": "Multi_HumanEval_java:HumanEval_java/163", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tint start = Math.min(a, b);\n\t\tint end = Math.max(a, b);\n\t\tfor (int i = start; i <= end; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheDivisors.java\npackage com.codewars.kyu7;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindTheDivisors {\n    /**\n     * Create a function that takes an integer and returns an array of its\n     * divisors.\n     *\n     * @param n\n     * @return\n     */\n    public static List<Integer> divisors(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheStrayNumber.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheStrayNumber {\n    /**\n     * You are given an array (which will have a length of at least 3, but could\n     * be very large) containing integers. The array is either entirely\n     * comprised of odd integers or entirely comprised of even integers\n     * except for a single integer N. Write a method that takes the array as an\n     * argument and returns this \"stray\" number.\n     *\n     * @param numbers\n     * @return\n     */\n    public static int stray(int[] numbers) {\n        int oddCount = 0;\n        int evenCount = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            if (numbers[i] % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        if (oddCount > evenCount) {\n            for (int i = 0; i"}
