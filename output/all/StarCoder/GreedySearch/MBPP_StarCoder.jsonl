{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t\n    # Create an array to store the result \n    # of subproblems \n    dp = [0 for i in range(n)] \n  \n    # Initialize the result for 0 pairs \n    dp[0] = 1\n  \n    # Fill the dp[] array in bottom up manner \n    for i in range(1, n): \n        for j in range(0, i): \n            if arr[j][1] < arr[i][0] and dp[j] + 1 > dp[i]: \n                dp[i] = dp[j] + 1\n  \n    # The maximum value in dp[] array is the result \n    return max(dp) \n  \n# Driver code \narr = [[1, 2], [2, 3], [3, 4], [4, 5]] \nn = len(arr) \nprint(max_chain_length(arr, n)) \n<|endoftext|>"}
{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t<|endoftext|>"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t<|endoftext|>"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t<|endoftext|>"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t<|endoftext|>"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t<|endoftext|>"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t<|endoftext|>"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn bell_Number(n-1) + bell_Number(n-2) \n\nprint(bell_Number(5))\n<|endoftext|>"}
{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t<|endoftext|>"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t<|endoftext|>"}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t<|endoftext|>"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t<|endoftext|>"}
{"ID": 13, "source": "MBPP:614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t<|endoftext|>"}
{"ID": 14, "source": "MBPP:615", "prompt": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t<|endoftext|>"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\n    # If d is 0, then we have reached the destination \n    if d == 0: \n        return 0\n  \n    # If d is negative, then we cannot reach the destination \n    if d < 0: \n        return float('inf')\n  \n    # If we can reach the destination from (a, b) in 1 step, then return 1 \n    if (a == 0 and b == 0) or (a!= 0 and b!= 0): \n        return 1\n  \n    # If we can reach the destination from (a, b) in 2 steps, then return 2 \n    if (a!= 0 and b == 0) or (a == 0 and b!= 0): \n        return 2\n  \n    # If we can reach the destination from (a, b) in 3 steps, then return 3 \n    if (a > 0 and b > 0): \n        return 3\n  \n    # If we can reach the destination from (a, b) in 4 steps, then return 4 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 4\n  \n    # If we can reach the destination from (a, b) in 5 steps, then return 5 \n    if (a < 0 and b < 0): \n        return 5\n  \n    # If we can reach the destination from (a, b) in 6 steps, then return 6 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 6\n  \n    # If we can reach the destination from (a, b) in 7 steps, then return 7 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 7\n  \n    # If we can reach the destination from (a, b) in 8 steps, then return 8 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 8\n  \n    # If we can reach the destination from (a, b) in 9 steps, then return 9 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 9\n  \n    # If we can reach the destination from (a, b) in 1"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t<|endoftext|>"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t<|endoftext|>"}
{"ID": 19, "source": "MBPP:620", "prompt": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t<|endoftext|>"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t<|endoftext|>"}
{"ID": 21, "source": "MBPP:622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t", "predict": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t<|endoftext|>"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t<|endoftext|>"}
{"ID": 23, "source": "MBPP:624", "prompt": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t<|endoftext|>"}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\t"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t\treturn (r**2)*math.pi/2\n\ndef inscribed_triangle(r) :\n\t\treturn (r**2)*math.pi/4\n\ndef largest_triangle(r) :\n\t\treturn max(triangle_area(r),inscribed_triangle(r))\n\nprint(largest_triangle(10))\n<|endoftext|>"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t\tif start > end: \n\t\t\treturn -1\n\t\tmid = (start + end) // 2\n\t\tif array[mid] == mid: \n\t\t\treturn find_First_Missing(array, mid + 1, end)\n\t\tif array[mid] > mid: \n\t\t\treturn find_First_Missing(array, start, mid - 1)\n\t\treturn array[mid]\n\ndef find_First_Missing_2(array): \n\tn = len(array) \n\tfor i in range(n): \n\t\tif (i + 1!= array[i]): \n\t\t\treturn i + 1\n\treturn n + 1\n\nif __name__ == '__main__':\n\tarray = [1,2,3,4,6,7,8,9,11,12,13,14,15,16,17,18,19,20]\n\tprint(find_First_Missing(array,0,len(array)-1))\n\tprint(find_First_Missing_2(array))<|endoftext|>"}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t<|endoftext|>"}
{"ID": 28, "source": "MBPP:629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\teven = [] \n\t\todd = [] \n\t\tfor i in list: \n\t\t\tif (i % 2 == 0): \n\t\t\t\teven.append(i) \n\t\t\telse: \n\t\t\t\todd.append(i) \n\t\treturn even, odd\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\neven, odd = Split(list)\nprint(even)\nprint(odd)\n<|endoftext|>"}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t<|endoftext|>"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t<|endoftext|>"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t<|endoftext|>"}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t\tsum = 0\n\t\tfor i in range(n) : \n\t\t\tfor j in range(i+1,n) : \n\t\t\t\tsum = sum + arr[i] ^ arr[j]\n\t\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nprint(pair_OR_Sum(arr,n))\n<|endoftext|>"}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\treturn sum([i**4 for i in range(2,n+1,2)])\n\nprint(even_Power_Sum(10))\n<|endoftext|>"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t<|endoftext|>"}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (a == 0): \n\t\t\tprint(\"The equation is not quadratic\") \n\t\t\treturn \n\t\td = (b * b) - (4 * a * c) \n\t\tif (d < 0): \n\t\t\tprint(\"The roots are not reciprocal\") \n\t\t\treturn \n\t\telse: \n\t\t\tx1 = (-b + math.sqrt(d)) / (2 * a) \n\t\t\tx2 = (-b - math.sqrt(d)) / (2 * a) \n\t\t\tprint(\"The roots are reciprocal\") \n\t\t\tprint(\"x1 = \", x1) \n\t\t\tprint(\"x2 = \", x2) \n\na = float(input(\"Enter the value of a: \")) \nb = float(input(\"Enter the value of b: \")) \nc = float(input(\"Enter the value of c: \")) \nCheck_Solution(a, b, c) \n<|endoftext|>"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and no loss\n\"\"\"\ndef profit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\n\"\"\"\ndef profit_loss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual"}
{"ID": 37, "source": "MBPP:638", "prompt": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t", "predict": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t<|endoftext|>"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t<|endoftext|>"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t<|endoftext|>"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\treturn n % 2 == 1\n\ndef nth_nonagonal(n): \n\t\treturn n * (n + 1) // 2\n\ndef main(): \n\t\tn = int(input(\"Enter the nth nonagonal number: \")) \n\t\tprint(nth_nonagonal(n)) \n\nif __name__ == \"__main__\": \n\t\tmain() \n<|endoftext|>"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t<|endoftext|>"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t<|endoftext|>"}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t\t# code here \n\t\treturn input[::-1][:k]\n\nif __name__ == '__main__':\n\tinput = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tk = 5\n\tprint(reverse_Array_Upto_K(input, k))<|endoftext|>"}
{"ID": 44, "source": "MBPP:645", "prompt": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t<|endoftext|>"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t<|endoftext|>"}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t<|endoftext|>"}
{"ID": 47, "source": "MBPP:648", "prompt": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t", "predict": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t<|endoftext|>"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t\treturn sum(nums[m:n+1])\n\nprint(sum_Range_list([1,2,3,4,5,6,7,8,9,10], 2, 5))\n<|endoftext|>"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t<|endoftext|>"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t<|endoftext|>"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t<|endoftext|>"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t<|endoftext|>"}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t\treturn (n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1))//24\n\nn = int(input(\"Enter the number : \"))\nprint(\"Sum of fifth power of n natural numbers is : \",fifth_Power_Sum(n))\n<|endoftext|>"}
{"ID": 55, "source": "MBPP:656", "prompt": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t\n    # Initialize result \n    min_sum = 0\n    for i in range(n): \n        min_sum += abs(a[i] - b[i]) \n  \n    return min_sum \n  \n# Driver Code \na = [1, 2, 3, 4, 5] \nb = [1, 2, 3, 4, 5] \nn = len(a) \nprint(find_Min_Sum(a, b, n)) \n<|endoftext|>"}
{"ID": 56, "source": "MBPP:657", "prompt": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t\treturn int(str(math.factorial(n))[0])\n\n\"\"\"\nWrite a python function to find the number of zeros at the end of a factorial of a given number.\n\"\"\"\ndef no_of_zeros(n) : \n\t\treturn len(str(math.factorial(n))) - len(str(math.factorial(n)).rstrip('0'))\n\n\"\"\"\nWrite a python function to find the number of divisors of a given integer is even or odd.\n\"\"\"\ndef no_of_divisors(n) : \n\t\tif n%2 == 0 : \n\t\t\treturn len(list(filter(lambda x : n%x == 0, range(1, n))))\n\t\telse : \n\t\t\treturn len(list(filter(lambda x : n%x == 0, range(1, n+1))))\n\n\"\"\"\nWrite a python function to find the digits which are absent in a given mobile number.\n\"\"\"\ndef absent_digits(n) : \n\t\treturn list(set(range(1,10)) - set(map(int, str(n))))\n\n\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_of_three_lowest_positive_numbers(n) : \n\t\treturn sum(sorted(n)[:3])\n\n\"\"\"\nWrite a python function to find the sum of the squares of the first N natural numbers.\n\"\"\"\ndef sum_of_squares(n) : \n\t\treturn sum([i**2 for i in range(1, n+1)])\n\n\"\"\"\nWrite a python function to find the difference between the sum of the squares and the square of the sums of the first N natural numbers.\n\"\"\"\ndef difference_of_squares(n) : \n\t\treturn sum_of_squares(n) - sum([i for i in range(1, n+1)])**2\n\n\"\"\"\nWrite a python function to find the difference between the sum of the squares and the sum of the squares of the first N natural numbers.\n\"\"\"\ndef difference_of_squares(n) : \n\t\treturn sum_of_squares(n) - sum([i**2 for i in range(1, n+1)])\n\n\"\"\"\nWrite a python function to find the"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t<|endoftext|>"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t\tfor i in range(len(x)): \n\t\t\tfor j in range(i+1, len(x)): \n\t\t\t\tif x[i] == x[j]: \n\t\t\t\t\tprint(x[i], end = \" \") \n\t\tprint() \n\n# Driver Code \nif __name__ == '__main__': \n\tn = int(input())\n\tarr = list(map(int, input().split())) \n\tRepeat(arr) \n<|endoftext|>"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t\n    # Your code here\n    # return a list of points\n    # l1,r1,l2,r2 are the lower and upper limits of the two ranges\n    # return a list of points\n    # points should be in the form of a list of tuples\n    # [(x1,y1),(x2,y2),...]\n    # x1,y1,x2,y2 are the coordinates of the points\n    # return an empty list if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no"}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t\n    # Initialize maximum sum,  \n    # with first element of the array \n    max_sum = arr[0] \n  \n    # Initialize first and second  \n    # elements of the array \n    first = arr[0] \n    second = arr[1] \n  \n    # Traverse through the array \n    for i in range(2, n): \n  \n        # If current element is greater \n        # than first and second then update \n        # first and second \n        if arr[i] > first and arr[i] > second: \n            second = first \n            first = arr[i] \n  \n        # If current element is greater than \n        # second then update second \n        elif arr[i] > second: \n            second = arr[i] \n  \n        # Update maximum sum if current element \n        # is greater than maximum sum \n        max_sum = max(max_sum, first + second + arr[i]) \n  \n    return max_sum \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(max_sum_of_three_consecutive(arr, n)) \n<|endoftext|>"}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t<|endoftext|>"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t\n    # Initialize result \n    res = 0\n    while (res < n): \n        if (res % x == y): \n            return res \n        res += 1\n    return -1\n\nprint(find_max_val(10, 2, 0))\nprint(find_max_val(10, 2, 1))\nprint(find_max_val(10, 2, 2))\nprint(find_max_val(10, 2, 3))\nprint(find_max_val(10, 2, 4))\nprint(find_max_val(10, 2, 5))\nprint(find_max_val(10, 2, 6))\nprint(find_max_val(10, 2, 7))\nprint(find_max_val(10, 2, 8))\nprint(find_max_val(10, 2, 9))\nprint(find_max_val(10, 2, 10))\nprint(find_max_val(10, 2, 11))\nprint(find_max_val(10, 2, 12))\nprint(find_max_val(10, 2, 13))\nprint(find_max_val(10, 2, 14))\nprint(find_max_val(10, 2, 15))\nprint(find_max_val(10, 2, 16))\nprint(find_max_val(10, 2, 17))\nprint(find_max_val(10, 2, 18))\nprint(find_max_val(10, 2, 19))\nprint(find_max_val(10, 2, 20))\nprint(find_max_val(10, 2, 21))\nprint(find_max_val(10, 2, 22))\nprint(find_max_val(10, 2, 23))\nprint(find_max_val(10, 2, 24))\nprint(find_max_val("}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\tsum = 0\n\t\tfor i in range(0,n,2) : \n\t\t\tsum = sum + i\n\t\treturn sum/n\n\nprint(average_Even(10))\nprint(average_Even(100))\nprint(average_Even(1000))\nprint(average_Even(10000))\nprint(average_Even(100000))\nprint(average_Even(1000000))\nprint(average_Even(10000000))\nprint(average_Even(100000000))\nprint(average_Even(1000000000))\nprint(average_Even(10000000000))\nprint(average_Even(100000000000))\nprint(average_Even(1000000000000))\nprint(average_Even(10000000000000))\nprint(average_Even(100000000000000))\nprint(average_Even(1000000000000000))\nprint(average_Even(10000000000000000))\nprint(average_Even(100000000000000000))\nprint(average_Even(1000000000000000000))\nprint(average_Even(10000000000000000000))\nprint(average_Even(100000000000000000000))\nprint(average_Even(1000000000000000000000))\nprint(average_Even(10000000000000000000000))\nprint(average_Even(100000000000000000000"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t<|endoftext|>"}
{"ID": 65, "source": "MBPP:666", "prompt": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t<|endoftext|>"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t\tcount = 0\n\t\tfor i in string: \n\t\t\tif i in vowels: \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\n"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to remove all occurences of a character from a string.\n\"\"\"\ndef remove(string, char): \n\t\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to split a string at a specified character.\n\"\"\"\ndef split(string, char): \n\t\treturn string.split(char)\n\n\"\"\"\nWrite a python function to remove leading and trailing characters from a string.\n\"\"\"\ndef strip(string, char): \n\t\treturn string.strip(char)\n\n\"\"\"\nWrite a python function to remove leading characters from a string.\n\"\"\"\ndef lstrip(string, char): \n\t\treturn string.lstrip(char)\n\n\"\"\"\nWrite a python function to remove trailing characters from a string.\n\"\"\"\ndef rstrip(string, char): \n\t\treturn string.rstrip(char)\n\n\"\"\"\nWrite a python function to find the length of a string.\n\"\"\"\ndef length(string): \n\t\treturn len(string)\n\n\"\"\"\nWrite a python function to find the maximum occurring character in a string.\n\"\"\"\ndef max(string): \n\t\treturn max(string)\n\n\"\"\"\nWrite a python function to find the minimum occurring character in a string.\n\"\"\"\ndef min(string): \n\t\treturn min(string)\n\n\"\"\"\nWrite a python function to find the first index of a character in a string.\n\"\"\"\ndef find(string, char): \n\t\treturn string.find(char)\n\n\"\"\"\nWrite a python function to find the last index of a character in a string.\n\"\"\"\ndef rfind(string, char): \n\t\treturn string.rfind(char)\n\n\"\"\"\nWrite a python function to count the number of occurences of a character in a string.\n\"\"\"\ndef count(string, char): \n\t\treturn string.count(char)\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(string): \n\t\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef to_list(string): \n\t\treturn list(string)\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef to"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t\n    # Regex to check valid IP \n    regex = '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n  \n    # Compile the ReGex \n    p = re.compile(regex) \n  \n    # If the string is empty \n    # return false \n    if (Ip == \"\"): \n        return False\n  \n    # Return if the string \n    # matched the ReGex \n    if (re.search(p, Ip)): \n        return True\n  \n    else: \n        return False\n\n# Driver Code \nif __name__ == '__main__': \n    Ip = \"192.168.1.1\"\n    if(check_IP(Ip)): \n        print(\"Valid IP\") \n    else: \n        print(\"Invalid IP\") \n<|endoftext|>"}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t<|endoftext|>"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer.\n\"\"\"\ndef set_All_Bits(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Set_Bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Unset_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (n - (1 << k))\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (n + (1 << k))\n\n\"\"\"\nWrite a python function to set the kth right most set bit.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit.\n\"\"\"\ndef set_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most set bit to 0.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit_to_0(n, k): \n\t\treturn n & ~(1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit to 0.\n\"\"\""}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t\tif num1 > num2 and num1 > num3: \n\t\t\treturn num1 \n\t\telif num2 > num1 and num2 > num3: \n\t\t\treturn num2 \n\t\telse: \n\t\t\treturn num3 \n\nprint(max_of_three(1,2,3))\nprint(max_of_three(10,20,30))\nprint(max_of_three(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_three_without_conditional(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional(1,2,3))\nprint(max_of_three_without_conditional(10,20,30))\nprint(max_of_three_without_conditional(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t\treturn int(\"\".join(str(x) for x in list))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t<|endoftext|>"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t<|endoftext|>"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t<|endoftext|>"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t<|endoftext|>"}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t<|endoftext|>"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t<|endoftext|>"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t<|endoftext|>"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t\tfor i in range(2, n): \n\t\t\tif (n % i) == 0: \n\t\t\t\treturn i \n\t\treturn n \n\n\"\"\"\nWrite a python function to find the largest prime divisor of a number.\n\"\"\"\ndef largest_Divisor(n): \n\t\tfor i in range(n, 1, -1): \n\t\t\tif (n % i) == 0: \n\t\t\t\treturn i \n\t\treturn 1\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t<|endoftext|>"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t\tfor i in range(1,int(n**0.5)+1) : \n\t\t\tif i*i == n : \n\t\t\t\treturn True\n\t\t\tif i*i > n : \n\t\t\t\tbreak\n\t\t\tif n%i == 0 : \n\t\t\t\tif (i+n//i)**2 == n : \n\t\t\t\t\treturn True\n\t\treturn False\n\nn = int(input(\"Enter the number : \"))\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n<|endoftext|>"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t\tcount = 0\n\t\tfor i in str: \n\t\t\tif (i == x): \n\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tstr = input(\"Enter the string: \")\n\tx = input(\"Enter the character: \")\n\tprint(\"The count of the character\",x,\"in the string\",str,\"is\",count_Char(str,x))\n<|endoftext|>"}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tif isPrime(i): \n\t\t\t\tsum += i \n\t\treturn sum\n\ndef isPrime(n): \n\tif n <= 1: \n\t\treturn False\n\tfor i in range(2, n): \n\t\tif (n % i) == 0: \n\t\t\treturn False\n\treturn True\n\nprint(sum_Of_Primes(10))\n<|endoftext|>"}
{"ID": 85, "source": "MBPP:686", "prompt": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t<|endoftext|>"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t<|endoftext|>"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t<|endoftext|>"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t<|endoftext|>"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t<|endoftext|>"}
{"ID": 90, "source": "MBPP:691", "prompt": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t", "predict": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t<|endoftext|>"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t\t# Your code goes here \n\t\t# Return the last two digits of N! \n\t\treturn (str(factorial(N))[-2:])\n\n# Driver code \nN = 10\nprint(last_Two_Digits(N)) \n<|endoftext|>"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t<|endoftext|>"}
{"ID": 93, "source": "MBPP:694", "prompt": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t<|endoftext|>"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1"}
{"ID": 96, "source": "MBPP:697", "prompt": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t<|endoftext|>"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t<|endoftext|>"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\t# code here \n\t\tcount = 0\n\t\tfor i in range(len(str1)) : \n\t\t\tif str1[i]!= str2[i] : \n\t\t\t\tcount += 1\n\t\treturn count\n\n# Driver code \nif __name__ == '__main__': \n\tstr1 = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t<|endoftext|>"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t<|endoftext|>"}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t<|endoftext|>"}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t<|endoftext|>"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t<|endoftext|>"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t<|endoftext|>"}
{"ID": 105, "source": "MBPP:706", "prompt": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t", "predict": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t\n    # If m is 0, then arr2[] is always a \n\t# subset of arr1[] \n    if m == 0: \n        return True\n\t\t\n    # If n is 0, then arr1[] is never a \n\t# subset of arr2[] \n    if n == 0: \n        return False\n\t\t\n    # If last characters of two strings are same, \n\t# then recur for remaining string \n    if arr1[m-1] == arr2[n-1]: \n        return is_subset(arr1, m-1, arr2, n-1) \n\t\t\n    # If last characters are not same, then check \n\t# if last character of arr1[] is present at \n\t# any index in arr2[] and if yes, then recur \n\t# for remaining string \n    return is_subset(arr1, m, arr2, n-1) or is_subset(arr1, m-1, arr2, n) \n\n# Driver Code \narr1 = [1, 1, 3, 3] \narr2 = [1, 1, 3] \nm = len(arr1) \nn = len(arr2) \nif is_subset(arr1, m, arr2, n) == True: \n\tprint(\"arr2[] is a subset of arr1[]\") \nelse: \n\tprint(\"arr2[] is not a subset of arr1[]\") \n<|endoftext|>"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t\tcount = 0\n\t\twhile (n):  \n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count\n\nif __name__ == \"__main__\":\n\tn = 10\n\tprint(count_Set_Bits(n))<|endoftext|>"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn list(string)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t<|endoftext|>"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t<|endoftext|>"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t\t# code here \n\t\todd = 1\n\t\teven = 1\n\t\twhile n > 0: \n\t\t\tr = n % 10\n\t\t\tif r % 2 == 0: \n\t\t\t\teven = even * r \n\t\t\telse: \n\t\t\t\todd = odd * r \n\t\t\tn = n // 10\n\t\tif even == odd: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n# Main\nn = int(input())\nif product_Equal(n): \n\tprint(\"true\") \nelse: \n\tprint(\"false\") \n<|endoftext|>"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t<|endoftext|>"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t<|endoftext|>"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t\tcount = 0\n\t\tfor i in range(2,n+1):\n\t\t\tif(isPrime(i)):\n\t\t\t\tcount += n/i\n\t\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn ="}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t<|endoftext|>"}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t<|endoftext|>"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t\t\"\"\"\n\t\tCalculate the standard deviation of a list of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean\n\t\tmean = mean_calc(data)\n\t\t# Calculate the sum of the squared differences from the mean\n\t\tsum_squared_differences = 0\n\t\tfor number in data:\n\t\t\tsum_squared_differences += (number - mean)**2\n\t\t# Calculate the standard deviation\n\t\tsd = (sum_squared_differences / len(data))**0.5\n\t\treturn sd\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef variance_calc(data):\n\t\t\"\"\"\n\t\tCalculate the variance of a list of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean\n\t\tmean = mean_calc(data)\n\t\t# Calculate the sum of the squared differences from the mean\n\t\tsum_squared_differences = 0\n\t\tfor number in data:\n\t\t\tsum_squared_differences += (number - mean)**2\n\t\t# Calculate the variance\n\t\tvariance = sum_squared_differences / len(data)\n\t\treturn variance\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef covariance_calc(data1, data2):\n\t\t\"\"\"\n\t\tCalculate the covariance of two lists of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean of each list\n\t\tmean1 = mean_calc(data1)\n\t\tmean2 = mean_calc(data2)\n\t\t# Calculate the sum of the products of the differences from the mean\n\t\tsum_product_differences = 0\n\t\tfor i in range(len(data1)):\n\t\t\tsum_product_differences += (data1[i] - mean1) * (data2[i] - mean2)\n\t\t# Calculate the covariance\n\t\tcovariance = sum_product_differences / len(data1)\n\t\treturn covariance\n\n\"\"\"\nWrite a function to calculate the correlation coefficient.\n\"\"\"\ndef correlation_calc(data1, data2):\n\t\t\"\"\"\n\t\tCalculate the correlation coefficient of two lists of numbers.\n\t\t\"\"\"\n\t\t# Calculate the standard deviation of each list\n\t\tsd1 = sd_calc(data1)\n\t\tsd2 = sd_calc(data2)\n\t\t# Calculate the covariance\n\t\tcovariance = covariance_calc(data1, data2)\n\t\t# Calculate the"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t<|endoftext|>"}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t<|endoftext|>"}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t<|endoftext|>"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t\n    # Initialize the table to store the results of subproblems \n    dp = [[0 for x in range(N)] for x in range(N)] \n  \n    # Fill the cost table in bottom up manner \n    for i in range(N): \n        for j in range(N): \n            if i == 0 or j == 0: \n                dp[i][j] = cost[i][j] \n            else: \n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n  \n    # Initialize maximum value and \n    # index of the cell which \n    # gives the maximum value \n    max_val = -1\n    max_i = -1\n    max_j = -1\n  \n    # Find the maximum value in last row \n    for j in range(N): \n        if dp[N - 1][j] > max_val: \n            max_val = dp[N - 1][j] \n            max_i = N - 1\n            max_j = j\n  \n    # Find the maximum value in last column \n    for i in range(N): \n        if dp[i][N - 1] > max_val: \n            max_val = dp[i][N - 1] \n            max_i = i \n            max_j = N - 1\n  \n    # Find the maximum value in last \n    # diagonal \n    for i in range(N): \n        for j in range(N): \n            if i == j: \n                if dp[i][j] > max_val: \n                    max_val = dp[i][j] \n                    max_i = i \n                    max_j = j\n  \n    # Find the maximum value in second last \n    # diagonal \n    for i in range(N): \n        for j in range(N): \n            if i + j == N - 1: \n                if dp[i][j] > max_val: \n                    max_val = dp[i][j] \n                    max_i = i \n                    max_j = j\n  \n    # Return the maximum value and \n    # index of the cell which gives \n    # the maximum value \n    return max_val, max_i, max_j \n  \n# Driver code \nif __name__ == '__main__': \n    cost = [[1, 2, 9], \n            [5, 3, 8], \n            [4, 6, 7]] \n    N = len(cost) \n   "}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t<|endoftext|>"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t<|endoftext|>"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t<|endoftext|>"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t<|endoftext|>"}
{"ID": 125, "source": "MBPP:726", "prompt": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t<|endoftext|>"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t<|endoftext|>"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t<|endoftext|>"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t<|endoftext|>"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t<|endoftext|>"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t<|endoftext|>"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t<|endoftext|>"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t<|endoftext|>"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t<|endoftext|>"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to find the maximum of two numbers without if-else.\n\"\"\"\ndef max_of_two(a, b):\n\t\treturn a if a > b else b\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without if-else.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\treturn max(a, max(b, c))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers without if-else.\n\"\"\"\ndef max_of_four(a, b, c, d):\n\t\treturn max(a, max(b, max(c, d)))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers without if-else.\n\"\"\"\ndef max_of_five(a, b, c, d, e):\n\t\treturn max(a, max(b, max(c, max(d, e))))\n\n\"\"\"\nWrite a python function to find the maximum of six numbers without if-else.\n\"\"\"\ndef max_of_six(a, b, c, d, e, f):\n\t\treturn max(a, max(b, max(c, max(d, max(e, f)))))\n\n\"\"\"\nWrite a python function to find the maximum of seven numbers without if-else.\n\"\"\"\ndef max_of_seven(a, b, c, d, e, f, g):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, g))))))\n\n\"\"\"\nWrite a python function to find the maximum of eight numbers without if-else.\n\"\"\"\ndef max_of_eight(a, b, c, d, e, f, g, h):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, max(g, h)))))))\n\n\"\"\"\nWrite a python function to find the maximum of nine numbers without if-else.\n\"\"\"\ndef max_of_nine(a, b, c, d, e, f, g, h, i):\n\t\treturn max(a, max(b, max(c, max(d, max("}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t<|endoftext|>"}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t\treturn bool(re.search(r'^[aeiouAEIOU]', string))\n\nprint(check_str(\"hello\"))\nprint(check_str(\"how are you\"))\nprint(check_str(\"programming\"))\nprint(check_str(\"Python\"))\nprint(check_str(\"java\"))\nprint(check_str(\"C++\"))\nprint(check_str(\"C\"))\nprint(check_str(\"c\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c++\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\""}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t<|endoftext|>"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t\t# code here \n\t\treturn int(n*(n+1)/2)\n\n# Main\nn = int(input())\nprint(find_Index(n))\n<|endoftext|>"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t<|endoftext|>"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t<|endoftext|>"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t<|endoftext|>"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t<|endoftext|>"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t<|endoftext|>"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t<|endoftext|>"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t<|endoftext|>"}
{"ID": 146, "source": "MBPP:747", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t\n    # table[i][j] will be storing the length of LCS of X[0..i-1] \n    # and Y[0..j-1] \n    table = [[0 for x in range(o+1)] for x in range(m+1)] \n  \n    # Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    table[i][j] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]): \n                    table[i][j] = table[i-1][j-1] + 1\n                else: \n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1]) \n  \n    return table[m][n] \n  \n# Driver program to test above function \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AGGTAB\"\nm = len(X) \nn = len(Y) \no = len(Z) \nprint(lcs_of_three(X, Y, Z, m, n, o)) \n<|endoftext|>"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t<|endoftext|>"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t<|endoftext|>"}
{"ID": 149, "source": "MBPP:750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t<|endoftext|>"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t<|endoftext|>"}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn jacobsthal_num(n-1) + jacobsthal_num(n-2) \n\n\"\"\"\nWrite a function to find the nth fibonacci number.\n\"\"\"\ndef fibonacci_num(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_num(n-1) + fibonacci_num(n-2) \n\n\"\"\"\nWrite a function to find the nth tribonacci number.\n\"\"\"\ndef tribonacci_num(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num(n-1) + tribonacci_num(n-2) + tribonacci_num(n-3) \n\n\"\"\"\nWrite a function to find the nth lucas number.\n\"\"\"\ndef lucas_num(n): \n\tif n == 0: \n\t\treturn 2\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn lucas_num(n-1) + lucas_num(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the fibonacci sequence.\n\"\"\"\ndef fibonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_num_2(n-1) + fibonacci_num_2(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the tribonacci sequence.\n\"\"\"\ndef tribonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num_2(n-1) + tribonacci_num_2(n-2)"}
{"ID": 152, "source": "MBPP:753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t<|endoftext|>"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t<|endoftext|>"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t<|endoftext|>"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t<|endoftext|>"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t<|endoftext|>"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t<|endoftext|>"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t<|endoftext|>"}
{"ID": 159, "source": "MBPP:760", "prompt": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t<|endoftext|>"}
{"ID": 160, "source": "MBPP:761", "prompt": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t", "predict": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t<|endoftext|>"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum4):\n\t\tif monthnum4 == 1 or monthnum4 == 3 or monthnum4 == 5 or monthnum4 == 7 or monthnum4 == 8 or monthnum4 == 10 or monthnum4 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum5):\n\t\tif monthnum5 == 1 or monthnum5 == 3 or monthnum5 == 5 or monthnum5 == 7 or monthnum5 == 8 or monthnum5 == 10 or monthnum5 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum6):\n\t\tif monthnum6 == 1 or monthnum6 == 3 or monthnum6 == 5 or monthnum6 == 7 or monthnum6 == 8 or monthnum6 == 10 or monthnum6 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum7):\n\t\tif monthnum7 == 1 or monthnum7 == 3 or monthnum7 == 5 or monthnum7 == 7 or monthnum7 == 8 or monthnum7 == 10 or monthnum7 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t\t# code here \n\t\tarr.sort() \n\t\tmin_diff = arr[1] - arr[0] \n\t\tfor i in range(1, n-1): \n\t\t\tdiff = arr[i+1] - arr[i] \n\t\t\tif diff < min_diff: \n\t\t\t\tmin_diff = diff \n\t\treturn min_diff \n\n# Driver code \narr = [1, 10, 5, 2, 7] \nn = len(arr) \nprint(find_Min_Diff(arr, n)) \n<|endoftext|>"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t<|endoftext|>"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t\treturn n == sum(int(i) for i in str(n))\n\ndef nth_polite(n):\n\tfor i in range(1, n+1):\n\t\tif is_polite(i):\n\t\t\treturn i\n\nprint(nth_polite(10))\n<|endoftext|>"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t<|endoftext|>"}
{"ID": 166, "source": "MBPP:767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t<|endoftext|>"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for prime number.\n\"\"\"\ndef check_Prime(x): \n\t\tif x==2:\n\t\t\treturn True\n\t\telif x==3:\n\t\t\treturn True\n\t\telif x==5:\n\t\t\treturn True\n\t\telif x==7:\n\t\t\treturn True\n\t\telif x==11:\n\t\t\treturn True\n\t\telif x==13:\n\t\t\treturn True\n\t\telif x==17:\n\t\t\treturn True\n\t\telif x==19:\n\t\t\treturn True\n\t\telif x==23:\n\t\t\treturn True\n\t\telif x==29:\n\t\t\treturn True\n\t\telif x==31:\n\t\t\treturn True\n\t\telif x==37:\n\t\t\treturn True\n\t\telif x==41:\n\t\t\treturn True\n\t\telif x==43:\n\t\t\treturn True\n\t\telif x==47:\n\t\t\treturn True\n\t\telif x==53:\n\t\t\treturn True\n\t\telif x==59:\n\t\t\treturn True\n\t\telif x==61:\n\t\t\treturn True\n\t\telif x==67:\n\t\t\treturn True\n\t\telif x==71:\n\t\t\treturn True\n\t\telif x==73:\n\t\t\treturn True\n\t\telif x==79:\n\t\t\treturn True\n\t\telif x==83:\n\t\t\treturn True\n\t\telif x==89:\n\t\t\treturn True\n\t\telif x==97:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for perfect number.\n\"\"\"\ndef check_Perfect(x): \n\t\tif x==6:\n\t\t\treturn True\n\t\telif x==28:\n\t\t\treturn True\n\t\telif x==496:\n\t\t\treturn True\n\t\telif x==8128:\n\t\t\treturn True\n\t\telif x==33550336:\n\t\t\treturn True\n\t\telif x==8589869056:\n\t\t\treturn"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t<|endoftext|>"}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\treturn (n*(n+1)*(2*n+1)*(3*n+1))//12\n\nprint(odd_Num_Sum(10))\n<|endoftext|>"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t<|endoftext|>"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t<|endoftext|>"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t<|endoftext|>"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t\n    # Regex for email validation \n    regex = '^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$'\n  \n    # Compile the ReGex \n    p = re.compile(regex) \n  \n    # If the string is empty \n    # return false \n    if (email == ''): \n        return False\n  \n    # Return if the string \n    # matched the ReGex \n    if (re.search(p, email)): \n        return True\n  \n    else: \n        return False\n\n# Driver Code \nif __name__ == '__main__': \n    email = input(\"Enter email: \")\n    if check_email(email):\n        print(\"Valid Email\")\n    else:\n        print(\"Invalid Email\")\n<|endoftext|>"}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t<|endoftext|>"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t<|endoftext|>"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\t# Initialize result \n\t\tresult = 0\n\t\t# Traverse through all elements \n\t\tfor i in range(n): \n\t\t\t# If this element is not visited yet \n\t\t\tif (arr[i] == 1): \n\t\t\t\t# Add this element to result \n\t\t\t\tresult = result + i \n\t\t\t\t# Mark this element as visited \n\t\t\t\tarr[i] = 0\n\t\treturn result \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_Sum(arr, n)) \n<|endoftext|>"}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t<|endoftext|>"}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t<|endoftext|>"}
{"ID": 179, "source": "MBPP:780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t<|endoftext|>"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t\tcount = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tif n%i == 0 : \n\t\t\t\tcount += 1\n\t\tif count%2 == 0 : \n\t\t\treturn \"Even\"\n\t\telse : \n\t\t\treturn \"Odd\"\n\nn = int(input(\"Enter a number : \"))\nprint(count_Divisors(n))\n<|endoftext|>"}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t<|endoftext|>"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t<|endoftext|>"}
{"ID": 183, "source": "MBPP:784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t<|endoftext|>"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t<|endoftext|>"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t<|endoftext|>"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t<|endoftext|>"}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t<|endoftext|>"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t<|endoftext|>"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t<|endoftext|>"}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t<|endoftext|>"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t<|endoftext|>"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t<|endoftext|>"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t<|endoftext|>"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t<|endoftext|>"}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2!= 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_in_Range(1,10))\n<|endoftext|>"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t\treturn sum(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\treturn ((n<<d)|(n>>(32-d)))\n\n\"\"\"\nWrite a python function to right rotate the bits of a given number.\n\"\"\"\ndef right_Rotate(n,d):   \n\t\treturn ((n>>d)|(n<<(32-d)))\n\n\"\"\"\nWrite a python function to swap the even and odd bits of a given number.\n\"\"\"\ndef swap_Even_Odd_Bits(n):\n\t\treturn ((n&0xAAAAAAAA)|((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to swap the nibbles of a given number.\n\"\"\"\ndef swap_Nibbles(n):\n\t\treturn ((n&0x0F0F0F0F)|((n>>4)&0x00F0F0F0))\n\n\"\"\"\nWrite a python function to reverse the bits of a given number.\n\"\"\"\ndef reverse_Bits(n):\n\t\treturn ((n&0x55555555)|((n>>1)&0xAAAAAAAA)|((n&0xAAAAAAAA)>>1))\n\n\"\"\"\nWrite a python function to count the number of 1s in a given number.\n\"\"\"\ndef count_Ones(n):\n\t\treturn ((n&0x55555555)+((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to count the number of 0s in a given number.\n\"\"\"\ndef count_Zeros(n):\n\t\treturn ((n&0xAAAAAAAA)+((n>>1)&0xAAAAAAAA))\n\n\"\"\"\nWrite a python function to count the number of 1s in the binary representation of a given number.\n\"\"\"\ndef count_Ones_Binary(n):\n\t\treturn ((n&0x11111111)+((n>>1)&0x11111111)+((n>>2)&0x11111111)+((n>>3)&0x11111111))\n\n\"\"\"\nWrite a python function to count the number of 0s in the binary representation of a given number.\n\"\"\"\ndef count_Zeros_Binary(n):\n\t\treturn ((n&0x"}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t<|endoftext|>"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t<|endoftext|>"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t\t\"\"\"\n\t\t:type arr: List[int]\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif n==1:\n\t\t\treturn 0\n\t\tif n==2:\n\t\t\treturn 1\n\t\tif n==3:\n\t\t\treturn 2\n\t\tif n==4:\n\t\t\treturn 3\n\t\tif n==5:\n\t\t\treturn 4\n\t\tif n==6:\n\t\t\treturn 5\n\t\tif n==7:\n\t\t\treturn 6\n\t\tif n==8:\n\t\t\treturn 7\n\t\tif n==9:\n\t\t\treturn 8\n\t\tif n==10:\n\t\t\treturn 9\n\t\tif n==11:\n\t\t\treturn 10\n\t\tif n==12:\n\t\t\treturn 11\n\t\tif n==13:\n\t\t\treturn 12\n\t\tif n==14:\n\t\t\treturn 13\n\t\tif n==15:\n\t\t\treturn 14\n\t\tif n==16:\n\t\t\treturn 15\n\t\tif n==17:\n\t\t\treturn 16\n\t\tif n==18:\n\t\t\treturn 17\n\t\tif n==19:\n\t\t\treturn 18\n\t\tif n==20:\n\t\t\treturn 19\n\t\tif n==21:\n\t\t\treturn 20\n\t\tif n==22:\n\t\t\treturn 21\n\t\tif n==23:\n\t\t\treturn 22\n\t\tif n==24:\n\t\t\treturn 23\n\t\tif n==25:\n\t\t\treturn 24\n\t\tif n==26:\n\t\t\treturn 25\n\t\tif n==27:\n\t\t\treturn 26\n\t\tif n==28:\n\t\t\treturn 27\n\t\tif n==29:\n\t\t\treturn 28\n\t\tif n==30:\n\t\t\treturn 29\n\t\tif n==31:\n\t\t\treturn 30\n\t\tif n==32:\n\t\t\treturn 31\n\t\tif n==33:\n\t\t\treturn 32\n\t\tif n==34:\n\t\t\treturn 33\n\t\tif n==35:\n\t\t\treturn 34\n\t\tif n==36:\n\t\t\treturn 3"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t<|endoftext|>"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t\t# code here \n\t\tif n==1:\n\t\t\treturn True\n\t\tif n==2:\n\t\t\treturn arr[0]%2==0\n\t\tif n==3:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0\n\t\tif n==4:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0\n\t\tif n==5:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0\n\t\tif n==6:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0\n\t\tif n==7:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0\n\t\tif n==8:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0\n\t\tif n==9:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0 and arr[8]%2==0\n\t\tif n==10:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t<|endoftext|>"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t<|endoftext|>"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t<|endoftext|>"}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t<|endoftext|>"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t<|endoftext|>"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t<|endoftext|>"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t<|endoftext|>"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t<|endoftext|>"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t<|endoftext|>"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t<|endoftext|>"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t<|endoftext|>"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t<|endoftext|>"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t<|endoftext|>"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t<|endoftext|>"}
{"ID": 219, "source": "MBPP:820", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t<|endoftext|>"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t<|endoftext|>"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t<|endoftext|>"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(sample, string)\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only lowercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only uppercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[A-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets and digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9 ]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string"}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t<|endoftext|>"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t<|endoftext|>"}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t\tif a==b==c: \n\t\t\treturn \"Equilateral\"\n\t\telif a==b or b==c or a==c: \n\t\t\treturn \"Isosceles\"\n\t\telse: \n\t\t\treturn \"Scalene\"\n\nprint(check_Type_Of_Triangle(1,2,2))\nprint(check_Type_Of_Triangle(1,2,3))\nprint(check_Type_Of_Triangle(1,3,2))\nprint(check_Type_Of_Triangle(3,2,1))\nprint(check_Type_Of_Triangle(2,1,3))\nprint(check_Type_Of_Triangle(2,3,1))\nprint(check_Type_Of_Triangle(3,1,2))\n<|endoftext|>"}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t<|endoftext|>"}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t<|endoftext|>"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t\n    # Your code here\n    # return the second most repeated string\n    # if there is no second most repeated string, return -1\n    # if there is a tie, return the first one\n    # if there is no repeated string, return -1\n    # if there is only one repeated string, return -1\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only"}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t<|endoftext|>"}
{"ID": 230, "source": "MBPP:831", "prompt": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\t# code here \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i] == arr[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr)\n\tprint(count_Pairs(arr,n))<|endoftext|>"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\n    # Write your code here.\n    return int(re.findall(r'\\d+', input)[-1])\n\nprint(extract_max(\"My phone number is 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get the first key in a dictionary.\n\"\"\"\ndef get_first_key(dict): \n\t\treturn list(dict.keys())[0]\n\n\"\"\"\nWrite a function to get the last key in a dictionary.\n\"\"\"\ndef get_last_key(dict): \n\t\treturn list(dict.keys())[-1]\n\n\"\"\"\nWrite a function to get the first value in a dictionary.\n\"\"\"\ndef get_first_value(dict): \n\t\treturn list(dict.values())[0]\n\n\"\"\"\nWrite a function to get the last value in a dictionary.\n\"\"\"\ndef get_last_value(dict): \n\t\treturn list(dict.values())[-1]\n\n\"\"\"\nWrite a function to get the first key-value pair in a dictionary.\n\"\"\"\ndef get_first_key_value(dict): \n\t\treturn list(dict.items())[0]\n\n\"\"\"\nWrite a function to get the last key-value pair in a dictionary.\n\"\"\"\ndef get_last_key_value(dict): \n\t\treturn list(dict.items())[-1]\n\n\"\"\"\nWrite a function to get the length of a dictionary.\n\"\"\"\ndef get_length(dict): \n\t\treturn len(dict)\n\n\"\"\"\nWrite a function to get the sum of all values in a dictionary.\n\"\"\"\ndef get_sum(dict): \n\t\treturn sum(dict.values())\n\n\"\"\"\nWrite a function to get the average of all values in a dictionary.\n\"\"\"\ndef get_average(dict): \n\t\treturn sum(dict.values())/len(dict)\n\n\"\"\"\nWrite a function to get the maximum value in a dictionary.\n\"\"\"\ndef get_max(dict): \n\t\treturn max(dict.values())\n\n\"\"\"\nWrite a function to get the minimum value in a dictionary.\n\"\"\"\ndef get_min(dict): \n\t\treturn min(dict.values())\n\n\"\"\"\n"}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t<|endoftext|>"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to compute the distance between the points (x1, y1) and (x2, y2).\n\"\"\"\ndef distance(x1,y1,x2,y2): \n\t\treturn ((x2-x1)**2+(y2-y1)**2)**0.5\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a circle K((0, 0), 5).\n\"\"\"\ndef in_circle(x,y): \n\t\treturn (x**2+y**2)<=5**2\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a rectangle R(top=1, left=-1, width=6, height=2).\n\"\"\"\ndef in_rectangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a triangle T(a, b, c).\n\"\"\"\ndef in_triangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a trapezoid T(a, b, c, d).\n\"\"\"\ndef in_trapezoid(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a parallelogram P(a, b, c, d).\n\"\"\"\ndef in_parallelogram(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a regular polygon N(sides, length, x, y).\n\"\"\"\ndef in_polygon(x,y): \n\t\treturn (x>=1 and x<=5) and (y>="}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_2(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_3(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_4(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_5(a"}
{"ID": 236, "source": "MBPP:837", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\treturn sum([x**3 for x in range(1, n+1, 2)])\n\nprint(cube_Sum(10))\n<|endoftext|>"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t\t# code here\n\t\tcount = 0\n\t\tfor i in range(len(s1)) :\n\t\t\tif s1[i]!= s2[i] :\n\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\ts1 = input()\n\ts2 = input()\n\tprint(min_Swaps(s1,s2))<|endoftext|>"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn sorted(tup, key = lambda x: x[0]) \n\n\"\"\"\nWrite a function to sort the tuples by the second item of each tuple.\n\"\"\"\ndef sort_tuple_by_second_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort the tuples by the third item of each tuple.\n\"\"\"\ndef sort_tuple_by_third_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort the tuples by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fourth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort the tuples by the fifth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fifth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort the tuples by the sixth item of each tuple.\n\"\"\"\ndef sort_tuple_by_sixth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort the tuples by the seventh item of each tuple.\n\"\"\"\ndef sort_tuple_by_seventh_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[6]) \n\n\"\"\"\nWrite a function to sort the tuples by the eighth item of each tuple.\n\"\"\"\ndef sort_tuple_by_eighth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[7]) \n\n\"\"\"\nWrite a function to sort the tuples by the ninth item of each tuple.\n\"\"\"\ndef sort_tuple_by_ninth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[8]) \n\n\"\"\"\nWrite a function to sort the tuples by the tenth item of each tuple.\n\"\"\"\ndef sort_tuple_by_tenth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[9]) \n\n\"\"\"\nWrite a function to sort the tuples by the eleventh item of each tuple.\n"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t\tif a == 0:  \n\t\t\treturn \"Roots are not real\"  \n\t\telse:  \n\t\t\td = b**2 - 4*a*c  \n\t\t\tif d < 0:  \n\t\t\t\treturn \"Roots are not real\"  \n\t\t\telse:  \n\t\t\t\tx1 = (-b + math.sqrt(d))/(2*a)  \n\t\t\t\tx2 = (-b - math.sqrt(d))/(2*a)  \n\t\t\t\tif x1 == x2:  \n\t\t\t\t\treturn \"Roots are equal\"  \n\t\t\t\telse:  \n\t\t\t\t\tif x1*x2 < 0:  \n\t\t\t\t\t\treturn \"Roots are opposite in sign\"  \n\t\t\t\t\telse:  \n\t\t\t\t\t\treturn \"Roots are not opposite in sign\"  \nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,3,2))\nprint(Check_Solution(1,4,3))\nprint(Check_Solution(1,5,4))\nprint(Check_Solution(1,6,5))\nprint(Check_Solution(1,7,6))\nprint(Check_Solution(1,8,7))\nprint(Check_Solution(1,9,8))\nprint(Check_Solution(1,10,9))\nprint(Check_Solution(1,11,10))\nprint(Check_Solution(1,12,11))\nprint(Check_Solution(1,13,12))\nprint(Check_Solution(1,14,13))\nprint(Check_Solution(1,15,14))\nprint(Check_Solution(1,16,15))\nprint(Check_Solution(1,17,16))\nprint(Check_Solution(1,18,17))\nprint(Check_Solution(1,19,18))\nprint(Check_Solution(1,20,19))\nprint(Check_Solution(1,21,20))\nprint(Check_Solution(1,22,21))\nprint(Check_Solution(1,23,22))\nprint(Check_Solution(1,24,23))\nprint(Check_Solution(1,25,24))\nprint("}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t\n    # Initialize result \n    inv_count = 0\n    # Traverse through all array elements \n    for i in range(n): \n        # Count inversions in the subarray arr[0..i] \n        inv_count += merge_sort(arr, 0, i) \n  \n    return inv_count \n  \n# A utility function to merge two subarrays \n# arr[l..m] & arr[m+1..r] \ndef merge(arr, l, m, r): \n    # Find sizes of two subarrays to be merged \n    n1 = m - l + 1\n    n2 = r - m \n  \n    # Create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0, n1): \n        L[i] = arr[l + i] \n    for j in range(0, n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n            inv_count += n1 - i \n  \n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# A utility function to merge sort arr[l..r] \ndef merge_sort(arr, l, r): \n    if l < r: \n  \n        # Find the middle point \n        m = l+(r-l)//2\n  \n        # Sort first and second halves \n        merge_sort(arr, l, m) \n        merge_sort(arr, m"}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t<|endoftext|>"}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t<|endoftext|>"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\t# code here \n\t\tif k == 1:\n\t\t\treturn 1\n\t\tif k == 2:\n\t\t\treturn 2\n\t\tif k == 3:\n\t\t\treturn 3\n\t\tif k == 4:\n\t\t\treturn 5\n\t\tif k == 5:\n\t\t\treturn 8\n\t\tif k == 6:\n\t\t\treturn 13\n\t\tif k == 7:\n\t\t\treturn 21\n\t\tif k == 8:\n\t\t\treturn 34\n\t\tif k == 9:\n\t\t\treturn 55\n\t\tif k == 10:\n\t\t\treturn 89\n\t\tif k == 11:\n\t\t\treturn 144\n\t\tif k == 12:\n\t\t\treturn 233\n\t\tif k == 13:\n\t\t\treturn 377\n\t\tif k == 14:\n\t\t\treturn 610\n\t\tif k == 15:\n\t\t\treturn 987\n\t\tif k == 16:\n\t\t\treturn 1597\n\t\tif k == 17:\n\t\t\treturn 2584\n\t\tif k == 18:\n\t\t\treturn 4181\n\t\tif k == 19:\n\t\t\treturn 6765\n\t\tif k == 20:\n\t\t\treturn 10946\n\t\tif k == 21:\n\t\t\treturn 17711\n\t\tif k == 22:\n\t\t\treturn 28657\n\t\tif k == 23:\n\t\t\treturn 46368\n\t\tif k == 24:\n\t\t\treturn 75025\n\t\tif k == 25:\n\t\t\treturn 121393\n\t\tif k == 26:\n\t\t\treturn 196418\n\t\tif k == 27:\n\t\t\treturn 317811\n\t\tif k == 28:\n\t\t\treturn 514229\n\t\tif k == 29:\n\t\t\treturn 832040\n\t\tif k == 30:\n\t\t\treturn 1346269\n\t\tif k == 31:\n\t\t\treturn 217830"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t\tcount = 0\n\t\twhile(n>0): \n\t\t\tcount += 1\n\t\t\tn = n//10\n\t\treturn count\n\nn = int(input(\"Enter a number: \"))\nprint(\"The number of digits in the factorial of\", n, \"is\", find_Digits(n))\n<|endoftext|>"}
{"ID": 245, "source": "MBPP:846", "prompt": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t\n    # Sort the arrival and departure times \n    arr.sort() \n    dep.sort() \n  \n    # Initialize count of platforms required and \n    # index of current arrival time \n    count = 1\n    i = 1\n  \n    # Traverse through all events \n    while i < n: \n  \n        # If next event is of arrival type \n        if arr[i] >= dep[i-1]: \n  \n            # Increment count of platforms required \n            count += 1\n  \n            # Update index of current event \n            i += 1\n  \n        # Else decrement count of platforms required \n        else: \n            count -= 1\n  \n        # Update index of current event \n        i += 1\n  \n    return count \n  \n# Driver Code \narr = [900, 940, 950, 1100, 1500, 1800] \ndep = [910, 1200, 1120, 1130, 1900, 2000] \nn = len(arr) \nprint(find_platform(arr, dep, n)) \n<|endoftext|>"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return list(xs)\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\""}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t<|endoftext|>"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\tsum = 0\n\t\tfor i in range(1, N+1): \n\t\t\tif N % i == 0: \n\t\t\t\tsum = sum + i \n\t\treturn sum\n\ndef prime_divisor(N):\n\tsum = 0\n\tfor i in range(1, N+1):\n\t\tif N % i == 0:\n\t\t\tif Sum(i) == i:\n\t\t\t\tsum = sum + i\n\treturn sum\n\nprint(prime_divisor(10))\nprint(prime_divisor(100))\nprint(prime_divisor(1000))\nprint(prime_divisor(10000))\nprint(prime_divisor(100000))\nprint(prime_divisor(1000000))\n<|endoftext|>"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\t"}
{"ID": 250, "source": "MBPP:851", "prompt": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t\n    # Your code here\n    for i in range(1,N+1):\n        if N%i==0:\n            Sum=Sum+1/i\n    return Sum\n\nif __name__ == '__main__':\n    T=int(input())\n    for i in range(T):\n        N=int(input())\n        Sum=0\n        print(Sum_of_Inverse_Divisors(N,Sum))\n<|endoftext|>"}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t\treturn [x for x in num_list if x >= 0]\n\nprint(remove_negs([1,2,-3,4,-5,6]))\nprint(remove_negs([1,2,3,4,5,6]))\n\n\"\"\"\nWrite a python function to remove duplicates from a list.\n\"\"\"\ndef remove_dup(num_list): \n\t\treturn list(set(num_list))\n\nprint(remove_dup([1,2,3,4,5,6,1,2,3,4,5,6]))\nprint(remove_dup([1,2,3,4,5,6]))\n\n\"\"\"\nWrite a python function to find the intersection of two lists.\n\"\"\"\ndef intersection(list1, list2): \n\t\treturn list(set(list1) & set(list2))\n\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the union of two lists.\n\"\"\"\ndef union(list1, list2): \n\t\treturn list(set(list1) | set(list2))\n\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference(list1, list2): \n\t\treturn list(set(list1) ^ set(list2))\n\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the difference of two lists.\n\"\"\"\ndef difference(list1, list2): \n\t\treturn list(set(list1) - set(list2))"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tif n % i == 0 and i % 2!= 0: \n\t\t\t\tsum = sum + i \n\t\treturn sum\n\nprint(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(1))\nprint(sum_of_odd_Factors(2))\nprint(sum_of_odd_Factors(3))\nprint(sum_of_odd_Factors(4))\nprint(sum_of_odd_Factors(5))\nprint(sum_of_odd_Factors(6))\nprint(sum_of_odd_Factors(7))\nprint(sum_of_odd_Factors(8))\nprint(sum_of_odd_Factors(9))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(11))\nprint(sum_of_odd_Factors(12))\nprint(sum_of_odd_Factors(13))\nprint(sum_of_odd_Factors(14))\nprint(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(16))\nprint(sum_of_odd_Factors(17))\nprint(sum_of_odd_Factors(18))\nprint(sum_of_odd_Factors(19))\nprint(sum_of_odd_Factors(20))\nprint(sum_of_odd_Factors(21))\nprint(sum_of_odd_Factors(22))\nprint(sum_of_odd_Factors(23))\nprint(sum_of_odd_Factors(24))\nprint(sum_of_odd_Factors(25))\nprint(sum_of_odd_Factors(26))\nprint(sum_of_odd_Factors(27))\nprint(sum_of_odd_Factors(28))\nprint(sum_of_odd_Factors(29))\nprint(sum_of_odd_Factors(30))\nprint(sum_of_odd_Factors(31))\nprint(sum_of_odd_Factors("}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t<|endoftext|>"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\tif x%2!=0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for prime number.\n\"\"\"\ndef check_Prime(x): \n\t\tif x==2:\n\t\t\treturn True\n\t\telif x%2==0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(3,x):\n\t\t\t\tif x%i==0:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included).\n\"\"\"\ndef print_Prime(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using FOR LOOP.\n\"\"\"\ndef print_Prime_For(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using WHILE LOOP.\n\"\"\"\ndef print_Prime_While(x): \n\t\ti=1\n\t\twhile i<=x:\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\t\t\ti+=1\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using LIST COMPREHENSION.\n\"\"\"\ndef print_Prime_List(x): \n\t\tprint([i for i in range(1,x+1) if check_Prime(i)])\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using GENERATOR.\n\"\"\"\ndef print_Prime_Generator(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tyield i\n\n\"\"\"\nWrite a python function to print all the prime numbers"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t\t# code here \n\t\tcount = 0\n\t\tfor i in range(n-1) : \n\t\t\tif arr[i] == 0 and arr[i+1] == 1 : \n\t\t\t\tcount += 1\n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i]\n\t\treturn count\n\n# { \n#  Driver Code Starts\n# Initial Template for Python 3\n\nif __name__ == '__main__': \n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int,input().strip().split()))\n        print(find_Min_Swaps(arr,n))\n\n# } Driver Code Ends<|endoftext|>"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t<|endoftext|>"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count**2\n\n\"\"\"\nWrite a function to count number of integers in a given list of lists.\n\"\"\"\ndef count_int(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == int:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of strings in a given list of lists.\n\"\"\"\ndef count_str(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == str:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of tuples in a given list of lists.\n\"\"\"\ndef count_tuple(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == tuple:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of sets in a given list of lists.\n\"\"\"\ndef count_set(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == set:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of frozensets in a given list of lists.\n\"\"\"\ndef count_frozenset(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == frozenset:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of dictionaries in a given list of lists.\n\"\"\"\ndef count_dict(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == dict:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of functions in a given list of lists.\n\"\"\"\ndef count_function(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == type(lambda x: x):\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t<|endoftext|>"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9]*$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid email or not using regex.\n\"\"\"\ndef check_email(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid phone number or not using regex.\n\"\"\"\ndef check_phone_number(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{10}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid PAN or not using regex.\n\"\"\"\ndef check_pan(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Z]{5}[0-9]{4}[A-Z]{1}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid Aadhar number or not using regex.\n\"\"\"\ndef check_aadhar(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{12}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid passport number or not using regex.\n\"\"\"\ndef check_passport(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Za-z]{3}[0-9]{7}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid pin code or not using regex.\n\"\"\"\ndef check_pin_code(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{6}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid credit card number or not using regex.\n\"\"\"\ndef check_credit_card(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search("}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t<|endoftext|>"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t<|endoftext|>"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t\n    # Initialize result \n    max_len = 0\n    start = 0\n    end = 0\n    \n    # Traverse through all elements \n    for i in range(n): \n        # If this element is the starting point of  \n        # a subsequence, then update max_len and  \n        # starting and ending indexes of the subsequence \n        if arr[i] == (i + 1): \n            max_len = i + 1\n            start = i\n            end = i\n        \n        # If this element is next to the previous  \n        # (last) element of current subsequence, then  \n        # update ending index of the subsequence \n        elif arr[i] == (arr[i - 1] + 1): \n            end = i\n        \n        # If this element is not next to the previous  \n        # (last) element of current subsequence, then  \n        # this is a starting point of a new subsequence \n        # (of length 1) \n        else: \n            start = i\n            end = i\n            max_len = end - start + 1\n    \n    return max_len\n\n# Driver Code \narr = [1, 11, 2, 10, 4, 5, 2, 1] \nn = len(arr) \nprint(find_longest_conseq_subseq(arr, n)) \n<|endoftext|>"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t<|endoftext|>"}
{"ID": 264, "source": "MBPP:865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t<|endoftext|>"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumb2(monthname2):\n\t\tif monthname2 == \"April\" or monthname2 == \"June\" or monthname2 == \"September\" or monthname2 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 28 or 29 days or not.\n\"\"\"\ndef check_monthnumb3(monthname2):\n\t\tif monthname2 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear2(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear3(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t"}
{"ID": 266, "source": "MBPP:867", "prompt": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t\t# Initialize result  \n\t\tres = 0  \n\t\t# Traverse through all elements  \n\t\tfor i in range(n):  \n\t\t\t# Add current element to result  \n\t\t\tres = res + arr[i]  \n\t\t\t# If result is even, return  \n\t\t\tif (res % 2 == 0):  \n\t\t\t\treturn res  \n\t\t# If result is odd, add 1  \n\t\treturn res + 1\n\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tn = len(arr)\n\tprint(min_Num(arr,n))<|endoftext|>"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t\treturn len(a.split()[-1])\n\n\"\"\"\nWrite a python function to find all the numbers in a given string.\n\"\"\"\ndef find_Numbers(a): \n\t\treturn [int(i) for i in a.split() if i.isdigit()]\n\n\"\"\"\nWrite a python function to find all the even numbers in a given list.\n\"\"\"\ndef find_Even_Numbers(a): \n\t\treturn [i for i in a if i%2==0]\n\n\"\"\"\nWrite a python function to find all the odd numbers in a given list.\n\"\"\"\ndef find_Odd_Numbers(a): \n\t\treturn [i for i in a if i%2!=0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_7(a): \n\t\treturn [i for i in a if i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 and 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_And_7(a): \n\t\treturn [i for i in a if i%5==0 and i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 or 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_Or_7(a): \n\t\treturn [i for i in a if i%5==0 or i%7==0]\n\n\"\"\"\nWrite a python function to find all the prime numbers in a given list.\n\"\"\"\ndef find_Prime_Numbers(a): \n\t\treturn [i for i in a if i>1 and all(i%j!=0 for j in range(2,i))]\n\n\"\"\"\nWrite a python function to find all the numbers which are divisible by 5 and 6 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_And_6(a): \n\t\treturn [i for i in a if i%5==0 and i%6==0]\n\n\"\"\"\nWrite a python function to find all the numbers which are divisible by 5 or 6 in a given list.\n\"\"\"\ndef find"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t<|endoftext|>"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t<|endoftext|>"}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t\treturn string1 in string2 + string2\n\nprint(are_Rotations(\"waterbottle\",\"erbottlewat\"))\nprint(are_Rotations(\"waterbottle\",\"erbottlewat\"))\n<|endoftext|>"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t\n    # If list2 is empty then list1 is subset of list2 \n    if len(list2) == 0: \n        return True \n  \n    # If last element of list1 is equal to first element of list2 then \n    # remove first element from list2 and recur \n    if list1[-1] == list2[0]: \n        return check_subset(list1[:-1], list2[1:]) \n  \n    # If last element of list1 is not equal to first element of list2 then \n    # return False \n    return False \n  \n# Driver code \nlist1 = [1, 2, 3, 4, 5, 6] \nlist2 = [1, 2, 3] \nlist3 = [1, 2, 3, 4, 5, 6, 7] \nlist4 = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(check_subset(list1, list2)) \nprint(check_subset(list1, list3)) \nprint(check_subset(list1, list4)) \n<|endoftext|>"}
{"ID": 272, "source": "MBPP:873", "prompt": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t", "predict": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t<|endoftext|>"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t<|endoftext|>"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t<|endoftext|>"}
{"ID": 275, "source": "MBPP:876", "prompt": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t<|endoftext|>"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t<|endoftext|>"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t<|endoftext|>"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t\tif a == 0 : \n\t\t\tif b == 0 : \n\t\t\t\tif c == 0 : \n\t\t\t\t\treturn 0\n\t\t\t\telse : \n\t\t\t\t\treturn 1\n\t\t\telse : \n\t\t\t\treturn 2\n\t\telse : \n\t\t\tif b**2 - 4*a*c < 0 : \n\t\t\t\treturn 0\n\t\t\telif b**2 - 4*a*c == 0 : \n\t\t\t\treturn 1\n\t\t\telse : \n\t\t\t\treturn 2\n\n\"\"\"\nWrite a python function to find the roots of quadratic equation.\n\"\"\"\ndef Quadratic_Equation(a,b,c) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(2*a)\n\telse : \n\t\treturn (-b + (b**2 - 4*a*c)**0.5)/(2*a), (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n\"\"\"\nWrite a python function to find the roots of cubic equation.\n\"\"\"\ndef Cubic_Equation(a,b,c,d) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(3*a)\n\telse : \n\t\tx1 = (-b + (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx2 = (-b - (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx3 = (-b/(3*a)) - ((b**2 - 3*a*c)**0.5)/(3*a)\n\t\treturn x1, x2, x3\n\n\"\"\"\nWrite a python function to find the roots of quartic equation.\n\"\"\"\ndef Quartic_Equation(a,b,c,d,e) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t<|endoftext|>"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t<|endoftext|>"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t<|endoftext|>"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t\t# Your code goes here \n\t\t# Return True if all bits are set in the given range \n\t\t# Return False otherwise \n\t\t# Do not print anything \n\t\t# Do not take input from user \n\t\t# Do not use any loops \n\t\t# Do not change the order of the bits \n\t\t# Do not convert the integer to a string \n\t\t# Do not use any bitwise operator \n\t\t# Do not use any conditional statement \n\t\t# Do not use any string methods \n\t\t# Do not use any list methods \n\t\t# Do not use any sorting methods \n\t\t# Do not use any other data structure \n\t\t# Do not use any other library \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\tif len(str1) == 0:\n\t\t\treturn True\n\t\tif str1[0] == str2[0]:\n\t\t\treturn is_Isomorphic(str1[1:],str2[1:])\n\t\telse:\n\t\t\tif str1[1:] in str2[1:]:\n\t\t\t\treturn is_Isomorphic(str1[1:],str2[str2.index(str1[1:])+1:])\n\t\t\telse:\n\t\t\t\treturn False\n\nprint(is_Isomorphic(\"egg\",\"add\"))\nprint(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"ab\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Is"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t<|endoftext|>"}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t\treturn n & 1\n\nprint(is_odd(10))\nprint(is_odd(11))\n<|endoftext|>"}
{"ID": 287, "source": "MBPP:888", "prompt": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t<|endoftext|>"}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t\ti = 0\n\t\tj = 0\n\t\twhile i < n and j < n : \n\t\t\tif arr1[i] == arr2[j] : \n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\t\telif arr1[i] < arr2[j] : \n\t\t\t\ti += 1\n\t\t\telse : \n\t\t\t\tj += 1\n\t\treturn i\n\narr1 = [1,2,3,4,5,6,7,8,9,10]\narr2 = [1,2,3,4,5,6,7,8,9,10,11]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n<|endoftext|>"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t<|endoftext|>"}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t<|endoftext|>"}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t<|endoftext|>"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t<|endoftext|>"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t<|endoftext|>"}
{"ID": 298, "source": "MBPP:899", "prompt": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t\n    # Initialize index of first and last element \n    first = 0\n    last = n-1\n    while first < last: \n        if arr[first] > arr[last]: \n            return False\n        first += 1\n        last -= 1\n    return True\n\n# Driver code \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nif (check(arr, n) == True): \n    print(\"Array can be sorted by corner elements\") \nelse: \n    print(\"Array cannot be sorted by corner elements\") \n<|endoftext|>"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t<|endoftext|>"}
{"ID": 300, "source": "MBPP:901", "prompt": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t<|endoftext|>"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t<|endoftext|>"}
{"ID": 302, "source": "MBPP:903", "prompt": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t\tcount = 0\n\t\twhile n :  \n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count\n\nif __name__ == \"__main__\" :\n\tn = 10\n\tprint(count_Unset_Bits(n))<|endoftext|>"}
{"ID": 303, "source": "MBPP:904", "prompt": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t", "predict": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t<|endoftext|>"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of binomial co-efficients.\n\"\"\"\ndef sum_of_binomial(n): \n\t\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t<|endoftext|>"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t<|endoftext|>"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t\n    # Initialize left and right indexes \n    left = 0\n    right = n-1\n      \n    # Do Binary Search while there are elements in the array \n    while(left <= right): \n          \n        # Find the middle index \n        mid = left + (right - left) // 2\n          \n        # Check if the element is fixed point \n        if (mid == arr[mid]): \n            return mid \n          \n        # If the element is greater than mid, then \n        # the element can only be present in right \n        # subarray \n        elif (mid < arr[mid]): \n            right = mid - 1\n          \n        # Else the element can only be present in left \n        # subarray \n        else: \n            left = mid + 1\n          \n    # If we reach here, then the element doesn't exist \n    return -1\n\n# Driver Code \narr = [10, 15, 10, 11, 10, 15] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n<|endoftext|>"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t<|endoftext|>"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t<|endoftext|>"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t<|endoftext|>"}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\treturn\n\n\tif len(args)!= 1:\n\t\tprint(\n\"\"\"\nUsage:\n\tpython3 lobb.py <number>\n\"\"\"\n\t\t)\n\t\treturn\n\n\tnumber = int(args[0])\n\tif number < 1:\n\t\tprint(\"Number must be greater than 0.\")\n\t\treturn\n\n\tprint(\"Number: {}\".format(number))\n\tprint(\"Lobb Number: {}\".format(lobb_number(number)))\n\tprint(\"Lobb Number (ln): {}\".format(lobb_number_ln(number)))\n\tprint(\"Lobb Number (m): {}\".format(lobb_number_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln,"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t<|endoftext|>"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t\tif len(s) == 0:  \n\t\t\treturn False\n\t\tif len(s) == 1:  \n\t\t\treturn True\n\t\tif s[0] == s[1]:  \n\t\t\treturn is_Two_Alter(s[1:])  \n\t\telse:  \n\t\t\treturn is_Two_Alter(s[1:]) and is_Two_Alter(s[2:])  \n\nprint(is_Two_Alter(\"ABABABAB\"))\nprint(is_Two_Alter(\"ABABABA\"))\nprint(is_Two_Alter(\"ABABAB\"))\nprint(is_Two_Alter(\"ABABA\"))\nprint(is_Two_Alter(\"ABAB\"))\nprint(is_Two_Alter(\"ABA\"))\nprint(is_Two_Alter(\"AB\"))\nprint(is_Two_Alter(\"A\"))\nprint(is_Two_Alter(\"\"))\n<|endoftext|>"}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t<|endoftext|>"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t\n    # Sort the array \n    A.sort() \n  \n    # Now fix the first element one by one and find the other two elements \n    for i in range(0, arr_size - 2): \n  \n        # To find the other two elements, start two index variables from \n        # right and left of the current element. \n        l = i + 1\n        r = arr_size - 1\n  \n        # Keep reducing the sum while elements at the left \n        # side are smaller than the current element. \n        while (l < r): \n            if (A[i] + A[l] + A[r] == sum): \n                return 1\n            elif (A[i] + A[l] + A[r] < sum): \n                l += 1\n            else: \n                r -= 1\n  \n    # If we reach here, then no triplet was found \n    return 0\n\n# Driver program to test above function \nA = [1, 4, 45, 6, 10, 8] \nsum = 22\narr_size = len(A) \nif (find_triplet_array(A, arr_size, sum)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n<|endoftext|>"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t<|endoftext|>"}
{"ID": 317, "source": "MBPP:918", "prompt": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t", "predict": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\t# If n is 0 then no coins are required \n\t\tif (n == 0): \n\t\t\treturn 1\n\t\t# If n is less than 0 then no solution exists \n\t\tif (n < 0): \n\t\t\treturn 0\n\t\t# If there are no coins and n is greater \n\t\t# than 0, then no solution exists \n\t\tif (m <= 0 and n >= 1): \n\t\t\treturn 0\n\t\t# count is sum of solutions (i) including S[m-1] \n\t\t# (ii) excluding S[m-1] \n\t\tcount = coin_change(S, m, n - S[m - 1]) + coin_change(S, m - 1, n) \n\t\treturn count \n\ndef main():\n\tS = [1, 2, 3]\n\tm = len(S)\n\tn = 4\n\tprint(coin_change(S, m, n))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t<|endoftext|>"}
{"ID": 319, "source": "MBPP:920", "prompt": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t<|endoftext|>"}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t<|endoftext|>"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t\n    # Initialize maximum product \n    max_product = arr[0] \n  \n    # Traverse through all array elements \n    for i in range(1, len(arr)): \n        # If current element is \n        # smaller than the previous \n        # element then swap them \n        if arr[i] < arr[i - 1]: \n            arr[i], arr[i - 1] = arr[i - 1], arr[i] \n  \n        # Update max_product if needed \n        max_product = max(max_product, arr[i], arr[i - 1] * arr[i]) \n  \n    return max_product \n  \n# Driver code \narr = [10, 7, 5, 10, 7] \nprint(max_product(arr)) \n<|endoftext|>"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t<|endoftext|>"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t<|endoftext|>"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t<|endoftext|>"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\t# code here \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 927\n    if n == 13:\n        return 1705\n    if n == 14:\n        return 3136\n    if n == 15:\n        return 5768\n    if n == 16:\n        return 10609\n    if n == 17:\n        return 19513\n    if n == 18:\n        return 35890\n    if n == 19:\n        return 66012\n    if n == 20:\n        return 120807\n    if n == 21:\n        return 216009\n    if n == 22:\n        return 390620\n    if n == 23:\n        return 703213\n    if n == 24:\n        return 1262673\n    if n == 25:\n        return 2230079\n    if n == 26:\n        return 3990440\n    if n == 27:\n        return 7244362\n    if n == 28:\n        return 12974488\n    if n == 29:\n        return 22920711\n    if n == 30:\n        return 40423137\n    if n == 31:\n        return 73683713\n    if n == 32:\n        return 131426880\n    if n == "}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn max(height(root.left), height(root.right)) + 1\n\ndef main():\n\troot = Node(1) \n\troot.left = Node(2) \n\troot.right = Node(3) \n\troot.left.left = Node(4) \n\troot.left.right = Node(5) \n\troot.right.left = Node(6) \n\troot.right.right = Node(7) \n\tprint(\"Height of tree is \" + str(height(root))) \n\nmain()\n<|endoftext|>"}
{"ID": 327, "source": "MBPP:928", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t<|endoftext|>"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t\tcount = 0\n\t\tfor i in tuplex:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),1))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),2))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),3))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),4))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),5))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),6))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),7))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),8))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),9))\nprint(count_tuplex((1,2,3"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t<|endoftext|>"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t<|endoftext|>"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t<|endoftext|>"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t<|endoftext|>"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\n    # Initialize result \n    res = 0\n    # Initialize current value of nth \n    # delannoy number \n    curr_val = 0\n    # Initialize previous value of nth \n    # delannoy number \n    prev_val = 0\n    # Initialize current value of mth \n    # delannoy number \n    curr_m_val = 0\n    # Initialize previous value of mth \n    # delannoy number \n    prev_m_val = 0\n    # Initialize current value of n-mth \n    # delannoy number \n    curr_nm_val = 0\n    # Initialize previous value of n-mth \n    # delannoy number \n    prev_nm_val = 0\n    # Initialize current value of n+mth \n    # delannoy number \n    curr_np_m_val = 0\n    # Initialize previous value of n+mth \n    # delannoy number \n    prev_np_m_val = 0\n    # Initialize current value of n-m+1th \n    # delannoy number \n    curr_nm_p_val = 0\n    # Initialize previous value of n-m+1th \n    # delannoy number \n    prev_nm_p_val = 0\n    # Initialize current value of n+m-1th \n    # delannoy number \n    curr_np_m_p_val = 0\n    # Initialize previous value of n+m-1th \n    # delannoy number \n    prev_np_m_p_val = 0\n    # Initialize current value of n-m+2th \n    # delannoy number \n    curr_nm_p_p_val = 0\n    # Initialize previous value of n-m+2th \n    # delannoy number \n    prev_nm_p_p_val = 0\n    # Initialize current value of n+m-2th \n    # delannoy number \n    curr_np_m_p_p_val = 0\n    # Initialize previous value of n+m-2th \n    # delannoy number \n    prev_np_m_p_p_val = 0\n    # Initialize current value of n-m+3th \n    # delannoy number \n    curr_nm_p_p_p_val = 0\n    # Initialize previous value of n-m+3th \n    # delannoy number \n    prev_nm_p_p_p_val = "}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t<|endoftext|>"}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t<|endoftext|>"}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t<|endoftext|>"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t\n    # Find the smallest number among three numbers \n    # and return the index of the smallest number \n    if A[p] < B[q] and A[p] < C[r]: \n        return p \n    elif B[q] < A[p] and B[q] < C[r]: \n        return q \n    else: \n        return r \n  \n# Driver Code \nif __name__ == '__main__': \n    A = [1, 4, 5, 7] \n    B = [2, 3, 6, 8] \n    C = [3, 6, 9, 10] \n    p = 0\n    q = 0\n    r = 0\n    print(find_closet(A, B, C, p, q, r)) \n  \n# This code is contributed by <NAME> <|endoftext|>"}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t<|endoftext|>"}
{"ID": 339, "source": "MBPP:940", "prompt": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t<|endoftext|>"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t<|endoftext|>"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t<|endoftext|>"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t<|endoftext|>"}
{"ID": 343, "source": "MBPP:944", "prompt": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t", "predict": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t<|endoftext|>"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t<|endoftext|>"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t<|endoftext|>"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t<|endoftext|>"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t<|endoftext|>"}
{"ID": 348, "source": "MBPP:949", "prompt": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t<|endoftext|>"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t<|endoftext|>"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t<|endoftext|>"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p."}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t\t# Initialize result \n\t\tresult = [] \n\t\t# Initialize current subset as empty \n\t\tcurrent_subset = [] \n\t\t# Recursion \n\t\tsubset_util(ar, n, 0, current_subset, result) \n\t\treturn result \n\n# A recursive function to print all subsets \ndef subset_util(ar, n, index, current_subset, result): \n\t# If current index is greater than n, then return \n\tif index > n: \n\t\treturn\n\t# If current index is same as n, then print the current subset \n\tif index == n: \n\t\tresult.append(current_subset) \n\t\treturn\n\t# Recur for current index and next index \n\tsubset_util(ar, n, index + 1, current_subset, result) \n\tcurrent_subset.append(ar[index]) \n\tsubset_util(ar, n, index + 1, current_subset, result) \n\tcurrent_subset.pop() \n\n# Driver code \nif __name__ == \"__main__\": \n\tn = int(input())\n\tar = list(map(int, input().split())) \n\tprint(len(subset(ar, n))) \n<|endoftext|>"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\t"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t<|endoftext|>"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t<|endoftext|>"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t<|endoftext|>"}
{"ID": 357, "source": "MBPP:958", "prompt": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t", "predict": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t<|endoftext|>"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t\treturn sum(lst) / len(lst) \n\n\"\"\"\nWrite a python function to multiply all the numbers in a list.\n\"\"\"\ndef Multiply(lst): \n\t\treturn reduce(lambda x, y: x * y, lst) \n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef Maximum(lst): \n\t\treturn max(lst) \n\ndef Minimum(lst): \n\t\treturn min(lst) \n\n\"\"\"\nWrite a python function to find the length of a list.\n\"\"\"\ndef Length(lst): \n\t\treturn len(lst) \n\n\"\"\"\nWrite a python function to reverse a list.\n\"\"\"\ndef Reverse(lst): \n\t\treturn lst[::-1] \n\n\"\"\"\nWrite a python function to check if a list is empty or not.\n\"\"\"\ndef IsEmpty(lst): \n\t\treturn lst == [] \n\n\"\"\"\nWrite a python function to check if a value is present in a list or not.\n\"\"\"\ndef IsPresent(lst, val): \n\t\treturn val in lst \n\n\"\"\"\nWrite a python function to concatenate two lists.\n\"\"\"\ndef Concatenate(lst1, lst2): \n\t\treturn lst1 + lst2 \n\n\"\"\"\nWrite a python function to insert a value in a list at a specified index.\n\"\"\"\ndef Insert(lst, val, index): \n\t\tlst.insert(index, val) \n\t\treturn lst \n\n\"\"\"\nWrite a python function to remove a value from a list.\n\"\"\"\ndef Remove(lst, val): \n\t\tlst.remove(val) \n\t\treturn lst \n\n\"\"\"\nWrite a python function to remove a value from a list at a specified index.\n\"\"\"\ndef RemoveAt(lst, index): \n\t\tlst.pop(index) \n\t\treturn lst \n\n\"\"\"\nWrite a python function to sort a list.\n\"\"\"\ndef Sort(lst): \n\t\tlst.sort() \n\t\treturn lst \n\n\"\"\"\nWrite a python function to get the frequency of a value in a list.\n\"\"\"\ndef Frequency(lst, val): \n\t\treturn lst.count(val) \n\n\"\"\"\nWrite a python function to get the index of a value in a list.\n\"\"\"\ndef Index(lst, val): \n\t\treturn lst.index(val) \n\n\"\"\"\nWrite a python function to get a list of"}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t<|endoftext|>"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t<|endoftext|>"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_Even(1,10))\nprint(sum_Even(1,100))\nprint(sum_Even(1,1000))\nprint(sum_Even(1,10000))\nprint(sum_Even(1,100000))\nprint(sum_Even(1,1000000))\nprint(sum_Even(1,10000000))\nprint(sum_Even(1,100000000))\nprint(sum_Even(1,1000000000))\nprint(sum_Even(1,10000000000))\nprint(sum_Even(1,100000000000))\nprint(sum_Even(1,1000000000000))\nprint(sum_Even(1,10000000000000))\nprint(sum_Even(1,100000000000000))\nprint(sum_Even(1,1000000000000000))\nprint(sum_Even(1,10000000000000000))\nprint(sum_Even(1,100000000000000000))\nprint(sum_Even(1,1000000000000000000))\nprint(sum_Even(1,10000000000000000000))\nprint(sum_Even(1,100000000000000000000))\nprint(sum_Even(1,1000000000000000000000))\nprint(sum_Even(1,100"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s)%2==0: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is a palindrome or not.\n\"\"\"\ndef palindrome(s): \n\t\treturn s == s[::-1]\n\n\"\"\"\nWrite a python function to check whether the word is a pangram or not.\n\"\"\"\ndef pangram(s): \n\t\treturn set(s.lower()) == set(string.ascii_lowercase)\n\n\"\"\"\nWrite a python function to check whether the word is a permutation of another word or not.\n\"\"\"\ndef permutation(s1, s2): \n\t\treturn sorted(s1.lower()) == sorted(s2.lower())\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t<|endoftext|>"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', '"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants.\n\"\"\"\ndef check2(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check3(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check4(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check5(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check6(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check7(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check8(string): \n\t\tvowels = 'ae"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t<|endoftext|>"}
{"ID": 368, "source": "MBPP:969", "prompt": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t", "predict": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t<|endoftext|>"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t<|endoftext|>"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t<|endoftext|>"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t<|endoftext|>"}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t\n    # Initialize the solution matrix \n    for i in range(len(A)): \n        for j in range(len(A[i])): \n            if (i == 0 or j == 0): \n                A[i][j] = A[i][j] \n            elif (i == j): \n                A[i][j] = A[i-1][j-1] + A[i][j] \n            else: \n                A[i][j] = min(A[i-1][j-1], A[i-1][j]) + A[i][j] \n  \n    return A[len(A)-1][0] \n\nif __name__ == \"__main__\":\n    A = [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]\n    print(min_sum_path(A))<|endoftext|>"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t\treturn s[:s.find(ch)] + s[s.rfind(ch)+1:]\n\nprint(remove_Occ(\"geeksforgeeks\",\"e\"))\nprint(remove_Occ(\"geeksforgeeks\",\"k\"))\nprint(remove_Occ(\"geeksforgeeks\",\"z\"))\n<|endoftext|>"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t<|endoftext|>"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t<|endoftext|>"}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t\treturn (l*b*h)/3\n\n\"\"\"\nWrite a python function to find the surface area of a triangular prism.\n\"\"\"\ndef find_SurfaceArea(l,b,h) : \n\t\treturn (2*l*b)+(2*l*h)+(2*b*h)\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t<|endoftext|>"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t<|endoftext|>"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t<|endoftext|>"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t\n    # Your code here\n    return string.translate(str.maketrans('', '', second_string))\n\nprint(remove_dirty_chars(\"Hello World\", \"el\"))\nprint(remove_dirty_chars(\"Hello World\", \"l\"))\nprint(remove_dirty_chars(\"Hello World\", \"lo\"))\nprint(remove_dirty_chars(\"Hello World\", \"loW\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWr\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t<|endoftext|>"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\treturn x%2 == 0\n\n\"\"\"\nWrite a function to check if the given number is even or not.\n\"\"\"\ndef is_even(x): \n\t\treturn x%2 == 0\n\n\"\"\"\nWrite a function to check if the given number is odd or not.\n\"\"\"\ndef is_odd(x): \n\t\treturn x%2 == 1\n\n\"\"\"\nWrite a function to check if the given number is prime or not.\n\"\"\"\ndef is_prime(x): \n\t\tfor i in range(2,x): \n\t\t\tif x%i == 0: \n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given number is perfect or not.\n\"\"\"\ndef is_perfect(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum == x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is abundant or not.\n\"\"\"\ndef is_abundant(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum > x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is deficient or not.\n\"\"\"\ndef is_deficient(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum < x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect square or not.\n\"\"\"\ndef is_perfect_square(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect cube or not.\n\"\"\"\ndef is_perfect_cube(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t\treturn [i*n for i in range(1,m+1)]\n\nprint(multiples_of_num(5,2))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) -"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t<|endoftext|>"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t\t# code here \n\t\tmax_sum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1[i])):\n\t\t\t\tmax_sum += list1[i][j]\n\t\treturn max_sum\n\n# Main\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_Sum(list1))\n<|endoftext|>"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t\treturn int(binary, 2)\n\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(decimal): \n\t\treturn bin(decimal)\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hex(decimal): \n\t\treturn hex(decimal)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hex_to_decimal(hexadecimal): \n\t\treturn int(hexadecimal, 16)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hex_to_binary(hexadecimal): \n\t\treturn bin(int(hexadecimal, 16))\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hex(binary): \n\t\treturn hex(int(binary, 2))\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(binary): \n\t\treturn oct(int(binary, 2))\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(octal): \n\t\treturn bin(int(octal, 8))\n\n\"\"\"\nWrite a function to convert the given octal number to its decimal equivalent.\n\"\"\"\ndef octal_to_decimal(octal): \n\t\treturn int(octal, 8)\n\n\"\"\"\nWrite a function to convert the given decimal number to its octal equivalent.\n\"\"\"\ndef decimal_to_octal(decimal): \n\t\treturn oct(decimal)\n\n\"\"\"\nWrite a function to convert the given decimal number to its roman equivalent.\n\"\"\"\ndef decimal_to_roman(decimal): \n\t\troman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV',"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t\t# Initialize result \n\t\tresult = 1\n\t\t# Traverse array \n\t\tfor i in range(0, n): \n\t\t\t# If this element is not visited yet \n\t\t\tif (arr[i]!= -1): \n\t\t\t\t# Update result \n\t\t\t\tresult = result * arr[i] \n\t\t\t\t# Mark this element as visited \n\t\t\t\tarr[i] = -1\n\t\treturn result\n\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr)\n\tprint(find_Product(arr,n))<|endoftext|>"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t<|endoftext|>"}
{"ID": 390, "source": "MBPP:27", "prompt": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t", "predict": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t\treturn [i.replace(i, '') for i in list]\n\n\"\"\"\nWrite a python function to remove all vowels from a list of strings.\n\"\"\"\ndef remove_vowels(list): \n\t\treturn [i.replace(i, '') for i in list if i not in 'aeiou']\n\n\"\"\"\nWrite a python function to remove all special characters from a list of strings.\n\"\"\"\ndef remove_special(list): \n\t\treturn [i.replace(i, '') for i in list if i not in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~']\n\n\"\"\"\nWrite a python function to remove all duplicates from a list of strings.\n\"\"\"\ndef remove_duplicates(list): \n\t\treturn list(set(list))\n\n\"\"\"\nWrite a python function to find the intersection of two lists.\n\"\"\"\ndef intersection(list1, list2): \n\t\treturn list(set(list1) & set(list2))\n\n\"\"\"\nWrite a python function to find the union of two lists.\n\"\"\"\ndef union(list1, list2): \n\t\treturn list(set(list1) | set(list2))\n\n\"\"\"\nWrite a python function to find the difference between two lists.\n\"\"\"\ndef difference(list1, list2): \n\t\treturn list(set(list1) - set(list2))\n\n\"\"\"\nWrite a python function to find the symmetric difference between two lists.\n\"\"\"\ndef symmetric_difference(list1, list2): \n\t\treturn list(set(list1) ^ set(list2))\n\n\"\"\"\nWrite a python function to find the frequency of each element in a list.\n\"\"\"\ndef frequency(list): \n\t\treturn {i:list.count(i) for i in list}\n\n\"\"\"\nWrite a python function to find the frequency of each element in a list after applying a transformation function to each element.\n\"\"\"\ndef frequency_transform(list, func): \n\t\treturn {func(i):list.count(i) for i in list}\n\n\"\"\"\nWrite a python function to find the most frequently occurring element in a list.\n\"\"\"\ndef most_frequent(list): \n\t\treturn max(set(list), key = list.count)\n\n\"\"\"\nWrite a python"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t\treturn int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))\n\n\"\"\"\nWrite a python function to find Pascal's triangle for given input n.\n\"\"\"\ndef pascal_Triangle(n):\n\tpascal_Triangle = [[1]]\n\tfor i in range(1,n+1):\n\t\tpascal_Triangle.append([1])\n\t\tfor j in range(1,i):\n\t\t\tpascal_Triangle[i].append(pascal_Triangle[i-1][j-1]+pascal_Triangle[i-1][j])\n\t\tpascal_Triangle[i].append(1)\n\treturn pascal_Triangle\n\n\"\"\"\nWrite a python function to print Pascal's triangle for given input n.\n\"\"\"\ndef print_Pascal_Triangle(n):\n\tpascal_Triangle = pascal_Triangle(n)\n\tfor i in pascal_Triangle:\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to find Fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci_Recursion(n):\n\tif n <= 1:\n\t\treturn n\n\telse:\n\t\treturn fibonacci_Recursion(n-1) + fibonacci_Recursion(n-2)\n\n\"\"\"\nWrite a python function to find Fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci_Dynamic(n):\n\tfibonacci_Dynamic = [0,1]\n\tfor i in range(2,n+1):\n\t\tfibonacci_Dynamic.append(fibonacci_Dynamic[i-1] + fibonacci_Dynamic[i-2])\n\treturn fibonacci_Dynamic\n\n\"\"\"\nWrite a python function to find Fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci_Dynamic_Space_Optimized(n):\n\tfibonacci_Dynamic = [0,1]\n\tfor i in range(2,n+1):\n\t\tfibonacci_Dynamic.append(fibonacci_Dynamic[i-2] + fibonacci_Dynamic[i-1])\n\treturn fibonacci_Dynamic\n\n\"\"\"\nWrite a python function to find Fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci_Dynamic_Space_Optimized_2(n):\n\tfibonacci_Dynamic = [0,1"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t\t# Your code goes here\n\t\t# return the element\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(n)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tcount = 0\n\t\tfor i in range(len(s)): \n\t\t\tif i < len(s) - 1 and s[i] == s[i + 1]: \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"abca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabc\"))\nprint(count_Substring_With_Equal_Ends(\"abcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t<|endoftext|>"}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t\ti = 2\n\t\twhile i * i <= n: \n\t\t\tif (n % i) == 0: \n\t\t\t\tn = n / i \n\t\t\telse: \n\t\t\t\ti += 1\n\t\treturn n\n\nprint(max_Prime_Factors(600851475143))<|endoftext|>"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t\treturn bin(N)\n\n\"\"\"\nWrite a python function to convert a decimal number to octal number.\n\"\"\"\ndef decimal_To_Octal(N): \n\t\treturn oct(N)\n\n\"\"\"\nWrite a python function to convert a decimal number to hexadecimal number.\n\"\"\"\ndef decimal_To_Hexadecimal(N): \n\t\treturn hex(N)\n\n\"\"\"\nWrite a python function to convert a binary number to decimal number.\n\"\"\"\ndef binary_To_Decimal(N): \n\t\treturn int(N, 2)\n\n\"\"\"\nWrite a python function to convert a octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(N): \n\t\treturn int(N, 8)\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to decimal number.\n\"\"\"\ndef hexadecimal_To_Decimal(N): \n\t\treturn int(N, 16)\n\n\"\"\"\nWrite a python function to convert a binary number to octal number.\n\"\"\"\ndef binary_To_Octal(N): \n\t\treturn oct(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to binary number.\n\"\"\"\ndef octal_To_Binary(N): \n\t\treturn bin(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to binary number.\n\"\"\"\ndef hexadecimal_To_Binary(N): \n\t\treturn bin(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to hexadecimal number.\n\"\"\"\ndef octal_To_Hexadecimal(N): \n\t\treturn hex(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to octal number.\n\"\"\"\ndef hexadecimal_To_Octal(N): \n\t\treturn oct(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# code here \n\t\tfor i in range(N): \n\t\t\tif (ar[i]!= i): \n\t\t\t\treturn i \n\t\treturn N \n\nif __name__ == '__main__':\n\tar = [0, 1, 2, 4, 5, 6, 7, 9] \n\tN = len(ar) \n\tprint(find_missing(ar,N)) \n<|endoftext|>"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t<|endoftext|>"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\t# Your code goes here\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t<|endoftext|>"}
{"ID": 401, "source": "MBPP:38", "prompt": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t<|endoftext|>"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t<|endoftext|>"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t<|endoftext|>"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t<|endoftext|>"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\t# Initialize sum and left \n\t\tsum = 0\n\t\tleft = 0\n\t\t# Traverse through all elements \n\t\tfor i in range(n): \n\t\t\t# If this element is seen before \n\t\t\tif (i > 0 and arr[i] == arr[i - 1]): \n\t\t\t\t# Add previous sum with current element \n\t\t\t\tsum = sum + arr[i] \n\t\t\t\t# Update left to current element \n\t\t\t\tleft = i \n\t\t\t# If this element is not seen before \n\t\t\telse: \n\t\t\t\t# Update sum with current element \n\t\t\t\tsum = arr[i] \n\t\t\t\t# Update left to current element \n\t\t\t\tleft = i \n\t\t# Return sum \n\t\treturn sum \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_Sum(arr, n)) \n<|endoftext|>"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t<|endoftext|>"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t<|endoftext|>"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t<|endoftext|>"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t<|endoftext|>"}
{"ID": 410, "source": "MBPP:47", "prompt": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t\t# Your code goes here \n\t\t# return the last digit \n\t\treturn (A%B)\n\nif __name__ == '__main__': \n\t# driver code \n\tA = 12\n\tB = 3\n\tprint(compute_Last_Digit(A,B)) \n<|endoftext|>"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t<|endoftext|>"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t<|endoftext|>"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t<|endoftext|>"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t<|endoftext|>"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t<|endoftext|>"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t<|endoftext|>"}
{"ID": 417, "source": "MBPP:54", "prompt": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t<|endoftext|>"}
{"ID": 418, "source": "MBPP:55", "prompt": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t<|endoftext|>"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t\treturn n == int(str(n)[::-1]) + 1\n\nprint(check(121))\nprint(check(122))\nprint(check(123))\nprint(check(124))\nprint(check(125))\nprint(check(126))\nprint(check(127))\nprint(check(128))\nprint(check(129))\nprint(check(130))\nprint(check(131))\nprint(check(132))\nprint(check(133))\nprint(check(134))\nprint(check(135))\nprint(check(136))\nprint(check(137))\nprint(check(138))\nprint(check(139))\nprint(check(140))\nprint(check(141))\nprint(check(142))\nprint(check(143))\nprint(check(144))\nprint(check(145))\nprint(check(146))\nprint(check(147))\nprint(check(148))\nprint(check(149))\nprint(check(150))\nprint(check(151))\nprint(check(152))\nprint(check(153))\nprint(check(154))\nprint(check(155))\nprint(check(156))\nprint(check(157))\nprint(check(158))\nprint(check(159))\nprint(check(160))\nprint(check(161))\nprint(check(162))\nprint(check(163))\nprint(check(164))\nprint(check(165))\nprint(check(166))\nprint(check(167))\nprint(check(168))\nprint(check(169))\nprint(check(170))\nprint(check(171))\nprint(check(172))\nprint(check(173))\nprint(check(174))\nprint(check(175))"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t\t\"\"\"\n\t\t:param arr: list of digits\n\t\t:param n: length of the list\n\t\t:return: largest number that can be formed with the given digits\n\t\t\"\"\"\n\t\tarr.sort()\n\t\tmax_num = 0\n\t\tfor i in range(n) : \n\t\t\tmax_num = max_num*10 + arr[i]\n\t\treturn max_num\n\nif __name__ == '__main__' : \n\tarr = [1,2,3,4,5,6,7,8,9]\n\tn = len(arr)\n\tprint(find_Max_Num(arr,n))<|endoftext|>"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t\tif (x < 0 and y > 0) or (x > 0 and y < 0): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(opposite_Signs(1,-2))\nprint(opposite_Signs(1,2))\nprint(opposite_Signs(-1,2))\nprint(opposite_Signs(-1,-2))\n<|endoftext|>"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\treturn (n * (3 * n - 1)) % 2 == 1\n\ndef nth_octagonal(n):\n\tfor i in range(1, n):\n\t\tif is_octagonal(i):\n\t\t\tn -= 1\n\treturn i\n\nprint(nth_octagonal(1000000))<|endoftext|>"}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\n    # Initialize result \n    max_len = 1\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[j] - arr[i] == j - i: \n                max_len = max(max_len, j - i + 1) \n    return max_len \n\n# Driver code \narr = [1, 11, 2, 10, 4, 5, 2, 1] \nn = len(arr) \nprint(max_len_sub(arr, n)) \n<|endoftext|>"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t<|endoftext|>"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\"\"\"\nWrite a python function to find largest number in a list.\n\"\"\"\ndef largest_num(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_2(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_2(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_3(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_3(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_4(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_4(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_5(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_5(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_6(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_6(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_7(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_7(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_8(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_8"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t<|endoftext|>"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t<|endoftext|>"}
{"ID": 428, "source": "MBPP:65", "prompt": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t", "predict": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t<|endoftext|>"}
{"ID": 429, "source": "MBPP:66", "prompt": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t<|endoftext|>"}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn sum(bell_number(i) for i in range(n))\n\nprint(bell_number(5))\n<|endoftext|>"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\t# code here \n\t\tif len(A) == 1:\n\t\t\treturn True\n\t\tif len(A) == 2:\n\t\t\treturn True if A[0] <= A[1] else False\n\t\tif len(A) == 3:\n\t\t\treturn True if A[0] <= A[1] <= A[2] else False\n\t\tif len(A) == 4:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] else False\n\t\tif len(A) == 5:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] else False\n\t\tif len(A) == 6:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] else False\n\t\tif len(A) == 7:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] else False\n\t\tif len(A) == 8:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] else False\n\t\tif len(A) == 9:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] else False\n\t\tif len(A) == 10:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] <= A[9] else False\n\t\tif len(A) == 11:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] <= A[9] <= A["}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t<|endoftext|>"}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t<|endoftext|>"}
{"ID": 434, "source": "MBPP:71", "prompt": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t<|endoftext|>"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t\t# code here \n\t\tfor i in range(1,int(n**0.5)+1): \n\t\t\tif n%i==0: \n\t\t\t\tif (i**2)+(n//i)**2==n: \n\t\t\t\t\treturn True\n\t\treturn False\n\n# Main\nn = int(input())\nif dif_Square(n):\n\tprint(\"true\")\nelse:\n\tprint(\"false\")<|endoftext|>"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t<|endoftext|>"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_same"}
{"ID": 438, "source": "MBPP:75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t<|endoftext|>"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t<|endoftext|>"}
{"ID": 440, "source": "MBPP:77", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t\tsum_even = 0\n\t\tsum_odd = 0\n\t\twhile n > 0: \n\t\t\tr = n % 10\n\t\t\tif r % 2 == 0: \n\t\t\t\tsum_even += r \n\t\t\telse: \n\t\t\t\tsum_odd += r \n\t\t\tn = n // 10\n\t\treturn sum_even - sum_odd\n\nn = int(input(\"Enter a number: \"))\nprint(\"Difference between sum of even and odd digits is\", is_Diff(n))\n<|endoftext|>"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t\tcount = 0\n\t\tfor i in range(1, n+1): \n\t\t\tcount += bin(i).count('1') % 2\n\t\treturn count\n\nprint(count_With_Odd_SetBits(10))\n<|endoftext|>"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s)%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(word_len(\"Hello\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is palindrome or not.\n\"\"\"\ndef palindrome(s): \n\tif s==s[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(palindrome(\"Hello\"))\nprint(palindrome(\"Python\"))\nprint(palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is pangram or not.\n\"\"\"\ndef pangram(s): \n\tif len(set(s.lower()))==26:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(pangram(\"The quick brown fox jumps over the lazy dog\"))\nprint(pangram(\"Python\"))\nprint(pangram(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is anagram or not.\n\"\"\"\ndef anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(anagram(\"Hello\",\"World\"))\nprint(anagram(\"Python\",\"Ptyon\"))\nprint(anagram(\"Hello World\",\"World Hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of palindrome or not.\n\"\"\"\ndef permutation_palindrome(s): \n\tif sorted(s.lower())==sorted(s.lower())[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(permutation_palindrome(\"Hello\"))\nprint(permutation_palindrome(\"Python\"))\nprint(permutation_palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of anagram or not.\n\"\"\"\ndef permutation_anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\n    # Initialize result \n    res = 0\n    # Initialize value of n \n    n = n \n  \n    # Iterate till n becomes 0 \n    while (n): \n  \n        # If n is odd, multiply with previous result \n        if (n & 1): \n            res = (res * (3 * n - 1)) // 2\n  \n        # n must be even now \n        n >>= 1\n  \n        # Multiply with previous result \n        res = res * n \n  \n    return res \n  \n# Driver code \nif __name__ == '__main__': \n    n = 10\n    print(tetrahedral_number(n))\n<|endoftext|>"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t<|endoftext|>"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t\t# initialize an empty string\n\t\tresult = \"\"  \n\t\t# traverse in the string  \n\t\tfor i in strr:  \n\t\t\t# add character to result  \n\t\t\tresult += i  \n\t\t# return result  \n\t\treturn result  \n\n# Driver Code  \nstrr = \"geeksforgeeks\"  \nprint(get_Char(strr))\n<|endoftext|>"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1)) \n\nprint(sequence(10)) \n<|endoftext|>"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t<|endoftext|>"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t<|endoftext|>"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3}\n\n\"\"\"\nWrite a function to merge four dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4}\n\n\"\"\"\nWrite a function to merge five dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5}\n\n\"\"\"\nWrite a function to merge six dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:param dict6: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6}\n\n\"\"\"\nWrite a function to merge seven dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:param dict6: dictionary\n\t\t:param dict7:"}
{"ID": 451, "source": "MBPP:88", "prompt": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t", "predict": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t<|endoftext|>"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t<|endoftext|>"}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t<|endoftext|>"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t<|endoftext|>"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t\n    # Your code here\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n\n# Main\nn = int(input())\nprint(is_undulating(n))\n<|endoftext|>"}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t<|endoftext|>"}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t<|endoftext|>"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t\t# code here\n\t\tmin_len = len(lst)\n\t\tfor i in range(len(lst)):\n\t\t\tfor j in range(i+1,len(lst)):\n\t\t\t\tif len(lst[i:j+1]) < min_len:\n\t\t\t\t\tmin_len = len(lst[i:j+1])\n\t\treturn min_len\n\nif __name__ == '__main__':\n\tlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(Find_Min_Length(lst))\n<|endoftext|>"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t<|endoftext|>"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t<|endoftext|>"}
{"ID": 461, "source": "MBPP:98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t", "predict": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t\treturn sum(numbers) / len(numbers)\n\nprint(multiply_num([1,2,3,4,5]))\nprint(multiply_num([1,2,3,4,5,6,7,8,9,10]))\nprint(multiply_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n<|endoftext|>"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t\treturn bin(n).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its octal equivalent.\n\"\"\"\ndef decimal_to_octal(n): \n\t\treturn oct(n).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hexadecimal(n): \n\t\treturn hex(n).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(n): \n\t\treturn int(n, 2)\n\n\"\"\"\nWrite a function to convert the given octal number to its decimal equivalent.\n\"\"\"\ndef octal_to_decimal(n): \n\t\treturn int(n, 8)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hexadecimal_to_decimal(n): \n\t\treturn int(n, 16)\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hexadecimal(n): \n\t\treturn hex(int(n, 2)).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hexadecimal_to_binary(n): \n\t\treturn bin(int(n, 16)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(n): \n\t\treturn oct(int(n, 2)).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(n): \n\t\treturn bin(int(n, 8)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its Roman Numeral equivalent.\n\"\"\"\ndef decimal_to_roman_numeral(n): \n\t\troman_numeral_map = (('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', "}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t<|endoftext|>"}
{"ID": 464, "source": "MBPP:101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t<|endoftext|>"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t<|endoftext|>"}
{"ID": 466, "source": "MBPP:103", "prompt": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t\n    # Initialize result \n    res = 0\n    # Iterate for every character \n    for i in range(n): \n        for j in range(m): \n            # Check if current cell is  \n            # part of eulerian path \n            if (is_eulerian(i, j, n, m)): \n                res += 1\n    return res\n\n# Driver code \nif __name__ == '__main__': \n    n = 4\n    m = 4\n    print(eulerian_num(n, m)) \n<|endoftext|>"}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t<|endoftext|>"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t\treturn lst.count(True)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\""}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t<|endoftext|>"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t\tcount = 0\n\t\tfor i in range(L,R+1) :\n\t\t\tif(i%16 == 0) :\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Hexadecimal(1,10))\nprint(count_Hexadecimal(1,15))\nprint(count_Hexadecimal(1,20))\nprint(count_Hexadecimal(1,25))\nprint(count_Hexadecimal(1,30))\nprint(count_Hexadecimal(1,35))\nprint(count_Hexadecimal(1,40))\nprint(count_Hexadecimal(1,45))\nprint(count_Hexadecimal(1,50))\nprint(count_Hexadecimal(1,55))\nprint(count_Hexadecimal(1,60))\nprint(count_Hexadecimal(1,65))\nprint(count_Hexadecimal(1,70))\nprint(count_Hexadecimal(1,75))\nprint(count_Hexadecimal(1,80))\nprint(count_Hexadecimal(1,85))\nprint(count_Hexadecimal(1,90))\nprint(count_Hexadecimal(1,95))\nprint(count_Hexadecimal(1,100))\nprint(count_Hexadecimal(1,105))\nprint(count_Hexadecimal(1,110))\nprint(count_Hexadecimal(1,115))\nprint(count_Hexadecimal(1,120))\nprint(count_Hexadecimal(1,125))\nprint(count_Hexadecimal(1,130))\nprint(count_Hexadecimal(1,135))\nprint(count_Hexadecimal(1,140))\nprint(count_Hexadecimal(1,145))\nprint(count_Hexadecimal(1,150))\nprint(count_Hexadecimal(1,155))\nprint(count_Hexadecimal(1,160))\nprint(count_Hexadecimal(1,165))\nprint(count_Hexadecimal(1,170))\nprint(count_Hexadecimal(1,175))\nprint(count_Hexadecimal(1,1"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t<|endoftext|>"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t\t# code here \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tif s[i] == '1':\n\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\ts = input()\n\tn = len(s)\n\tprint(odd_Equivalent(s,n))<|endoftext|>"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t<|endoftext|>"}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t<|endoftext|>"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t\treturn 2*pi*diameter + 2*pi*diameter*height\n\n\"\"\"\nWrite a python function to find the volume of a sphere.\n\"\"\"\ndef volume(radius) : \n\t\treturn 4/3*pi*radius**3\n\n\"\"\"\nWrite a python function to find the surface area of a sphere.\n\"\"\"\ndef surface_area(radius) : \n\t\treturn 4*pi*radius**2\n\n\"\"\"\nWrite a python function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surface_area(diameter,height) : \n\t\treturn 2*pi*diameter*height + 2*pi*diameter**2\n\n\"\"\"\nWrite a python function to find the total volume of a cylinder.\n\"\"\"\ndef total_volume(diameter,height) : \n\t\treturn pi*diameter**2*height\n\n\"\"\"\nWrite a python function to find the number of nodes in a binary tree.\n\"\"\"\ndef number_of_nodes(root) : \n\t\tif root is None : \n\t\t\t\treturn 0\n\t\telse : \n\t\t\t\treturn 1 + number_of_nodes(root.left) + number_of_nodes(root.right)\n\n\"\"\"\nWrite a python function to find the maximum depth of a binary tree.\n\"\"\"\ndef max_depth(root) : \n\t\tif root is None : \n\t\t\t\treturn 0\n\t\telse : \n\t\t\t\treturn 1 + max(max_depth(root.left),max_depth(root.right))\n\n\"\"\"\nWrite a python function to find the maximum depth of a binary tree.\n\"\"\"\ndef is_balanced(root) : \n\t\tif root is None : \n\t\t\t\treturn True\n\t\telse : \n\t\t\t\treturn abs(max_depth(root.left) - max_depth(root.right)) <= 1 and is_balanced(root.left) and is_balanced(root.right)\n\n\"\"\"\nWrite a python function to find the height of a binary tree.\n\"\"\"\ndef height(root) : \n\t\tif root is None : \n\t\t\t\treturn 0\n\t\telse : \n\t\t\t\treturn 1 + max(height(root.left),height(root.right))\n\n\"\"\"\nWrite a python function to find the diameter of a binary tree.\n\"\"\"\ndef diameter(root) : \n\t\tif root"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t<|endoftext|>"}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t<|endoftext|>"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t<|endoftext|>"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t<|endoftext|>"}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t<|endoftext|>"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a string.\n\"\"\"\ndef list_to_string(list): \n\t\treturn''.join(list)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a dictionary.\n\"\"\"\ndef string_to_dictionary(string): \n\t\treturn dict(item.split(':') for item in string.split(','))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a dictionary to a string.\n\"\"\"\ndef dictionary_to_string(dictionary): \n\t\treturn ','.join(f'{key}:{value}' for key, value in dictionary.items())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a set.\n\"\"\"\ndef string_to_set(string): \n\t\treturn set(string.split())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a set to a string.\n\"\"\"\ndef set_to_string(set): \n\t\treturn''.join(set)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a tuple.\n\"\"\"\ndef string_to_tuple(string): \n\t\treturn tuple(string.split())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a tuple to a string.\n\"\"\"\ndef tuple_to_string(tuple): \n\t\treturn''.join(tuple)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a boolean.\n\"\"\"\ndef string_to_boolean(string): \n\t\treturn string.lower() in ['true', 't', 'yes', 'y', '1']\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a boolean"}
{"ID": 482, "source": "MBPP:119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t<|endoftext|>"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t<|endoftext|>"}
{"ID": 484, "source": "MBPP:121", "prompt": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t", "predict": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t<|endoftext|>"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t\n    # Initialize result \n    res = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 5 \n    count = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 7 \n    count1 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 11 \n    count2 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 13 \n    count3 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 17 \n    count4 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 19 \n    count5 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 23 \n    count6 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 29 \n    count7 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 31 \n    count8 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 37 \n    count9 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 41 \n    count10 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 43 \n    count11 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 47 \n    count12 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 53 \n    count13 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 59 \n    count14 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 61 \n    count15 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 67 \n    count16 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 71 \n    count17 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 73 \n    count18 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 79 \n    count19 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 83 \n    count20 = 0 \n  \n    # Initialize count of numbers \n    # that are div"}
{"ID": 486, "source": "MBPP:123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t", "predict": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t<|endoftext|>"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t<|endoftext|>"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\n    # Initialize result \n    max_len = 0\n    count0 = 0\n    count1 = 0\n    for i in range(n): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n        max_len = max(max_len, count0, count1) \n  \n    # Initialize starting and ending indexes \n    start = 0\n    end = 0\n    max_diff = 0\n  \n    # Start from every index and try to extend the subsequence \n    for i in range(n): \n        # If 0 is present at index i, then update count0 \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 -= 1\n        # If count0 becomes more than count1, then update max_len \n        if count0 > count1: \n            max_len = max(max_len, count0) \n  \n        # If max_len becomes more than max_diff, then update max_diff \n        if max_len > max_diff: \n            max_diff = max_len \n            start = i - max_len + 1\n            end = i \n  \n    return start, end, max_diff \n  \n# Driver code \nif __name__ == '__main__': \n    string = \"100101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t<|endoftext|>"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t<|endoftext|>"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t<|endoftext|>"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t<|endoftext|>"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t<|endoftext|>"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t<|endoftext|>"}
{"ID": 496, "source": "MBPP:133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t<|endoftext|>"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t\n    if p%2==0:\n        if arr[n-1]%2==0:\n            return True\n        else:\n            return False\n    else:\n        if arr[n-1]%2==0:\n            return False\n        else:\n            return True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\np = 2\nprint(check_last(arr,n,p))\n<|endoftext|>"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\treturn n*(2*n-1)\n\n\"\"\"\nWrite a function to find the difference between the sum of the squares of the first N natural numbers and the square of the sum.\n\"\"\"\ndef sum_square_diff(n):\n\treturn (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2)*(3*n+2))/24\n\n\"\"\"\nWrite a function that returns the n-th triangular number.\n\"\"\"\ndef triangular_num(n):\n\treturn n*(n+1)/2\n\n\"\"\"\nWrite a function that returns the n-th pentagonal number.\n\"\"\"\ndef pentagonal_num(n):\n\treturn n*(3*n-1)/2\n\n\"\"\"\nWrite a function that returns the n-th hexagonal number.\n\"\"\"\ndef hexagonal_num(n):\n\treturn n*(2*n-1)\n\n\"\"\"\nWrite a function that returns the n-th heptagonal number.\n\"\"\"\ndef heptagonal_num(n):\n\treturn n*(5*n-3)/2\n\n\"\"\"\nWrite a function that returns the n-th octagonal number.\n\"\"\"\ndef octagonal_num(n):\n\treturn n*(3*n-2)\n\n\"\"\"\nWrite a function that returns the n-th nonagonal number.\n\"\"\"\ndef nonagonal_num(n):\n\treturn n*(15*n-6)/2\n\n\"\"\"\nWrite a function that returns the n-th decagonal number.\n\"\"\"\ndef decagonal_num(n):\n\treturn n*(10*n-9)\n\n\"\"\"\nWrite a function that returns the n-th undecagonal number.\n\"\"\"\ndef undecagonal_num(n):\n\treturn n*(10*n-11)\n\n\"\"\"\nWrite a function that returns the n-th dodecagonal number.\n\"\"\"\ndef dodecagonal_num(n):\n\treturn n*(10*n-13)\n\n\"\"\"\nWrite a function that returns the n-th tridecagonal number.\n\"\"\"\ndef tridecagonal_num(n):\n\treturn n*(1"}
{"ID": 499, "source": "MBPP:136", "prompt": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t", "predict": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t<|endoftext|>"}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t<|endoftext|>"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn True\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n%2==0:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2)\n\t\telse:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n\"\"\"\nWrite a python function to check whether the given number is a power of two or not.\n\"\"\"\ndef is_Power_Of_Two(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn True\n\t\tif n%2==0:\n\t\t\treturn is_Power_Of_Two(n//2)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of three or not.\n\"\"\"\ndef is_Power_Of_Three(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==3:\n\t\t\treturn True\n\t\tif n%3==0:\n\t\t\treturn is_Power_Of_Three(n//3)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of four or not.\n\"\"\"\ndef is_Power_Of_Four(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==4:\n\t\t\treturn True\n\t\tif n%4==0:\n\t\t\treturn is_Power_Of_Four(n//4)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of five or not.\n\"\"\"\ndef is_Power_Of_Five(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==5:\n\t\t\treturn True\n\t\tif n%5==0:\n\t\t\treturn is_Power_Of_Five(n//5)\n\t\telse:\n\t\t\treturn False"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t<|endoftext|>"}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t<|endoftext|>"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t<|endoftext|>"}
{"ID": 505, "source": "MBPP:142", "prompt": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t<|endoftext|>"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t\tcount = 0\n\t\tfor i in Input: \n\t\t\tif isinstance(i, list): \n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn"}
{"ID": 507, "source": "MBPP:144", "prompt": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tsum += abs(arr[i]-arr[j])\n\t\treturn sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Sum of all pairs is\", sum_Pairs(arr, n)) \n<|endoftext|>"}
{"ID": 508, "source": "MBPP:145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t\n    # Initialize maximum difference \n    max_diff = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(max_Abs_Diff(arr, n)) \n<|endoftext|>"}
{"ID": 509, "source": "MBPP:146", "prompt": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t<|endoftext|>"}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t\t# Initialize result \n\t\tres = tri[m-1][n-1] \n\n\t\t# Traverse through all rows \n\t\tfor i in range(m-2, -1, -1): \n\t\t\t# Initialize current row sum \n\t\t\tcur_sum = tri[i][n-1] \n\n\t\t\t# Traverse through all elements of current row \n\t\t\tfor j in range(n-2, -1, -1): \n\t\t\t\t# Update current row sum \n\t\t\t\tcur_sum = max(cur_sum, tri[i][j] + tri[i][j+1]) \n\n\t\t\t\t# Update result if needed \n\t\t\t\tres = max(res, cur_sum) \n\n\t\treturn res \n\nif __name__ == '__main__':\n\ttri = [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]] \n\tm = len(tri) \n\tn = len(tri[0]) \n\tprint(max_path_sum(tri, m, n)) \n<|endoftext|>"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t<|endoftext|>"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t\n    # Initialize result \n    max_len = 0\n    res = [] \n  \n    # Pick a starting point \n    for i in range(n): \n        # Initialize current length as 1 \n        curr_len = 1\n        # Initialize starting point of current subsequence \n        start = i \n        # Try different ending points for current subsequence \n        for j in range(i+1, n): \n            if arr[j] - arr[j-1] == 1: \n                curr_len += 1\n                end = j \n            else: \n                break\n        # Update result if needed \n        if curr_len > max_len: \n            max_len = curr_len \n            res = [start, end] \n  \n    return res \n\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t\tif a==b: \n\t\t\treturn True\n\t\telif a==c: \n\t\t\treturn True\n\t\telif b==c: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\ndef is_B_present(a,b,c): \n\tif does_Contain_B(a,b,c): \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef main(): \n\ta = int(input(\"Enter the first number: \")) \n\tb = int(input(\"Enter the second number: \")) \n\tc = int(input(\"Enter the third number: \")) \n\tif is_B_present(a,b,c): \n\t\tprint(\"The number is present in the infinite sequence\") \n\telse: \n\t\tprint(\"The number is not present in the infinite sequence\") \n\nif __name__ == \"__main__\": \n\tmain() \n<|endoftext|>"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t<|endoftext|>"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t<|endoftext|>"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\n    # code goes here \n    return ( -b + math.sqrt(b*b - 4*a*c) ) / (2*a)\n\n# keep this function call here \nprint(parabola_vertex(2, 10, 1))\n<|endoftext|>"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t<|endoftext|>"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t<|endoftext|>"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t<|endoftext|>"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t<|endoftext|>"}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t\n    # Initialize result \n    res = 0\n    # Initialize min_ele \n    min_ele = min(arr) \n  \n    # Traverse through the array \n    for i in range(n): \n        if arr[i]!= min_ele: \n            res += (min_ele - arr[i]) \n            arr[i] = min_ele \n  \n    # Return result \n    return res \n  \n# Driver Code \nif __name__ == '__main__': \n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    n = len(arr) \n    k = 2\n    print(min_Ops(arr, n, k)) \n<|endoftext|>"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t<|endoftext|>"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t\t# code here \n\t\tx = 0\n\t\ty = 0\n\t\twhile (x * a + y * b!= n):\n\t\t\tx += 1\n\t\t\ty = n - x * a\n\t\treturn x, y\n\n# Function to print the solution \ndef printSolution(a, b, n): \n\tx, y = solution(a, b, n) \n\tprint(\"The solution is: \" + str(x) + \", \" + str(y)) \n\n# Driver Code \na = 2\nb = 3\nn = 11\nprintSolution(a, b, n) \n<|endoftext|>"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t<|endoftext|>"}
{"ID": 525, "source": "MBPP:162", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t<|endoftext|>"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t<|endoftext|>"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t\t# Your code goes here \n\t\tsum1=0\n\t\tsum2=0\n\t\tfor i in range(1,num1+1):\n\t\t\tif num1%i==0:\n\t\t\t\tsum1=sum1+i\n\t\tfor i in range(1,num2+1):\n\t\t\tif num2%i==0:\n\t\t\t\tsum2=sum2+i\n\t\tif sum1==sum2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef isPerfectSquare(num): \n\t\t# Your code goes here \n\t\tfor i in range(1,num):\n\t\t\tif i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect cube or not.\n\"\"\"\ndef isPerfectCube(num): \n\t\t# Your code goes here \n\t\tfor i in range(1,num):\n\t\t\tif i*i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect number or not.\n\"\"\"\ndef isPerfect(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num):\n\t\t\tif num%i==0:\n\t\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a triangular number or not.\n\"\"\"\ndef isTriangular(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):\n\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a pentagonal number or not.\n\"\"\"\ndef isPentagonal(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):\n\t\t\tsum=sum+i*(3*i-1)/2\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t\n    # create a dictionary to store the count of characters at same position \n    char_count = {} \n  \n    # traverse the given string \n    for i in range(len(str1)): \n  \n        # if character is not present in dictionary \n        # then add it \n        if str1[i] not in char_count.keys(): \n            char_count[str1[i]] = 1\n        else: \n            # if character is already present in dictionary \n            # then increment its count \n            char_count[str1[i]] += 1\n  \n    # return the dictionary \n    return char_count \n  \n# Driver Code \nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    print(count_char_position(str1))\n<|endoftext|>"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t\tcount = 0\n\t\tfor i in range(N): \n\t\t\tfor j in range(i+1,N): \n\t\t\t\tif (A[i] ^ A[j]) % 2 == 0: \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tN = len(A)\n\tprint(find_even_Pair(A,N))\n<|endoftext|>"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t\treturn 1 if n == 0 else 2**(n - 1).bit_length()\n\nprint(next_Power_Of_2(10))\nprint(next_Power_Of_2(11))\nprint(next_Power_Of_2(12))\nprint(next_Power_Of_2(13))\nprint(next_Power_Of_2(14))\nprint(next_Power_Of_2(15))\nprint(next_Power_Of_2(16))\nprint(next_Power_Of_2(17))\nprint(next_Power_Of_2(18))\nprint(next_Power_Of_2(19))\nprint(next_Power_Of_2(20))\nprint(next_Power_Of_2(21))\nprint(next_Power_Of_2(22))\nprint(next_Power_Of_2(23))\nprint(next_Power_Of_2(24))\nprint(next_Power_Of_2(25))\nprint(next_Power_Of_2(26))\nprint(next_Power_Of_2(27))\nprint(next_Power_Of_2(28))\nprint(next_Power_Of_2(29))\nprint(next_Power_Of_2(30))\nprint(next_Power_Of_2(31))\nprint(next_Power_Of_2(32))\nprint(next_Power_Of_2(33))\nprint(next_Power_Of_2(34))\nprint(next_Power_Of_2(35))\nprint(next_Power_Of_2(36))\nprint(next_Power_Of_2(37))\nprint(next_Power_Of_2(38))\nprint(next_Power_Of_2(39))\nprint(next_Power_Of_2(40))\nprint(next_Power_Of_2(41))\nprint(next_Power_Of_2(42))\nprint(next_Power_Of_2(43))\nprint(next_Power_Of_2(44"}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t\tcount = 0\n\t\tfor i in range(0,len(a)):\n\t\t\tif a[i] == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\na = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\nx = 1\nprint(frequency(a,x))\n<|endoftext|>"}
{"ID": 532, "source": "MBPP:169", "prompt": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t\n    # Initialize values \n    a = 0\n    b = 1\n    c = 0\n    d = 1\n    count = 0\n    while count < n: \n        c = a + b \n        a = b \n        b = c \n        d = d + 2 * a + 1 \n        count += 1\n    return c\n\nprint(get_pell(10))\n<|endoftext|>"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the maximum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef max_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn max(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the minimum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef min_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn min(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the average of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef avg_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])/len(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the median of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef median_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.median(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the mode of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef mode_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.mode(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the standard deviation of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef std_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.stdev(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the variance of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef var_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.variance(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the maximum of the numbers"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t<|endoftext|>"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t<|endoftext|>"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters from a string.\n\"\"\"\ndef remove_nonalpha(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters from a string.\n\"\"\"\ndef remove_nonnum(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters from a string.\n\"\"\"\ndef remove_nonspecial(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and spaces from a string.\n\"\"\"\ndef remove_nonalpha_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and spaces from a string.\n\"\"\"\ndef remove_nonnum_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters and spaces from a string.\n\"\"\"\ndef remove_nonspecial_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and hyphens from a string.\n\"\"\"\ndef remove_splchar_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and hyphens from a string.\n\"\"\"\ndef remove_nonalpha_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and hyphens from a string.\n\"\"\"\ndef remove_nonnum_and_hyphen(text): \n\t\treturn re.sub("}
{"ID": 537, "source": "MBPP:174", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t<|endoftext|>"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t<|endoftext|>"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t<|endoftext|>"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t\n    # Your code here\n    for i in range(L,R+1):\n        if i%2==0:\n            continue\n        else:\n            for j in range(L,R+1):\n                if j%2==0:\n                    continue\n                else:\n                    if i*j%2==0:\n                        continue\n                    else:\n                        if i*j%2==1:\n                            if i*j%i==0:\n                                if i*j%j==0:\n                                    if i*j>=L and i*j<=R:\n                                        return i,j\n<|endoftext|>"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t<|endoftext|>"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(sl"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t\n    # If first string is empty \n    if (len(str1) == 0): \n        return str2 \n  \n    # If second string is empty \n    if (len(str2) == 0): \n        return str1 \n  \n    # If last characters of two strings are same \n    if (str1[len(str1) - 1] == str2[len(str2) - 1]): \n        return common_prefix_util(str1[:-1], str2[:-1]) \n  \n    # If last characters are not same, return \n    # the common prefix of the two strings \n    return str1[:len(str1) - 1] \n  \n# Function to find the longest common prefix \n# in a list of strings \ndef longestCommonPrefix(strs): \n  \n    # If there is only one string \n    if (len(strs) == 1): \n        return strs[0] \n  \n    # Take first two strings and compare them \n    res = common_prefix_util(strs[0], strs[1]) \n  \n    # Iterate over the array from 2nd element \n    for i in range(2, len(strs)): \n  \n        # Compare current string with result \n        # of previous comparison and update \n        # result if needed \n        res = common_prefix_util(res, strs[i]) \n  \n    return res \n  \n# Driver code \nif __name__ == '__main__': \n    strs = [\"flower\", \"flow\", \"flight\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"dog\", \"racecar\", \"car\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\", \"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\", \"c\", \"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\", \"c\", \"c\", \"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n    strs = [\"c\", \"c\", \"c\", \"c\", \"c\", \"c\", \"c\"] \n    print(longestCommonPrefix(strs)) \n  \n   "}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t<|endoftext|>"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t<|endoftext|>"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t<|endoftext|>"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t<|endoftext|>"}
{"ID": 550, "source": "MBPP:187", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t\n    # table[i][j] will be storing the length of LCS of X[0..i-1] \n    # and Y[0..j-1] \n    table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if (i == 0 or j == 0): \n                table[i][j] = 0\n            elif (X[i-1] == Y[j-1]): \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n  \n    # LCS will be last entry in table[][] \n    return table[m][n] \n  \n# Driver program to test above function \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn = len(Y) \nprint(\"Length of LCS is \", longest_common_subsequence(X, Y, m, n)) \n<|endoftext|>"}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t<|endoftext|>"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t\t# Traverse the array \n\t\tfor i in range(n): \n\t\t\t# If a[i] is positive and is not at its correct \n\t\t\t# position \n\t\t\tif arr[i] > 0 and arr[i]!= i + 1 and arr[arr[i] - 1]!= arr[i]: \n\t\t\t\t# Swap a[i] with a[a[i] - 1] \n\t\t\t\tarr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] \n\t\t\t\t# Fix the index of a[i] \n\t\t\t\ti -= 1\n\t\t# Now fix the index of all elements which are not at their \n\t\t# correct position \n\t\tfor i in range(n): \n\t\t\tif arr[i]!= i + 1: \n\t\t\t\treturn i + 1\n\t\treturn n + 1\n\nif __name__ == '__main__':\n\tarr = [1,2,0]\n\tn = len(arr)\n\tprint(first_Missing_Positive(arr,n))<|endoftext|>"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the square\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a rectangle.\n\"\"\"\ndef count_Intgral_Points_Rect(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the rectangle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a circle.\n\"\"\"\ndef count_Intgral_Points_Circle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the circle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a triangle.\n\"\"\"\ndef count_Intgral_Points_Triangle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the triangle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t\tif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname4):\n\t\tif monthname4 == \"April\" or monthname4 == \"June\" or monthname4 == \"September\" or monthname4 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname5):\n\t\tif monthname5 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname6):\n\t\tif monthname6 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname7):\n\t\tif monthname7 == \"January\" or monthname7 == \"March\" or monthname7 == \"May\" or monthname7 == \"July\" or monthname7 == \"August\" or monthname7 == \"October\" or monthname7 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname8):\n\t\tif monthname8 == \"April\" or monthname8 == \"June\" or monthname8 == \"September\" or monthname8 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname9):\n\t\tif monthname9 == \"February\":\n\t\t\treturn True\n\t\telse:"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t\treturn any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\nprint(check_String(\"12345\"))\nprint(check_String(\"123456\"))\nprint(check_String(\"1234567\"))\nprint(check_String(\"12345678\"))\nprint(check_String(\"123456789\"))\nprint(check_String(\"1234567890\"))\nprint(check_String(\"12345678901\"))\nprint(check_String(\"123456789012\"))\nprint(check_String(\"1234567890123\"))\nprint(check_String(\"12345678901234\"))\nprint(check_String(\"123456789012345\"))\nprint(check_String(\"1234567890123456\"))\nprint(check_String(\"12345678901234567\"))\nprint(check_String(\"123456789012345678\"))\nprint(check_String(\"1234567890123456789\"))\nprint(check_String(\"12345678901234567890\"))\nprint(check_String(\"123456789012345678901\"))\nprint(check_String(\"1234567890123456789012\"))\nprint(check_String(\"12345678901234567890123\"))\nprint(check_String(\"123456789012345678901234\"))\nprint(check_String(\"1234567890123456789012345\"))\nprint"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t<|endoftext|>"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t\treturn int(n, 8)\n\nprint(octal_To_Decimal(\"010\"))\nprint(octal_To_Decimal(\"0100\"))\nprint(octal_To_Decimal(\"01000\"))\nprint(octal_To_Decimal(\"010000\"))\nprint(octal_To_Decimal(\"0100000\"))\nprint(octal_To_Decimal(\"01000000\"))\nprint(octal_To_Decimal(\"010000000\"))\nprint(octal_To_Decimal(\"0100000000\"))\nprint(octal_To_Decimal(\"01000000000\"))\nprint(octal_To_Decimal(\"010000000000\"))\nprint(octal_To_Decimal(\"0100000000000\"))\nprint(octal_To_Decimal(\"01000000000000\"))\nprint(octal_To_Decimal(\"010000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t\tlow = 0\n\t\thigh = n-1\n\t\tmid = 0\n\t\twhile low <= high: \n\t\t\tmid = (high + low) // 2\n\t\t\tif arr[mid] == x: \n\t\t\t\tif mid == 0 or arr[mid-1]!= x: \n\t\t\t\t\treturn mid \n\t\t\t\telse: \n\t\t\t\t\thigh = mid - 1\n\t\t\telif arr[mid] > x: \n\t\t\t\thigh = mid - 1\n\t\t\telse: \n\t\t\t\tlow = mid + 1\n\t\treturn -1\n\narr = [1, 2, 2, 2, 3, 4, 7, 8, 8] \nx = 2\nn = len(arr) \nprint(first(arr, x, n)) \n<|endoftext|>"}
{"ID": 559, "source": "MBPP:196", "prompt": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t<|endoftext|>"}
{"ID": 560, "source": "MBPP:197", "prompt": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t\n    # Your code here\n    return (a*b)/2\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = int(input())\n\n    b = int(input())\n\n    result = largest_triangle(a, b)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n<|endoftext|>"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn 2**(n-1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t<|endoftext|>"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count("}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t<|endoftext|>"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t\treturn bin(n1^n2).count('1')\n\nprint(hamming_Distance(10,15))\n<|endoftext|>"}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t\tcount = 0\n\t\tfor i in s : \n\t\t\tif i == c : \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count(\"hello\",\"l\"))\n<|endoftext|>"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t<|endoftext|>"}
{"ID": 569, "source": "MBPP:206", "prompt": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t<|endoftext|>"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t\n    # Initialize result \n    result = 0 \n  \n    # One by one consider every character as starting point of  \n    # current subsequence \n    for i in range(len(str)): \n        curr_len = 1\n  \n        # One by one expand the subsequence while elements remain \n        # same as current character. \n        for j in range(i+1, len(str)): \n            if str[i] == str[j]: \n                curr_len += 1\n            else: \n                break\n  \n        # Update result if required \n        result = max(result, curr_len) \n  \n    return result \n  \n# Driver code \nif __name__ == '__main__': \n    str = \"geeksforgeeks\"\n    print(find_longest_repeating_subseq(str)) \n<|endoftext|>"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t<|endoftext|>"}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t<|endoftext|>"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t<|endoftext|>"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tif (i & (1 << 0)) and (i & (1 << 1)):\n\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tn = int(input())\n\tprint(count_Num(n))<|endoftext|>"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t\treturn sum(i**4 for i in range(1,n+1))\n\nprint(fourth_Power_Sum(10))\n<|endoftext|>"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 577, "source": "MBPP:214", "prompt": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t", "predict": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t<|endoftext|>"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t<|endoftext|>"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\n    # If list2 is empty then list1 is subset of list2 \n    if len(list2) == 0: \n        return True\n\t\t\n    # If list1 is empty then list1 is not a subset of list2 \n    if len(list1) == 0: \n        return False\n\t\t\n    # Compare the first element of both lists \n    if list1[0] == list2[0]: \n        # If first element is same, then compare the remaining elements \n        return check_subset_list(list1[1:], list2[1:]) \n    else: \n        # If first element is not same, then check for subset in the remaining elements \n        return check_subset_list(list1, list2[1:]) \n\n# Driver code \nlist1 = [1, 2, 3, 4, 5] \nlist2 = [1, 2, 3] \nlist3 = [1, 2, 3, 4] \nlist4 = [1, 2, 3, 4, 5, 6] \nlist5 = [1, 2, 3, 4, 5, 6, 7] \nlist6 = [1, 2, 3, 4, 5, 6, 7, 8] \nlist7 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nlist8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nlist9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nlist10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nlist11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nlist12 = [1, 2, 3, 4, 5, 6, "}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\t# Your code goes here\n\t\t# return the first repeated character\n\t\t# if no repeated character is found, return -1\n\t\t# if the string is empty, return -1\n\t\t# if the string has only one character, return -1\n\t\t# if the string has only two characters, return -1\n\t\t# if the string has only three characters, return -1\n\t\t# if the string has only four characters, return -1\n\t\t# if the string has only five characters, return -1\n\t\t# if the string has only six characters, return -1\n\t\t# if the string has only seven characters, return -1\n\t\t# if the string has only eight characters, return -1\n\t\t# if the string has only nine characters, return -1\n\t\t# if the string has only ten characters, return -1\n\t\t# if the string has only eleven characters, return -1\n\t\t# if the string has only twelve characters, return -1\n\t\t# if the string has only thirteen characters, return -1\n\t\t# if the string has only fourteen characters, return -1\n\t\t# if the string has only fifteen characters, return -1\n\t\t# if the string has only sixteen characters, return -1\n\t\t# if the string has only seventeen characters, return -1\n\t\t# if the string has only eighteen characters, return -1\n\t\t# if the string has only nineteen characters, return -1\n\t\t# if the string has only twenty characters, return -1\n\t\t# if the string has only twenty one characters, return -1\n\t\t# if the string has only twenty two characters, return -1\n\t\t# if the string has only twenty three characters, return -1\n\t\t# if the string has only twenty four characters, return -1\n\t\t# if the string has only twenty five characters, return -1\n\t\t# if the string has only twenty six characters, return -1\n\t\t# if the string has only twenty seven characters, return -1\n\t\t# if the string has only twenty eight characters, return -1\n\t\t# if the string has only twenty nine characters, return -1\n\t\t# if the string has only thirty characters, return -1\n\t\t# if the string has only thirty one characters, return -1\n\t"}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t\t# code here\n\t\tif A==B:\n\t\t\treturn 0\n\t\tif A>B:\n\t\t\tA,B=B,A\n\t\tcount=0\n\t\twhile A!=B:\n\t\t\tif A%2==0:\n\t\t\t\tA=A//2\n\t\t\telse:\n\t\t\t\tA=A+1\n\t\t\tcount+=1\n\t\treturn count\n\nif __name__ == '__main__':\n\tA = 10\n\tB = 15\n\tprint(min_Operations(A, B))\n<|endoftext|>"}
{"ID": 582, "source": "MBPP:219", "prompt": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t<|endoftext|>"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t<|endoftext|>"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t<|endoftext|>"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t<|endoftext|>"}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t<|endoftext|>"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t\tcount = 0\n\t\twhile (n): \n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tn = 12\n\tprint(\"The number of set bits in\", n, \"is\", count_Set_Bits(n))\n<|endoftext|>"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t\tif high < low: \n\t\t\treturn -1\n\t\tif high == low: \n\t\t\treturn arr[low] \n\t\tmid = (high + low) // 2\n\t\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\t\treturn arr[mid + 1] \n\t\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\t\treturn arr[mid] \n\t\tif arr[high] > arr[mid]: \n\t\t\treturn find_Min(arr, low, mid - 1) \n\t\treturn find_Min(arr, mid + 1, high) \n\narr = [10, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(\"The minimum element is\", find_Min(arr, 0, n - 1)) \n<|endoftext|>"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t<|endoftext|>"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t\treturn min(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_three_without_conditional(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find minimum of five numbers without using conditional statements and loops.\n\"\"\"\ndef min_of_five_without_conditional(a,b,c,d,e): \n\t\treturn min(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find maximum of five numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d"}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t\t# Your code goes here  \n\t\t# Return True if all the bits are set in the given range  \n\t\t# Return False if any of the bit is set in the given range  \n\t\t# Return False if all the bits are unset in the given range  \n\t\t# Return False if n is not a positive integer  \n\t\t# Return False if l is not a positive integer  \n\t\t# Return False if r is not a positive integer  \n\t\t# Return False if l is greater than r  \n\t\t# Return False if l is greater than n  \n\t\t# Return False if r is greater than n  \n\t\t# Return False if l is less than 0  \n\t\t# Return False if r is less than 0  \n\t\t# Return False if l is greater than 31  \n\t\t# Return False if r is greater than 31  \n\t\t# Return False if l is less than -32  \n\t\t# Return False if r is less than -32  \n\t\t# Return False if l is greater than -1  \n\t\t# Return False if r is greater than -1  \n\t\t# Return False if l is less than -1  \n\t\t# Return False if r is less than -1  \n\t\t# Return False if l is greater than 0  \n\t\t# Return False if r is greater than 0  \n\t\t# Return False if l is greater than 1  \n\t\t# Return False if r is greater than 1  \n\t\t# Return False if l is greater than 2  \n\t\t# Return False if r is greater than 2  \n\t\t# Return False if l is greater than 3  \n\t\t# Return False if r is greater than 3  \n\t\t# Return False if l is greater than 4  \n\t\t# Return False if r is greater than 4  \n\t\t# Return False if l is greater than 5  \n\t\t# Return False if r is greater than 5  \n\t\t# Return False if l is greater than 6  \n\t\t# Return False if r is greater than 6  \n\t\t# Return False if l is greater than 7  \n\t\t# Return False if r is greater than 7  \n\t\t# Return False if l is greater than 8  \n\t\t# Return False if r is greater than 8  \n\t\t# Return False if l is greater than 9  \n\t\t# Return False if r is greater than 9  \n\t\t# Return False if l is greater than 10  \n\t\t# Return False if r is greater than 10  \n\t"}
{"ID": 592, "source": "MBPP:229", "prompt": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t<|endoftext|>"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t<|endoftext|>"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t\n    # Initialize result \n    max_sum = tri[0] + tri[1] + tri[2] \n  \n    # Consider all possible triangles \n    for i in range(n - 1): \n        for j in range(i + 1, n): \n            max_sum = max(max_sum, tri[i] + tri[j] + tri[j + 1]) \n  \n    return max_sum \n  \n# Driver code \nif __name__ == '__main__': \n    n = 3\n    tri = [1, 2, 3, 4, 5, 6, 7] \n    print(max_sum(tri, n)) \n  \n# This code is contributed by <NAME> <|endoftext|>"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t<|endoftext|>"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t<|endoftext|>"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t<|endoftext|>"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t\treturn n | (n >> 1)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n): \n\t\treturn n | (n << 1)\n\n\"\"\"\nWrite a python function to set all bits of a given number except a given position.\n\"\"\"\ndef set_bit_number(n, position): \n\t\treturn n | (1 << position)\n\n\"\"\"\nWrite a python function to clear all bits of a given number except a given position.\n\"\"\"\ndef clear_bit_number(n, position): \n\t\treturn n & ~(1 << position)\n\n\"\"\"\nWrite a python function to clear all bits of a given number.\n\"\"\"\ndef clear_all_bits_number(n): \n\t\treturn n & ~(n)\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n): \n\t\treturn n ^ (n)\n\n\"\"\"\nWrite a python function to count the number of bits of a given number.\n\"\"\"\ndef count_bits_number(n): \n\t\tcount = 0\n\t\twhile n: \n\t\t\tn &= (n - 1)\n\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(n): \n\t\treturn n and not (n & (n - 1))\n\n\"\"\"\nWrite a python function to check whether a given number is a palindrome or not.\n\"\"\"\ndef is_palindrome(n): \n\t\treturn str(n) == str(n)[::-1]\n\n\"\"\"\nWrite a python function to check whether a given number is a Harshad Number or not.\n\"\"\"\ndef is_harshad_number(n): \n\t\treturn n % sum(int(i) for i in str(n)) == 0\n\n\"\"\"\nWrite a python function to print all the numbers from 0 to n-1 that are divisible by 7 and multiple of 5.\n\"\"\"\ndef print_divisible_by_7_and_5(n): \n\t\tfor i in range(n): \n\t\t\tif i % 7 == 0 and i"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t<|endoftext|>"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t<|endoftext|>"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t\tcount = 0\n\t\tfor i in range(len(str)): \n\t\t\tfor j in range(i+1, len(str)+1): \n\t\t\t\tif str[i:j]!= \"\": \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(number_of_substrings(\"abc\"))\nprint(number_of_substrings(\"abcabc\"))\nprint(number_of_substrings(\"abcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t\n    # Initialize result \n    res = 0\n    # Initialize previous element as 1 \n    prev_ele = 1\n    # Loop for each element \n    for i in range(1, n + 1): \n        # Update result \n        res += (m - prev_ele + 1) * prev_ele \n        # Update previous element \n        prev_ele = prev_ele * 2 \n    return res \n\n# Driver code \nm = 10\nn = 3\nprint(get_total_number_of_sequences(m, n)) \n<|endoftext|>"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t<|endoftext|>"}
{"ID": 604, "source": "MBPP:241", "prompt": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t", "predict": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t<|endoftext|>"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t<|endoftext|>"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # create a dictionary with key as first element of tuple and value as count of first element of tuple \n    d = {} \n    for i in lst: \n        if i[0] in d: \n            d[i[0]] += 1\n        else: \n            d[i[0]] = 1\n  \n    # sort the dictionary based on value \n    sorted_d = sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True) \n  \n    # create a list of tuples from the dictionary \n    sorted_tuples = [] \n    for i in sorted_d: \n        sorted_tuples.append((i[0], i[1])) \n  \n    # create a list of tuples from the given list \n    given_tuples = [] \n    for i in lst: \n        given_tuples.append((i[0], i[1])) \n  \n    # create a list of tuples from the sorted list of tuples \n    sorted_list = [] \n    for i in sorted_tuples: \n        for j in given_tuples: \n            if i[0] == j[0]: \n                sorted_list.append(j) \n                break\n  \n    return sorted_list\n\nif __name__ == \"__main__\":\n    lst = [(1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4),"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\t# code here \n\t\tfor i in range(N+1,N+1000):\n\t\t\tif i**0.5 == int(i**0.5):\n\t\t\t\treturn i\n\nif __name__ == '__main__':\n\ttest_cases = int(input())\n\tfor cases in range(test_cases):\n\t\tN = int(input())\n\t\tprint(next_Perfect_Square(N))<|endoftext|>"}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t\n    # Initialize maximum sum and  \n    # index of maximum sum \n    max_sum = arr[0] \n    index = 0\n    for i in range(1, n): \n        if (arr[i] > max_sum): \n            max_sum = arr[i] \n            index = i \n  \n    # Initialize maximum ending  \n    # sum as maximum sum \n    max_end = max_sum \n    for i in range(index, n): \n        max_end = max(max_end + arr[i], arr[i]) \n  \n    return max_end \n  \n# Driver code \narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(max_sum(arr, n)) \n<|endoftext|>"}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t<|endoftext|>"}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t\n    # Create a table to store results of subproblems \n    L = [[0 for x in range(len(str))] for x in range(len(str))] \n  \n    # Fill the table with values for substrings of length 1 \n    for i in range(len(str)): \n        L[i][i] = 1\n  \n    # Fill the table for substrings of length 2. \n    # A loop is used to generate L[i][j] in bottom up manner \n    for cl in range(2, len(str)+1): \n        for i in range(len(str)-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][len(str)-1] \n  \n# Driver program to test above function \nstr = \"forgeeksskeegfor\"\nprint \"Length is\", lps(str) \n<|endoftext|>"}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t<|endoftext|>"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t<|endoftext|>"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t\tcount = 0\n\t\tfor i in tup: \n\t\t\tif i == x: \n\t\t\t\tcount += 1\n\t\treturn count\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(count_X(tup, 1))\nprint(count_X(tup, 2))\nprint(count_X(tup, 3))\nprint(count_X(tup, 4))\nprint(count_X(tup, 5))\nprint(count_X(tup, 6))\nprint(count_X(tup, 7))\nprint(count_X(tup, 8))\nprint(count_X(tup, 9))\nprint(count_X(tup, 10))\n<|endoftext|>"}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t<|endoftext|>"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of polar coordinates\n\t\t\"\"\"\n\t\tpolar_coordinates = []\n\t\tfor number in numbers:\n\t\t\tpolar_coordinates.append(cmath.polar(number))\n\t\treturn polar_coordinates\n\n\"\"\"\nWrite a python function to convert polar coordinates to complex numbers.\n\"\"\"\ndef convert_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of polar coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor number in numbers:\n\t\t\tcomplex_numbers.append(cmath.rect(number[0], number[1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to rectangular coordinates.\n\"\"\"\ndef convert_rect(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of rectangular coordinates\n\t\t\"\"\"\n\t\trectangular_coordinates = []\n\t\tfor number in numbers:\n\t\t\trectangular_coordinates.append(number.real)\n\t\t\trectangular_coordinates.append(number.imag)\n\t\treturn rectangular_coordinates\n\n\"\"\"\nWrite a python function to convert rectangular coordinates to complex numbers.\n\"\"\"\ndef convert_rect_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of rectangular coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor i in range(0, len(numbers), 2):\n\t\t\tcomplex_numbers.append(complex(numbers[i], numbers[i+1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to magnitude and phase.\n\"\"\"\ndef convert_magnitude_phase(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of magnitude and phase\n\t\t\"\"\"\n\t\tmagnitude_phase = []\n\t\tfor number in numbers:\n\t\t\tmagnitude_phase.append(cmath.polar(number)[0])\n\t\t\tmagnitude_phase.append(cmath.polar(number)[1])\n\t\treturn magnitude_phase\n\n\"\"\"\nWrite a python function to convert magnitude and phase to complex numbers.\n\"\"\"\ndef convert_magnitude_phase_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of magnitude and phase\n\t\t:return: list"}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t<|endoftext|>"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t<|endoftext|>"}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t<|endoftext|>"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t<|endoftext|>"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t<|endoftext|>"}
{"ID": 621, "source": "MBPP:258", "prompt": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t<|endoftext|>"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t\n    # Initialize array of primes \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t<|endoftext|>"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t<|endoftext|>"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\n"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t<|endoftext|>"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t<|endoftext|>"}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\treturn (n * (n + 1) * (2 * n + 1)) // 6\n\nprint(square_Sum(10))\n<|endoftext|>"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\n    # Your code here\n    return n*(2*n-1)\n\nprint(find_star_num(10))\n# -\n\n# ### 2. Write a function to find then'th Fibonacci number.\n\n# +\n\"\"\"\nWrite a function to find then'th Fibonacci number.\n\"\"\"\ndef fibonacci(n): \n\t\n    # Your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n# -\n\n# ### 3. Write a function to find then'th triangular number.\n\n# +\n\"\"\"\nWrite a function to find then'th triangular number.\n\"\"\"\ndef triangular(n): \n\t\n    # Your code here\n    return n*(n+1)/2\n\nprint(triangular(10))\n# -\n\n# ### 4. Write a function to find then'th Catalan number.\n\n# +\n\"\"\"\nWrite a function to find then'th Catalan number.\n\"\"\"\ndef catalan(n): \n\t\n    # Your code here\n    return (4**n)/(n+1)/(n+2)/(n+3)\n\nprint(catalan(10))\n# -\n\n# ### 5. Write a function to find then'th Hermite polynomial.\n\n# +\n\"\"\"\nWrite a function to find then'th Hermite polynomial.\n\"\"\"\ndef hermite(n): \n\t\n    # Your code here\n    return 2**n*factorial(n)/(factorial(n-1)**2)\n\nprint(hermite(10))\n# -\n\n# ### 6. Write a function to find then'th Bernoulli number.\n\n# +\n\"\"\"\nWrite a function to find then'th Bernoulli number.\n\"\"\"\ndef bernoulli(n): \n\t\n    # Your code here\n    return (1/2)**n*binomial(2*n,n)/(factorial(n))\n\nprint(bernoulli(10))\n# -\n\n# ### 7. Write a function to"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t<|endoftext|>"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t\tsum=0\n\t\tfor i in range(0,n):\n\t\t\tif(i%2==0):\n\t\t\t\tif(arr[i]%2==0):\n\t\t\t\t\tsum=sum+arr[i]\n\t\treturn sum\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(sum_even_and_even_index(arr,n))\n<|endoftext|>"}
{"ID": 634, "source": "MBPP:271", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\treturn sum(i**5 for i in range(2, n, 2))\n\nprint(even_Power_Sum(10))\nprint(even_Power_Sum(100))\nprint(even_Power_Sum(1000))\nprint(even_Power_Sum(10000))\nprint(even_Power_Sum(100000))\nprint(even_Power_Sum(1000000))\n<|endoftext|>"}
{"ID": 635, "source": "MBPP:272", "prompt": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t", "predict": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t<|endoftext|>"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t\tsum = 0\n\t\tfor i in range(0, n+1, 2): \n\t\t\tsum += binomialCoeff(n, i) \n\t\treturn sum \n\n\"\"\"\nWrite a python function to find sum of odd index binomial coefficients.\n\"\"\"\ndef odd_binomial_Coeff_Sum( n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1, 2): \n\t\t\tsum += binomialCoeff(n, i) \n\t\treturn sum \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\tfor i in range(n-1,-1,-1): \n\t\t\tif a[i] == m: \n\t\t\t\treturn i \n\t\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(a) \nm = 10 \nprint(get_Position(a,n,m)) \n<|endoftext|>"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t<|endoftext|>"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t<|endoftext|>"}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t<|endoftext|>"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\treturn n == sum(int(i) for i in str(n))\n\ndef nth_decagonal(n):\n\tfor i in range(n):\n\t\tif is_num_decagonal(i*10**4 + 1):\n\t\t\treturn i*10**4 + 1\n\nprint(nth_decagonal(1000))<|endoftext|>"}
{"ID": 643, "source": "MBPP:280", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t<|endoftext|>"}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t<|endoftext|>"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t<|endoftext|>"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\t# Your code goes here \n\t\t# return True or False \n\t\t# return True if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return"}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t<|endoftext|>"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t<|endoftext|>"}
{"ID": 649, "source": "MBPP:286", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t\n    # Initialize max_sum as maximum value of int type \n    max_sum = -9*7**9\n    for i in range(k): \n        curr_sum = 0\n        for j in range(n): \n            curr_sum += a[j] \n            max_sum = max(max_sum, curr_sum) \n  \n    return max_sum \n  \n# Driver code \na = [1, 2, 3, 4, 5] \nn = len(a) \nk = 3\nprint(max_sub_array_sum_repeated(a, n, k)) \n<|endoftext|>"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\treturn (n * (n + 1) * (2 * n + 1)) // 6\n\nprint(square_Sum(10))\n<|endoftext|>"}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t<|endoftext|>"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\treturn (N%2)\n\n\"\"\"\nWrite a python function to check whether a given number is a prime number or not.\n\"\"\"\ndef is_Prime(N):\n\tif N==1:\n\t\treturn False\n\tfor i in range(2,N):\n\t\tif N%i==0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to print the first n prime numbers.\n\"\"\"\ndef print_Prime(N):\n\tfor i in range(1,N+1):\n\t\tif is_Prime(i):\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n even numbers.\n\"\"\"\ndef print_Even(N):\n\tfor i in range(2,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n odd numbers.\n\"\"\"\ndef print_Odd(N):\n\tfor i in range(1,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the fibonacci series.\n\"\"\"\ndef print_Fibonacci(N):\n\ta,b=0,1\n\tfor i in range(N):\n\t\tprint(a)\n\t\ta,b=b,a+b\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t<|endoftext|>"}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t\n    # table[i] will be storing the number of solutions for \n    # i posts and k colors \n    table = [0 for i in range(n + 1)] \n  \n    # Base case (If k is 0, then no \n    # solutions exist) \n    table[0] = 1\n  \n    # Pick all post of first color \n    for j in range(1, k + 1): \n        table[j] = j \n  \n    # Fill the table in bottom up manner \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if j - 1 >= 0 and fence[i - 1] == fence[i] and table[j - 1]!= 0: \n                table[j] += table[j - 1] \n  \n    return table[k] \n  \n# Driver code \nif __name__ == \"__main__\": \n    n = 3\n    k = 2\n    fence = [1, 1, 2]\n    print(count_no_of_ways(n, k))\n<|endoftext|>"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t\treturn n//m\n\nprint(find(10,3))\n<|endoftext|>"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t<|endoftext|>"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t<|endoftext|>"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t<|endoftext|>"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t\tinv_count = 0\n\t\tfor i in range(n): \n\t\t\tfor j in range(i+1, n): \n\t\t\t\tif arr[i] > arr[j]: \n\t\t\t\t\tinv_count += 1\n\t\treturn inv_count\n\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tn = len(arr)\n\tprint(\"Number of inversions are:\", get_Inv_Count(arr, n))\n<|endoftext|>"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t<|endoftext|>"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t<|endoftext|>"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t<|endoftext|>"}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\n    # Initialize count of binary sequences \n    count = 0\n    # Initialize sum of first n bits \n    sum1 = 0\n    # Initialize sum of last n bits \n    sum2 = 0\n    # Initialize current bit \n    bit = 1\n    # Loop to generate binary sequences \n    while (bit <= n): \n        # Update sum of first n bits \n        sum1 = (sum1 << 1) + bit\n        # Update sum of last n bits \n        sum2 = (sum2 << 1) + 1\n        # Check if sum of first n bits and sum of last n bits \n        # are equal \n        if (sum1 == sum2): \n            # Increment count \n            count += 1\n        # Update current bit \n        bit += 1\n    return count\n\n# Driver code \nn = 2\nprint(count_binary_seq(n)) \n<|endoftext|>"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t<|endoftext|>"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t\t# Your code goes here \n\t\t# Return the most significant bit number which is also a set bit. \n\t\t# If no such bit exists, return -1. \n\t\t# Input format : \n\t\t# Integer N \n\t\t# Output Format : \n\t\t# Integer \n\t\t# Constraints : \n\t\t# 0 <= N <= 10^9 \n\t\t# Sample Input 1 : \n\t\t# 13 \n\t\t# Sample Output 1 : \n\t\t# 2 \n\t\t# Explanation for Sample Input 1 : \n\t\t# 13 = 00000000000000000000000000001101 \n\t\t# 13 & 12 = 00000000000000000000000000000100 \n\t\t# 13 & 11 = 00000000000000000000000000000011 \n\t\t# 13 & 10 = 00000000000000000000000000000010 \n\t\t# 13 & 9 = 00000000000000000000000000000001 \n\t\t# 13 & 8 = 00000000000000000000000000000000 \n\t\t# 13 & 7 = 00000000000000000000000000000000 \n\t\t# 13 & 6 = 00000000000000000000000000000000 \n\t\t# 13 & 5 = 00000000000000000000000000000000 \n\t\t# 13 & 4 = 00"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t\t# code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\n#Taking Input Using Fast I/O\ndef takeInput() :\n    n = int(stdin.readline().strip())\n    if n == 0 :\n        return list(), 0\n\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    return a, n\n\n\n#to print the array/list\ndef printList(a, n) : \n    for i in range(n) :\n        print(a[i], end = \" \")\n    print()\n\n\n#main\nt = int(stdin.readline().strip())\n\nwhile t > 0 :\n\n    a, n = takeInput()\n    print(solve(a,n))\n\n    t -= 1\n<|endoftext|>"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t\tif index < 0 or index >= len(arr) :  \n\t\t\treturn -1  \n\t\tif ranges == 1 :  \n\t\t\treturn arr[index]  \n\t\tif ranges == 2 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations]  \n\t\tif ranges == 3 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations] if index < 2 * rotations else arr[index - 2 * rotations]  \n\t\tif ranges == 4 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations] if index < 2 * rotations else arr[index - 2 * rotations] if index < 3 * rotations else arr[index - 3 * rotations]  \n\t\tif ranges == 5 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations] if index < 2 * rotations else arr[index - 2 * rotations] if index < 3 * rotations else arr[index - 3 * rotations] if index < 4 * rotations else arr[index - 4 * rotations]  \n\t\tif ranges == 6 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations] if index < 2 * rotations else arr[index - 2 * rotations] if index < 3 * rotations else arr[index - 3 * rotations] if index < 4 * rotations else arr[index - 4 * rotations] if index < 5 * rotations else arr[index - 5 * rotations]  \n\t\tif ranges == 7 :  \n\t\t\treturn arr[index] if index < rotations else arr[index - rotations] if index < 2 * rotations else arr[index - 2 * rotations] if index < 3 * rotations else arr[index - 3 * rotations] if index < 4 * rotations else arr[index - 4 * rotations] if index < 5 * rotations else arr[index - 5 * rotations] if index < 6 * rotations else arr[index - 6 * rotations]  \n\t\tif ranges == 8 :  \n\t\t\treturn arr[index] if"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t<|endoftext|>"}
{"ID": 669, "source": "MBPP:306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t<|endoftext|>"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t<|endoftext|>"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t<|endoftext|>"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\tif a>b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(maximum(10,20))\nprint(maximum(20,10))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum(a,b,c):   \n\t\tif a>b and a>c:\n\t\t\treturn a\n\t\telif b>a and b>c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\nprint(maximum(10,20,30))\nprint(maximum(20,10,30))\nprint(maximum(20,30,10))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum(a,b,c,d):   \n\t\tif a>b and a>c and a>d:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d:\n\t\t\treturn b\n\t\telif c>a and c>b and c>d:\n\t\t\treturn c\n\t\telse:\n\t\t\treturn d\n\nprint(maximum(10,20,30,40))\nprint(maximum(20,10,30,40))\nprint(maximum(20,30,10,40))\nprint(maximum(20,30,40,10))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum(a,b,c,d,e):   \n\t\tif a>b and a>c and a>d and a>e:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d and b>e:\n\t\t\treturn b\n\t\telif c>a and c>b and c>d and c>e:\n\t\t\treturn c\n\t\telif d>a and d>b and d>c and d>e:\n\t\t\treturn d\n\t\telse:\n\t\t\treturn e\n\nprint(maximum(10,20,30,40,50))\nprint(maximum(20,10,30,40,50))\nprint(maximum(20,30,10,40,50))\nprint"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t<|endoftext|>"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t<|endoftext|>"}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t<|endoftext|>"}
{"ID": 677, "source": "MBPP:314", "prompt": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t", "predict": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\n\n\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\t# code here \n\t\tstr = str.split()\n\t\tmax_len = 0\n\t\tfor i in str:\n\t\t\tif len(i) % 2 == 0 and len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nif __name__ == '__main__':\n\tstr = \"Hello World\"\n\tprint(find_Max_Len_Even(str))<|endoftext|>"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t<|endoftext|>"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t<|endoftext|>"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t\treturn (s*(s+1)*(s+2))/6\n\n\"\"\"\nWrite a python function to find the maximum area of a cuboid with given length, width and height.\n\"\"\"\ndef max_area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the maximum perimeter of a cuboid with given length, width and height.\n\"\"\"\ndef max_perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal sum of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal difference of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the volume of a cuboid with length, width and height.\n\"\"\"\ndef volume (l, w, h): \n\t\treturn l*w*h\n\n\"\"\"\nWrite a python function to find the area of a cuboid with length, width and height.\n\"\"\"\ndef area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the perimeter of a cuboid with length, width and height.\n\"\"\"\ndef perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal sum of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal difference of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the surface area of a cuboid with length, width and height.\n\"\"\"\ndef surface"}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t<|endoftext|>"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t<|endoftext|>"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t\n    # Initialize result \n    demlo = 0\n  \n    # Initialize current number \n    num = s \n  \n    # Initialize previous number \n    prev_num = 0\n  \n    # Loop until current number is 0 \n    while (num!= 0): \n  \n        # Find remainder \n        rem = num % 10\n  \n        # Update result \n        demlo = demlo * 10 + rem \n  \n        # Update current number \n        num = num // 10 \n  \n        # Update previous number \n        prev_num = prev_num * 10 + rem \n  \n    # Return result \n    return demlo \n  \n# Driver code \nif __name__ == '__main__': \n    s = 123456789\n    print(find_demlo(s)) \n<|endoftext|>"}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t<|endoftext|>"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t<|endoftext|>"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t<|endoftext|>"}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t<|endoftext|>"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t<|endoftext|>"}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t<|endoftext|>"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t<|endoftext|>"}
{"ID": 692, "source": "MBPP:329", "prompt": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t<|endoftext|>"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t<|endoftext|>"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t\tcount = 0\n\t\twhile n: \n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tn = 10\n\tprint(count_unset_bits(n))<|endoftext|>"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t<|endoftext|>"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t\tif a+b>c and b+c>a and a+c>b:  \n\t\t\treturn True  \n\t\telse:  \n\t\t\treturn False\n\na=int(input(\"Enter the value of side 1:\"))\nb=int(input(\"Enter the value of side 2:\"))\nc=int(input(\"Enter the value of side 3:\"))\n\nif check_Validity(a,b,c):\n\tprint(\"The triangle is valid\")\nelse:\n\tprint(\"The triangle is not valid\")\n<|endoftext|>"}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t<|endoftext|>"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t<|endoftext|>"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t<|endoftext|>"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tcount = 0\n\t\tfor i in range(len(s)): \n\t\t\tif i == 0: \n\t\t\t\tif s[i] == s[len(s)-1]: \n\t\t\t\t\tcount += 1\n\t\t\telif i == len(s)-1: \n\t\t\t\tif s[i] == s[0]: \n\t\t\t\t\tcount += 1\n\t\t\telse: \n\t\t\t\tif s[i] == s[i-1] and s[i] == s[i+1]: \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\ts = \"abcda\"\n\tprint(count_Substring_With_Equal_Ends(s))<|endoftext|>"}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t\t\"\"\"\n\t\t:param x: int\n\t\t:param y: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif x > y:\n\t\t\treturn -1\n\t\tif x == y:\n\t\t\treturn x\n\t\tif x == 1:\n\t\t\treturn 1\n\t\tif y == 1:\n\t\t\treturn 1\n\t\tif x == 2:\n\t\t\treturn 2\n\t\tif y == 2:\n\t\t\treturn 2\n\t\tif x == 3:\n\t\t\treturn 3\n\t\tif y == 3:\n\t\t\treturn 3\n\t\tif x == 4:\n\t\t\treturn 2\n\t\tif y == 4:\n\t\t\treturn 2\n\t\tif x == 5:\n\t\t\treturn 5\n\t\tif y == 5:\n\t\t\treturn 5\n\t\tif x == 6:\n\t\t\treturn 3\n\t\tif y == 6:\n\t\t\treturn 3\n\t\tif x == 7:\n\t\t\treturn 7\n\t\tif y == 7:\n\t\t\treturn 7\n\t\tif x == 8:\n\t\t\treturn 2\n\t\tif y == 8:\n\t\t\treturn 2\n\t\tif x == 9:\n\t\t\treturn 3\n\t\tif y == 9:\n\t\t\treturn 3\n\t\tif x == 10:\n\t\t\treturn 2\n\t\tif y == 10:\n\t\t\treturn 2\n\t\tif x == 11:\n\t\t\treturn 11\n\t\tif y == 11:\n\t\t\treturn 11\n\t\tif x == 12:\n\t\t\treturn 2\n\t\tif y == 12:\n\t\t\treturn 2\n\t\tif x == 13:\n\t\t\treturn 13\n\t\tif y == 13:\n\t\t\treturn 13\n\t\tif x == 14:\n\t\t\treturn 2\n\t\tif y == 14:\n\t\t\treturn 2\n\t\tif x == 15:\n\t\t\treturn 3\n\t\tif y == 15:\n\t\t\treturn 3\n\t\tif x == 16:\n\t\t\treturn 2\n\t\tif y == 16:\n\t\t\treturn 2\n\t\tif x == 17:\n\t\t\treturn 17\n\t\tif y == 17:\n\t\t\treturn 17"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t<|endoftext|>"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t<|endoftext|>"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t<|endoftext|>"}
{"ID": 706, "source": "MBPP:343", "prompt": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t", "predict": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t<|endoftext|>"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t\tcount = 0\n\t\tfor i in range(n,m+1): \n\t\t\tif (is_Odd_Square(i)): \n\t\t\t\tcount += 1\n\t\treturn count\n\ndef is_Odd_Square(n): \n\tfor i in range(1,int(n**0.5)+1): \n\t\tif (n%i == 0): \n\t\t\tif (i%2 == 1): \n\t\t\t\treturn True\n\treturn False\n\nprint(count_Odd_Squares(1,100))\n<|endoftext|>"}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t<|endoftext|>"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif k == 1: \n\t\t\treturn n\n\t\treturn zigzag(n-1, k-1) + zigzag(n-1, k) \n\ndef main():\n\tn = 4\n\tk = 2\n\tprint(zigzag(n, k))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\treturn m*n\n\nprint(count_Squares(3,4))\n\n\"\"\"\nWrite a python function to check whether a number is a prime number or not.\n\"\"\"\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(is_prime(11))\n\n\"\"\"\nWrite a python function to print the even numbers from a given list.\n\"\"\"\ndef print_even(l):\n\tfor i in l:\n\t\tif i%2 == 0:\n\t\t\tprint(i)\n\nprint_even([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the odd numbers from a given list.\n\"\"\"\ndef print_odd(l):\n\tfor i in l:\n\t\tif i%2!= 0:\n\t\t\tprint(i)\n\nprint_odd([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the prime numbers from a given list.\n\"\"\"\ndef print_prime(l):\n\tfor i in l:\n\t\tif is_prime(i):\n\t\t\tprint(i)\n\nprint_prime([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 and 7 from a given list.\n\"\"\"\ndef print_divisible(l):\n\tfor i in l:\n\t\tif i%5 == 0 and i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 or 7 from a given list.\n\"\"\"\ndef print_divisible_or(l):\n\tfor i in l:\n\t\tif i%5 == 0 or i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible_or([1,2,3,4,5,6,7,8,"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t\n    # Initialize result \n    res = 0 \n  \n    # Consider all subarrays of size M \n    for i in range(M): \n  \n        # Initialize sum of elements \n        # in subarray \n        sum = 0\n  \n        # Initialize count of subarrays \n        count = 0\n  \n        # Traverse through all elements \n        # of array \n        for j in range(len(arr)): \n  \n            # Add current element to sum \n            sum += arr[j] \n  \n            # If sum becomes 0, then \n            # subarray count increases \n            if sum == 0: \n                count += 1\n  \n        # Update result \n        res += count \n  \n    return res \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nM = 3\nprint(find_ways(M)) \n<|endoftext|>"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t<|endoftext|>"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\t# code here\n\t\tif len(s) == 1 : \n\t\t\treturn s\n\t\telse : \n\t\t\treturn minimum_Length(s[1:])\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = minimum_Length(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n<|endoftext|>"}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t\t# Your code goes here \n\t\t# return the first element \n\t\t# if found \n\t\t# return -1 \n\t\t# if not found \n\t\t# return -1 \n\t\tfor i in range(n): \n\t\t\tif arr[i] == k: \n\t\t\t\treturn i \n\t\treturn -1\n\n# Driver code \narr = [1, 5, 3, 5, 2, 3, 6, 6] \nn = len(arr) \nk = 3\nprint(first_Element(arr, n, k)) \n<|endoftext|>"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t<|endoftext|>"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t<|endoftext|>"}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t<|endoftext|>"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t\treturn 2*radius\n\n\"\"\"\nWrite a python function to count the number of squares in a circle of radius r.\n\"\"\"\ndef count_Squares(radius):  \n\t\treturn radius\n\n\"\"\"\nWrite a python function to count the number of pentagons in a circle of radius r.\n\"\"\"\ndef count_Pentagons(radius):  \n\t\treturn 5*radius\n\n\"\"\"\nWrite a python function to count the number of hexagons in a circle of radius r.\n\"\"\"\ndef count_Hexagons(radius):  \n\t\treturn 6*radius\n\n\"\"\"\nWrite a python function to count the number of heptagons in a circle of radius r.\n\"\"\"\ndef count_Heptagons(radius):  \n\t\treturn 7*radius\n\n\"\"\"\nWrite a python function to count the number of octagons in a circle of radius r.\n\"\"\"\ndef count_Octagons(radius):  \n\t\treturn 8*radius\n\n\"\"\"\nWrite a python function to count the number of nonagons in a circle of radius r.\n\"\"\"\ndef count_Nonagons(radius):  \n\t\treturn 9*radius\n\n\"\"\"\nWrite a python function to count the number of decagons in a circle of radius r.\n\"\"\"\ndef count_Decagons(radius):  \n\t\treturn 10*radius\n\n\"\"\"\nWrite a python function to count the number of undecagons in a circle of radius r.\n\"\"\"\ndef count_Undecagons(radius):  \n\t\treturn 11*radius\n\n\"\"\"\nWrite a python function to count the number of duodecagons in a circle of radius r.\n\"\"\"\ndef count_Duodecagons(radius):  \n\t\treturn 12*radius\n\n\"\"\"\nWrite a python function to count the number of tredecagons in a circle of radius r.\n\"\"\"\ndef count_Tredecagons(radius):  \n\t\treturn 13*radius\n\n\"\"\"\nWrite a python function to count the number of quattuordecagons in a circle of radius r.\n\"\"\"\ndef count_Quattuordecagons(radius):  \n\t\treturn 14*radius\n\n\"\"\"\nWrite a python function to count the number of quindecagons in a circle of radius r.\n"}
{"ID": 719, "source": "MBPP:356", "prompt": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t", "predict": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t<|endoftext|>"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t<|endoftext|>"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t<|endoftext|>"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (b**2-4*a*c)>0: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is prime or not.\n\"\"\"\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number is a palindrome or not.\n\"\"\"\ndef is_palindrome(n):\n\tif n == 0:\n\t\treturn True\n\tif n < 0:\n\t\treturn False\n\tif n % 10 == 0:\n\t\treturn False\n\trev = 0\n\twhile n > rev:\n\t\trev = rev * 10 + n % 10\n\t\tn = n // 10\n\treturn n == rev or n == rev // 10\n\n\"\"\"\nWrite a python function to check whether the given number is a Armstrong number or not.\n\"\"\"\ndef is_armstrong(n):\n\tif n == 0:\n\t\treturn True\n\tif n < 0:\n\t\treturn False\n\tsum = 0\n\ttemp = n\n\twhile temp > 0:\n\t\tr = temp % 10\n\t\tsum += r ** 3\n\t\ttemp = temp // 10\n\tif sum == n:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a Perfect number or not.\n\"\"\"\ndef is_perfect(n):\n\tif n == 0:\n\t\treturn False\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\tif sum == n:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a Prime Factors of a given number or not.\n\"\"\"\ndef is_prime_factor(n, k):\n\tif n == 0:\n\t\treturn False\n\tif n < 0:\n\t\treturn False\n\tif k == 0:\n\t\treturn False"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t\n    # Initialize result \n    res = 0\n    # Initialize current value \n    curr_val = 0\n    # Initialize previous value \n    prev_val = 1\n    # Loop till n \n    for i in range(1, n + 1): \n        # Update current and previous value \n        curr_val, prev_val = curr_val + prev_val, curr_val \n        # Update result \n        res = res + curr_val \n  \n    return res \n  \n# Driver code \nn = 5\nprint(get_carol(n)) \n<|endoftext|>"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t<|endoftext|>"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t<|endoftext|>"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t<|endoftext|>"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t\n    # Initialize result \n    res = 0\n    # Initialize count of 0s \n    count0 = 0\n    # Initialize count of 1s \n    count1 = 0\n    # Traverse the given string \n    for i in range(len(str)): \n        # If current character is 0 \n        if str[i] == '0': \n            # Increment count of 0s \n            count0 += 1\n        # If current character is 1 \n        else: \n            # Increment count of 1s \n            count1 += 1\n        # If count of 0s is not equal to count of 1s \n        if count0!= count1: \n            # Increment result \n            res += 1\n    # Return result \n    return res\n\n# Driver Code \nif __name__ == '__main__': \n    str = \"110000001\"\n    print(min_flip_to_make_string_alternate(str))\n<|endoftext|>"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t<|endoftext|>"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t<|endoftext|>"}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\n    # Base Case \n    if root is None: \n        return 0 \n  \n    # Get the depth of left and right subtrees \n    lDepth = is_tree_balanced(root.left) \n    if lDepth == -1: \n        return -1\n    rDepth = is_tree_balanced(root.right) \n    if rDepth == -1: \n        return -1\n  \n    # Check if the depth of two subtrees \n    # is differ by more than 1 \n    if abs(lDepth - rDepth) > 1: \n        return -1\n  \n    # Return the max depth of left and  \n    # right subtrees plus 1 \n    return max(lDepth, rDepth) + 1\n\n# Driver Code \nif __name__ == '__main__': \n    root = Node(1) \n    root.left = Node(2) \n    root.right = Node(3) \n    root.left.left = Node(4) \n    root.left.right = Node(5) \n    root.right.left = Node(6) \n    root.right.right = Node(7) \n    if is_tree_balanced(root) == 1: \n        print(\"Balanced\") \n    else: \n        print(\"Not Balanced\") \n<|endoftext|>"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t<|endoftext|>"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t<|endoftext|>"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t<|endoftext|>"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t<|endoftext|>"}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t<|endoftext|>"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t<|endoftext|>"}
{"ID": 737, "source": "MBPP:374", "prompt": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t", "predict": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t<|endoftext|>"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t<|endoftext|>"}
{"ID": 739, "source": "MBPP:376", "prompt": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t<|endoftext|>"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t\treturn s.replace(c,'')\n\nprint(remove_Char('Hello World!','l'))\n<|endoftext|>"}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t<|endoftext|>"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t<|endoftext|>"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_2(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_3(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_4(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_5(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_6(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_7(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_8(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_9(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_10(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_11(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\""}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t<|endoftext|>"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t<|endoftext|>"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t<|endoftext|>"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t\t# code here \n\t\t# Your code goes here \n\t\t# initialize min_val and min_count \n\t\tmin_val = arr[0] \n\t\tmin_count = 1\n\t\tfor i in range(1, n): \n\t\t\tif arr[i] < min_val: \n\t\t\t\tmin_val = arr[i] \n\t\t\t\tmin_count = 1\n\t\t\telif arr[i] == min_val: \n\t\t\t\tmin_count += 1\n\t\treturn min_count\n\nif __name__ == '__main__':\n\tn = int(input())\n\tarr = list(map(int,input().split()))\n\tprint(frequency_Of_Smallest(n,arr))<|endoftext|>"}
{"ID": 748, "source": "MBPP:385", "prompt": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t", "predict": "\"\"\"\nWrite a function to find then'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t<|endoftext|>"}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t<|endoftext|>"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t\tif N%2==0: \n\t\t\treturn \"Even\"\n\t\telse: \n\t\t\treturn \"Odd\"\n\nprint(even_or_odd(10))\nprint(even_or_odd(11))\nprint(even_or_odd(12))\nprint(even_or_odd(13))\nprint(even_or_odd(14))\nprint(even_or_odd(15))\nprint(even_or_odd(16))\nprint(even_or_odd(17))\nprint(even_or_odd(18))\nprint(even_or_odd(19))\nprint(even_or_odd(20))\nprint(even_or_odd(21))\nprint(even_or_odd(22))\nprint(even_or_odd(23))\nprint(even_or_odd(24))\nprint(even_or_odd(25))\nprint(even_or_odd(26))\nprint(even_or_odd(27))\nprint(even_or_odd(28))\nprint(even_or_odd(29))\nprint(even_or_odd(30))\nprint(even_or_odd(31))\nprint(even_or_odd(32))\nprint(even_or_odd(33))\nprint(even_or_odd(34))\nprint(even_or_odd(35))\nprint(even_or_odd(36))\nprint(even_or_odd(37))\nprint(even_or_odd(38))\nprint(even_or_odd(39))\nprint(even_or_odd(40))\nprint(even_or_odd(41))\nprint(even_or_odd(42))\nprint(even_or_odd(43))\nprint(even_or_odd(44))\nprint(even_or_odd(45))\nprint(even_or_odd(46))\nprint(even_or_odd(47))\nprint(even_or_odd(48))\nprint(even_or_odd(49))\nprint(even_or_"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn 2**(n-1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4"}
{"ID": 752, "source": "MBPP:389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t\tif n == 0: \n\t\t\treturn 2\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn find_lucas(n - 1) + find_lucas(n - 2) \n\nprint(find_lucas(10))\n<|endoftext|>"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t<|endoftext|>"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t<|endoftext|>"}
{"ID": 755, "source": "MBPP:392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t<|endoftext|>"}
{"ID": 756, "source": "MBPP:393", "prompt": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t<|endoftext|>"}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t<|endoftext|>"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t<|endoftext|>"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t\n    # Your code here\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n\n# Main\nstring = input()\nans = check_char(string)\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n<|endoftext|>"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t<|endoftext|>"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t<|endoftext|>"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t<|endoftext|>"}
{"ID": 764, "source": "MBPP:401", "prompt": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\treturn (fact(n) % p * fact(r) % p * fact(n-r) % p) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in logarithmic time.\n\"\"\"\ndef ncr_modp_log(n, r, p): \n\t\treturn (fact_log(n, p) + fact_log(r, p) + fact_log(n-r, p) - fact_log(n-r-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time.\n\"\"\"\ndef ncr_modp_linear(n, r, p): \n\t\treturn (fact_linear(n, p) * fact_linear(r, p) * fact_linear(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix(n, r, p): \n\t\treturn (fact_matrix(n, p) * fact_matrix(r, p) * fact_matrix(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fast(n, r, p): \n\t\treturn (fact_matrix_fast(n, p) * fact_matrix_fast(r, p) * fact_matrix_fast(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest(n, r, p): \n\t\treturn (fact_matrix_fastest(n, p) * fact_matrix_fastest(r, p) * fact_matrix_fastest(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest_2(n, r, p): \n\t\treturn (fact_matrix_fastest_2(n, p) * fact_matrix_fastest_2(r, p"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t<|endoftext|>"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\tif a<b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(minimum(10,20))\nprint(minimum(20,10))\nprint(minimum(10,10))\n<|endoftext|>"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t\tfor i in range(len(tuple1)): \n\t\t\tif (tuplex == tuple1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a list.\n\"\"\"\ndef check_listex(listex,list1): \n\t\tfor i in range(len(list1)): \n\t\t\tif (listex == list1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a dictionary.\n\"\"\"\ndef check_dictex(dictex,dict1): \n\t\tfor i in range(len(dict1)): \n\t\t\tif (dictex == dict1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a set.\n\"\"\"\ndef check_setex(setex,set1): \n\t\tfor i in range(len(set1)): \n\t\t\tif (setex == set1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint("}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t<|endoftext|>"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t<|endoftext|>"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t<|endoftext|>"}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t<|endoftext|>"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t<|endoftext|>"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t<|endoftext|>"}
{"ID": 776, "source": "MBPP:413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t<|endoftext|>"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t\tfor i in list1:  \n\t\t\tif i in list2:  \n\t\t\t\treturn True  \n\t\treturn False  \n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t\t# Initialize maximum and minimum values \n\t\tmax_val = arr[0] \n\t\tmin_val = arr[0] \n\t\tmax_prod = arr[0] \n\n\t\t# Traverse through the array \n\t\tfor i in range(1, len(arr)): \n\t\t\t# Update max_val if the current element is \n\t\t\t# greater than max_val \n\t\t\tif arr[i] > max_val: \n\t\t\t\tmax_val = arr[i] \n\n\t\t\t# Update min_val if the current element is \n\t\t\t# smaller than min_val \n\t\t\tif arr[i] < min_val: \n\t\t\t\tmin_val = arr[i] \n\n\t\t\t# Update max_prod if the current element is \n\t\t\t# greater than max_val and smaller than min_val \n\t\t\tif (max_val > min_val and arr[i] < max_prod): \n\t\t\t\tmax_prod = arr[i] \n\n\t\treturn max_prod \n\n# Driver code \narr = [10, 3, 5, 6, 2] \nprint(max_Product(arr)) \n<|endoftext|>"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\tif n < 3: \n\t\t\treturn n \n\t\telse: \n\t\t\treturn max(n, n % 10 + breakSum(n // 10)) \n\nprint(breakSum(123456789)) \n<|endoftext|>"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t\n    # Your code here\n    # return a list of tuples\n    # each tuple contains the common first element and the list of all the elements that follow it\n    # if the list contains only one element, the tuple should contain that element as the second element\n    # if the list is empty, return an empty list\n    # if the list contains only one element, return a list with one tuple\n    # if the list contains two elements, return a list with two tuples\n    # if the list contains three elements, return a list with three tuples\n    # if the list contains four elements, return a list with four tuples\n    # if the list contains five elements, return a list with five tuples\n    # if the list contains six elements, return a list with six tuples\n    # if the list contains seven elements, return a list with seven tuples\n    # if the list contains eight elements, return a list with eight tuples\n    # if the list contains nine elements, return a list with nine tuples\n    # if the list contains ten elements, return a list with ten tuples\n    # if the list contains eleven elements, return a list with eleven tuples\n    # if the list contains twelve elements, return a list with twelve tuples\n    # if the list contains thirteen elements, return a list with thirteen tuples\n    # if the list contains fourteen elements, return a list with fourteen tuples\n    # if the list contains fifteen elements, return a list with fifteen tuples\n    # if the list contains sixteen elements, return a list with sixteen tuples\n    # if the list contains seventeen elements, return a list with seventeen tuples\n    # if the list contains eighteen elements, return a list with eighteen tuples\n    # if the list contains nineteen elements, return a list with nineteen tuples\n    # if the list contains twenty elements, return a list with twenty tuples\n    # if the list contains twenty-one elements, return a list with twenty-one tuples\n    # if the list contains twenty-two elements, return a list with twenty-two tuples\n    # if the list contains twenty-three elements, return a list with twenty-three tuples\n    # if the list contains twenty-four elements, return a list with twenty-four tuples\n    # if the list contains twenty-five elements, return a list with twenty-five tuples\n    # if the list contains twenty-six elements"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = 0\n\t\tmax_lst = []\n\t\tfor i in range(len(lst)):\n\t\t\tif len(lst[i]) > max_len:\n\t\t\t\tmax_len = len(lst[i])\n\t\t\t\tmax_lst = lst[i]\n\t\treturn max_lst\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS(lst1, lst2, lst3):\n\tlst1 = set(lst1)\n\tlst2 = set(lst2)\n\tlst3 = set(lst3)\n\tlst1.intersection_update(lst2)\n\tlst1.intersection_update(lst3)\n\treturn list(lst1)\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS_DP(lst1, lst2, lst3):\n\tm = len(lst1)\n\tn = len(lst2)\n\tp = len(lst3)\n\tdp = [[[0 for i in range(p+1)] for j in range(n+1)] for k in range(m+1)]\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tfor k in range(p+1):\n\t\t\t\tif i == 0 or j == 0 or k == 0:\n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telif lst1[i-1] == lst2[j-1] == lst3[k-1]:\n\t\t\t\t\tdp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\treturn dp[m][n][p]\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS_DP_2(lst1, lst2, lst3):\n\tm = len(lst1)\n\tn = len(lst2)\n\tp = len(lst3)\n\tdp = [["}
{"ID": 782, "source": "MBPP:419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t", "predict": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t<|endoftext|>"}
{"ID": 783, "source": "MBPP:420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\treturn sum([x**3 for x in range(0,n,2)])\n\nprint(cube_Sum(10))\n<|endoftext|>"}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t<|endoftext|>"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t\treturn (n*(n+1)*(2*n+1))/6\n\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(100))\nprint(find_Average_Of_Cube(1000))\nprint(find_Average_Of_Cube(10000))\nprint(find_Average_Of_Cube(100000))\nprint(find_Average_Of_Cube(1000000))\nprint(find_Average_Of_Cube(10000000))\nprint(find_Average_Of_Cube(100000000))\nprint(find_Average_Of_Cube(1000000000))\nprint(find_Average_Of_Cube(10000000000))\nprint(find_Average_Of_Cube(100000000000))\nprint(find_Average_Of_Cube(1000000000000))\nprint(find_Average_Of_Cube(10000000000000))\nprint(find_Average_Of_Cube(100000000000000))\nprint(find_Average_Of_Cube(1000000000000000))\nprint(find_Average_Of_Cube(10000000000000000))\nprint(find_Average_Of_Cube(100000000000000000))\nprint(find_Average_Of_Cube(1000000000000000000))\nprint(find_Average_Of_Cube(10000000000000000000))\nprint(find_Average_Of_Cube(100000000000000000000))\nprint(find_Average_Of_Cube(10000000000000"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t\n    # table[i][j] will be storing the maximum \n    # gold that can be collected from (i, j) \n    table = [[0 for x in range(n)] for x in range(m)] \n  \n    # Fill in table[] using recursive \n    # approach \n    for i in range(m): \n        for j in range(n): \n            if (i == 0 or j == 0): \n                table[i][j] = gold[i][j] \n  \n            else: \n                table[i][j] = max(table[i - 1][j], \n                                 table[i][j - 1]) \n  \n            table[i][j] += gold[i][j] \n  \n    return table[m - 1][n - 1] \n  \n# Driver program to test above function \ngold = [[1, 3, 1, 5], \n        [2, 2, 4, 1], \n        [5, 0, 2, 3], \n        [0, 6, 1, 2]] \nm = len(gold) \nn = len(gold[0]) \nprint(get_maxgold(gold, m, n)) \n<|endoftext|>"}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t<|endoftext|>"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t\tcount = 0\n\t\tfor i in range(len(list1)): \n\t\t\tif list1[i] == x: \n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t<|endoftext|>"}
{"ID": 790, "source": "MBPP:427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t<|endoftext|>"}
{"ID": 791, "source": "MBPP:428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t<|endoftext|>"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the symmetry axis of a parabola.\n\"\"\"\ndef parabola_symmetry_axis(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a hyperbola.\n\"\"\"\ndef hyperbola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the directrix of a hyperbola.\n\"\"\"\ndef hyperbola_directrix(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a hyperbola.\n\"\"\"\ndef hyperbola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the symmetry axis of a hyperbola.\n\"\"\"\ndef hyperbola_symmetry_axis(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of an ellipse.\n\"\"\"\ndef ellipse_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / ("}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t<|endoftext|>"}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t<|endoftext|>"}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t<|endoftext|>"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t<|endoftext|>"}
{"ID": 798, "source": "MBPP:435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t<|endoftext|>"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t<|endoftext|>"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t<|endoftext|>"}
{"ID": 801, "source": "MBPP:438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t<|endoftext|>"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t<|endoftext|>"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t<|endoftext|>"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t<|endoftext|>"}
{"ID": 805, "source": "MBPP:442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t<|endoftext|>"}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t\treturn max(list1) if max(list1) < 0 else 0\n\nprint(largest_neg([1,2,3,-4,-5]))\nprint(largest_neg([1,-2,-3,-4,-5]))\nprint(largest_neg([-1,-2,-3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,5]))\nprint(largest_neg([-1,2,3,4,5]))\nprint(largest_neg([-1,2,3,4,-5]))\nprint(largest_neg([-1,2,3,4,-5,6]))\nprint(largest_neg([-1,2,3,4,-5,6,7]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,1"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t<|endoftext|>"}
{"ID": 808, "source": "MBPP:445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t\tcount = 0\n\t\tfor i in lst: \n\t\t\tif (i in tup): \n\t\t\t\tcount += 1\n\t\treturn count\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_Occurrence(tup, lst))\n<|endoftext|>"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t<|endoftext|>"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += (1/i) \n\t\treturn sum \n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"The sum of perrin numbers is\", cal_sum(n)) \n<|endoftext|>"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\tif (x1 == x2 == x3) or (y1 == y2 == y3): \n\t\t\treturn \"Not a triangle\"\n\t\tif (x1 == x2) or (x1 == x3) or (x2 == x3): \n\t\t\treturn \"Not a triangle\"\n\t\tif (y1 == y2) or (y1 == y3) or (y2 == y3): \n\t\t\treturn \"Not a triangle\"\n\t\tif (x1 + y1) <= (x2 + y2) and (x1 + y1) <= (x3 + y3): \n\t\t\treturn \"Not a triangle\"\n\t\tif (x2 + y2) <= (x1 + y1) and (x2 + y2) <= (x3 + y3): \n\t\t\treturn \"Not a triangle\"\n\t\tif (x3 + y3) <= (x1 + y1) and (x3 + y3) <= (x2 + y2): \n\t\t\treturn \"Not a triangle\"\n\t\tif (x1 + y1) == (x2 + y2) and (x1 + y1) == (x3 + y3): \n\t\t\treturn \"Equilateral triangle\"\n\t\tif (x1 + y1) == (x2 + y2) or (x1 + y1) == (x3 + y3) or (x2 + y2) == (x3 + y3): \n\t\t\treturn \"Isosceles triangle\"\n\t\tif (x1 + y1)!= (x2 + y2) and (x1 + y1)!= (x3 + y3) and (x2 + y2)!= (x3 + y3): \n\t\t\treturn \"Scalene triangle\"\n\nx1 = int(input(\"Enter the x coordinate of the first point: \"))\ny1 = int(input(\"Enter the y coordinate of the first point: \"))\nx2 = int(input(\"Enter the x coordinate of the second point: \"))\ny2 = int(input(\"Enter the y coordinate of the second point: \"))\nx3 = int(input(\"Enter the x coordinate of the third point: \"))\ny3 = int(input(\"Enter the y coordinate of the third point: \"))\n\nprint(check_Triangle(x1,y1,x2,"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t<|endoftext|>"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t<|endoftext|>"}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn actual_cost - sale_amount\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t<|endoftext|>"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t<|endoftext|>"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t<|endoftext|>"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t<|endoftext|>"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) < min_len: \n\t\t\t\tmin_len = len(i) \n\t\t\t\tmin_lst = i \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) > max_len: \n\t\t\t\tmax_len = len(i) \n\t\t\t\tmax_lst = i \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length.\n\"\"\"\ndef Find_Min_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == min_len: \n\t\t\t\tmin_lst.append(i) \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having maximum length.\n\"\"\"\ndef Find_Max_List(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == max_len: \n\t\t\t\tmax_lst.append(i) \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length and maximum length.\n\"\"\"\ndef Find_Min_Max_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmax_len = len(lst[0]) \n\t\tmin_lst = [] \n\t\tmax_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == min_len: \n\t\t\t\tmin_lst.append(i) \n\t\t\tif len(i) == max_len: \n\t\t\t\tmax_lst.append(i) \n\t\treturn min_lst, max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length and maximum length.\n\"\"\"\ndef Find_Min_Max_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmax_len"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t<|endoftext|>"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t<|endoftext|>"}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[0] for lst in lst]\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef ExtractLast(lst): \n\t\treturn [lst[-1] for lst in lst]\n\n\"\"\"\nWrite a python function to get the nth element of each sublist.\n\"\"\"\ndef ExtractNth(lst, n): \n\t\treturn [lst[n] for lst in lst]\n\n\"\"\"\nWrite a python function to get the length of each sublist.\n\"\"\"\ndef Length(lst): \n\t\treturn [len(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the sum of each sublist.\n\"\"\"\ndef Sum(lst): \n\t\treturn [sum(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the even numbers of each sublist.\n\"\"\"\ndef Even(lst): \n\t\treturn [i for i in lst if i%2==0]\n\n\"\"\"\nWrite a python function to get the odd numbers of each sublist.\n\"\"\"\ndef Odd(lst): \n\t\treturn [i for i in lst if i%2!=0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 5 from each sublist.\n\"\"\"\ndef DivisibleBy5(lst): \n\t\treturn [i for i in lst if i%5==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 10 from each sublist.\n\"\"\"\ndef DivisibleBy10(lst): \n\t\treturn [i for i in lst if i%10==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 45 from each sublist.\n\"\"\"\ndef DivisibleBy45(lst): \n\t\treturn [i for i in lst if i%45==0]\n\n\"\"\"\nWrite a python function to get the unique numbers from each sublist.\n\"\"\"\ndef Unique(lst): \n\t\treturn [list(set(lst)) for lst in lst]\n\n\"\"\"\nWrite a python function to get the standard deviation of each sublist.\n\"\"\"\ndef StandardDeviation(lst): \n\t\treturn [statistics.stdev(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the variance"}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t<|endoftext|>"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t<|endoftext|>"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t<|endoftext|>"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t<|endoftext|>"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t<|endoftext|>"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t\n    # base case \n    if (low == high): \n        return arr[low] \n  \n    # Find mid \n    mid = (low + high) // 2\n  \n    # If element at mid is greater than its neighbours, \n    # return mid, as it is the peak element \n    if (mid < n - 1 and arr[mid] < arr[mid + 1]): \n        return arr[mid] \n  \n    # If element at mid is smaller than its neighbours, \n    # then peak must be in left subarray \n    if (mid > 0 and arr[mid] < arr[mid - 1]): \n        return find_peak_util(arr, low, mid - 1, n) \n  \n    # If element at mid is smaller than its neighbours, \n    # then peak must be in right subarray \n    return find_peak_util(arr, mid + 1, high, n) \n  \n# Function to find the peak element in the given array \ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) \n  \n# Driver Code \narr = [1, 2, 3, 1] \nn = len(arr) \nprint(find_peak(arr, n)) \n<|endoftext|>"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t<|endoftext|>"}
{"ID": 831, "source": "MBPP:468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t\n    # Initialize maximum product \n    max_product = arr[0] \n  \n    # Initialize minimum product \n    min_product = arr[0] \n  \n    # Initialize result \n    result = arr[0] \n  \n    # Traverse through the array \n    for i in range(1, n): \n  \n        # Update min_product and max_product \n        # using previous max_product and min_product \n        if arr[i] < 0: \n            temp = min_product \n            min_product = max_product \n            max_product = temp \n  \n        max_product = max(max_product * arr[i], arr[i]) \n        min_product = min(min_product * arr[i], arr[i]) \n  \n        # Update result if needed \n        result = max(result, max_product) \n  \n    return result \n  \n# Driver Code \narr = [-10, -3, 5, 6, -2] \nn = len(arr) \nprint(max_product(arr, n)) \n<|endoftext|>"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t<|endoftext|>"}
{"ID": 833, "source": "MBPP:470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t<|endoftext|>"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t\n    # Initialize result \n    res = 0\n    for i in range(lens): \n        res = (res + arr[i]) % n \n  \n    return res \n  \n# Driver Code \narr = [1, 2, 3, 4, 5] \nlens = len(arr) \nn = 6\nprint(find_remainder(arr, lens, n)) \n<|endoftext|>"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t\tl.sort() \n\t\tfor i in range(len(l)-1): \n\t\t\tif l[i] == l[i+1] - 1: \n\t\t\t\treturn True\n\t\treturn False\n\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t<|endoftext|>"}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t<|endoftext|>"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t<|endoftext|>"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t<|endoftext|>"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t<|endoftext|>"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t<|endoftext|>"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t\treturn n // 10 ** (len(str(n)) - 1) % 10\n\nprint(first_Digit(12345))\nprint(first_Digit(23456))\nprint(first_Digit(34567))\nprint(first_Digit(45678))\nprint(first_Digit(56789))\nprint(first_Digit(67890))\nprint(first_Digit(78901))\nprint(first_Digit(89012))\nprint(first_Digit(90123))\nprint(first_Digit(101234))\nprint(first_Digit(112345))\nprint(first_Digit(123456))\nprint(first_Digit(134567))\nprint(first_Digit(145678))\nprint(first_Digit(156789))\nprint(first_Digit(167890))\nprint(first_Digit(178901))\nprint(first_Digit(189012))\nprint(first_Digit(190123))\nprint(first_Digit(201234))\nprint(first_Digit(212345))\nprint(first_Digit(223456))\nprint(first_Digit(234567))\nprint(first_Digit(245678))\nprint(first_Digit(256789))\nprint(first_Digit(267890))\nprint(first_Digit(278901))\nprint(first_Digit(289012))\nprint(first_Digit(290123))\nprint(first_Digit(301234))\nprint(first_Digit(312345))\nprint(first_Digit(323456))\nprint(first_Digit(334567))\nprint(first_Digit(345678))\nprint(first_Digit(356789))\nprint(first_Digit("}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t<|endoftext|>"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t<|endoftext|>"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tpattern = r'[A-Z][a-z]+'\n\t\tresult = re.findall(pattern, text)\n\t\treturn result\n\nprint(match(\"Hello World\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\""}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,1000000): \n\t\t\tif (i == 1): \n\t\t\t\tcontinue\n\t\t\tif (i == 2): \n\t\t\t\tcontinue\n\t\t\tif (i == 3): \n\t\t\t\tcontinue\n\t\t\tif (i == 4): \n\t\t\t\tcontinue\n\t\t\tif (i == 5): \n\t\t\t\tcontinue\n\t\t\tif (i == 6): \n\t\t\t\tcontinue\n\t\t\tif (i == 7): \n\t\t\t\tcontinue\n\t\t\tif (i == 8): \n\t\t\t\tcontinue\n\t\t\tif (i == 9): \n\t\t\t\tcontinue\n\t\t\tif (i == 10): \n\t\t\t\tcontinue\n\t\t\tif (i == 11): \n\t\t\t\tcontinue\n\t\t\tif (i == 12): \n\t\t\t\tcontinue\n\t\t\tif (i == 13): \n\t\t\t\tcontinue\n\t\t\tif (i == 14): \n\t\t\t\tcontinue\n\t\t\tif (i == 15): \n\t\t\t\tcontinue\n\t\t\tif (i == 16): \n\t\t\t\tcontinue\n\t\t\tif (i == 17): \n\t\t\t\tcontinue\n\t\t\tif (i == 18): \n\t\t\t\tcontinue\n\t\t\tif (i == 19): \n\t\t\t\tcontinue\n\t\t\tif (i == 20): \n\t\t\t\tcontinue\n\t\t\tif (i == 21): \n\t\t\t\tcontinue\n\t\t\tif (i == 22): \n\t\t\t\tcontinue\n\t\t\tif (i == 23): \n\t\t\t\tcontinue\n\t\t\tif (i == 24): \n\t\t\t\tcontinue\n\t\t\tif (i == 25): \n\t\t\t\tcontinue\n\t\t\tif (i == 26): \n\t\t\t\tcontinue\n\t\t\tif (i == 27): \n\t\t\t\tcontinue\n\t\t\tif (i == 28): \n\t\t\t\tcontinue\n\t\t\tif (i == 29): \n\t\t\t\tcontinue\n\t\t\tif (i == 30): \n\t\t\t\tcontinue\n\t\t\tif (i == 31): \n\t\t\t\tcontinue\n\t\t\tif (i == 32): \n\t\t\t\tcontinue\n\t\t\tif (i == 33): \n\t\t\t\tcontinue\n\t\t\tif (i == 34): \n\t\t\t\tcontinue\n\t\t\tif (i == 35): \n\t\t\t\tcontinue\n\t\t\tif (i == 36): \n\t\t\t\tcontinue\n\t\t\tif (i == 37): \n\t\t\t\tcontinue\n\t\t\tif (i == 38): \n\t\t\t\tcontinue\n\t\t\tif (i == 39): \n\t\t\t"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t<|endoftext|>"}
{"ID": 848, "source": "MBPP:485", "prompt": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t", "predict": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t\n    # Your code here\n    max_palindrome = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(A[i], A[j]):\n                max_palindrome = max(max_palindrome, A[i]*A[j])\n    return max_palindrome\n\ndef is_palindrome(a, b):\n    return str(a) == str(b)[::-1]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        A = list(map(int, input().strip().split()))\n        print(largest_palindrome(A, n))\n<|endoftext|>"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\treturn (factorial(n)/(factorial(k)*factorial(n-k))) * (p**k) * ((1-p)**(n-k))\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[1], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[3], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[4], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth_dec(tup): \n\t\treturn sorted(tup, key = lambda"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t<|endoftext|>"}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t\t# code here \n\t\tmax_ele = max(arr) \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tif arr[i] == max_ele: \n\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__':\n\tn = int(input())\n\tarr = list(map(int,input().split()))\n\tprint(frequency_Of_Largest(n,arr))<|endoftext|>"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t<|endoftext|>"}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t<|endoftext|>"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t<|endoftext|>"}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t<|endoftext|>"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t<|endoftext|>"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t<|endoftext|>"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t<|endoftext|>"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t<|endoftext|>"}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t<|endoftext|>"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t<|endoftext|>"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t<|endoftext|>"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t<|endoftext|>"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t<|endoftext|>"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t<|endoftext|>"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t\treturn (n * (n + 1) * (2 * n + 1)) // 6\n\nn = int(input(\"Enter the number: \"))\nprint(sum_Of_Series(n))\n<|endoftext|>"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t<|endoftext|>"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t\treturn factorial(n) / (factorial(k) * factorial(n - k))\n\n\"\"\"\nWrite a function to calculate the combination coefficient of given c(n, k).\n\"\"\"\ndef combination_coefficient(n, k): \n\t\treturn factorial(n) / (factorial(k) * factorial(n - k))\n\n\"\"\"\nWrite a function to calculate the binomial coefficient of given n and k.\n\"\"\"\ndef binomial_coefficient(n, k): \n\t\treturn permutation_coefficient(n, k) / factorial(k)\n\n\"\"\"\nWrite a function to calculate the number of trailing zeros in n!.\n\"\"\"\ndef trailing_zeros(n): \n\t\treturn int(log10(factorial(n))) - int(log10(factorial(n // 5)))\n\n\"\"\"\nWrite a function to calculate the number of divisors of a given integer n.\n\"\"\"\ndef divisors(n): \n\t\tdivisors = []\n\t\tfor i in range(1, n + 1): \n\t\t\t\tif n % i == 0: \n\t\t\t\t\t\tdivisors.append(i)\n\t\treturn divisors\n\n\"\"\"\nWrite a function to calculate the number of digits in a given integer n.\n\"\"\"\ndef number_of_digits(n): \n\t\treturn len(str(n))\n\n\"\"\"\nWrite a function to calculate the number of digits in a given integer n.\n\"\"\"\ndef sum_of_digits(n): \n\t\treturn sum([int(i) for i in str(n)])\n\n\"\"\"\nWrite a function to calculate the sum of the digits of a given integer n.\n\"\"\"\ndef sum_of_digits_of_factorial(n): \n\t\treturn sum([int(i) for i in str(factorial(n))])\n\n\"\"\"\nWrite a function to calculate the sum of the digits of a given integer n.\n\"\"\"\ndef sum_of_digits_of_factorial_of_sum_of_digits(n): \n\t\treturn sum([int(i) for i in str(factorial(sum([int(i) for i in str(n)])))])\n\n\"\"\"\nWrite a function to calculate the sum of the digits of a given integer n.\n\"\"\"\ndef sum_of_digits_of"}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t<|endoftext|>"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t<|endoftext|>"}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t\tif n%2 == 0 : \n\t\t\treturn -1\n\t\telse : \n\t\t\tsum = 0\n\t\t\tfor i in range(1,n+1) : \n\t\t\t\tif i%2!= 0 : \n\t\t\t\t\tsum += i\n\t\t\treturn sum/n\n\nprint(average_Odd(10))\nprint(average_Odd(11))\nprint(average_Odd(12))\nprint(average_Odd(13))\nprint(average_Odd(14))\nprint(average_Odd(15))\nprint(average_Odd(16))\nprint(average_Odd(17))\nprint(average_Odd(18))\nprint(average_Odd(19))\nprint(average_Odd(20))\nprint(average_Odd(21))\nprint(average_Odd(22))\nprint(average_Odd(23))\nprint(average_Odd(24))\nprint(average_Odd(25))\nprint(average_Odd(26))\nprint(average_Odd(27))\nprint(average_Odd(28))\nprint(average_Odd(29))\nprint(average_Odd(30))\nprint(average_Odd(31))\nprint(average_Odd(32))\nprint(average_Odd(33))\nprint(average_Odd(34))\nprint(average_Odd(35))\nprint(average_Odd(36))\nprint(average_Odd(37))\nprint(average_Odd(38))\nprint(average_Odd(39))\nprint(average_Odd(40))\nprint(average_Odd(41))\nprint(average_Odd(42))\nprint(average_Odd(43))\nprint(average_Odd(44))\nprint(average_Odd(45))\nprint(average_Odd(46))\nprint(average_Odd(47))\nprint(average_Odd(48))\nprint(average_Odd(49))\nprint(average_Odd(50))\nprint(average_Odd(51))\nprint(average_Odd(52))\nprint(average_Odd(53))\nprint(average_Odd(54))\nprint"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t\n    # Initialize result \n    count = 0\n    # Initialize current product as 1 \n    prod = 1\n    # Traverse through the array \n    for i in range(len(arr)): \n        # If current element is 0, then \n        # make the product 1 \n        if arr[i] == 0: \n            prod = 1\n        # Else make the product equal to \n        # current element \n        else: \n            prod = arr[i] \n        # If current product is \n        # smaller than k, then add it \n        # to count \n        if prod < k: \n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 10\n    print(no_of_subsequences(arr, k))<|endoftext|>"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\n    # Initialize result \n    min_sum = 0\n  \n    # Find minimum sum of factors \n    for i in range(1, num + 1): \n        if (num % i == 0): \n            min_sum += i \n  \n    return min_sum \n  \n# Driver Code \nnum = 10\nprint(find_Min_Sum(num)) \n<|endoftext|>"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t<|endoftext|>"}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t<|endoftext|>"}
{"ID": 877, "source": "MBPP:514", "prompt": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t<|endoftext|>"}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n    return False\n\ndef subset_sum(arr, n, m): \n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n  \n    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True\n            elif (arr[i - 1] <= j): \n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] \n            else: \n                dp[i][j] = dp[i - 1][j] \n  \n    return dp[n][sum] \n\ndef subset_sum_mod(arr, n, m): \n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n  \n    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True\n            elif (arr[i - 1] <= j): \n                dp[i][j] = dp[i - 1"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t<|endoftext|>"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t\treturn max(list1)\n\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10]))\nprint(largest_pos([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]))\nprint(largest_pos([0,0,0,0,0,0,0,0,0,0]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t<|endoftext|>"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t<|endoftext|>"}
{"ID": 883, "source": "MBPP:520", "prompt": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t<|endoftext|>"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t<|endoftext|>"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t\n    # Initialize length of LBS \n    lbs = 1\n  \n    # Initialize left and right indexes \n    left = 0\n    right = len(arr) - 1\n  \n    # Binary search till the indexes meet \n    while left < right: \n  \n        # Find mid \n        mid = left + (right - left) // 2\n  \n        # If current element is smaller than mid element \n        if arr[mid] < arr[mid + 1]: \n  \n            # Update LBS if needed \n            lbs = max(lbs, mid - left + 1) \n  \n            # Update left index \n            left = mid + 1\n  \n        # If current element is greater than mid element \n        else: \n  \n            # Update LBS if needed \n            lbs = max(lbs, right - mid) \n  \n            # Update right index \n            right = mid \n  \n    # Return LBS \n    return lbs \n  \n# Driver code \narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(lbs(arr)) \n<|endoftext|>"}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t<|endoftext|>"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t\n    # Initialize result \n    max_sum = 0\n    res = [] \n  \n    # Pick starting point as first element \n    # and initialize current sum as 0 \n    start = 0\n    curr_sum = 0\n  \n    # Traverse through all elements \n    for i in range(0, n): \n        if (i > 0 and arr[i] < arr[i-1]): \n            start = i \n        curr_sum = curr_sum + arr[i] - arr[start] \n        if (curr_sum > max_sum): \n            max_sum = curr_sum \n            res = arr[start:i+1] \n  \n    return max_sum, res \n  \n# Driver code \narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(max_sum_increasing_subsequence(arr, n)) \n<|endoftext|>"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t<|endoftext|>"}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t<|endoftext|>"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t<|endoftext|>"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t<|endoftext|>"}
{"ID": 892, "source": "MBPP:529", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\n    # Initialize result \n    jl = 0\n  \n    # Initialize first two terms \n    jl = 1\n    jl1 = 1\n  \n    # Check for negative value of n \n    if n < 0: \n        print(\"Enter a positive number\") \n        return\n  \n    # Check if n is 0 or 1 \n    if n == 0 or n == 1: \n        return jl \n  \n    # Calculate jacobsthal lucas numbers \n    for i in range(2, n + 1): \n        jl = (jl + jl1) \n        jl1 = jl \n  \n    return jl \n  \n# Driver code \nn = 10\nprint(jacobsthal_lucas(n)) \n<|endoftext|>"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t<|endoftext|>"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t\t# table[i] will be storing the minimum number of coins \n\t\t# needed for i value. We need n+1 rows as the table is \n\t\t# constructed in bottom up manner using the base \n\t\t# case (n = 0) \n\t\ttable = [0 for i in range(V + 1)] \n\n\t\t# Base case (If given value is 0) \n\t\ttable[0] = 0\n\n\t\t# Initialize all table values as Infinite \n\t\tfor i in range(1, V + 1): \n\t\t\ttable[i] = float('Inf') \n\n\t\t# Compute minimum coins required for all \n\t\t# values from 1 to V \n\t\tfor i in range(1, V + 1): \n\t\t\tfor j in range(len(coins)): \n\t\t\t\tif (coins[j] <= i): \n\t\t\t\t\tsub_res = table[i - coins[j]] \n\t\t\t\t\tif (sub_res!= float('Inf') and sub_res + 1 < table[i]): \n\t\t\t\t\t\ttable[i] = sub_res + 1\n\n\t\treturn table[V] \n\nif __name__ == '__main__':\n\tcoins = [1, 2, 5, 10, 20, 50, 100, 200]\n\tm = len(coins)\n\tV = 200\n\tprint(min_coins(coins, m, V))<|endoftext|>"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t<|endoftext|>"}
{"ID": 896, "source": "MBPP:533", "prompt": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t", "predict": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t<|endoftext|>"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t<|endoftext|>"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t<|endoftext|>"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t<|endoftext|>"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t<|endoftext|>"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t<|endoftext|>"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t<|endoftext|>"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t\n    # Initialize result \n    res = arr[0] - arr[n-1] \n  \n    # Traverse through the array \n    for i in range(1, n-1): \n        res = max(res, arr[i] - arr[i-1]) \n  \n    return res \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(find_Diff(arr, n)) \n<|endoftext|>"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t\n    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    if sum > n: \n        return True\n    else: \n        return False\n\ndef is_abundant(n):\n    if check_abundant(n):\n        return True\n    else:\n        return False\n\ndef is_abundant_sum(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_2(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_3(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_4(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_5(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_6(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_7(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_8(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_9(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\n"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t<|endoftext|>"}
{"ID": 906, "source": "MBPP:543", "prompt": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t<|endoftext|>"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t<|endoftext|>"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x5555555"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t<|endoftext|>"}
{"ID": 910, "source": "MBPP:547", "prompt": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tsum = sum + Hamming_Distance(i)\n\t\treturn sum\n\ndef Hamming_Distance(n):\n\tsum = 0\n\twhile n > 0:\n\t\tsum = sum + (n%10)\n\t\tn = n//10\n\treturn sum\n\nprint(Total_Hamming_Distance(10))\n<|endoftext|>"}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t\tn = len(arr) \n\t\tlis = [1] * n \n\t\tfor i in range(1, n): \n\t\t\tfor j in range(0, i): \n\t\t\t\tif arr[i] > arr[j] and lis[i] < lis[j] + 1: \n\t\t\t\t\tlis[i] = lis[j] + 1 \n\t\treturn max(lis) \n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\nprint(longest_increasing_subsequence([7, 8, 9, 10, 11, 12]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, "}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\treturn (n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1))//256\n\nprint(odd_Num_Sum(10))\n<|endoftext|>"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t\tif high < low: \n\t\t\treturn -1\n\t\tif high == low: \n\t\t\treturn arr[low] \n\t\tmid = (high + low) // 2\n\t\tif mid < high and arr[mid] < arr[mid + 1]: \n\t\t\treturn arr[mid + 1] \n\t\tif mid > low and arr[mid] > arr[mid - 1]: \n\t\t\treturn arr[mid] \n\t\tif arr[high] > arr[mid]: \n\t\t\treturn find_Max(arr, low, mid - 1) \n\t\treturn find_Max(arr, mid + 1, high) \n\narr = [10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 1, 3] \nn = len(arr) \nprint(\"Maximum element is\", find_Max(arr, 0, n - 1)) \n<|endoftext|>"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t<|endoftext|>"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t<|endoftext|>"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t<|endoftext|>"}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\todd = [] \n\t\teven = [] \n\t\tfor i in list: \n\t\t\tif i % 2 == 0: \n\t\t\t\teven.append(i) \n\t\t\telse: \n\t\t\t\todd.append(i) \n\t\treturn odd, even\n\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t\treturn (n*(n+1)*(2*n+1))/6 - (n*(n+1))/2\n\nprint(difference(10))\n<|endoftext|>"}
{"ID": 919, "source": "MBPP:556", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t\tcount = 0\n\t\tfor i in range(N) : \n\t\t\tfor j in range(i+1,N) : \n\t\t\t\tif (A[i] ^ A[j]) & 1 : \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nif __name__ == '__main__' : \n\tA = [1,2,3,4,5,6,7,8,9,10]\n\tprint(find_Odd_Pair(A,len(A)))\n<|endoftext|>"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t<|endoftext|>"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t<|endoftext|>"}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t<|endoftext|>"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t<|endoftext|>"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t\tmax_len = 0\n\t\tfor i in range(len(lst)):  \n\t\t\tfor j in range(i, len(lst)):  \n\t\t\t\tif len(lst[i:j+1]) > max_len:  \n\t\t\t\t\tmax_len = len(lst[i:j+1])  \n\t\treturn max_len  \n\nif __name__ == '__main__':\n\tlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(Find_Max_Length(lst))\n<|endoftext|>"}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t<|endoftext|>"}
{"ID": 927, "source": "MBPP:564", "prompt": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]!= arr[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(\"Number of pairs are:\", count_Pairs(arr, n))\n<|endoftext|>"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t\treturn list(word)\n\n\"\"\"\nWrite a python function to join a list of strings into one string.\n\"\"\"\ndef join(words): \n\t\treturn ''.join(words)\n\n\"\"\"\nWrite a python function to remove all the spaces from a string.\n\"\"\"\ndef remove_spaces(word): \n\t\treturn word.replace(\" \", \"\")\n\n\"\"\"\nWrite a python function to remove all the punctuations from a string.\n\"\"\"\ndef remove_punctuations(word): \n\t\treturn word.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a python function to remove all the vowels from a string.\n\"\"\"\ndef remove_vowels(word): \n\t\treturn word.translate(str.maketrans('', '', string.ascii_lowercase))\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(word): \n\t\treturn word == word[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a anagram of another string or not.\n\"\"\"\ndef is_anagram(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a permutation of another string or not.\n\"\"\"\ndef is_permutation(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t<|endoftext|>"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t<|endoftext|>"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t<|endoftext|>"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t<|endoftext|>"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t<|endoftext|>"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t\n    # Initialize result \n    max_sum}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t<|endoftext|>"}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t<|endoftext|>"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t<|endoftext|>"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t\tif (N == 0): \n\t\t\treturn A[L] \n\t\tif (N == 1): \n\t\t\treturn A[R] \n\t\tif (N == 2): \n\t\t\treturn A[L] + A[R] \n\t\tif (N == 3): \n\t\t\treturn A[L] + A[R] + A[L+1] \n\t\tif (N == 4): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] \n\t\tif (N == 5): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] \n\t\tif (N == 6): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] \n\t\tif (N == 7): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] \n\t\tif (N == 8): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] \n\t\tif (N == 9): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] \n\t\tif (N == 10): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] + A[R-4] \n\t\tif (N == 11): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A["}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t\n    # Initialize result \n    res = False \n  \n    # Traverse B array from left to right \n    for i in range(m): \n  \n        # Initialize starting index of A \n        j = 0\n  \n        # Traverse A array from left to right \n        while j < n and i < m: \n  \n            # If A[j] and B[i] matches \n            if A[j] == B[i]: \n  \n                # Increment starting index of A \n                j += 1\n  \n            # Increment index of B \n            i += 1\n  \n        # If A[j] is greater than B[i] \n        if j < n: \n  \n            # A is not subarray of B \n            res = False\n            break\n  \n        # If A[j] is smaller than B[i] \n        else: \n  \n            # A is subarray of B \n            res = True\n  \n    return res \n  \n# Driver code \nA = [1, 2, 3, 4, 5] \nB = [1, 2, 3] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A, B, n, m) == True: \n    print(\"Yes\") \nelse: \n    print(\"No\") \n<|endoftext|>"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t\treturn int(str(math.factorial(n))[-1])\n\nprint(last_Digit_Factorial(100))\n<|endoftext|>"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t<|endoftext|>"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t<|endoftext|>"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t\treturn (2*(b*s))+(2*(b*b))+(2*(s*s))\n\n#test case\nprint(surface_Area(4,5))\n<|endoftext|>"}
{"ID": 945, "source": "MBPP:582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t<|endoftext|>"}
{"ID": 946, "source": "MBPP:583", "prompt": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t", "predict": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t<|endoftext|>"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t<|endoftext|>"}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t<|endoftext|>"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t\tfor i in range(n):  \n\t\t\tif i<k:  \n\t\t\t\ta.append(a[i])  \n\t\t\telse:  \n\t\t\t\ta.insert(0,a[i])  \n\t\treturn a  \na = [1,2,3,4,5,6,7,8,9]  \nn = len(a)  \nk = 3  \nprint(split_Arr(a,n,k))\n<|endoftext|>"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t<|endoftext|>"}
{"ID": 951, "source": "MBPP:588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t<|endoftext|>"}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t<|endoftext|>"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t<|endoftext|>"}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min("}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of co-efficients of binomial.\n\"\"\"\ndef sum_Of_coefficients(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial"}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t<|endoftext|>"}
{"ID": 957, "source": "MBPP:594", "prompt": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t<|endoftext|>"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\t# code here\n\t\tcount = 0\n\t\tfor i in range(len(str1)) : \n\t\t\tif str1[i]!= str2[i] : \n\t\t\t\tcount += 1\n\t\treturn count\n\n# main\nstr1 = input()\nstr2 = input()\nprint(min_Swaps(str1,str2))<|endoftext|>"}
{"ID": 959, "source": "MBPP:596", "prompt": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t", "predict": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t<|endoftext|>"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t<|endoftext|>"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t<|endoftext|>"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t<|endoftext|>"}
{"ID": 963, "source": "MBPP:600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t\treturn n & 1 == 0\n\nprint(is_Even(10))\nprint(is_Even(11))\n<|endoftext|>"}
{"ID": 964, "source": "MBPP:1", "prompt": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t\n    # Create a table to store results of subproblems \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Fill d[][] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n  \n            # If first cell is empty, only option is to \n            # right \n            if i == 0 or j == 0: \n                dp[i][j] = cost[i][j] \n  \n            # If first cell has value, check if it is \n            # possible to move to cell to its right \n            elif cost[i][j]!= 0: \n                dp[i][j] = min(dp[i-1][j],  \n                               dp[i][j-1],  \n                               dp[i-1][j-1]) + cost[i][j] \n  \n            # If none of the above conditions is true \n            else: \n                dp[i][j] = 0\n  \n    return dp[m][n] \n  \n# Driver program to test above function \ncost = [[1, 2, 3], \n        [4, 8, 2], \n        [1, 5, 3]] \nm = len(cost) \nn = len(cost[0]) \nprint(min_cost(cost, m-1, n-1)) \n<|endoftext|>"}
{"ID": 965, "source": "MBPP:2", "prompt": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t<|endoftext|>"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t<|endoftext|>"}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t<|endoftext|>"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t\n    # Initialize result \n    result = 0 \n  \n    # Base case \n    if (n == 0): \n        return 1\n  \n    # Recur for all possible sizes \n    for i in range(1, n + 1): \n        result += count_ways(n - i) \n  \n    return result \n  \n# Driver code \nn = 3\nprint(count_ways(n)) \n<|endoftext|>"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t\treturn (a^b) & (a^b-1)\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t<|endoftext|>"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t<|endoftext|>"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t\t# Your code goes here \n\t\t# return minimum rotations required \n\t\treturn 0\n\nif __name__ == '__main__': \n\tstr = \"GEEKSFORGEEKS\"\n\tprint(find_Rotations(str)) \n<|endoftext|>"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t<|endoftext|>"}
