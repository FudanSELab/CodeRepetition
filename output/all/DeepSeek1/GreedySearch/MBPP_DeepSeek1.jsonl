{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\tstr1 = str1.lower()\n\tcount = {}\n\tfor char in str1:\n\t\tif char in count:\n\t\t\treturn char\n\t\tcount[char] = 1\n\treturn 'No repeated character'\n\nprint(first_repeated_char('Hello World'))\nprint(first_repeated_char('Python'))\nprint(first_repeated_char('Java'))<｜end▁of▁sentence｜>"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t\"\"\"\n\t>>> get_ludic(100)\n\t100\n\t>>> get_ludic(1000)\n\t1000\n\t>>> get_ludic(10000)\n\t10000\n\t>>> get_ludic(100000)\n\t100000\n\t>>> get_ludic(1000000)\n\t1000000\n\t>>> get_ludic(10000000)\n\t10000000\n\t>>> get_ludic(100000000)\n\t100000000\n\t>>> get_ludic(1000000000)\n\t1000000000\n\t>>> get_ludic(10000000000)\n\t10000000000\n\t>>> get_ludic(100000000000)\n\t100000000000\n\t>>> get_ludic(1000000000000)\n\t1000000000000\n\t>>> get_ludic(10000000000000)\n\t10000000000000\n\t>>> get_ludic(100000000000000)\n\t100000000000000\n\t>>> get_ludic(1000000000000000)\n\t1000000000000000\n\t>>> get_ludic(10000000000000000)\n\t10000000000000000\n\t>>> get_ludic(100000000000000000)\n\t1"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t\"\"\"\n\t>>> reverse_words('hello world')\n\t'world hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\tflag = 0\n\tfor i in range(2,num):\n\t\tif num%i == 0:\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 0:\n\t\tprint(\"Prime Number\")\n\telse:\n\t\tprint(\"Not a Prime Number\")\n\nnum = int(input(\"Enter a number: \"))\nprime_num(num)<｜end▁of▁sentence｜>"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\tradian = degree * (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588163359329042461143841502156115953611108272988066130381622099141396104940118408483652671045671104276027093852110555964462294895493038196442881097566593344612847564823378678316527120190914"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t\"\"\"\n\tFinds the location of the pattern in the text.\n\t\"\"\"\n\timport re\n\tpattern = re.compile(pattern)\n\tmatch = pattern.search(text)\n\tif match:\n\t\treturn match.start()\n\telse:\n\t\treturn -1\n\n\ndef find_literals_regex(text, pattern):\n\t\"\"\"\n\tFinds the location of the pattern in the text.\n\t\"\"\"\n\timport re\n\tpattern = re.compile(pattern)\n\tmatch = pattern.search(text)\n\tif match:\n\t\treturn match.start()\n\telse:\n\t\treturn -1\n\n\ndef main():\n\ttext = \"This is a test string\"\n\tpattern = \"test\"\n\tprint(find_literals(text, pattern))\n\tprint(find_literals_regex(text, pattern))\n\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t\n\tbell = [0] * (n + 1) \n\tbell[0] = 1\n\t\n\tfor i in range(1, n + 1): \n\t\tbell[i] = 0\n\t\tfor j in range(i): \n\t\t\tbell[i] += bell[j] * bell[i - j - 1] \n\t\n\treturn bell[n] \n\nn = 5\nprint(bell_Number(n))<｜end▁of▁sentence｜>"}
{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\tmin_val=0\n\tfor i in range(N):\n\t\tmin_val=min(min_val,A[i]+B[i])\n\treturn min_val\n\nA=[1,2,3,4,5]\nB=[1,2,3,4,5]\nN=5\nprint(floor_Min(A,B,N))<｜end▁of▁sentence｜>"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_kth_element(list1, 3))<｜end▁of▁sentence｜>"}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\tmax_element = test_list[0][N]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][N] > max_element:\n\t\t\tmax_element = test_list[i][N]\n\treturn max_element\n\ntest_list = [('Sachin Tendulkar', 34357), ('Ricky Ponting', 27483), ('Jack Kallis', 25534), ('Virat Kohli', 24936)]\nprint(max_of_nth(test_list, 2))<｜end▁of▁sentence｜>"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\tlst1 = lst[0]\n\tlst2 = lst[-1]\n\tlst1.append(lst2)\n\treturn lst1\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(merge(lst))<｜end▁of▁sentence｜>"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = test_list[0][0]\n\tfor i in range(len(test_list)):\n\t\tif test_list[i][0] > max_value:\n\t\t\tmax_value = test_list[i][0]\n\treturn max_value\n\ntest_list = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]\nprint(maximum_value(test_list))<｜end▁of▁sentence｜>"}
{"ID": 13, "source": "MBPP:614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\tsum = 0\n\tfor i in test_list:\n\t\tsum += i\n\treturn sum\n\nprint(cummulative_sum([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 14, "source": "MBPP:615", "prompt": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\tsum = 0\n\tfor i in nums:\n\t\tsum += sum(i)\n\treturn sum/len(nums)\n\nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))<｜end▁of▁sentence｜>"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> tuple_modulo((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> tuple_modulo((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> tuple_modulo((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i] % test_tup2[i])\n\treturn tuple(result)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\n\t# If distance between origin and \n\t# destination is less than or equal \n\t# to the length of the diagonal \n\t# of the rectangle \n\tif (d <= abs(a) + abs(b)): \n\t\treturn int(abs(a) + abs(b)) \n\t\n\t# If distance between origin and \n\t# destination is greater than the \n\t# length of the diagonal of the \n\t# rectangle \n\telse: \n\t\treturn int(d - abs(a) - abs(b)) \n\t\n# Driver code \nif __name__ == \"__main__\": \n\t\n\ta = 1\n\tb = 2\n\td = 3\n\tprint(min_Jumps(a, b, d))<｜end▁of▁sentence｜>"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\tresult = map(lambda x,y: x/y,nums1,nums2)\n\treturn result\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8,10]\nprint div_list(nums1,nums2)<｜end▁of▁sentence｜>"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\tnum_list = []\n\tstr_list = []\n\tfor i in test_str:\n\t\tif i.isdigit():\n\t\t\tnum_list.append(i)\n\t\telse:\n\t\t\tstr_list.append(i)\n\tnum_list.sort()\n\tnum_str = ''.join(num_list)\n\tstr_str = ''.join(str_list)\n\treturn num_str + str_str\n\nprint(move_num(\"123456789\"))<｜end▁of▁sentence｜>"}
{"ID": 19, "source": "MBPP:620", "prompt": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\"\"\"\n\ta: list of integers\n\tn: length of a\n\t\"\"\"\n\ta.sort()\n\tmax_subset = [a[0]]\n\tfor i in range(1, n):\n\t\tmax_subset.append(a[i])\n\t\tj = i - 1\n\t\twhile j >= 0:\n\t\t\tif a[i] % a[j] == 0:\n\t\t\t\tmax_subset.append(a[i])\n\t\t\t\tbreak\n\t\t\tj -= 1\n\treturn max_subset\n\n\nif __name__ == '__main__':\n\ta = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint largest_subset(a, len(a))<｜end▁of▁sentence｜>"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:param test_list: list of strings\n\t:param K: integer\n\t:return: list of strings\n\t\"\"\"\n\tresult = []\n\tfor item in test_list:\n\t\tresult.append(str(int(item) + K))\n\treturn result\n\n\nif __name__ == '__main__':\n\ttest_list = ['1', '2', '3', '4', '5']\n\tK = 1\n\tprint(increment_numerics(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 21, "source": "MBPP:622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\ti = 0\n\tj = 0\n\tcount = 0\n\tmedian = 0\n\twhile count < n:\n\t\tif arr1[i] < arr2[j]:\n\t\t\tmedian = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tmedian = arr2[j]\n\t\t\tj += 1\n\t\tcount += 1\n\treturn median\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [6, 7, 8, 9, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))<｜end▁of▁sentence｜>"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\tresult = list(map(lambda x: x**n,nums))\n\treturn result\n\nnums = [1,2,3,4,5]\nn = 2\nprint(nth_nums(nums,n))<｜end▁of▁sentence｜>"}
{"ID": 23, "source": "MBPP:624", "prompt": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t\"\"\"\n\t>>> is_upper('Hello')\n\tTrue\n\t>>> is_upper('hello')\n\tFalse\n\t\"\"\"\n\treturn string.isupper()\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\tnewList[0], newList[-1] = newList[-1], newList[0] \n\treturn newList \n\nnewList = [12, 35, 9, 56, 24] \nprint(swap_List(newList))<｜end▁of▁sentence｜>"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\tarea = 0.5 * r * r * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446429494231555950510288016887241092164276062257473692700870038530720962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548542187948622298284756482848067165213841469519415116094330572703657595919530921861173819326117931051185485421879486222982847564828480671652138414695194151160943305727036575959195309218611"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t\n\tif start > end: \n\t\treturn end + 1\n\t\n\tif start != array[start]: \n\t\treturn start \n\t\n\tmid = (start + end) // 2\n\t\n\tif array[mid] == mid: \n\t\treturn find_First_Missing(array, mid + 1, end) \n\t\n\treturn find_First_Missing(array, start, mid - 1) \n\n\narray = [0, 1, 2, 6, 9] \nn = len(array) \nprint(find_First_Missing(array, 0, n - 1))<｜end▁of▁sentence｜>"}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\tnew_string = ''\n\tfor char in string:\n\t\tif char == ' ':\n\t\t\tnew_string += '%20'\n\t\telse:\n\t\t\tnew_string += char\n\treturn new_string\n\nprint(replace_spaces('Mr John Smith    '))<｜end▁of▁sentence｜>"}
{"ID": 28, "source": "MBPP:629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\teven = [] \n\todd = [] \n\tfor x in list: \n\t\tif x % 2 == 0: \n\t\t\teven.append(x) \n\t\telse: \n\t\t\todd.append(x) \n\treturn even, odd \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \neven, odd = Split(list) \nprint(\"Even numbers in the list: \", even) \nprint(\"Odd numbers in the list: \", odd)<｜end▁of▁sentence｜>"}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\tx,y = test_tup\n\tadjacent_coordinates = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n\treturn adjacent_coordinates\n\nprint(get_coordinates((1,1)))\nprint(get_coordinates((1,2)))\nprint(get_coordinates((1,3)))\nprint(get_coordinates((1,4)))\nprint(get_coordinates((1,5)))\nprint(get_coordinates((1,6)))\nprint(get_coordinates((1,7)))\nprint(get_coordinates((1,8)))\nprint(get_coordinates((1,9)))\nprint(get_coordinates((1,10)))\nprint(get_coordinates((1,11)))\nprint(get_coordinates((1,12)))\nprint(get_coordinates((1,13)))\nprint(get_coordinates((1,14)))\nprint(get_coordinates((1,15)))\nprint(get_coordinates((1,16)))\nprint(get_coordinates((1,17)))\nprint(get_coordinates((1,18)))\nprint(get_coordinates((1,19)))\nprint(get_coordinates((1,20)))\nprint(get_coordinates((1,21)))\nprint(get_coordinates((1,22)))\nprint(get_coordinates((1,23)))\nprint(get_coordinates((1,24)))\nprint(get_coordinates((1,25)))\nprint(get_coordinates((1,26)))\nprint(get_coordinates((1,27)))\nprint(get_coordinates((1,28)))\nprint(get_coordinates((1,29)))\nprint(get_coordinates((1,30)))\nprint(get_coordinates((1,31)))\nprint(get_coordinates((1,32)))\nprint(get_coordinates((1,33)))\nprint(get_coordinates((1,34)))\nprint(get_coordinates((1,35)))\nprint(get_coordinates((1,36)))\n"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\timport re\n\ttext = re.sub(r\"\\s\", \"_\", text)\n\ttext = re.sub(r\"_\", \" \", text)\n\treturn text\n\nprint(replace_spaces(\"Hello World\"))\nprint(replace_spaces(\"Hello World 123\"))<｜end▁of▁sentence｜>"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t\"\"\"\n\t>>> move_zero([1, 0, 0, 1, 0, 1, 0, 0, 0, 1])\n\t[1, 1, 1, 0, 0, 0, 0, 0, 0, 0]\n\t>>> move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> move_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> move_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t\"\"\"\n\tnum_list.sort()\n\treturn num_list\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t\n\tres = 0\n\tfor i in range(0,n) : \n\t\tfor j in range(i+1,n) : \n\t\t\tres = res ^ (arr[i] | arr[j]) \n\treturn res \n\narr = [1, 2, 3, 4] \nn = len(arr) \nprint(pair_OR_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(2, 2*n+1, 2): \n\t\tsum += i**4\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of fourth power of first\", n, \"even natural numbers is:\", even_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = Heap()\n\tfor i in iterable:\n\t\theap.push(i)\n\twhile not heap.is_empty():\n\t\tyield heap.pop()\n\nclass Heap:\n\tdef __init__(self):\n\t\tself.heap = []\n\n\tdef push(self, value):\n\t\tself.heap.append(value)\n\t\tself.bubble_up(len(self.heap) - 1)\n\n\tdef pop(self):\n\t\tself.swap(0, len(self.heap) - 1)\n\t\tvalue = self.heap.pop()\n\t\tself.bubble_down(0)\n\t\treturn value\n\n\tdef bubble_up(self, index):\n\t\tparent = (index - 1) // 2\n\t\twhile parent >= 0 and self.heap[parent] > self.heap[index]:\n\t\t\tself.swap(parent, index)\n\t\t\tindex = parent\n\t\t\tparent = (index - 1) // 2\n\n\tdef bubble_down(self, index):\n\t\tleft = 2 * index + 1\n\t\tright = 2 * index + 2\n\t\tsmallest = index\n\t\tif left < len(self.heap) and self.heap[left] < self.heap[smallest]:\n\t\t\tsmallest = left\n\t\tif right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n\t\t\tsmallest = right\n\t\tif smallest != index:\n\t\t\tself.swap(index, smallest)\n\t\t\tself.bubble_down(smallest)\n\n\tdef swap(self, i, j):\n\t\tself.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n\n\tdef is_empty(self):\n\t\treturn len(self.heap) == 0<｜end▁of▁sentence｜>"}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b**2 - 4*a*c\n\tif d < 0:\n\t\tprint(\"No real roots\")\n\telif d == 0:\n\t\tprint(\"One real root\")\n\telse:\n\t\tprint(\"Two real roots\")\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\nCheck_Solution(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\tprofit = sale_amount - actual_cost\n\tif profit == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,101))\nprint(noprofit_noloss(100,99))<｜end▁of▁sentence｜>"}
{"ID": 37, "source": "MBPP:638", "prompt": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\"\"\"\n\tCalculate wind chill index.\n\t\"\"\"\n\twci = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16\n\treturn wci\n\nprint(wind_chill(10,20))<｜end▁of▁sentence｜>"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\tsum_len = 0\n\tfor name in sample_names:\n\t\tif name[0].isupper():\n\t\t\tcontinue\n\t\telse:\n\t\t\tsum_len += len(name)\n\treturn sum_len\n\nprint(sample_nam([\"Joe\", \"Bob\", \"Jim\", \"Billy\", \"Joe\", \"Bob\", \"Jim\", \"Billy\"]))<｜end▁of▁sentence｜>"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\"\"\"\n\t>>> remove_parenthesis(\"(1+2)\")\n\t'1+2'\n\t>>> remove_parenthesis(\"(1+2)+3\")\n\t'1+2+3'\n\t>>> remove_parenthesis(\"(1+2)+(3+4)\")\n\t'1+2+3+4'\n\t>>> remove_parenthesis(\"(1+2)+(3+4)+(5+6)\")\n\t'1+2+3+4+5+6'\n\t\"\"\"\n\titems = items.replace(\"(\", \"\")\n\titems = items.replace(\")\", \"\")\n\treturn items\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\"\"\"\n\tReturns True if n is a nonagonal number, False otherwise.\n\t\"\"\"\n\ti = 1\n\twhile i < n:\n\t\ti += 1\n\t\tif i % 2 == 0:\n\t\t\tcontinue\n\t\tif i % 3 == 0:\n\t\t\tcontinue\n\t\tif i % 5 == 0:\n\t\t\tcontinue\n\t\tif i % 7 == 0:\n\t\t\tcontinue\n\t\tif i % 11 == 0:\n\t\t\tcontinue\n\t\tif i % 13 == 0:\n\t\t\tcontinue\n\t\tif i % 17 == 0:\n\t\t\tcontinue\n\t\tif i % 19 == 0:\n\t\t\tcontinue\n\t\tif i % 23 == 0:\n\t\t\tcontinue\n\t\tif i % 29 == 0:\n\t\t\tcontinue\n\t\tif i % 31 == 0:\n\t\t\tcontinue\n\t\tif i % 37 == 0:\n\t\t\tcontinue\n\t\tif i % 41 == 0:\n\t\t\tcontinue\n\t\tif i % 43 == 0:\n\t\t\tcontinue\n\t\tif i % 47 == 0:\n\t\t\tcontinue\n\t\tif i % 53 == 0:\n\t\t\tcontinue\n\t\tif i % 59 == 0:\n\t\t\tcontinue\n\t\tif i % 61 == 0:\n\t\t\tcontinue\n\t\tif i % 67 == 0:\n\t\t\tcontinue\n\t\tif i % 71 == 0:\n\t\t\tcontinue\n\t\tif i % 73 == 0:\n\t\t\tcontinue\n\t\tif i % 79 == 0:\n\t\t\tcontinue\n\t\tif i % 83 == 0:\n\t\t\tcontinue\n\t\tif i % 89 == 0:\n\t\t\tcontinue\n\t\tif i % 97 == 0:\n\t\t\tcontinue\n\t\tif i % 101 == 0:\n\t\t\tcontinue\n\t\tif i % 103 == 0:\n\t\t\tcontinue\n\t\tif i % 107 == 0:\n\t\t\tcontinue\n\t\tif i % 109 == 0:\n\t\t\tcontinue\n\t\tif i % 113 == 0:\n\t\t\tcontinue\n\t\tif i % 127 == 0:\n\t\t\tcontinue\n\t\tif i % 13"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t\"\"\"\n\tThis function takes a tuple matrix as input and returns a tuple matrix without similar rows.\n\t\"\"\"\n\tnew_list = []\n\tfor i in test_list:\n\t\tif i not in new_list:\n\t\t\tnew_list.append(i)\n\treturn tuple(new_list)\n\n\ntest_list = ((1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2,"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t\"\"\"\n\t>>> text_match_wordz_middle('xz')\n\tTrue\n\t>>> text_match_wordz_middle('zz')\n\tTrue\n\t>>> text_match_wordz_middle('zzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzz')\n"}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t\n\ti = 0\n\tj = k - 1\n\twhile i < j: \n\t\tinput[i], input[j] = input[j], input[i] \n\t\ti += 1\n\t\tj -= 1\n\n\n# Driver code \ninput = [1, 2, 3, 4, 5, 6] \nk = 3\nreverse_Array_Upto_K(input, k) \nprint(input)<｜end▁of▁sentence｜>"}
{"ID": 44, "source": "MBPP:645", "prompt": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\tproduct = 1\n\tfor i in range(len(test_list)):\n\t\tif i == K:\n\t\t\tbreak\n\t\tproduct *= test_list[i]\n\treturn product\n\nprint(find_k_product([1, 2, 3, 4, 5], 3))<｜end▁of▁sentence｜>"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tfor j in range(1,N+1):\n\t\t\tfor k in range(1,N+1):\n\t\t\t\tif i**3 + j**3 + k**3 == K:\n\t\t\t\t\tcount += 1\n\treturn count\n\nprint(No_of_cubes(10,100))<｜end▁of▁sentence｜>"}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\"\"\"\n\t>>> split_upperstring('HelloWorld')\n\t['Hello', 'World']\n\t>>> split_upperstring('HelloWorld123')\n\t['Hello', 'World123']\n\t>>> split_upperstring('HelloWorld123')\n\t['Hello', 'World123']\n\t\"\"\"\n\tresult = []\n\tword = ''\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tresult.append(word)\n\t\t\tword = ''\n\t\telse:\n\t\t\tword += char\n\tresult.append(word)\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 47, "source": "MBPP:648", "prompt": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\tn = len(lst)\n\tfor i in range(0, n, 2):\n\t\tlst[i], lst[i+1] = lst[i+1], lst[i]\n\treturn lst\n\nprint(exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\tsum = 0\n\tfor i in range(m, n):\n\t\tsum += nums[i]\n\treturn sum\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 2\nn = 6\nprint(sum_Range_list(nums, m, n))<｜end▁of▁sentence｜>"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\ti=0\n\tj=0\n\twhile i<n and j<m:\n\t\tif arr1[i]==arr2[j]:\n\t\t\ti+=1\n\t\t\tj+=1\n\t\telse:\n\t\t\treturn False\n\tif i==n and j==m:\n\t\treturn True\n\telse:\n\t\treturn False\n\narr1=[1,2,3,4,5]\narr2=[1,2,3,4,5]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m))<｜end▁of▁sentence｜>"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\"\"\"\n\tCheck if test_tup1 is a subset of test_tup2\n\t\"\"\"\n\ttest_tup1 = set(test_tup1)\n\ttest_tup2 = set(test_tup2)\n\treturn test_tup1.issubset(test_tup2)\n\nprint(check_subset((1, 2, 3), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3), (1, 2, 3)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\tflat_list = []\n\tfor sublist in test_list:\n\t\tfor item in sublist:\n\t\t\tflat_list.append(item)\n\treturn flat_list\n\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(matrix_to_list(test_list))<｜end▁of▁sentence｜>"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\td = {}\n\tfor i in l:\n\t\tif i[0] in d:\n\t\t\td[i[0]].append(i[1])\n\t\telse:\n\t\t\td[i[0]] = [i[1]]\n\treturn d\n\nprint(grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]))<｜end▁of▁sentence｜>"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\tperimeter = 2*(l+b)\n\treturn perimeter\n\nprint(rectangle_perimeter(10,20))<｜end▁of▁sentence｜>"}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i**5\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of fifth power of n natural numbers is: \", fifth_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 55, "source": "MBPP:656", "prompt": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\ta.sort() \n\tb.sort() \n\tsum = 0\n\tfor i in range(n): \n\t\tsum += abs(a[i] - b[i]) \n\treturn sum \n\na = [1, 2, 3, 4, 5] \nb = [4, 5, 6, 7, 8] \nn = len(a) \nprint(find_Min_Sum(a, b, n))<｜end▁of▁sentence｜>"}
{"ID": 56, "source": "MBPP:657", "prompt": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t\n\twhile n > 9 : \n\t\tn = n // 10\n\t\n\treturn n \n\nn = 12345\nprint(first_Digit(n))<｜end▁of▁sentence｜>"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\tmax_occurrences = 0\n\tmax_item = None\n\tfor item in list1:\n\t\tif list1.count(item) > max_occurrences:\n\t\t\tmax_occurrences = list1.count(item)\n\t\t\tmax_item = item\n\treturn max_item\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\tl=[]\n\tfor i in range(l1,r1+1):\n\t\tfor j in range(l2,r2+1):\n\t\t\tif i not in range(l1,r1+1) and j not in range(l2,r2+1):\n\t\t\t\tl.append((i,j))\n\treturn l\n\nprint(find_Points(1,5,2,6))<｜end▁of▁sentence｜>"}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t\n\tmax_sum = 0\n\t\n\tfor i in range(n): \n\t\tmax_sum += arr[i] \n\t\n\tmax_sum_so_far = max_sum \n\t\n\tfor i in range(n - 1): \n\t\tmax_sum = max(max_sum + arr[i + 1], arr[i + 1]) \n\t\tmax_sum_so_far = max(max_sum_so_far, max_sum) \n\t\n\treturn max_sum_so_far \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(max_sum_of_three_consecutive(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\tdict2 = {}\n\tfor key in sorted(dict1):\n\t\tdict2[key] = dict1[key]\n\treturn dict2\n\nprint sorted_dict({'a': 1, 'b': 2, 'c': 3})<｜end▁of▁sentence｜>"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\tmax_val = 0\n\tfor i in range(1, n+1):\n\t\tmax_val = max(max_val, i*x + y)\n\treturn max_val\n\nprint(find_max_val(10, 10, 10))<｜end▁of▁sentence｜>"}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\tsum = 0\n\tcount = 0\n\tfor i in range(2, n+1, 2) : \n\t\tsum += i\n\t\tcount += 1\n\treturn sum/count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Average of even numbers till\", n, \"is\", average_Even(n))<｜end▁of▁sentence｜>"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\tnum_list.append(num_list.pop(0))\n\treturn num_list\n\nprint(move_last([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 65, "source": "MBPP:666", "prompt": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\tcount=0\n\tfor i in string:\n\t\tif i==char:\n\t\t\tcount+=1\n\treturn count\n\nstring=input(\"Enter a string: \")\nchar=input(\"Enter a character: \")\nprint(count_char(string,char))<｜end▁of▁sentence｜>"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\tcount = 0\n\tfor i in string.lower(): \n\t\tif i in vowels: \n\t\t\tcount += 1\n\treturn count \n\nstring = input(\"Enter a string: \")\nvowels = \"aeiou\"\nprint(\"Number of vowels are:\", Check_Vow(string, vowels))<｜end▁of▁sentence｜>"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\n\tnew_string = \"\"\n\t\n\tfor i in string:\n\t\tif i == char:\n\t\t\tcontinue\n\t\telse:\n\t\t\tnew_string += i\n\t\n\treturn new_string\n\nprint(replace(\"aaaabbbbcccc\", \"a\"))<｜end▁of▁sentence｜>"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t\n\tregex = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t\"\"\"\n\tCheck whether a sequence of numbers has a decreasing trend or not.\n\t\"\"\"\n\tdecreasing = True\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] < nums[i+1]:\n\t\t\tdecreasing = False\n\t\t\tbreak\n\treturn decreasing\n\nprint(decreasing_trend([1, 2, 3, 4, 5]))\nprint(decreasing_trend([5, 4, 3, 2, 1]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6]))\nprint(decreasing_trend([6, 5, 4, 3, 2, 1]))<｜end▁of▁sentence｜>"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\n\twhile n & (n-1) != 0: \n\t\tn = n & (n-1) \n\t\n\treturn n \n\nprint(set_Right_most_Unset_Bit(10))<｜end▁of▁sentence｜>"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t\n\tif num1 > num2 and num1 > num3:\n\t\treturn num1\n\telif num2 > num1 and num2 > num3:\n\t\treturn num2\n\telse:\n\t\treturn num3\n\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,3,2))\nprint(max_of_three(3,2,1))<｜end▁of▁sentence｜>"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\tstr1 = \"\" \n\tfor i in list: \n\t\tstr1 += str(i)\n\treturn int(str1) \n\nlist = [11, 33, 50] \nprint(convert(list))<｜end▁of▁sentence｜>"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\tstring = string.split()\n\tstring = list(set(string))\n\tstring = ' '.join(string)\n\treturn string\n\nprint(remove_duplicate(\"Hello World Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\tsum = x + y\n\tif sum in range(m,n):\n\t\treturn 20\n\telse:\n\t\treturn sum\n\nprint(sum_nums(10, 20, 15, 25))<｜end▁of▁sentence｜>"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\ttext2 = re.sub(r'[^a-zA-Z0-9]', '', text1)\n\treturn text2\n\nprint(remove_extra_char(\"1234567890\"))\nprint(remove_extra_char(\"1234567890abcdef\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabc"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t\"\"\"\n\tThis function checks if the triangle is valid or not.\n\t\"\"\"\n\tif a+b>c and b+c>a and c+a>b:\n\t\tprint(\"The triangle is valid\")\n\telse:\n\t\tprint(\"The triangle is not valid\")\n\nvalidity_triangle(3,4,5)<｜end▁of▁sentence｜>"}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\tstr2 = \"\"\n\tfor i in str1:\n\t\tif i != \" \":\n\t\t\tstr2 += i\n\treturn str2\n\nprint(remove_spaces(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\tprint(ditionary[key])\n\ndictionary = {'a':1,'b':2,'c':3}\naccess_key(dictionary,'a')<｜end▁of▁sentence｜>"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t\"\"\"\n\tCheck whether a sequence of numbers has an increasing trend or not.\n\t\"\"\"\n\tincreasing = True\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] > nums[i+1]:\n\t\t\tincreasing = False\n\t\t\tbreak\n\treturn increasing\n\nprint(increasing_trend([1, 2, 3, 4, 5]))\nprint(increasing_trend([5, 4, 3, 2, 1]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6]))\nprint(increasing_trend([6, 5, 4, 3, 2, 1]))<｜end▁of▁sentence｜>"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i == 0: \n\t\t\treturn i \n\t\ti += 1\n\treturn n \n\nprint(smallest_Divisor(10))<｜end▁of▁sentence｜>"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\tresult = map(lambda x,y:x*y,nums1,nums2)\n\tprint result\n\nmul_list([1,2,3,4],[5,6,7,8])<｜end▁of▁sentence｜>"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t\n\tflag = False\n\t\n\tfor i in range(1, int(n**0.5) + 1) : \n\t\tj = n - i*i \n\t\tif (int(j**0.5)**2 == j) : \n\t\t\tflag = True\n\t\t\tbreak\n\t\n\treturn flag \n\nn = 100\nprint(sum_Square(n))<｜end▁of▁sentence｜>"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\tcount = 0\n\tfor i in str: \n\t\tif(i == x): \n\t\t\tcount += 1\n\treturn count \n\nstr = \"geeksforgeeks\"\nx = 'e'\nprint(count_Char(str,x))<｜end▁of▁sentence｜>"}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\tsum = 0\n\tfor i in range(2, n+1): \n\t\tflag = 0\n\t\tfor j in range(2, i): \n\t\t\tif (i % j == 0): \n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif (flag == 0): \n\t\t\tsum = sum + i \n\treturn sum \nn = 10\nprint(sum_Of_Primes(n))<｜end▁of▁sentence｜>"}
{"ID": 85, "source": "MBPP:686", "prompt": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t\"\"\"\n\tThis function takes a tuple as an argument and returns a dictionary\n\twith the frequency of each element in the tuple.\n\t\"\"\"\n\tdictionary = {}\n\tfor i in test_tup:\n\t\tif i in dictionary:\n\t\t\tdictionary[i] += 1\n\t\telse:\n\t\t\tdictionary[i] = 1\n\treturn dictionary\n\nprint(freq_element((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t\"\"\"\n\tThis function uses recursion to find the greatest common divisor (gcd) of two integers.\n\t\"\"\"\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn recur_gcd(b, a % b)\n\nprint(recur_gcd(1071, 462))<｜end▁of▁sentence｜>"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\tprint(a**2+b**2)\n\nlen_complex(1,2)<｜end▁of▁sentence｜>"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\tjumps = [0] * n\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(0, i):\n\t\t\tif (i <= j + arr[j] and jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\treturn jumps[n - 1]\n\n\n# Driver code\narr = [1, 3, 6, 1, 0, 9]\nn = len(arr)\nprint(min_jumps(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t\"\"\"\n\t>>> mul_consecutive_nums([1, 2, 3, 4, 5])\n\t120\n\t>>> mul_consecutive_nums([1, 2, 3, 4, 5, 6])\n\t720\n\t>>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7])\n\t5040\n\t\"\"\"\n\treturn reduce(lambda x, y: x * y, nums)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 90, "source": "MBPP:691", "prompt": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\tnew_list = []\n\tfor i in test_list:\n\t\tif i[0] not in new_list:\n\t\t\tnew_list.append(i[0])\n\t\telse:\n\t\t\tcontinue\n\tprint(new_list)\n\ntest_list = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\ngroup_element(test_list)<｜end▁of▁sentence｜>"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfact = 1\n\tfor i in range(1, N+1): \n\t\tfact = fact * i \n\t\n\tprint(str(fact)[-2:]) \n\nN = 5\nlast_Two_Digits(N)<｜end▁of▁sentence｜>"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\ttext2 = text1.replace(\"  \", \" \")\n\treturn text2\n\nprint(remove_multiple_spaces(\"Hello  world  \"))<｜end▁of▁sentence｜>"}
{"ID": 93, "source": "MBPP:694", "prompt": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\tunique_list = []\n\tfor i in test_dict.values():\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn unique_list\n\ntest_dict = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}\nprint(extract_unique(test_dict))<｜end▁of▁sentence｜>"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n\tTrue\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\tresult = []\n\tfor i in range(len(list1)):\n\t\tresult.append(list1[i]+list2[i])\n\treturn result\n\nprint(zip_list([1,2,3],[4,5,6]))<｜end▁of▁sentence｜>"}
{"ID": 96, "source": "MBPP:697", "prompt": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\tcount = len(list(filter(lambda x: x%2 == 0, array_nums)))\n\treturn count\n\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_even(array_nums))<｜end▁of▁sentence｜>"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t\"\"\"\n\tSort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\t\"\"\"\n\ttest_dict = sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1])\n\treturn test_dict\n\n\nif __name__ == '__main__':\n\ttest_dict = {(1, 2): 1, (2, 3): 2, (3, 4): 3, (4, 5): 4, (5, 6): 5}\n\tprint(sort_dict_item(test_dict))<｜end▁of▁sentence｜>"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\tn = len(str1) \n\tcount = 0\n\tfor i in range(n) : \n\t\tif str1[i] != str2[i] : \n\t\t\tcount += 1\n\treturn count \n\nif __name__ == \"__main__\" : \n\tstr1 = \"0101010\"\n\tstr2 = \"1010101\"\n\tprint(min_Swaps(str1,str2))<｜end▁of▁sentence｜>"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\tcount = 0\n\tfor i in li:\n\t\tif min <= i <= max:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 10))<｜end▁of▁sentence｜>"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\"\"\"\n\tFinds the equilibrium index of the given array.\n\t\"\"\"\n\tsum_left = 0\n\tsum_right = sum(arr)\n\tfor i in range(len(arr)):\n\t\tsum_right -= arr[i]\n\t\tif sum_left == sum_right:\n\t\t\treturn i\n\t\tsum_left += arr[i]\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\tarr.sort()\n\tmin_removal = n\n\tfor i in range(n):\n\t\tj = i + 1\n\t\twhile j < n and arr[j] - arr[i] <= k:\n\t\t\tj += 1\n\t\tmin_removal = min(min_removal, n - j + i)\n\treturn min_removal\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nk = 5\nprint(removals(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\ttry:\n\t\td[x]\n\t\treturn True\n\texcept KeyError:\n\t\treturn False\n\nd = {'a':1,'b':2,'c':3}\nprint(is_key_present(d,'a'))\nprint(is_key_present(d,'d'))<｜end▁of▁sentence｜>"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\"\"\"\n\tCalculate the harmonic sum of n-1.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += 1 / i\n\treturn sum\n\nprint(harmonic_sum(10))<｜end▁of▁sentence｜>"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\tlist1.sort(key=lambda x: (len(x), x))\n\treturn list1\n\nprint(sort_sublists([[1, 2], [3, 4], [5, 6], [7, 8]]))<｜end▁of▁sentence｜>"}
{"ID": 105, "source": "MBPP:706", "prompt": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\ti = 0\n\tj = 0\n\twhile i < m and j < n: \n\t\tif arr1[i] < arr2[j]: \n\t\t\ti += 1\n\t\telif arr1[i] > arr2[j]: \n\t\t\tj += 1\n\t\telse: \n\t\t\ti += 1\n\t\t\tj += 1\n\treturn j == n\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [1, 2, 4, 5] \nm = len(arr1) \nn = len(arr2) \nif is_subset(arr1, m, arr2, n): \n\tprint(\"arr2 is a subset of arr1\") \nelse: \n\tprint(\"arr2 is not a subset of arr1\")<｜end▁of▁sentence｜>"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\tcount = 0\n\twhile (n > 0) :  \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\nprint(count_Set_Bits(10))<｜end▁of▁sentence｜>"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\tlist = [] \n\tlist[:0] = string \n\treturn list \n\nstring = input(\"Enter a string: \")\nprint(Convert(string))<｜end▁of▁sentence｜>"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\tunique_list = []\n\tunique_dict = {}\n\tfor i in test_list:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\t\t\tunique_dict[i] = test_list.count(i)\n\treturn unique_dict\n\nprint(get_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3,"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\tprint(test_tup[0])\n\tprint(test_tup[-1])\n\nfront_and_rear((\"apple\", \"banana\", \"cherry\"))<｜end▁of▁sentence｜>"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\teven_sum = 0\n\todd_sum = 0\n\twhile n > 0: \n\t\trem = n % 10\n\t\tn = n // 10\n\t\tif n % 2 == 0: \n\t\t\teven_sum += rem \n\t\telse: \n\t\t\todd_sum += rem \n\t\tn = n // 10\n\tif even_sum == odd_sum: \n\t\treturn True\n\telse: \n\t\treturn False\nn = 123456789\nif product_Equal(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tlist2.append(i)\n\treturn list2\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\tvalid = True\n\tfor i in test_tup:\n\t\tif not isinstance(i, (int, float)):\n\t\t\tvalid = False\n\treturn valid\n\nprint(check_valid((1, 2, 3, 4, 5)))\nprint(check_valid((1, 2, 3, 'a', 5)))<｜end▁of▁sentence｜>"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\treturn count  \n\ndef count_prime_fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_2(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_3(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + "}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t\"\"\"\n\t>>> str_to_tuple('12345')\n\t(1, 2, 3, 4, 5)\n\t>>> str_to_tuple('123456789')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> str_to_tuple('1234567890')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)\n\t>>> str_to_tuple('12345678901')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1)\n\t>>> str_to_tuple('123456789012')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2)\n\t>>> str_to_tuple('1234567890123')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3)\n\t>>> str_to_tuple('12345678901234')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4)\n\t>>> str_to_tuple('123456789012345')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5)\n\t>>> str_to_tuple('1234567890123456')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, "}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t\"\"\"\n\t>>> rombus_perimeter(1)\n\t6\n\t>>> rombus_perimeter(2)\n\t10\n\t>>> rombus_perimeter(3)\n\t14\n\t>>> rombus_perimeter(4)\n\t20\n\t>>> rombus_perimeter(5)\n\t26\n\t>>> rombus_perimeter(6)\n\t32\n\t>>> rombus_perimeter(7)\n\t38\n\t>>> rombus_perimeter(8)\n\t44\n\t>>> rombus_perimeter(9)\n\t50\n\t>>> rombus_perimeter(10)\n\t56\n\t\"\"\"\n\treturn 2*a*(a+1)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tmean = sum(data)/len(data)\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/len(data))**0.5\n\treturn sd\n\nprint(sd_calc([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\tlist2 = []\n\tfor i in range(0, len(list1), 2):\n\t\tlist2.append(list1[i])\n\treturn list2\n\nprint(alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\"\"\"\n\t>>> text_match('abbbb')\n\tTrue\n\t>>> text_match('abbbbb')\n\tFalse\n\t>>> text_match('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') <= 1\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\"\"\"\n\tAdds a dictionary to a tuple.\n\t\"\"\"\n\ttest_tup = test_tup + (test_dict,)\n\treturn test_tup\n\n\nif __name__ == \"__main__\":\n\ttest_tup = (1, 2, 3)\n\ttest_dict = {\"a\": 1, \"b\": 2}\n\tprint(add_dict_to_tuple(test_tup, test_dict))<｜end▁of▁sentence｜>"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t\n\tdp = [[0 for i in range(N)] for j in range(N)] \n\t\n\tdp[0][0] = cost[0][0] \n\t\n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\t\n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\t\n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j] \n\t\n\ti = N - 1\n\tj = N - 1\n\t\n\tpath = [] \n\t\n\twhile i >= 0 and j >= 0: \n\t\tpath.append((i, j)) \n\t\t\n\t\tif dp[i][j] == dp[i - 1][j] + cost[i][j]: \n\t\t\ti -= 1\n\t\telif dp[i][j] == dp[i][j - 1] + cost[i][j]: \n\t\t\tj -= 1\n\t\n\tpath.reverse() \n\t\n\ttotal = 0\n\t\n\tfor i, j in path: \n\t\ttotal += cost[i][j] \n\t\n\treturn total / len(path) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\tnew_students={}\n\tfor i in students:\n\t\tif students[i][\"height\"]>h and students[i][\"weight\"]>w:\n\t\t\tnew_students[i]=students[i]\n\treturn new_students\n\nstudents={\"student1\":{\"height\":170,\"weight\":80},\"student2\":{\"height\":180,\"weight\":90},\"student3\":{\"height\":160,\"weight\":70}}\nprint(filter_data(students,170,80))<｜end▁of▁sentence｜>"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\tcount = 0\n\tfor i in range(len(nums1)):\n\t\tfor j in range(len(nums2)):\n\t\t\tif nums1[i] == nums2[j]:\n\t\t\t\tcount += 1\n\treturn count\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [1, 2, 3, 4, 5]\nprint(count_same_pair(nums1, nums2))<｜end▁of▁sentence｜>"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\tsum = 0\n\twhile base > 0:\n\t\tsum += base % 10\n\t\tbase //= 10\n\treturn sum ** power\n\nprint(power_base_sum(12345, 2))<｜end▁of▁sentence｜>"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"([^\"]*)\"'\n\tresult = re.findall(pattern, text1)\n\treturn result\n\nprint(extract_quotation(\"I am 'Irfan' and I am 'Muhammad'\"))<｜end▁of▁sentence｜>"}
{"ID": 125, "source": "MBPP:726", "prompt": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\tnew_tup = ()\n\tfor i in range(len(test_tup)-1):\n\t\tnew_tup += (test_tup[i]*test_tup[i+1],)\n\treturn new_tup\n\nprint(multiply_elements((1,2,3,4,5,6,7,8,9,10)))<｜end▁of▁sentence｜>"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\tS = re.sub(r'[^a-zA-Z0-9]', '', S)\n\treturn S\n\nprint(remove_char(\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"))<｜end▁of▁sentence｜>"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\tsum_lst = []\n\tfor i in range(len(lst1)):\n\t\tsum_lst.append(lst1[i]+lst2[i])\n\treturn sum_lst\n\nprint(sum_list([1,2,3],[4,5,6]))<｜end▁of▁sentence｜>"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\tresult = map(lambda x,y:x+y,nums1,nums2)\n\tprint(list(result))\n\nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nadd_list(nums1,nums2)<｜end▁of▁sentence｜>"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\ti = 0\n\twhile i < len(nums) - 1:\n\t\tif nums[i] == nums[i+1]:\n\t\t\tnums.pop(i)\n\t\telse:\n\t\t\ti += 1\n\treturn nums\n\nprint(consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\tlateralsurface=3.14*r*r*h\n\treturn lateralsurface\n\nprint(lateralsurface_cone(5,10))<｜end▁of▁sentence｜>"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\ttext = text.replace(' ', ':')\n\ttext = text.replace(',', ':')\n\ttext = text.replace('.', ':')\n\treturn text\n\nprint(replace_specialchar('Hello, World!'))<｜end▁of▁sentence｜>"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the first occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1] < x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the last occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == len(A) - 1 or A[mid + 1] > x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tleft = mid + 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the first occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1] < x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\tsum_of_prod = 0\n\tfor i in range(n):\n\t\tprod = 1\n\t\tfor j in range(i,n):\n\t\t\tprod *= arr[j]\n\t\tsum_of_prod += prod\n\treturn sum_of_prod\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))<｜end▁of▁sentence｜>"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\tn = n ^ (n >> 1)\n\treturn n\n\nprint(toggle_middle_bits(10))<｜end▁of▁sentence｜>"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\"\"\"\n\tFinds the left insertion point for x in a.\n\t\"\"\"\n\tlow = 0\n\thigh = len(a) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif x < a[mid]:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\ndef test(a, x):\n\t\"\"\"\n\tTests the left_insertion function.\n\t\"\"\"\n\tprint(left_insertion(a, x))\n\n\nif __name__ == '__main__':\n\ttest([1, 2, 4, 5, 6], 3)\n\ttest([1, 2, 4, 5, 6], 7)\n\ttest([1, 2, 4, 5, 6], 0)\n\ttest([1, 2, 4, 5, 6], 1)\n\ttest([1, 2, 4, 5, 6], 2)\n\ttest([1, 2, 4, 5, 6], 4)\n\ttest([1, 2, 4, 5, 6], 5)\n\ttest([1, 2, 4, 5, 6], 6)<｜end▁of▁sentence｜>"}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\timport re\n\tpattern = re.compile('^[aeiouAEIOU]')\n\tif pattern.match(string):\n\t\tprint(\"String starts with vowel\")\n\telse:\n\t\tprint(\"String does not start with vowel\")\n\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")<｜end▁of▁sentence｜>"}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t\"\"\"\n\tCalculates the geometric sum of n-1.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn 1/pow(2,n-1) + geometric_sum(n-1)\n\nprint(geometric_sum(5))<｜end▁of▁sentence｜>"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\ti = 1\n\twhile True:\n\t\ti += 1\n\t\ttri = i * (i + 1) / 2\n\t\tif len(str(tri)) == n:\n\t\t\treturn i\n\nprint find_Index(1)\nprint find_Index(2)\nprint find_Index(3)\nprint find_Index(4)\nprint find_Index(5)\nprint find_Index(6)\nprint find_Index(7)\nprint find_Index(8)\nprint find_Index(9)\nprint find_Index(10)\nprint find_Index(11)\nprint find_Index(12)\nprint find_Index(13)\nprint find_Index(14)\nprint find_Index(15)\nprint find_Index(16)\nprint find_Index(17)\nprint find_Index(18)\nprint find_Index(19)\nprint find_Index(20)\nprint find_Index(21)\nprint find_Index(22)\nprint find_Index(23)\nprint find_Index(24)\nprint find_Index(25)\nprint find_Index(26)\nprint find_Index(27)\nprint find_Index(28)\nprint find_Index(29)\nprint find_Index(30)\nprint find_Index(31)\nprint find_Index(32)\nprint find_Index(33)\nprint find_Index(34)\nprint find_Index(35)\nprint find_Index(36)\nprint find_Index(37)\nprint find_Index(38)\nprint find_Index(39)\nprint find_Index(40)\nprint find_Index(41)\nprint find_Index(42)\nprint find_Index(43)\nprint find_Index(44)\nprint find_Index(45)\nprint find_Index(46)\nprint find_Index(47)\nprint find_Index(48)\nprint find_Index(49)\nprint find_Index(50)\nprint find_Index(51)\nprint find_Index(52)\nprint find_Index(5"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\tdict_ = {}\n\tfor i in range(len(test_tup)):\n\t\tif i % 2 == 0:\n\t\t\tdict_[test_tup[i]] = test_tup[i+1]\n\treturn dict_\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t\n\tcount = 0\n\t\n\tfor i in range(len(s)-1) :\n\t\tif s[i] == s[i+1] :\n\t\t\tcount += 1\n\t\n\tif count == len(s)-1 :\n\t\treturn True\n\telse :\n\t\treturn False\n\ns = input(\"Enter a string : \")\n\nif all_Characters_Same(s) :\n\tprint(\"All characters are same\")\nelse :\n\tprint(\"All characters are not same\")<｜end▁of▁sentence｜>"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\tarea = 0.433 * side ** 2\n\treturn area\n\nprint(area_tetrahedron(10))<｜end▁of▁sentence｜>"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\tlist1 = list1[m:] + list1[:m]\n\tlist1 = list1[n:] + list1[:n]\n\treturn list1\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(rotate_right(list1,2,3))<｜end▁of▁sentence｜>"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t\"\"\"\n\tCheck if the given tuple has any none value or not.\n\t\"\"\"\n\tnone_count = 0\n\tfor i in test_tup:\n\t\tif i is None:\n\t\t\tnone_count += 1\n\tif none_count > 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nif __name__ == '__main__':\n\ttest_tup = (1, 2, 3, 4, 5, None, 6, 7, 8, 9, 10)\n\tprint(check_none(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t\"\"\"\n\tFinds numbers within a given range where every number is divisible by every digit it contains.\n\t\"\"\"\n\tnums = []\n\tfor i in range(startnum, endnum + 1):\n\t\tnums.append(i)\n\t\tnum = str(i)\n\t\tdivisible = True\n\t\tfor j in num:\n\t\t\tif int(j) == 0:\n\t\t\t\tcontinue\n\t\t\tif i % int(j) != 0:\n\t\t\t\tdivisible = False\n\t\t\t\tbreak\n\t\tif divisible:\n\t\t\tprint(i)\n\ndivisible_by_digits(100, 1000)<｜end▁of▁sentence｜>"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\timport math\n\treturn (math.pi*r*r*a)/360\n\nprint(sector_area(10,10))<｜end▁of▁sentence｜>"}
{"ID": 146, "source": "MBPP:747", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t\n\tL = [[0 for x in range(o+1)] for x in range(m+1)] \n\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif i == 0 or j == 0 or k == 0: \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\telif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n\n\treturn L[m][n][o] \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AGT\"\n\nprint(\"Length of LCS is \", lcs_of_three(X, Y, Z, len(X), len(Y), len(Z)))<｜end▁of▁sentence｜>"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\tstr1 = str1.replace(\" \", \"\")\n\tstr1 = str1.replace(\".\", \"\")\n\tstr1 = str1.replace(\",\", \"\")\n\tstr1 = str1.replace(\":\", \"\")\n\tstr1 = str1.replace(\";\", \"\")\n\tstr1 = str1.replace(\"?\", \"\")\n\tstr1 = str1.replace(\"-\", \"\")\n\tstr1 = str1.replace(\"_\", \"\")\n\tstr1 = str1.replace(\"(\", \"\")\n\tstr1 = str1.replace(\")\", \"\")\n\tstr1 = str1.replace(\"[\", \"\")\n\tstr1 = str1.replace(\"]\", \"\")\n\tstr1 = str1.replace(\"{\", \"\")\n\tstr1 = str1.replace(\"}\", \"\")\n\tstr1 = str1.replace(\"\\\"\", \"\")\n\tstr1 = str1.replace(\"'\", \"\")\n\tstr1 = str1.replace(\"*\", \"\")\n\tstr1 = str1.replace(\"&\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"%\", \"\")\n\tstr1 = str1.replace(\"$\", \"\")\n\tstr1 = str1.replace(\"#\", \"\")\n\tstr1 = str1.replace(\"@\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n\tstr1 = str1.replace(\"=\", \"\")\n\tstr1 = str1.replace(\"<\", \"\")\n\tstr1 = str1.replace(\">\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\tnums = []\n\tfor num_str in nums_str:\n\t\tnums.append(int(num_str))\n\tnums.sort()\n\treturn nums\n\nprint(sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\"]))<｜end▁of▁sentence｜>"}
{"ID": 149, "source": "MBPP:750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\ttest_list.append(test_tup)\n\treturn test_list\n\nprint(add_tuple([1, 2, 3], (4, 5, 6)))<｜end▁of▁sentence｜>"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\tn = len(arr)\n\tif i >= n:\n\t\treturn True\n\tif 2*i+1 >= n:\n\t\treturn True\n\tif arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n\t\treturn check_min_heap(arr, 2*i+1) and check_min_heap(arr, 2*i+2)\n\treturn False\n\ndef check_max_heap(arr, i):\n\tn = len(arr)\n\tif i >= n:\n\t\treturn True\n\tif 2*i+1 >= n:\n\t\treturn True\n\tif arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]:\n\t\treturn check_max_heap(arr, 2*i+1) and check_max_heap(arr, 2*i+2)\n\treturn False\n\ndef check_heap(arr):\n\treturn check_min_heap(arr, 0) and check_max_heap(arr, 0)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(check_heap(arr))<｜end▁of▁sentence｜>"}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\"\"\"\n\tReturns the nth jacobsthal number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nprint jacobsthal_num(10)<｜end▁of▁sentence｜>"}
{"ID": 152, "source": "MBPP:753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t\"\"\"\n\tFinds minimum K records from a list of tuples.\n\t\"\"\"\n\ttest_list.sort(key=lambda x: x[1])\n\treturn test_list[:K]\n\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\tprint(min_k(test_list, 2))<｜end▁of▁sentence｜>"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t\"\"\"\n\t>>> extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5])\n\t[2, 3]\n\t>>> extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5])\n\t[2, 3]\n\t>>> extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5])\n\t[2, 3]\n\t\"\"\"\n\tl = []\n\tfor i in range(len(l1)):\n\t\tif l1[i] in l2 and l1[i] in l3:\n\t\t\tl.append(i)\n\treturn l\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\tnumbers.sort()\n\treturn numbers[1]\n\nprint(second_smallest([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t\"\"\"\n\t>>> text_match_zero_one('abbbb')\n\tTrue\n\t>>> text_match_zero_one('abbbba')\n\tFalse\n\t>>> text_match_zero_one('abbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b(text):\n\t\"\"\"\n\t>>> text_match_three_b('abbbb')\n\tFalse\n\t>>> text_match_three_b('abbbba')\n\tFalse\n\t>>> text_match_three_b('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_2(text):\n\t\"\"\"\n\t>>> text_match_three_b_2('abbbb')\n\tFalse\n\t>>> text_match_three_b_2('abbbba')\n\tFalse\n\t>>> text_match_three_b_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_3(text):\n\t\"\"\"\n\t>>> text_match_three_b_3('abbbb')\n\tFalse\n\t>>> text_match_three_b_3('abbbba')\n\tFalse\n\t>>> text_match_three_b_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_4(text):\n\t\"\"\"\n\t>>> text_match_three_b_4('abbbb')\n\tFalse\n\t>>> text_match_three_b"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j][::-1]:\n\t\t\t\tcount += 1\n\treturn count\n\n\ntest_list = [\"abc\", \"xyz\", \"aba\", \"1221\"]\nprint(count_reverse_pairs(test_list))<｜end▁of▁sentence｜>"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))<｜end▁of▁sentence｜>"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t\"\"\"\n\t>>> is_decimal(1.0)\n\tTrue\n\t>>> is_decimal(1.01)\n\tTrue\n\t>>> is_decimal(1.001)\n\tTrue\n\t>>> is_decimal(1.0001)\n\tFalse\n\t>>> is_decimal(1.00001)\n\tFalse\n\t>>> is_decimal(1.000001)\n\tFalse\n\t>>> is_decimal(1.0000001)\n\tFalse\n\t>>> is_decimal(1.00000001)\n\tFalse\n\t>>> is_decimal(1.000000001)\n\tFalse\n\t>>> is_decimal(1.0000000001)\n\tFalse\n\t>>> is_decimal(1.00000000001)\n\tFalse\n\t>>> is_decimal(1.000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000"}
{"ID": 159, "source": "MBPP:760", "prompt": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t\n\tarr.sort()\n\t\n\tfor i in range(0,n-1):\n\t\tif arr[i] != arr[i+1]:\n\t\t\treturn True\n\treturn False\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\n\nif unique_Element(arr,n):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 160, "source": "MBPP:761", "prompt": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t\"\"\"\n\td: distance\n\ta: angle\n\t\"\"\"\n\timport math\n\treturn d*a/360\n\nprint arc_length(10,30)<｜end▁of▁sentence｜>"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\tmonthnum3 = int(monthnum3)\n\tif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n\t\tprint(\"The month number\", monthnum3, \"has 30 days.\")\n\telif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n\t\tprint(\"The month number\", monthnum3, \"has 31 days.\")\n\telse:\n\t\tprint(\"The month number\", monthnum3, \"has 28 days.\")\n\nmonthnum3 = input(\"Enter the month number: \")\ncheck_monthnumber_number(monthnum3)<｜end▁of▁sentence｜>"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\tarr.sort() \n\tmin_diff = arr[1] - arr[0] \n\tfor i in range(1, n-1): \n\t\tdiff = arr[i+1] - arr[i] \n\t\tif diff < min_diff: \n\t\t\tmin_diff = diff \n\treturn min_diff \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(find_Min_Diff(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nprint(number_ctr(\"123456789\"))<｜end▁of▁sentence｜>"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t\"\"\"\n\tReturns True if n is a polite number, False otherwise.\n\t\"\"\"\n\tn = str(n)\n\tn = n[::-1]\n\tn = int(n)\n\tn = n + 1\n\tn = str(n)\n\tn = n[::-1]\n\tn = int(n)\n\tif n == n + 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef polite_number(n):\n\t\"\"\"\n\tReturns the nth polite number.\n\t\"\"\"\n\ti = 0\n\twhile i < n:\n\t\tif is_polite(i) == True:\n\t\t\ti += 1\n\t\telse:\n\t\t\ti += 1\n\treturn i - 1\n\nprint(polite_number(1000))<｜end▁of▁sentence｜>"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t\"\"\"\n\t>>> pair_wise([1,2,3,4])\n\t[[1, 2], [2, 3], [3, 4]]\n\t\"\"\"\n\treturn [l1[i:i+2] for i in range(len(l1)-1)]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 166, "source": "MBPP:767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\tcount = 0\n\ti = 0\n\tj = n-1\n\tarr.sort()\n\twhile i < j:\n\t\tif arr[i] + arr[j] < sum:\n\t\t\ti += 1\n\t\telif arr[i] + arr[j] > sum:\n\t\t\tj -= 1\n\t\telse:\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\t\tj -= 1\n\treturn count\n\narr = [1, 5, 7, -1, 5]\nn = len(arr)\nsum = 6\nprint(get_Pairs_Count(arr,n,sum))<｜end▁of▁sentence｜>"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\n\tif x & 1: \n\t\tprint(\"Odd\") \n\telse: \n\t\tprint(\"Even\") \n\nx = 10\ncheck_Odd_Parity(x) \n\nx = 11\ncheck_Odd_Parity(x)<｜end▁of▁sentence｜>"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\tli3=[]\n\tfor i in li1:\n\t\tif i not in li2:\n\t\t\tli3.append(i)\n\treturn li3\nli1=[10,20,30,40,50]\nli2=[5,10,15,20,25]\nprint(Diff(li1,li2))<｜end▁of▁sentence｜>"}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tif i % 2 != 0 : \n\t\t\tsum += i**4\n\treturn sum\n\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of the first\", n, \"odd natural numbers is :\", odd_Num_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\tstack = []\n\tbrackets = {\n\t\t')': '(',\n\t\t']': '[',\n\t\t'}': '{'\n\t}\n\tfor char in exp:\n\t\tif char in brackets.values():\n\t\t\tstack.append(char)\n\t\telif char in brackets:\n\t\t\tif stack and stack[-1] == brackets[char]:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\treturn False\n\treturn True if not stack else False\n\nprint(check_expression('((a+b)*(c+d))'))\nprint(check_expression('((a+b)*(c+d)))'))\nprint(check_expression('((a+b)*(c+d))'))<｜end▁of▁sentence｜>"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\tnew_str = \"\"\n\tfor i in test_str.split():\n\t\tif len(i) != K:\n\t\t\tnew_str += i + \" \"\n\treturn new_str\n\nprint(remove_length(\"I am a student\", 4))<｜end▁of▁sentence｜>"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\tcount = 0\n\tpos = 0\n\twhile True:\n\t\tpos = text.find(pattern,pos)\n\t\tif pos == -1:\n\t\t\tbreak\n\t\tcount += 1\n\t\tpos += 1\n\treturn count\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\tregex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n\tif(re.search(regex,email)):\n\t\tprint(\"Valid Email\")\n\telse:\n\t\tprint(\"Invalid Email\")\n\ncheck_email(\"abc@yahoo.com\")\ncheck_email(\"abc-100@yahoo.com\")\ncheck_email(\"abc.100@yahoo.com\")\ncheck_email(\"abc111@abc.com\")\ncheck_email(\"abc-100@abc.net\")\ncheck_email(\"abc@1.com\")\ncheck_email(\"abc@gmail.com.com\")\ncheck_email(\"abc+100@gmail.com\")\ncheck_email(\"abc\")\ncheck_email(\"abc@.com.my\")\ncheck_email(\"abc123@gmail.a\")\ncheck_email(\"abc123@.com\")\ncheck_email(\"abc123@.com.com\")\ncheck_email(\".abc@abc.com\")\ncheck_email(\"abc()*@gmail.com\")\ncheck_email(\"abc@%*.com\")\ncheck_email(\"abc..2002@gmail.com\")\ncheck_email(\"abc.@gmail.com\")\ncheck_email(\"abc@abc@gmail.com\")\ncheck_email(\"abc@gmail.com.1a\")\ncheck_email(\"abc@gmail.com.aa.au\")\n\n\"\"\"\nWrite a function to check if the string is a valid mobile number or not using regex.\n\"\"\"\ndef check_mobile(mobile): \n\tregex = r'\\b[6789]\\d{9}\\b'\n\tif(re.search(regex,mobile)):\n\t\tprint(\"Valid Mobile Number\")\n\telse:\n\t\tprint(\"Invalid Mobile Number\")\n\ncheck_mobile(\"91 9818918918\")\ncheck_mobile(\"91 981891891\")\ncheck_mobile(\"91 98189189\")\ncheck_mobile(\"91 9818"}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\todd_nums = []\n\tfor i in range(len(nums)):\n\t\tif i % 2 != 0:\n\t\t\todd_nums.append(nums[i])\n\treturn odd_nums\n\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor i in range(len(test_str)-1):\n\t\tif test_str[i] in vowels and test_str[i+1] in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels('aabbccdd'))<｜end▁of▁sentence｜>"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\n\tsum = 0\n\t\n\tfor i in range(0, n): \n\t\tflag = 0\n\t\tfor j in range(0, i): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif (flag == 0): \n\t\t\tsum = sum + arr[i] \n\treturn sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(find_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\tlist2 = []\n\tlist3 = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] not in list3:\n\t\t\tlist3.append(list1[i])\n\t\telse:\n\t\t\tlist2.append(list3)\n\t\t\tlist3 = []\n\t\t\tlist3.append(list1[i])\n\tlist2.append(list3)\n\treturn list2\n\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 2, 2, 1]))<｜end▁of▁sentence｜>"}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))<｜end▁of▁sentence｜>"}
{"ID": 179, "source": "MBPP:780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t\"\"\"\n\tFinds the combinations of sums with tuples in the given tuple list.\n\t\"\"\"\n\tsum_list = []\n\tfor i in range(len(test_list)):\n\t\tsum_list.append(sum(test_list[i]))\n\tsum_list.sort()\n\tsum_list = list(set(sum_list))\n\tsum_list.sort()\n\tsum_list.reverse()\n\tprint(sum_list)\n\nfind_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)])<｜end▁of▁sentence｜>"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\treturn count\n\nn = int(input(\"Enter the number: \"))\nif count_Divisors(n) % 2 == 0 : \n\tprint(\"Even\")\nelse : \n\tprint(\"Odd\")<｜end▁of▁sentence｜>"}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i, len(arr)):\n\t\t\tif (j-i)%2 == 1:\n\t\t\t\tfor k in range(i, j+1):\n\t\t\t\t\tsum += arr[k]\n\treturn sum\n\narr = [1, 4, 2, 5, 3]\nprint(Odd_Length_Sum(arr))<｜end▁of▁sentence｜>"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\tr = r / 255\n\tg = g / 255\n\tb = b / 255\n\n\tmax_rgb = max(r, g, b)\n\tmin_rgb = min(r, g, b)\n\tdelta = max_rgb - min_rgb\n\n\tif max_rgb == min_rgb:\n\t\th = 0\n\telse:\n\t\tif max_rgb == r:\n\t\t\th = (60 * ((g - b) / delta) + 360) % 360\n\t\telif max_rgb == g:\n\t\t\th = (60 * ((b - r) / delta) + 120) % 360\n\t\telif max_rgb == b:\n\t\t\th = (60 * ((r - g) / delta) + 240) % 360\n\n\tv = max_rgb\n\ts = delta / max_rgb\n\n\treturn [h, s, v]\n\n\n\"\"\"Write a function to convert hsv color to rgb color.\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n\th = h / 360\n\ts = s / 100\n\tv = v / 100\n\n\ti = int(h * 6)\n\tf = h * 6 - i\n\tp = v * (1 - s)\n\tq = v * (1 - f * s)\n\tt = v * (1 - (1 - f) * s)\n\n\tif i == 0:\n\t\tr = v\n\t\tg = t\n\t\tb = p\n\telif i == 1:\n\t\tr = q\n\t\tg = v\n\t\tb = p\n\telif i == 2:\n\t\tr = p\n\t\tg = v\n\t\tb = t\n\telif i == 3:\n\t\tr = p\n\t\tg = q\n\t\tb = v\n\telif i == 4:\n\t\tr = t\n\t\tg = p\n\t\tb = v\n\telif i == 5:\n\t\tr = v\n\t\tg = p\n\t"}
{"ID": 183, "source": "MBPP:784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\teven_product = 1\n\todd_product = 1\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_product *= i\n\t\telse:\n\t\t\todd_product *= i\n\treturn even_product, odd_product\n\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t\"\"\"\n\t>>> tuple_str_int('(1, 2, 3)')\n\t(1, 2, 3)\n\t>>> tuple_str_int('(1, 2, 3, 4)')\n\t(1, 2, 3, 4)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5)')\n\t(1, 2, 3, 4, 5)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6)')\n\t(1, 2, 3, 4, 5, 6)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7)')\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8)')\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, "}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\"\"\"\n\tFind the index where x should be inserted into a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_2(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_3(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_4(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_5(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_6(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t\"\"\"\n\t>>> text_match_three('abbbb')\n\tTrue\n\t>>> text_match_three('abbbba')\n\tFalse\n\t>>> text_match_three('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbbb')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything(text):\n\t\"\"\"\n\t>>> text_match_anything('abbbb')\n\tTrue\n\t>>> text_match_anything('abbbba')\n\tTrue\n\t>>> text_match_anything('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_2(text):\n\t\"\"\"\n\t>>> text_match_anything_2('abbbb')\n\tTrue\n\t>>> text_match_anything_2('abbbba')\n\tTrue\n\t>>> text_match_anything_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_3(text):\n\t\"\"\"\n\t>>> text_match_anything_3('abbbb')\n\tTrue\n\t>>> text_match_anything_3('abbbba')\n\tTrue\n\t>>> text_match_anything_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_4(text):\n\t\"\"\"\n\t>>> text_match_anything_4('abbbb')\n\tTrue\n\t>>> text_match_anything_4('abbbba')\n\tTrue\n\t>>> text_match_anything_4('abbbbb')\n\tTrue\n\t\"\"\""}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\tnew_tuple = tuple(test_str), tuple(test_list)\n\treturn new_tuple\n\nprint(new_tuple(['a', 'b', 'c'], 'd'))<｜end▁of▁sentence｜>"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\tperimeter=s*l\n\treturn perimeter\n\nprint(perimeter_polygon(5,10))<｜end▁of▁sentence｜>"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\teven_nums = []\n\tfor i in range(len(nums)):\n\t\tif i % 2 == 0:\n\t\t\teven_nums.append(nums[i])\n\treturn even_nums\n\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t\"\"\"\n\t>>> remove_nested((1, 2, 3, 4, 5))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13, "}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nprint(count_list([1, 2, [3, 4], [5, 6], [7, 8, [9, 10]]]))<｜end▁of▁sentence｜>"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\tl=0\n\tr=n-1\n\twhile l<=r:\n\t\tmid=(l+r)//2\n\t\tif arr[mid]==x:\n\t\t\tl=mid+1\n\t\telif arr[mid]<x:\n\t\t\tl=mid+1\n\t\telse:\n\t\t\tr=mid-1\n\treturn r\n\narr=[1,2,3,4,5,6,7,8,9,10]\nx=10\nn=len(arr)\nprint(last(arr,x,n))<｜end▁of▁sentence｜>"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\timport heapq\n\theap = []\n\tfor item in items:\n\t\theapq.heappush(heap,item)\n\t\tprint(heap)\n\t\tprint(heap[0])\n\t\tprint(heap[1])\n\t\tprint(heap[2])\n\t\tprint(heap[3])\n\t\tprint(heap[4])\n\t\tprint(heap[5])\n\t\tprint(heap[6])\n\t\tprint(heap[7])\n\t\tprint(heap[8])\n\t\tprint(heap[9])\n\t\tprint(heap[10])\n\t\tprint(heap[11])\n\t\tprint(heap[12])\n\t\tprint(heap[13])\n\t\tprint(heap[14])\n\t\tprint(heap[15])\n\t\tprint(heap[16])\n\t\tprint(heap[17])\n\t\tprint(heap[18])\n\t\tprint(heap[19])\n\t\tprint(heap[20])\n\t\tprint(heap[21])\n\t\tprint(heap[22])\n\t\tprint(heap[23])\n\t\tprint(heap[24])\n\t\tprint(heap[25])\n\t\tprint(heap[26])\n\t\tprint(heap[27])\n\t\tprint(heap[28])\n\t\tprint(heap[29])\n\t\tprint(heap[30])\n\t\tprint(heap[31])\n\t\tprint(heap[32])\n\t\tprint(heap[33])\n\t\tprint(heap[34])\n\t\tprint(heap[35])\n\t\tprint(heap[36])\n\t\tprint(heap[37])\n\t\tprint(heap[38])\n\t\tprint(heap[39])\n\t\tprint(heap[40])\n\t\tprint(heap[41])\n\t\tprint(heap[42])\n\t\tprint(heap[43"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\tsum = 0\n\tfor key in dict:\n\t\tsum += dict[key]\n\treturn sum\n\nprint(return_sum({\"a\": 1, \"b\": 2, \"c\": 3}))<｜end▁of▁sentence｜>"}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 != 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))<｜end▁of▁sentence｜>"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\tsum = 0\n\tfor i in arr:\n\t\tsum += i\n\treturn sum\n\nprint(_sum([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t\"\"\"\n\t>>> remove_all_spaces('Hello World')\n\t'HelloWorld'\n\t>>> remove_all_spaces('Hello World  ')\n\t'HelloWorld'\n\t>>> remove_all_spaces('')\n\t''\n\t\"\"\"\n\treturn text.replace(' ', '')\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\tcount = 0\n\tif x == y == z:\n\t\tcount += 1\n\treturn count\n\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(3,3,3))\nprint(test_three_equal(3,3,4))\nprint(test_three_equal(3,4,3))\nprint(test_three_equal(3,4,4))\nprint(test_three_equal(4,3,3))\nprint(test_three_equal(4,3,4))\nprint(test_three_equal(4,4,3))\nprint(test_three_equal(4,4,4))<｜end▁of▁sentence｜>"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t\n\tmin_element = min(arr)  \n\tmin_index = arr.index(min_element)  \n\treturn min_index  \n\narr = [15, 18, 2, 3, 6, 12]  \nn = len(arr)  \nprint(\"Number of rotations required\", count_Rotation(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t\n\ti = 1\n\twhile i*i <= n :\n\t\tif i*i == n :\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n\nn = int(input(\"Enter a number : \"))\n\nif is_Perfect_Square(n) :\n\tprint(\"Yes\")\nelse :\n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t\n\tproduct = 1\n\tfor i in range(0, n): \n\t\tproduct = product * arr[i] \n\t\n\tif (product % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False\n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nif is_Product_Even(arr, n): \n\tprint(\"Product is Even\") \nelse: \n\tprint(\"Product is Odd\")<｜end▁of▁sentence｜>"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = []\n\tfor list in lists:\n\t\tsum_list = 0\n\t\tfor element in list:\n\t\t\tsum_list += element\n\t\tif sum_list > max_sum:\n\t\t\tmax_sum = sum_list\n\t\t\tmax_list = list\n\treturn max_list\n\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))<｜end▁of▁sentence｜>"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\tmax_run = 0\n\tcurr_run = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\tcurr_run += 1\n\t\telse:\n\t\t\tmax_run = max(max_run, curr_run)\n\t\t\tcurr_run = 0\n\tmax_run = max(max_run, curr_run)\n\treturn max_run\n\nprint(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\"\"\"\n\tFinds the first odd number in a list of numbers.\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\nprint(first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_odd([1, 3, 5, 7, 9]))\nprint(first_odd([2, 4, 6, 8, 10]))\nprint(first_odd([1, 3, 5, 7, 9, 11]))\nprint(first_odd([2, 4, 6, 8, 10, 12]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]))\nprint(first_odd([2"}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t\"\"\"\n\tCheck if the given tuples contain the k or not.\n\t\"\"\"\n\tcount = 0\n\tfor i in test_tup:\n\t\tif i == K:\n\t\t\tcount += 1\n\treturn count\n\n\nif __name__ == '__main__':\n\ttest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\tK = 10\n\tprint(check_K(test_tup, K))<｜end▁of▁sentence｜>"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t\"\"\"\n\tCheck if each element of second tuple is smaller than its corresponding index in first tuple.\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\tresult.append(True)\n\t\telse:\n\t\t\tresult.append(False)\n\treturn result\n\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3,"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\tprint(a)\n\tprint(b)\n\tprint(c)\n\tprint(d)\n\ncount_variable(1,2,3,4)<｜end▁of▁sentence｜>"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\"\"\"\n\tCheck if two lists of tuples are identical or not.\n\t\"\"\"\n\ttest_list1_copy = test_list1[:]\n\ttest_list2_copy = test_list2[:]\n\ttest_list1_copy.sort()\n\ttest_list2_copy.sort()\n\tif test_list1_copy == test_list2_copy:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n# Test cases\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(check_identical(test_list1, test_list2))<｜end▁of▁sentence｜>"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\tstreet = street.replace('road', 'rd.')\n\treturn street\n\nprint(road_rd('road'))<｜end▁of▁sentence｜>"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tcount = count + 1\n\treturn count\n\nprint(string_length(\"Hello\"))<｜end▁of▁sentence｜>"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t\"\"\"\n\tFind the area of a rombus.\n\t\"\"\"\n\tarea = (p*q)/2\n\treturn area\n\nprint rombus_area(10,20)<｜end▁of▁sentence｜>"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\tlow = 0\n\tmid = 0\n\thigh = n-1\n\twhile mid <= high:\n\t\tif arr[mid] == 0:\n\t\t\tarr[low], arr[mid] = arr[mid], arr[low]\n\t\t\tlow += 1\n\t\t\tmid += 1\n\t\telif arr[mid] == 1:\n\t\t\tmid += 1\n\t\telse:\n\t\t\tarr[mid], arr[high] = arr[high], arr[mid]\n\t\t\thigh -= 1\n\narr = [0, 1, 2, 0, 1, 2]\nn = len(arr)\nsort_by_dnf(arr, n)\nprint(arr)<｜end▁of▁sentence｜>"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t\"\"\"\n\t>>> clear_tuple((1, 2, 3))\n\t(1, 2, 3)\n\t>>> clear_tuple((1, 2, 3, 4))\n\t(1, 2, 3, 4)\n\t>>> clear_tuple((1, 2, 3, 4, 5))\n\t(1, 2, 3, 4, 5)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6))\n\t(1, 2, 3, 4, 5, 6)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7))\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8))\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n\t(1, 2, 3"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\tdiv_nums = list(filter(lambda x: x%m==0 or x%n==0,nums))\n\treturn div_nums\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nm = 2\nn = 3\nprint(div_of_nums(nums,m,n))<｜end▁of▁sentence｜>"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tctr += 1\n\treturn ctr\n\nprint(lower_ctr(\"The quick Brow Fox\"))<｜end▁of▁sentence｜>"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\tcount = 0\n\tduplicate = []\n\tfor i in lists:\n\t\tif i not in duplicate:\n\t\t\tduplicate.append(i)\n\t\telse:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 219, "source": "MBPP:820", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\tmonthnum1 = int(monthnum1)\n\tif monthnum1 == 2:\n\t\tprint(\"28 days\")\n\telse:\n\t\tprint(\"30 days\")\n\ncheck_monthnum_number(input(\"Enter month number: \"))<｜end▁of▁sentence｜>"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\tdict3 = {}\n\tfor key in dict1:\n\t\tdict3[key] = dict1[key]\n\tfor key in dict2:\n\t\tdict3[key] = dict2[key]\n\treturn dict3\n\nprint merge_dictionaries({'a':1,'b':2},{'c':3,'d':4})<｜end▁of▁sentence｜>"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\"\"\"\n\tChecks if the password is valid.\n\t\"\"\"\n\tvalid = True\n\tif len(p) < 8:\n\t\tvalid = False\n\telif not any(c.isdigit() for c in p):\n\t\tvalid = False\n\telif not any(c.isupper() for c in p):\n\t\tvalid = False\n\telif not any(c.islower() for c in p):\n\t\tvalid = False\n\treturn valid\n\n\nif __name__ == \"__main__\":\n\tprint(pass_validity(\"12345678\"))\n\tprint(pass_validity(\"123456789\"))\n\tprint(pass_validity(\"1234567890\"))\n\tprint(pass_validity(\"12345678901\"))\n\tprint(pass_validity(\"123456789012\"))\n\tprint(pass_validity(\"1234567890123\"))\n\tprint(pass_validity(\"12345678901234\"))\n\tprint(pass_validity(\"123456789012345\"))\n\tprint(pass_validity(\"1234567890123456\"))\n\tprint(pass_validity(\"12345678901234567\"))\n\tprint(pass_validity(\"123456789012345678\"))\n\tprint(pass_validity(\"1234567890123456789\"))\n\tprint(pass_validity(\"12345678901234567890\"))\n\tprint(pass_validity(\"123456789012345678901\"))\n\tprint(pass_validity(\"1234567890123456789012\"))\n\tprint(pass_validity(\"12345678"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\timport re\n\tpattern = re.compile(sample)\n\tmatch = pattern.search(string)\n\tif match :\n\t\tprint(\"String starts with the substring\")\n\telse :\n\t\tprint(\"String does not start with the substring\")\n\ncheck_substring(\"Hello World\", \"Hello\")\ncheck_substring(\"Hello World\", \"World\")\ncheck_substring(\"Hello World\", \"World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World"}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\tl1 = []\n\tfor i in l:\n\t\tif i%2 != 0:\n\t\t\tl1.append(i)\n\treturn l1\n\nl = [1,2,3,4,5,6,7,8,9,10]\nprint(remove_even(l))<｜end▁of▁sentence｜>"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t\"\"\"\n\tThis function takes a list and a list of index and returns a list of elements at the specified index.\n\t\"\"\"\n\tlist_of_elements = []\n\tfor i in list_index:\n\t\tlist_of_elements.append(nums[i])\n\treturn list_of_elements\n\nprint(access_elements([1,2,3,4,5,6,7,8,9,10], [0,2,4,6,8]))<｜end▁of▁sentence｜>"}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t\n\tif a==b==c:\n\t\tprint(\"Equilateral Triangle\")\n\telif a==b or b==c or c==a:\n\t\tprint(\"Isosceles Triangle\")\n\telse:\n\t\tprint(\"Scalene Triangle\")\n\na=int(input(\"Enter the first side of the triangle: \"))\nb=int(input(\"Enter the second side of the triangle: \"))\nc=int(input(\"Enter the third side of the triangle: \"))\n\ncheck_Type_Of_Triangle(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\tsum = 0\n\tfor i in range(len(list1)):\n\t\tsum += list1[i][C]\n\treturn sum\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1))<｜end▁of▁sentence｜>"}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\talpha=0\n\tdig=0\n\tspl=0\n\tfor i in string:\n\t\tif i.isalpha():\n\t\t\talpha+=1\n\t\telif i.isdigit():\n\t\t\tdig+=1\n\t\telse:\n\t\t\tspl+=1\n\tprint(\"Alphabets:\",alpha)\n\tprint(\"Digits:\",dig)\n\tprint(\"Special Characters:\",spl)\n\nstring=input(\"Enter a string:\")\ncount_alpha_dig_spl(string)<｜end▁of▁sentence｜>"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\tinput_dict = {}\n\tfor i in input:\n\t\tif i in input_dict:\n\t\t\tinput_dict[i] += 1\n\t\telse:\n\t\t\tinput_dict[i] = 1\n\tinput_dict = sorted(input_dict.items(), key=lambda x: x[1], reverse=True)\n\treturn input_dict[1][0]\n\nprint(second_frequent(['a', 'b', 'c', 'a', 'c', 'a', 'x']))\nprint(second_frequent(['python', 'ruby', 'perl']))<｜end▁of▁sentence｜>"}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t\"\"\"\n\tRounds up a number to specific digits.\n\t\"\"\"\n\tb = a * 10 ** digits\n\tb = int(b)\n\tb = b / 10 ** digits\n\treturn b\n\nprint(round_up(123.456, 2))<｜end▁of▁sentence｜>"}
{"ID": 230, "source": "MBPP:831", "prompt": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\tcount = 0\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\tcount = count + 1\n\treturn count \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(count_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\timport re\n\tmax_num = re.findall(r'\\d+', input)\n\tmax_num = [int(i) for i in max_num]\n\treturn max(max_num)\n\nprint(extract_max(\"The 2018-2019 season was the 2018-2019 NHL season. The 2018-2019 season was the 2018-2019 NHL season. The 2018-2019 season was the 2018-2019 NHL season.\"))<｜end▁of▁sentence｜>"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\tkeys = [] \n\tfor key in dict: \n\t\tkeys.append(key) \n\treturn keys\n\ndict = {'a': 1, 'b': 2, 'c': 3} \nprint(get_key(dict))<｜end▁of▁sentence｜>"}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\tmatrix = [[0 for i in range(n)] for j in range(n)]\n\ti, j, k = 0, 0, 1\n\twhile i < n and j < n:\n\t\tfor j in range(j, n):\n\t\t\tmatrix[i][j] = k\n\t\t\tk += 1\n\t\ti += 1\n\t\tfor i in range(i, n):\n\t\t\tmatrix[i][j] = k\n\t\t\tk += 1\n\t\tj -= 1\n\t\tfor j in range(j, -1, -1):\n\t\t\tmatrix[i][j] = k\n\t\t\tk += 1\n\t\ti -= 1\n\t\tfor i in range(i, -1, -1):\n\t\t\tmatrix[i][j] = k\n\t\t\tk += 1\n\t\tj += 1\n\treturn matrix\n\nprint(generate_matrix(3))<｜end▁of▁sentence｜>"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\tmax_so_far = a[0] \n\tmax_ending_here = a[0] \n\tfor i in range(1,size): \n\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\tmax_so_far = max(max_so_far, max_ending_here) \n\treturn max_so_far \n\na = [1, 2, 3, -2, 5] \nprint(max_sub_array_sum(a,len(a)))<｜end▁of▁sentence｜>"}
{"ID": 236, "source": "MBPP:837", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif i % 2 != 0: \n\t\t\tsum += i * i * i \n\treturn sum\nn = 5\nprint(cube_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\tn = len(s1)  \n\tcount = 0\n\tfor i in range(n) :  \n\t\tif s1[i] != s2[i] :  \n\t\t\tcount += 1\n\treturn count//2  \n\ns1 = \"010101\"\ns2 = \"101010\"\nprint(min_Swaps(s1,s2))<｜end▁of▁sentence｜>"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n\tnew_tup = sorted(tup, key=lambda x: x[0])\n\t\n\treturn new_tup\n\n\nprint(sort_tuple([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))<｜end▁of▁sentence｜>"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\td = b**2 - 4*a*c\n\tif d == 0:\n\t\tprint(\"Both roots are equal\")\n\telif d > 0:\n\t\tprint(\"Both roots are different\")\n\telse:\n\t\tprint(\"Both roots are imaginary\")\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nCheck_Solution(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tinv_count += 1\n\treturn inv_count \n\narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\"\"\"\n\tThis function returns the number which occurs for odd number of times in the given array.\n\t\"\"\"\n\tresult = 0\n\tfor i in range(0, arr_size):\n\t\tresult = result ^ arr[i]\n\treturn result\n\n# Driver program to test above function\narr = [2, 3, 5, 4, 5, 2, 3, 3, 5, 2, 4, 2]\narr_size = len(arr)\nprint(get_odd_occurence(arr, arr_size))<｜end▁of▁sentence｜>"}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\timport heapq\n\theap = [1]\n\tprimes_index = [0] * len(primes)\n\tresult = []\n\twhile len(result) < n:\n\t\tmin_val = heapq.heappop(heap)\n\t\tresult.append(min_val)\n\t\tfor i in range(len(primes)):\n\t\t\tnew_val = min_val * primes[i]\n\t\t\tif new_val > result[-1]:\n\t\t\t\theapq.heappush(heap, new_val)\n\t\t\t\tprimes_index[i] += 1\n\treturn result[-1]\n\n\nif __name__ == '__main__':\n\tprint nth_super_ugly_number(12, [2, 7, 13, 19])<｜end▁of▁sentence｜>"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\n\todd = [] \n\teven = [] \n\t\n\tfor i in range(n): \n\t\tif (i % 2 == 0): \n\t\t\teven.append(n[i]) \n\t\telse: \n\t\t\todd.append(n[i]) \n\t\n\tif (k <= len(odd)): \n\t\treturn odd[k - 1] \n\telse: \n\t\treturn even[k - len(odd) - 1] \n\nn = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 5\nprint(get_Number(n, k))<｜end▁of▁sentence｜>"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef factorial(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * factorial(n - 1) \n\ndef count_digits(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef count_digits_factorial(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef count_digits_factorial_recursive(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive(n - 1) \n\ndef count_digits_factorial_recursive_2(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_2(n - 1) \n\ndef count_digits_factorial_recursive_3(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_3(n - 1) \n\ndef count_digits_factorial_recursive_4(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_4(n - 1) \n\ndef count_digits_factorial_recursive_5(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_5(n - 1) \n\ndef count_digits_factorial_recursive_6(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_6(n - 1) \n\ndef count_digits_factorial_recursive_7(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n *"}
{"ID": 245, "source": "MBPP:846", "prompt": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\tarr.sort() \n\tdep.sort() \n\ti, j, plat_needed, result = 0, 0, 1, 1\n\twhile (i < n and j < n): \n\t\tif (arr[i] < dep[j]): \n\t\t\tplat_needed -= 1\n\t\t\ti += 1\n\t\telse: \n\t\t\tplat_needed += 1\n\t\t\tj += 1\n\t\tresult = max(result, plat_needed) \n\treturn result \n\narr = [900, 940, 950, 1100, 1500, 1800] \ndep = [910, 1200, 1120, 1130, 1900, 2000] \nn = len(arr) \nprint(find_platform(arr, dep, n))<｜end▁of▁sentence｜>"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\nprint(lcopy((1,)))\nprint(lcopy((1, 2)))\nprint(lcopy((1, 2, 3)))\nprint(lcopy((1, 2, 3, 4)))\nprint(lcopy((1, 2, 3, 4, 5)))\nprint(lcopy((1, 2, 3, 4, 5, 6)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\tarea = (base1+base2)*height/2\n\treturn area\n\nprint area_trapezium(1,2,3)<｜end▁of▁sentence｜>"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif (N % i == 0): \n\t\t\tsum = sum + i \n\treturn sum \n\nN = 100\nprint(Sum(N))<｜end▁of▁sentence｜>"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\tif a+b+c==180:\n\t\tif a==b or b==c or c==a:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nprint(is_triangleexists(100,100,100))<｜end▁of▁sentence｜>"}
{"ID": 250, "source": "MBPP:851", "prompt": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t\n\tSum = 0\n\t\n\tfor i in range(1,N+1): \n\t\tSum = Sum + (1/i) \n\t\n\treturn Sum\n\nN = int(input(\"Enter the value of N: \"))\nSum = Sum_of_Inverse_Divisors(N,Sum)\nprint(\"Sum of Inverse of Divisors: \",Sum)<｜end▁of▁sentence｜>"}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\tnew_list = []\n\tfor num in num_list:\n\t\tif num >= 0:\n\t\t\tnew_list.append(num)\n\treturn new_list\n\nprint(remove_negs([1, 2, 3, -4, 5, -6, 7, -8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n): \n\t\tif (n % i == 0): \n\t\t\tif (i % 2 != 0): \n\t\t\t\tsum = sum + i \n\treturn sum \nn = 10\nprint(sum_of_odd_Factors(n))<｜end▁of▁sentence｜>"}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\theap = []\n\tfor i in rawheap:\n\t\theap.append(i)\n\t\theapify(heap)\n\treturn heap\n\ndef heapify(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\tparent = (i - 1) // 2\n\t\tif heap[parent] < heap[i]:\n\t\t\theap[parent], heap[i] = heap[i], heap[parent]\n\t\t\ti = parent\n\t\telse:\n\t\t\tbreak\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i\n\tif left < length and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < length and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest != i:\n\t\theap[i], heap[largest] = heap[largest], heap[i]\n\t\theapify(heap, largest, length)\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i\n\tif left < length and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < length and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest != i:\n\t\theap[i], heap[largest]"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\n\tif x & 1: \n\t\tprint(\"Odd\") \n\telse: \n\t\tprint(\"Even\") \n\n# Driver code \nx = 10\ncheck_Even_Parity(x)<｜end▁of▁sentence｜>"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t\n\tans = 0\n\t\n\tpos = [i for i in range(n)]\n\t\n\tfor i in range(n) : \n\t\t\n\t\tpos[arr[i]] = i\n\t\t\n\tfor i in range(n) : \n\t\t\n\t\tif (arr[i] != i) : \n\t\t\t\n\t\t\tans += 1\n\t\t\t\n\t\t\tj = i\n\t\t\t\n\t\t\twhile (arr[j] != i) : \n\t\t\t\t\n\t\t\t\ttemp = arr[j]\n\t\t\t\t\n\t\t\t\tarr[j] = arr[i]\n\t\t\t\t\n\t\t\t\tarr[i] = temp\n\t\t\t\t\n\t\t\t\tj = arr[i]\n\t\t\t\t\n\t\t\t\tans += 1\n\t\t\t\t\n\treturn ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\tlist2 = list(map(list, list1))\n\treturn list2\n\nlist1 = [\"Hello\", \"World\", \"I\", \"am\", \"a\", \"list\"]\nprint(listify_list(list1))<｜end▁of▁sentence｜>"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\ndef square_count(input_list):\n\tcount = count_list(input_list)\n\treturn count**2\n\nprint(square_count([[1, 2], [3, 4], [5, 6]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t\"\"\"\n\tGenerate all sublists of a given list.\n\t\"\"\"\n\tsub_list = []\n\tfor i in range(len(my_list) + 1):\n\t\tfor j in range(i):\n\t\t\tsub_list.append(my_list[j:i])\n\treturn sub_list\n\nprint(sub_lists([1, 2, 3]))\nprint(sub_lists([1, 2, 3, 4]))\nprint(sub_lists([1, 2, 3, 4, 5]))\nprint(sub_lists([1, 2, 3, 4, 5, 6]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\timport re\n\tpattern = re.compile('^[a-zA-Z0-9]+$')\n\tif pattern.match(string):\n\t\tprint(\"String is alphanumeric\")\n\telse:\n\t\tprint(\"String is not alphanumeric\")\n\ncheck_alphanumeric(\"abc123\")\ncheck_alphanumeric(\"abc\")\ncheck_alphanumeric(\"abc1234\")\ncheck_alphanumeric(\"abc12345\")\ncheck_alphanumeric(\"abc123456\")\ncheck_alphanumeric(\"abc1234567\")\ncheck_alphanumeric(\"abc12345678\")\ncheck_alphanumeric(\"abc123456789\")\ncheck_alphanumeric(\"abc1234567890\")\ncheck_alphanumeric(\"abc12345678901\")\ncheck_alphanumeric(\"abc123456789012\")\ncheck_alphanumeric(\"abc1234567890123\")\ncheck_alphanumeric(\"abc12345678901234\")\ncheck_alphanumeric(\"abc123456789012345\")\ncheck_alphanumeric(\"abc1234567890123456\")\ncheck_alphanumeric(\"abc12345678901234567\")\ncheck_alphanumeric(\"abc123456789012345678\")\ncheck_alphanumeric(\"abc1234567890123456789\")\ncheck_alphanumeric(\"abc12345678901234567890\")\ncheck_alphanumeric(\"abc123456789012345678901\")\ncheck_alphanumeric(\"abc12345678901234"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t\"\"\"\n\tThis function takes two arguments:\n\ttexts: list of strings\n\tstr: string\n\t\"\"\"\n\tresult = list(filter(lambda x: sorted(x) == sorted(str), texts))\n\treturn result\n\nif __name__ == '__main__':\n\ttexts = ['python', 'php', 'java', 'c++', 'javascript']\n\tstr = 'thp'\n\tprint(anagram_lambda(texts,str))<｜end▁of▁sentence｜>"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t\"\"\"\n\t>>> n_common_words('a a a b c c d d e e e e',2)\n\t['e', 'a']\n\t>>> n_common_words('a a a b c c d d e e e e',3)\n\t['e', 'a', 'd']\n\t>>> n_common_words('a a a b c c d d e e e e',4)\n\t['e', 'a', 'd', 'c']\n\t\"\"\"\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word not in word_count:\n\t\t\tword_count[word] = 1\n\t\telse:\n\t\t\tword_count[word] += 1\n\t\n\tword_count_list = []\n\tfor key,value in word_count.items():\n\t\tword_count_list.append((value,key))\n\t\n\tword_count_list.sort(reverse=True)\n\t\n\tresult = []\n\tfor i in range(n):\n\t\tresult.append(word_count_list[i][1])\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t\n\tarr.sort() \n\t\n\tmax_count = 1\n\tcount = 1\n\t\n\tfor i in range(1, n): \n\t\tif (arr[i] - arr[i - 1] == 1): \n\t\t\tcount += 1\n\t\t\tmax_count = max(max_count, count) \n\t\telse: \n\t\t\tcount = 1\n\t\n\treturn max_count \n\n\n# Driver code \narr = [1, 9, 3, 10, 4, 20, 2] \nn = len(arr) \nprint(\"Length of the longest consecutive subsequence is\", \n\tfind_longest_conseq_subseq(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\tpalindromes = []\n\tfor text in texts:\n\t\tif text == text[::-1]:\n\t\t\tpalindromes.append(text)\n\treturn palindromes\n\nprint(palindrome_lambda([\"madam\", \"racecar\", \"mom\", \"dad\"]))<｜end▁of▁sentence｜>"}
{"ID": 264, "source": "MBPP:865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\tprint(list(map(lambda x:x*n,nums)))\n\nnums=[1,2,3,4,5]\nntimes_list(nums,3)<｜end▁of▁sentence｜>"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\tmonthname = monthname2.lower()\n\tif monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"august\" or monthname == \"october\" or monthname == \"december\":\n\t\tprint(\"31 days\")\n\telif monthname == \"april\" or monthname == \"june\" or monthname == \"september\" or monthname == \"november\":\n\t\tprint(\"30 days\")\n\telse:\n\t\tprint(\"28 days\")\n\ncheck_monthnumb(\"January\")\ncheck_monthnumb(\"February\")\ncheck_monthnumb(\"March\")\ncheck_monthnumb(\"April\")\ncheck_monthnumb(\"May\")\ncheck_monthnumb(\"June\")\ncheck_monthnumb(\"July\")\ncheck_monthnumb(\"August\")\ncheck_monthnumb(\"September\")\ncheck_monthnumb(\"October\")\ncheck_monthnumb(\"November\")\ncheck_monthnumb(\"December\")<｜end▁of▁sentence｜>"}
{"ID": 266, "source": "MBPP:867", "prompt": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\tsum = 0\n\tfor i in range(0,n):  \n\t\tsum += arr[i]  \n\tdiff = sum - 2*(sum//2)  \n\treturn diff  \narr = [1, 2, 3, 4, 5]  \nn = len(arr)  \nprint(min_Num(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\ta = a.split() \n\treturn len(a[-1]) \n\nprint(length_Of_Last_Word(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\tlist2 = []\n\tfor i in list1:\n\t\tif leftrange[0] <= i[0] <= leftrange[1] and leftrange[0] <= i[1] <= leftrange[1]:\n\t\t\tlist2.append(i)\n\treturn list2\n\nprint(remove_list_range([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], [4, 6], [10, 12]))<｜end▁of▁sentence｜>"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\tsum = 0\n\tfor i in nums:\n\t\tif i > 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_positivenum([1, 2, 3, -4, 5, 6, -7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\tlength1 = len(string1) \n\tlength2 = len(string2) \n\ttemp = string1 + string1 \n\tif length1 != length2: \n\t\treturn False\n\telif sorted(string1) == sorted(string2): \n\t\treturn True\n\telse: \n\t\treturn False\nstring1 = \"ABACD\"\nstring2 = \"CDABA\"\nif are_Rotations(string1, string2): \n\tprint(\"Strings are rotations of each other\") \nelse: \n\tprint(\"Strings are not rotations of each other\")<｜end▁of▁sentence｜>"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t\n\tlist1_len = len(list1)\n\tlist2_len = len(list2)\n\t\n\tif list1_len > list2_len:\n\t\treturn False\n\t\n\tfor i in range(list1_len):\n\t\tif list1[i] not in list2:\n\t\t\treturn False\n\t\n\treturn True\n\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5,6]\n\nprint(check_subset(list1,list2))<｜end▁of▁sentence｜>"}
{"ID": 272, "source": "MBPP:873", "prompt": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t\"\"\"\n\tThis function returns the nth number in the fibonacci sequence.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))<｜end▁of▁sentence｜>"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\tstr1_len = len(str1)\n\tstr2_len = len(str2)\n\tif str1_len == str2_len:\n\t\ti = 0\n\t\twhile i < str1_len:\n\t\t\tif str1[i] != str2[i]:\n\t\t\t\treturn False\n\t\t\ti += 1\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_Concat(\"abc\",\"abc\"))\nprint(check_Concat(\"abc\",\"abcd\"))<｜end▁of▁sentence｜>"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\tmin_diff = abs(test_list[0][0] - test_list[0][1])\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tdiff = abs(test_list[i][0] - test_list[j][0])\n\t\t\tif diff < min_diff:\n\t\t\t\tmin_diff = diff\n\treturn min_diff\n\ntest_list = [(1, 2), (4, 5), (6, 7), (8, 9)]\nprint(min_difference(test_list))<｜end▁of▁sentence｜>"}
{"ID": 275, "source": "MBPP:876", "prompt": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\tlcm = (x*y)//gcd(x,y)\n\treturn lcm\n\ndef gcd(x, y):\n\tif x == 0:\n\t\treturn y\n\treturn gcd(y%x, x)\n\nprint(lcm(12, 18))<｜end▁of▁sentence｜>"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\"\"\"\n\tCheck if the given tuple contains only K elements.\n\t\"\"\"\n\tcount = 0\n\tfor i in test_tuple:\n\t\tif i == K:\n\t\t\tcount += 1\n\tif count == K:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n# Test cases\nprint(check_tuples((1, 2, 3, 4, 5), 3))\nprint(check_tuples((1, 2, 3, 4, 5), 2))\nprint(check_tuples((1, 2, 3, 4, 5), 5))\nprint(check_tuples((1, 2, 3, 4, 5), 1))<｜end▁of▁sentence｜>"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a.*?b$')\n\tmatch = pattern.search(text)\n\tif match:\n\t\tprint(match.group())\n\telse:\n\t\tprint(\"No match\")\n\ntext_match(\"abbbb\")\ntext_match(\"abbbbb\")\ntext_match(\"abbbbbb\")\ntext_match(\"abbbbbbb\")\ntext_match(\"abbbbbbbb\")\ntext_match(\"abbbbbbbbb\")\ntext_match(\"abbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\td = b*b - 4*a*c\n\tif d < 0 :\n\t\tprint(\"No real roots\")\n\telif d == 0 :\n\t\tprint(\"One real root\")\n\telse :\n\t\tprint(\"Two real roots\")\n\na = int(input(\"Enter a : \"))\nb = int(input(\"Enter b : \"))\nc = int(input(\"Enter c : \"))\n\nCheck_Solution(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn even_sum, odd_sum\n\nprint(sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\tperimeter = 2*(b+h)\n\treturn perimeter\n\nprint(parallelogram_perimeter(10,20))<｜end▁of▁sentence｜>"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\tdiv_nums = list(filter(lambda x: (x%m==0) and (x%n==0),nums))\n\treturn div_nums\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nm = 2\nn = 3\nprint(div_of_nums(nums,m,n))<｜end▁of▁sentence｜>"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t\n\tcount = 0\n\t\n\tfor i in range(l,r+1): \n\t\tif (n & (1 << i)): \n\t\t\tcount += 1\n\t\n\treturn count\n\nn = 15\nl = 1\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))<｜end▁of▁sentence｜>"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\tdict1={}\n\tdict2={}\n\t\n\tfor i in range(len(str1)):\n\t\tif str1[i] not in dict1:\n\t\t\tdict1[str1[i]]=str2[i]\n\t\telse:\n\t\t\tif dict1[str1[i]] != str2[i]:\n\t\t\t\treturn False\n\t\n\tfor i in range(len(str2)):\n\t\tif str2[i] not in dict2:\n\t\t\tdict2[str2[i]]=str1[i]\n\t\telse:\n\t\t\tif dict2[str2[i]] != str1[i]:\n\t\t\t\treturn False\n\t\n\treturn True\n\nstr1=input(\"Enter the first string: \")\nstr2=input(\"Enter the second string: \")\n\nif is_Isomorphic(str1,str2):\n\tprint(\"The two strings are isomorphic\")\nelse:\n\tprint(\"The two strings are not isomorphic\")<｜end▁of▁sentence｜>"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\tsum = 0\n\tfor i in numbers:\n\t\tsum += i\n\treturn sum/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t\n\tif n & 1 : \n\t\tprint(n, \"is odd\") \n\telse : \n\t\tprint(n, \"is even\") \n\n# Driver code \nn = 10\nis_odd(n)<｜end▁of▁sentence｜>"}
{"ID": 287, "source": "MBPP:888", "prompt": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i] - test_tup2[i])\n\treturn tuple(result)\n\nprint substract_elements((1, 2, 3), (3, 2, 1))<｜end▁of▁sentence｜>"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\"\"\"\n\t>>> reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\t[[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\t\"\"\"\n\treturn [list(reversed(l)) for l in lists]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t\n\tlow = 0\n\thigh = n-1\n\t\n\twhile(low<=high) : \n\t\tmid = low + (high-low)//2\n\t\t\n\t\tif(arr1[mid] == arr2[mid]) : \n\t\t\tlow = mid + 1\n\t\telse : \n\t\t\thigh = mid - 1\n\t\n\treturn low\n\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5]\nn = len(arr1)\n\nprint(find_Extra(arr1,arr2,n))<｜end▁of▁sentence｜>"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\n\tA = str(A) \n\tB = str(B) \n\t\n\tif len(A) == len(B): \n\t\treturn True\n\telse: \n\t\treturn False\n\nA = 12345\nB = 123456\n\nif same_Length(A,B): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t\"\"\"\n\t>>> remove_spaces('Hello  world')\n\t'Hello world'\n\t>>> remove_spaces('Hello  world  ')\n\t'Hello world'\n\t>>> remove_spaces('Hello  world  ')\n\t'Hello world'\n\t\"\"\"\n\treturn text.replace('  ', ' ')\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n\tres = [] \n\tfor i in lst: \n\t\tres.append(i[-1]) \n\treturn res \n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(Extract(lst))<｜end▁of▁sentence｜>"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t\"\"\"\n\t>>> float_to_tuple('1.23456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345678')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234"}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\tn = len(A)\n\tmax_sum = [0] * n\n\tmax_sum[0] = A[0]\n\tmax_sum[1] = max(A[0], A[1])\n\tfor i in range(2, n):\n\t\tmax_sum[i] = max(max_sum[i-1], max_sum[i-2] + A[i])\n\treturn max_sum[n-1]\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_sum_subseq(A))<｜end▁of▁sentence｜>"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t\"\"\"\n\t>>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n\t[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n\t\"\"\"\n\treturn sorted(tuples, key=lambda x: x[-1])\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\n\tif word in sentence: \n\t\tprint(\"Yes\") \n\telse: \n\t\tprint(\"No\") \n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"dog\"\nis_Word_Present(sentence, word)<｜end▁of▁sentence｜>"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\tresult = []\n\ti = 0\n\twhile i < len(numbers):\n\t\tresult.append(numbers[i])\n\t\ti += n\n\treturn result\n\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))<｜end▁of▁sentence｜>"}
{"ID": 298, "source": "MBPP:899", "prompt": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t\n\tif n == 1: \n\t\treturn True\n\t\n\tif arr[0] <= arr[1]: \n\t\treturn check(arr[1:], n-1) \n\t\n\treturn False\n\narr = [1, 3, 2] \nn = len(arr) \nif check(arr, n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t\"\"\"\n\t>>> match_num('123456789')\n\tTrue\n\t>>> match_num('12345678')\n\tFalse\n\t>>> match_num('1234567890')\n\tFalse\n\t\"\"\"\n\treturn string[0] == '1'\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 300, "source": "MBPP:901", "prompt": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t\"\"\"\n\tFinds the smallest multiple of the first n numbers.\n\t\"\"\"\n\tmultiple = 1\n\tfor i in range(1, n + 1):\n\t\tmultiple *= i\n\treturn multiple\n\nprint(smallest_multiple(10))<｜end▁of▁sentence｜>"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\td3 = {}\n\tfor key in d1:\n\t\tif key in d2:\n\t\t\td3[key] = d1[key] + d2[key]\n\t\telse:\n\t\t\td3[key] = d1[key]\n\tfor key in d2:\n\t\tif key not in d1:\n\t\t\td3[key] = d2[key]\n\treturn d3\n\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'a':2,'b':3,'d':4}\nprint(add_dict(d1,d2))<｜end▁of▁sentence｜>"}
{"ID": 302, "source": "MBPP:903", "prompt": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\tcount = 0\n\twhile (n > 0) :  \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\nprint(count_Unset_Bits(10))<｜end▁of▁sentence｜>"}
{"ID": 303, "source": "MBPP:904", "prompt": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t\"\"\"\n\t>>> even_num(2)\n\tTrue\n\t>>> even_num(3)\n\tFalse\n\t\"\"\"\n\treturn x % 2 == 0\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\tsum = 0\n\tfor i in range(n+1): \n\t\tsum += (i * i) \n\treturn sum\n\nn = 5\nprint(sum_of_square(n))<｜end▁of▁sentence｜>"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\timport re\n\tpattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\tmatch = re.search(pattern, url)\n\tif match:\n\t\tdate = match.group()\n\t\tprint(date)\n\telse:\n\t\tprint(\"No match found\")\n\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:l\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:m\")\nextract_date(\"https://www.google.com/search"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_numbers = []\n\ti = 1\n\twhile len(lucky_numbers) < n:\n\t\tif i % 3 != 0 and i % 5 != 0:\n\t\t\tlucky_numbers.append(i)\n\t\ti += 1\n\treturn lucky_numbers\n\nprint(lucky_num(10))<｜end▁of▁sentence｜>"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\tlow = 0\n\thigh = n - 1\n\twhile low <= high: \n\t\tmid = (low + high) // 2\n\t\tif arr[mid] == mid: \n\t\t\treturn mid \n\t\telif arr[mid] < mid: \n\t\t\tlow = mid + 1\n\t\telse: \n\t\t\thigh = mid - 1\n\treturn -1\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(find_fixed_point(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\"\"\"\n\tFinds the previous palindrome of a specified number.\n\t\"\"\"\n\tnum_str = str(num)\n\tnum_len = len(num_str)\n\tnum_half = num_len // 2\n\tnum_half_rev = num_half - 1\n\tnum_half_rev_str = num_str[num_half_rev::-1]\n\tnum_half_rev_str_len = len(num_half_rev_str)\n\tnum_half_rev_str_half = num_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev = num_half_rev_str_half - 1\n\tnum_half_rev_str_half_rev_str = num_half_rev_str[num_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev = num_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str = num_half_rev_str_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev_str_half_"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if the date is valid.\n\t\"\"\"\n\tif m < 1 or m > 12:\n\t\treturn False\n\tif d < 1 or d > 31:\n\t\treturn False\n\tif y < 1:\n\t\treturn False\n\tif m == 2:\n\t\tif d > 28:\n\t\t\treturn False\n\telif m in [4, 6, 9, 11]:\n\t\tif d > 30:\n\t\t\treturn False\n\treturn True\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\twhile True:\n\t\ttry:\n\t\t\tmonth, day, year = map(int, input().split())\n\t\t\tif check_date(month, day, year):\n\t\t\t\tprint(\"Valid\")\n\t\t\telse:\n\t\t\t\tprint(\"Invalid\")\n\t\texcept EOFError:\n\t\t\tbreak\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\timport heapq\n\theap = []\n\tfor num in nums:\n\t\theapq.heappush(heap, num)\n\t\theapq.heapify(heap)\n\t\theapq.heappop(heap)\n\treturn heap[0] * heap[1] * heap[2]\n\n\nif __name__ == '__main__':\n\tprint(maximum_product([1, 2, 3, 4]))<｜end▁of▁sentence｜>"}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\ndef ln(x):\n\t\"\"\"\n\tFind ln of x.\n\t\"\"\"\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t\"\"\"\n\t>>> end_num('12345')\n\tTrue\n\t>>> end_num('123456')\n\tFalse\n\t>>> end_num('1234567')\n\tFalse\n\t>>> end_num('12345678')\n\tTrue\n\t\"\"\"\n\treturn string[-1] in '0123456789'\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t\n    if len(s) == 0:  \n        return True\n    if len(s) == 1:  \n        return True\n    if len(s) == 2:  \n        return True\n    if s[0] == s[1]:  \n        return False\n    return is_Two_Alter(s[2:])  \n  \n# Driver code  \ns = \"ababab\"  \nif is_Two_Alter(s):  \n    print(\"Yes\")  \nelse:  \n    print(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\tprint(positive_nums)\n\tprint(negative_nums)\n\nrearrange_numbs([1, 2, 3, -4, -1, 4])<｜end▁of▁sentence｜>"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t\n\t# Sort array elements \n\tA.sort() \n\t\n\tres = False\n\t\n\t# Fix the first element of the triplet \n\tfor i in range(0, arr_size - 2): \n\t\t\n\t\t# To find the other two elements, start two index variables \n\t\t# from two corners of the array and move them toward each other \n\t\tl = i + 1\n\t\tr = arr_size - 1\n\t\twhile l < r: \n\t\t\t\n\t\t\tif A[i] + A[l] + A[r] == sum: \n\t\t\t\tprint(\"Triplet is\", A[i], \", \", A[l], \", \", A[r]) \n\t\t\t\tres = True\n\t\t\t\tbreak\n\t\t\telif A[i] + A[l] + A[r] < sum: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tr -= 1\n\t\tif res: \n\t\t\tbreak\n\treturn res\n\n# Driver program to test above function \nA = [1, 4, 45, 6, 10, 8] \narr_size = len(A) \nsum = 22\nfind_triplet_array(A, arr_size, sum)<｜end▁of▁sentence｜>"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t\"\"\"\n\t>>> text_uppercase_lowercase('AaBbCc')\n\t['Aa', 'Bb', 'Cc']\n\t>>> text_uppercase_lowercase('AaBbCcDd')\n\t['Aa', 'Bb', 'Cc', 'Dd']\n\t>>> text_uppercase_lowercase('AaBbCcDdEe')\n\t['Aa', 'Bb', 'Cc', 'Dd', 'Ee']\n\t>>> text_uppercase_lowercase('AaBbCcDdEeFf')\n\t['Aa', 'Bb', 'Cc', 'Dd', 'Ee', 'Ff']\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip(range(len(text)), range(1, len(text)+1)) if text[i].isupper() and text[j].islower()]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 317, "source": "MBPP:918", "prompt": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\ttable = [0 for k in range(n+1)] \n\ttable[0] = 1\n\tfor i in range(0, m): \n\t\tfor j in range(S[i], n+1): \n\t\t\ttable[j] += table[j-S[i]] \n\treturn table[n] \n\n\nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n))<｜end▁of▁sentence｜>"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\tresult = 1\n\tfor item in items:\n\t\tresult *= item\n\treturn result\n\nprint(multiply_list([1, 2, 3, 4]))<｜end▁of▁sentence｜>"}
{"ID": 319, "source": "MBPP:920", "prompt": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\tnew_list = []\n\tfor i in test_list:\n\t\tif i != (None, None):\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nprint(remove_tuple([(1, 2), (3, 4), (None, None), (5, 6), (7, 8)]))<｜end▁of▁sentence｜>"}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t\"\"\"\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 3)\n\t[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 4)\n\t[(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 5)\n\t[(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 6)\n\t[(1, 2, 3, 4, 5, 6), (7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 7)\n\t[(1, 2, 3, 4, 5, 6, 7), (8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 8)\n\t[(1, 2, 3, 4, 5, 6, 7, 8), (9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 9)\n\t[(1, 2, 3, 4, 5, 6, 7, 8, 9), (10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 10)\n\t[(1, 2, 3,"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\tarr.sort()\n\treturn arr[-1] * arr[-2]\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([1, 5, 10, 90, 10, 10, 10]))<｜end▁of▁sentence｜>"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t\n\tif m == 0 or n == 0:\n\t\treturn 0\n\t\n\tif X[m-1] == Y[n-1]:\n\t\treturn 1 + super_seq(X, Y, m-1, n-1)\n\t\n\treturn max(super_seq(X, Y, m, n-1), super_seq(X, Y, m-1, n))\n\ndef shortest_super_seq(X, Y):\n\t\n\tm = len(X)\n\tn = len(Y)\n\t\n\treturn super_seq(X, Y, m, n)\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\n\nprint(shortest_super_seq(X, Y))<｜end▁of▁sentence｜>"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t\"\"\"\n\tThis function takes two numbers as arguments and returns the maximum of the two.\n\t\"\"\"\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\nprint(max_of_two(10, 20))\nprint(max_of_two(100, 200))\nprint(max_of_two(1000, 2000))\nprint(max_of_two(10000, 20000))\nprint(max_of_two(100000, 200000))\nprint(max_of_two(1000000, 2000000))\nprint(max_of_two(10000000, 20000000))\nprint(max_of_two(100000000, 200000000))\nprint(max_of_two(1000000000, 2000000000))\nprint(max_of_two(10000000000, 20000000000))\nprint(max_of_two(100000000000, 200000000000))\nprint(max_of_two(1000000000000, 2000000000000))\nprint(max_of_two(10000000000000, 20000000000000))\nprint(max_of_two(100000000000000, 200000000000000))\nprint(max_of_two(1000000000000000, 2000000000000000))\nprint(max_of_two(10000000000000"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\tproduct = 1\n\tfor i in nums:\n\t\tproduct *= i\n\treturn product\n\nprint(mutiple_tuple((1, 2, 3, 4, 5)))<｜end▁of▁sentence｜>"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\"\"\"\n\tFind the n-th rencontres number of m.\n\t\"\"\"\n\ti = 1\n\twhile i < n:\n\t\ti *= m\n\treturn i\n\ndef main():\n\tprint(rencontres_number(10, 2))\n\tprint(rencontres_number(10, 3))\n\tprint(rencontres_number(10, 4))\n\tprint(rencontres_number(10, 5))\n\tprint(rencontres_number(10, 6))\n\tprint(rencontres_number(10, 7))\n\tprint(rencontres_number(10, 8))\n\tprint(rencontres_number(10, 9))\n\tprint(rencontres_number(10, 10))\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\tself.data = data \n\tself.left = None\n\tself.right = None\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max(height(root.left), height(root.right))\n\n\"\"\"\nWrite a function to calculate the number of nodes in the given binary tree.\n\"\"\"\ndef count(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count(root.left) + count(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\""}
{"ID": 327, "source": "MBPP:928", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\tdate = dt.split('-')\n\tdate[0], date[2] = date[2], date[0]\n\treturn '-'.join(date)\n\nprint(change_date_format('2020-01-01'))<｜end▁of▁sentence｜>"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\tcount = 0  \n\tfor x in tuplex:  \n\t\tif x == value:  \n\t\t\tcount += 1  \n\treturn count  \ntuplex = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'ab*')\n\tmatch = pattern.search(text)\n\tif match:\n\t\tprint(match.group())\n\telse:\n\t\tprint(\"No match\")\n\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\tsum = 0\n\tfor i in range(1, number + 1):\n\t\tsum += i ** 3\n\treturn sum\n\nprint(sum_series(10))<｜end▁of▁sentence｜>"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\tl = list(set(l))\n\treturn l\n\nprint(remove_duplic_list(['a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\timport re\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\nprint(camel_to_snake('camelCaseString'))<｜end▁of▁sentence｜>"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\"\"\"\n\tReturns the nth delannoy number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn m\n\telse:\n\t\treturn (m * dealnnoy_num(n - 1, m) + dealnnoy_num(n - 2, m))\n\n\nif __name__ == \"__main__\":\n\tprint(dealnnoy_num(10, 2))<｜end▁of▁sentence｜>"}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i**2\n\treturn sum\n\nprint(series_sum(10))<｜end▁of▁sentence｜>"}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t\"\"\"\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 3), (2, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 0])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 1])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 2])\n\t[(1, 6), (3, 5), (2, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2, 3])\n\t[(1, 2), ("}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\tmax = 0\n\tmax_char = ''\n\tfor i in count:\n\t\tif count[i] > max:\n\t\t\tmax = count[i]\n\t\t\tmax_char = i\n\treturn max_char\n\nprint(max_char('abbcccdddd'))<｜end▁of▁sentence｜>"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[p] - B[q])\n\td2 = abs(A[p] - C[r])\n\td3 = abs(B[q] - C[r])\n\tif d1 <= d2 and d1 <= d3:\n\t\treturn A[p], B[q], C[r]\n\telif d2 <= d1 and d2 <= d3:\n\t\treturn B[q], A[p], C[r]\n\telse:\n\t\treturn C[r], B[q], A[p]\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len(A) and j < len(B) and k < len(C):\n\t\td1 = abs(A[i] - B[j])\n\t\td2 = abs(A[i] - C[k])\n\t\td3 = abs(B[j] - C[k])\n\t\tif d1 <= d2 and d1 <= d3:\n\t\t\treturn A[i], B[j], C[k]\n\t\telif d2 <= d1 and d2 <= d3:\n\t\t\treturn B[j], A[i], C[k]\n\t\telse:\n\t\t\treturn C[k], B[j], A[i]\n\t\ti += 1\n\t\tj += 1\n\t\tk += 1\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len("}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\tmodels.sort(key=lambda x: x['model'])\n\treturn models\n\nmodels = [\n\t{'model': 'X5', 'mpg': 24, 'cyl': 4, 'disp': 160, 'hp': 110, 'drat': 4.0},\n\t{'model': 'X2', 'mpg': 14, 'cyl': 4, 'disp': 88, 'hp': 110, 'drat': 4.0},\n\t{'model': 'X6', 'mpg': 22, 'cyl': 4, 'disp': 160, 'hp': 110, 'drat': 4.0},\n\t{'model': 'X4', 'mpg': 21, 'cyl': 4, 'disp': 108, 'hp': 110, 'drat': 4.0},\n\t{'model': 'X3', 'mpg': 19, 'cyl': 4, 'disp': 91, 'hp': 110, 'drat': 4.0},\n\t{'model': 'X1', 'mpg': 15, 'cyl': 8, 'disp': 258, 'hp': 110, 'drat': 4.0},\n]\n\nprint(sorted_models(models))<｜end▁of▁sentence｜>"}
{"ID": 339, "source": "MBPP:940", "prompt": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\tn = len(arr)\n\tfor i in range(n//2 - 1, -1, -1):\n\t\theapify(arr, n, i)\n\tfor i in range(n-1, 0, -1):\n\t\tarr[i], arr[0] = arr[0], arr[i]\n\t\theapify(arr, i, 0)\n\ndef heapify(arr, n, i):\n\tlargest = i\n\tl = 2*i + 1\n\tr = 2*i + 2\n\tif l < n and arr[l] > arr[largest]:\n\t\tlargest = l\n\tif r < n and arr[r] > arr[largest]:\n\t\tlargest = r\n\tif largest != i:\n\t\tarr[i], arr[largest] = arr[largest], arr[i]\n\t\theapify(arr, n, largest)\n\narr = [12, 11, 13, 5, 6, 7]\nheap_sort(arr)\nprint(arr)<｜end▁of▁sentence｜>"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif isinstance(i, tuple):\n\t\t\tbreak\n\t\tcount += 1\n\treturn count\n\nprint(count_elim([1, 2, 3, 4, 5, (1, 2, 3)]))<｜end▁of▁sentence｜>"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t\"\"\"\n\tThis function takes two arguments:\n\ttest_tup: a tuple\n\tcheck_list: a list\n\t\"\"\"\n\tfor i in test_tup:\n\t\tif i in check_list:\n\t\t\treturn True\n\treturn False\n\n\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, check_list))<｜end▁of▁sentence｜>"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\tcombined_list = []\n\tcombined_list.extend(num1)\n\tcombined_list.extend(num2)\n\tcombined_list.sort()\n\treturn combined_list\n\nprint(combine_lists([1,3,5,7],[2,4,6,8]))<｜end▁of▁sentence｜>"}
{"ID": 343, "source": "MBPP:944", "prompt": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\tnum_list = []\n\tpos_list = []\n\tfor i in range(len(text)):\n\t\tif text[i].isdigit():\n\t\t\tnum_list.append(int(text[i]))\n\t\t\tpos_list.append(i)\n\tprint(num_list)\n\tprint(pos_list)\n\nnum_position(\"123456789\")<｜end▁of▁sentence｜>"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t\"\"\"\n\t>>> tuple_to_set((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\t>>> tuple_to_set((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\t>>> tuple_to_set((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\t\"\"\"\n\treturn set(t)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\td={}\n\tfor i in s:\n\t\tif i in a:\n\t\t\td[i]=d.get(i,0)+1\n\tprint(d)\n\ns=input(\"Enter the string:\")\na=input(\"Enter the elements:\")\nmost_common_elem(s,a)<｜end▁of▁sentence｜>"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\tlist1.sort(key=len)\n\tprint(list1[0])\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nlen_log(list1)<｜end▁of▁sentence｜>"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t>>> get_item((1,2,3,4,5),2)\n\t3\n\t\"\"\"\n\treturn tup1[index]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 348, "source": "MBPP:949", "prompt": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t\"\"\"\n\tSort the given tuple list basis the total digits in tuple.\n\t\"\"\"\n\ttest_list.sort(key=lambda x: len(str(x)))\n\treturn test_list\n\n\nif __name__ == '__main__':\n\ttest_list = [(2, 54), (54, 2), (13, 2), (12, 1), (6, 1)]\n\tprint(sort_list(test_list))<｜end▁of▁sentence｜>"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t\"\"\"\n\t>>> chinese_zodiac(2016)\n\t'Rat'\n\t>>> chinese_zodiac(2017)\n\t'Ox'\n\t>>> chinese_zodiac(2018)\n\t'Tiger'\n\t>>> chinese_zodiac(2019)\n\t'Rabbit'\n\t>>> chinese_zodiac(2020)\n\t'Dragon'\n\t>>> chinese_zodiac(2021)\n\t'Snake'\n\t>>> chinese_zodiac(2022)\n\t'Horse'\n\t>>> chinese_zodiac(2023)\n\t'Goat'\n\t>>> chinese_zodiac(2024)\n\t'Monkey'\n\t>>> chinese_zodiac(2025)\n\t'Rooster'\n\t>>> chinese_zodiac(2026)\n\t'Dog'\n\t>>> chinese_zodiac(2027)\n\t'Pig'\n\t\"\"\"\n\tyear = int(year)\n\tif year % 12 == 0:\n\t\treturn 'Monkey'\n\telif year % 12 == 1:\n\t\treturn 'Rooster'\n\telif year % 12 == 2:\n\t\treturn 'Dog'\n\telif year % 12 == 3:\n\t\treturn 'Pig'\n\telif year % 12 == 4:\n\t\treturn 'Rat'\n\telif year % 12 == 5:\n\t\treturn 'Ox'\n\telif year % 12 == 6:\n\t\treturn 'Tiger'\n\telif year % 12 == 7:\n\t\treturn 'Rabbit'\n\telif year % 12 == 8:\n\t\treturn 'Dragon'\n\telif year % 12 == 9:\n\t\treturn 'Snake'\n\telif year % 12 == 10:\n\t\treturn 'Horse'\n\telif year % 12 == 11:\n\t\treturn 'Goat'\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t\"\"\"\n\tFinds the maximum of similar indices in two lists of tuples.\n\t\"\"\"\n\tmax_similar_indices = []\n\tfor i in range(len(test_list1)):\n\t\tmax_similar_indices.append(max(test_list1[i][0], test_list2[i][0]))\n\treturn max_similar_indices\n\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6)]\n\nprint(max_similar_indices(test_list1, test_list2))<｜end▁of▁sentence｜>"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\n\tres = 1\n\t\n\t# Since C(n, k) = C(n, n-k) \n\tif (r > n - r): \n\t\tr = n - r \n\t\n\t# Calculate value of [n * (n-1) *---* (n-r + 1)] / [k * (k-1) *----* 1] \n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p \n\t\n\t# return nCk mod p \n\treturn res % p\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t\n\tdp = [0] * (n + 1) \n\tdp[0] = 1\n\t\n\tfor i in range(1, n + 1): \n\t\tfor j in range(i - 1, -1, -1): \n\t\t\tdp[i] = dp[i] + dp[j] \n\t\n\treturn dp[n] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\tprofit = sale_amount - actual_cost\n\tif profit > 0:\n\t\treturn profit\n\telse:\n\t\treturn None\n\nprint(profit_amount(100,120))\nprint(profit_amount(100,90))<｜end▁of▁sentence｜>"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t\"\"\"\n\tReturns True if n is abundant, False otherwise.\n\t\"\"\"\n\tsum_of_divisors = 0\n\tfor i in range(1, n):\n\t\tif n % i == 0:\n\t\t\tsum_of_divisors += i\n\tif sum_of_divisors > n:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\ndef main():\n\t\"\"\"\n\tTests the function.\n\t\"\"\"\n\tprint(is_abundant(12))\n\tprint(is_abundant(18))\n\tprint(is_abundant(20))\n\tprint(is_abundant(24))\n\tprint(is_abundant(28))\n\tprint(is_abundant(30))\n\tprint(is_abundant(36))\n\tprint(is_abundant(40))\n\tprint(is_abundant(42))\n\tprint(is_abundant(48))\n\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\timport re\n\tresult = re.split(r'([A-Z][a-z]+)', text)\n\treturn result\n\nprint(split_list('Python is a high-level, general-purpose programming language that is dynamically typed and garbage-collected.'))<｜end▁of▁sentence｜>"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\tpos = 0\n\twhile n > 0:\n\t\tn = n & (n-1)\n\t\tpos += 1\n\treturn pos\n\nprint(get_First_Set_Bit_Pos(10))<｜end▁of▁sentence｜>"}
{"ID": 357, "source": "MBPP:958", "prompt": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\troman_num = \"\"\n\troman_dict = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n\tfor key in roman_dict:\n\t\troman_num += roman_dict[key] * (num // key)\n\t\tnum %= key\n\treturn roman_num\n\nprint(int_to_roman(1990))<｜end▁of▁sentence｜>"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\tsum = 0\n\tfor i in lst: \n\t\tsum += i \n\treturn sum/len(lst) \n\nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list is : \", Average(lst))<｜end▁of▁sentence｜>"}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t\"\"\"\n\tThis function returns the number of ways to tile a floor of size n x m.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 5\n\t\n\ta = get_noOfways(n-1)\n\tb = get_noOfways(n-2)\n\tc = get_noOfways(n-3)\n\t\n\treturn a+b+c\n\nprint get_noOfways(4)<｜end▁of▁sentence｜>"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\troman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n\tresult = 0\n\ti = 0\n\twhile i < len(s):\n\t\tif i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n\t\t\tresult -= roman_dict[s[i]]\n\t\telse:\n\t\t\tresult += roman_dict[s[i]]\n\t\ti += 1\n\treturn result\n\nprint(roman_to_int('MCMXCIV'))<｜end▁of▁sentence｜>"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_Even(1,10))<｜end▁of▁sentence｜>"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\tdiscriminant = (y**2) - (4*x*z)\n\treturn discriminant\n\nprint(discriminant_value(1,4,1))<｜end▁of▁sentence｜>"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tcount = 0\n\tfor i in s: \n\t\tcount += 1\n\treturn count\n\nprint(word_len(\"Hello\"))<｜end▁of▁sentence｜>"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\ttext = text.replace(' ', '_')\n\ttext = text.replace('-', '_')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('Camel', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\t"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\tL = []\n\tfor i in tuple1:\n\t\tif i != ():\n\t\t\tL.append(i)\n\treturn L\n\nprint(remove_empty(((), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d'))))<｜end▁of▁sentence｜>"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\tvowels = ['a', 'e', 'i', 'o', 'u'] \n\tfor x in string: \n\t\tif (x in vowels): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nstring = input(\"Enter a string: \")\nif (check(string)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\tmax_val=0\n\tfor i in range(N):\n\t\tmax_val=max(max_val,A[i]+B[i])\n\treturn max_val\n\ndef main():\n\tA=[1,2,3,4,5]\n\tB=[1,2,3,4,5]\n\tN=5\n\tprint(floor_Max(A,B,N))\n\nif __name__==\"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 368, "source": "MBPP:969", "prompt": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\tnew_list = []\n\tfor i in test_list:\n\t\tif i[0] not in new_list:\n\t\t\tnew_list.append(i[0])\n\t\telse:\n\t\t\tnew_list.append(i[1])\n\treturn new_list\n\nprint(join_tuples([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5), ('c', 6)]))<｜end▁of▁sentence｜>"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t\"\"\"\n\tReturns the minimum of two numbers.\n\t\"\"\"\n\tif x < y:\n\t\treturn x\n\telse:\n\t\treturn y\n\nprint( min_of_two( 1, 2 ) )\nprint( min_of_two( 2, 1 ) )\nprint( min_of_two( 1, 1 ) )<｜end▁of▁sentence｜>"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tdp[2] = 1\n\tdp[3] = 2\n\tdp[4] = 2\n\tdp[5] = 3\n\tdp[6] = 3\n\tdp[7] = 4\n\tdp[8] = 4\n\tdp[9] = 5\n\tdp[10] = 5\n\tdp[11] = 6\n\tdp[12] = 6\n\tdp[13] = 7\n\tdp[14] = 7\n\tdp[15] = 8\n\tdp[16] = 8\n\tdp[17] = 9\n\tdp[18] = 9\n\tdp[19] = 10\n\tdp[20] = 10\n\tdp[21] = 11\n\tdp[22] = 11\n\tdp[23] = 12\n\tdp[24] = 12\n\tdp[25] = 13\n\tdp[26] = 13\n\tdp[27] = 14\n\tdp[28] = 14\n\tdp[29] = 15\n\tdp[30] = 15\n\tdp[31] = 16\n\tdp[32] = 16\n\tdp[33] = 17\n\tdp[34] = 17\n\tdp[35] = 18\n\tdp[36] = 18\n\tdp[37] = 19\n\tdp[38] = 19\n\tdp[39] = 20\n\tdp[40] = 20\n\tdp[41] = 21\n\tdp[42] = 21\n\tdp[43] = 22\n\tdp[44] = 22\n\tdp[45] = 23\n\tdp[46] = 23\n\tdp[47] = 24\n\tdp[48] = 24\n\tdp[49] = 25\n\tdp[50] = 25\n\tdp[51] = 26\n\tdp[52] = 2"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t\"\"\"\n\tConcatenate two tuples to a nested tuple.\n\t\"\"\"\n\treturn (test_tup1, test_tup2)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6)))<｜end▁of▁sentence｜>"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\tresult = s[d:] + s[:d]\n\treturn result\n\ns = input(\"Enter the string: \")\nd = int(input(\"Enter the number of rotations: \"))\nprint(left_rotate(s,d))<｜end▁of▁sentence｜>"}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\tn = len(A)\n\t\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\t\n\treturn A[0][0]\n\n\nA = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]\nprint(min_sum_path(A))<｜end▁of▁sentence｜>"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tM_sum = []\n\tfor i in range(len(M)):\n\t\tM_sum.append(sum(M[i]))\n\tM_sum.sort()\n\tM_sorted = []\n\tfor i in range(len(M)):\n\t\tM_sorted.append(M[M_sum.index(M_sum[i])])\n\t\tM_sum.remove(M_sum[i])\n\treturn M_sorted\n\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))<｜end▁of▁sentence｜>"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\tCounts the most common words in a dictionary.\n\t\"\"\"\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\treturn word_count\n\n\nif __name__ == '__main__':\n\twords = ['a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a',"}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t\n\tvolume = (l*b*h)/2\n\t\n\treturn volume\n\n\nl = int(input(\"Enter the length of the triangle : \"))\nb = int(input(\"Enter the breadth of the triangle : \"))\nh = int(input(\"Enter the height of the triangle : \"))\n\nprint(\"The volume of the triangle is : \",find_Volume(l,b,h))<｜end▁of▁sentence｜>"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\"\"\"\n\t>>> split_lowerstring('HelloWorld')\n\t['Hello', 'World']\n\t>>> split_lowerstring('HelloWorld123')\n\t['Hello', 'World123']\n\t>>> split_lowerstring('HelloWorld123')\n\t['Hello', 'World123']\n\t\"\"\"\n\tresult = []\n\tcurrent_word = ''\n\tfor char in text:\n\t\tif char.islower():\n\t\t\tcurrent_word += char\n\t\telse:\n\t\t\tresult.append(current_word)\n\t\t\tcurrent_word = ''\n\tresult.append(current_word)\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t\"\"\"\n\t>>> text_lowercase_underscore('abcd_efgh')\n\t'abcd_efgh'\n\t>>> text_lowercase_underscore('abcd_efgh_ijkl')\n\t'abcd_efgh_ijkl'\n\t>>> text_lowercase_underscore('abcd_efgh_ijkl_mnop')\n\t'abcd_efgh_ijkl_mnop'\n\t>>> text_lowercase_underscore('abcd_efgh_ijkl_mnop_qrst')\n\t'abcd_efgh_ijkl_mnop_qrst'\n\t>>> text_lowercase_underscore('abcd_efgh_ijkl_mnop_qrst_uvwxyz')\n\t'abcd_efgh_ijkl_mnop_qrst_uvwxyz'\n\t\"\"\"\n\ttext = text.lower()\n\ttext = text.replace('_', '')\n\treturn text\n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\tperimeter = 4 * a\n\treturn perimeter\n\nprint(square_perimeter(5))<｜end▁of▁sentence｜>"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\tresult = \"\"\n\tfor char in string:\n\t\tif char not in second_string:\n\t\t\tresult += char\n\treturn result\n\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrst"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\tarraynums.sort()\n\tfor i in range(len(arraynums)-1):\n\t\tif arraynums[i] == arraynums[i+1]:\n\t\t\treturn True\n\treturn False\n\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10]))\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,10]))\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,11]))<｜end▁of▁sentence｜>"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\tx = str(x)\n\tx = x.replace(\"0\", \"\")\n\tx = x.replace(\"1\", \"\")\n\tx = x.replace(\"2\", \"\")\n\tx = x.replace(\"3\", \"\")\n\tx = x.replace(\"4\", \"\")\n\tx = x.replace(\"5\", \"\")\n\tx = x.replace(\"6\", \"\")\n\tx = x.replace(\"7\", \"\")\n\tx = x.replace(\"8\", \"\")\n\tx = x.replace(\"9\", \"\")\n\tif len(x) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_woodall(123456789))<｜end▁of▁sentence｜>"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\tmultiples = []\n\tfor i in range(m):\n\t\tmultiples.append(n*i)\n\treturn multiples\n\nprint(multiples_of_num(5,3))<｜end▁of▁sentence｜>"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\td = {}\n\tfor i in nums:\n\t\tif i in d:\n\t\t\treturn i\n\t\telse:\n\t\t\td[i] = 1\n\treturn -1\n\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))<｜end▁of▁sentence｜>"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\tmax_sum = 0\n\tfor i in range(len(list1)): \n\t\tsum = 0\n\t\tfor j in range(len(list1[i])): \n\t\t\tsum = sum + list1[i][j] \n\t\tif sum > max_sum: \n\t\t\tmax_sum = sum \n\treturn max_sum \n\nlist1 = [[1, 2, 3], [4, 5, 6], [10, 11, 12]]\nprint(maximum_Sum(list1))<｜end▁of▁sentence｜>"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\tdecimal = 0\n\ti = 0\n\twhile(binary != 0): \n\t\trem = binary % 10\n\t\tdecimal = decimal + rem * pow(2, i) \n\t\tbinary = binary // 10\n\t\ti += 1\n\treturn decimal\n\nbinary = int(input(\"Enter a binary number: \"))\nprint(\"Decimal equivalent of\", binary, \"is\", binary_to_decimal(binary))<｜end▁of▁sentence｜>"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t\n\tresult = 1\n\tfor i in range(0, n): \n\t\tresult = result * arr[i] \n\t\n\treturn result \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(find_Product(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\"\"\"\n\tCheck if the given tuple list has all K elements.\n\t\"\"\"\n\tcount = 0\n\tfor i in test_list:\n\t\tif len(i) == K:\n\t\t\tcount += 1\n\treturn count == len(test_list)\n\n\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 7))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9))\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10))<｜end▁of▁sentence｜>"}
{"ID": 390, "source": "MBPP:27", "prompt": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\tresult = [] \n\tfor i in list: \n\t\tresult.append(i.replace(\"[^0-9]\", \"\")) \n\treturn result\n\nlist = [\"123\", \"456\", \"789\"]\nprint(remove(list))<｜end▁of▁sentence｜>"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\tres = 1\n\tfor i in range(k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\nn = 5\nk = 2\nprint(binomial_Coeff(n, k))<｜end▁of▁sentence｜>"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\tresult = 0\n\tfor i in range(0, arr_size):  \n\t\tresult = result ^ arr[i]  \n\treturn result\n\narr = [2, 3, 5, 4, 5, 2, 3, 3, 5, 2, 4, 2]\narr_size = len(arr)\nprint(\"The odd occurring element is\", get_Odd_Occurrence(arr, arr_size))<｜end▁of▁sentence｜>"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)): \n\t\tfor j in range(i + 1, len(s) + 1): \n\t\t\tif (s[i:j] == s[i:j][::-1]): \n\t\t\t\tcount += 1\n\treturn count\n\ns = \"abcd\"\nprint(count_Substring_With_Equal_Ends(s))<｜end▁of▁sentence｜>"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\tfrom heapq import heappush, heappop\n\theap = []\n\td = {}\n\tfor i in nums:\n\t\tif i in d:\n\t\t\td[i] += 1\n\t\telse:\n\t\t\td[i] = 1\n\tfor i in d:\n\t\theappush(heap, (-d[i], i))\n\tres = []\n\tfor i in range(k):\n\t\tres.append(heappop(heap)[1])\n\treturn res\n\nprint(func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1"}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i == 0: \n\t\t\tn = n // i \n\t\ti = i + 1\n\treturn n \n\nn = 100\nprint(max_Prime_Factors(n))<｜end▁of▁sentence｜>"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t\n\tbinary_num = bin(N) \n\tprint(binary_num) \n\ndecimal_To_Binary(10)<｜end▁of▁sentence｜>"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\"\"\"\n\tFind the n-th rectangular number.\n\t\"\"\"\n\ti = 1\n\twhile True:\n\t\ti += 1\n\t\tnum = i * (i + 1) * (2 * i + 1)\n\t\tif num == n:\n\t\t\treturn i\n\nprint(find_rect_num(1))\nprint(find_rect_num(10))\nprint(find_rect_num(100))\nprint(find_rect_num(1000))\nprint(find_rect_num(10000))\nprint(find_rect_num(100000))\nprint(find_rect_num(1000000))\nprint(find_rect_num(10000000))\nprint(find_rect_num(100000000))\nprint(find_rect_num(1000000000))\nprint(find_rect_num(10000000000))\nprint(find_rect_num(100000000000))\nprint(find_rect_num(1000000000000))\nprint(find_rect_num(10000000000000))\nprint(find_rect_num(100000000000000))\nprint(find_rect_num(1000000000000000))\nprint(find_rect_num(10000000000000000))\nprint(find_rect_num(100000000000000000))\nprint(find_rect_num(1000000000000000000))\nprint(find_rect_num(10000000000000000000))\nprint(find_rect_num(100000000000000000000))\nprint(find_rect_num("}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\"\"\"\n\tSort a given mixed list of integers and strings.\n\t\"\"\"\n\tinteger_list = []\n\tstring_list = []\n\tfor item in mixed_list:\n\t\tif isinstance(item, int):\n\t\t\tinteger_list.append(item)\n\t\telse:\n\t\t\tstring_list.append(item)\n\tinteger_list.sort()\n\tstring_list.sort()\n\tinteger_list.extend(string_list)\n\treturn integer_list\n\n\nif __name__ == '__main__':\n\tprint(sort_mixed_list([1, 2, 3, 'a', 'b', 'c']))<｜end▁of▁sentence｜>"}
{"ID": 401, "source": "MBPP:38", "prompt": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\teven_list = []\n\todd_list = []\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_list.append(i)\n\t\telse:\n\t\t\todd_list.append(i)\n\tprint(\"Even list: \", even_list)\n\tprint(\"Odd list: \", odd_list)\n\tprint(\"Division of even and odd list: \", even_list/odd_list)\n\ndiv_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<｜end▁of▁sentence｜>"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\tS = sorted(S)\n\ti = 0\n\twhile i < len(S)-1:\n\t\tif S[i] == S[i+1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\nprint(rearange_string('aab'))\nprint(rearange_string('aabb'))\nprint(rearange_string('aabbcc'))\nprint(rearange_string('aabbccdd'))\nprint(rearange_string('aabbccddd'))\nprint(rearange_string('aabbccddde'))\nprint(rearange_string('aabbccdddee'))\nprint(rearange_string('aabbccdddeee'))<｜end▁of▁sentence｜>"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\tprint(Counter(nums))\n\nnums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t\"\"\"\n\tThis function takes a list of numbers and returns a list of even numbers\n\t\"\"\"\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_evennumbers([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\n\tsum = 0\n\t\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\tsum = sum + arr[j] \n\t\n\treturn sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nn = len(arr) \nprint(find_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'[a-z]+_[a-z]+')\n\tmatches = pattern.finditer(text)\n\tfor match in matches:\n\t\tprint(match)\n\ntext_match('abcd_efgh')\ntext_match('abcd_efgh_ijkl')\ntext_match('abcd_efgh_ijkl_mnop')\ntext_match('abcd_efgh_ijkl_mnop_qrst')\ntext_match('abcd_efgh_ijkl_mnop_qrst_uvwxyz')<｜end▁of▁sentence｜>"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\"\"\"\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdef"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\tgcd = 1\n\tfor i in l:\n\t\tgcd = gcdcd(gcd, i)\n\treturn gcd\n\ndef gcdcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcdcd(b, a % b)\n\nprint(get_gcd([2, 4, 6, 8, 10]))<｜end▁of▁sentence｜>"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\tdata = sorted(data)\n\tfor i in range(len(data)-1):\n\t\tif data[i] == data[i+1]:\n\t\t\treturn False\n\treturn True\n\n\ndef test_distinct_2(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_3(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_4(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_5(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_6(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_7(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_8(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_9(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_10(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_11(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_12(data"}
{"ID": 410, "source": "MBPP:47", "prompt": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\tfact_A = 1\n\tfact_B = 1\n\tfor i in range(1,A+1):\n\t\tfact_A = fact_A * i\n\tfor i in range(1,B+1):\n\t\tfact_B = fact_B * i\n\tlast_digit = fact_A % 10\n\tlast_digit = last_digit * fact_B % 10\n\treturn last_digit\n\nA = int(input())\nB = int(input())\nprint(compute_Last_Digit(A,B))<｜end▁of▁sentence｜>"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\treturn n ^ 0x55555555\n\n\nif __name__ == '__main__':\n\tprint(odd_bit_set_number(10))<｜end▁of▁sentence｜>"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tresult.append(nums[i][0])\n\treturn result\n\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))<｜end▁of▁sentence｜>"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\tmin_length = len(input_list[0])\n\tfor i in input_list:\n\t\tif len(i) < min_length:\n\t\t\tmin_length = len(i)\n\treturn min_length\n\nprint(min_length_list(['abc', 'def', 'ghi']))<｜end▁of▁sentence｜>"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t\"\"\"\n\tThis function checks if the triangle is equilateral or not.\n\t\"\"\"\n\tif x==y==z:\n\t\tprint(\"The triangle is equilateral\")\n\telse:\n\t\tprint(\"The triangle is not equilateral\")\n\ncheck_equilateral(3,3,3)\ncheck_equilateral(3,3,4)<｜end▁of▁sentence｜>"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\tarea = b*h\n\treturn area\n\nprint(parallelogram_area(10,20))<｜end▁of▁sentence｜>"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t\n\tif str[0] == str[-1]:\n\t\tprint(\"True\")\n\telse:\n\t\tprint(\"False\")\n\nstr = input(\"Enter a string: \")\ncheck_Equality(str)<｜end▁of▁sentence｜>"}
{"ID": 417, "source": "MBPP:54", "prompt": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\tmax_num = max(my_list)\n\tcount_list = [0] * (max_num + 1)\n\tfor i in my_list:\n\t\tcount_list[i] += 1\n\tcount_list = [0] + count_list[:-1]\n\tnew_list = []\n\tfor i in range(1, len(count_list)):\n\t\tnew_list += [i] * count_list[i]\n\treturn new_list\n\nprint(counting_sort([1, 3, 2, 3, 4, 1, 6, 4, 3]))<｜end▁of▁sentence｜>"}
{"ID": 418, "source": "MBPP:55", "prompt": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\ttn=a*(r**(n-1))\n\treturn tn\n\na=int(input(\"Enter the first term of the GP: \"))\nn=int(input(\"Enter the number of terms: \"))\nr=int(input(\"Enter the common ratio: \"))\n\nprint(\"The t-nth term of the GP is: \",tn_gp(a,n,r))<｜end▁of▁sentence｜>"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\trev = int(str(n)[::-1])\n\tif n == rev - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check(121))\nprint(check(123))\nprint(check(1234))\nprint(check(12345))\nprint(check(123456))\nprint(check(1234567))\nprint(check(12345678))\nprint(check(123456789))\nprint(check(1234567890))\nprint(check(12345678901))\nprint(check(123456789012))\nprint(check(1234567890123))\nprint(check(12345678901234))\nprint(check(123456789012345))\nprint(check(1234567890123456))\nprint(check(12345678901234567))\nprint(check(123456789012345678))\nprint(check(1234567890123456789))\nprint(check(12345678901234567890))\nprint(check(123456789012345678901))\nprint(check(1234567890123456789012))\nprint(check(12345678901234567890123))\nprint(check(123456789012345678901234))\nprint(check(1234567890123456789012345))\nprint(check(12345"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t\n\tarr.sort() \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t\n\tif (x < 0 and y > 0) or (x > 0 and y < 0): \n\t\treturn True\n\telse: \n\t\treturn False\n\nx = 10\ny = -10\nprint(opposite_Signs(x, y))<｜end▁of▁sentence｜>"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\"\"\"\n\tReturns True if n is an octagonal number.\n\t\"\"\"\n\ti = 1\n\twhile i**3 < n:\n\t\tif i**3 == n:\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n\ndef nth_octagonal(n):\n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\ti = 1\n\twhile True:\n\t\tif is_octagonal(i**3):\n\t\t\tn -= 1\n\t\tif n == 0:\n\t\t\treturn i**3\n\t\ti += 1\n\nprint(nth_octagonal(1))\nprint(nth_octagonal(2))\nprint(nth_octagonal(3))\nprint(nth_octagonal(4))\nprint(nth_octagonal(5))\nprint(nth_octagonal(6))\nprint(nth_octagonal(7))\nprint(nth_octagonal(8))\nprint(nth_octagonal(9))\nprint(nth_octagonal(10))\nprint(nth_octagonal(11))\nprint(nth_octagonal(12))\nprint(nth_octagonal(13))\nprint(nth_octagonal(14))\nprint(nth_octagonal(15))\nprint(nth_octagonal(16))\nprint(nth_octagonal(17))\nprint(nth_octagonal(18))\nprint(nth_octagonal(19))\nprint(nth_octagonal(20))\nprint(nth_octagonal(21))\nprint(nth_octagonal(22))\nprint(nth_octagonal(23))\nprint(nth_octagonal(24))\nprint(nth_octagonal(25))\nprint(nth_octagonal(26))\nprint(nth_octagonal(27))\nprint(nth_octagonal(28))\nprint(nth_octagonal(29))\nprint(nth_octagonal(30))\nprint(nth_octagonal(31))\nprint(nth_octagonal(32))\nprint(nth_octagonal("}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tsum = 0\n\t\tfor j in range(i,n):\n\t\t\tsum += int(s[j])\n\t\t\tif sum == j-i+1:\n\t\t\t\tcount += 1\n\treturn count\n\ns = input(\"Enter the string: \")\nn = len(s)\nprint(\"Number of substrings with the sum of digits equal to their length: \",count_Substrings(s,n))<｜end▁of▁sentence｜>"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\nprint(smallest_num([1, 2, 3, 4, 5]))\nprint(smallest_num([1, 2, 3, 4, 5, 6]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(smallest_num([1, 2, 3, 4, 5,"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\tmax_diff = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif abs(test_list[i] - test_list[j]) > max_diff:\n\t\t\t\tmax_diff = abs(test_list[i] - test_list[j])\n\treturn max_diff\n\nprint(max_difference([1, 2, 3, 4, 5]))\nprint(max_difference([1, 2, 3, 4, 5, 6]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, "}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\tsubjectmarks.sort(key=lambda x: x[1])\n\treturn subjectmarks\n\nsubjectmarks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\nprint(subject_marks(subjectmarks))<｜end▁of▁sentence｜>"}
{"ID": 428, "source": "MBPP:65", "prompt": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t\"\"\"\n\tThis function takes a list of numbers and returns the sum of all the numbers in the list.\n\t\"\"\"\n\tif len(data_list) == 1:\n\t\treturn data_list[0]\n\telse:\n\t\treturn data_list[0] + recursive_list_sum(data_list[1:])\n\n\nprint(recursive_list_sum([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 429, "source": "MBPP:66", "prompt": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\tcount = 0\n\tfor i in list:\n\t\tif i > 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_2(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_3(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_4(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_5(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_6(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\n\t# return 1 if all elements in the array are equal\n\tif len(set(A)) == 1: \n\t\treturn 1\n\t\n\t# return 0 if not monotonic\n\t\n\t# return 2 if all elements are equal\n\t\n\t# return 3 if all elements are decreasing\n\t\n\t# return 4 if all elements are increasing\n\t\n\t# return 5 if all elements are decreasing and equal\n\t\n\t# return 6 if all elements are increasing and equal\n\t\n\t# return 7 if all elements are decreasing and equal\n\t\n\t# return 8 if all elements are increasing and equal\n\t\n\t# return 9 if all elements are decreasing and equal\n\t\n\t# return 10 if all elements are increasing and equal\n\t\n\t# return 11 if all elements are decreasing and equal\n\t\n\t# return 12 if all elements are increasing and equal\n\t\n\t# return 13 if all elements are decreasing and equal\n\t\n\t# return 14 if all elements are increasing and equal\n\t\n\t# return 15 if all elements are decreasing and equal\n\t\n\t# return 16 if all elements are increasing and equal\n\t\n\t# return 17 if all elements are decreasing and equal\n\t\n\t# return 18 if all elements are increasing and equal\n\t\n\t# return 19 if all elements are decreasing and equal\n\t\n\t# return 20 if all elements are increasing and equal\n\t\n\t# return 21 if all elements are decreasing and equal\n\t\n\t# return 22 if all elements are increasing and equal\n\t\n\t# return 23 if all elements are decreasing and equal\n\t\n\t# return 24 if all elements are increasing and equal\n\t\n\t# return 25 if all elements are decreasing and equal\n\t\n\t# return 26 if all elements are increasing and equal\n\t\n\t# return 27 if all elements are decreasing and equal\n\t\n\t# return 28 if all elements are increasing and equal\n\t\n\t# return 29 if all elements are decreasing and equal\n\t\n\t# return 30 if all elements are increasing and equal\n\t\n\t# return 31 if all elements are decreasing and equal\n\t\n\t# return 32 if all elements are increasing and equal\n\t\n\t# return 33 if all elements are decreasing and equal\n\t\n\t# return"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t\"\"\"\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3"}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\tlength = len(Input[0])\n\tfor i in range(1, len(Input)):\n\t\tif len(Input[i]) != length:\n\t\t\treturn False\n\treturn True\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(get_equal(Input, 3))<｜end▁of▁sentence｜>"}
{"ID": 434, "source": "MBPP:71", "prompt": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t\"\"\"\n\tSorts a list of elements using comb sort.\n\t\"\"\"\n\tgap = len(nums)\n\twhile gap > 1 or gap != 1:\n\t\tgap = int(gap / 1.3)\n\t\tif gap < 1:\n\t\t\tgap = 1\n\t\ti = 0\n\t\twhile i + gap < len(nums):\n\t\t\tif nums[i] > nums[i + gap]:\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\ti += 1\n\treturn nums\n\n\nif __name__ == \"__main__\":\n\tprint(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\tflag = False\n\tfor i in range(1, int(n**0.5)+1): \n\t\tj = n - i*i \n\t\tif (int(j**0.5)**2 == j): \n\t\t\tflag = True\n\t\t\tbreak\n\tif (flag): \n\t\tprint(n, \"can be represented as difference of two squares\") \n\telse: \n\t\tprint(n, \"cannot be represented as difference of two squares\") \n\nn = 100\ndif_Square(n)<｜end▁of▁sentence｜>"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\timport re\n\tpattern = r\"[,|;|\\s]\"\n\tresult = re.split(pattern, text)\n\treturn result\n\nprint(multiple_split(\"one,two,three\"))\nprint(multiple_split(\"one;two;three\"))\nprint(multiple_split(\"one,two;three\"))\nprint(multiple_split(\"one,two,three,four\"))\nprint(multiple_split(\"one,two,three,four,five\"))\nprint(multiple_split(\"one,two,three,four,five,six\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\n\tcolors = colors.split(',')\n\tpatterns = patterns.split(',')\n\t\n\tcolors = [int(i) for i in colors]\n\tpatterns = [int(i) for i in patterns]\n\t\n\tcolors.sort()\n\tpatterns.sort()\n\t\n\tif colors == patterns:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 438, "source": "MBPP:75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\tresult = []\n\tfor tup in test_list:\n\t\tflag = True\n\t\tfor i in tup:\n\t\t\tif i % K != 0:\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tresult.append(tup)\n\treturn result\n\ntest_list = [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\nK = 2\nprint(find_tuples(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\tcount=0\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\tif i*i+j*j<=m*m:\n\t\t\t\tcount+=1\n\treturn count\n\nprint(count_Squares(10,10))<｜end▁of▁sentence｜>"}
{"ID": 440, "source": "MBPP:77", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\teven_sum = 0\n\todd_sum = 0\n\twhile (n > 0): \n\t\trem = n % 10\n\t\tif (rem % 2 == 0): \n\t\t\teven_sum = even_sum + rem \n\t\telse: \n\t\t\todd_sum = odd_sum + rem \n\t\tn = n // 10\n\treturn abs(even_sum - odd_sum) \n\nn = int(input(\"Enter a number: \"))\nprint(is_Diff(n))<｜end▁of▁sentence｜>"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_2(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_3(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_4(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_5(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_6(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_7(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_8(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_9(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_10(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_11(n): \n\tcount = 0\n\twhile (n): "}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\tcount = 0\n\tfor i in s: \n\t\tcount += 1\n\treturn count\n\ns = input(\"Enter a word: \")\nprint(word_len(s))<｜end▁of▁sentence｜>"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\"\"\"\n\tReturns the nth tetrahedral number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn tetrahedral_number(n-1) + n\n\nprint(tetrahedral_number(10))<｜end▁of▁sentence｜>"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> zip_tuples((1, 2, 3), (4, 5, 6))\n\t[(1, 4), (2, 5), (3, 6)]\n\t>>> zip_tuples((1, 2, 3), (4, 5, 6, 7))\n\t[(1, 4), (2, 5), (3, 6)]\n\t>>> zip_tuples((1, 2, 3), (4, 5))\n\t[(1, 4), (2, 5)]\n\t>>> zip_tuples((1, 2, 3), (4, 5, 6, 7))\n\t[(1, 4), (2, 5), (3, 6)]\n\t\"\"\"\n\tzipped_tuples = []\n\tmin_length = min(len(test_tup1), len(test_tup2))\n\tfor i in range(min_length):\n\t\tzipped_tuples.append((test_tup1[i], test_tup2[i]))\n\treturn zipped_tuples\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\"\"\"\n\tCalculate the volume of a sphere.\n\t\"\"\"\n\treturn (4/3) * 3.141592653589793 * (r**3)\n\nprint(volume_sphere(10))<｜end▁of▁sentence｜>"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\tsum = 0\n\tfor i in strr:  \n\t\tsum = sum + ord(i)  \n\treturn chr(sum)  \n\nprint(get_Char(\"GeeksforGeeks\"))<｜end▁of▁sentence｜>"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\ta, b = 0, 1\n\tfor i in range(n):\n\t\ta, b = b, a + b\n\treturn a\n\nprint(sequence(10))<｜end▁of▁sentence｜>"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\"\"\"\n\tCalculates the surface area of a sphere.\n\t\"\"\"\n\treturn 4 * 3.14 * r**2\n\nprint(surfacearea_sphere(10))<｜end▁of▁sentence｜>"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\"\"\"\n\tReturns the nth centered hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\nif __name__ == '__main__':\n\tprint(centered_hexagonal_number(1))\n\tprint(centered_hexagonal_number(2))\n\tprint(centered_hexagonal_number(3))\n\tprint(centered_hexagonal_number(4))\n\tprint(centered_hexagonal_number(5))\n\tprint(centered_hexagonal_number(6))\n\tprint(centered_hexagonal_number(7))\n\tprint(centered_hexagonal_number(8))\n\tprint(centered_hexagonal_number(9))\n\tprint(centered_hexagonal_number(10))<｜end▁of▁sentence｜>"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\tdict4 = {}\n\tfor key in dict1:\n\t\tdict4[key] = dict1[key]\n\tfor key in dict2:\n\t\tdict4[key] = dict2[key]\n\tfor key in dict3:\n\t\tdict4[key] = dict3[key]\n\treturn dict4\n\nprint merge_dictionaries_three({'a':1,'b':2},{'c':3,'d':4},{'e':5,'f':6})<｜end▁of▁sentence｜>"}
{"ID": 451, "source": "MBPP:88", "prompt": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\tdict1 = {}\n\tfor i in list1:\n\t\tif i in dict1:\n\t\t\tdict1[i] += 1\n\t\telse:\n\t\t\tdict1[i] = 1\n\treturn dict1\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(freq_count(list1))<｜end▁of▁sentence｜>"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\"\"\"\n\t:type N: int\n\t:rtype: int\n\t\"\"\"\n\twhile N > 0:\n\t\tN = N & (N - 1)\n\treturn N\n\nprint closest_num(10)<｜end▁of▁sentence｜>"}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nprint(len_log([\"hello\", \"world\", \"my\", \"name\", \"is\", \"Anna\"]))<｜end▁of▁sentence｜>"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t\"\"\"\n\tThis function takes two arguments, str1 and sub_str.\n\tIt returns True if sub_str is present in str1, else it returns False.\n\t\"\"\"\n\tstr1 = str1.lower()\n\tsub_str = sub_str.lower()\n\tif sub_str in str1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n# Test cases\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog j"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn ="}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\tresult = 1\n\tfor i in range(b):\n\t\tresult *= a\n\treturn result\n\nprint(power(2,3))<｜end▁of▁sentence｜>"}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\tmin_index = 0\n\tmin_value = test_list[0][1]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][1] < min_value:\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][1]\n\treturn min_index\n\n\ntest_list = [(1, 2), (4, 1), (9, 1), (10, 10)]\nprint(index_minimum(test_list))<｜end▁of▁sentence｜>"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\tmin_length = len(lst)\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1, len(lst)+1):\n\t\t\tif len(lst[i:j]) < min_length:\n\t\t\t\tmin_length = len(lst[i:j])\n\treturn min_length\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Find_Min_Length(lst))<｜end▁of▁sentence｜>"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\tcount = 0\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(divisor(10))<｜end▁of▁sentence｜>"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\tdict1 = {}\n\tfor i in list1:\n\t\tif i in dict1:\n\t\t\tdict1[i] += 1\n\t\telse:\n\t\t\tdict1[i] = 1\n\treturn dict1\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(frequency_lists(list1))<｜end▁of▁sentence｜>"}
{"ID": 461, "source": "MBPP:98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\ttotal = 1\n\tfor i in numbers:\n\t\ttotal *= i\n\treturn total / len(numbers)\n\nprint(multiply_num([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\tbinary = \"\"\n\twhile n > 0:\n\t\tbinary = str(n % 2) + binary\n\t\tn = n // 2\n\treturn binary\n\nprint(decimal_to_binary(10))<｜end▁of▁sentence｜>"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\tFinds the next smallest palindrome of a specified number.\n\t\"\"\"\n\tnum_str = str(num)\n\tnum_len = len(num_str)\n\tnum_list = list(num_str)\n\tnum_list_len = len(num_list)\n\t\n\tif num_len % 2 == 0:\n\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)\n\t\tmid_index_left_int += 1\n\t\tmid_index_right_int -= 1\n\t\tnum_list[mid_index_left] = str(mid_index_left_int)\n\t\tnum_list[mid_index_right] = str(mid_index_right_int)\n\t\tnum_list_str = ''.join(num_list)\n\t\tnum_list_int = int(num_list_str)\n\t\treturn num_list_int\n\telse:\n\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)\n\t\tmid_index_left_int += 1\n\t\tmid_index_right_int -= 1\n\t\tnum_list[mid_index] = str(mid_index_left_int)\n\t\tnum_list_str = ''.join(num_list)\n\t"}
{"ID": 464, "source": "MBPP:101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\tarr.sort()\n\treturn arr[k-1]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nk = 5\nprint(kth_element(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\tword = word.split('_')\n\tword[0] = word[0].lower()\n\tfor i in range(1, len(word)):\n\t\tword[i] = word[i].capitalize()\n\treturn ''.join(word)\n\nprint(snake_to_camel('hello_world'))<｜end▁of▁sentence｜>"}
{"ID": 466, "source": "MBPP:103", "prompt": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t\"\"\"\n\tn: int\n\tm: int\n\t\"\"\"\n\tdef eulerian_num_helper(n, m):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif m == 1:\n\t\t\treturn 1\n\t\tif n == 0 or m == 0:\n\t\t\treturn 0\n\t\treturn eulerian_num_helper(n-1, m) + eulerian_num_helper(n, m-1)\n\treturn eulerian_num_helper(n, m)\n\nprint eulerian_num(3, 3)<｜end▁of▁sentence｜>"}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t\"\"\"\n\tSort each sublist of strings in a given list of lists using lambda function.\n\t\"\"\"\n\toutput_list = []\n\tfor sublist in input_list:\n\t\toutput_list.append(sorted(sublist, key=lambda x: len(x)))\n\treturn output_list\n\n\nif __name__ == '__main__':\n\tinput_list = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n\tprint(sort_sublists(input_list))<｜end▁of▁sentence｜>"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\tcount = 0\n\tfor i in lst:\n\t\tif i:\n\t\t\tcount += 1\n\treturn count\n\nprint(count([True, False, False, True]))<｜end▁of▁sentence｜>"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t\"\"\"\n\tAdds the given list to the given tuples.\n\t\"\"\"\n\ttest_tup = test_tup + tuple(test_list)\n\treturn test_tup\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))<｜end▁of▁sentence｜>"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\tcount = 0\n\tfor i in range(L,R+1) :\n\t\thex_num = hex(i)\n\t\tif len(hex_num) == 4 :\n\t\t\tcount += 1\n\treturn count\n\nL = int(input(\"Enter the lower limit : \"))\nR = int(input(\"Enter the upper limit : \"))\nprint(\"The number of hexadecimal numbers between\",L,\"and\",R,\"is\",count_Hexadecimal(L,R))<｜end▁of▁sentence｜>"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\theap = []\n\theap.append(num1)\n\theap.append(num2)\n\theap.append(num3)\n\theap.sort()\n\treturn heap\n\nprint merge_sorted_list(1,2,3)<｜end▁of▁sentence｜>"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\tmissing_list = []\n\tfor i in range(strt_val, stop_val+1):\n\t\tif i not in test_list:\n\t\t\tmissing_list.append(i)\n\treturn missing_list\n\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\n"}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t\"\"\"\n\t>>> common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n\t[3]\n\t>>> common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])\n\t[3, 4]\n\t>>> common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])\n\t[3, 4, 5]\n\t\"\"\"\n\tcommon = []\n\tfor i in nestedlist:\n\t\tfor j in nestedlist:\n\t\t\tif i == j:\n\t\t\t\tcommon.append(i)\n\treturn common\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\tpi = 3.14\n\tradius = diameter/2\n\tperimeter = 2*pi*radius*height\n\treturn perimeter\n\nprint(perimeter(10,10))<｜end▁of▁sentence｜>"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\nprint(check_integer(\"123\"))\nprint(check_integer(\"123.45\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_"}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t\"\"\"\n\tAssign frequency to each tuple in the given tuple list.\n\t\"\"\"\n\tfrom collections import Counter\n\t\n\ttest_list = [tuple(i) for i in test_list]\n\t\n\tprint(Counter(test_list))\n\nassign_freq([(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (1, 2), (5, 6), (4, 5)])<｜end▁of▁sentence｜>"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif len(i) == 0:\n\t\t\tcount += 1\n\treturn count\n\nlist1 = [{},{},{}]\nprint(empty_dit(list1))<｜end▁of▁sentence｜>"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t\"\"\"\n\t>>> tuple_to_int((1, 2, 3))\n\t123\n\t>>> tuple_to_int((1, 2, 3, 4))\n\t1234\n\t>>> tuple_to_int((1, 2, 3, 4, 5))\n\t12345\n\t\"\"\"\n\treturn sum(nums)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t\"\"\"\n\tConvert all possible convertible elements in the list to float.\n\t\"\"\"\n\tnew_list = []\n\tfor element in test_list:\n\t\ttry:\n\t\t\tnew_list.append(float(element))\n\t\texcept ValueError:\n\t\t\tpass\n\treturn new_list\n\n\nif __name__ == '__main__':\n\ttest_list = [1, 2, 3, '4', 5, 6, 7, 8, 9, 10, '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\tlist = []\n\tfor i in string:\n\t\tlist.append(i)\n\treturn list\n\nprint(string_to_list(\"hello\"))<｜end▁of▁sentence｜>"}
{"ID": 482, "source": "MBPP:119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\tlow = 0\n\thigh = n-1\n\twhile low <= high :\n\t\tmid = (low+high)//2\n\t\tif (mid == 0 or arr[mid] != arr[mid-1]) and (mid == n-1 or arr[mid] != arr[mid+1]) :\n\t\t\treturn arr[mid]\n\t\telif (mid > 0 and arr[mid] == arr[mid-1]) :\n\t\t\thigh = mid-1\n\t\telse :\n\t\t\tlow = mid+1\n\treturn -1\n\narr = [1,1,2,2,3,3,4,4,5,5]\nn = len(arr)\nprint(search(arr,n))<｜end▁of▁sentence｜>"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[j][1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product\n\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))<｜end▁of▁sentence｜>"}
{"ID": 484, "source": "MBPP:121", "prompt": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t\n\tfor i in range(0, n-2):\n\t\tfor j in range(i+1, n-1):\n\t\t\tfor k in range(j+1, n):\n\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tprint(A[i], A[j], A[k])\n\treturn count\n\nA = [1, 4, 45, 6, 10, 8]\nn = len(A)\nsum = 22\ncount = 0\nprint(check_triplet(A, n, sum, count))<｜end▁of▁sentence｜>"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t\n\t# Base cases \n\tif (n == 1): \n\t\treturn 1\n\tif (n == 2): \n\t\treturn 2\n\t\n\t# Recursive calls \n\treturn smartNumber(n - 1) + smartNumber(n - 2) \n\n# Driver code \nn = 5\nprint(smartNumber(n))<｜end▁of▁sentence｜>"}
{"ID": 486, "source": "MBPP:123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\tsum = 0\n\tfor i in range(1, limit):\n\t\tsum += sum_divisors(i)\n\treturn sum\n\ndef sum_divisors(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(amicable_numbers_sum(10000))<｜end▁of▁sentence｜>"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\"\"\"\n\ta: complex number\n\tb: complex number\n\t\"\"\"\n\timport math\n\tangle = math.atan2(b.imag,a.real)\n\treturn angle\n\nprint angle_complex(1+2j,1+2j)<｜end▁of▁sentence｜>"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\n\tmax_count = 0\n\tcount = 0\n\t\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tif count < 0: \n\t\t\tcount = 0\n\t\tmax_count = max(max_count, count) \n\treturn max_count \n\ndef find_max_diff(string): \n\t\n\tn = len(string) \n\t\n\tmax_diff = find_length(string, n) \n\t\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tstring = string[1:] \n\t\telse: \n\t\t\tstring = string[1:] \n\t\tmax_diff = max(max_diff, find_length(string, n)) \n\treturn max_diff \n\nstring = \"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\tsum = 0\n\tfor i in range(1,a+1): \n\t\tif (a % i == 0 and b % i == 0): \n\t\t\tsum = sum + i \n\treturn sum \na = 12\nb = 18\nprint(sum(a, b))<｜end▁of▁sentence｜>"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t\"\"\"\n\tMultiply two integers without using the * operator in python.\n\t\"\"\"\n\tresult = 0\n\twhile y > 0:\n\t\tresult += x\n\t\ty -= 1\n\treturn result\n\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 4))\nprint(multiply_int(2, 5))\nprint(multiply_int(2, 6))\nprint(multiply_int(2, 7))\nprint(multiply_int(2, 8))\nprint(multiply_int(2, 9))\nprint(multiply_int(2, 10))\nprint(multiply_int(2, 11))\nprint(multiply_int(2, 12))\nprint(multiply_int(2, 13))\nprint(multiply_int(2, 14))\nprint(multiply_int(2, 15))\nprint(multiply_int(2, 16))\nprint(multiply_int(2, 17))\nprint(multiply_int(2, 18))\nprint(multiply_int(2, 19))\nprint(multiply_int(2, 20))\nprint(multiply_int(2, 21))\nprint(multiply_int(2, 22))\nprint(multiply_int(2, 23))\nprint(multiply_int(2, 24))\nprint(multiply_int(2, 25))\nprint(multiply_int(2, 26))\nprint(multiply_int(2, 27))\nprint(multiply_int(2, 28))\nprint(multiply_int(2, 29))\nprint(multiply_int(2, 30))\nprint(multiply_int(2, 31))\nprint(multiply_int(2, 32))\nprint(multiply_int(2, 33))\nprint(multiply"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\tlong_words = []\n\tfor word in str:\n\t\tif len(word) > n:\n\t\t\tlong_words.append(word)\n\treturn long_words\n\nprint(long_words(3, ['hello', 'world', 'my', 'name', 'is', 'john', 'doe']))<｜end▁of▁sentence｜>"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square_test_2(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\tmax_occurrences = 0\n\tmax_occurrences_item = None\n\tfor item in nums:\n\t\tif nums.count(item) > max_occurrences:\n\t\t\tmax_occurrences = nums.count(item)\n\t\t\tmax_occurrences_item = item\n\treturn max_occurrences_item\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\tvowels = 'aeiouAEIOU'\n\tstr1 = list(str1)\n\ti, j = 0, len(str1)-1\n\twhile i < j:\n\t\tif str1[i] not in vowels:\n\t\t\ti += 1\n\t\tif str1[j] not in vowels:\n\t\t\tj -= 1\n\t\tif str1[i] in vowels and str1[j] in vowels:\n\t\t\tstr1[i], str1[j] = str1[j], str1[i]\n\t\t\ti += 1\n\t\t\tj -= 1\n\treturn ''.join(str1)\n\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('world'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('AaEeIiOoUu'))<｜end▁of▁sentence｜>"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\tstr1 = \"\"\n\tfor i in tup1:\n\t\tstr1 += str(i)\n\treturn str1\n\ntup1 = (1, 2, 3, 4, 5)\nprint(tup_string(tup1))<｜end▁of▁sentence｜>"}
{"ID": 496, "source": "MBPP:133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\tneg_nums = list(filter(lambda x: x < 0, nums))\n\treturn sum(neg_nums)\n\nprint(sum_negativenum([1, 2, 3, -4, -5, -6, 7, -8, 9, -10]))<｜end▁of▁sentence｜>"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\thexagonal_num = (n * (2 * n - 1))\n\treturn hexagonal_num\n\nprint(hexagonal_num(1))\nprint(hexagonal_num(2))\nprint(hexagonal_num(3))\nprint(hexagonal_num(4))\nprint(hexagonal_num(5))\nprint(hexagonal_num(6))\nprint(hexagonal_num(7))\nprint(hexagonal_num(8))\nprint(hexagonal_num(9))\nprint(hexagonal_num(10))<｜end▁of▁sentence｜>"}
{"ID": 499, "source": "MBPP:136", "prompt": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\tbill = 0\n\tif units <= 50:\n\t\tbill = units * 0.50\n\telif units <= 150:\n\t\tbill = 25 + (units - 50) * 0.75\n\telif units <= 250:\n\t\tbill = 100 + (units - 150) * 1.20\n\telse:\n\t\tbill = 220 + (units - 250) * 1.50\n\treturn bill\n\nunits = int(input(\"Enter the units consumed: \"))\nprint(\"Electricity bill is: \", cal_electbill(units))<｜end▁of▁sentence｜>"}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_2(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_3(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_4(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_5(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_6(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_7(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_8(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_9(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_10(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_11(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_12(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_13(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\n"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn = n >> 1\n\treturn True\n\nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\tcircumference = 2 * 3.14 * r\n\treturn circumference\n\nprint(circle_circumference(5))<｜end▁of▁sentence｜>"}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\tresult = []\n\tfor i in test_list:\n\t\tif i.count(i[0]) == 1:\n\t\t\tresult.append(i[0])\n\treturn result\n\nprint(extract_singly([(1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), ("}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\"\"\"\n\tSort a list of elements using pancake sort.\n\t\"\"\"\n\tn = len(nums)\n\tfor i in range(n-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif nums[j] > nums[max_index]:\n\t\t\t\tmax_index = j\n\t\tif max_index != i:\n\t\t\tnums[i], nums[max_index] = nums[max_index], nums[i]\n\t\t\tprint(nums)\n\n\nif __name__ == '__main__':\n\tnums = [3, 2, 4, 1, 5]\n\tpancake_sort(nums)\n\tprint(nums)<｜end▁of▁sentence｜>"}
{"ID": 505, "source": "MBPP:142", "prompt": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\tcount=0\n\tfor i in list1:\n\t\tfor j in list2:\n\t\t\tfor k in list3:\n\t\t\t\tif i==j and j==k:\n\t\t\t\t\tcount+=1\n\treturn count\n\nprint(count_samepair([1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\tcount = 0\n\tfor i in Input: \n\t\tif type(i) == list: \n\t\t\tcount += 1\n\treturn count\n\nInput = [1, 2, [3, 4], [5, 6], [7, 8, [9, 10]]]\nprint(find_lists(Input))<｜end▁of▁sentence｜>"}
{"ID": 507, "source": "MBPP:144", "prompt": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t\n\tsum = 0\n\t\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tsum = sum + abs(arr[i] - arr[j]) \n\t\n\treturn sum\n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(sum_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 508, "source": "MBPP:145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\tmax_diff = arr[1] - arr[0] \n\tfor i in range(0, n): \n\t\tfor j in range(i+1, n): \n\t\t\tif abs(arr[i] - arr[j]) < max_diff: \n\t\t\t\tmax_diff = abs(arr[i] - arr[j]) \n\treturn max_diff \n\narr = [1, 2, 90, 10, 110] \nn = len(arr) \nprint(max_Abs_Diff(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 509, "source": "MBPP:146", "prompt": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\ttotal = 0\n\tfor i in str1:\n\t\ttotal += ord(i)\n\treturn total\n\nprint(ascii_value_string(\"Hello\"))<｜end▁of▁sentence｜>"}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t\n\tif m == n: \n\t\treturn tri[m][n] \n\t\n\treturn tri[m][n] + max(max_path_sum(tri, m + 1, n), \n\t\t\t\t\t\t\tmax_path_sum(tri, m + 1, n - 1)) \n\n\ndef max_path_sum_dp(tri): \n\t\n\tn = len(tri) \n\t\n\tdp = [[0 for x in range(n)] for y in range(n)] \n\t\n\tdp[0][0] = tri[0][0] \n\t\n\tfor i in range(1, n): \n\t\tdp[i][0] = dp[i - 1][0] + tri[i][0] \n\t\tdp[i][i] = dp[i - 1][i - 1] + tri[i][i] \n\t\n\tfor i in range(2, n): \n\t\tfor j in range(1, i): \n\t\t\tdp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + tri[i][j] \n\t\n\treturn max(dp[n - 1]) \n\n\nif __name__ == '__main__': \n\t\n\ttri = [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]] \n\t\n\tprint(max_path_sum(tri, 0, 0)) \n\tprint(max_path_sum_dp(tri))<｜end▁of▁sentence｜>"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t\n\tsum_digits = 0\n\t\n\twhile N > 0 : \n\t\tsum_digits += N % 10\n\t\tN = N // 10\n\t\n\treturn sum_digits\n\ndef max_sum_digits_twoparts(N) : \n\t\n\tmax_sum_digits = 0\n\t\n\twhile N > 0 : \n\t\tmax_sum_digits = max(max_sum_digits, sum_digits_twoparts(N))\n\t\tN = N // 10\n\t\n\treturn max_sum_digits\n\ndef main() : \n\t\n\tN = int(input())\n\t\n\tprint(max_sum_digits_twoparts(N))\n\nif __name__ == \"__main__\" : \n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t\n\tdp = [1] * n\n\t\n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i] - arr[j] == 1 or arr[j] - arr[i] == 1): \n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1) \n\t\n\tresult = 0\n\tfor i in range(n): \n\t\tresult = max(result, dp[i]) \n\t\n\treturn result \n\n\n# Driver code \narr = [1, 9, 3, 10, 4, 20, 2] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t\n\twhile b<=c: \n\t\tif a==b: \n\t\t\treturn True\n\t\tb=b*2\n\treturn False\n\na=int(input(\"Enter the number: \"))\nb=1\nc=1\nwhile does_Contain_B(a,b,c):\n\tc=c*2\nprint(does_Contain_B(a,b,c))<｜end▁of▁sentence｜>"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t\"\"\"\n\tThis function checks whether the given number is co-prime or not.\n\t\"\"\"\n\tif x>y:\n\t\tsmaller=y\n\telse:\n\t\tsmaller=x\n\tfor i in range(1,smaller+1):\n\t\tif (x%i==0) and (y%i==0):\n\t\t\tgcd=i\n\treturn gcd==1\n\nprint(is_coprime(12,18))\nprint(is_coprime(12,15))<｜end▁of▁sentence｜>"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t\"\"\"\n\t>>> merge_sort([1, 2, 3, 4, 5])\n\t[1, 2, 3, 4, 5]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 1"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\"\"\"\n\ta, b, c are the coefficients of the parabola.\n\t\"\"\"\n\tx = -b / (2 * a)\n\ty = a * x ** 2 + b * x + c\n\treturn x, y\n\nprint parabola_vertex(1, 2, 3)<｜end▁of▁sentence｜>"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tresult.append(nums[i][N])\n\treturn result\n\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))<｜end▁of▁sentence｜>"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\n\tmask = 0xAAAAAAAA\n\t\n\tn = n ^ mask\n\t\n\treturn n\n\nprint(even_bit_toggle_number(10))<｜end▁of▁sentence｜>"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t\"\"\"\n\t>>> tuple_int_str(('1', '2', '3'))\n\t(1, 2, 3)\n\t>>> tuple_int_str(('1', '2', '3', '4'))\n\t(1, 2, 3, 4)\n\t>>> tuple_int_str(('1', '2', '3', '4', '5'))\n\t(1, 2, 3, 4, 5)\n\t\"\"\"\n\treturn tuple(map(int, tuple_str))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\tnew_list = []\n\tcount = 1\n\tfor i in range(len(list1)-1):\n\t\tif list1[i] == list1[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tnew_list.append(count)\n\t\t\tnew_list.append(list1[i])\n\t\t\tcount = 1\n\tnew_list.append(count)\n\tnew_list.append(list1[-1])\n\treturn new_list\n\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t\n\tarr.sort() \n\t\n\tdiff = arr[n-1] - arr[0] \n\t\n\tif k > diff: \n\t\tprint(\"Not possible\") \n\t\treturn -1\n\t\n\ti = 0\n\twhile (k > 0): \n\t\tarr[0] += diff \n\t\tarr[i] += diff \n\t\tk -= diff \n\t\tarr.sort() \n\t\ti += 1\n\t\n\treturn arr[n-1] - arr[0] \n\narr = [1, 2, 5, 10, 20, 40, 80] \nn = len(arr) \nk = 55\nprint(min_Ops(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tmonth_dict = {\n\t\t\"January\": \"Winter\",\n\t\t\"February\": \"Winter\",\n\t\t\"March\": \"Spring\",\n\t\t\"April\": \"Spring\",\n\t\t\"May\": \"Spring\",\n\t\t\"June\": \"Summer\",\n\t\t\"July\": \"Summer\",\n\t\t\"August\": \"Summer\",\n\t\t\"September\": \"Autumn\",\n\t\t\"October\": \"Autumn\",\n\t\t\"November\": \"Autumn\",\n\t\t\"December\": \"Winter\"\n\t}\n\tseason = month_dict[month]\n\tif days > 20:\n\t\tseason = \"Winter\"\n\telif days > 10:\n\t\tseason = \"Spring\"\n\telif days > 5:\n\t\tseason = \"Summer\"\n\telse:\n\t\tseason = \"Autumn\"\n\tprint(season)\n\nmonth_season(\"January\",20)\nmonth_season(\"February\",20)\nmonth_season(\"March\",20)\nmonth_season(\"April\",20)\nmonth_season(\"May\",20)\nmonth_season(\"June\",20)\nmonth_season(\"July\",20)\nmonth_season(\"August\",20)\nmonth_season(\"September\",20)\nmonth_season(\"October\",20)\nmonth_season(\"November\",20)\nmonth_season(\"December\",20)\nmonth_season(\"January\",10)\nmonth_season(\"February\",10)\nmonth_season(\"March\",10)\nmonth_season(\"April\",10)\nmonth_season(\"May\",10)\nmonth_season(\"June\",10)\nmonth_season(\"July\",10)\nmonth_season(\"August\",10)\nmonth_season(\"September\",10)\nmonth_season(\"October\",10)\nmonth_season(\"November\",10)\nmonth_season(\"December\",10)\nmonth_season(\"January\",5)\nmonth_season(\"February\",5)\nmonth_season(\"March\",5)\nmonth_season(\"April\",5)\nmonth_season(\"May\",5)\nmonth_season(\"June\",5)\nmonth_season(\"July\",5)\nmonth_season(\"August\",5)\nmonth_season(\""}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\tx = n / a\n\ty = n / b\n\tx = int(x)\n\ty = int(y)\n\treturn (x, y)\n\nprint solution(2, 3, 4)<｜end▁of▁sentence｜>"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\tlist3 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tlist3.append(i)\n\treturn list3\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4]\nprint(remove_elements(list1, list2))<｜end▁of▁sentence｜>"}
{"ID": 525, "source": "MBPP:162", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\tsum = 0\n\tfor i in range(n, 0, -2):\n\t\tsum += i\n\treturn sum\n\nprint(sum_series(10))<｜end▁of▁sentence｜>"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\tarea = (s*l)/2\n\treturn area\n\nprint area_polygon(5,10)<｜end▁of▁sentence｜>"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\tsum1=0\n\tsum2=0\n\tfor i in range(1,num1):\n\t\tif num1%i==0:\n\t\t\tsum1+=i\n\tfor i in range(1,num2):\n\t\tif num2%i==0:\n\t\t\tsum2+=i\n\tif sum1==sum2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(areEquivalent(12,18))<｜end▁of▁sentence｜>"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\tcount = 0\n\tfor i in range(len(str1)): \n\t\tif (str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U'): \n\t\t\tcount = count + 1\n\treturn count \n\nstr1 = \"geeksforgeeks\"\nprint(count_char_position(str1))<｜end▁of▁sentence｜>"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\tcount = 0\n\tfor i in range(0,N): \n\t\tfor j in range(i+1,N): \n\t\t\tif (A[i] ^ A[j]) % 2 == 0: \n\t\t\t\tcount += 1\n\treturn count \n\nA = [1, 2, 3, 4, 5] \nN = len(A) \nprint(find_even_Pair(A,N))<｜end▁of▁sentence｜>"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t\n\tcount = 0\n\t\n\twhile(n != 0): \n\t\tn >>= 1\n\t\tcount += 1\n\t\n\treturn count \n\nn = 16\nprint(next_Power_Of_2(n))<｜end▁of▁sentence｜>"}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\tcount = 0\n\tfor i in a: \n\t\tif(i == x): \n\t\t\tcount += 1\n\treturn count \n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 10\nprint(frequency(a, x))<｜end▁of▁sentence｜>"}
{"ID": 532, "source": "MBPP:169", "prompt": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t\"\"\"\n\tCalculates the nth pell number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn get_pell(n-1) + get_pell(n-2)\n\nprint(get_pell(10))<｜end▁of▁sentence｜>"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\tsum = 0\n\tfor i in range(m, n+1):\n\t\tsum = sum + list1[i]\n\treturn sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_range_list(list1, 2, 5))<｜end▁of▁sentence｜>"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t\"\"\"\n\t>>> perimeter_pentagon(5)\n\t25.0\n\t>>> perimeter_pentagon(10)\n\t50.0\n\t\"\"\"\n\treturn 5 * a\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in s:\n\t\tif i == 'std':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char.isalnum():\n\t\t\tnew_text += char\n\treturn new_text\n\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello,"}
{"ID": 537, "source": "MBPP:174", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\td = {}\n\tfor i in l:\n\t\tif i[0] in d:\n\t\t\td[i[0]].append(i[1])\n\t\telse:\n\t\t\td[i[0]] = [i[1]]\n\treturn d\n\nprint(group_keyvalue([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5), ('c', 6)]))<｜end▁of▁sentence｜>"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t\"\"\"\n\tThis function takes a string of parentheses and returns True if the string is valid, False otherwise.\n\t\"\"\"\n\tstack = []\n\tfor i in str1:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\tperimeter = a+b+c\n\treturn perimeter\n\nprint(perimeter_triangle(3,4,5))<｜end▁of▁sentence｜>"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\tlcm = L\n\twhile True: \n\t\tif (lcm % L == 0 and lcm % R == 0): \n\t\t\treturn lcm \n\t\tlcm += 1\n\nprint(answer(1,10))<｜end▁of▁sentence｜>"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\"\"\"\n\t>>> string_literals(['a','b','c'],'a b c')\n\t['a', 'b', 'c']\n\t>>> string_literals(['a','b','c'],'a b c d')\n\t[]\n\t>>> string_literals(['a','b','c'],'a b c d e')\n\t['a', 'b', 'c']\n\t\"\"\"\n\tresult = []\n\tfor pattern in patterns:\n\t\tif pattern in text:\n\t\t\tresult.append(pattern)\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\tx = str(x)\n\tx = list(x)\n\tx = [int(i) for i in x]\n\tx = sum(x)\n\tif x == int(x):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_num_keith(123))\nprint(is_num_keith(1234))\nprint(is_num_keith(12345))\nprint(is_num_keith(123456))\nprint(is_num_keith(1234567))\nprint(is_num_keith(12345678))\nprint(is_num_keith(123456789))\nprint(is_num_keith(1234567890))\nprint(is_num_keith(12345678901))\nprint(is_num_keith(123456789012))\nprint(is_num_keith(1234567890123))\nprint(is_num_keith(12345678901234))\nprint(is_num_keith(123456789012345))\nprint(is_num_keith(1234567890123456))\nprint(is_num_keith(12345678901234567))\nprint(is_num_keith(123456789012345678))\nprint(is_num_keith(1234567890123456789))\nprint(is_num_keith(12345678901234567890))\nprint(is_num_keith(123456789012345678901))\nprint(is_num_keith(123456789"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\tslat = float(slat)\n\tslon = float(slon)\n\telat = float(elat)\n\telon = float(elon)\n\t\n\tR = 6371 # km\n\t\n\tslat = math.radians(slat)\n\tslon = math.radians(slon)\n\telat = math.radians(elat)\n\telon = math.radians(elon)\n\t\n\tdlat = elat - slat\n\tdlon = elon - slon\n\t\n\ta = math.sin(dlat/2)**2 + math.cos(slat) * math.cos(elat) * math.sin(dlon/2)**2\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\t\n\td = R * c\n\t\n\treturn d\n\n#test.py\nimport unittest\nimport distance_lat_long\n\nclass TestDistance(unittest.TestCase):\n\tdef test_distance(self):\n\t\tself.assertEqual(distance_lat_long.distance_lat_long(37.7749, -122.4194, 28.5383, -80.5795), 276.015)\n\nif __name__ == '__main__':\n\tunittest.main()<｜end▁of▁sentence｜>"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix(arr): \n\tif len(arr) == 0: \n\t\treturn \"\"\n\tif len(arr) == 1: \n\t\treturn arr[0] \n\tstr1 = arr[0] \n\tstr2 = arr[1] \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_2(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_3(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_4(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_5(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_6(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len("}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\tuppercase = []\n\tlowercase = []\n\tspecial_character = []\n\tnumeric = []\n\tfor i in string:\n\t\tif i.isupper():\n\t\t\tuppercase.append(i)\n\t\telif i.islower():\n\t\t\tlowercase.append(i)\n\t\telif i.isnumeric():\n\t\t\tnumeric.append(i)\n\t\telse:\n\t\t\tspecial_character.append(i)\n\tprint(f\"Uppercase: {uppercase}\")\n\tprint(f\"Lowercase: {lowercase}\")\n\tprint(f\"Numeric: {numeric}\")\n\tprint(f\"Special Character: {special_character}\")\n\nstring = input(\"Enter a string: \")\nfind_character(string)<｜end▁of▁sentence｜>"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\tcount = 0\n\tarr.sort()\n\ti = 0\n\tj = 1\n\twhile (j < n):\n\t\tif (arr[j] - arr[i] == k):\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telif (arr[j] - arr[i] < k):\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\treturn count\n\n\n# Driver code\narr = [1, 5, 3, 4, 2]\nk = 3\nn = len(arr)\nprint(count_pairs(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\tnew_list=[]\n\tfor i in list:\n\t\tif i>num:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))<｜end▁of▁sentence｜>"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\"\"\"\n\ta, b, c are the coefficients of the parabola.\n\t\"\"\"\n\tx = -b / (2 * a)\n\ty = a * x ** 2 + b * x + c\n\treturn x, y\n\nprint(parabola_focus(1, 2, 1))<｜end▁of▁sentence｜>"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t\"\"\"\n\tCheck if some literals strings are in a string.\n\t\"\"\"\n\timport re\n\tresult = []\n\tfor pattern in patterns:\n\t\tresult.append(re.search(pattern, text))\n\treturn result\n\n\nif __name__ == '__main__':\n\ttext = 'Hello, world!'\n\tpatterns = ['Hello', 'world']\n\tprint(check_literals(text, patterns))<｜end▁of▁sentence｜>"}
{"ID": 550, "source": "MBPP:187", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t\n\tL = [[0 for x in range(n+1)] for x in range(m+1)] \n\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i == 0 or j == 0: \n\t\t\t\tL[i][j] = 0\n\t\t\telif X[i-1] == Y[j-1]: \n\t\t\t\tL[i][j] = L[i-1][j-1] + 1\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i-1][j], L[i][j-1]) \n\n\treturn L[m][n] \n\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\n\nprint(longest_common_subsequence(X, Y, len(X), len(Y)))<｜end▁of▁sentence｜>"}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\tflag=0\n\tfor i in range(1,n):\n\t\tif i*i==n:\n\t\t\tflag=1\n\t\t\tbreak\n\tif flag==1:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\nn=int(input(\"Enter the number: \"))\nprod_Square(n)<｜end▁of▁sentence｜>"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t\n\ti = 0\n\twhile (i < n): \n\t\tif (abs(arr[i])-1 < n and arr[abs(arr[i])-1] > 0): \n\t\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1] \n\t\ti += 1\n\t\n\ti = 0\n\twhile (i < n): \n\t\tif (arr[i] > 0): \n\t\t\treturn i + 1\n\t\ti += 1\n\t\n\treturn n + 1\n\narr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ]\nn = len(arr) \nprint(first_Missing_Positive(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i*i + j*j <= 1:\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_Intgral_Points(0,0,1,1))\nprint(count_Intgral_Points(0,0,1,2))\nprint(count_Intgral_Points(0,0,2,2))\nprint(count_Intgral_Points(0,0,2,1))<｜end▁of▁sentence｜>"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\tmonth_dict = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n\tif monthname3 in month_dict:\n\t\tprint(\"Month has 30 days\")\n\telse:\n\t\tprint(\"Month has 31 days\")\n\nmonthname3 = input(\"Enter month name: \")\ncheck_monthnumber(monthname3)<｜end▁of▁sentence｜>"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\tflag = False\n\tfor i in str: \n\t\tif (i.isdigit()): \n\t\t\tflag = True\n\t\t\tbreak\n\tif (flag == True): \n\t\tprint(\"Yes\") \n\telse: \n\t\tprint(\"No\") \n\nstr = \"GeeksforGeeks\"\ncheck_String(str) \n\nstr = \"Geeks123\"\ncheck_String(str)<｜end▁of▁sentence｜>"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\tnew_tup = ()\n\tfor i in test_tup:\n\t\tif i not in new_tup:\n\t\t\tnew_tup += (i,)\n\treturn new_tup\n\nprint(remove_tuple((1, 2, 3, 3, 3, 3, 4, 5, 5)))<｜end▁of▁sentence｜>"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t\n\tdec_value = 0  \n\t\n\tbase = 1\n\t\n\ttemp = n  \n\twhile temp:  \n\t\tlast_digit = temp % 10  \n\t\ttemp = int(temp / 10)  \n\t\tdec_value += last_digit * base  \n\t\tbase = base * 8\n\t\n\treturn dec_value  \n\nn = int(input(\"Enter a octal number: \"))  \nprint(octal_To_Decimal(n))<｜end▁of▁sentence｜>"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\tlow = 0\n\thigh = n-1\n\twhile low <= high: \n\t\tmid = (low + high)//2\n\t\tif arr[mid] > x: \n\t\t\thigh = mid - 1\n\t\telif arr[mid] < x: \n\t\t\tlow = mid + 1\n\t\telse: \n\t\t\treturn mid \n\treturn -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nn = len(arr) \nresult = first(arr, x, n) \nif result != -1: \n\tprint(\"Element is present at index\", str(result)) \nelse: \n\tprint(\"Element is not present in array\")<｜end▁of▁sentence｜>"}
{"ID": 559, "source": "MBPP:196", "prompt": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\tnew_list = []\n\tfor i in test_list:\n\t\tif len(i) != K:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nprint(remove_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2))<｜end▁of▁sentence｜>"}
{"ID": 560, "source": "MBPP:197", "prompt": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t\"\"\"\n\tThis function takes two tuples as input and returns the exponentiation of the first tuple to the second tuple.\n\t\"\"\"\n\tresult = 1\n\tfor i in range(test_tup2[0]):\n\t\tresult = result * test_tup1[0]\n\treturn result\n\n\nprint(find_exponentio((2, 3), (4, 5)))<｜end▁of▁sentence｜>"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\timport math\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\t\n\tdef f(x):\n\t\treturn a*x**2 + b*x**2\n\t\n\tx = np.linspace(0,1,100)\n\ty = f(x)\n\t\n\tplt.plot(x,y)\n\tplt.show()\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\n\tx = 1\n\t\n\twhile x <= n: \n\t\tx = x << 1\n\t\n\treturn x >> 1\n\nn = 10\nprint(highest_Power_of_2(n))<｜end▁of▁sentence｜>"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\tmax_value = max(list1)\n\tmax_index = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == max_value:\n\t\t\tmax_index.append(i)\n\treturn max_index\n\nprint(position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\n\tif len(lst) == 0: \n\t\treturn True\n\t\n\telif len(lst) == 1: \n\t\treturn True\n\t\n\telse: \n\t\tif lst[0] == lst[1]: \n\t\t\treturn chkList(lst[1:]) \n\t\telse: \n\t\t\treturn False\n\nlst = [1, 2, 3, 4, 5] \nprint(chkList(lst))<｜end▁of▁sentence｜>"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif i%2 != 0:\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_even(\"hello\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\tx = bin(n1^n2)\n\tcount = 0\n\tfor i in x :\n\t\tif i == '1' :\n\t\t\tcount += 1\n\treturn count\n\nprint(hamming_Distance(10,15))<｜end▁of▁sentence｜>"}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\tcount = 0\n\tfor i in s : \n\t\tif i == c : \n\t\t\tcount += 1\n\treturn count\n\ns = input(\"Enter a string : \")\nc = input(\"Enter a character : \")\nprint(count(s,c))<｜end▁of▁sentence｜>"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t\"\"\"\n\t>>> inversion_elements(((1, 2), (3, 4), (5, 6), (7, 8)))\n\t((1, 2), (3, 4), (5, 6), (7, 8))\n\t>>> inversion_elements(((1, 2), (3, 4), (5, 6), (7, 8)))\n\t((1, 2), (3, 4), (5, 6), (7, 8))\n\t>>> inversion_elements(((1, 2), (3, 4), (5, 6), (7, 8)))\n\t((1, 2), (3, 4), (5, 6), (7, 8))\n\t\"\"\"\n\tnew_tup = []\n\tfor i in test_tup:\n\t\tnew_tup.append(tuple(reversed(i)))\n\treturn tuple(new_tup)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 569, "source": "MBPP:206", "prompt": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\tnew_tup = ()\n\tfor i in range(len(test_tup)):\n\t\tif i == len(test_tup) - 1:\n\t\t\tnew_tup += (test_tup[i],)\n\t\telse:\n\t\t\tnew_tup += (test_tup[i], test_tup[i+1])\n\treturn new_tup\n\nprint(concatenate_elements((1, 2, 3, 4, 5, 6)))\nprint(concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))<｜end▁of▁sentence｜>"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for i in range(n)] for j in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(n): \n\t\t\tif i != j and str[i] == str[j]: \n\t\t\t\tdp[i][j] = 1 + dp[i - 1][j - 1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n\treturn dp[n - 1][n - 1] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\timport re\n\tpattern = r'^[+-]?\\d+\\.?\\d{0,2}$'\n\tmatch = re.match(pattern, num)\n\tif match:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_decimal('1.23'))\nprint(is_decimal('1.234'))\nprint(is_decimal('1.2345'))\nprint(is_decimal('1.23456'))\nprint(is_decimal('1.234567'))\nprint(is_decimal('1.2345678'))\nprint(is_decimal('1.23456789'))\nprint(is_decimal('1.234567890'))\nprint(is_decimal('1.2345678901'))\nprint(is_decimal('1.23456789012'))\nprint(is_decimal('1.234567890123'))\nprint(is_decimal('1.2345678901234'))\nprint(is_decimal('1.23456789012345'))\nprint(is_decimal('1.234567890123456'))\nprint(is_decimal('1.2345678901234567'))\nprint(is_decimal('1.23456789012345678'))\nprint(is_decimal('1.234567890123456789'))\nprint(is_decimal('1.2345678901234567890'))\nprint(is_decimal('1.23456789012345678901'))\nprint(is_decimal('1.234567890123456789012'))\nprint(is_"}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\theap[0]=a\n\theapify(heap,0)\n\ndef heapify(heap,i):\n\tl=2*i+1\n\tr=2*i+2\n\tif l<len(heap) and heap[l]<heap[i]:\n\t\tsmallest=l\n\telse:\n\t\tsmallest=i\n\tif r<len(heap) and heap[r]<heap[smallest]:\n\t\tsmallest=r\n\tif smallest != i:\n\t\theap[i],heap[smallest]=heap[smallest],heap[i]\n\t\theapify(heap,smallest)\n\ndef heap_insert(heap,a):\n\theap.append(a)\n\ti=len(heap)-1\n\twhile i>0 and heap[(i-1)//2]>heap[i]:\n\t\theap[(i-1)//2],heap[i]=heap[i],heap[(i-1)//2]\n\t\ti=(i-1)//2\n\ndef heap_delete(heap):\n\theap[0],heap[-1]=heap[-1],heap[0]\n\theap_replace(heap,heap[-1])\n\ndef heap_sort(heap):\n\theapify(heap,0)\n\ti=len(heap)-1\n\twhile i>0:\n\t\theap[0],heap[i]=heap[i],heap[0]\n\t\theap_replace(heap,heap[0])\n\t\ti-=1\n\ndef heap_build(heap):\n\ti=len(heap)//2-1\n\twhile i>=0:\n\t\theapify(heap,i)\n\t\ti-=1\n\ndef heap_extract_min(heap):\n\theap[0],heap[-1]=heap[-1],heap[0]\n\theap_replace(heap,heap[-1])\n\treturn heap.pop()\n\ndef heap_increase_key(heap,i,key"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\timport re\n\tpattern = re.compile(r'[a-zA-Z0-9]')\n\treturn pattern.search(string) != None\n\nprint(is_allowed_specific_char(\"abcd1234\"))\nprint(is_allowed_specific_char(\"abcd12345\"))\nprint(is_allowed_specific_char(\"abcd123456\"))<｜end▁of▁sentence｜>"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_2(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_3(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_4(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_5(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_6(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_7(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_8(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_9(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_10(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_11(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_12(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_13(n): \n\tcount = 0\n"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i**4\n\treturn sum\n\nn = 5\nprint(fourth_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\"\"\"\n\tConcatenates two string tuples.\n\t\"\"\"\n\treturn test_tup1 + test_tup2\n\n\n# Testing\nprint(concatenate_strings((\"Hello\", \"World\"), (\"Goodbye\", \"World\")))<｜end▁of▁sentence｜>"}
{"ID": 577, "source": "MBPP:214", "prompt": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\tdegree = radian * 180 / 3.1415926535897932384626433832795\n\treturn degree\n\nprint(degree_radian(3.1415926535897932384626433832795))<｜end▁of▁sentence｜>"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\"\"\"\n\t>>> decode_list([[4, 'a'], [2, 'b']])\n\t['a', 'a', 'b', 'b']\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(alist)):\n\t\tresult += [alist[i][1] for j in range(alist[i][0])]\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\"\"\"\n\tCheck if list1 is a subset of list2\n\t\"\"\"\n\tlist1_len = len(list1)\n\tlist2_len = len(list2)\n\ti = 0\n\tj = 0\n\twhile i < list1_len and j < list2_len:\n\t\tif list1[i] == list2[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\tj += 1\n\tif i == list1_len:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, "}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\tcount = 0\n\twhile(A != B):\n\t\tif(A > B):\n\t\t\tA = A - B\n\t\t\tcount = count + 1\n\t\telse:\n\t\t\tB = B - A\n\t\t\tcount = count + 1\n\treturn count\n\nA = 10\nB = 20\nprint(min_Operations(A,B))<｜end▁of▁sentence｜>"}
{"ID": 582, "source": "MBPP:219", "prompt": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\tmin_max = []\n\tmin_max.append(min(test_tup))\n\tmin_max.append(max(test_tup))\n\treturn min_max\n\nprint(extract_min_max((1, 2, 3, 4, 5), 2))<｜end▁of▁sentence｜>"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\ttext = text.replace(' ',':')\n\ttext = text.replace(',',':')\n\ttext = text.replace('.',':')\n\treturn text\n\nprint(replace_max_specialchar('This is a test.',2))<｜end▁of▁sentence｜>"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\"\"\"\n\tFinds the first even number in a list of numbers.\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\nprint(first_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_even([1, 3, 5, 7, 9]))\nprint(first_even([0, -2]))\nprint(first_even([]))<｜end▁of▁sentence｜>"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tdata_type = []\n\tfor i in test_tuple:\n\t\tdata_type.append(type(i))\n\t\n\tif len(set(data_type)) == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(check_type((1, 2"}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\tcount = 0\n\tfor i in range(n):\n\t\tif arr[i] == x:\n\t\t\tcount += 1\n\tif count > n//2:\n\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 3, 3, 3, 10]\nx = 3\nn = len(arr)\nprint(is_majority(arr, n, x))<｜end▁of▁sentence｜>"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\nprint(count_Set_Bits(10))<｜end▁of▁sentence｜>"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t\n\tif high < low: \n\t\treturn arr[0] \n\tif high == low: \n\t\treturn arr[low] \n\t\n\tmid = int((low + high)/2) \n\t\n\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\treturn arr[mid + 1] \n\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\treturn arr[mid] \n\tif arr[low] >= arr[mid]: \n\t\treturn find_Min(arr, low, mid-1) \n\treturn find_Min(arr, mid + 1, high) \n\narr = [4, 5, 6, 7, 8, 9, 1, 2, 3] \nn = len(arr) \nprint(\"The minimum element is\", find_Min(arr, 0, n-1))<｜end▁of▁sentence｜>"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\tnew_str = \"\"\n\tfor i in range(len(str)):\n\t\tif i % 2 == 0:\n\t\t\tnew_str += str[i]\n\treturn new_str\n\nprint(odd_values_string(\"hello\"))\nprint(odd_values_string(\"python\"))\nprint(odd_values_string(\"programming\"))<｜end▁of▁sentence｜>"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\tmin = a\n\tif b < min:\n\t\tmin = b\n\tif c < min:\n\t\tmin = c\n\treturn min\n\nprint(min_of_three(1,2,3))\nprint(min_of_three(1,2,1))\nprint(min_of_three(1,1,1))<｜end▁of▁sentence｜>"}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t\n\tmask = (1<<(r-l+1))-1\n\t\n\tif (n & mask) == mask:\n\t\treturn True\n\telse:\n\t\treturn False\n\nn = int(input(\"Enter the number: \"))\nl = int(input(\"Enter the left most bit: \"))\nr = int(input(\"Enter the right most bit: \"))\n\nif all_Bits_Set_In_The_Given_Range(n,l,r):\n\tprint(\"All bits are set in the given range\")\nelse:\n\tprint(\"All bits are not set in the given range\")<｜end▁of▁sentence｜>"}
{"ID": 592, "source": "MBPP:229", "prompt": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\ti = 0\n\tj = n - 1\n\twhile i < j:\n\t\tif arr[i] < 0:\n\t\t\ti += 1\n\t\telse:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tj -= 1\n\treturn arr\n\narr = [1, 2, 3, -4, -1, 4]\nn = len(arr)\nprint(re_arrange_array(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\tstr1 = str1.replace(\" \",\"\"+char+\"\")\n\treturn str1\n\nstr1 = \"Hello World\"\nchar = \"*\"\nprint(replace_blank(str1,char))<｜end▁of▁sentence｜>"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t\n\tsum_arr = [0] * (n + 1) \n\tsum_arr[0] = tri[0][0] \n\t\n\tfor i in range(1, n): \n\t\tsum_arr[i] = tri[i][i] \n\t\n\tfor i in range(3, n + 1): \n\t\tfor j in range(i - 1): \n\t\t\tsum_arr[j] = max(sum_arr[j], sum_arr[j + 1]) \n\t\t\tsum_arr[j] += tri[i - 1][j] \n\t\n\treturn max(sum_arr) \n\n\nif __name__ == \"__main__\": \n\t\n\ttri = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]] \n\tn = len(tri) \n\tprint(max_sum(tri, n))<｜end▁of▁sentence｜>"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\tlist1.sort()\n\tlist1.reverse()\n\tprint(list1[0:n])\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nlarg_nnum(list1,3)<｜end▁of▁sentence｜>"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\tlateralsuface=2*3.14*r*h\n\treturn lateralsuface\n\nprint(lateralsuface_cylinder(5,10))<｜end▁of▁sentence｜>"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\"\"\"\n\tFind the volume of a cube.\n\t\"\"\"\n\treturn l**3\n\nprint(volume_cube(5))<｜end▁of▁sentence｜>"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\tn = n & 0xAAAAAAAA\n\treturn n\n\nprint(even_bit_set_number(10))<｜end▁of▁sentence｜>"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\tcount=0\n\tfor i in range(1,N+1):\n\t\tcount+=(K-i+1)\n\treturn count\n\nN=int(input(\"Enter the value of N: \"))\nK=int(input(\"Enter the value of K: \"))\nprint(\"The maximum number of equilateral triangles that can be formed within a given equilateral triangle is: \",No_of_Triangle(N,K))<｜end▁of▁sentence｜>"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\"\"\"\n\tThis function takes a list of tuples and checks the occurrences of records which occur similar times in the given tuples.\n\t\"\"\"\n\ttest_list.sort()\n\tprint(test_list)\n\tprev_time = test_list[0][0]\n\tcount = 1\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][0] == prev_time:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tprint(prev_time, count)\n\t\t\tprev_time = test_list[i][0]\n\t\t\tcount = 1\n\tprint(prev_time, count)\n\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), ("}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tn = len(str) \n\tcount = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n + 1): \n\t\t\tif (str[i:j]): \n\t\t\t\tcount += 1\n\treturn count \n\nprint(number_of_substrings(\"abcd\"))<｜end▁of▁sentence｜>"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t\n\tdef get_number_of_sequences(n,m): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\tif n < 0: \n\t\t\treturn 0\n\t\tresult = 0\n\t\tfor i in range(1,m+1): \n\t\t\tresult += get_number_of_sequences(n-i,m) \n\t\treturn result \n\t\n\treturn get_number_of_sequences(n,m) \n\nprint(get_total_number_of_sequences(3,4))<｜end▁of▁sentence｜>"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5],[6,7,8,9]))<｜end▁of▁sentence｜>"}
{"ID": 604, "source": "MBPP:241", "prompt": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\tarr = []\n\tfor i in range(m):\n\t\tarr.append([])\n\t\tfor j in range(n):\n\t\t\tarr[i].append([])\n\t\t\tfor k in range(o):\n\t\t\t\tarr[i][j].append('*')\n\treturn arr\n\nprint(array_3d(3,4,5))<｜end▁of▁sentence｜>"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tcount = count + 1\n\treturn count\n\nstr1 = input(\"Enter a string: \")\nprint(\"Total characters in the string are: \", count_charac(str1))<｜end▁of▁sentence｜>"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\nprint(sort_on_occurence([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))<｜end▁of▁sentence｜>"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\n\ti = 1\n\twhile (i * i) <= N: \n\t\ti += 1\n\treturn i * i\n\nN = 16\nprint(\"The smallest perfect square greater than or equal to\", N, \"is\", next_Perfect_Square(N))<｜end▁of▁sentence｜>"}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t\n\tmax_sum = 0\n\t\n\tfor i in range(n): \n\t\tcurr_sum = 0\n\t\tfor j in range(i, n): \n\t\t\tcurr_sum += arr[j] \n\t\t\tif curr_sum > max_sum: \n\t\t\t\tmax_sum = curr_sum \n\treturn max_sum \n\narr = [1, 2, 3, -4, 5, 6, 7, 8, -9, 10] \nn = len(arr) \nprint(max_sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t\"\"\"\n\tComputes the square root of a number using the babylonian method.\n\t\"\"\"\n\tguess = number / 2\n\twhile guess * guess != number:\n\t\tguess = (guess + number / guess) / 2\n\treturn guess\n\nprint(babylonian_squareroot(25))<｜end▁of▁sentence｜>"}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\tn = len(str) \n\tlps = [[0 for x in range(n)] for y in range(n)] \n\n\tfor i in range(n): \n\t\tlps[i][i] = 1\n\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tlps[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tlps[i][j] = lps[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tlps[i][j] = max(lps[i][j-1], lps[i+1][j]) \n\n\treturn lps[0][n-1] \n\nstr = \"GEEKSFORGEEKS\"\nprint(\"The length of the LPS is\", lps(str))<｜end▁of▁sentence｜>"}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\"\"\"\n\tCalculate the harmonic sum of n-1.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += 1 / i\n\treturn sum\n\nprint(harmonic_sum(10))<｜end▁of▁sentence｜>"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\tintersection_array = list(filter(lambda x: x in array_nums2, array_nums1))\n\treturn intersection_array\n\narray_nums1 = [1,2,3,4,5,6,7,8,9,10]\narray_nums2 = [2,4,6,8,10,12,14,16,18,20]\n\nprint(intersection_array(array_nums1,array_nums2))<｜end▁of▁sentence｜>"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\tcount = 0\n\tfor i in tup: \n\t\tif(i == x): \n\t\t\tcount += 1\n\treturn count \n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \nx = 1\nprint(count_X(tup, x))<｜end▁of▁sentence｜>"}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\tnew_list=[]\n\tfor i in list:\n\t\tnew_list.append(element)\n\t\tnew_list.append(i)\n\treturn new_list\n\nprint(insert_element([1,2,3,4,5],10))<｜end▁of▁sentence｜>"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t\n\timport cmath\n\t\n\tnumbers = complex(numbers)\n\t\n\tprint(cmath.polar(numbers))\n\t\nconvert(input())<｜end▁of▁sentence｜>"}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif type(i) == int:\n\t\t\tcount += 1\n\treturn count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_integer(list1))<｜end▁of▁sentence｜>"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t\"\"\"\n\t>>> words_ae('a')\n\t['a']\n\t>>> words_ae('a')\n\t['a']\n\t>>> words_ae('ae')\n\t['a', 'e']\n\t>>> words_ae('aeae')\n\t['a', 'e']\n\t\"\"\"\n\twords = []\n\tfor word in text.split():\n\t\tif word[0] in 'ae':\n\t\t\twords.append(word)\n\treturn words\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations\n\treturn list(combinations(l, n))\n\ndef combinations_colors_with_repetitions(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\tcount = 0\n\tfor i in range(2, n):\n\t\tflag = 0\n\t\tfor j in range(2, i):\n\t\t\tif i % j == 0:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag == 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_Primes_nums(10))<｜end▁of▁sentence｜>"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\ta,b = b,a\n\treturn a,b\n\nprint(swap_numbers(1,2))<｜end▁of▁sentence｜>"}
{"ID": 621, "source": "MBPP:258", "prompt": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\tcount = len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\treturn count\n\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_odd(array_nums))<｜end▁of▁sentence｜>"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t\"\"\"\n\tFind the nth newman–shanks–williams prime number.\n\t\"\"\"\n\ta, b, c = 2, 2, 8\n\twhile n > 1:\n\t\ta, b, c = b, c, (4*b + a) % c\n\t\tn -= 1\n\treturn c\n\nprint(newman_prime(1000))<｜end▁of▁sentence｜>"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tThis function takes two tuples as input and returns the division of the elements of the tuples.\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i]/test_tup2[i])\n\treturn tuple(result)\n\n\n# Driver code\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(division_elements(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\tlist2 = list1[:L]\n\tlist3 = list1[L:]\n\treturn list2, list3\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nL = 5\nprint(split_two_parts(list1, L))<｜end▁of▁sentence｜>"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\td3={}\n\tfor key in d1:\n\t\td3[key]=d1[key]\n\tfor key in d2:\n\t\td3[key]=d2[key]\n\treturn d3\n\nd1={'a':1,'b':2}\nd2={'c':3,'d':4}\nprint(merge_dict(d1,d2))<｜end▁of▁sentence｜>"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\tdog_age = h_age * 7\n\treturn dog_age\n\nprint(dog_age(10))<｜end▁of▁sentence｜>"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t\"\"\"\n\t>>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n\t[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\t>>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n\t[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\t>>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n\t[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n\t\"\"\"\n\tresult = []\n\twhile S:\n\t\tresult.append(S[:step])\n\t\tS = S[step:]\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t\"\"\"\n\t>>> lateralsurface_cube(10)\n\t60\n\t>>> lateralsurface_cube(100)\n\t6000\n\t\"\"\"\n\treturn 6*l**2\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0  \n\tfor i in range(1, n + 1):  \n\t\tif i % 2 != 0:  \n\t\t\tsum += i * i  \n\treturn sum  \nn = int(input(\"Enter the value of n: \"))  \nprint(\"Sum of squares of first\", n, \"odd natural numbers is\", square_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\"\"\"\n\tFind the n'th star number.\n\t\"\"\"\n\tstar_num = 0\n\ti = 0\n\twhile i < n:\n\t\tstar_num += 1\n\t\ti += star_num\n\treturn star_num\n\nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint(find_star_num(34))\nprint(find_star_num(35))\nprint(find_star_num(36))\nprint(find_star_num(37))\nprint(find_star_num(38))\nprint(find_star_num(3"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\tprint(ord(k))\n\nascii_value('a')<｜end▁of▁sentence｜>"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\tsum = 0\n\tfor i in range(0, n, 2):  \n\t\tif arr[i] % 2 == 0:  \n\t\t\tsum = sum + arr[i]  \n\treturn sum  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = len(arr)  \nprint(sum_even_and_even_index(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 634, "source": "MBPP:271", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tif i % 2 == 0: \n\t\t\tsum += i ** 5\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of first\", n, \"even natural numbers is:\", even_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 635, "source": "MBPP:272", "prompt": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t\"\"\"\n\tThis function extracts the rear element from a list of tuples.\n\t\"\"\"\n\trear_element = test_list[-1]\n\treturn rear_element\n\n# Testing the function\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nrear_element = rear_extract(test_list)\nprint(rear_element)<｜end▁of▁sentence｜>"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i] - test_tup2[i])\n\treturn tuple(result)\n\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements(("}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t\n\tsum = 0\n\t\n\tfor i in range(0, n + 1): \n\t\tsum += binomialCoeff(n, i) \n\t\n\treturn sum \n\ndef binomialCoeff(n, k): \n\t\n\tif k > n: \n\t\treturn 0\n\t\n\tif k == 0 or k == n: \n\t\treturn 1\n\t\n\treturn binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k) \n\nn = 5\nprint(even_binomial_Coeff_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\tpi = 3.14\n\tvolume = pi * r * r * h\n\treturn volume\n\nprint(volume_cylinder(2,3))<｜end▁of▁sentence｜>"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\tnew_dict={}\n\tfor key,value in dict.items():\n\t\tif value>n:\n\t\t\tnew_dict[key]=value\n\treturn new_dict\n\ndict={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10}\nprint(dict_filter(dict,5))<｜end▁of▁sentence｜>"}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\tcount = 0\n\tfor i in range(len(test_tup)):\n\t\tif test_tup[i] == test_tup[0]:\n\t\t\tcount = i\n\treturn count\n\nprint(count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\"\"\"\n\tReturns True if n is a decagonal number, False otherwise.\n\t\"\"\"\n\t\n\tdecagonal_numbers = [1, 5, 19, 41, 85, 151, 265, 401, 575, 791, 1045, 1341, 1685, 2075, 2521, 3025, 3591, 4225, 4925, 5691, 6525, 7421, 8385, 9415, 10511, 11675, 12905, 14201, 15565, 17005, 18511, 20085, 21731, 23445, 25225, 27071, 28985, 30965, 33011, 35125, 37305, 39551, 41865, 44245, 46691, 49205, 51785, 54431, 57145, 59925, 62771, 65685, 68665, 71711, 74825, 77995, 81221, 84505, 87845, 91241, 94695, 98205, 101771, 105395, 109075, 112811, 116605, 120455, 124361, 128325, 132345, 136421, 140555, 1"}
{"ID": 643, "source": "MBPP:280", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\tpos = 0\n\tfound = False\n\t\n\twhile pos < len(dlist) and not found:\n\t\tif dlist[pos] == item:\n\t\t\tfound = True\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn found\n\ndlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sequential_search(dlist, 10))\nprint(sequential_search(dlist, 11))<｜end▁of▁sentence｜>"}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\tunique_list = []\n\tfor i in test_list:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list) == len(test_list)\n\nprint(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))<｜end▁of▁sentence｜>"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\tsub_list = list(map(lambda x,y:x-y,nums1,nums2))\n\treturn sub_list\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(sub_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\tcount=0\n\tfor i in list:\n\t\tif i==element:\n\t\t\tcount+=1\n\tif count==len(list):\n\t\treturn True\n\telse:\n\t\treturn False\n\nlist=[1,2,3,4,5]\nelement=1\nprint(check_element(list,element))<｜end▁of▁sentence｜>"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t\"\"\"\n\t>>> text_match_two_three('abbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbb')\n\tFalse\n\t>>> text_match_two_three('abbbbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and len(text) >= 6\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_"}
{"ID": 649, "source": "MBPP:286", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t\n\tsum = 0\n\tmax_sum = 0\n\t\n\tfor i in range(0, n): \n\t\tsum += a[i] \n\t\tmax_sum = max(max_sum, sum) \n\t\n\tsum = 0\n\t\n\tfor i in range(0, k): \n\t\tsum += max_sum \n\t\n\tmax_sum = sum \n\t\n\tfor i in range(k, n): \n\t\tsum = sum + a[i] - a[i - k] \n\t\tmax_sum = max(max_sum, sum) \n\t\n\treturn max_sum \n\n\n# Driver code \na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(a) \nk = 3\nprint(max_sub_array_sum_repeated(a, n, k))<｜end▁of▁sentence｜>"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0  \n\tfor i in range(1, n+1):  \n\t\tif(i%2 == 0):  \n\t\t\tsum = sum + i*i  \n\treturn sum  \nn = 5  \nprint(square_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\tcount = 0\n\tfor i in range(N):\n\t\tif (arr[i] * arr[i]) % P == i:\n\t\t\tcount += 1\n\treturn count\n\n# Driver code\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = len(arr)\nP = 11\nprint(modular_inverse(arr, N, P))<｜end▁of▁sentence｜>"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\tmax_length = 0\n\tmax_list = []\n\tfor i in list1:\n\t\tif len(i) > max_length:\n\t\t\tmax_length = len(i)\n\t\t\tmax_list = [i]\n\t\telif len(i) == max_length:\n\t\t\tmax_list.append(i)\n\treturn max_list\n\nprint(max_length([[1, 2, 3], [4, 5, 6], [10, 11, 12, 13]]))<｜end▁of▁sentence｜>"}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t\n\t# If there are only 2 posts, the answer is k^2 \n\tif n == 2: \n\t\treturn k * k\n\t\n\t# If there are only 3 posts, the answer is k * (k - 1) \n\tif n == 3: \n\t\treturn k * (k - 1) \n\t\n\t# Initialize the answer \n\tans = k * (k - 1) \n\t\n\t# Iterate for remaining posts \n\tfor i in range(4, n + 1): \n\t\n\t\t# Update the answer \n\t\tans += (k - 1) * count_no_of_ways(n - i, k) \n\t\n\treturn ans \n\n# Driver code \nn = 4\nk = 3\nprint(count_no_of_ways(n, k))<｜end▁of▁sentence｜>"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\tprint(n//m)\n\nfind(10,2)<｜end▁of▁sentence｜>"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\to=(w**2+h**2)**0.5\n\treturn o\n\nprint(otherside_rightangle(3,4))<｜end▁of▁sentence｜>"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmaxval = listval[0]\n\tfor i in listval:\n\t\tif i > maxval:\n\t\t\tmaxval = i\n\treturn maxval\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 6]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div(10))<｜end▁of▁sentence｜>"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tinv_count += 1\n\treturn inv_count \n\narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", get_Inv_Count(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\tflat_list = []\n\tfor element in list1:\n\t\tif type(element) == list:\n\t\t\tflat_list.extend(flatten_list(element))\n\t\telse:\n\t\t\tflat_list.append(element)\n\treturn flat_list\n\nprint(flatten_list([1, [2, [3, 4], 5], [6, 7], 8]))<｜end▁of▁sentence｜>"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\tl3 = []\n\tfor i in l1:\n\t\tif i in l2:\n\t\t\tl3.append(i)\n\treturn l3\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nl2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(intersection_nested_lists(l1, l2))<｜end▁of▁sentence｜>"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tif aggregate > max_aggregate:\n\t\t\tmax_aggregate = aggregate\n\treturn max_aggregate\n\n\n\"\"\"\nWrite a function to calculate the minimum aggregate from the list of tuples.\n\"\"\"\ndef min_aggregate(stdata):\n\tmin_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tif aggregate < min_aggregate:\n\t\t\tmin_aggregate = aggregate\n\treturn min_aggregate\n\n\n\"\"\"\nWrite a function to calculate the average aggregate from the list of tuples.\n\"\"\"\ndef avg_aggregate(stdata):\n\tavg_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tavg_aggregate += aggregate\n\tavg_aggregate /= len(stdata)\n\treturn avg_aggregate\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_2(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_3(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_4(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn"}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\n\tdef count_binary_seq_rec(n, count): \n\t\tif n == 0: \n\t\t\treturn count \n\t\treturn count_binary_seq_rec(n - 1, count + count_binary_seq_rec(n - 1, count)) \n\t\n\treturn count_binary_seq_rec(n, 0) \n\nprint(count_binary_seq(5))<｜end▁of▁sentence｜>"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t\"\"\"\n\t>>> dict_depth({})\n\t0\n\t>>> dict_depth({'a': 1})\n\t1\n\t>>> dict_depth({'a': {'b': 2}})\n\t2\n\t>>> dict_depth({'a': {'b': {'c': 3}}})\n\t3\n\t\"\"\"\n\tdepth = 0\n\tfor key in d:\n\t\tif isinstance(d[key], dict):\n\t\t\tdepth += 1\n\treturn depth\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t\n\twhile n: \n\t\tn &= n - 1\n\treturn n \n\n\nn = 10\nprint(set_Bit_Number(n))<｜end▁of▁sentence｜>"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i]>a[j]:\n\t\t\t\tcount+=1\n\treturn count\n\ndef main():\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tprint(solve(a,n))\n\nif __name__==\"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t\n\tstart = 0\n\tend = len(arr) - 1\n\t\n\twhile start <= end :\n\t\t\n\t\tmid = (start + end) // 2\n\t\t\n\t\tif arr[mid] == index :\n\t\t\treturn mid\n\t\t\n\t\tif ranges[mid] >= ranges[start] :\n\t\t\tif arr[start] <= index and index < arr[mid] :\n\t\t\t\tend = mid - 1\n\t\t\telse :\n\t\t\t\tstart = mid + 1\n\t\telse :\n\t\t\tif arr[mid] < index and index <= arr[end] :\n\t\t\t\tstart = mid + 1\n\t\t\telse :\n\t\t\t\tend = mid - 1\n\t\n\treturn -1\n\n\narr = [4,5,6,7,0,1,2]\nranges = [0,1,2,4,5,6,7]\nrotations = 3\nindex = 0\n\nprint(find_Element(arr,ranges,rotations,index))<｜end▁of▁sentence｜>"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\tresult = []\n\tfor word in words:\n\t\tif word[0] == 'p':\n\t\t\tresult.append(word)\n\treturn result\n\nprint(start_withp(['pineapple', 'pizza', 'puppy', 'python', 'python', 'python']))<｜end▁of▁sentence｜>"}
{"ID": 669, "source": "MBPP:306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\n\t# base case\n\tif index == n:\n\t\treturn 0\n\t\n\t# recursive case\n\tmax_sum = 0\n\tfor i in range(index, n):\n\t\tif a[i] > a[index]:\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n\t\n\t# return the maximum sum\n\treturn max_sum\n\n\n# Driver code\na = [1, 101, 2, 3, 100, 4, 5]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subseq(a, n, 0, k))<｜end▁of▁sentence｜>"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\"\"\"\n\t>>> tuplex = (1,2,3,4,5,6,7,8,9,10)\n\t>>> colon_tuplex(tuplex,2,5)\n\t(2, 3, 4, 5)\n\t\"\"\"\n\treturn tuplex[m:n]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\tnums1.sort()\n\tnums2.sort()\n\tnums1 = nums1[len(nums1)-N:]\n\tnums2 = nums2[len(nums2)-N:]\n\tproduct = 1\n\tfor i in range(len(nums1)):\n\t\tproduct *= nums1[i]\n\tfor i in range(len(nums2)):\n\t\tproduct *= nums2[i]\n\treturn product\n\nprint(large_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))<｜end▁of▁sentence｜>"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\tmaximum = a if a > b else b\n\treturn maximum\n\nprint(maximum(10,20))<｜end▁of▁sentence｜>"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\tstr1 = str1.split()\n\tstr1 = tuple(str1)\n\treturn str1\n\nprint(string_to_tuple(\"hello world\"))<｜end▁of▁sentence｜>"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\"\"\"\n\t>>> set_left_most_unset_bit(10)\n\t11\n\t>>> set_left_most_unset_bit(15)\n\t16\n\t>>> set_left_most_unset_bit(16)\n\t16\n\t>>> set_left_most_unset_bit(17)\n\t18\n\t\"\"\"\n\tn = n | (n-1)\n\treturn n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\"\"\"\n\tr: radius of the cone\n\th: height of the cone\n\t\"\"\"\n\timport math\n\treturn (1/3)*math.pi*r*r*h\n\nprint volume_cone(2,3)<｜end▁of▁sentence｜>"}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\tprint(\"Positive numbers in the list are:\")\n\tfor i in list1:\n\t\tif i > 0:\n\t\t\tprint(i)\n\nlist1 = [12, -7, 5, 64, -14]\npos_nos(list1)<｜end▁of▁sentence｜>"}
{"ID": 677, "source": "MBPP:314", "prompt": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\n\t# Create a 2D array to store the maximum sum \n\t# for each sub-rectangle ending at each column \n\tdp = [[0 for i in range(n)] for j in range(n)] \n\t\n\t# Copy the first row of the given grid \n\tfor i in range(n) : \n\t\tdp[0][i] = grid[0][i] \n\t\n\t# Copy the first column of the given grid \n\tfor i in range(1, n) : \n\t\tdp[i][0] = grid[i][0] \n\t\n\t# Fill the rest of the dp table \n\tfor i in range(1, n) : \n\t\tfor j in range(1, n) : \n\t\t\tdp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) \n\t\n\t# Return the maximum sum \n\treturn dp[n - 1][n - 1] \n\n# Driver code \ngrid = [[1, 2, -1, -4, -20], \n\t\t[-8, -3, 4, 2, 1], \n\t\t[3, 8, 10, 1, 3], \n\t\t[-4, -1, 1, 7, -6]] \nn = len(grid[0]) \nprint(max_sum_rectangular_grid(grid, n))<｜end▁of▁sentence｜>"}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\n\tmaxLen = 0\n\tcurrLen = 0\n\t\n\tfor i in range(len(str)): \n\t\tif (str[i] == ' ' or i == len(str) - 1): \n\t\t\tif (currLen % 2 == 0): \n\t\t\t\tmaxLen = max(maxLen, currLen) \n\t\t\t\tcurrLen = 0\n\t\t\telse: \n\t\t\t\tcurrLen = 0\n\t\telse: \n\t\t\tcurrLen += 1\n\t\n\treturn maxLen \n\nstr = \"I am a good boy\"\nprint(find_Max_Len_Even(str))<｜end▁of▁sentence｜>"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the last occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] > x:\n\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tif mid == len(A) - 1 or A[mid + 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tleft = mid + 1\n\treturn -1\n\n\nif __name__ == '__main__':\n\tA = [1, 2, 2, 2, 2, 3, 4, 5, 5]\n\tprint(find_last_occurrence(A, 2))<｜end▁of▁sentence｜>"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\tnew_list = []\n\tcount = 1\n\tfor i in range(len(alist)-1):\n\t\tif alist[i] == alist[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tnew_list.append(count)\n\t\t\tnew_list.append(alist[i])\n\t\t\tcount = 1\n\tnew_list.append(count)\n\tnew_list.append(alist[-1])\n\treturn new_list\n\nprint(modified_encode([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tmax_vol = 0\n\tfor i in range(1,s+1):\n\t\tfor j in range(1,s+1):\n\t\t\tfor k in range(1,s+1):\n\t\t\t\tif i+j+k == s:\n\t\t\t\t\tmax_vol = max(max_vol,i*j*k)\n\treturn max_vol\n\nprint(max_volume(10))<｜end▁of▁sentence｜>"}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\tpattern = r\"\\b\\w{5}\\b\"\n\tresult = re.findall(pattern, text)\n\treturn result\n\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog\"))<｜end▁of▁sentence｜>"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\tsum_squared = 0\n\tsum_squared_squared = 0\n\tfor i in range(1, n+1):\n\t\tsum_squared += i**2\n\t\tsum_squared_squared += i\n\treturn sum_squared**2 - sum_squared_squared**2\n\nprint(sum_difference(100))<｜end▁of▁sentence｜>"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\tdemlo = []\n\tdemlo.append(s)\n\twhile True:\n\t\tdemlo.append(str(sum(int(i) for i in str(demlo[-1]))))\n\t\tif demlo[-1] in demlo[:-1]:\n\t\t\treturn demlo.index(demlo[-1])\n\nprint(find_demlo(123456789))<｜end▁of▁sentence｜>"}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\tmin_val = min(list1)\n\tpos = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min_val:\n\t\t\tpos.append(i)\n\treturn pos\n\nprint(position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\ti = 0\n\tj = n - 1\n\twhile i < j:\n\t\tif arr[i] < 0:\n\t\t\ti += 1\n\t\telse:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tj -= 1\n\treturn arr\n\narr = [1, 2, 3, -4, -1, 4]\nn = len(arr)\nprint(re_arrange(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\tsum = 0\n\tfor i in range(0, len(test_tuple), 2):\n\t\tsum += test_tuple[i]\n\treturn sum\n\nprint(sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\tdp = [0]*(n+1)\n\tfor i in range(1,n+1):\n\t\tdp[i] = i\n\t\tfor j in range(1,i):\n\t\t\tif j*j > i:\n\t\t\t\tbreak\n\t\t\tdp[i] = min(dp[i],1+dp[i-j*j])\n\treturn dp[n]\n\nprint(get_Min_Squares(12))<｜end▁of▁sentence｜>"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\tword_count = {}\n\tfor word in test_list:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\tmax_count = max(word_count.values())\n\tmax_words = [word for word, count in word_count.items() if count == max_count]\n\treturn max_words\n\nprint(most_occurrences([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"x\"]))<｜end▁of▁sentence｜>"}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\ta = max(x,y,z)\n\tb = min(x,y,z)\n\tc = x+y+z-a-b\n\tif a**2 == b**2 + c**2:\n\t\tprint(\"isosceles\")\n\telse:\n\t\tprint(\"not isosceles\")\n\ncheck_isosceles(3,4,5)\ncheck_isosceles(3,3,5)\ncheck_isosceles(3,4,4)<｜end▁of▁sentence｜>"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\tlist1 = list1[m:] + list1[:m]\n\treturn list1\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(rotate_left(list1,2,4))<｜end▁of▁sentence｜>"}
{"ID": 692, "source": "MBPP:329", "prompt": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\tcount = 0\n\tfor i in list:\n\t\tif i < 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(neg_count([1, 2, 3, -4, -5, -6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\timport re\n\tpattern = re.compile(r'\\b\\w{3,5}\\b')\n\tresult = pattern.findall(text)\n\treturn result\n\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))<｜end▁of▁sentence｜>"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\tcount = 0\n\twhile n: \n\t\tn &= (n - 1) \n\t\tcount += 1\n\treturn count \n\nprint(count_unset_bits(10))<｜end▁of▁sentence｜>"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\tdict = {}\n\tfor n in str1:\n\t\tkeys = dict.keys()\n\t\tif n in keys:\n\t\t\tdict[n] += 1\n\t\telse:\n\t\t\tdict[n] = 1\n\treturn dict\n\nprint(char_frequency('google.com'))<｜end▁of▁sentence｜>"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\tsub_li.sort(key = lambda x: x[1]) \n\treturn sub_li\n\nsub_li = [[5, 2, 3], [1, 3, -1], [4, 6, 1], [10, 4, 1]]\nprint(Sort(sub_li))<｜end▁of▁sentence｜>"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t\n\tif a+b>c and b+c>a and c+a>b:  \n\t\tprint(\"The triangle is valid\")  \n\telse:  \n\t\tprint(\"The triangle is not valid\")  \n\na=int(input(\"Enter the first side of the triangle: \"))  \nb=int(input(\"Enter the second side of the triangle: \"))  \nc=int(input(\"Enter the third side of the triangle: \"))  \ncheck_Validity(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\tsum=0\n\tfor i in range(n):\n\t\tsum=sum+a+(i*d)\n\treturn sum\n\na=int(input(\"Enter the first term of AP: \"))\nn=int(input(\"Enter the number of terms: \"))\nd=int(input(\"Enter the common difference: \"))\nprint(\"Sum of AP is: \",ap_sum(a,n,d))<｜end▁of▁sentence｜>"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\tmonthnum = {'January':31,'February':28,'March':31,'April':30,'May':31,'June':30,'July':31,'August':31,'September':30,'October':31,'November':30,'December':31}\n\tif monthname1 in monthnum:\n\t\tprint(\"The month has 28 days\")\n\telse:\n\t\tprint(\"The month has 30 days\")\n\ncheck_monthnum('January')\ncheck_monthnum('February')\ncheck_monthnum('March')\ncheck_monthnum('April')\ncheck_monthnum('May')\ncheck_monthnum('June')\ncheck_monthnum('July')\ncheck_monthnum('August')\ncheck_monthnum('September')\ncheck_monthnum('October')\ncheck_monthnum('November')\ncheck_monthnum('December')<｜end▁of▁sentence｜>"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t\"\"\"\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1,len(s)+1):\n\t\t\tif s[i] == s[j-1]:\n\t\t\t\tcount += 1\n\treturn count\n\ns = input()\nprint(count_Substring_With_Equal_Ends(s))<｜end▁of▁sentence｜>"}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tmax = 0\n\tfor i in range(1,y+1):  \n\t\tif x%i==0 and y%i==0:  \n\t\t\tmax = i  \n\treturn max  \nx = int(input(\"Enter the first number: \"))  \ny = int(input(\"Enter the second number: \"))  \nprint(\"The maximum occuring divisor is\", find_Divisor(x,y))<｜end▁of▁sentence｜>"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\tlst.sort()\n\tsum = 0\n\tfor i in range(3):\n\t\tsum += lst[i]\n\treturn sum\n\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t\"\"\"\n\t>>> set_to_tuple({1, 2, 3})\n\t((1, 2, 3),)\n\t>>> set_to_tuple({1, 2, 3, 4})\n\t((1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 2, 1), (4, 2, 3), (4, 3, 1), (4, 3, 2))\n\t\"\"\"\n\treturn tuple(sorted(s))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\tlist.sort()\n\tmin_range = list[1] - list[0]\n\tmin_range_list = [list[0], list[1]]\n\tfor i in range(len(list)-1):\n\t\trange_ = list[i+1] - list[i]\n\t\tif range_ < min_range:\n\t\t\tmin_range = range_\n\t\t\tmin_range_list = [list[i], list[i+1]]\n\treturn min_range_list\n\nprint(find_minimum_range([1, 5, 3, 2]))\nprint(find_minimum_range([4, 1, 2, 3, 6, 2]))<｜end▁of▁sentence｜>"}
{"ID": 706, "source": "MBPP:343", "prompt": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\td=0\n\tl=0\n\tfor i in s:\n\t\tif i.isdigit():\n\t\t\td+=1\n\t\telif i.isalpha():\n\t\t\tl+=1\n\treturn d,l\n\ns=input(\"Enter a string: \")\nd,l=dig_let(s)\nprint(\"Number of digits: \",d)\nprint(\"Number of letters: \",l)<｜end▁of▁sentence｜>"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\tcount = 0\n\tfor i in range(n,m+1): \n\t\tflag = 0\n\t\tfor j in range(2,i): \n\t\t\tif (i%j==0): \n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif (flag==0 and i != 1): \n\t\t\tcount = count + 1\n\treturn count \nn = int(input(\"Enter the lower limit: \"))\nm = int(input(\"Enter the upper limit: \"))\nprint(\"Number of elements with odd factors in the given range: \",count_Odd_Squares(n,m))<｜end▁of▁sentence｜>"}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\tdiff = []\n\tfor i in range(len(nums)-1):\n\t\tdiff.append(nums[i+1]-nums[i])\n\treturn diff\n\nprint(diff_consecutivenums([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\n\tcount = 0\n\t\n\tfor i in range(m): \n\t\tfor j in range(n): \n\t\t\tif (i * j == n): \n\t\t\t\tcount += 1\n\treturn count \n\nm = 10\nn = 10\nprint(count_Squares(m, n))<｜end▁of▁sentence｜>"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\tn = len(M) \n\tdp = [[0 for i in range(n)] for j in range(n)] \n\t\n\tfor i in range(n): \n\t\tdp[i][i] = 1\n\t\n\tfor i in range(n-2,-1,-1): \n\t\tfor j in range(i+1,n): \n\t\t\tif M[i] == M[j]: \n\t\t\t\tdp[i][j] = dp[i+1][j-1] \n\t\t\tdp[i][j] += dp[i+1][j] \n\t\n\treturn dp[0][n-1] \n\ndef main():\n\tM = [1, 2, 3, 4, 5] \n\tprint(find_ways(M)) \n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t\n\tfor i in string :\n\t\tif i not in ['0','1'] :\n\t\t\treturn False\n\treturn True\n\nstring = input(\"Enter a string : \")\n\nif check(string) :\n\tprint(\"It is a binary string\")\nelse :\n\tprint(\"It is not a binary string\")<｜end▁of▁sentence｜>"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\tchar_set = set()\n\tfor char in str:\n\t\tif char in char_set:\n\t\t\treturn False\n\t\tchar_set.add(char)\n\treturn True\n\nprint(unique_Characters(\"abcdefg\"))\nprint(unique_Characters(\"abcdefg\"))<｜end▁of▁sentence｜>"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\tlist2 = []\n\tfor i in list1:\n\t\tlist2.append(i[:n] + i[n+1:])\n\treturn list2\n\nprint(remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))<｜end▁of▁sentence｜>"}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\ttn = a + (n-1)*d\n\treturn tn\n\nprint(tn_ap(1,2,3))<｜end▁of▁sentence｜>"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\timport math\n\tpi = math.pi\n\tarea = pi * radius * radius\n\trectangles = area / 4\n\treturn rectangles\n\nprint(count_Rectangles(10))<｜end▁of▁sentence｜>"}
{"ID": 719, "source": "MBPP:356", "prompt": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t\"\"\"\n\tFind the third angle of a triangle using two angles.\n\t\"\"\"\n\treturn 180 - (a+b)\n\nprint(find_angle(30,60))<｜end▁of▁sentence｜>"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_num = test_list[0]\n\tfor i in test_list:\n\t\tif i > max_num:\n\t\t\tmax_num = i\n\treturn max_num\n\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\tresult = map(lambda x,y:x%y,nums1,nums2)\n\treturn result\n\nnums1 = [10,20,30,40,50]\nnums2 = [10,20,30,40,50]\nprint(moddiv_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b**2 - 4*a*c \n\tif d > 0: \n\t\tprint(\"Real and Distinct\") \n\telif d == 0: \n\t\tprint(\"Real and Equal\") \n\telse: \n\t\tprint(\"Imaginary\") \n\na = int(input(\"Enter a: \")) \nb = int(input(\"Enter b: \")) \nc = int(input(\"Enter c: \")) \n\nCheck_Solution(a, b, c)<｜end▁of▁sentence｜>"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\tcarol = [1, 1, 2, 6, 4]\n\twhile len(carol) < n:\n\t\tcarol.append(carol[-1] + carol[-2] + carol[-3] + carol[-4] + carol[-5])\n\treturn carol[n-1]\n\nprint(get_carol(10))<｜end▁of▁sentence｜>"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i:\n\t\t\tlist2.append(i)\n\treturn list2\n\nprint(remove_empty}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\tmax_occurrences = 0\n\tmax_num = 0\n\tfor num in nums:\n\t\tif nums.count(num) > max_occurrences:\n\t\t\tmax_occurrences = nums.count(num)\n\t\t\tmax_num = num\n\treturn max_num\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\tnew_list = []\n\tfor i in range(len(test_list)):\n\t\tnew_list.append(test_list[i] + K)\n\treturn tuple(new_list)\n\nprint(add_K_element((1, 2, 3, 4, 5), 1))\nprint(add_K_element((1, 2, 3, 4, 5), 2))\nprint(add_K_element((1, 2, 3, 4, 5), 3))\nprint(add_K_element((1, 2, 3, 4, 5), 4))\nprint(add_K_element((1, 2, 3, 4, 5), 5))<｜end▁of▁sentence｜>"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t\n\tflip_count = 0\n\tprev_char = '0'\n\t\n\tfor i in range(len(str)):\n\t\tif str[i] != prev_char:\n\t\t\tflip_count += 1\n\t\t\tprev_char = str[i]\n\t\n\treturn flip_count\n\nprint(min_flip_to_make_string_alternate(\"0100101010\"))<｜end▁of▁sentence｜>"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\tcount = 0\n\twhile n != 0:\n\t\tn = n // 10\n\t\tcount += 1\n\treturn count\n\nprint(count_Digit(12345))<｜end▁of▁sentence｜>"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\tlargest_product = 0\n\tfor i in range(len(list_nums)-1):\n\t\tproduct = list_nums[i] * list_nums[i+1]\n\t\tif product > largest_product:\n\t\t\tlargest_product = product\n\treturn largest_product\n\nprint(adjacent_num_product([1,2,3,4,5]))\nprint(adjacent_num_product([1,2,3,4,5,6]))\nprint(adjacent_num_product([1,2,3,4,5,6,7]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\"\"\"\n\tCheck if a binary tree is balanced or not.\n\t\"\"\"\n\tif root is None:\n\t\treturn True\n\n\tleft_height = get_height(root.left)\n\tright_height = get_height(root.right)\n\n\tif abs(left_height - right_height) > 1:\n\t\treturn False\n\n\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n\t\"\"\"\n\tGet the height of a binary tree.\n\t\"\"\"\n\tif root is None:\n\t\treturn 0\n\n\treturn 1 + max(get_height(root.left), get_height(root.right))\n\n\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\n\ndef main():\n\troot = Node(1)\n\troot.left = Node(2)\n\troot.right = Node(3)\n\troot.left.left = Node(4)\n\troot.left.right = Node(5)\n\troot.right.left = Node(6)\n\troot.right.right = Node(7)\n\n\tprint(is_tree_balanced(root))\n\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t\"\"\"\n\t>>> repeat_tuples((1, 2, 3), 3)\n\t(1, 2, 3, 1, 2, 3, 1, 2, 3)\n\t>>> repeat_tuples((1, 2, 3), 0)\n\t()\n\t\"\"\"\n\tresult = ()\n\tfor i in range(N):\n\t\tresult += test_tup\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface=2*(l*w+l*h+w*h)\n\treturn lateralsurface\n\nprint(lateralsurface_cuboid(10,10,10))<｜end▁of▁sentence｜>"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t\"\"\"\n\t>>> float_sort((1.2, 2.4, 0.5, 3.1))\n\t(0.5, 1.2, 2.4, 3.1)\n\t>>> float_sort((1.2, 2.4, 0.5, 3.1))\n\t(0.5, 1.2, 2.4, 3.1)\n\t>>> float_sort((1.2, 2.4, 0.5, 3.1))\n\t(0.5, 1.2, 2.4, 3.1)\n\t\"\"\"\n\treturn tuple(sorted(price, key=lambda x: float(x)))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t\"\"\"\n\tFinds the smallest missing element in a sorted array.\n\t\"\"\"\n\tif left_element > right_element:\n\t\treturn right_element + 1\n\n\tmid_element = (left_element + right_element) // 2\n\n\tif A[mid_element] == mid_element:\n\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\telse:\n\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, "}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\theap = []\n\tfor i in nums:\n\t\theap.append(i)\n\t\theapify(heap)\n\treturn heap\n\ndef heapify(heap):\n\tn = len(heap)\n\ti = n//2 - 1\n\twhile i >= 0:\n\t\tleft = 2*i + 1\n\t\tright = 2*i + 2\n\t\tlargest = i\n\t\tif left < n and heap[left] > heap[largest]:\n\t\t\tlargest = left\n\t\tif right < n and heap[right] > heap[largest]:\n\t\t\tlargest = right\n\t\tif largest != i:\n\t\t\theap[i], heap[largest] = heap[largest], heap[i]\n\t\t\ti = largest\n\t\telse:\n\t\t\tbreak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tv = l*w*h\n\treturn v\n\nprint(volume_cuboid(2,3,4))<｜end▁of▁sentence｜>"}
{"ID": 737, "source": "MBPP:374", "prompt": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\tpermute_string_rec(\"\", str)\n\ndef permute_string_rec(prefix, str):\n\tif len(str) == 0:\n\t\tprint(prefix)\n\telse:\n\t\tfor i in range(len(str)):\n\t\t\tpermute_string_rec(prefix + str[i], str[:i] + str[i+1:])\n\npermute_string(\"abc\")<｜end▁of▁sentence｜>"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t\"\"\"\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t"}
{"ID": 739, "source": "MBPP:376", "prompt": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\tnew_tup = ()\n\tfor i in test_tup:\n\t\tif test_tup.count(i) == 1:\n\t\t\tnew_tup += (i,)\n\treturn new_tup\n\nprint(remove_replica((1, 2, 3, 1, 2, 3)))\nprint(remove_replica((1, 2, 3, 1, 2, 3, 1, 2, 3)))\nprint(remove_replica((1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)))<｜end▁of▁sentence｜>"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\ttest_list.append(test_list.pop(0))\n\treturn test_list\n\nprint(move_first([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\tarea = 2*(l*w + w*h + h*l)\n\treturn area\n\nprint(surfacearea_cuboid(2,3,4))<｜end▁of▁sentence｜>"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\tlist1=[]\n\tfor i in range(rownum):\n\t\tlist1.append([])\n\t\tfor j in range(colnum):\n\t\t\tlist1[i].append(i*j)\n\treturn list1\nprint(multi_list(3,4))<｜end▁of▁sentence｜>"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\tlist_data.sort(key=lambda x: x[index_no])\n\treturn list_data\n\n\nlist_data = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t\"\"\"\n\tFind the number of rotations in a circularly sorted array.\n\t\"\"\"\n\tlow = 0\n\thigh = len(A) - 1\n\twhile low <= high:\n\t\tif A[low] <= A[high]:\n\t\t\treturn low\n\t\tmid = (low + high) // 2\n\t\tnext = (mid + 1) % len(A)\n\t\tprev = (mid - 1 + len(A)) % len(A)\n\t\tif A[mid] <= A[next] and A[mid] <= A[prev]:\n\t\t\treturn mid\n\t\telif A[mid] <= A[high]:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(find_rotation_count([15, 18, 2, 3, 6, 12]))\n\tprint(find_rotation_count([7, 9, 1, 2, 3]))\n\tprint(find_rotation_count([1, 2, 3, 4, 5, 6, 7]))\n\tprint(find_rotation_count([2, 1]))<｜end▁of▁sentence｜>"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\n\tmask = 0xAAAAAAAA\n\t\n\tn = n ^ mask\n\t\n\treturn n\n\nprint(even_bit_toggle_number(10))<｜end▁of▁sentence｜>"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\tmin = arr[0] \n\tfor i in range(1, n): \n\t\tif arr[i] < min: \n\t\t\tmin = arr[i] \n\tcount = 0\n\tfor i in range(0, n): \n\t\tif (arr[i] == min): \n\t\t\tcount += 1\n\treturn count \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr) \nprint(frequency_Of_Smallest(n, arr))<｜end▁of▁sentence｜>"}
{"ID": 748, "source": "MBPP:385", "prompt": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t\"\"\"\n\tReturns the n'th perrin number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn get_perrin(n-1) + get_perrin(n-2)\n\nprint(get_perrin(10))<｜end▁of▁sentence｜>"}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\tcount = 0\n\tstack = []\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tstack.append(i)\n\t\telse:\n\t\t\tif len(stack) > 0:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\tcount += 1\n\treturn count + len(stack)\n\ns = input()\nprint(swap_count(s))<｜end▁of▁sentence｜>"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t\n\tif N % 2 == 0: \n\t\tprint(\"Even\") \n\telse: \n\t\tprint(\"Odd\") \n\neven_or_odd(10)<｜end▁of▁sentence｜>"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\ti = 0\n\twhile (2**i <= n): \n\t\ti += 1\n\treturn i - 1\n\nprint(highest_Power_of_2(10))<｜end▁of▁sentence｜>"}
{"ID": 752, "source": "MBPP:389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t\"\"\"\n\tFind the n'th lucas number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(10))<｜end▁of▁sentence｜>"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\tnew_list = []\n\tfor i in list:\n\t\tnew_list.append(string+i)\n\treturn new_list\n\nprint(add_string(['a','b','c'],'x'))<｜end▁of▁sentence｜>"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\td1 = {l1[i]: l2[i] for i in range(len(l1))}\n\td2 = {l1[i]: l3[i] for i in range(len(l1))}\n\treturn d1, d2\n\nl1 = ['a', 'b', 'c', 'd']\nl2 = [1, 2, 3, 4]\nl3 = [5, 6, 7, 8]\n\nprint(convert_list_dictionary(l1, l2, l3))<｜end▁of▁sentence｜>"}
{"ID": 755, "source": "MBPP:392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t\"\"\"\n\tReturns the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 2\n\telif n == 3:\n\t\treturn 4\n\telif n == 4:\n\t\treturn 5\n\telif n == 5:\n\t\treturn 6\n\telse:\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nprint get_max_sum(100)<｜end▁of▁sentence｜>"}
{"ID": 756, "source": "MBPP:393", "prompt": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\tmax_length = max(map(len, input_list))\n\treturn [item for item in input_list if len(item) == max_length]\n\nprint(max_length_list(['abc', 'def', 'ghi', 'jkl']))<｜end▁of▁sentence｜>"}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t\"\"\"\n\tCheck if tuple is distinct or not\n\t\"\"\"\n\tdistinct = True\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] == test_tup[j]:\n\t\t\t\tdistinct = False\n\t\t\t\tbreak\n\treturn distinct\n\n\nif __name__ == \"__main__\":\n\ttest_tup = (1, 2, 3, 4, 5)\n\tprint(check_distinct(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\tfor i in str1:\n\t\tif count[i] == 1:\n\t\t\treturn i\n\treturn \"No non-repeating character\"\n\nprint(first_non_repeating_character(\"abacadefg\"))\nprint(first_non_repeating_character(\"aabbccddeeff\"))\nprint(first_non_repeating_character(\"aabbccddeeff\"))<｜end▁of▁sentence｜>"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\timport re\n\tpattern = r\"^[a-zA-Z]$\"\n\tmatch = re.search(pattern, string)\n\tif match:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\ncheck_char(\"a\")\ncheck_char(\"ab\")\ncheck_char(\"abc\")\ncheck_char(\"abcd\")\ncheck_char(\"abcdf\")\ncheck_char(\"abcdfgh\")\ncheck_char(\"abcdfghi\")\ncheck_char(\"abcdfghij\")\ncheck_char(\"abcdfghijk\")\ncheck_char(\"abcdfghijkl\")\ncheck_char(\"abcdfghijklm\")\ncheck_char(\"abcdfghijklmn\")\ncheck_char(\"abcdfghijklmno\")\ncheck_char(\"abcdfghijklmnop\")\ncheck_char(\"abcdfghijklmnopq\")\ncheck_char(\"abcdfghijklmnopqr\")\ncheck_char(\"abcdfghijklmnopqrs\")\ncheck_char(\"abcdfghijklmnopqrst\")\ncheck_char(\"abcdfghijklmnopqrstu\")\ncheck_char(\"abcdfghijklmnopqrstuv\")\ncheck_char(\"abcdfghijklmnopqrstuvw\")\ncheck_char(\"abcdfghijklmnopqrstuvwx\")\ncheck_char(\"abcdfghijklmnopqrstuvwxy\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyz\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzA\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzB\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzC\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzD\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzE\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzF\")"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t\"\"\"\n\tFind the median of three numbers\n\t\"\"\"\n\tmedian = []\n\tmedian.append(a)\n\tmedian.append(b)\n\tmedian.append(c)\n\tmedian.sort()\n\treturn median[1]\n\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,3,2))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,3,1))\nprint(median_numbers(3,1,2))\nprint(median_numbers(3,2,1))<｜end▁of▁sentence｜>"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\tsum = 0\n\tfor num in nums:\n\t\tsum += sum_of_digits_helper(num)\n\treturn sum\n\ndef sum_of_digits_helper(num):\n\tsum = 0\n\twhile num > 0:\n\t\tsum += num % 10\n\t\tnum = num // 10\n\treturn sum\n\nprint(sum_of_digits([123, 456, 789]))<｜end▁of▁sentence｜>"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_x"}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\tunique_tuples = []\n\tfor tup in test_list:\n\t\tif tup not in unique_tuples:\n\t\t\tunique_tuples.append(tup)\n\tprint(unique_tuples)\n\tprint(len(unique_tuples))\n\n\ntest_list = [(1, 2), (1, 3), (1, 2), (2, 4), (1, 4), (1, 4), (1, 3), (1, 2), (1, 3), (1, 2)]\nextract_freq(test_list)<｜end▁of▁sentence｜>"}
{"ID": 764, "source": "MBPP:401", "prompt": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(tuple(map(sum, zip(test_tup1[i], test_tup2[i]))))\n\treturn result\n\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(add_nested_tuples(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\tfor i in range(r):\n\t\tres = (res * (n - i)) % p\n\treturn res\n\ndef ncr_modp_fast(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = (n * n) % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_2(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_3(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_4(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_5(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = re.compile(r'^(https?://)?(www\\.)?[a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$')\n\treturn True if regex.match(str) else False\n\nprint(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com/\"))\nprint(is_valid_URL(\"https://www.google.com/abc\"))\nprint(is_valid_URL(\"https://www.google.com/abc/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/stu\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\n\tif a < b:\n\t\treturn a\n\telse:\n\t\treturn b\n\nprint(minimum(10,20))<｜end▁of▁sentence｜>"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t\n\tif tuple1 in tuplex: \n\t\tprint(\"Yes\") \n\telse: \n\t\tprint(\"No\") \n\ntuplex = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\") \ntuple1 = (\"w\", \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\") \ncheck_tuplex(tuplex,tuple1)<｜end▁of▁sentence｜>"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\tcount = 0\n\twhile x: \n\t\tx &= x - 1\n\t\tcount += 1\n\treturn count\n\nprint(find_Parity(10))<｜end▁of▁sentence｜>"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\treturn n_list\n\n\ndef next_bigger(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\tn_list += 1\n\tn_list = rearrange_bigger(n_list)\n\treturn n_list\n\n\ndef next_bigger_2(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\tn_list += 1\n\tn_list = rearrange_bigger(n_list)\n\treturn n_list\n\n\ndef next_bigger_3(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tresult = []\n\tnums1.sort()\n\tnums2.sort()\n\ti, j = 0, 0\n\twhile i < len(nums1) and j < len(nums2) and len(result) < k:\n\t\tresult.append([nums1[i], nums2[j]])\n\t\tif i < len(nums1) - 1 and nums1[i] == nums1[i + 1]:\n\t\t\ti += 1\n\t\telif j < len(nums2) - 1 and nums2[j] == nums2[j + 1]:\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\t\t\tj += 1\n\treturn result\n\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))<｜end▁of▁sentence｜>"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = list1[0][0] * list1[0][1]\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tif list1[i][0] * list1[j][1] < min_product:\n\t\t\t\tmin_product = list1[i][0] * list1[j][1]\n\treturn min_product\n\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))<｜end▁of▁sentence｜>"}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\tminval = listval[0]\n\tfor i in listval:\n\t\tif i < minval:\n\t\t\tminval = i\n\treturn minval\n\nprint(min_val([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tword = word.replace('_', ' ')\n\tword = word.title()\n\tword = word.replace(' ', '')\n\treturn word\n\nprint(snake_to_camel('snake_case_string'))<｜end▁of▁sentence｜>"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\tl1 = []\n\tfor i in l:\n\t\tif i%2 == 0:\n\t\t\tl1.append(i)\n\treturn l1\n\nl = [1,2,3,4,5,6,7,8,9,10]\nprint(remove_odd(l))<｜end▁of▁sentence｜>"}
{"ID": 776, "source": "MBPP:413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\tlist2 = []\n\tfor i in list1:\n\t\tlist2.append(i[n])\n\treturn list2\n\nprint(extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 1))<｜end▁of▁sentence｜>"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\tlist3 = [value for value in list1 if value in list2]  \n\treturn list3  \nlist1 = [10, 20, 30, 40, 50]  \nlist2 = [5, 10, 15, 20, 25]  \nprint(overlapping(list1, list2))<｜end▁of▁sentence｜>"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t\n\tarr.sort() \n\t\n\tn = len(arr) \n\t\n\tmax_product = arr[n - 1] * arr[n - 2] * arr[n - 3] \n\t\n\tmin_product = arr[0] * arr[1] * arr[n - 1] \n\t\n\tif max_product < min_product: \n\t\tprint(max_product) \n\telse: \n\t\tprint(min_product) \n\t\narr = [1, 2, 3, 4, 5] \nmax_Product(arr)<｜end▁of▁sentence｜>"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30\n\tif n == 31: \n\t\treturn 31\n\tif n == 32: \n\t\treturn 32\n\tif n == 33: \n\t\treturn 33\n\tif n == 34: \n\t\treturn 34\n\tif n == 35: \n\t\treturn 35\n\tif n == 36: \n\t\treturn 36\n\tif n == 37: \n\t\treturn 37"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t\n\tOutput = [] \n\t\n\tfor i in range(len(Input)): \n\t\tOutput.append(Input[i][0]) \n\t\n\treturn Output \n\nInput = [(1, 2), (4, 1), (9, 1), (10, 11)] \nprint(group_tuples(Input))<｜end▁of▁sentence｜>"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\tmax_len = 0\n\tmax_sublist = []\n\tfor i in range(len(lst)): \n\t\tfor j in range(i + 1, len(lst) + 1): \n\t\t\tif len(lst[i:j]) > max_len: \n\t\t\t\tmax_len = len(lst[i:j]) \n\t\t\t\tmax_sublist = lst[i:j] \n\treturn max_sublist \n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(Find_Max(lst))<｜end▁of▁sentence｜>"}
{"ID": 782, "source": "MBPP:419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\tsum = 0\n\tfor i in list1:\n\t\tsum += round(i)\n\treturn sum * len(list1)\n\nprint(round_and_sum([1.1, 2.2, 3.3, 4.4, 5.5]))<｜end▁of▁sentence｜>"}
{"ID": 783, "source": "MBPP:420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\tsum = 0\n\tfor i in range(2, n+1, 2): \n\t\tsum += i * i * i \n\treturn sum\nn = 5\nprint(cube_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\tresult = \"\"\n\tfor i in test_tup:\n\t\tresult += str(i)\n\treturn result\n\nprint(concatenate_tuple((1, 2, 3, 4, 5)))<｜end▁of▁sentence｜>"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\tsum = 0  \n\tfor i in range(1, n+1):  \n\t\tsum += i*i*i  \n\treturn sum/n  \nn = int(input(\"Enter the value of n: \"))  \nprint(\"Average of cubes of first\",n,\"natural numbers is:\",find_Average_Of_Cube(n))<｜end▁of▁sentence｜>"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t\n\tdp = [[0 for i in range(n)] for j in range(m)] \n\t\n\tfor i in range(m): \n\t\tfor j in range(n): \n\t\t\tif i == 0 and j == 0: \n\t\t\t\tdp[i][j] = gold[i][j] \n\t\t\telif i == 0: \n\t\t\t\tdp[i][j] = dp[i][j - 1] + gold[i][j] \n\t\t\telif j == 0: \n\t\t\t\tdp[i][j] = dp[i - 1][j] + gold[i][j] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + gold[i][j] \n\t\n\treturn dp[m - 1][n - 1] \n\n\nif __name__ == '__main__': \n\t\n\tgold = [[1, 3, 1, 5], \n\t\t\t[2, 2, 4, 1], \n\t\t\t[5, 0, 2, 3], \n\t\t\t[0, 6, 1, 2]] \n\t\n\tprint(get_maxgold(gold, 4, 4))<｜end▁of▁sentence｜>"}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\tnew_tuple = ()\n\tfor i in test_tuple:\n\t\tnew_tuple += (i[-1],)\n\treturn new_tuple\n\nprint(extract_rear(('Pen', 'Blue', 'Red', 'Yellow')))<｜end▁of▁sentence｜>"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\tcount = 0\n\tfor i in range(len(list1)): \n\t\tif (list1[i] == x): \n\t\t\tcount += 1\n\treturn count \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 5\nprint(count_element_in_list(list1, x))<｜end▁of▁sentence｜>"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\todd_nums = list(filter(lambda x: x%2 != 0, nums))\n\treturn odd_nums\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums))<｜end▁of▁sentence｜>"}
{"ID": 790, "source": "MBPP:427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t\"\"\"\n\tThis function takes a date in yyyy-mm-dd format and returns it in dd-mm-yyyy format.\n\t\"\"\"\n\timport re\n\tdate_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\tmatch = date_pattern.search(dt)\n\tif match:\n\t\tyear = match.group(1)\n\t\tmonth = match.group(2)\n\t\tday = match.group(3)\n\t\tnew_date = f'{day}-{month}-{year}'\n\t\treturn new_date\n\telse:\n\t\treturn None\n\n# Test the function\ndate_string = '2023-02-15'\nnew_date = change_date_format(date_string)\nprint(new_date)<｜end▁of▁sentence｜>"}
{"ID": 791, "source": "MBPP:428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\tn = len(my_list)\n\tgap = n // 2\n\twhile gap > 0:\n\t\tfor i in range(gap, n):\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp:\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tmy_list[j] = temp\n\t\tgap //= 2\n\treturn my_list\n\n\nif __name__ == '__main__':\n\tmy_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]\n\tprint(shell_sort(my_list))<｜end▁of▁sentence｜>"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> and_tuples((1, 2, 3), (4, 5, 6))\n\t((1, 4), (2, 5), (3, 6))\n\t>>> and_tuples((1, 2, 3), (4, 5, 6, 7))\n\t((1, 4), (2, 5), (3, 6))\n\t>>> and_tuples((1, 2, 3), (4, 5))\n\t((1, 4), (2, 5))\n\t>>> and_tuples((1, 2, 3), (4, 5, 6, 7))\n\t((1, 4), (2, 5), (3, 6))\n\t\"\"\"\n\ttest_tup1 = list(test_tup1)\n\ttest_tup2 = list(test_tup2)\n\ttest_tup1_len = len(test_tup1)\n\ttest_tup2_len = len(test_tup2)\n\ttest_tup1_len_2 = test_tup1_len - 1\n\ttest_tup2_len_2 = test_tup2_len - 1\n\ttest_tup1_tuples = []\n\ttest_tup2_tuples = []\n\ttest_tup1_tuples_len = len(test_tup1_tuples)\n\ttest_tup2_tuples_len = len(test_tup2_tuples)\n\ttest_tup1_tuples_len_2 = test_tup1_tuples_len - 1\n\ttest_tup2_tuples_len_2 = test_tup2_tuples_len - 1\n\ttest_tup1_tuples_len_3 = test_tup1_tuples_len_2 - 1\n\ttest_tup2_tuples_len_3 = test_tup2_tuples_len_2 - 1\n\ttest_tup1_tuples_len"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\"\"\"\n\ta, b, c are the coefficients of the parabola.\n\t\"\"\"\n\tx = -b / (2 * a)\n\treturn x\n\nprint(parabola_directrix(1, 2, 1))<｜end▁of▁sentence｜>"}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\tlist1 = set(list1)\n\tlist2 = set(list2)\n\tif list1.intersection(list2):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6]))\nprint(common_element([1, 2, 3, 4], [5, 6, 7, 8]))<｜end▁of▁sentence｜>"}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t\"\"\"\n\t>>> median_trapezium(1,2,3)\n\t2.0\n\t>>> median_trapezium(1,2,4)\n\t2.5\n\t>>> median_trapezium(1,2,5)\n\t3.0\n\t\"\"\"\n\treturn (base1+base2)/2*height\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tcount = 0\n\tfor i in arr:\n\t\tif i > number:\n\t\t\tcount += 1\n\treturn count\n\narr = [1, 2, 3, 4, 5]\nnumber = 3\nprint(check_greater(arr, number))<｜end▁of▁sentence｜>"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t\"\"\"\n\t>>> text_match_one('abbbb')\n\tTrue\n\t>>> text_match_one('abbbbb')\n\tFalse\n\t>>> text_match_one('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') > 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero(text):\n\t\"\"\"\n\t>>> text_match_zero('abbbb')\n\tTrue\n\t>>> text_match_zero('abbbbb')\n\tTrue\n\t>>> text_match_zero('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_one_b(text):\n\t\"\"\"\n\t>>> text_match_one_b('abbbb')\n\tFalse\n\t>>> text_match_one_b('abbbbb')\n\tTrue\n\t>>> text_match_one_b('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 1\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b's.\n\"\"\"\ndef text_match_zero_b(text):\n\t\"\"\"\n\t>>> text_match_zero_b('abbbb')\n\tFalse\n\t>>> text_match_zero_b('abbbbb')\n\tTrue\n\t>>> text_match_zero_b('abbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') > 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one c's.\n\"\"\"\ndef text_match_one_c(text):\n\t\"\"\"\n\t>>> text_match_one_c('abbbb')\n\tFalse\n\t>>> text_match_one_c('abbbbb')\n\tFalse\n\t>>> text_match_one_c('abbb"}
{"ID": 798, "source": "MBPP:435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t\n\tlast_digit = n % 10\n\treturn last_digit\n\nprint(last_Digit(12345))<｜end▁of▁sentence｜>"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\tprint(\"Negative numbers in the list are:\")\n\tfor i in list1:\n\t\tif i < 0:\n\t\t\tprint(i)\n\nlist1 = [10, -7, 5, 64, -14]\nneg_nos(list1)<｜end▁of▁sentence｜>"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif i % 2 == 0:\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_odd(\"hello\"))\nprint(remove_odd(\"python\"))\nprint(remove_odd(\"programming\"))<｜end▁of▁sentence｜>"}
{"ID": 801, "source": "MBPP:438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_bidirectional([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\"\"\"\n\t>>> multiple_to_single([1, 2, 3, 4, 5])\n\t120\n\t>>> multiple_to_single([1, 2, 3, 4, 5, 6])\n\t1260\n\t>>> multiple_to_single([1, 2, 3, 4, 5, 6, 7])\n\t12660\n\t\"\"\"\n\tresult = 1\n\tfor i in L:\n\t\tresult *= i\n\treturn result\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\tadverbs = []\n\tadverb_positions = []\n\tadverb_index = 0\n\tadverb_found = False\n\t\n\tfor i in range(len(text)):\n\t\tif text[i] == \" \":\n\t\t\tadverb_found = False\n\t\telif text[i] == \",\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \".\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"?\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"!\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \";\" or text[i] == \":\" or text[i] == \",\" or text[i] == \".\" or text[i] == \"?\" or text[i] == \"!\" or text[i] == \";\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"(\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \")\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"[\" or text[i] == \"]\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"{\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"}\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"<\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \">\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t\"\"\"\n\tSurface area of a cube is 6 * l**2\n\t\"\"\"\n\treturn 6 * l**2\n\nprint(surfacearea_cube(5))<｜end▁of▁sentence｜>"}
{"ID": 805, "source": "MBPP:442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num > 0:\n\t\t\tcount += 1\n\treturn count\n\ndef ration(nums):\n\tcount = positive_count(nums)\n\tif count == 0:\n\t\treturn 0\n\treturn float(count) / len(nums)\n\nprint ration([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<｜end▁of▁sentence｜>"}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\tlargest = list1[0] \n\tfor x in list1: \n\t\tif x > largest: \n\t\t\tlargest = x \n\treturn largest \nlist1 = [10, 20, 4, 45, 99] \nprint(largest_neg(list1))<｜end▁of▁sentence｜>"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\tnew_list = []\n\tfor tup in test_list:\n\t\tnew_list.append(tup[0:K])\n\treturn new_list\n\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 2\nprint(trim_tuple(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 808, "source": "MBPP:445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i] * test_tup2[i])\n\treturn tuple(result)\n\nprint(index_multiplication((1, 2, 3), (4, 5, 6)))<｜end▁of▁sentence｜>"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\tcount = 0\n\tfor i in tup: \n\t\tif i in lst: \n\t\t\tcount += 1\n\treturn count \n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_Occurrence(tup, lst))<｜end▁of▁sentence｜>"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t\"\"\"\n\tThis function takes a list of numbers and returns a list of cubes of each number in the list.\n\t\"\"\"\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i\n\treturn sum\n\nprint(cal_sum(10))<｜end▁of▁sentence｜>"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\n\tx1 = int(x1)\n\ty1 = int(y1)\n\tx2 = int(x2)\n\ty2 = int(y2)\n\tx3 = int(x3)\n\ty3 = int(y3)\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\tlst = []\n\tfor i in range(l):\n\t\tlst.append(str[i])\n\treturn lst\n\nprint(extract_string(\"Hello\", 3))<｜end▁of▁sentence｜>"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\timport re\n\ttext2 = re.sub(r'\\s+', '', text1)\n\treturn text2\n\nprint(remove_whitespaces(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\tloss_amount=actual_cost-sale_amount\n\tif loss_amount<0:\n\t\treturn loss_amount\n\telse:\n\t\treturn None\n\nprint(loss_amount(100,50))\nprint(loss_amount(100,100))<｜end▁of▁sentence｜>"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n) : \n\t\tif (n % i == 0) : \n\t\t\tif (i % 2 == 0) : \n\t\t\t\tsum = sum + i \n\treturn sum\nn = 10\nprint(sumofFactors(n))<｜end▁of▁sentence｜>"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t\"\"\"\n\t>>> text_match_wordz('z')\n\tTrue\n\t>>> text_match_wordz('zz')\n\tTrue\n\t>>> text_match_wordz('zzz')\n\tTrue\n\t>>> text_match_wordz('zzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\tmonthnum = int(monthnum2)\n\tif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n\t\tprint(\"The month number\", monthnum2, \"contains 31 days.\")\n\telse:\n\t\tprint(\"The month number\", monthnum2, \"does not contain 31 days.\")\n\ncheck_monthnumb_number(input(\"Enter a month number: \"))<｜end▁of▁sentence｜>"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t\"\"\"\n\t>>> reverse_string_list(['hello', 'world', 'my', 'name', 'is', 'john'])\n\t['olleh', 'dlrow', 'ym', 'nema', 'si', 'hjon']\n\t\"\"\"\n\treturn [string[::-1] for string in stringlist]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\tmin_len = len(lst[0]) \n\tmin_sublist = lst[0] \n\tfor i in range(len(lst)): \n\t\tfor j in range(i + 1, len(lst) + 1): \n\t\t\tif len(lst[i:j]) < min_len: \n\t\t\t\tmin_len = len(lst[i:j]) \n\t\t\t\tmin_sublist = lst[i:j] \n\treturn min_sublist \n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(Find_Min(lst))<｜end▁of▁sentence｜>"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\tarea=l*b\n\treturn area\n\nl=int(input(\"Enter the length of rectangle: \"))\nb=int(input(\"Enter the breadth of rectangle: \"))\nprint(\"Area of rectangle is: \",rectangle_area(l,b))<｜end▁of▁sentence｜>"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\tstr1 = str1.lower()\n\tstr1 = re.sub(r'[A-Z]+', '', str1)\n\treturn str1\n\nprint(remove_uppercase(\"Hello World\"))\nprint(remove_uppercase(\"Hello World123\"))\nprint(remove_uppercase(\"Hello World123\"))<｜end▁of▁sentence｜>"}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\tres = [] \n\tfor i in lst: \n\t\tres.append(i[0]) \n\treturn res\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(Extract(lst))<｜end▁of▁sentence｜>"}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tctr += 1\n\treturn ctr\n\nprint(upper_ctr(\"The quick Brow Fox\"))<｜end▁of▁sentence｜>"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_ending_here = arr[0]\n\tmin_ending_here = arr[0]\n\n\tfor i in range(1, len(arr)):\n\t\tmax_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\t\tmin_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\t\tmax_product = max(max_product, max_ending_here)\n\t\tmin_product = min(min_product, min_ending_here)\n\treturn max_product\n\n\narr = [2, 3, -2, 4]\nprint(max_subarray_product(arr))<｜end▁of▁sentence｜>"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t\n\tvalue = dict[n]\n\t\n\tfor i in dict:\n\t\tif dict[i] != value:\n\t\t\treturn False\n\treturn True\n\ndict = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n\nprint(check_value(dict, 1))\nprint(check_value(dict, 2))\nprint(check_value(dict, 3))\nprint(check_value(dict, 4))\nprint(check_value(dict, 5))<｜end▁of▁sentence｜>"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\tdict2 = {}\n\tfor key, value in dict1.items():\n\t\tif value:\n\t\t\tdict2[key] = value\n\treturn dict2\n\nprint drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 0, 'e': 0})<｜end▁of▁sentence｜>"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t\n\t# Find index of middle element \n\tmid = (low + high)//2\n\t\n\t# Compare middle element with its \n\t# neighbours (if neighbours exist) \n\tif ((mid == 0 or arr[mid-1] <= arr[mid]) and \n\t\t(mid == n-1 or arr[mid+1] <= arr[mid])): \n\t\treturn mid \n\t\n\t# If middle element is not peak and its \n\t# left neighbour is greater than it, then \n\t# left half must have a peak element \n\telif (mid > 0 and arr[mid-1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid -1), n) \n\t\n\t# If middle element is not peak and its \n\t# right neighbour is greater than it, \n\t# then right half must have a peak element \n\telif (mid < n-1 and arr[mid+1] > arr[mid]): \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\t\n\t# If middle element is neither left nor right \n\t# neighbour is greater, then it is the peak element \n\telse: \n\t\treturn mid\n\t\ndef find_peak(arr, n): \n\t\n\treturn find_peak_util(arr, 0, n-1, n) \n\narr = [1, 3, 20, 4, 1, 0] \nn = len(arr) \nprint(\"Index of a peak point is\", find_peak(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\toctalNum = 0\n\ti = 1\n\twhile deciNum != 0:\n\t\trem = deciNum % 8\n\t\toctalNum = octalNum + rem * i\n\t\ti = i * 10\n\t\tdeciNum = deciNum // 8\n\treturn octalNum\n\ndeciNum = int(input(\"Enter a decimal number: \"))\nprint(\"Octal number is: \", decimal_to_Octal(deciNum))<｜end▁of▁sentence｜>"}
{"ID": 831, "source": "MBPP:468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t\n\tmax_product = 1\n\tmin_product = 1\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\t\n\tfor i in range(0, n): \n\t\tif (arr[i] > 0): \n\t\t\tmax_ending_here = max_ending_here * arr[i] \n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1) \n\t\telse: \n\t\t\ttemp = max_ending_here \n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1) \n\t\t\tmin_ending_here = temp * arr[i] \n\t\t\n\t\tif (max_product < max_ending_here): \n\t\t\tmax_product = max_ending_here \n\t\n\treturn max_product \n\narr = [1, 2, 3, 0, 7] \nn = len(arr) \nprint(max_product(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\tn = len(price)\n\tdp = [[0 for i in range(k+1)] for j in range(n)]\n\tfor i in range(1, n):\n\t\tmax_diff = -price[i]\n\t\tfor j in range(1, k+1):\n\t\t\tdp[i][j] = max(dp[i-1][j], price[i] + max_diff)\n\t\t\tmax_diff = max(max_diff, dp[i-1][j-1] - price[i])\n\treturn dp[n-1][k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 833, "source": "MBPP:470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t\"\"\"\n\t>>> add_pairwise((1, 2, 3, 4))\n\t10\n\t>>> add_pairwise((1, 2, 3, 4, 5))\n\t15\n\t>>> add_pairwise((1, 2, 3, 4, 5, 6))\n\t21\n\t>>> add_pairwise((1, 2, 3, 4, 5, 6, 7))\n\t28\n\t\"\"\"\n\treturn sum(test_tup[i] + test_tup[i+1] for i in range(0, len(test_tup)-1, 2))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\tproduct = 1\n\tfor i in range(lens): \n\t\tproduct = product * arr[i] \n\tproduct = product % n \n\tfor i in range(lens): \n\t\tarr[i] = product // arr[i] \n\treturn arr\n\narr = [1, 2, 3, 4, 5] \nn = 5\nlens = len(arr) \nprint(find_remainder(arr, lens, n))<｜end▁of▁sentence｜>"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\tl.sort() \n\tn = len(l) \n\tfor i in range(0, n-1): \n\t\tif (l[i] + 1) != l[i+1]: \n\t\t\treturn False\n\treturn True\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(check_Consecutive(l))<｜end▁of▁sentence｜>"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\tresult = []\n\tfor i in test_list1:\n\t\tfor j in test_list2:\n\t\t\tif i == j:\n\t\t\t\tresult.append(i)\n\treturn result\n\ntest_list1 = [(2, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, "}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\tstr1 = str1.replace(ch,newch)\n\tprint(str1)\n\nstr1 = input(\"Enter a string: \")\nch = input(\"Enter a character to replace: \")\nnewch = input(\"Enter the new character: \")\nreplace_char(str1,ch,newch)<｜end▁of▁sentence｜>"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\tdict2 = {}\n\tfor key, value in dict1.items():\n\t\tdict2[value] = key\n\tdict2 = sorted(dict2.items(), reverse=True)\n\tdict3 = {}\n\tfor key, value in dict2:\n\t\tdict3[key] = value\n\treturn dict3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\tnums.sort()\n\treturn nums[0] + nums[-1]\n\nprint(big_sum([1, 2, 3, 4, 5]))\nprint(big_sum([1, 2, 3, 4, 5, 6]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(big_sum([1, 2, 3,"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t\"\"\"\n\t>>> is_lower(\"Hello\")\n\tTrue\n\t>>> is_lower(\"HELLO\")\n\tFalse\n\t>>> is_lower(\"hello\")\n\tFalse\n\t\"\"\"\n\treturn string.lower() == string\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif str1[i].isupper():\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_lowercase(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\twhile n >= 10 :  \n\t\tn = n // 10\n\treturn n\n\nprint(first_Digit(12345))<｜end▁of▁sentence｜>"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\tmax_count = 0\n\tindex = -1\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\tfor i in count:\n\t\tif count[i] > max_count:\n\t\t\tmax_count = count[i]\n\t\t\tindex = i\n\treturn index\n\nstr1 = \"test string\"\nprint(get_max_occuring_char(str1))<｜end▁of▁sentence｜>"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t\n\tif sum == 0:\n\t\treturn True\n\tif n == 0 and sum != 0:\n\t\treturn False\n\t\n\tif set[n-1] > sum:\n\t\treturn is_subset_sum(set, n-1, sum)\n\t\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\n\nif is_subset_sum(set, n, sum) == True:\n\tprint(\"Found a subset with given sum\")\nelse:\n\tprint(\"No subset with given sum\")<｜end▁of▁sentence｜>"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\tpattern = r\"[A-Z][a-z]+\"\n\tmatches = re.findall(pattern, text)\n\treturn matches\n\nprint(match(\"The quick brown fox JUMPED over the lazy dog.\"))<｜end▁of▁sentence｜>"}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\ti = 1\n\twhile True: \n\t\tif (i * factorial(i)) % x == 0: \n\t\t\treturn i \n\t\ti += 1\n\n# Driver code \nx = 10\nprint(first_Factorial_Divisible_Number(x))<｜end▁of▁sentence｜>"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t\"\"\"\n\tThis function takes two lists as input and removes the matching tuples from the first list.\n\t\"\"\"\n\tnew_list = []\n\tfor i in test_list1:\n\t\tif i not in test_list2:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nprint(remove_matching_tuple(test_list1, test_list2))<｜end▁of▁sentence｜>"}
{"ID": 848, "source": "MBPP:485", "prompt": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t\n\tmax_palindrome = 0\n\t\n\tfor i in range(n) : \n\t\tfor j in range(n) : \n\t\t\tnum = A[i] * A[j]\n\t\t\tif (is_palindrome(num) and num > max_palindrome) : \n\t\t\t\tmax_palindrome = num\n\t\n\treturn max_palindrome\n\ndef is_palindrome(num) : \n\t\n\tnum_str = str(num)\n\t\n\ti = 0\n\tj = len(num_str) - 1\n\t\n\twhile (i < j) : \n\t\tif (num_str[i] != num_str[j]) : \n\t\t\treturn False\n\t\ti += 1\n\t\tj -= 1\n\t\n\treturn True\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(A)\n\nprint(largest_palindrome(A, n))<｜end▁of▁sentence｜>"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\tbinomial_probability = 0\n\tbinomial_probability = (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n\treturn binomial_probability\n\ndef factorial(n):\n\tfactorial = 1\n\tfor i in range(1, n + 1):\n\t\tfactorial = factorial * i\n\treturn factorial\n\nprint(binomial_probability(10, 5, 0.5))<｜end▁of▁sentence｜>"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n\tdef last_element(tup): \n\t\treturn tup[-1] \n\t\n\t\n\ttup.sort(key = last_element) \n\treturn tup\n\n\nprint(sort_tuple([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))<｜end▁of▁sentence｜>"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t\"\"\"\n\t>>> area_pentagon(5)\n\t225.0\n\t>>> area_pentagon(10)\n\t4166.6666666666666\n\t\"\"\"\n\treturn (5 * a**2) / (4 * math.tan(math.pi / 5))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\tmax = arr[0] \n\tfor i in range(1, n): \n\t\tif arr[i] > max: \n\t\t\tmax = arr[i] \n\treturn max \n\narr = [12, 10, 9, 45, 2, 10, 10, 45] \nn = len(arr) \nprint(frequency_Of_Largest(n, arr))<｜end▁of▁sentence｜>"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\tresult = []\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j][::-1]:\n\t\t\t\tresult.append((test_list[i], test_list[j]))\n\treturn result\n\nprint(extract_symmetric([(1, 2), (3, 4), (5, 5), (4, 3), (2, 1)]))<｜end▁of▁sentence｜>"}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\tsum=0\n\tfor i in range(n):\n\t\tsum=sum+a*(r**i)\n\treturn sum\n\na=int(input(\"Enter the first term of GP series: \"))\nn=int(input(\"Enter the number of terms: \"))\nr=int(input(\"Enter the common ratio: \"))\nprint(\"Sum of GP series is: \",sum_gp(a,n,r))<｜end▁of▁sentence｜>"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\tlow = 0\n\thigh = len(item_list)-1\n\tfound = False\n\twhile low<=high and not found:\n\t\tmid = (low+high)//2\n\t\tif item_list[mid] == item:\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\thigh = mid-1\n\t\t\telse:\n\t\t\t\tlow = mid+1\n\treturn found\n\nitem_list = [1,2,3,4,5,6,7,8,9,10]\nprint(binary_search(item_list,10))\nprint(binary_search(item_list,11))<｜end▁of▁sentence｜>"}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\tpolygons = []\n\tx = startx\n\ty = starty\n\twhile x < endx:\n\t\tpolygons.append([(x,y), (x+radius,y), (x+radius,y+radius), (x,y+radius), (x,y+radius), (x+radius,y)])\n\t\tx += radius\n\t\ty += radius\n\treturn polygons\n\ndef calculate_hexagon_grid(startx, starty, endx, endy, radius):\n\tpolygons = calculate_polygons(startx, starty, endx, endy, radius)\n\tgrid = []\n\tfor polygon in polygons:\n\t\tgrid.append(polygon)\n\treturn grid\n\nprint(calculate_hexagon_grid(0,0,100,100,10))<｜end▁of▁sentence｜>"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t\"\"\"\n\t>>> binary_to_integer((1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\tstr1 = str1.replace('a', '')\n\tstr1 = str1.replace('b', '')\n\tstr1 = str1.replace('c', '')\n\tstr1 = str1.replace('d', '')\n\tstr1 = str1.replace('e', '')\n\tstr1 = str1.replace('f', '')\n\tstr1 = str1.replace('g', '')\n\tstr1 = str1.replace('h', '')\n\tstr1 = str1.replace('i', '')\n\tstr1 = str1.replace('j', '')\n\tstr1 = str1.replace('k', '')\n\tstr1 = str1.replace('l', '')\n\tstr1 = str1.replace('m', '')\n\tstr1 = str1.replace('n', '')\n\tstr1 = str1.replace('o', '')\n\tstr1 = str1.replace('p', '')\n\tstr1 = str1.replace('q', '')\n\tstr1 = str1.replace('r', '')\n\tstr1 = str1.replace('s', '')\n\tstr1 = str1.replace('t', '')\n\tstr1 = str1.replace('u', '')\n\tstr1 = str1.replace('v', '')\n\tstr1 = str1.replace('w', '')\n\tstr1 = str1.replace('x', '')\n\tstr1 = str1.replace('y', '')\n\tstr1 = str1.replace('z', '')\n\treturn str1\n\nprint(remove_lowercase('abcd'))<｜end▁of▁sentence｜>"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\tfrom heapq import heappush, heappop\n\theap = []\n\tfor i in nums:\n\t\theappush(heap,i)\n\tres = []\n\tfor i in range(n):\n\t\tres.append(heappop(heap))\n\treturn res\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\"\"\"\n\tr: radius of the cone\n\th: height of the cone\n\t\"\"\"\n\timport math\n\tsa = 2*math.pi*r*(r+math.sqrt(r**2+h**2))\n\treturn sa\n\nprint surfacearea_cone(2,3)<｜end▁of▁sentence｜>"}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\twhile(y):\n\t\tx, y = y, x % y\n\treturn x\n\nprint(gcd(10, 15))<｜end▁of▁sentence｜>"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\td = 2 * r\n\treturn d\n\nprint(diameter_circle(10))<｜end▁of▁sentence｜>"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\tresult = \"\"\n\tfor i in list:\n\t\tresult += str(i)\n\treturn result\n\nprint(concatenate_elements([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t\"\"\"\n\tFinds common divisor between two numbers in a given pair.\n\t\"\"\"\n\tdivisor = 1\n\tfor i in range(1,x+1):\n\t\tif x%i == 0 and y%i == 0:\n\t\t\tdivisor = i\n\treturn divisor\n\nprint(num_comm_div(10,20))<｜end▁of▁sentence｜>"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\tprint(n%m)\n\nfind(10,5)<｜end▁of▁sentence｜>"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t\"\"\"\n\tAdd consecutive numbers of a given list.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(len(nums)):\n\t\tsum += nums[i]\n\treturn sum\n\nprint(add_consecutive_nums([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i*i*i\n\treturn sum\nn = 5\nprint(sum_Of_Series(n))<｜end▁of▁sentence｜>"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\"\"\"\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0])\n\t[1,"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\tfactorial_n = 1\n\tfactorial_k = 1\n\tfactorial_n_k = 1\n\tfor i in range(1, n+1):\n\t\tfactorial_n *= i\n\tfor i in range(1, k+1):\n\t\tfactorial_k *= i\n\tfor i in range(1, n-k+1):\n\t\tfactorial_n_k *= i\n\treturn factorial_n/(factorial_k*factorial_n_k)\n\nprint(permutation_coefficient(5, 2))<｜end▁of▁sentence｜>"}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i not in removewords:\n\t\t\tlist2.append(i)\n\treturn list2\n\nlist1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nremovewords = ['a', 'e', 'i', 'o', 'u']\nprint(remove_words(list1, removewords))<｜end▁of▁sentence｜>"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\ti = 0\n\tj = 0\n\twhile i < len(l1) and j < len(l2):\n\t\tif l1[i] == l2[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\treturn False\n\treturn True\n\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, "}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\tsum = 0\n\tfor i in range(1, n, 2) : \n\t\tsum += i \n\treturn sum / n \nn = 10\nprint(average_Odd(n))<｜end▁of▁sentence｜>"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\tn = len(arr) \n\tdp = [0] * (n + 1) \n\tdp[0] = 1\n\tans = 0\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (arr[i] * arr[j] < k): \n\t\t\t\tdp[j + 1] += dp[i] \n\t\tans += dp[j + 1] \n\treturn ans \n\narr = [1, 2, 3, 4, 5] \nk = 10\nprint(no_of_subsequences(arr, k))<｜end▁of▁sentence｜>"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\tsum = 0\n\twhile num > 0: \n\t\tsum = sum + num \n\t\tnum = num - 1\n\treturn sum\n\nnum = 10\nprint(\"Minimum sum of factors of\", num, \"is\", find_Min_Sum(num))<｜end▁of▁sentence｜>"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\tcount_dict = {}\n\tfor i in test_tuple:\n\t\tif i in count_dict:\n\t\t\tcount_dict[i] += 1\n\t\telse:\n\t\t\tcount_dict[i] = 1\n\treturn count_dict\n\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, "}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\tnew_list = []\n\tfor i in test_tup:\n\t\tnew_list.append(i)\n\t\tnew_list.append(K)\n\treturn new_list\n\nprint(add_str((1, 2, 3, 4), \"K\"))<｜end▁of▁sentence｜>"}
{"ID": 877, "source": "MBPP:514", "prompt": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\tsum = 0\n\tfor tup in test_tup:\n\t\tsum += sum(tup)\n\treturn sum\n\nprint(sum_elements(((1, 2, 3), (4, 5, 6), (7, 8, 9))))<｜end▁of▁sentence｜>"}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\n\tsum_arr = [0] * (n + 1) \n\tsum_arr[0] = 1\n\t\n\tfor i in range(1, n + 1): \n\t\tsum_arr[i] = sum_arr[i - 1] \n\t\tif i - arr[i - 1] >= 0: \n\t\t\tsum_arr[i] = (sum_arr[i] + sum_arr[i - arr[i - 1]]) % m \n\t\n\treturn sum_arr[n] \n\n\ndef main():\n\tarr = [1, 2, 3, 4, 5, 6]\n\tn = len(arr)\n\tm = 5\n\tprint(modular_sum(arr, n, m))\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\tmax_num = max(nums)\n\texp = 1\n\twhile max_num/exp > 0:\n\t\tcount = [0] * 10\n\t\tfor num in nums:\n\t\t\tcount[(num//exp)%10] += 1\n\t\tfor i in range(1, 10):\n\t\t\tcount[i] += count[i-1]\n\t\ttemp = [0] * len(nums)\n\t\tfor num in nums:\n\t\t\ttemp[count[(num//exp)%10]-1] = num\n\t\t\tcount[(num//exp)%10] -= 1\n\t\tnums = temp\n\t\texp *= 10\n\treturn nums\n\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))<｜end▁of▁sentence｜>"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\tlargest = list1[0] \n\tfor x in list1: \n\t\tif x > largest: \n\t\t\tlargest = x \n\treturn largest \nlist1 = [12, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(largest_pos(list1))<｜end▁of▁sentence｜>"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t\"\"\"\n\tFinds the square root of a perfect number.\n\t\"\"\"\n\ti = 1\n\twhile i * i < num:\n\t\ti += 1\n\treturn i\n\ndef perfect_number(num):\n\t\"\"\"\n\tChecks if a number is a perfect number.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, num):\n\t\tif num % i == 0:\n\t\t\tsum += i\n\tif sum == num:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tnum = int(input(\"Enter a number: \"))\n\tif perfect_number(num):\n\t\tprint(\"The square root of\", num, \"is\", sqrt_root(num))\n\telse:\n\t\tprint(num, \"is not a perfect number.\")\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t\"\"\"\n\tCalculate volume of a tetrahedron\n\t\"\"\"\n\treturn (1/3)*(num**3)\n\nprint(volume_tetrahedron(3))<｜end▁of▁sentence｜>"}
{"ID": 883, "source": "MBPP:520", "prompt": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\tlcm = 1\n\tfor i in l:\n\t\tlcm = lcm * i // gcd(lcm, i)\n\treturn lcm\n\ndef gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\treturn gcd(b % a, a)\n\nprint(get_lcm([2, 4, 6, 8]))<｜end▁of▁sentence｜>"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\"\"\"\n\tThis function checks if the triangle is isosceles or not.\n\t\"\"\"\n\tif x==y or x==z or y==z:\n\t\tprint(\"The triangle is isosceles\")\n\telse:\n\t\tprint(\"The triangle is not isosceles\")\n\ncheck_isosceles(3,4,5)<｜end▁of▁sentence｜>"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\tn = len(arr) \n\tlis = [1] * n \n\tlds = [1] * n \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] > arr[j] and lis[i] < lis[j] + 1: \n\t\t\t\tlis[i] = lis[j] + 1\n\tfor i in range(n-2,-1,-1): \n\t\tfor j in range(n-1,i,-1): \n\t\t\tif arr[i] > arr[j] and lds[i] < lds[j] + 1: \n\t\t\t\tlds[i] = lds[j] + 1\n\tmax_len = 0\n\tmax_index = 0\n\tfor i in range(n): \n\t\tif max_len < lis[i] + lds[i]: \n\t\t\tmax_len = lis[i] + lds[i] \n\t\t\tmax_index = i \n\treturn max_len \n\narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(lbs(arr))<｜end▁of▁sentence｜>"}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\tcheck_upper = lambda x: any(i.isupper() for i in x)\n\tcheck_lower = lambda x: any(i.islower() for i in x)\n\tcheck_number = lambda x: any(i.isdigit() for i in x)\n\tcheck_length = lambda x: len(x) == 5\n\treturn check_upper(str1) and check_lower(str1) and check_number(str1) and check_length(str1)\n\nprint(check_string(\"Aa12345\"))\nprint(check_string(\"Aa123456\"))\nprint(check_string(\"Aa1234567\"))\nprint(check_string(\"Aa12345678\"))\nprint(check_string(\"Aa123456789\"))\nprint(check_string(\"Aa1234567890\"))\nprint(check_string(\"Aa12345678901\"))\nprint(check_string(\"Aa123456789012\"))\nprint(check_string(\"Aa1234567890123\"))\nprint(check_string(\"Aa12345678901234\"))\nprint(check_string(\"Aa123456789012345\"))\nprint(check_string(\"Aa1234567890123456\"))\nprint(check_string(\"Aa12345678901234567\"))\nprint(check_string(\"Aa123456789012345678\"))\nprint(check_string(\"Aa1234567890123456789\"))\nprint(check_string(\"Aa12345678901234567890\"))\nprint(check_string(\"Aa123456789012345678901\"))\nprint(check_string"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t\n\tsum_arr = [0] * n\n\tsum_arr[0] = arr[0]\n\t\n\tfor i in range(1, n): \n\t\tsum_arr[i] = arr[i] \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and sum_arr[i] < sum_arr[j] + arr[i]: \n\t\t\t\tsum_arr[i] = sum_arr[j] + arr[i] \n\t\n\tmax_sum = sum_arr[0] \n\tfor i in range(1, n): \n\t\tif max_sum < sum_arr[i]: \n\t\t\tmax_sum = sum_arr[i] \n\t\n\treturn max_sum \n\n\narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\tCheck whether two given lines are parallel or not.\n\t\"\"\"\n\tx1, y1 = line1\n\tx2, y2 = line2\n\tif x1 == x2:\n\t\treturn False\n\telse:\n\t\treturn True\n\n\nif __name__ == '__main__':\n\tline1 = (1, 2)\n\tline2 = (3, 4)\n\tprint(parallel_lines(line1, line2))<｜end▁of▁sentence｜>"}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\tstr1 = str1.split()\n\tstr1 = [i[0].upper() + i[1:-1] + i[-1].upper() for i in str1]\n\treturn ' '.join(str1)\n\nprint(capitalize_first_last_letters(\"hello world\"))<｜end▁of▁sentence｜>"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\tcount = 0\n\ti = 0\n\tj = n - 1\n\tarr.sort()\n\twhile (i < j):\n\t\tif (arr[i] + arr[j] < sum):\n\t\t\ti += 1\n\t\telif (arr[i] + arr[j] > sum):\n\t\t\tj -= 1\n\t\telse:\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\t\tj -= 1\n\treturn count\n\narr = [1, 5, 7, -1, 5]\nn = len(arr)\nsum = 6\nprint(\"Count of pairs is\", get_pairs_count(arr, n, sum))<｜end▁of▁sentence｜>"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\tmin_length = len(list1[0])\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_length:\n\t\t\tmin_length = len(list1[i])\n\treturn min_length\n\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))<｜end▁of▁sentence｜>"}
{"ID": 892, "source": "MBPP:529", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\"\"\"\n\tReturns the nth jacobsthal-lucas number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)\n\ndef main():\n\tprint jacobsthal_lucas(10)\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num < 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(negative_count([1, 2, 3, -4, -5, -6]))<｜end▁of▁sentence｜>"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\ttable = [0 for i in range(V+1)] \n\ttable[0] = 0\n\tfor i in range(1, V+1): \n\t\ttable[i] = m \n\t\tfor j in range(0, m): \n\t\t\tif (coins[j] <= i): \n\t\t\t\tsub_res = table[i-coins[j]] \n\t\t\t\tif (sub_res != m and sub_res + 1 < table[i]): \n\t\t\t\t\ttable[i] = sub_res + 1\n\treturn table[V] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\"\"\"\n\tCheck if two strings are permutations of each other.\n\t\"\"\"\n\tif len(str1) != len(str2):\n\t\treturn False\n\n\tstr1_dict = {}\n\tstr2_dict = {}\n\n\tfor char in str1:\n\t\tif char in str1_dict:\n\t\t\tstr1_dict[char] += 1\n\t\telse:\n\t\t\tstr1_dict[char] = 1\n\n\tfor char in str2:\n\t\tif char in str2_dict:\n\t\t\tstr2_dict[char] += 1\n\t\telse:\n\t\t\tstr2_dict[char] = 1\n\n\tfor key in str1_dict:\n\t\tif key not in str2_dict:\n\t\t\treturn False\n\t\telif str1_dict[key] != str2_dict[key]:\n\t\t\treturn False\n\n\treturn True\n\nprint(check_permutation('abc', 'bca'))\nprint(check_permutation('abc', 'bcaa'))\nprint(check_permutation('abc', 'bca'))<｜end▁of▁sentence｜>"}
{"ID": 896, "source": "MBPP:533", "prompt": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\tnew_tuple = ()\n\tfor i in test_tuple:\n\t\tif type(i) != data_type:\n\t\t\tnew_tuple += (i,)\n\treturn new_tuple\n\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), int))<｜end▁of▁sentence｜>"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_2(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_3(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_4(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_5(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_6(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_7(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_8(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t\"\"\"\n\tCalculates the top or bottom surface area of a cylinder.\n\t\"\"\"\n\timport math\n\ttop_surface_area = 2 * math.pi * r * (r + (2 * r))\n\tbottom_surface_area = 2 * math.pi * r * r\n\treturn top_surface_area, bottom_surface_area\n\nprint(topbottom_surfacearea(10))<｜end▁of▁sentence｜>"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t\"\"\"\n\t>>> nth_items([1,2,3,4,5],2)\n\t[2, 3]\n\t>>> nth_items([1,2,3,4,5],4)\n\t[4, 5]\n\t>>> nth_items([1,2,3,4,5],1)\n\t[1]\n\t>>> nth_items([1,2,3,4,5],5)\n\t[5]\n\t>>> nth_items([1,2,3,4,5],0)\n\t[]\n\t\"\"\"\n\treturn list[n:]\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\tstr1 = str1.lower()\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\tstr1 = tuple(str1)\n\treturn str1\n\nprint(string_list_to_tuple(['Python', 'Exercises', 'Solutions']))<｜end▁of▁sentence｜>"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\tlist_bases_num = list(bases_num)\n\tlist_index = list(index)\n\tlist_bases_num_power_index = list(map(lambda x,y:x**y,list_bases_num,list_index))\n\treturn list_bases_num_power_index\n\nprint(basesnum_coresspondingnum([2,3,4],[1,2,3]))<｜end▁of▁sentence｜>"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t\n\tmax_count = 0\n\tmin_count = 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\tsum = 0\n\tfor i in range(1, n): \n\t\tif n % i == 0: \n\t\t\tsum += i \n\tif sum > n: \n\t\treturn True\n\treturn False\n\nn = int(input(\"Enter a number: \"))\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\")<｜end▁of▁sentence｜>"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\ttext = text.replace(' ', ':')\n\ttext = text.replace(',', ':')\n\ttext = text.replace('.', ':')\n\treturn text\n\nprint(fill_spaces('Hello, my name is John. I am 25 years old.'))<｜end▁of▁sentence｜>"}
{"ID": 906, "source": "MBPP:543", "prompt": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\tsum = num1 + num2\n\tcount = 0\n\twhile sum != 0:\n\t\tsum = sum // 10\n\t\tcount += 1\n\treturn count\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nprint(\"Number of digits in sum: \",count_digits(num1,num2))<｜end▁of▁sentence｜>"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\tflat_list = []\n\tfor element in test_list:\n\t\tif type(element) == tuple:\n\t\t\tfor sub_element in element:\n\t\t\t\tflat_list.append(sub_element)\n\t\telse:\n\t\t\tflat_list.append(element)\n\treturn tuple(flat_list)\n\n\nprint(flatten_tuple((1, 2, 3, 4, (5, 6, 7), 8, 9, 10)))<｜end▁of▁sentence｜>"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\n\tmask = 0xAAAAAAAA\n\t\n\tn = n ^ mask\n\t\n\treturn n\n\nprint(toggle_F_and_L_bits(0x12345678))<｜end▁of▁sentence｜>"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\tlast_index=-1\n\tfor i in range(len(string)):\n\t\tif string[i]==char:\n\t\t\tlast_index=i\n\treturn last_index\n\nprint(last_occurence_char(\"hello\",\"l\"))<｜end▁of▁sentence｜>"}
{"ID": 910, "source": "MBPP:547", "prompt": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += hamming_distance(i)\n\treturn sum\n\ndef hamming_distance(n):\n\tcount = 0\n\twhile n > 0:\n\t\tn = n & (n-1)\n\t\tcount += 1\n\treturn count\n\nprint(Total_Hamming_Distance(10))<｜end▁of▁sentence｜>"}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\tn = len(arr) \n\tlis = [1]*n \n\tfor i in range(1,n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] > arr[j] and lis[i] < lis[j] + 1: \n\t\t\t\tlis[i] = lis[j] + 1\n\treturn max(lis) \n\narr = [10, 22, 9, 33, 21, 50, 41, 60] \nprint(longest_increasing_subsequence(arr))<｜end▁of▁sentence｜>"}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum = sum + (i**5) \n\treturn sum\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of first\", n, \"odd natural numbers is :\", odd_Num_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t\n\tif low == high: \n\t\treturn arr[low] \n\tif high == low + 1: \n\t\treturn max(arr[low], arr[high]) \n\tmid = (low + high) // 2\n\tif arr[mid] > arr[mid + 1] and arr[mid] > arr[mid - 1]: \n\t\treturn arr[mid] \n\tif arr[mid] < arr[mid + 1]: \n\t\treturn find_Max(arr, mid + 1, high) \n\treturn find_Max(arr, low, mid - 1) \n\narr = [1, 3, 50, 10, 9, 7] \nn = len(arr) \nprint(\"The maximum element is\", find_Max(arr, 0, n - 1))<｜end▁of▁sentence｜>"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\tlist2 = []\n\tfor i in list1:\n\t\tlist2.append(i[n])\n\treturn list2\n\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))<｜end▁of▁sentence｜>"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t\"\"\"\n\tThis function checks whether a given sequence is linear or not.\n\t\"\"\"\n\tseq_len = len(seq_nums)\n\tdiff = seq_nums[1] - seq_nums[0]\n\tfor i in range(1, seq_len):\n\t\tif seq_nums[i] - seq_nums[i-1] != diff:\n\t\t\treturn False\n\treturn True\n\nseq_nums = [1, 2, 3, 4, 5]\nprint(Seq_Linear(seq_nums))\n\nseq_nums = [1, 2, 3, 4, 5, 6]\nprint(Seq_Linear(seq_nums))\n\nseq_nums = [1, 2, 3, 4, 5, 6, 7]\nprint(Seq_Linear(seq_nums))<｜end▁of▁sentence｜>"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t\"\"\"\n\t>>> tuple_to_float((1, 2, 3, 4))\n\t12.34\n\t>>> tuple_to_float((1, 2, 3, 4, 5))\n\t12.345\n\t>>> tuple_to_float((1, 2, 3, 4, 5, 6))\n\t12.3456\n\t\"\"\"\n\tnum = 0\n\tfor i in test_tup:\n\t\tnum = num * 10 + i\n\treturn num / 10**len(test_tup)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\tsum1 = 0\n\tsum2 = 0\n\tfor i in range(1, n+1):  \n\t\tsum1 = sum1 + i*i*i  \n\t\tsum2 = sum2 + i  \n\tprint(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is:\", sum1 - sum2)  \nn = int(input(\"Enter the value of n: \"))  \ndifference(n)<｜end▁of▁sentence｜>"}
{"ID": 919, "source": "MBPP:556", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\tcount = 0\n\tfor i in range(0,N) : \n\t\tfor j in range(i+1,N) : \n\t\t\tif (A[i] ^ A[j]) % 2 != 0 : \n\t\t\t\tcount += 1\n\treturn count\n\nA = [1, 2, 3, 4, 5]\nN = len(A)\nprint(find_Odd_Pair(A,N))<｜end▁of▁sentence｜>"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\tnew_string = \"\"\n\tfor char in string:\n\t\tif char.isupper():\n\t\t\tnew_string += char.lower()\n\t\telse:\n\t\t\tnew_string += char.upper()\n\treturn new_string\n\nprint(toggle_string(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\"\"\"\n\t>>> digit_distance_nums(123, 1234)\n\t0\n\t>>> digit_distance_nums(123, 12345)\n\t1\n\t>>> digit_distance_nums(123, 123456)\n\t2\n\t>>> digit_distance_nums(123, 1234567)\n\t3\n\t>>> digit_distance_nums(123, 12345678)\n\t4\n\t>>> digit_distance_nums(123, 123456789)\n\t5\n\t>>> digit_distance_nums(123, 1234567890)\n\t6\n\t>>> digit_distance_nums(123, 12345678901)\n\t7\n\t>>> digit_distance_nums(123, 123456789012)\n\t8\n\t>>> digit_distance_nums(123, 1234567890123)\n\t9\n\t>>> digit_distance_nums(123, 12345678901234)\n\t10\n\t\"\"\"\n\tn1_str = str(n1)\n\tn2_str = str(n2)\n\tn1_len = len(n1_str)\n\tn2_len = len(n2_str)\n\tn1_len_diff = n1_len - n2_len\n\tn2_len_diff = n2_len - n1_len\n\tn1_len_diff = abs(n1_len_diff)\n\tn2_len_diff = abs(n2_len_diff)\n\tif n1_len_diff > n2_len_diff:\n\t\treturn n2_len_diff\n\telif n1_len_diff < n2_len_diff:\n\t\treturn n1_len_diff\n\telse:\n\t\tn1_str_list = list(n1_str)\n\t\t"}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\tmax_so_far = a[0]\n\tmax_ending_here = a[0]\n\tfor i in range(1, size):\n\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\treturn max_so_far\n\na = [1, 2, 3, -2, 5]\nprint(max_sub_array_sum(a, len(a)))<｜end▁of▁sentence｜>"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\tunion_tup = set(test_tup1) | set(test_tup2)\n\treturn union_tup\n\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6,"}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\tnew_list = []\n\tfor i in range(0, len(test_list), 2):\n\t\tnew_list.append(test_list[i:i+2])\n\treturn new_list\n\nprint(assign_elements([1, 2, 3, 4, 5, 6, 7, 8]))<｜end▁of▁sentence｜>"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_len = 0\n\tcurr_len = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] == 1:\n\t\t\tcurr_len += 1\n\t\telse:\n\t\t\tcurr_len = 0\n\t\tif curr_len > max_len:\n\t\t\tmax_len = curr_len\n\treturn max_len\n\nlst = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t\"\"\"\n\t>>> extract_values('''\"Hello\" \"World\"''')\n\t['Hello', 'World']\n\t>>> extract_values('''\"Hello\" \"World\"''')\n\t['Hello', 'World']\n\t>>> extract_values('''\"Hello\" \"World\"''')\n\t['Hello', 'World']\n\t\"\"\"\n\ttext = text.replace('\"', '')\n\ttext = text.split()\n\treturn text\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 927, "source": "MBPP:564", "prompt": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\n\tcount = 0\n\t\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] != arr[j]): \n\t\t\t\tcount += 1\n\t\n\treturn count \n\narr = [1, 2, 3, 4, 3, 2, 1] \nn = len(arr) \nprint(count_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\tlist = []\n\tfor i in word:\n\t\tlist.append(i)\n\treturn list\n\nprint(split(\"hello\"))<｜end▁of▁sentence｜>"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t\"\"\"\n\t>>> sum_digits(123)\n\t6\n\t>>> sum_digits(49)\n\t13\n\t>>> sum_digits(123456789)\n\t45\n\t\"\"\"\n\treturn sum(int(d) for d in str(n))\n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\tlist1.sort()\n\tif list1 == list1:\n\t\tprint(\"List is sorted\")\n\telse:\n\t\tprint(\"List is not sorted\")\n\nlist1 = [1,2,3,4,5]\nissort_list(list1)<｜end▁of▁sentence｜>"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\tlist = []\n\tfor i in range(length):\n\t\tlist.append({})\n\treturn list\n\nprint(empty_list(5))<｜end▁of▁sentence｜>"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\ti.sort()\n\t\tlist2.append(i)\n\treturn list2\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))<｜end▁of▁sentence｜>"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\tlist2 = []\n\tfor i in list1:\n\t\tfor j in charlist:\n\t\t\tif j in i:\n\t\t\t\tlist2.append(i)\n\t\t\t\tbreak\n\treturn list2\n\nlist1 = ['hello', 'world', 'my', 'name', 'is', 'john']\ncharlist = ['o', 'e']\nprint(remove_words(list1, charlist))<｜end▁of▁sentence｜>"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t\n\tarr.sort() \n\t\n\tmax_sum = 0\n\t\n\tfor i in range(N): \n\t\tfor j in range(i + 1, N): \n\t\t\tif (arr[j] - arr[i] < K): \n\t\t\t\tmax_sum = max(max_sum, arr[j] + arr[i]) \n\t\t\t\tbreak\n\treturn max_sum \n\n\n# Driver code \nif __name__ == \"__main__\": \n\t\n\tarr = [1, 3, 5, 2, 4, 6]\n\tN = len(arr) \n\tK = 3\n\tprint(max_sum_pair_diff_lessthan_K(arr, N, K))<｜end▁of▁sentence｜>"}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\tnums = list(set(nums))\n\tnums.sort()\n\treturn nums\n\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118"}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\tunique_list = []\n\tfor i in list_data:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tproduct = 1\n\tfor i in unique_list:\n\t\tproduct = product * i\n\treturn product\n\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\"\"\"\n\tr: radius of cylinder\n\th: height of cylinder\n\t\"\"\"\n\timport math\n\tsa = 2*math.pi*r*(r+h)\n\treturn sa\n\nprint surfacearea_cylinder(2,3)<｜end▁of▁sentence｜>"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\tcount = 0\n\tfor i in range(L,R+1): \n\t\tif (i % A != 0): \n\t\t\tcount += 1\n\t\tif (count == N): \n\t\t\treturn i \n\treturn -1\n\nA = 2\nN = 3\nL = 1\nR = 10\nprint(count_no(A,N,L,R))<｜end▁of▁sentence｜>"}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\ti = 0\n\tj = 0\n\twhile i < n and j < m: \n\t\tif A[i] == B[j]: \n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse: \n\t\t\ti = i - j + 1\n\t\t\tj = 0\n\tif j == m: \n\t\treturn True\n\treturn False\n\nA = [1, 2, 3, 4, 5, 6] \nB = [4, 5, 6] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A, B, n, m): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\tfact = 1\n\tfor i in range(1, n + 1): \n\t\tfact = fact * i \n\tlast_digit = fact % 10\n\treturn last_digit\n\nn = int(input(\"Enter a number: \"))\nprint(\"Last digit of factorial of\", n, \"is\", last_Digit_Factorial(n))<｜end▁of▁sentence｜>"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\tnew_list = []\n\tfor i in range(len(list1)):\n\t\tnew_list.append(list1[i])\n\t\tnew_list.append(list2[i])\n\t\tnew_list.append(list3[i])\n\treturn new_list\n\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))<｜end▁of▁sentence｜>"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\tdissimilar_list = []\n\tfor i in test_tup1:\n\t\tif i not in test_tup2:\n\t\t\tdissimilar_list.append(i)\n\tfor i in test_tup2:\n\t\tif i not in test_tup1:\n\t\t\tdissimilar_list.append(i)\n\treturn dissimilar_list\n\nprint(find_dissimilar((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)))<｜end▁of▁sentence｜>"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\teven_list = []\n\tfor i in test_tuple:\n\t\tif type(i) == int and i % 2 == 0:\n\t\t\teven_list.append(i)\n\treturn even_list\n\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\ta=b*s\n\treturn a\n\nprint(surface_Area(10,10))<｜end▁of▁sentence｜>"}
{"ID": 945, "source": "MBPP:582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t\"\"\"\n\tThis function checks if a dictionary is empty or not.\n\t\"\"\"\n\tif dict1 == {}:\n\t\tprint(\"The dictionary is empty\")\n\telse:\n\t\tprint(\"The dictionary is not empty\")\n\nmy_dict({})<｜end▁of▁sentence｜>"}
{"ID": 946, "source": "MBPP:583", "prompt": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t\"\"\"\n\tReturns the nth catalan number.\n\t\"\"\"\n\tif num == 0:\n\t\treturn 1\n\telif num == 1:\n\t\treturn 1\n\telse:\n\t\treturn (catalan_number(num-1) * (4*num-2))/(num+1)\n\nprint(catalan_number(5))<｜end▁of▁sentence｜>"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\timport re\n\tadverbs = re.findall(r\"\\badv\\w+\\b\", text)\n\tprint(adverbs)\n\nfind_adverbs(\"The quick brown fox jumped over the lazy dog.\")<｜end▁of▁sentence｜>"}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\timport heapq\n\theap = []\n\tfor item in items:\n\t\theapq.heappush(heap,(-item[1],item[0]))\n\tresult = []\n\tfor i in range(n):\n\t\tresult.append(heapq.heappop(heap)[1])\n\treturn result\n\nitems = [\n    ('item1', 10),\n    ('item2', 5),\n    ('item3', 7),\n    ('item4', 15),\n    ('item5', 12),\n    ('item6', 9),\n    ('item7', 4),\n]\n\nprint(expensive_items(items,3))<｜end▁of▁sentence｜>"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t\n\tb = a[:k]  \n\t\n\treturn (a[k::] + b[::])  \n\na = [12, 10, 5, 6, 52, 36]  \nn = len(a)  \nposition = 2\nprint(\"Array after splitting: \", end =\" \")  \nprint(split_Arr(a, n, position))<｜end▁of▁sentence｜>"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\tlistx = tuple(listx)\n\treturn listx\n\nprint(list_tuple([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 951, "source": "MBPP:588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\tmax_num = max(nums)\n\tmin_num = min(nums)\n\tdiff = max_num - min_num\n\treturn diff\n\nprint(big_diff([10, 3, 5, 6]))\nprint(big_diff([7, 25, 2, 22, 1, 11]))<｜end▁of▁sentence｜>"}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t\"\"\"\n\tFinds perfect squares between two given numbers.\n\t\"\"\"\n\ta = int(a)\n\tb = int(b)\n\tperfect_squares = []\n\tfor i in range(a, b + 1):\n\t\tif i ** 0.5 == int(i ** 0.5):\n\t\t\tperfect_squares.append(i)\n\treturn perfect_squares\n\nprint(perfect_squares(1, 100))<｜end▁of▁sentence｜>"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\tr = (x**2 + y**2)**0.5\n\ttheta = (x**2 + y**2)**0.5\n\treturn r, theta\n\nprint polar_rect(3,4)<｜end▁of▁sentence｜>"}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\tnewList[0], newList[-1] = newList[-1], newList[0]\n\treturn newList\n\nprint(swap_List([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\tsum = 0\n\tfor i in range(n+1): \n\t\tsum += binomial_coefficient(n, i) * binomial_coefficient(n-i, i) \n\treturn sum \n\ndef binomial_coefficient(n, k): \n\tif k == 0 or k == n: \n\t\treturn 1\n\treturn binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k) \n\nn = 5\nprint(sum_Of_product(n))<｜end▁of▁sentence｜>"}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\tip = ip.split('.')\n\tip = [str(int(i)) for i in ip]\n\tip = '.'.join(ip)\n\treturn ip\n\nprint(removezero_ip('100.100.100.100'))<｜end▁of▁sentence｜>"}
{"ID": 957, "source": "MBPP:594", "prompt": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\tprint(even_sum - odd_sum)\n\ndiff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<｜end▁of▁sentence｜>"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\tn = len(str1) \n\tcount = 0\n\tfor i in range(n) : \n\t\tif str1[i] != str2[i] : \n\t\t\tcount += 1\n\treturn count \n\n# Driver code \nstr1 = \"0101010\"\nstr2 = \"1010101\"\nprint(min_Swaps(str1, str2))<｜end▁of▁sentence｜>"}
{"ID": 959, "source": "MBPP:596", "prompt": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\tsize = 0\n\tfor i in tuple_list:\n\t\tsize += 1\n\treturn size\n\nprint(tuple_size((1, 2, 3, 4, 5)))<｜end▁of▁sentence｜>"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\ti = 0\n\tj = 0\n\tcount = 0\n\twhile i < m and j < n:\n\t\tif arr1[i] < arr2[j]:\n\t\t\ti += 1\n\t\telse:\n\t\t\tj += 1\n\t\tcount += 1\n\t\tif count == k:\n\t\t\treturn arr1[i]\n\treturn -1\n\narr1 = [2, 3, 6, 7, 9]\narr2 = [1, 4, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 5\nprint(find_kth(arr1, arr2, m, n, k))<｜end▁of▁sentence｜>"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\tsum = 0\n\ttemp = number\n\twhile temp > 0:\n\t\tdigit = temp % 10\n\t\tsum += digit ** 3\n\t\ttemp //= 10\n\tif number == sum:\n\t\tprint(number, \"is an Armstrong number\")\n\telse:\n\t\tprint(number, \"is not an Armstrong number\")\n\narmstrong_number(153)\narmstrong_number(123)<｜end▁of▁sentence｜>"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\tsum = 0\n\taverage = 0\n\tfor i in range(1, number+1):\n\t\tsum += i\n\t\taverage = sum/number\n\treturn sum, average\n\nprint(sum_average(10))<｜end▁of▁sentence｜>"}
{"ID": 963, "source": "MBPP:600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t\n\tif (n & 1) == 0 : \n\t\tprint(\"Even\") \n\telse : \n\t\tprint(\"Odd\") \n\nn = 10\nis_Even(n)<｜end▁of▁sentence｜>"}
{"ID": 964, "source": "MBPP:1", "prompt": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t\n\t# If the position is out of the grid, return infinity\n\tif m < 0 or n < 0: \n\t\treturn float('inf') \n\t\n\t# If the position is the destination, return the cost of the path\n\tif m == 0 and n == 0: \n\t\treturn cost[m][n] \n\t\n\t# Recursively find the minimum cost path to reach (m, n) from (m-1, n) and (m, n-1)\n\treturn cost[m][n] + min(min_cost(cost, m-1, n), min_cost(cost, m, n-1)) \n\n# Driver code \ncost = [[1, 2, 3], \n\t\t[4, 8, 2], \n\t\t[1, 5, 3]] \nm = 2\nn = 2\nprint(min_cost(cost, m, n))<｜end▁of▁sentence｜>"}
{"ID": 965, "source": "MBPP:2", "prompt": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tThis function takes two tuples as input and returns a list of similar elements.\n\t\"\"\"\n\tsimilar_elements = []\n\tfor element in test_tup1:\n\t\tif element in test_tup2:\n\t\t\tsimilar_elements.append(element)\n\treturn similar_elements\n\n# Testing the function\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (3, 4, 5, 6, 7)\nprint(similar_elements(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\"\"\"\n\tThis function checks if a number is not prime.\n\t\"\"\"\n\tif n == 1:\n\t\treturn False\n\telif n == 2:\n\t\treturn True\n\telse:\n\t\tfor i in range(2, n):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\ndef main():\n\t\"\"\"\n\tThis function is the main function.\n\t\"\"\"\n\tn = int(input(\"Enter a number: \"))\n\tif is_not_prime(n):\n\t\tprint(n, \"is not a prime number.\")\n\telse:\n\t\tprint(n, \"is a prime number.\")\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\timport heapq\n\theapq.heapify(nums)\n\tlargest=[]\n\tfor i in range(n):\n\t\tlargest.append(heapq.heappop(nums))\n\treturn largest\n\nnums=[1,2,3,4,5,6,7,8,9,10]\nn=len(nums)\nprint(heap_queue_largest(nums,n))<｜end▁of▁sentence｜>"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t\n\t# Base case \n\tif n == 0: \n\t\treturn 1\n\t\n\t# If n is negative \n\tif n < 0: \n\t\treturn 0\n\t\n\t# If n is 1 \n\tif n == 1: \n\t\treturn 1\n\t\n\t# If n is 2 \n\tif n == 2: \n\t\treturn 2\n\t\n\t# If n is 3 \n\tif n == 3: \n\t\treturn 4\n\t\n\t# If n is 4 \n\tif n == 4: \n\t\treturn 7\n\t\n\t# If n is 5 \n\tif n == 5: \n\t\treturn 13\n\t\n\t# If n is 6 \n\tif n == 6: \n\t\treturn 24\n\t\n\t# If n is 7 \n\tif n == 7: \n\t\treturn 44\n\t\n\t# If n is 8 \n\tif n == 8: \n\t\treturn 81\n\t\n\t# If n is 9 \n\tif n == 9: \n\t\treturn 165\n\t\n\t# If n is 10 \n\tif n == 10: \n\t\treturn 330\n\t\n\t# If n is 11 \n\tif n == 11: \n\t\treturn 692\n\t\n\t# If n is 12 \n\tif n == 12: \n\t\treturn 1496\n\t\n\t# If n is 13 \n\tif n == 13: \n\t\treturn 3024\n\t\n\t# If n is 14 \n\tif n == 14: \n\t\treturn 5985\n\t\n\t# If n is 15 \n\tif n == 15: \n\t\treturn 11468\n\t\n\t# If n is 16 \n\tif n == 16: \n\t\treturn 24016\n\t\n\t# If n is 17 \n\tif n == 17: \n\t\treturn 49616\n\t\n\t# If n is 18 \n\tif n == 18: \n\t\treturn 94608\n\t\n\t# If n is 19 \n\tif n == 19: \n\t\treturn 19"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\tx = a^b\n\tcount = 0\n\twhile x:\n\t\tcount += x & 1\n\t\tx >>= 1\n\treturn count == 1\n\nprint(differ_At_One_Bit_Pos(10,11))<｜end▁of▁sentence｜>"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\timport re\n\tpattern = re.compile(r'\\w{4,}')\n\tresult = pattern.findall(text)\n\treturn result\n\nprint(find_char_long(\"The quick brown fox jumps over the lazy dog\"))<｜end▁of▁sentence｜>"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\tresult = []\n\tfor num in nums:\n\t\tresult.append(num**2)\n\treturn result\n\nprint(square_nums([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\tn = len(str) \n\tstart, end = 0, n-1\n\twhile (start <= end): \n\t\tif (str[start] <= str[end]): \n\t\t\treturn start \n\t\tmid = (start + end)//2\n\t\tnext = (mid+1)%n\n\t\tprev = (mid-1+n)%n\n\t\tif (str[mid] <= str[next] and str[mid] <= str[prev]): \n\t\t\treturn mid \n\t\telif (str[start] <= str[mid]): \n\t\t\tstart = mid + 1\n\t\telif (str[mid] <= str[end]): \n\t\t\tend = mid - 1\n\treturn -1\n\nstr = \"geeksforgeeks\"\nprint(find_Rotations(str))<｜end▁of▁sentence｜>"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\tlist1.sort()\n\tprint(list1[:n])\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nsmall_nnum(list1,3)<｜end▁of▁sentence｜>"}
