{"ID": 0, "source": "HumanEval:HumanEval/0", "prompt": "from typing import List\n\n\n\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n\"\"\"\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:", "predict": "<s>from typing import List\n\n\n\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n\"\"\"\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 1, "source": "HumanEval:HumanEval/1", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string"}
{"ID": 2, "source": "HumanEval:HumanEval/2", "prompt": "\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:", "predict": "<s>\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than"}
{"ID": 3, "source": "HumanEval:HumanEval/3", "prompt": "from typing import List\n\n\n\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:", "predict": "<s>from typing import List\n\n\n\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 4, "source": "HumanEval:HumanEval/4", "prompt": "from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:", "predict": "<s>from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Median Absolute Deviation\naround the median of this dataset.\nMedian Absolute Deviation is the median absolute difference between each\nelement and a centerpoint (median in this case):\nMAD = median | x - x_median |\n>>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Percentage\nError around the mean of this dataset.\nMean Absolute Percentage Error is the average absolute difference between\neach element and a centerpoint (mean in this case) divided by the centerpoint:\nMAPE = average | x - x_mean | / x_mean\n>>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0])\n0.25\n\"\"\"\ndef mean_absolute_percentage_error(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) / mean for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Median Absolute Percentage\nError around the median of this dataset.\nMedian Absolute Percentage Error is the median absolute difference between\neach element and a centerpoint (median in this case) divided by the centerpoint:\nMAPE = median | x - x_median | / x_median\n>>> median_absolute_percent"}
{"ID": 5, "source": "HumanEval:HumanEval/5", "prompt": "from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v2([], 4)\n[]\n>>> intersperse_v2([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v2(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + intersperse_v2(numbers[1:], delimeter) + [delimeter]\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v3([], 4)\n[]\n>>> intersperse_v3([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v3(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse_v3(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v4([], 4)\n[]\n>>> intersperse_v4([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v4(numbers: List[int], delimeter: int) -> List[int]:\n   "}
{"ID": 6, "source": "HumanEval:HumanEval/6", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(' ')\n    max_levels = []\n    for paren_group in paren_groups:\n        max_levels.append(get_max_level(paren_group))\n    return max_levels\n\n\ndef get_max_level(paren_group: str) -> int:\n    max_level = 0\n    level = 0\n    for paren in paren_group:\n        if paren == '(':\n            level += 1\n            max_level = max(max_level, level)\n        elif paren == ')':\n            level -= 1\n    return max_level\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 7, "source": "HumanEval:HumanEval/7", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda([], 'a')\n[]\n>>> filter_by_substring_with_lambda(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda_and_map(strings: List[str], substring: str) -> List[str]:\n    return list(map(lambda s: s if substring in s else None, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map_and_filter([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map_and_filter(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda_and_map_and_filter(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: s is not None, map(lambda s: s if substring in s else None, strings)))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map_and_filter_and_comprehension([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map_"}
{"ID": 8, "source": "HumanEval:HumanEval/8", "prompt": "from typing import List, Tuple\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:", "predict": "<s>from typing import List, Tuple\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 9, "source": "HumanEval:HumanEval/9", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:", "predict": "<s>from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\nin the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 1, 1, 1, 2, 2, 2]\n\"\"\"\ndef rolling_min(numbers: List[int]) -> List[int]:\n    min_so_far = numbers[0]\n    result = [min_so_far]\n    for i in range(1, len(numbers)):\n        min_so_far = min(min_so_far, numbers[i])\n        result.append(min_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling sum of elements found until given moment\nin the sequence.\n>>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n[1, 3, 6, 8, 11, 15, 17]\n\"\"\"\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    sum_so_far = numbers[0]\n    result = [sum_so_far]\n    for i in range(1, len(numbers)):\n        sum_so_far += numbers[i]\n        result.append(sum_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling product of elements found until given moment\nin the sequence.\n>>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 6, 12, 24, 96, 192]\n\"\"\"\ndef rolling_product(numbers: List[int]) -> List[int]:\n    product"}
{"ID": 10, "source": "HumanEval:HumanEval/10", "prompt": "\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:", "predict": "<s>\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\""}
{"ID": 11, "source": "HumanEval:HumanEval/11", "prompt": "from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:", "predict": "<s>from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings('00110011')\n6\n\"\"\"\ndef count_binary_substrings(s: str) -> int:\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_2('00110011')\n6\n\"\"\"\ndef count_binary_substrings_2(s: str) -> int:\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            while i < len(s) and s[i] == '0':\n                i += 1\n        elif s[i] == '1':\n            while i < len(s) and s[i] == '1':\n                i += 1\n        count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_3('00110011')\n6\n\"\"\"\ndef count_binary_substrings_3(s: str) -> int:\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            while i < len(s) and s[i] == '0':\n                i += 1\n        elif s[i] == '1':\n            while i"}
{"ID": 12, "source": "HumanEval:HumanEval/12", "prompt": "from typing import List, Optional\n\n\n\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n\"\"\"\ndef longest(strings: List[str]) -> Optional[str]:", "predict": "<s>from typing import List, Optional\n\n\n\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n\"\"\"\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 13, "source": "HumanEval:HumanEval/13", "prompt": "\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:", "predict": "<s>\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\"\"\" Return a least common multiple of two integers a and b\n>>> least_common_multiple(3, 5)\n15\n>>> least_common_multiple(25, 15)\n75\n\"\"\"\ndef least_common_multiple(a: int, b: int) -> int:\n    return a * b // greatest_common_divisor(a, b)\n\n\n\"\"\" Return a greatest common divisor of a list of integers\n>>> greatest_common_divisor_list([3, 5, 15])\n1\n>>> greatest_common_divisor_list([25, 15, 30])\n5\n\"\"\"\ndef greatest_common_divisor_list(numbers: list) -> int:\n    result = numbers[0]\n    for number in numbers[1:]:\n        result = greatest_common_divisor(result, number)\n    return result\n\n\n\"\"\" Return a least common multiple of a list of integers\n>>> least_common_multiple_list([3, 5, 15])\n15\n>>> least_common_multiple_list([25, 15, 30])\n75\n\"\"\"\ndef least_common_multiple_list(numbers: list) -> int:\n    result = numbers[0]\n    for number in numbers[1:]:\n        result = least_common_multiple(result, number)\n    return result\n\n\n\"\"\" Return a greatest common divisor of a list of integers\n>>> greatest_common_divisor_list_recursive([3, 5, 15])\n1\n>>> greatest_common_divisor_list_recursive([25, 15, 30])\n5\n\"\"\"\ndef greatest_common_divisor_list_recursive(numbers: list) -> int:\n    if len(numbers) == 1:\n        return numbers[0]\n    return greatest_common_divisor(numbers[0], greatest_common_divisor_list_recursive(numbers[1:]))\n\n\n\"\"\" Return"}
{"ID": 14, "source": "HumanEval:HumanEval/14", "prompt": "from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n\"\"\" Return list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'bc', 'abc']\n\"\"\"\ndef all_suffixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all"}
{"ID": 15, "source": "HumanEval:HumanEval/15", "prompt": "\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:", "predict": "<s>\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"ID": 16, "source": "HumanEval:HumanEval/16", "prompt": "\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:", "predict": "<s>\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v2('xyzXYZ')\n3\n>>> count_distinct_characters_v2('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v2(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v3('xyzXYZ')\n3\n>>> count_distinct_characters_v3('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v3(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v4('xyzXYZ')\n3\n>>> count_distinct_characters_v4('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v4(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v5('xyzXYZ')\n3\n>>> count_distinct_characters_v5('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v5(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v6('xyzXYZ')\n3\n>>> count_distinct_characters_v6('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v6(string: str) -> int:\n    return len({char"}
{"ID": 17, "source": "HumanEval:HumanEval/17", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\"\"\"\ndef parse_music(music_string: str) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\"\"\"\ndef parse_music(music_string: str) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 18, "source": "HumanEval:HumanEval/18", "prompt": "\n\n\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n\"\"\"\ndef how_many_times(string: str, substring: str) -> int:", "predict": "<s>\n\n\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n\"\"\"\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 19, "source": "HumanEval:HumanEval/19", "prompt": "from typing import List\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n\"\"\"\ndef sort_numbers(numbers: str) -> str:", "predict": "<s>from typing import List\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n\"\"\"\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted(numbers.split(' ')))\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from largest to smallest\n>>> sort_numbers('three one five')\n'five three one'\n\"\"\"\ndef sort_numbers_reverse(numbers: str) -> str:\n    return ' '.join(sorted(numbers.split(' '), reverse=True))\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n\"\"\"\ndef sort_numbers_list(numbers: List[str]) -> List[str]:\n    return sorted(numbers)\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from largest to smallest\n>>> sort_numbers('three one five')\n'five three one'\n\"\"\"\ndef sort_numbers_list_reverse(numbers: List[str]) -> List[str]:\n    return sorted(numbers, reverse=True)\n</s>"}
{"ID": 20, "source": "HumanEval:HumanEval/20", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:", "predict": "<s>from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # TODO: implement this function\n    pass\n\n\nif __name__ == '__main__':\n    # Tests\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3]) == (2.0, 2.3)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3, 2.4]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3"}
{"ID": 21, "source": "HumanEval:HumanEval/21", "prompt": "from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:", "predict": "<s>from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace(numbers: List[float]) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace_with_min_max(numbers: List[float], min_val: float, max_val: float) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform"}
{"ID": 22, "source": "HumanEval:HumanEval/22", "prompt": "from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:", "predict": "<s>from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n\n\"\"\" Filter given list of any python values only for floats\n>>> filter_floats(['a', 3.14, 5])\n[3.14]\n>>> filter_floats([1, 2, 3, 'abc', {}, []])\n[]\n\"\"\"\ndef filter_floats(values: List[Any]) -> List[float]:\n    return [value for value in values if isinstance(value, float)]\n\n\n\"\"\" Filter given list of any python values only for strings\n>>> filter_strings(['a', 3.14, 5])\n['a']\n>>> filter_strings([1, 2, 3, 'abc', {}, []])\n['abc']\n\"\"\"\ndef filter_strings(values: List[Any]) -> List[str]:\n    return [value for value in values if isinstance(value, str)]\n\n\n\"\"\" Filter given list of any python values only for lists\n>>> filter_lists(['a', 3.14, 5])\n[]\n>>> filter_lists([1, 2, 3, 'abc', {}, []])\n[{}, []]\n\"\"\"\ndef filter_lists(values: List[Any]) -> List[list]:\n    return [value for value in values if isinstance(value, list)]\n\n\n\"\"\" Filter given list of any python values only for dictionaries\n>>> filter_dictionaries(['a', 3.14, 5])\n[]\n>>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n[{}]\n\"\"\"\ndef filter_dictionaries(values: List[Any]) -> List[dict]:\n    return [value for value in values if isinstance(value, dict)]\n\n\n\"\"\" Filter given list of any python values only for booleans\n>>> filter_booleans(['a', 3.14, 5])\n[]\n>>> filter_booleans([1, 2, 3, 'abc', {}, [], True, False])\n[True, False]\n\"\"\"\ndef filter_booleans(values: List[Any]) -> List["}
{"ID": 23, "source": "HumanEval:HumanEval/23", "prompt": "\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:", "predict": "<s>\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:\n    return len(string)\n\n\n\"\"\" Return True if given string is empty\n>>> is_empty('')\nTrue\n>>> is_empty('abc')\nFalse\n\"\"\"\ndef is_empty(string: str) -> bool:\n    return len(string) == 0\n\n\n\"\"\" Return True if given string is not empty\n>>> is_not_empty('')\nFalse\n>>> is_not_empty('abc')\nTrue\n\"\"\"\ndef is_not_empty(string: str) -> bool:\n    return len(string) > 0\n\n\n\"\"\" Return True if given string is whitespace\n>>> is_whitespace('')\nFalse\n>>> is_whitespace(' ')\nTrue\n>>> is_whitespace('abc')\nFalse\n\"\"\"\ndef is_whitespace(string: str) -> bool:\n    return len(string.strip()) == 0\n\n\n\"\"\" Return True if given string is not whitespace\n>>> is_not_whitespace('')\nTrue\n>>> is_not_whitespace(' ')\nFalse\n>>> is_not_whitespace('abc')\nTrue\n\"\"\"\ndef is_not_whitespace(string: str) -> bool:\n    return len(string.strip()) > 0\n\n\n\"\"\" Return True if given string is alphabetic\n>>> is_alphabetic('')\nFalse\n>>> is_alphabetic('abc')\nTrue\n>>> is_alphabetic('abc123')\nFalse\n\"\"\"\ndef is_alphabetic(string: str) -> bool:\n    return string.isalpha()\n\n\n\"\"\" Return True if given string is not alphabetic\n>>> is_not_alphabetic('')\nTrue\n>>> is_not_alphabetic('abc')\nFalse\n>>> is_not_alphabetic('abc123')\nTrue\n\"\"\"\ndef is_not_alphabetic(string: str) -> bool:\n    return not string.isalpha()\n\n\n\"\"\" Return True if given string is alphanumeric\n>>> is_alphanumeric('')\nFalse\n>>> is_alphanumeric('abc')\nTrue"}
{"ID": 24, "source": "HumanEval:HumanEval/24", "prompt": "\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:", "predict": "<s>\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n\n\n\"\"\" For a given number n, find the smallest number that divides n evenly, larger than 1\n>>> smallest_divisor(15)\n3\n\"\"\"\ndef smallest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n\n\"\"\" For a given number n, find the prime factors of n\n>>> prime_factors(15)\n[3, 5]\n\"\"\"\ndef prime_factors(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\n\"\"\" For a given number n, find the prime factors of n, with multiplicity\n>>> prime_factors_mult(15)\n[(3, 1), (5, 1)]\n\"\"\"\ndef prime_factors_mult(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n = n // i\n        if count > 0:\n            factors.append((i, count))\n    if n > 2:\n        factors.append((n, 1))\n    return factors\n\n\n\"\"\" For a given number n, find the prime factors of n, with multiplicity, in a dictionary\n>>> prime_factors_dict(15)\n{3: 1, 5: 1}\n"}
{"ID": 25, "source": "HumanEval:HumanEval/25", "prompt": "from typing import List\n\n\n\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n\"\"\"\ndef factorize(n: int) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n\"\"\"\ndef factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 26, "source": "HumanEval:HumanEval/26", "prompt": "from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_2([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_3([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_4([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_4(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_5([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_5(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_6([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_6(numbers: List[int]) -> List[int]:\n   "}
{"ID": 27, "source": "HumanEval:HumanEval/27", "prompt": "\n\n\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n\"\"\"\ndef flip_case(string: str) -> str:", "predict": "<s>\n\n\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n\"\"\"\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\n\n\"\"\" For a given string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged.\n>>> not_string('candy')\n'not candy'\n>>> not_string('x')\n'not x'\n>>> not_string('not bad')\n'not bad'\n\"\"\"\ndef not_string(string: str) -> str:\n    return 'not ' + string if not string.startswith('not') else string\n\n\n\"\"\" Given a string, return a new string where the first and last chars have been exchanged.\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'\n\"\"\"\ndef front_back(string: str) -> str:\n    return string[-1] + string[1:-1] + string[0] if len(string) > 1 else string\n\n\n\"\"\" Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.\n>>> front3('Java')\n'JavJavJav'\n>>> front3('Chocolate')\n'ChoChoCho'\n>>> front3('abc')\n'abcabcabc'\n\"\"\"\ndef front3(string: str) -> str:\n    return string[:3] * 3\n\n\n\"\"\" Given a string, take the last char and return a new string with the last char added at the front and back, so \"cat\" yields \"tcatt\". The original string will be length 1 or more.\n>>> back_arrow('cat')\n'tcatt'\n>>> back_arrow('a')\n'aaa'\n>>> back_arrow('aa')\n'aaza'\n\"\"\"\ndef back_arrow(string: str) -> str:\n    return string[-1] + string + string[-1]\n\n\n\"\"\" Given a string, return a string made of the first 2 chars (if present),"}
{"ID": 28, "source": "HumanEval:HumanEval/28", "prompt": "from typing import List\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\"\"\"\ndef concatenate(strings: List[str]) -> str:", "predict": "<s>from typing import List\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\"\"\"\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n\n\"\"\" Split string into list of strings\n>>> split('')\n[]\n>>> split('abc')\n['a', 'b', 'c']\n\"\"\"\ndef split(string: str) -> List[str]:\n    return list(string)\n\n\n\"\"\" Check if string is empty\n>>> is_empty('')\nTrue\n>>> is_empty('abc')\nFalse\n\"\"\"\ndef is_empty(string: str) -> bool:\n    return len(string) == 0\n\n\n\"\"\" Check if string is not empty\n>>> is_not_empty('')\nFalse\n>>> is_not_empty('abc')\nTrue\n\"\"\"\ndef is_not_empty(string: str) -> bool:\n    return len(string) > 0\n\n\n\"\"\" Check if string is blank\n>>> is_blank('')\nTrue\n>>> is_blank(' ')\nTrue\n>>> is_blank('abc')\nFalse\n\"\"\"\ndef is_blank(string: str) -> bool:\n    return len(string.strip()) == 0\n\n\n\"\"\" Check if string is not blank\n>>> is_not_blank('')\nFalse\n>>> is_not_blank(' ')\nFalse\n>>> is_not_blank('abc')\nTrue\n\"\"\"\ndef is_not_blank(string: str) -> bool:\n    return len(string.strip()) > 0\n\n\n\"\"\" Check if string contains substring\n>>> contains('abc', 'a')\nTrue\n>>> contains('abc', 'd')\nFalse\n\"\"\"\ndef contains(string: str, substring: str) -> bool:\n    return substring in string\n\n\n\"\"\" Check if string starts with substring\n>>> starts_with('abc', 'a')\nTrue\n>>> starts_with('abc', 'b')\nFalse\n\"\"\"\ndef starts_with(string: str, substring: str) -> bool:\n    return string.startswith(substring)\n\n\n\"\"\" Check if string ends with substring\n>>> ends_with('abc', 'c')\nTrue\n>>> ends_with('abc', 'b')\nFalse\n\"\"\"\ndef ends_with(string"}
{"ID": 29, "source": "HumanEval:HumanEval/29", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n\n\"\"\" Filter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    return [s for s in strings if s.endswith(suffix)]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that match a given regular expression.\n>>> filter_by_regex([], 'a')\n[]\n>>> filter_by_regex(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    import re\n    return [s for s in strings if re.search(regex, s)]\n\n\n\"\"\" Filter an input list of strings only for ones that are equal to a given string.\n>>> filter_by_equality([], 'a')\n[]\n>>> filter_by_equality(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\"\"\"\ndef filter_by_equality(strings: List[str], string: str) -> List[str]:\n    return [s for s in strings if s == string]\n\n\n\"\"\" Filter an input list of strings only for ones that are not equal to a given string.\n>>> filter_by_inequality([], 'a')\n[]\n>>> filter_by_ine"}
{"ID": 30, "source": "HumanEval:HumanEval/30", "prompt": "\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):", "predict": "<s>\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):\n    return [i for i in l if i > 0]\n\n\n\"\"\"Return only negative numbers in the list.\n>>> get_negative([-1, 2, -4, 5, 6])\n[-1, -4]\n>>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[-5, -3, -10]\n\"\"\"\ndef get_negative(l: list):\n    return [i for i in l if i < 0]\n\n\n\"\"\"Return only even numbers in the list.\n>>> get_even([-1, 2, -4, 5, 6])\n[2, 6]\n>>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[2, -4, 0]\n\"\"\"\ndef get_even(l: list):\n    return [i for i in l if i % 2 == 0]\n\n\n\"\"\"Return only odd numbers in the list.\n>>> get_odd([-1, 2, -4, 5, 6])\n[-1, 5]\n>>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, -5, 3, 3, 9, 1, -10]\n\"\"\"\ndef get_odd(l: list):\n    return [i for i in l if i % 2 != 0]\n\n\n\"\"\"Return only numbers in the list that are divisible by 3.\n>>> get_divisible_by_3([-1, 2, -4, 5, 6])\n[-1, 2, 6]\n>>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[3, -3"}
{"ID": 31, "source": "HumanEval:HumanEval/31", "prompt": "\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):", "predict": "<s>\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 32, "source": "HumanEval:HumanEval/32", "prompt": "import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):", "predict": "<s>import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs)"}
{"ID": 33, "source": "HumanEval:HumanEval/33", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):", "predict": "<s>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_copy[i] = l[i]\n    return l_copy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 34, "source": "HumanEval:HumanEval/34", "prompt": "\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):", "predict": "<s>\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(set(l))\n\n\n\"\"\"Return the first element of a list\n>>> first([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5\n\"\"\"\ndef first(l: list):\n    return l[0]\n\n\n\"\"\"Return the last element of a list\n>>> last([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef last(l: list):\n    return l[-1]\n\n\n\"\"\"Return the length of a list\n>>> length([5, 3, 5, 2, 3, 3, 9, 0, 123])\n9\n\"\"\"\ndef length(l: list):\n    return len(l)\n\n\n\"\"\"Return the sum of all elements in a list\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n212\n\"\"\"\ndef sum(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in a list\n>>> average([5, 3, 5, 2, 3, 3, 9, 0, 123])\n23.555555555555557\n\"\"\"\ndef average(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the minimum element in a list\n>>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0\n\"\"\"\ndef min(l: list):\n    return min(l)\n\n\n\"\"\"Return the maximum element in a list\n>>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef max(l: list):\n    return max(l)\n\n\n\"\"\"Return the median of all elements in a list\n>>>"}
{"ID": 35, "source": "HumanEval:HumanEval/35", "prompt": "\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):", "predict": "<s>\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):\n    return max(l)\n\n\n\"\"\"Return minimum element in the list.\n>>> min_element([1, 2, 3])\n1\n>>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-10\n\"\"\"\ndef min_element(l: list):\n    return min(l)\n\n\n\"\"\"Return the sum of all elements in the list.\n>>> sum_list([1, 2, 3])\n6\n>>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n121\n\"\"\"\ndef sum_list(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in the list.\n>>> avg_list([1, 2, 3])\n2.0\n>>> avg_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n12.1\n\"\"\"\ndef avg_list(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the median of all elements in the list.\n>>> median_list([1, 2, 3])\n2.0\n>>> median_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n2.0\n\"\"\"\ndef median_list(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\n\"\"\"Return the mode of all elements in the list.\n>>> mode_list([1, 2, 3])\n1\n>>> mode_list([5, "}
{"ID": 36, "source": "HumanEval:HumanEval/36", "prompt": "\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n\"\"\"\ndef fizz_buzz(n: int):", "predict": "<s>\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n\"\"\"\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 37, "source": "HumanEval:HumanEval/37", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):", "predict": "<s>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1"}
{"ID": 38, "source": "HumanEval:HumanEval/38", "prompt": "\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):", "predict": "<s>\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 39, "source": "HumanEval:HumanEval/39", "prompt": "\n\n\"\"\"\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n\"\"\"\ndef prime_fib(n: int):", "predict": "<s>\n\n\"\"\"\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n\"\"\"\ndef prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        while True:\n            if is_prime(i) and is_fib(i):\n                if n == 3:\n                    return i\n                else:\n                    n -= 1\n            i += 1\n\n\ndef is_prime(n: int):\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_fib(n: int):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n            if b == n:\n                return True\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 40, "source": "HumanEval:HumanEval/40", "prompt": "\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):", "predict": "<s>\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):\n    # your code here\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 41, "source": "HumanEval:HumanEval/41", "prompt": "\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):", "predict": "<s>\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_recursive(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_memoized(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs"}
{"ID": 42, "source": "HumanEval:HumanEval/42", "prompt": "\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):", "predict": "<s>\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n\n\n\"\"\"Return list with elements decremented by 1.\n>>> decr_list([1, 2, 3])\n[0, 1, 2]\n>>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[4, 2, 4, 1, 2, 2, 8, -1, 122]\n\"\"\"\ndef decr_list(l: list):\n    return [x - 1 for x in l]\n\n\n\"\"\"Return list with elements multiplied by 2.\n>>> double_list([1, 2, 3])\n[2, 4, 6]\n>>> double_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[10, 6, 10, 4, 6, 6, 18, 0, 246]\n\"\"\"\ndef double_list(l: list):\n    return [x * 2 for x in l]\n\n\n\"\"\"Return list with elements divided by 2.\n>>> half_list([1, 2, 3])\n[0.5, 1.0, 1.5]\n>>> half_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[2.5, 1.5, 2.5, 1.0, 1.5, 1.5, 4.5, 0.0, 61.5]\n\"\"\"\ndef half_list(l: list):\n    return [x / 2 for x in l]\n\n\n\"\"\"Return list with elements squared.\n>>> square_list([1, 2, 3])\n[1, 4, 9]\n>>> square_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[25,"}
{"ID": 43, "source": "HumanEval:HumanEval/43", "prompt": "\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):", "predict": "<s>\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):\n    # your code here\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_2 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero_2([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero_2([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero_2([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero_2([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero_2(l):\n    # your code here\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_3 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero_3([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero_3([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero_3([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero"}
{"ID": 44, "source": "HumanEval:HumanEval/44", "prompt": "\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):", "predict": "<s>\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):\n    if x < 0:\n        sign = -1\n    elif x == 0:\n        return '0'\n    else:\n        sign = 1\n    x *= sign\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    if sign == -1:\n        digits.append('-')\n    digits.reverse()\n    return ''.join(digits)\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'"}
{"ID": 45, "source": "HumanEval:HumanEval/45", "prompt": "\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):", "predict": "<s>\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a rectangle.\n>>> rectangle_area(5, 3)\n15\n\"\"\"\ndef rectangle_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a square.\n>>> square_area(5)\n25\n\"\"\"\ndef square_area(a):\n    return a * a\n\n\n\"\"\"Given length of a side and high return area for a circle.\n>>> circle_area(5)\n78.53981633974483\n\"\"\"\ndef circle_area(r):\n    from math import pi\n    return pi * r * r\n\n\n\"\"\"Given length of a side and high return area for a trapezoid.\n>>> trapezoid_area(5, 3, 2)\n10\n\"\"\"\ndef trapezoid_area(a, h, b):\n    return (a + b) * h / 2\n\n\n\"\"\"Given length of a side and high return area for a parallelogram.\n>>> parallelogram_area(5, 3)\n15\n\"\"\"\ndef parallelogram_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a rhombus.\n>>> rhombus_area(5, 3)\n7.5\n\"\"\"\ndef rhombus_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a kite.\n>>> kite_area(5, 3)\n15\n\"\"\"\ndef kite_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a pentagon.\n>>> pentagon_area(5, 3)\n15\n\"\"\"\ndef pentagon_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a hexagon."}
{"ID": 46, "source": "HumanEval:HumanEval/46", "prompt": "\n\n\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n\"\"\"\ndef fib4(n: int):", "predict": "<s>\n\n\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n\"\"\"\ndef fib4(n: int):\n    if n < 4:\n        return 0\n    if n == 4:\n        return 2\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    return fib4_list[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 47, "source": "HumanEval:HumanEval/47", "prompt": "\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):", "predict": "<s>\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\n\"\"\"Return the mode of elements in the list l.\n>>> mode([3, 1, 2, 4, 5])\n3\n>>> mode([-10, 4, 6, 1000, 10, 20])\n10\n\"\"\"\ndef mode(l: list):\n    l.sort()\n    max_count = 0\n    mode = None\n    for i in range(len(l)):\n        count = 0\n        for j in range(len(l)):\n            if l[i] == l[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            mode = l[i]\n    return mode\n\n\n\"\"\"Return the mean of elements in the list l.\n>>> mean([3, 1, 2, 4, 5])\n3\n>>> mean([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef mean(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the variance of elements in the list l.\n>>> variance([3, 1, 2, 4, 5])\n2\n>>> variance([-10, 4, 6, 1000, 10, 20])\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 48, "source": "HumanEval:HumanEval/48", "prompt": "\n\n\"\"\"\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n\"\"\"\ndef is_palindrome(text: str):", "predict": "<s>\n\n\"\"\"\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n\"\"\"\ndef is_palindrome(text: str):\n    return text == text[::-1]\n\n\n\"\"\"\nChecks if given string is a palindrome\n>>> is_palindrome_recursive('')\nTrue\n>>> is_palindrome_recursive('aba')\nTrue\n>>> is_palindrome_recursive('aaaaa')\nTrue\n>>> is_palindrome_recursive('zbcd')\nFalse\n\"\"\"\ndef is_palindrome_recursive(text: str):\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_recursive(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 49, "source": "HumanEval:HumanEval/49", "prompt": "\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):", "predict": "<s>\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n\n\n\"\"\"Return the number of bits in the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n>>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n6\n>>> bit_length(38)\n6\n>>> bit_length(39)\n6\n>>> bit_length(40)\n6\n>>"}
{"ID": 50, "source": "HumanEval:HumanEval/50", "prompt": "\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):", "predict": "<s>\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 51, "source": "HumanEval:HumanEval/51", "prompt": "\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):", "predict": "<s>\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_consonants is a function that takes string and returns string without consonants.\n>>> remove_consonants('')\n''\n>>> remove_consonants(\"abcdef\\nghijklm\")\n'aeiou\\n'\n>>> remove_consonants('abcdef')\n'aeiou'\n>>> remove_consonants('aaaaa')\n'aaaaa'\n>>> remove_consonants('aaBAA')\n'aaAA'\n>>> remove_consonants('zbcd')\n''\n\"\"\"\ndef remove_consonants(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_punctuation is a function that takes string and returns string without punctuation.\n>>> remove_punctuation('')\n''\n>>> remove_punctuation(\"abcdef\\nghijklm\")\n'abcdef\\nghijklm'\n>>> remove_punctuation('abcdef')\n'abcdef'\n>>> remove_punctuation('aaaaa')\n'aaaaa'\n>>> remove_punctuation('aaBAA')\n'aaBAA'\n>>> remove_punctuation('zbcd')\n'zbcd'\n>>> remove_punctuation('zbcd.')\n'zbcd'\n>>> remove_punctuation('zbcd,')\n'zbcd'\n>>> remove_punctuation('zbcd!')\n'zbcd'\n>>> remove_punctuation('zbcd?')\n'zbcd'\n>>> remove_punctuation('zbcd:')\n'zbcd'\n>>> remove_punctuation('zbcd;')\n'"}
{"ID": 52, "source": "HumanEval:HumanEval/52", "prompt": "\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):", "predict": "<s>\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\n"}
{"ID": 53, "source": "HumanEval:HumanEval/53", "prompt": "\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):", "predict": "<s>\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):\n    return x + y\n\n\n\"\"\"Subtract two numbers x and y\n>>> subtract(2, 3)\n-1\n>>> subtract(5, 7)\n-2\n\"\"\"\ndef subtract(x: int, y: int):\n    return x - y\n\n\n\"\"\"Multiply two numbers x and y\n>>> multiply(2, 3)\n6\n>>> multiply(5, 7)\n35\n\"\"\"\ndef multiply(x: int, y: int):\n    return x * y\n\n\n\"\"\"Divide two numbers x and y\n>>> divide(2, 3)\n0.6666666666666666\n>>> divide(5, 7)\n0.7142857142857143\n\"\"\"\ndef divide(x: int, y: int):\n    return x / y\n\n\n\"\"\"Find the remainder of two numbers x and y\n>>> remainder(2, 3)\n2\n>>> remainder(5, 7)\n5\n\"\"\"\ndef remainder(x: int, y: int):\n    return x % y\n\n\n\"\"\"Find the power of two numbers x and y\n>>> power(2, 3)\n8\n>>> power(5, 7)\n78125\n\"\"\"\ndef power(x: int, y: int):\n    return x ** y\n\n\n\"\"\"Find the square root of a number x\n>>> square_root(2)\n1.4142135623730951\n>>> square_root(5)\n2.23606797749979\n\"\"\"\ndef square_root(x: int):\n    return x ** 0.5\n\n\n\"\"\"Find the cube root of a number x\n>>> cube_root(2)\n1.2599210498948732\n>>> cube_root(5)\n1.7099759466766947\n\"\"\"\ndef cube_root(x: int):\n    return"}
{"ID": 54, "source": "HumanEval:HumanEval/54", "prompt": "\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars(s0: str, s1: str):", "predict": "<s>\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars_2('abcd', 'dddddddabc')\nTrue\n>>> same_chars_2('dddddddabc', 'abcd')\nTrue\n>>> same_chars_2('eabcd', 'dddddddabc')\nFalse\n>>> same_chars_2('abcd', 'dddddddabce')\nFalse\n>>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars_2(s0: str, s1: str):\n    return len(set(s0)) == len(set(s1)) == len(set(s0) | set(s1))\n\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars_3('abcd', 'dddddddabc')\nTrue\n>>> same_chars_3('dddddddabc', 'abcd')\nTrue\n>>> same_chars_3('eabcd', 'dddddddabc')\nFalse\n>>> same_chars_3('abcd', 'dddddddabce')\nFalse\n>>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars_3(s0: str, s1: str):\n    return len(s0) == len(s1) == len(set(s0) | set(s1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 55, "source": "HumanEval:HumanEval/55", "prompt": "\n\n\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n\"\"\"\ndef fib(n: int):", "predict": "<s>\n\n\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n\"\"\"\ndef fib(n: int):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_iter(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_rec(n: int):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n\n\ndef fib_rec_memo(n: int):\n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 1\n    for i in range(3, n + 1):\n        memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n\n\ndef fib_rec_memo_dp(n: int):\n    memo = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i == 1:\n            memo[i] = 1\n        elif i == 2:\n            memo[i] = 1\n        else:\n            memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n\n\ndef fib_rec_memo_dp_2(n: int):\n    memo = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i == 1:\n            memo[i] = 1\n        elif i == 2:\n            memo[i] = 1\n        else:\n            memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n\n\ndef fib_rec_memo_dp_3(n: int):\n    memo = [0"}
{"ID": 56, "source": "HumanEval:HumanEval/56", "prompt": "\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<s>\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n"}
{"ID": 57, "source": "HumanEval:HumanEval/57", "prompt": "\n\n\"\"\"Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):", "predict": "<s>\n\n\"\"\"Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i-1] > l[i]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i-1] < l[i]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 58, "source": "HumanEval:HumanEval/58", "prompt": "\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):", "predict": "<s>\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):\n    return sorted(set(l1).intersection(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v2([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v2(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v3([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v3(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v4([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v4([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v4(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v5([1, 4, 3, 34, 653, 2, "}
{"ID": 59, "source": "HumanEval:HumanEval/59", "prompt": "\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):", "predict": "<s>\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    # Find the largest prime factor of n. Assume n > 1 and is not a prime.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ...,"}
{"ID": 60, "source": "HumanEval:HumanEval/60", "prompt": "\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):", "predict": "<s>\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\n\"\"\"sum_to_n_recursive is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive(30)\n465\n>>> sum_to_n_recursive(100)\n5050\n>>> sum_to_n_recursive(5)\n15\n>>> sum_to_n_recursive(10)\n55\n>>> sum_to_n_recursive(1)\n1\n\"\"\"\ndef sum_to_n_recursive(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive(n-1)\n\n\n\"\"\"sum_to_n_recursive_2 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_2(30)\n465\n>>> sum_to_n_recursive_2(100)\n5050\n>>> sum_to_n_recursive_2(5)\n15\n>>> sum_to_n_recursive_2(10)\n55\n>>> sum_to_n_recursive_2(1)\n1\n\"\"\"\ndef sum_to_n_recursive_2(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive_2(n-1)\n\n\n\"\"\"sum_to_n_recursive_3 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_3(30)\n465\n>>> sum_to_n_recursive_3(100)\n5050\n>>> sum_to_n_recursive_3(5)\n15\n>>> sum_to_n_recursive_3(10)\n55\n>>> sum_to_n_recursive_3(1)\n"}
{"ID": 61, "source": "HumanEval:HumanEval/61", "prompt": "\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<s>\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str"}
{"ID": 62, "source": "HumanEval:HumanEval/62", "prompt": "\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):", "predict": "<s>\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs"}
{"ID": 63, "source": "HumanEval:HumanEval/63", "prompt": "\n\n\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n\"\"\"\ndef fibfib(n: int):", "predict": "<s>\n\n\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n\"\"\"\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 64, "source": "HumanEval:HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\"\ndef vowels_count(s):", "predict": "<s>\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\"\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n\ndef test_function(test_case):\n    s = test_case[0]\n    solution = test_case[1]\n    output = vowels_count(s)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [\"abcde\", 2]\ntest_case_2 = [\"ACEDY\", 3]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\n</s>"}
{"ID": 65, "source": "HumanEval:HumanEval/65", "prompt": "\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):", "predict": "<s>\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n\n\"\"\"Return the number of digits in x.\n>>> num_digits(12)\n2\n>>> num_digits(1234)\n4\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the sum of the digits of x.\n>>> sum_digits(123)\n6\n>>> sum_digits(1234)\n10\n\"\"\"\ndef sum_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\n\"\"\"Return the number of digits in x that are even.\n>>> num_even_digits(123)\n1\n>>> num_even_digits(1234)\n2\n\"\"\"\ndef num_even_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 0)\n\n\n\"\"\"Return the number of digits in x that are odd.\n>>> num_odd_digits(123)\n2\n>>> num_odd_digits(1234)\n2\n\"\"\"\ndef num_odd_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 1)\n\n\n\"\"\"Return the number of digits in x that are prime.\n>>> num_prime_digits(123)\n2\n>>> num_prime_digits(1234)\n1\n\"\"\"\ndef num_prime_digits(x):\n    return sum(1 for digit in str(x) if is_prime(int(digit)))\n\n\n\"\"\"Return the number of digits in x that are composite.\n>>> num_composite_digits(123)\n1\n>>> num_composite_digits(1234)\n3\n\"\"\"\ndef num_composite_digits(x):\n    return sum(1 for digit"}
{"ID": 66, "source": "HumanEval:HumanEval/66", "prompt": "\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):", "predict": "<s>\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))\n</s>"}
{"ID": 67, "source": "HumanEval:HumanEval/67", "prompt": "\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):", "predict": "<s>\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[3])\n    return n - apples - oranges\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 68, "source": "HumanEval:HumanEval/68", "prompt": "\n\"\"\"\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n\"\"\"\ndef pluck(arr):", "predict": "<s>\n\"\"\"\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n\"\"\"\ndef pluck(arr):\n    if not arr:\n        return []\n    even_arr = [x for x in arr if x % 2 == 0]\n    if not even_arr:\n        return []\n    return [min(even_arr), arr.index(min(even_arr))]\n\n\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n</s>"}
{"ID": 69, "source": "HumanEval:HumanEval/69", "prompt": "\n\ndef search(lst):", "predict": "<s>\n\ndef search(lst):\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            return i\n    return -1\n\n\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        j = search(lst[:i])\n        if j != -1:\n            lst.insert(j, lst.pop(i))\n\n\nif __name__ == '__main__':\n    lst = [5, 4, 3, 2, 1]\n    insertion_sort(lst)\n    print(lst)\n</s>"}
{"ID": 70, "source": "HumanEval:HumanEval/70", "prompt": "\n\ndef strange_sort_list(lst):", "predict": "<s>\n\ndef strange_sort_list(lst):\n    \"\"\"\n    Sorts a list of integers using the strange sort algorithm.\n    :param lst: list of integers\n    :return: sorted list of integers\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n\n\ndef strange_sort_string(s):\n    \"\"\"\n    Sorts a string using the strange sort algorithm.\n    :param s: string\n    :return: sorted string\n    \"\"\"\n    return ''.join(strange_sort_list(list(s)))\n\n\ndef strange_sort_file(filename):\n    \"\"\"\n    Sorts a file using the strange sort algorithm.\n    :param filename: name of file\n    :return: sorted file\n    \"\"\"\n    with open(filename, 'r') as f:\n        s = f.read()\n    with open(filename, 'w') as f:\n        f.write(strange_sort_string(s))\n\n\nif __name__ == '__main__':\n    strange_sort_file('strange_sort.py')\n</s>"}
{"ID": 71, "source": "HumanEval:HumanEval/71", "prompt": "\n\ndef triangle_area(a, b, c):", "predict": "<s>\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_2d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_3d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_3d_vectorized(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float"}
{"ID": 72, "source": "HumanEval:HumanEval/72", "prompt": "\n\ndef will_it_fly(q,w):", "predict": "<s>\n\ndef will_it_fly(q,w):\n    if q == 0 and w == 0:\n        return \"Maybe\"\n    elif q == 0 and w != 0:\n        return \"No\"\n    elif q != 0 and w == 0:\n        return \"No\"\n    elif q > 0 and w > 0:\n        return \"Yes\"\n    elif q < 0 and w < 0:\n        return \"Yes\"\n    elif q > 0 and w < 0:\n        return \"No\"\n    elif q < 0 and w > 0:\n        return \"No\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 73, "source": "HumanEval:HumanEval/73", "prompt": "\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):", "predict": "<s>\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):\n    # Your code here\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:\n        return 28\n    if"}
{"ID": 74, "source": "HumanEval:HumanEval/74", "prompt": "\n\ndef total_match(lst1, lst2):", "predict": "<s>\n\ndef total_match(lst1, lst2):\n    \"\"\"\n    Checks if two lists are equal.\n    :param lst1: list 1\n    :param lst2: list 2\n    :return: True if lists are equal, False otherwise\n    \"\"\"\n    if len(lst1) != len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n\n\ndef partial_match(lst1, lst2):\n    \"\"\"\n    Checks if two lists are equal.\n    :param lst1: list 1\n    :param lst2: list 2\n    :return: True if lists are equal, False otherwise\n    \"\"\"\n    if len(lst1) > len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n\n\ndef get_matching_indices(lst1, lst2):\n    \"\"\"\n    Returns the indices of the elements of lst1 that are in lst2.\n    :param lst1: list 1\n    :param lst2: list 2\n    :return: list of indices\n    \"\"\"\n    indices = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            indices.append(i)\n    return indices\n\n\ndef get_matching_elements(lst1, lst2):\n    \"\"\"\n    Returns the elements of lst1 that are in lst2.\n    :param lst1: list 1\n    :param lst2: list 2\n    :return: list of elements\n    \"\"\"\n    elements = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            elements.append(lst1[i])\n    return elements\n\n\ndef get_matching_elements_with_indices(lst1, lst2):\n    \"\"\"\n    Returns the elements of lst1 that are in lst2.\n    :param lst1: list 1\n    :param lst2: list 2\n    :return: list of elements\n    \"\"\"\n    elements = []\n   "}
{"ID": 75, "source": "HumanEval:HumanEval/75", "prompt": "\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):", "predict": "<s>\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                if is_prime(i):\n                    for j in range(2, a):\n                        if a % j == 0:\n                            if is_prime(j):\n                                for k in range(2, a):\n                                    if a % k == 0:\n                                        if is_prime(k):\n                                            return True\n    return False\n\ndef is_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\nprint(is_multiply_prime(30))\nprint(is_multiply_prime(100))\nprint(is_multiply_prime(101))\nprint(is_multiply_prime(102))\nprint(is_multiply_prime(103))\nprint(is_multiply_prime(104))\nprint(is_multiply_prime(105))\nprint(is_multiply_prime(106))\nprint(is_multiply_prime(107))\nprint(is_multiply_prime(108))\nprint(is_multiply_prime(109))\nprint(is_multiply_prime(110))\nprint(is_multiply_prime(111))\nprint(is_multiply_prime(112))\nprint(is_multiply_prime(113))\nprint(is_multiply_prime(114))\nprint(is_multiply_prime(115))\nprint(is_multiply_prime(116))\nprint(is_multiply_prime(117))\nprint(is_multiply_prime(118))\nprint(is_multiply_prime(119))\nprint(is_multiply_prime(120))\nprint(is_multiply_prime(121))\nprint(is_multiply_prime(122))\nprint(is_multiply_"}
{"ID": 76, "source": "HumanEval:HumanEval/76", "prompt": "\n\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n\"\"\"\ndef is_simple_power(x, n):", "predict": "<s>\n\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n\"\"\"\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x < 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True\n\n\nif __name__ == '__main__':\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))\n</s>"}
{"ID": 77, "source": "HumanEval:HumanEval/77", "prompt": "\n\ndef iscube(a):", "predict": "<s>\n\ndef iscube(a):\n    \"\"\"\n    Check if array is a cube.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array to check.\n\n    Returns\n    -------\n    iscube : bool\n        Return True if the input array is a cube, False otherwise.\n\n    \"\"\"\n    a = np.asanyarray(a)\n    shape = a.shape\n    if len(shape) != 3:\n        return False\n    elif shape[0] == shape[1] == shape[2]:\n        return True\n    else:\n        return False\n\n\ndef is_power2(num):\n    \"\"\"\n    Check if a number is a power of 2.\n\n    Parameters\n    ----------\n    num : int\n        Input number to check.\n\n    Returns\n    -------\n    is_power2 : bool\n        Return True if the input number is a power of 2, False otherwise.\n\n    \"\"\"\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef is_iterable(obj):\n    \"\"\"\n    Check if an object is iterable.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_iterable : bool\n        Return True if the input object is iterable, False otherwise.\n\n    \"\"\"\n    try:\n        iter(obj)\n    except TypeError:\n        return False\n    else:\n        return True\n\n\ndef is_scalar(obj):\n    \"\"\"\n    Check if an object is a scalar.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_scalar : bool\n        Return True if the input object is a scalar, False otherwise.\n\n    \"\"\"\n    return np.isscalar(obj)\n\n\ndef is_integer(obj):\n    \"\"\"\n    Check if an object is an integer.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_integer : bool\n        Return True if the input object is an integer"}
{"ID": 78, "source": "HumanEval:HumanEval/78", "prompt": "\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):", "predict": "<s>\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):\n    count = 0\n    for i in num:\n        if i in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count\n\n\ndef hex_key(num):\n    return sum(i in ['2', '3', '5', '7', 'B', 'D'] for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2"}
{"ID": 79, "source": "HumanEval:HumanEval/79", "prompt": "\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):", "predict": "<s>\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\"\"\"You will be given a number in binary form and your task is to convert it to\ndecimal format. The function should return an integer.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nbinary_to_decimal(\"db1111db\")   # returns 15\nbinary_to_decimal(\"db100000db\") # returns 32\n\"\"\"\ndef binary_to_decimal(binary):\n    return int(binary[2:-2], 2)\n\n\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nhexadecimal format. The function should return a string, with each character representing a hexadecimal\nnumber. Each character in the string will be '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_hexadecimal(15)   # returns \"hx0fhx\"\ndecimal_to_hexadecimal(32)   # returns \"hx20hx\"\n\"\"\"\ndef decimal_to_hexadecimal(decimal):\n    return \"hx\" + hex(decimal)[2:] + \"hx\"\n\n\n\"\"\"You will be given a number in hexadecimal form and your task is to convert it to\ndecimal format. The function should return an integer.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nhexadecimal_to_decimal(\"hx0fhx\")   # returns 15\nhexadecimal_to_decimal(\"hx"}
{"ID": 80, "source": "HumanEval:HumanEval/80", "prompt": "\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):", "predict": "<s>\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n</s>"}
{"ID": 81, "source": "HumanEval:HumanEval/81", "prompt": "\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):", "predict": "<s>\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):\n  # Your code here\n  return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 82, "source": "HumanEval:HumanEval/82", "prompt": "\n\"\"\"Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\"\"\"\ndef prime_length(string):", "predict": "<s>\n\"\"\"Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\"\"\"\ndef prime_length(string):\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\n</s>"}
{"ID": 83, "source": "HumanEval:HumanEval/83", "prompt": "\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):", "predict": "<s>\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n"}
{"ID": 84, "source": "HumanEval:HumanEval/84", "prompt": "\n\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n\"\"\"\ndef solve(N):", "predict": "<s>\n\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n\"\"\"\ndef solve(N):\n    # your code here\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\nif __name__ == '__main__':\n    print(solve(int(input())))\n</s>"}
{"ID": 85, "source": "HumanEval:HumanEval/85", "prompt": "\n\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 \n\"\"\"\ndef add(lst):", "predict": "<s>\n\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 \n\"\"\"\ndef add(lst):\n    # your code here\n    return sum(lst[1::2])\n\n\nif __name__ == \"__main__\":\n    print(add([4, 2, 6, 7]))\n</s>"}
{"ID": 86, "source": "HumanEval:HumanEval/86", "prompt": "\n\"\"\"\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\"\"\"\ndef anti_shuffle(s):", "predict": "<s>\n\"\"\"\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\"\"\"\ndef anti_shuffle(s):\n    return ' '.join(sorted(word, key=lambda x: ord(x)) for word in s.split())\n\n\nif __name__ == '__main__':\n    print(anti_shuffle('Hi'))\n    print(anti_shuffle('hello'))\n    print(anti_shuffle('Hello World!!!'))\n</s>"}
{"ID": 87, "source": "HumanEval:HumanEval/87", "prompt": "\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\"\"\"\ndef get_row(lst, x):", "predict": "<s>\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\"\"\"\ndef get_row(lst, x):\n    # your code here\n    pass\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n</s>"}
{"ID": 88, "source": "HumanEval:HumanEval/88", "prompt": "\n\"\"\"\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\"\"\"\ndef sort_array(array):", "predict": "<s>\n\"\"\"\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\"\"\"\ndef sort_array(array):\n    if len(array) <= 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\n\nif __name__ == '__main__':\n    print(sort_array([]))\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n</s>"}
{"ID": 89, "source": "HumanEval:HumanEval/89", "prompt": "\n\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n\"\"\"\ndef encrypt(s):", "predict": "<s>\n\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n\"\"\"\ndef encrypt(s):\n  # your code here\n  return s\n\n# testing\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))</s>"}
{"ID": 90, "source": "HumanEval:HumanEval/90", "prompt": "\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):", "predict": "<s>\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n</s>"}
{"ID": 91, "source": "HumanEval:HumanEval/91", "prompt": "\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):", "predict": "<s>\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):\n    return S.count(\"I\")\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 92, "source": "HumanEval:HumanEval/92", "prompt": "\n\ndef any_int(x, y, z):", "predict": "<s>\n\ndef any_int(x, y, z):\n    \"\"\"Returns the first integer in the list of arguments.\n\n    >>> any_int(1, 2, 3)\n    1\n    >>> any_int(2.5, 3.5, 4.5)\n    2\n    >>> any_int(True, False, 1)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n"}
{"ID": 93, "source": "HumanEval:HumanEval/93", "prompt": "\n\"\"\"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\"\"\"\ndef encode(message):", "predict": "<s>\n\"\"\"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\"\"\"\ndef encode(message):\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded += vowels[(vowels.index(char.lower()) + 2) % 5].upper()\n        else:\n            encoded += char.swapcase()\n    return encoded\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 94, "source": "HumanEval:HumanEval/94", "prompt": "\n\n\"\"\"You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n\"\"\"\ndef skjkasdkd(lst):", "predict": "<s>\n\n\"\"\"You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n\"\"\"\ndef skjkasdkd(lst):\n    # your code here\n    pass\n</s>"}
{"ID": 95, "source": "HumanEval:HumanEval/95", "prompt": "\n\"\"\"\nGiven a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\"\"\"\ndef check_dict_case(dict):", "predict": "<s>\n\"\"\"\nGiven a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\"\"\"\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n                return True\n            else:\n                return False\n\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n</s>"}
{"ID": 96, "source": "HumanEval:HumanEval/96", "prompt": "\n\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n\"\"\"\ndef count_up_to(n):", "predict": "<s>\n\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n\"\"\"\ndef count_up_to(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        prime_list = []\n        for i in range(2, n):\n            if i % 2 != 0:\n                prime_list.append(i)\n        return prime_list\n\n\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n</s>"}
{"ID": 97, "source": "HumanEval:HumanEval/97", "prompt": "\n\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):", "predict": "<s>\n\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):\n\t# your code here\n\treturn (a%10)*(b%10)\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))</s>"}
{"ID": 98, "source": "HumanEval:HumanEval/98", "prompt": "\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):", "predict": "<s>\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):\n  # Your code here\n  count = 0\n  for i in range(len(s)):\n    if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"code\" appears in the string s.\n\nFor example:\ncount_code('aaacodebbb') returns 1\ncount_code('codexxcode') returns 2\ncount_code('cozexxcope') returns 2\n\"\"\"\ndef count_code(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'code':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s.\n\nFor example:\ncount_hi('abc hi ho') returns 1\ncount_hi('ABChi hi') returns 2\ncount_hi('hihi') returns 2\n\"\"\"\ndef count_hi(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 1):\n    if s[i:i+2] == 'hi':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s, but the each \"hi\" is separated by a number of characters that is divisible by 3.\n\nFor example:\ncount_hi3('abc hi ho') returns 1\ncount_hi3('ABChi hi') returns 0\ncount_hi3('hihi') returns 0\ncount_hi3('hihihihi') returns 1\ncount_hi3('hihihihihihi') returns 2\n\"\"\"\ndef count_hi3(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 1):\n    if s[i:i+2] == 'hi' and ("}
{"ID": 99, "source": "HumanEval:HumanEval/99", "prompt": "\n\ndef closest_integer(value):", "predict": "<s>\n\ndef closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n\n    :param value: The value to round.\n    :return: The closest integer to the given value.\n    \"\"\"\n    return int(round(value))\n\n\ndef closest_odd_integer(value):\n    \"\"\"\n    Returns the closest odd integer to the given value.\n\n    :param value: The value to round.\n    :return: The closest odd integer to the given value.\n    \"\"\"\n    return closest_integer(value) + 1 if closest_integer(value) % 2 == 0 else closest_integer(value)\n\n\ndef closest_even_integer(value):\n    \"\"\"\n    Returns the closest even integer to the given value.\n\n    :param value: The value to round.\n    :return: The closest even integer to the given value.\n    \"\"\"\n    return closest_integer(value) if closest_integer(value) % 2 == 0 else closest_integer(value) - 1\n\n\ndef closest_odd_integer_multiple(value, multiple):\n    \"\"\"\n    Returns the closest odd integer multiple to the given value.\n\n    :param value: The value to round.\n    :param multiple: The multiple to round to.\n    :return: The closest odd integer multiple to the given value.\n    \"\"\"\n    return closest_odd_integer(value / multiple) * multiple\n\n\ndef closest_even_integer_multiple(value, multiple):\n    \"\"\"\n    Returns the closest even integer multiple to the given value.\n\n    :param value: The value to round.\n    :param multiple: The multiple to round to.\n    :return: The closest even integer multiple to the given value.\n    \"\"\"\n    return closest_even_integer(value / multiple) * multiple\n\n\ndef closest_integer_multiple(value, multiple):\n    \"\"\"\n    Returns the closest integer multiple to the given value.\n\n    :param value: The value to round.\n    :param multiple: The multiple to round to.\n    :return: The closest integer multiple to the given value.\n    \"\"\"\n    return closest_integer(value / multiple) * multiple\n\n\ndef closest_odd_integer_multiple_with_offset(value, multiple, offset):\n   "}
{"ID": 100, "source": "HumanEval:HumanEval/100", "prompt": "\n\"\"\"\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n\"\"\"\ndef make_a_pile(n):", "predict": "<s>\n\"\"\"\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n\"\"\"\ndef make_a_pile(n):\n    # Your code here\n    pass\n\n\nif __name__ == '__main__':\n    print(make_a_pile(3))\n</s>"}
{"ID": 101, "source": "HumanEval:HumanEval/101", "prompt": "\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):", "predict": "<s>\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")"}
{"ID": 102, "source": "HumanEval:HumanEval/102", "prompt": "\n\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n\"\"\"\ndef choose_num(x, y):", "predict": "<s>\n\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n\"\"\"\ndef choose_num(x, y):\n  # your code here\n  if x % 2 == 0:\n    return x\n  elif y % 2 == 0:\n    return y\n  else:\n    return -1\n\n\nprint(choose_num(12, 15))\n# 14\n\nprint(choose_num(13, 12))\n# -1\n\nprint(choose_num(13, 14))\n# -1\n\nprint(choose_num(14, 15))\n# 14\n\nprint(choose_num(15, 16))\n# 16\n\nprint(choose_num(16, 17))\n# -1\n</s>"}
{"ID": 103, "source": "HumanEval:HumanEval/103", "prompt": "\n\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n\"\"\"\ndef rounded_avg(n, m):", "predict": "<s>\n\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n\"\"\"\ndef rounded_avg(n, m):\n  if n > m:\n    return -1\n  else:\n    return bin(round((m+n)/2))[2:]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))</s>"}
{"ID": 104, "source": "HumanEval:HumanEval/104", "prompt": "\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\ndef unique_digits(x):", "predict": "<s>\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\ndef unique_digits(x):\n    return [i for i in sorted(x) if not any(int(j) % 2 == 0 for j in str(i))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 105, "source": "HumanEval:HumanEval/105", "prompt": "\n\"\"\"\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']\n\"\"\"\ndef by_length(arr):", "predict": "<s>\n\"\"\"\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']\n\"\"\"\ndef by_length(arr):\n    return sorted(arr, key=len)\n\ndef sort_array(arr):\n    return sorted(arr)\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef replace_digits(arr):\n    return [\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    ][i-1] if i in range(1, 10) else i for i in arr\n\ndef sort_numbers(arr):\n    return replace_digits(reverse_array(sort_array(arr)))\n\ndef main():\n    print(sort_numbers([2, 1, 1, 4, 5, 8, 2, 3]))\n    print(sort_numbers([]))\n    print(sort_numbers([1, -1 , 55]))\n\nif __name__ == '__main__':\n    main()\n</s>"}
{"ID": 106, "source": "HumanEval:HumanEval/106", "prompt": "\n\"\"\" Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\"\"\"\ndef f(n):", "predict": "<s>\n\"\"\" Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\"\"\"\ndef f(n):\n    # your code here\n    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(f(5))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert f(5) == [1, 2, 6, 24, 15]\n    assert f(1) == [1]\n    assert f(8) == [1, 2, 6, 24, 120, 720, 5040, 40320]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n</s>"}
{"ID": 107, "source": "HumanEval:HumanEval/107", "prompt": "\n\"\"\"\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n\"\"\"\ndef even_odd_palindrome(n):", "predict": "<s>\n\"\"\"\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n\"\"\"\ndef even_odd_palindrome(n):\n    # TODO: write your code here\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\ndef is_palindrome(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 10 == 0:\n        return False\n    rev = 0\n    while n > rev:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return n == rev or n == rev // 10\n</s>"}
{"ID": 108, "source": "HumanEval:HumanEval/108", "prompt": "\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):", "predict": "<s>\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if sum(int(j) for j in str(i)) > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 109, "source": "HumanEval:HumanEval/109", "prompt": "\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):", "predict": "<s>\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):\n    \"\"\"\n    :param: arr - input array\n    return - True if it is possible to get non-decreasing order by performing\n             right shift operations else return False\n    \"\"\"\n    #Your code goes here\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return False\n        else:\n            return True\n    if arr[0] > arr[1]:\n        return False\n    else:\n        return move_one_ball(arr[1:])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 110, "source": "HumanEval:HumanEval/110", "prompt": "\n\"\"\"In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\"\"\"\ndef exchange(lst1, lst2):", "predict": "<s>\n\"\"\"In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\"\"\"\ndef exchange(lst1, lst2):\n  # Your code here\n  pass\n\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4, 6]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4, 6, 7]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4, 6, 7, 8]))\n</s>"}
{"ID": 111, "source": "HumanEval:HumanEval/111", "prompt": "\n\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n\"\"\"\ndef histogram(test):", "predict": "<s>\n\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n\"\"\"\ndef histogram(test):\n    # your code here\n    pass\n\nif __name__ == '__main__':\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('a b c a b'))\n    print(histogram('b b b b a'))\n    print(histogram(''))\n</s>"}
{"ID": 112, "source": "HumanEval:HumanEval/112", "prompt": "\n\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"\ndef reverse_delete(s,c):", "predict": "<s>\n\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"\ndef reverse_delete(s,c):\n    # your code here\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(reverse_delete(\"abcde\", \"ae\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)\n    assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)\n    assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n</s>"}
{"ID": 113, "source": "HumanEval:HumanEval/113", "prompt": "\n\"\"\"Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\ndef odd_count(lst):", "predict": "<s>\n\"\"\"Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\ndef odd_count(lst):\n    return [\"the number of odd elements %sn the str%sng %s of the %sinput.\" % (len([i for i in s if int(i) % 2 != 0]),\n                                                                               len([i for i in s if int(i) % 2 != 0]),\n                                                                               len([i for i in s if int(i) % 2 != 0]),\n                                                                               len([i for i in s if int(i) % 2 != 0])) for s in lst]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 114, "source": "HumanEval:HumanEval/114", "prompt": "\n\"\"\"\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n\"\"\"\ndef minSubArraySum(nums):", "predict": "<s>\n\"\"\"\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n\"\"\"\ndef minSubArraySum(nums):\n    # Your code here\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))\n</s>"}
{"ID": 115, "source": "HumanEval:HumanEval/115", "prompt": "\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):", "predict": "<s>\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):\n    \"\"\"\n    Time: O(n*m)\n    Space: O(n*m)\n    \"\"\"\n    n, m = len(grid), len(grid[0])\n    water = [[0 for _ in range(m)] for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                water[i][j] = 1\n                count += 1\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i+1, n):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j+1, m):\n                    if water[i][k] == 0:\n                        water[i][k] = 1\n                        count += 1\n                    else:\n                        break\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i-1, -1, -1):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j-1, -1, -1):\n                    if water[i][k] == 0:\n                        water[i][k] = 1\n                        count += 1\n                    else:\n                        break\n\n    return count\n\n\nif __name__ == \"__main__\":\n    grid = [[0,0,1,0], [0,1,0,0"}
{"ID": 116, "source": "HumanEval:HumanEval/116", "prompt": "\n\"\"\"\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\"\"\"\ndef sort_array(arr):", "predict": "<s>\n\"\"\"\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\"\"\"\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n</s>"}
{"ID": 117, "source": "HumanEval:HumanEval/117", "prompt": "\n\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\"\"\"\ndef select_words(s, n):", "predict": "<s>\n\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\"\"\"\ndef select_words(s, n):\n    # your code here\n    words = s.split()\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(select_words(\"Mary had a little lamb\", 4))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n</s>"}
{"ID": 118, "source": "HumanEval:HumanEval/118", "prompt": "\n\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_vowel(word):", "predict": "<s>\n\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))\n</s>"}
{"ID": 119, "source": "HumanEval:HumanEval/119", "prompt": "\n\ndef match_parens(lst):", "predict": "<s>\n\ndef match_parens(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    result = []\n    for s in lst:\n        if len(s) == 1:\n            result.append(s)\n        elif len(s) == 2:\n            if s[0] == '(' and s[1] == ')':\n                result.append(s)\n        else:\n            if s[0] == '(' and s[-1] == ')':\n                result.append(s)\n    return result\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    result = []\n    for s in lst:\n        if re.match(r'^[()]$', s):\n            result.append(s)\n        elif re.match(r'^\\([^()]*\\)$', s):\n            result.append(s)\n    return result\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re2(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    return [s for s in lst if re.match(r'^[()]$|^(\\([^()]*\\))$', s)]\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re3(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where"}
{"ID": 120, "source": "HumanEval:HumanEval/120", "prompt": "\n\"\"\"\nGiven an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n\"\"\"\ndef maximum(arr, k):", "predict": "<s>\n\"\"\"\nGiven an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n\"\"\"\ndef maximum(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    return sorted(arr)[-k:]\n\n\nimport heapq\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    return heapq.nlargest(k, arr)\n</s>"}
{"ID": 121, "source": "HumanEval:HumanEval/121", "prompt": "\n\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n\"\"\"\ndef solution(lst):", "predict": "<s>\n\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n\"\"\"\ndef solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n</s>"}
{"ID": 122, "source": "HumanEval:HumanEval/122", "prompt": "\n\"\"\"\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n\"\"\"\ndef add_elements(arr, k):", "predict": "<s>\n\"\"\"\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n\"\"\"\ndef add_elements(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum\n\nif __name__ == \"__main__\":\n    print(add_elements([111,21,3,4000,5,6,7,8,9], 4))\n</s>"}
{"ID": 123, "source": "HumanEval:HumanEval/123", "prompt": "\n\"\"\"\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\"\"\"\ndef get_odd_collatz(n):", "predict": "<s>\n\"\"\"\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\"\"\"\ndef get_odd_collatz(n):\n    # Fill this in.\n\nprint get_odd_collatz(5)\n# [1, 5]\n</s>"}
{"ID": 124, "source": "HumanEval:HumanEval/124", "prompt": "\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):", "predict": "<s>\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):\n    if date == \"\":\n        return False\n    if date.count(\"-\") != 2:\n        return False\n    if date.count(\"-\") == 2:\n        month, day, year = date.split(\"-\")\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(year) < 1:\n            return False\n        if int(month) == 2:\n            if int(day) > 29:\n                return False\n        if int(month) in [1,3,5,7,8,10,12]:\n            if int(day) > 31:\n                return False\n        if int(month) in [4,6,9,11]:\n            if int(day) > 30:\n                return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 125, "source": "HumanEval:HumanEval/125", "prompt": "\n\ndef split_words(txt):", "predict": "<s>\n\ndef split_words(txt):\n    return txt.split()\n\n\ndef count_words(words):\n    return len(words)\n\n\ndef count_words_in_file(filename):\n    with open(filename, 'r') as f:\n        txt = f.read()\n        words = split_words(txt)\n        return count_words(words)\n\n\ndef main():\n    filename = 'alice.txt'\n    count = count_words_in_file(filename)\n    print(f'{filename} has about {count} words.')\n\n\nif __name__ == '__main__':\n    main()\n</s>"}
{"ID": 126, "source": "HumanEval:HumanEval/126", "prompt": "\n\ndef is_sorted(lst):", "predict": "<s>\n\ndef is_sorted(lst):\n    \"\"\"\n    Checks if a list is sorted.\n\n    :param lst: The list to check.\n    :return: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\ndef bubble_sort(lst):\n    \"\"\"\n    Sorts a list using the bubble sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - 1 - i):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\n\ndef selection_sort(lst):\n    \"\"\"\n    Sorts a list using the selection sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        min_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n\n\ndef insertion_sort(lst):\n    \"\"\"\n    Sorts a list using the insertion sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(1, len(lst)):\n        j = i\n        while j > 0 and lst[j - 1] > lst[j]:\n            lst[j - 1], lst[j] = lst[j], lst[j - 1]\n            j -= 1\n    return lst\n\n\ndef merge_sort(lst):\n    \"\"\"\n    Sorts a list using the merge sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list"}
{"ID": 127, "source": "HumanEval:HumanEval/127", "prompt": "\n\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\"\"\"\ndef intersection(interval1, interval2):", "predict": "<s>\n\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\"\"\"\ndef intersection(interval1, interval2):\n    # your code here\n    pass\n\n\nif __name__ == '__main__':\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n</s>"}
{"ID": 128, "source": "HumanEval:HumanEval/128", "prompt": "\n\"\"\"\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n\"\"\"\ndef prod_signs(arr):", "predict": "<s>\n\"\"\"\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n\"\"\"\ndef prod_signs(arr):\n    # your code here\n    if len(arr) == 0:\n        return None\n    else:\n        return sum(abs(x) for x in arr) * (-1)**(sum(x < 0 for x in arr))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 129, "source": "HumanEval:HumanEval/129", "prompt": "\n\"\"\"\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]\n\"\"\"\ndef minPath(grid, k):", "predict": "<s>\n\"\"\"\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]\n\"\"\"\ndef minPath(grid, k):\n    # TODO: Write your code here\n    pass\n\n\n# These are the tests we use to determine if the solution is correct.\n# You can add your own at the bottom, but they are otherwise not editable!\n\ndef printIntegerList(array):\n    size = len(array)\n    print('[', end='')\n    for i in range(size):\n        if i != 0:\n            print(', ', end='')\n        print(array[i], end='')\n    print(']', end='')\n\n\ntest_case_number = 1\n\ndef check(expected, output):\n    global test_case_number\n    expected_size = len(expected)\n    output_size = len(output)\n    result = True\n    if expected_size != output_size:\n        result = False\n    for i in range(min(expected_size, output_size)):\n        result &= (output[i] == expected[i])\n    rightTick = '\\u2713'\n    wrongTick = '\\u2717'\n    if result:\n        print(rightTick, 'Test #', test_case_number, sep='')\n    else:\n        print(wrongTick, 'Test #', test_case_number, ': Expected ', sep='', end='')\n        printIntegerList(expected)\n        print(' Your output: ', end='')\n        printIntegerList(output)\n        print()\n    test_case_number += 1\n\nif __name__ == \"__main__\":\n    grid_1 = [[1,2,3], [4,5,6], [7,8,9]]\n    k_1 = 3\n    expected_1 = [1, 2, 1]\n    output_1 = minPath(grid_1, k_1)\n    check(expected_1, output_1)\n\n    grid_2 = [[5,9,3], [4,1,6], [7,8,2]]\n    k_2 = 1\n    expected_2 = [1]\n    output_2 = minPath(grid_2, k_2)\n    check(expected_2, output_2)"}
{"ID": 130, "source": "HumanEval:HumanEval/130", "prompt": "\n\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n\"\"\"\ndef tri(n):", "predict": "<s>\n\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n\"\"\"\ndef tri(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        a = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                a.append(1 + i / 2)\n            else:\n                a.append(a[i - 1] + a[i - 2] + a[i + 1])\n        return a\n\n\nif __name__ == '__main__':\n    print(tri(3))\n</s>"}
{"ID": 131, "source": "HumanEval:HumanEval/131", "prompt": "\n\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n\"\"\"\ndef digits(n):", "predict": "<s>\n\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n\"\"\"\ndef digits(n):\n    # Your code here\n    result = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            result *= int(i)\n    return result\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123456789) == 721\n    assert digits(1000000000000000000) == 0\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n</s>"}
{"ID": 132, "source": "HumanEval:HumanEval/132", "prompt": "\n\ndef is_nested(string):", "predict": "<s>\n\ndef is_nested(string):\n    \"\"\"\n    Checks if a string is nested.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is nested, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    return string.count(\"(\") == string.count(\")\")\n\n\ndef is_valid(string):\n    \"\"\"\n    Checks if a string is valid.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is valid, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_nested(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_balanced(string):\n    \"\"\"\n    Checks if a string is balanced.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is balanced, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_valid(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_complete(string):\n    \"\"\"\n    Checks if a string is complete.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is complete, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_balanced(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            stack.pop()\n\n    return len(stack) == 0"}
{"ID": 133, "source": "HumanEval:HumanEval/133", "prompt": "\n\n\"\"\"You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n\"\"\"\ndef sum_squares(lst):", "predict": "<s>\n\n\"\"\"You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n\"\"\"\ndef sum_squares(lst):\n    return sum(map(lambda x: int(x) ** 2, lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))\n</s>"}
{"ID": 134, "source": "HumanEval:HumanEval/134", "prompt": "\n\ndef check_if_last_char_is_a_letter(txt):", "predict": "<s>\n\ndef check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_digit(txt):\n    if txt[-1].isdigit():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_punctuation(txt):\n    if txt[-1] in string.punctuation:\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_space(txt):\n    if txt[-1] == \" \":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_newline(txt):\n    if txt[-1] == \"\\n\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_tab(txt):\n    if txt[-1] == \"\\t\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_whitespace(txt):\n    if txt[-1].isspace():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_lowercase(txt):\n    if txt[-1].islower():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_uppercase(txt):\n    if txt[-1].isupper():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_special_char(txt):\n    if txt[-1] in string.punctuation or txt[-1] in string.digits or txt[-1] in string.ascii_letters:\n        return False\n    else:\n        return True\n\n\ndef check_if_last_char_is_a_printable_char(txt):\n    if txt[-1] in string.printable:\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_hex_char"}
{"ID": 135, "source": "HumanEval:HumanEval/135", "prompt": "\n\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n\"\"\"\ndef can_arrange(arr):", "predict": "<s>\n\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n\"\"\"\ndef can_arrange(arr):\n    # Your code here\n    pass\n\nif __name__ == \"__main__\":\n    print(\"Can arrange: {}\".format(can_arrange([1,2,4,3,5])))\n    print(\"Can arrange: {}\".format(can_arrange([1,2,3])))\n</s>"}
{"ID": 136, "source": "HumanEval:HumanEval/136", "prompt": "\n\ndef largest_smallest_integers(lst):", "predict": "<s>\n\ndef largest_smallest_integers(lst):\n    \"\"\"Returns the largest and smallest integers in a list.\n\n    >>> largest_smallest_integers([1, 2, 3, 4, 5])\n    (5, 1)\n    >>> largest_smallest_integers([5, 4, 3, 2, 1])\n    (5, 1)\n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    (9, 1)\n    >>> largest_smallest_integers([9, 8, 7, 6, 5, 4, 3, 2, 1])\n    (9, 1)\n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    (10, 1)\n    >>> largest_smallest_integers([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    (10, 1)\n    >>> largest_smallest_integers([])\n    Traceback (most recent call last):\n        ...\n    ValueError: largest_smallest_integers() arg is an empty sequence\n    \"\"\"\n    if len(lst) == 0:\n        raise ValueError(\"largest_smallest_integers() arg is an empty sequence\")\n    else:\n        return max(lst), min(lst)\n\n\ndef largest_smallest_integers_2(lst):\n    \"\"\"Returns the largest and smallest integers in a list.\n\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5])\n    (5, 1)\n    >>> largest_smallest_integers_2([5, 4, 3, 2, 1])\n    (5, 1)\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    (9, 1)\n"}
{"ID": 137, "source": "HumanEval:HumanEval/137", "prompt": "\n\"\"\"\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ None\n\"\"\"\ndef compare_one(a, b):", "predict": "<s>\n\"\"\"\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ None\n\"\"\"\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\n\ncompare_one(1, 2.5) #➞ 2.5\ncompare_one(1, \"2,3\") #➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") #➞ \"6\"\ncompare_one(\"1\", 1) #➞ None</s>"}
{"ID": 138, "source": "HumanEval:HumanEval/138", "prompt": "\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):", "predict": "<s>\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j % 2 == 0:\n                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j % 2 == 0:\n                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j"}
{"ID": 139, "source": "HumanEval:HumanEval/139", "prompt": "\n\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n\"\"\"\ndef special_factorial(n):", "predict": "<s>\n\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n\"\"\"\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\nif __name__ == \"__main__\":\n    print(special_factorial(4))\n</s>"}
{"ID": 140, "source": "HumanEval:HumanEval/140", "prompt": "\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):", "predict": "<s>\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):\n    return text.replace(\" \",\"_\")\n\n\n\"\"\"\nGiven a string text, return a new string with the reversed order of characters.\n\nreverse(\"Example\") == \"elpmaxE\"\nreverse(\"12345\") == \"54321\"\nreverse(\"\") == \"\"\n\"\"\"\ndef reverse(text):\n    return text[::-1]\n\n\n\"\"\"\nGiven a string text, return a new string with the reversed order of words.\n\nreverse_words(\"Example\") == \"elpmaxE\"\nreverse_words(\"12345\") == \"54321\"\nreverse_words(\"\") == \"\"\n\"\"\"\ndef reverse_words(text):\n    return \" \".join(text.split(\" \")[::-1])\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") =="}
{"ID": 141, "source": "HumanEval:HumanEval/141", "prompt": "\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):", "predict": "<s>\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):\n    # your code here\n    if len(file_name) == 0:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0].count('0') > 3:\n            return 'No'\n    return 'Yes'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 142, "source": "HumanEval:HumanEval/142", "prompt": "\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):", "predict": "<s>\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 143, "source": "HumanEval:HumanEval/143", "prompt": "\n\"\"\"\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n\"\"\"\ndef words_in_sentence(sentence):", "predict": "<s>\n\"\"\"\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n\"\"\"\ndef words_in_sentence(sentence):\n    # Your code here\n\n\nif __name__ == '__main__':\n    print(words_in_sentence(\"This is a test\"))\n    print(words_in_sentence(\"lets go for swimming\"))\n</s>"}
{"ID": 144, "source": "HumanEval:HumanEval/144", "prompt": "\n\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n\"\"\"\ndef simplify(x, n):", "predict": "<s>\n\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n\"\"\"\ndef simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if (x_num * n_den) % (x_den * n_num) == 0:\n        return True\n    else:\n        return False\n\n\nprint(simplify(\"1/5\", \"5/1\"))\nprint(simplify(\"1/6\", \"2/1\"))\nprint(simplify(\"7/10\", \"10/2\"))\n</s>"}
{"ID": 145, "source": "HumanEval:HumanEval/145", "prompt": "\n\"\"\"\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n\"\"\"\ndef order_by_points(nums):", "predict": "<s>\n\"\"\"\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n\"\"\"\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</s>"}
{"ID": 146, "source": "HumanEval:HumanEval/146", "prompt": "\n\"\"\"Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\"\"\"\ndef specialFilter(nums):", "predict": "<s>\n\"\"\"Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\"\"\"\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))</s>"}
{"ID": 147, "source": "HumanEval:HumanEval/147", "prompt": "\n\"\"\"\nYou are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n\"\"\"\ndef get_max_triples(n):", "predict": "<s>\n\"\"\"\nYou are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n\"\"\"\ndef get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))\n</s>"}
{"ID": 148, "source": "HumanEval:HumanEval/148", "prompt": "\n\ndef bf(planet1, planet2):", "predict": "<s>\n\ndef bf(planet1, planet2):\n    return planet1.distance_to(planet2)\n\n\ndef bf_with_planet_name(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name\n\n\ndef bf_with_planet_name_and_distance(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2)\n\n\ndef bf_with_planet_name_and_distance_and_planet_type(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size_and_planet_color(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size, planet1.color, planet2.color\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size_and_planet_color_and_planet_age(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size, planet1.color, planet2"}
{"ID": 149, "source": "HumanEval:HumanEval/149", "prompt": "\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):", "predict": "<s>\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):\n    return sorted(lst, key=len)\n\n\ndef list_sort(lst):\n    return sorted(lst, key=len)\n\n\ndef list_sort_2(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_3(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_4(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_5(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_6(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_7(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_8(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_9(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_10(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_11(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_12(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_13(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_14(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_15(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_16(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_17(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_18(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_19(lst"}
{"ID": 150, "source": "HumanEval:HumanEval/150", "prompt": "\n\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n\"\"\"\ndef x_or_y(n, x, y):", "predict": "<s>\n\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n\"\"\"\ndef x_or_y(n, x, y):\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y\n\n\nif __name__ == '__main__':\n    print(x_or_y(7, 34, 12))\n    print(x_or_y(15, 8, 5))\n</s>"}
{"ID": 151, "source": "HumanEval:HumanEval/151", "prompt": "\n\ndef double_the_difference(lst):", "predict": "<s>\n\ndef double_the_difference(lst):\n    \"\"\"\n    Given a list of integers, return the sum of the absolute value of the\n    difference between each pair of integers.\n\n    >>> double_the_difference([1, 2, 3, 4])\n    4\n    >>> double_the_difference([1, 2, 3, 4, 5])\n    8\n    >>> double_the_difference([1, 2, 3, 4, 5, 6])\n    12\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7])\n    16\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8])\n    20\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    24\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    28\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    32\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    36\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    40\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    44\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7"}
{"ID": 152, "source": "HumanEval:HumanEval/152", "prompt": "\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):", "predict": "<s>\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 153, "source": "HumanEval:HumanEval/153", "prompt": "\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):", "predict": "<s>\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):\n    # your code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB']) == 'my_class.bB'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc']) == 'my_class.cc'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee']) == 'my_class.ee'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF']) == 'my_class.FF'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF', 'gg']) == 'my_class.gg'\n    assert Strongest_"}
{"ID": 154, "source": "HumanEval:HumanEval/154", "prompt": "\n\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n\"\"\"\ndef cycpattern_check(a , b):", "predict": "<s>\n\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n\"\"\"\ndef cycpattern_check(a , b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n        elif a[i:i+len(b)] == b[::-1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(cycpattern_check(\"abcd\",\"abd\"))\n    print(cycpattern_check(\"hello\",\"ell\"))\n    print(cycpattern_check(\"whassup\",\"psus\"))\n    print(cycpattern_check(\"abab\",\"baa\"))\n    print(cycpattern_check(\"efef\",\"eeff\"))\n    print(cycpattern_check(\"himenss\",\"simen\"))\n</s>"}
{"ID": 155, "source": "HumanEval:HumanEval/155", "prompt": "\n\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> (1, 1)\n    even_odd_count(123) ==> (1, 2)\n\"\"\"\ndef even_odd_count(num):", "predict": "<s>\n\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> (1, 1)\n    even_odd_count(123) ==> (1, 2)\n\"\"\"\ndef even_odd_count(num):\n    even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n</s>"}
{"ID": 156, "source": "HumanEval:HumanEval/156", "prompt": "\n\"\"\"\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n\"\"\"\ndef int_to_mini_roman(number):", "predict": "<s>\n\"\"\"\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n\"\"\"\ndef int_to_mini_roman(number):\n    # Your code here\n    pass\n</s>"}
{"ID": 157, "source": "HumanEval:HumanEval/157", "prompt": "\n\ndef right_angle_triangle(a, b, c):", "predict": "<s>\n\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    Checks if the given sides form a right angle triangle.\n    :param a: Side a\n    :param b: Side b\n    :param c: Side c\n    :return: True if the sides form a right angle triangle, False otherwise\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef pythagorean_triplet(a, b, c):\n    \"\"\"\n    Checks if the given sides form a pythagorean triplet.\n    :param a: Side a\n    :param b: Side b\n    :param c: Side c\n    :return: True if the sides form a pythagorean triplet, False otherwise\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 and a < b < c\n\n\ndef primitive_pythagorean_triplet(a, b, c):\n    \"\"\"\n    Checks if the given sides form a primitive pythagorean triplet.\n    :param a: Side a\n    :param b: Side b\n    :param c: Side c\n    :return: True if the sides form a primitive pythagorean triplet, False otherwise\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 and a < b < c and gcd(a, b, c) == 1\n\n\ndef gcd(a, b, c):\n    \"\"\"\n    Calculates the greatest common divisor of the given numbers.\n    :param a: Number a\n    :param b: Number b\n    :param c: Number c\n    :return: The greatest common divisor of the given numbers\n    \"\"\"\n    return reduce(lambda x, y: gcd(x, y), [a, b, c])\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor of the given numbers.\n    :param a: Number a\n    :param b: Number b\n    :return: The greatest common divisor of the given numbers\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    # Tests\n    assert right_angle"}
{"ID": 158, "source": "HumanEval:HumanEval/158", "prompt": "\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):", "predict": "<s>\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):\n  # Your code here\n  max_word = \"\"\n  max_count = 0\n  for word in words:\n    if len(set(word)) > max_count:\n      max_count = len(set(word))\n      max_word = word\n    elif len(set(word)) == max_count:\n      if word < max_word:\n        max_word = word\n  return max_word\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 159, "source": "HumanEval:HumanEval/159", "prompt": "\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n\"\"\"\ndef eat(number, need, remaining):", "predict": "<s>\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n\"\"\"\ndef eat(number, need, remaining):\n    # your code here\n    return [number + need, remaining - need]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(eat(5, 6, 10))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert eat(5, 6, 10) == [11, 4]\n    assert eat(4, 8, 9) == [12, 1]\n    assert eat(1, 10, 10) == [11, 0]\n    assert eat(2, 11, 5) == [7, 0]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n</s>"}
{"ID": 160, "source": "HumanEval:HumanEval/160", "prompt": "\n\"\"\"\nGiven two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.\n\n\"\"\"\ndef do_algebra(operator, operand):", "predict": "<s>\n\"\"\"\nGiven two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.\n\n\"\"\"\ndef do_algebra(operator, operand):\n    pass\n\n\nif __name__ == '__main__':\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    print(do_algebra(operator, operand))\n</s>"}
{"ID": 161, "source": "HumanEval:HumanEval/161", "prompt": "\n\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n\"\"\"\ndef solve(s):", "predict": "<s>\n\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n\"\"\"\ndef solve(s):\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n\nif __name__ == '__main__':\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))\n</s>"}
{"ID": 162, "source": "HumanEval:HumanEval/162", "prompt": "\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):", "predict": "<s>\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha1 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha1('Hello world') == '2ef7bde608ce5404e97d5f042f95f89f1c232871'\n\"\"\"\ndef string_to_sha1(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.sha1(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha256 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha256('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'\n\"\"\"\ndef string_to_sha256(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha512 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha512('Hello world') == 'f7fbba6e0636f890e56fbbf3283e524c6fa3204ae298382d624741d0dc6638326e282c41be5e4254d8820772c5518a2c5a8c0c7f7eda19594a7eb53945"}
{"ID": 163, "source": "HumanEval:HumanEval/163", "prompt": "\n\"\"\"\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n\"\"\"\ndef generate_integers(a, b):", "predict": "<s>\n\"\"\"\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n\"\"\"\ndef generate_integers(a, b):\n    # Your code here\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))\n</s>"}
