{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t\n    # Sort the given pairs in increasing order of first values \n    arr.sort(key = lambda x: x[0]) \n  \n    # Create an array chain that will store the lengths of \n    # different chains. chain[i] will store the length of \n    # the chain ending with pair i. Initialize all chain \n    # values as 1. \n    chain = [1] * n \n  \n    # Consider all pairs and find related chains \n    for i in range(1, n): \n        for j in range(0, i): \n  \n            # If current pair is related to previous, \n            # update the chain value. \n            if (arr[i][0] > arr[j][1]): \n                chain[i] = max(chain[i], chain[j] + 1) \n  \n    # Return the maximum value of chain[i] \n    return max(chain) \n  \n# Driver code \narr = [[5, 24], [39, 60], [15, 28], [27, 40], [50, 90]] \nn = len(arr) \nprint(\"Length of the longest chain is\", max_chain_length(arr, n)) \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search. The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)//2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can only \n        # be present in left subarray \n        elif arr[mid] > x: \n            return binary"}
{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t\t\"\"\"\n\t\t:type str1: str\n\t\t:rtype: str\n\t\t\"\"\"\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] in str1[i+1:]:\n\t\t\t\treturn str1[i]\n\t\treturn None\n\nif __name__ == '__main__':\n\tprint(first_repeated_char('abcde'))\n\tprint(first_repeated_char('aabbcde'))\n\tprint(first_repeated_char('aabbccddeefghi'))\n\tprint(first_repeated_char('aabbccddeefgh'))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 2 * sum(set(nums)) - sum(nums)\n\nif __name__ == '__main__':\n\tprint(single_number([2,2,1]))\n\tprint(single_number([4,1,2,1,2]))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val ="}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than or equal to n.\n\"\"\"\ndef get_ludic_count(n):\n\t\n\n\n\"\"\"\nWrite a function to get the number of lucid numbers smaller than"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t\treturn''.join(s.split()[::-1])\n\nprint(reverse_words('hello world'))\n<file_sep>/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n<file_sep>/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution:\n\tdef levelOrderBottom(self, root):\n\t\t\"\"\"\n\t\t:type root: TreeNode\n\t\t:rtype: List[List[int]]\n\t\t\"\"\"\n\t\tif not root:\n\t\t\treturn []\n\t\tqueue = [root]\n\t\tresult = []\n\t\twhile queue:\n\t\t\tresult.append([node.val for node in queue])\n\t\t\tqueue = [child for node in queue for child in (node.left, node.right) if child]\n\t\treturn result[::-1]\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\n"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t\tif num > 1:\n\t\t\tfor i in range(2, num):\n\t\t\t\tif (num % i) == 0:\n\t\t\t\t\tprint(num, \"is not a prime number\")\n\t\t\t\t\tprint(i, \"times\", num//i, \"is\", num)\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(num, \"is a prime number\")\n\t\telse:\n\t\t\tprint(num, \"is not a prime number\")\n\nprime_num(11)\nprime_num(12)\nprime_num(13)\nprime_num(14)\nprime_num(15)\nprime_num(16)\nprime_num(17)\nprime_num(18)\nprime_num(19)\nprime_num(20)\nprime_num(21)\nprime_num(22)\nprime_num(23)\nprime_num(24)\nprime_num(25)\nprime_num(26)\nprime_num(27)\nprime_num(28)\nprime_num(29)\nprime_num(30)\nprime_num(31)\nprime_num(32)\nprime_num(33)\nprime_num(34)\nprime_num(35)\nprime_num(36)\nprime_num(37)\nprime_num(38)\nprime_num(39)\nprime_num(40)\nprime_num(41)\nprime_num(42)\nprime_num(43)\nprime_num(44)\nprime_num(45)\nprime_num(46)\nprime_num(47)\nprime_num(48)\nprime_num(49)\nprime_num(50)\nprime_num(51)\nprime_num(52)\nprime_num(53)\nprime_num(54)\nprime_num(55)\nprime_num(56)\nprime_num(57)\nprime_num(58)\nprime_num(59)\nprime_num(60)\nprime_num(61)\nprime_num(6"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t\treturn degree * (math.pi / 180)\n\ndef main():\n\tdegree = int(input(\"Enter the degree: \"))\n\tprint(radian_degree(degree))\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/python/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\ndef pattern():\n\tfor i in range(1, 6):\n\t\tprint(\"*\" * i)\n\ndef main():\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/python/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n*****\n****\n***\n**\n*\n\"\"\"\ndef pattern():\n\tfor i in range(5, 0, -1):\n\t\tprint(\"*\" * i)\n\ndef main():\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/python/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\ndef pattern():\n\tfor i in range(1, 6):\n\t\tprint(str(i) * i)\n\ndef main():\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/python/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\ndef pattern():\n\tfor i in range(1, 6):\n\t\tprint(str(i) * i)\n\ndef main():\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/python/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:param pattern: string\n\t\t:return: list\n\t\t\"\"\"\n\t\treturn re.findall(pattern, text)\n\nif __name__ == '__main__':\n\ttext = \"The quick brown fox jumps over the lazy dog.\"\n\tpattern = \"fox\"\n\tprint(find_literals(text, pattern))\n<file_sep>/python/regex/regex_search_and_replace.py\n\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\n\ndef find_literals(text, pattern):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:param pattern: string\n\t\t:return: list\n\t\t\"\"\"\n\t\treturn re.findall(pattern, text)\n\ndef replace_literals(text, pattern, replacement):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:param pattern: string\n\t\t:param replacement: string\n\t\t:return: string\n\t\t\"\"\"\n\t\treturn re.sub(pattern, replacement, text)\n\nif __name__ == '__main__':\n\ttext = \"The quick brown fox jumps over the lazy dog.\"\n\tpattern = \"fox\"\n\treplacement = \"cat\"\n\tprint(replace_literals(text, pattern, replacement))\n<file_sep>/python/regex/regex_search_and_replace_with_flags.py\n\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\n\ndef find_literals(text, pattern, flags=0):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:param pattern: string\n\t\t:param flags: int\n\t\t:return: list\n\t\t\"\"\"\n\t\treturn re.findall(pattern, text, flags)\n\ndef replace_literals(text, pattern, replacement, flags=0):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:param pattern: string\n\t\t:param replacement: string\n\t\t:param flags: int\n\t\t:return: string\n\t\t\"\"\"\n\t\treturn re.sub(pattern, replacement, text, flags)\n\nif __name__ == '__main__':\n\ttext = \"The quick brown fox jumps over the lazy dog.\"\n\tpattern"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t\tbell = [[0 for i in range(n + 1)] for j in range(n + 1)] \n\t\tbell[0][0] = 1\n\t\tfor i in range(1, n + 1): \n\t\t\tbell[i][0] = bell[i - 1][i - 1] \n\t\t\tfor j in range(1, i): \n\t\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1] \n\t\treturn bell[n][0] \n\nprint(bell_Number(5))\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\"\"\"\ndef binarySearch(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n        else: \n            return binarySearch(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binarySearch(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\"\"\"\ndef bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \nprint(\"Sorted array is:\") \nfor i in range(len(arr)): \n    print(\"%d\" %arr[i])\n<file_sep>/Python/Algorithms/Searching/LinearSearch.py\n\"\"\"\nLinear Search\n"}
{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t\tif N==0:\n\t\t\treturn 0\n\t\tif N==1:\n\t\t\treturn A\n\t\tif N==2:\n\t\t\treturn min(A,B)\n\t\tif N%2==0:\n\t\t\treturn floor_Min(A,B,N/2)\n\t\telse:\n\t\t\treturn min(floor_Min(A,B,N/2),floor_Min(A,B,N/2+1))\n\nprint floor_Min(1,2,10)\n<file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t\tlist1.pop(L)\n\t\treturn list1\n\nprint(remove_kth_element([1,2,3,4,5], 2))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_of_three_numbers(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_of_three_numbers(1, 2, 3))\nprint(sum_of_three_numbers(1, 1, 1))\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_number(list1):\n\treturn min(list1)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_strings(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_strings(['abc', 'xyz', 'aba', '1221']))\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python"}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t\treturn max(test_list, key=lambda x: x[N])\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nN = 1\nprint(\"The maximum is\", max_of_nth(test_list, N))\n\n\"\"\"\nWrite a function to find the minimum of nth column from the given tuple list.\n\"\"\"\ndef min_of_nth(test_list, N):\n\t\treturn min(test_list, key=lambda x: x[N])\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nN = 1\nprint(\"The minimum is\", min_of_nth(test_list, N))\n\n\"\"\"\nWrite a function to find the sum of nth column from the given tuple list.\n\"\"\"\ndef sum_of_nth(test_list, N):\n\t\treturn sum(x[N] for x in test_list)\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nN = 1\nprint(\"The sum is\", sum_of_nth(test_list, N))\n\n\"\"\"\nWrite a function to find the average of nth column from the given tuple list.\n\"\"\"\ndef avg_of_nth(test_list, N):\n\t\treturn sum_of_nth(test_list, N) / len(test_list)\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nN = 1\nprint(\"The average is\", avg_of_nth(test_list, N))\n\n\"\"\"\nWrite a function to find the product of nth column from the given tuple list.\n\"\"\"\ndef product_of_nth(test_list, N):\n\t\treturn reduce(lambda x, y: x * y, [x[N] for x in test_list])\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 1"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\tlst[0] = lst[0] + lst[-1]  \n\t\tlst.pop(-1)  \n\t\treturn lst  \nlst = [[1, 3], [2, 4], [5, 6], [7, 8]]  \nprint(merge(lst))  \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0] + lst[-1]\nlst = [1, 2, 3, 4, 5]\nprint(sum_first_last(lst))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0] + lst[-1]\nlst = [1, 2, 3, 4, 5]\nprint(sum_first_last(lst))\n\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0] + lst[-1]\nlst = [1, 2, 3, 4, 5]\nprint(sum_first_last(lst))\n\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0] + lst[-1]\nlst = [1, 2, 3, 4, 5]\nprint(sum_first_last(lst))\n\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0] + lst[-1]\nlst = [1, 2, 3, 4, 5]\nprint(sum_first_last(lst))\n\n\"\"\"\nWrite a python program to find the sum of the first and last element of a list.\n\"\"\"\ndef sum_first_last(lst):\n\treturn lst[0"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t\tmax_value = test_list[0]\n\t\tfor i in test_list:\n\t\t\tif i[1] > max_value[1]:\n\t\t\t\tmax_value = i\n\t\treturn max_value\n\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nprint(\"The maximum value in the list is : \" + str(maximum_value(test_list)))\n\n\"\"\"\nWrite a function to find the minimum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef minimum_value(test_list):\n\t\tmin_value = test_list[0]\n\t\tfor i in test_list:\n\t\t\tif i[1] < min_value[1]:\n\t\t\t\tmin_value = i\n\t\treturn min_value\n\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nprint(\"The minimum value in the list is : \" + str(minimum_value(test_list)))\n\n\"\"\"\nWrite a function to find the second largest value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef second_largest_value(test_list):\n\t\tmax_value = test_list[0]\n\t\tsecond_max_value = test_list[0]\n\t\tfor i in test_list:\n\t\t\tif i[1] > max_value[1]:\n\t\t\t\tsecond_max_value = max_value\n\t\t\t\tmax_value = i\n\t\treturn second_max_value\n\ntest_list = [(1, 2), (4, 5), (7, 8), (9, 10)]\nprint(\"The second largest value in the list is : \" + str(second_largest_value(test_list)))\n\n\"\"\"\nWrite a function to find the second smallest value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef second_smallest_value(test_list):\n\t\tmin_value = test_list[0]\n\t\tsecond_min_value = test_list[0]\n\t\tfor i in test_list:\n\t\t\tif i[1] < min_value[1]:\n\t\t\t\tsecond_min_value = min_value\n\t\t\t\t"}
{"ID": 13, "source": "MBPP:614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\tsum = 0\n\t\tfor i in test_list:\n\t\t\tsum += i\n\t\treturn sum\n\ntest_list = (1, 2, 3, 4, 5)\nprint(\"The sum of the tuple is : \" + str(cummulative_sum(test_list)))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\nimport datetime\nprint(\"Current date and time : \" + str(datetime.datetime.now()))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\nimport datetime\nprint(\"Current date and time : \" + str(datetime.datetime.now()))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to get the copyright information.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a Python program to get the command-line"}
{"ID": 14, "source": "MBPP:615", "prompt": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn sum(nums) / len(nums)\n\n\"\"\"\nWrite a function to find the maximum value in a given tuple of tuples.\n\"\"\"\ndef max_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn max(nums)\n\n\"\"\"\nWrite a function to find the minimum value in a given tuple of tuples.\n\"\"\"\ndef min_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn min(nums)\n\n\"\"\"\nWrite a function to find the sum of all the values in a given tuple of tuples.\n\"\"\"\ndef sum_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn sum(nums)\n\n\"\"\"\nWrite a function to find the product of all the values in a given tuple of tuples.\n\"\"\"\ndef product_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn reduce(lambda x, y: x * y, nums)\n\n\"\"\"\nWrite a function to find the average of all the values in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn sum(nums) / len(nums)\n\n\"\"\"\nWrite a function to find the maximum value in a given tuple of tuples.\n\"\"\"\ndef max_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn max(nums)\n\n\"\"\"\nWrite a function to find the minimum value in a given tuple of tuples.\n\"\"\"\ndef min_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn min(nums)\n\n\"\"\"\nWrite a function to find the sum of all the values in a given tuple of tuples.\n\"\"\"\ndef sum_tuple(nums):\n\t\t\"\"\"\n\t\t:type nums: tuple\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn sum(nums)\n\n\"\"\"\nWrite a function to find the product of all the values in"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((11, 22, 33), (5, 15, 25)))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef largest_number(test_list):\n\treturn max(test_list)\n\nprint(largest_number([10, 20, 4, 45, 99]))\n<file_sep>/python_practice/python_practice_10.py\n\"\"\"\nWrite a Python program to find the index of an item of a tuple.\n\"\"\"\ndef tuple_index(test_tup, test_item):\n\treturn test_tup.index(test_item)\n\nprint(tuple_index((10, 20, 30, 40), 30))\n<file_sep>/python_practice/python_practice_11.py\n\"\"\"\nWrite a Python program to reverse a tuple.\n\"\"\"\ndef tuple_reverse(test_tup):\n\treturn test_tup[::-1]\n\nprint(tuple_reverse((10, 20, 30, 40)))\n<file_sep>/python_practice/python_practice_12.py\n\"\"\"\nWrite a Python program to convert a list to a tuple.\n\"\"\"\ndef list_to_tuple(test_list):\n\treturn tuple(test_list)\n\nprint(list_to_tuple([10, 20, 30, 40]))\n<file_sep>/python_practice/python_practice_13.py\n\"\"\"\nWrite a Python program to remove an item from a tuple.\n\"\"\"\ndef tuple_remove(test_tup, test_item):\n\treturn test_tup.remove(test_item)\n\nprint(tuple_remove((10, 20, 30, 40), 30))\n<file_sep>/python_practice/python_practice_14.py\n\"\"\"\nWrite a Python program to slice a tuple.\n\"\"\"\ndef tuple_slice(test_tup, start, end):\n\treturn test_tup[start:end]\n"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\tif (a == 0 and b == 0): \n\t\t\treturn 0\n\t\tif (a < 0 or b < 0): \n\t\t\treturn -1\n\t\tif (a == 0): \n\t\t\treturn (b / d) \n\t\tif (b == 0): \n\t\t\treturn (a / d) \n\t\tif (a < b): \n\t\t\treturn (a / d) + min_Jumps(a % d, b, d) \n\t\telse: \n\t\t\treturn (b / d) + min_Jumps(a, b % d, d) \n\na = 10\nb = 10\nd = 2\nprint(min_Jumps(a, b, d))\n<file_sep>/Python/Algorithms/Sorting/QuickSort.py\n\"\"\"\nQuick Sort\n\"\"\"\ndef quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quickSort(left) + middle + quickSort(right)\n\nprint(quickSort([3,6,8,10,1,2,1]))\n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\"\"\"\ndef bubbleSort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nprint(bubbleSort([3,6,8,10,1,2,1]))\n<file_sep>/Python/Algorithms/Sorting/InsertionSort.py\n\"\"\"\nInsertion Sort\n\"\"\"\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\nprint(insertionSort([3,6,8,10,1,"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x/y,nums1,nums2))\n\nprint(div_list([1,2,3,4,5],[5,4,3,2,1]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t\t# split the string into a list\n\t\ttest_list = test_str.split()\n\t\t# create an empty list\n\t\tnew_list = []\n\t\t# iterate through the list\n\t\tfor i in test_list:\n\t\t\t# check if the element is a number\n\t\t\tif i.isdigit():\n\t\t\t\t# append the element to the new list\n\t\t\t\tnew_list.append(i)\n\t\t# join the list elements with a space\n\t\treturn \" \".join(new_list)\n\n# test the function\nprint(move_num(\"a1b2c3\"))\nprint(move_num(\"1a2b3c\"))\nprint(move_num(\"abc123\"))\nprint(move_num(\"123abc\"))\nprint(move_num(\"123abc123\"))\nprint(move_num(\"abc123abc123\"))\nprint(move_num(\"123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123abc123abc123abc123abc123\"))\nprint(move_num(\"123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123\"))"}
{"ID": 19, "source": "MBPP:620", "prompt": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\n\"\"\"\nWrite a function to find the largest subset where each pair is div"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = re.sub(r'\\d+', lambda x: str(int(x.group(0)) + K), test_list[i])\n\t\treturn test_list\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest word in a given"}
{"ID": 21, "source": "MBPP:622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t", "predict": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t\n#\tif n % 2 == 0:\n#\t\treturn (arr1[n//2] + arr1[n//2 - 1]) / 2\n#\telse:\n#\t\treturn arr1[n//2]\n\n\tif n == 1:\n\t\treturn (arr1[0] + arr2[0]) / 2\n\n\tif arr1[n//2] == arr2[n//2]:\n\t\treturn arr1[n//2]\n\n\tif arr1[n//2] < arr2[n//2]:\n\t\tif n % 2 == 0:\n\t\t\treturn get_median(arr1[n//2:], arr2[:n//2], n//2)\n\t\telse:\n\t\t\treturn get_median(arr1[n//2+1:], arr2[:n//2], n//2)\n\telse:\n\t\tif n % 2 == 0:\n\t\t\treturn get_median(arr1[:n//2], arr2[n//2:], n//2)\n\t\telse:\n\t\t\treturn get_median(arr1[:n//2], arr2[n//2+1:], n//2)\n\narr1 = [1, 2, 3, 6]\narr2 = [4, 6, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t\treturn list(map(lambda x:x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range("}
{"ID": 23, "source": "MBPP:624", "prompt": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t\tif string.isupper():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef to_upper(string):\n\tif is_upper(string):\n\t\treturn string\n\telse:\n\t\treturn string.upper()\n\nprint(to_upper(\"Hello\"))\nprint(to_upper(\"HELLO\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b and b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_number(list):\n\treturn min(list)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_strings(list):\n\tcount = 0\n\tfor string in list:\n\t\tif len(string) >= 2 and string[0] == string[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_strings([\"abc\", \"xyz\", \""}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList \n\n# Driver code \nnewList = [12, 35, 9, 56, 24] \nprint(swap_List(newList)) \n\n\"\"\"\nWrite a python function to remove duplicate elements from a given list.\n\"\"\"\ndef remove_duplicate(newList): \n\treturn list(dict.fromkeys(newList)) \n\n# Driver code \nnewList = [12, 35, 24, 35, 24, 75, 24, 88, 12, 14, 12] \nprint(remove_duplicate(newList)) \n\n\"\"\"\nWrite a python function to check whether a given list is monotonic or not.\n\"\"\"\ndef isMonotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n# Driver code \nA = [6, 5, 4, 4] \nprint(isMonotonic(A)) \n\n\"\"\"\nWrite a python function to find the index of the first occurrence of a given element in a given list.\n\"\"\"\ndef first_index(newList, x): \n\tfor i in range(len(newList)): \n\t\tif newList[i] == x: \n\t\t\treturn i \n\treturn -1\n\n# Driver code \nnewList = [12, 35, 24, -5, 60] \nx = 35\nprint(first_index(newList, x)) \n\n\"\"\"\nWrite a python function to find the index of the last occurrence of a given element in a given list.\n\"\"\"\ndef last_index(newList, x): \n\tfor i in range(len(newList) - 1, -1, -1): \n\t\tif newList[i] == x: \n\t\t\treturn i \n\treturn -1\n\n# Driver code \nnewList = [12, 35, 24"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t\treturn (math.sqrt(3) / 4) * r * r\n\ndef max_triangle(r) : \n\t\treturn triangle_area(r) / 2\n\ndef max_triangle_semicircle(r) : \n\t\treturn max_triangle(r) * 2\n\ndef main() : \n\t\tr = 10\n\t\tprint(\"Area of largest triangle that can be inscribed in the semicircle is : \", max_triangle_semicircle(r))\n\nif __name__ == \"__main__\" : \n\t\tmain()\n<file_sep>/python/math/pi.py\n\"\"\"\nWrite a python program to calculate the value of PI using the following formula:\n\"\"\"\nimport math\n\ndef pi_value(n) : \n\t\tpi = 0\n\t\tfor i in range(n) : \n\t\t\t\tpi += (math.pow(-1, i) / (2 * i + 1))\n\t\treturn 4 * pi\n\ndef main() : \n\t\tn = 100000\n\t\tprint(\"Value of PI is : \", pi_value(n))\n\nif __name__ == \"__main__\" : \n\t\tmain()\n<file_sep>/python/math/factorial.py\n\"\"\"\nWrite a python program to calculate the factorial of a number.\n\"\"\"\ndef factorial(n) : \n\t\tif n == 0 : \n\t\t\t\treturn 1\n\t\telse : \n\t\t\t\treturn n * factorial(n - 1)\n\ndef main() : \n\t\tn = 5\n\t\tprint(\"Factorial of \", n, \" is : \", factorial(n))\n\nif __name__ == \"__main__\" : \n\t\tmain()\n<file_sep>/python/math/fibonacci.py\n\"\"\"\nWrite a python program to print the fibonacci series.\n\"\"\"\ndef fibonacci(n) : \n\t\tif n <= 1 : \n\t\t\t\treturn n\n\t\telse : \n\t\t\t\treturn fibonacci(n - 1) + fibonacci(n - 2)\n\ndef main() : \n\t\tn = 10\n\t\tprint(\"Fibonacci series is : \")\n\t\tfor i in range(n) : \n\t\t\t\tprint(fibonacci(i), end = \" \")\n\nif __name__ == \"__main__\" : \n\t\tmain()\n<file_sep>/"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t\tif start > end: \n\t\t\treturn end + 1\n\t\tmid = (start + end) // 2\n\t\tif array[mid]!= mid: \n\t\t\tif mid == 0 or array[mid - 1] == mid - 1: \n\t\t\t\treturn mid \n\t\t\treturn find_First_Missing(array, start, mid - 1) \n\t\treturn find_First_Missing(array, mid + 1, end) \n\ndef find_First_Missing_Number(array): \n\treturn find_First_Missing(array, 0, len(array) - 1) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 10] \nprint(find_First_Missing_Number(array)) \n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_First_Missing_Number(array)) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_First_Missing_Number(array)) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11] \nprint(find_First_Missing_Number(array)) \n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_First_Missing_Number(array)) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_First_Missing_Number(array)) \n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(find_First_Missing_Number(array)) \n\narray = [0, 1, 2, 3, 4, "}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t\treturn string.replace(' ', '%20')\n\nprint(replace_spaces('hello world'))\n<file_sep>/chapter_1/1.1.py\n\"\"\"\nImplement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?\n\"\"\"\n\ndef is_unique(string):\n\tfor i in range(len(string)):\n\t\tfor j in range(i+1, len(string)):\n\t\t\tif string[i] == string[j]:\n\t\t\t\treturn False\n\treturn True\n\nprint(is_unique('hello'))\nprint(is_unique('helo'))\n<file_sep>/chapter_1/1.3.py\n\"\"\"\nGiven two strings, write a method to decide if one is a permutation of the other.\n\"\"\"\n\ndef is_permutation(string1, string2):\n\tif len(string1)!= len(string2):\n\t\treturn False\n\tfor i in range(len(string1)):\n\t\tif string1[i] not in string2:\n\t\t\treturn False\n\treturn True\n\nprint(is_permutation('hello', 'helo'))\nprint(is_permutation('hello', 'heloo'))\n<file_sep>/chapter_1/1.2.py\n\"\"\"\nWrite code to reverse a C-Style String. (C-String means that “abcd” is represented as five characters, including the null character.)\n\"\"\"\n\ndef reverse_string(string):\n\treturn string[::-1]\n\nprint(reverse_string('hello'))\n<file_sep>/chapter_1/1.4.py\n\"\"\"\nWrite a method to replace all spaces in a string with ‘%20’.\n\"\"\"\n\ndef replace_spaces(string):\n\treturn string.replace(' ', '%20')\n\nprint(replace_spaces('hello world'))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport { createStore, applyMiddleware } from'redux';\nimport ReduxThunk from'redux-thunk';\nimport reducers from '../reducers';\nimport { Router, Scene } from'react-native-router-flux';\nimport LoginForm from './LoginForm';\nimport"}
{"ID": 28, "source": "MBPP:629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\n    even_list = [] \n    odd_list = [] \n  \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n        else: \n            odd_list.append(num) \n    return even_list, odd_list \n  \nlist = [10, 21, 4, 45, 66, 93] \neven_list, odd_list = Split(list) \nprint(\"Even list:\", even_list) \nprint(\"Odd list:\", odd_list) <jupyter_output>Even list: [10, 4, 66]\nOdd list: [21, 45, 93]\n<jupyter_text># Question 10\nWrite a python program to find the sum of all elements in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum(dict.values()))<jupyter_output>183\n<jupyter_text># Question 11\nWrite a python program to find the sum of all items in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum(dict.values()))<jupyter_output>183\n<jupyter_text># Question 12\nWrite a python program to find the sum of all values in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum(dict.values()))<jupyter_output>183\n<jupyter_text># Question 13\nWrite a python program to find the sum of all values in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum(dict.values()))<jupyter_output>183\n<jupyter_text># Question 14\nWrite a python program to find the sum of all values in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum(dict.values()))<jupyter_output>183\n<jupyter_text># Question 15\nWrite a python program to find the sum of all values in a dictionary.<jupyter_code>dict = {'data1':100,'data2':-54,'data3':247}\nprint(sum("}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t\t\"\"\"\n\t\tReturns a list of tuples of adjacent coordinates to the given coordinate.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n\n\"\"\"\nWrite a function to check if a given coordinate is in the board.\n\"\"\"\ndef is_in_board(test_tup):\n\t\t\"\"\"\n\t\tReturns True if the given coordinate is in the board, False otherwise.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn (x >= 0 and x < 8) and (y >= 0 and y < 8)\n\n\"\"\"\nWrite a function to check if a given coordinate is a valid move.\n\"\"\"\ndef is_valid_move(test_tup):\n\t\t\"\"\"\n\t\tReturns True if the given coordinate is a valid move, False otherwise.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn is_in_board(test_tup) and (board[x][y] == 0)\n\n\"\"\"\nWrite a function to check if a given coordinate is a valid move.\n\"\"\"\ndef is_valid_move(test_tup):\n\t\t\"\"\"\n\t\tReturns True if the given coordinate is a valid move, False otherwise.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn is_in_board(test_tup) and (board[x][y] == 0)\n\n\"\"\"\nWrite a function to check if a given coordinate is a valid move.\n\"\"\"\ndef is_valid_move(test_tup):\n\t\t\"\"\"\n\t\tReturns True if the given coordinate is a valid move, False otherwise.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn is_in_board(test_tup) and (board[x][y] == 0)\n\n\"\"\"\nWrite a function to check if a given coordinate is a valid move.\n\"\"\"\ndef is_valid_move(test_tup):\n\t\t\"\"\"\n\t\tReturns True if the given coordinate is a valid move, False otherwise.\n\t\t\"\"\"\n\t\tx, y = test_tup\n\t\treturn is_in_board(test_tup) and (board[x][y] == 0)\n\n\"\"\"\nWrite a function to check if a"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t\treturn re.sub(r'\\s', '_', text)\n\ndef replace_underscores(text):\n\t\treturn re.sub(r'_','', text)\n\ndef main():\n\t\ttext = \"This is a test string\"\n\t\tprint(replace_spaces(text))\n\t\tprint(replace_underscores(text))\n\nif __name__ == '__main__':\n\t\tmain()\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\n\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef insert_at_beginning(self, data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_at_end(self, data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast_node = self.head\n\t\twhile last_node.next:\n\t\t\tlast_node = last_node.next\n\t\tlast_node.next = new_node\n\n\tdef insert_after_node(self, prev_node, data):\n\t\tif not prev_node:\n\t\t\tprint(\"Previous node is not in the list\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef delete_node(self, key):\n\t\thead_node = self.head\n\t\tif head_node and head_node.data == key:\n\t\t\tself.head = head_node.next\n\t\t\thead_node = None\n\t\t\treturn\n\t\tprev = None\n\t\twhile head_node and head_node.data!= key:\n\t\t\tprev = head_node\n\t\t\thead_node = head_node.next\n\t\tif head_node is None:\n\t\t\treturn\n\t\tprev.next = head_node.next\n\t\thead_node = None\n\n\tdef print_list(self):\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t\t\"\"\"\n\t\tMove all zeroes to the end of the given list.\n\t\t\"\"\"\n\t\tfor i in range(len(num_list)):\n\t\t\tif num_list[i] == 0:\n\t\t\t\tnum_list.append(num_list.pop(i))\n\t\treturn num_list\n\nprint(move_zero([1, 0, 2, 0, 3, 0, 4, 0, 5]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,"}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t\n    # Initialize result \n    res = 0; \n  \n    # Traverse through all pairs \n    for i in range(n) : \n        for j in range(i + 1, n) : \n            res = res ^ (arr[i] | arr[j]) \n  \n    return res; \n  \n# Driver code \narr = [1, 2, 3, 4] \nn = len(arr) \nprint(pair_OR_Sum(arr, n)) \n<file_sep>/Python/Array/15.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1\n<file_sep>/Python/Array/10.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n       "}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(2, n+1, 2): \n\t\t\tsum += i * i * i * i \n\t\treturn sum \n\nn = 5\nprint(even_Power_Sum(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t\theap = []\n\t\tfor value in iterable:\n\t\t\theapq.heappush(heap, value)\n\t\treturn [heapq.heappop(heap) for i in range(len(heap))]\n\ndef main():\n\tprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n\nif __name__ == '__main__':\n\tmain()<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree ["}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (b**2 - 4*a*c) > 0: \n\t\t\tprint(\"Roots are real and distinct\") \n\t\telif (b**2 - 4*a*c) == 0: \n\t\t\tprint(\"Roots are real and equal\") \n\t\telse: \n\t\t\tprint(\"Roots are complex\") \n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nCheck_Solution(a,b,c)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the area of a triangle.\n\"\"\"\ndef Area_Triangle(a,b,c):\n\ts = (a+b+c)/2\n\tarea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\treturn area\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nprint(\"Area of the triangle is: \",Area_Triangle(a,b,c))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the area of a circle.\n\"\"\"\ndef Area_Circle(r):\n\tarea = 3.14 * r * r\n\treturn area\n\nr = int(input(\"Enter the value of radius: \"))\nprint(\"Area of the circle is: \",Area_Circle(r))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the area of a rectangle.\n\"\"\"\ndef Area_Rectangle(l,b):\n\tarea = l * b\n\treturn area\n\nl = int(input(\"Enter the value of length: \"))\nb = int(input(\"Enter the value of breadth: \"))\nprint(\"Area of the rectangle is: \",Area_Rectangle(l,b))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the area of a square.\n\"\"\"\ndef Area_Square(a):"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn \"Loss\"\n\t\telif actual_cost < sale_amount:\n\t\t\treturn \"Profit\"\n\t\telse:\n\t\t\treturn \"No Profit No Loss\"\n\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,1000))\nprint(noprofit_noloss(1000,100))\nprint(noprofit_noloss(1000,1000))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i"}
{"ID": 37, "source": "MBPP:638", "prompt": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t", "predict": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\tif t<50 and v>3:\n\t\t\treturn 35.74+0.6215*t-35.75*v**0.16+0.4275*t*v**0.16\n\t\telse:\n\t\t\treturn t\n\n\"\"\"\nWrite a function to calculate dew point.\n\"\"\"\ndef dew_point(t,h):\n\treturn t-((100-h)/5)\n\n\"\"\"\nWrite a function to calculate heat index.\n\"\"\"\ndef heat_index(t,h):\n\tif t>80 and h>50:\n\t\treturn -42.379+2.04901523*t+10.14333127*h-0.22475541*t*h-0.00683783*t**2-0.05481717*h**2+0.00122874*t**2*h+0.00085282*t*h**2-0.00000199*t**2*h**2\n\telse:\n\t\treturn t\n\n\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\tif t<50 and v>3:\n\t\t\treturn 35.74+0.6215*t-35.75*v**0.16+0.4275*t*v**0.16\n\t\telse:\n\t\t\treturn t\n\n\"\"\"\nWrite a function to calculate dew point.\n\"\"\"\ndef dew_point(t,h):\n\treturn t-((100-h)/5)\n\n\"\"\"\nWrite a function to calculate heat index.\n\"\"\"\ndef heat_index(t,h):\n\tif t>80 and h>50:\n\t\treturn -42.379+2.04901523*t+10.14333127*h-0.22475541*t*h-0."}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t\tsum = 0\n\t\tfor name in sample_names:\n\t\t\tif name[0].isupper():\n\t\t\t\tsum += len(name)\n\t\treturn sum\n\nprint(sample_nam([\"Aamir\", \"Abbas\", \"Bandar\", \"Zainab\"]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Input your First Name : \")\nlast_name = input(\"Input your Last Name : \")\n"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\tif items.find('(') == -1:\n\t\t\treturn items\n\t\telse:\n\t\t\treturn remove_parenthesis(items[items.find('(')+1:items.find(')')])\n\nprint remove_parenthesis('(123)456(789)')\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype:"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\treturn (1 + 24*n + 12*n**2 + 6*n**3) % 24 == 0\n\ndef nth_nonagonal(n):\n\ti = 1\n\twhile True:\n\t\tif is_nonagonal(i):\n\t\t\tn -= 1\n\t\t\tif n == 0:\n\t\t\t\treturn i\n\t\ti += 1\n\nprint nth_nonagonal(1000000)\n<file_sep>/euler/001-050/012.py\n\"\"\"\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...\n\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n\"\"\"\n\ndef triangle_number(n):\n\treturn n*(n+1)/2\n\ndef factors(n):\n\ti = 1\n\tfactors = []\n\twhile i*i <= n:\n\t\tif n % i == 0:\n\t\t\tfactors.append(i)\n\t\t\tif i!= n/i:\n\t\t\t\tfactors.append(n/i)\n\t\ti += 1\n\treturn factors\n\ndef num_factors(n):\n\treturn len(factors(n))\n\ndef first_triangle_number_with_n_factors(n):\n\ti = 1\n\twhile True:\n\t\tif num_factors(triangle_number(i)) >= n:"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tif not test_list:\n\t\t\treturn []\n\t\ttest_list.sort()\n\t\tresult = [test_list[0]]\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i]!= result[-1]:\n\t\t\t\tresult.append(test_list[i])\n\t\treturn result\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, "}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t\treturn re.search(r'\\bz\\w+', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_2(text):\n\t\treturn re.search(r'\\Bz\\w+\\B', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_3(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_4(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_5(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_6(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_7(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_8(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_9(text):\n\t\treturn re.search(r'\\Bz\\w+\\Bz', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n"}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t\tfor i in range(0, k): \n\t\t\ttemp = input[i] \n\t\t\tinput[i] = input[k - i - 1] \n\t\t\tinput[k - i - 1] = temp \n\n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 5\nreverse_Array_Upto_K(input, k) \nprint(input) \n\n\"\"\"\nWrite a python function to reverse an array in groups of given size.\n\"\"\"\ndef reverse_Array_In_Groups(input, k): \n\t\tfor i in range(0, len(input), k): \n\t\t\tinput[i:i + k] = reversed(input[i:i + k]) \n\n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 3\nreverse_Array_In_Groups(input, k) \nprint(input) \n\n\"\"\"\nWrite a python function to reverse an array in groups of given size.\n\"\"\"\ndef reverse_Array_In_Groups(input, k): \n\t\tfor i in range(0, len(input), k): \n\t\t\tinput[i:i + k] = reversed(input[i:i + k]) \n\n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 3\nreverse_Array_In_Groups(input, k) \nprint(input) \n\n\"\"\"\nWrite a python function to reverse an array in groups of given size.\n\"\"\"\ndef reverse_Array_In_Groups(input, k): \n\t\tfor i in range(0, len(input), k): \n\t\t\tinput[i:i + k] = reversed(input[i:i + k]) \n\n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 3\nreverse_Array_In_Groups(input, k)"}
{"ID": 44, "source": "MBPP:645", "prompt": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t\tif K == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn reduce(lambda x, y: x * y, test_list) / reduce(lambda x, y: x * y, test_list[K:])\n\nprint(find_k_product([1, 2, 3, 4, 5], 2))\nprint(find_k_product([1, 2, 3, 4, 5], 0))\nprint(find_k_product([1, 2, 3, 4, 5], 4))\nprint(find_k_product([1, 2, 3, 4, 5], 5))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return reduce(lambda x, y: x ^ y, nums)\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = s.lower()\n        s = ''.join(filter(str.isalnum, s))\n        return s == s[::-1]\n<file_sep>/python/leetcode/easy/104_maximum_depth_of_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t\tif N==0 or K==0:\n\t\t\treturn 0\n\t\tif N==K:\n\t\t\treturn 1\n\t\tif N<K:\n\t\t\treturn 0\n\t\treturn No_of_cubes(N-K,K)+No_of_cubes(N,K-1)\n\nprint(No_of_cubes(10,3))\n<file_sep>/Python/Recursion/Tower_of_Hanoi.py\n\"\"\"\nTower of Hanoi\n\"\"\"\ndef Tower_of_Hanoi(n,source,dest,aux):\n\tif n==1:\n\t\tprint(\"Move disk 1 from source to destination\")\n\t\treturn\n\tTower_of_Hanoi(n-1,source,aux,dest)\n\tprint(\"Move disk\",n,\"from source to destination\")\n\tTower_of_Hanoi(n-1,aux,dest,source)\n\nTower_of_Hanoi(3,\"A\",\"C\",\"B\")\n<file_sep>/Python/Recursion/Tower_of_Hanoi_2.py\n\"\"\"\nTower of Hanoi\n\"\"\"\ndef Tower_of_Hanoi(n,source,dest,aux):\n\tif n==1:\n\t\tprint(\"Move disk 1 from source to destination\")\n\t\treturn\n\tTower_of_Hanoi(n-1,source,aux,dest)\n\tprint(\"Move disk\",n,\"from source to destination\")\n\tTower_of_Hanoi(n-1,aux,dest,source)\n\ndef Tower_of_Hanoi_2(n,source,dest,aux):\n\tif n==1:\n\t\tprint(\"Move disk 1 from source to destination\")\n\t\treturn\n\tif n==2:\n\t\tprint(\"Move disk 1 from source to aux\")\n\t\tprint(\"Move disk 2 from source to destination\")\n\t\tprint(\"Move disk 1 from aux to destination\")\n\t\treturn\n\tTower_of_Hanoi_2(n-1,source,aux,dest)\n\tprint(\"Move disk\",n,\"from source to destination\")\n\tTower_of_Hanoi_2(n-1,aux,dest,source)\n\nTower_of_Hanoi_2("}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\treturn re.split(r'[A-Z]', text)\n\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorlD'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorld'))\nprint"}
{"ID": 47, "source": "MBPP:648", "prompt": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t", "predict": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t\tfor i in range(0,len(lst),2):\n\t\t\tlst[i],lst[i+1]=lst[i+1],lst[i]\n\t\treturn lst\n\nprint(exchange_elements([1,2,3,4,5,6,7,8,9]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius=float(input(\"Enter the radius of the circle: \"))\narea=math.pi*radius**2\nprint(\"Area of the circle is: \",area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name=input(\"Enter your first name: \")\nlast_name=input(\"Enter your last name: \")\nprint(last_name+\" \"+first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name=input(\"Enter your first name: \")\nlast_name=input(\"Enter your last name: \")\nprint(last_name[::-1]+\" \"+first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnum=input(\"Enter the"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t\tsum = 0\n\t\tfor i in range(m, n+1):\n\t\t\tsum += nums[i]\n\t\treturn sum\n\nprint(sum_Range_list([1,2,3,4,5,6,7,8,9,10], 2, 4))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1, 7):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1, 8):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t\tif n!=m:\n\t\t\treturn False\n\t\tfor i in range(n):\n\t\t\tif arr1[i]!=arr2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\narr1=[1,2,3,4,5]\narr2=[1,2,3,4,5]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array to the right by k steps, where k is non-negative.\n\nExample 1:\n\nInput: [1,2,3,4,5,6,7] and k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\"\"\"\ndef rotate(arr,n,k):\n\tfor i in range(k):\n\t\ttemp=arr[n-1]\n\t\tfor j in range(n-1,0,-1):\n\t\t\tarr[j]=arr[j-1]\n\t\tarr[0]=temp\n\treturn arr\n\narr=[1,2,3,4,5,6,7]\nn=len(arr)\nk=3\nprint(rotate(arr,n,k))\n<file_sep>/Python/Array/Array_Intersection.py\n\"\"\"\nGiven two arrays, write a function to compute their intersection.\n\nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nNote:\n\nEach element in the result should appear as many times as it shows in both arrays.\nThe result can be in any order.\nFollow up:"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\tif test_tup1 == test_tup2:\n\t\t\treturn True\n\t\telif test_tup1 in test_tup2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_subset((1,2,3), (1,2,3,4,5)))\nprint(check_subset((1,2,3), (1,2,3)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(check_subset((1,2,3), (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t\treturn [item for sublist in test_list for item in sublist]\n\nprint(matrix_to_list([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(test_list):\n\t\treturn max(test_list), min(test_list)\n\nprint(max_min([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\tfrom collections import defaultdict\n\t\td = defaultdict(list)\n\t\tfor k, v in l:\n\t\t\td[k].append(v)\n\t\treturn d\n\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5)]\nprint(grouping_dictionary(l))\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\tfrom collections import defaultdict\n\t\td = defaultdict(list)\n\t\tfor k, v in l:\n\t\t\td[k].append(v)\n\t\treturn d\n\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5)]\nprint(grouping_dictionary(l))\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\tfrom collections import defaultdict\n\t\td = defaultdict(list)\n\t\tfor k, v in l:\n\t\t\td[k].append(v)\n\t\treturn d\n\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5)]\nprint(grouping_dictionary(l))\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\tfrom collections import defaultdict\n\t\td = defaultdict(list)\n\t\tfor k, v in l:\n\t\t\td[k].append(v)\n\t\treturn d\n\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5)]\nprint(grouping_dictionary(l))\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\tfrom collections import defaultdict\n\t\td = defaultdict(list)\n\t\tfor k, v in l:\n\t\t\td[k].append(v)\n\t\treturn d\n\nl = [('a', 1), ('b', 2),"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t\treturn 2*(l+b)\n\nprint(rectangle_perimeter(10,20))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n123"}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1, n+1) : \n\t\t\tsum += i**5\n\t\treturn sum\n\nprint(fifth_Power_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j"}
{"ID": 55, "source": "MBPP:656", "prompt": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t\tsum = 0\n\t\tfor i in range(n): \n\t\t\tsum += abs(a[i] - b[i]) \n\t\treturn sum \n\na = [1, 2, 3, 4, 5] \nb = [10, 11, 12, 13, 14] \nn = len(a) \nprint(find_Min_Sum(a, b, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 56, "source": "MBPP:657", "prompt": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t\n    # Initialize result \n    res = 1\n  \n    # Multiply to get first \n    # digit of factorial \n    for i in range(1, n + 1) : \n        res = res * i \n  \n    # Return first digit \n    return res \n  \n# Driver Code \nn = 10\nprint(first_Digit(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t\tmax_count = 0\n\t\tmax_item = None\n\t\tfor item in list1:\n\t\t\tcount = list1.count(item)\n\t\t\tif count > max_count:\n\t\t\t\tmax_count = count\n\t\t\t\tmax_item = item\n\t\treturn max_item\n\nprint(max_occurrences([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t\n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated \n\nlist1 = [10, 20, 30, 20, 20, 30, 40,  \n         50, -20, 60, 60, -20, -20] \nprint (Repeat(list1)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python function to print the sum of all the numbers in a list.\n\"\"\"\ndef sum(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total\nprint(sum((8, 2, 3, 0, 7)))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python function to print the largest number in a list.\n\"\"\"\ndef max(numbers):\n    max = numbers[0]\n    for a in numbers:\n        if a > max:\n            max = a\n    return max\nprint(max([1, 2, 3, 4, 5]))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python function to print the smallest number in a list.\n\"\"\"\ndef min(numbers):\n    min = numbers[0]\n    for a in numbers:\n        if a < min:\n            min = a\n    return min\nprint(min([1, 2, 3, 4, 5]))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python function to print the second largest number in a list.\n\"\"\"\ndef second_max(numbers):\n    max = numbers[0]\n    second_max = numbers[0]\n    for a in numbers:\n        if a > max:\n            second_max = max\n            max = a\n        elif a > second_max and a!= max:\n            second_max = a\n    return second_max\nprint(second_max([1, 2, 3"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t\tif l1 > r2 or l2 > r1: \n\t\t\tprint(\"No common points\") \n\t\telse: \n\t\t\tprint(\"Common points are\") \n\t\t\tfor i in range(l1, r1 + 1): \n\t\t\t\tfor j in range(l2, r2 + 1): \n\t\t\t\t\tif i!= j: \n\t\t\t\t\t\tprint(i, j) \n\nl1 = 1\nr1 = 10\nl2 = 11\nr2 = 20\nfind_Points(l1,r1,l2,r2) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n\nn = 10\nprint(sum_of_n_numbers(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n\nn = 10\nprint(sum_of_n_numbers(n))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n\nn = 10\nprint(sum_of_n_numbers(n))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n\nn = 10\nprint(sum_of_n_numbers(n))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_numbers(n):\n    sum ="}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t\n    # Initialize result \n    res = 0\n    for i in range(n - 2): \n        res = max(res, arr[i] + arr[i + 1] + arr[i + 2]) \n  \n    return res \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(max_sum_of_three_consecutive(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the maximum product of two integers in the array.\n\"\"\"\ndef max_product_of_two(arr, n): \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the product of last two elements \n    return arr[n - 1] * arr[n - 2] \n\n# Driver code \narr = [10, 3, 5, 6, 20] \nn = len(arr) \nprint(max_product_of_two(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/10.py\n\"\"\"\nGiven an array of integers, find the maximum product of three integers in the array.\n\"\"\"\ndef max_product_of_three(arr, n): \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the product of last three elements \n    return arr[n - 1] * arr[n - 2] * arr[n - 3] \n\n# Driver code \narr = [10, 3, 5, 6, 20] \nn = len(arr) \nprint(max_product_of_three(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/11.py\n\"\"\"\nGiven an array of integers, find the maximum product of three integers in the array.\n\"\"\"\ndef max_product_of_three(arr, n): \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the product of last three elements \n    return arr[n - 1] * arr[n"}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\nprint(sorted_dict({'b': 100, 'a': 50, 'c': 60}))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(100000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t\n    # If y is 0, then k can be any multiple of x \n    if (y == 0): \n        return n \n  \n    # Initialize result \n    res = 0\n  \n    # Find the maximum value of k \n    for i in range(1, n + 1): \n        if ((i % x) == y): \n            res = max(res, i) \n  \n    return res \n  \n# Driver code \nn = 10\nx = 3\ny = 2\nprint(find_max_val(n, x, y)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\tsum = 0\n\t\tcount = 0\n\t\tfor i in range(2, n+1, 2) : \n\t\t\tsum += i \n\t\t\tcount += 1\n\t\treturn sum / count \n\nn = int(input(\"Enter a number : \"))\nprint(\"Average of even numbers till\", n, \"is\", average_Even(n))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n\nfor i in range(1, 6) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(i) : \n\t\tprint(\"*\", end = \"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t\tnum_list.append(num_list.pop(0))\n\t\treturn num_list\n\nprint(move_last([1,2,3,4,5]))\nprint(move_last([1,2,3,4,5,6]))\nprint(move_last([1,2,3,4,5,6,7]))\nprint(move_last([1,2,3,4,5,6,7,8]))\nprint(move_last([1,2,3,4,5,6,7,8,9]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(move_last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(move_last([1,2,3,4,5,6,7,8,9,"}
{"ID": 65, "source": "MBPP:666", "prompt": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t\tcount = 0\n\t\tfor i in string:\n\t\t\tif i == char:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_char(\"hello\",\"l\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t\n    # traverse the given string \n    for i in string: \n        # if i is vowel \n        if i in vowels: \n            return True\n    return False\n\n# Driver Code \nstring = \"geeksforgeeks\"\nvowels = 'aeiou'\nif Check_Vow(string, vowels): \n    print(\"Vowels present in the string\") \nelse: \n    print(\"Vowels not present in the string\") \n# -\n\n# # 10. Write a python function to check whether a string is palindrome or not.\n\n# +\n\"\"\"\nWrite a python function to check whether a string is palindrome or not.\n\"\"\"\ndef isPalindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n\nprint(isPalindrome('madam')) \nprint(isPalindrome('geeks')) \n# -\n\n# # 11. Write a python function to check whether a string is an anagram of another string or not.\n\n# +\n\"\"\"\nWrite a python function to check whether a string is an anagram of another string or not.\n\"\"\"\ndef isAnagram(str1, str2): \n    return sorted(str1) == sorted(str2)\n\nprint(isAnagram(\"geeksforgeeks\", \"forgeeksgeeks\")) \nprint(isAnagram(\"abcd\", \"dcba\")) \n# -\n\n# # 12. Write a python function to check whether a string is a pangram or not.\n\n# +\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef isPangram(string): \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet: \n        if char not in string.lower(): \n            return False\n    return True\n\nprint(isPangram(\"The quick brown fox jumps over the lazy dog\")) \nprint(isPangram(\"The five boxing wizards jump quickly\")) \n# -\n\n# # 13. Write a python function to find"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\n    string = list(string) \n    for i in range(len(string)): \n        if string[i] == char: \n            string[i] = '$'\n    return ''.join(string) \n\nif __name__ == '__main__':\n    string = \"geeksforgeeks\"\n    char = 'e'\n    print(replace(string, char))\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\"\"\"\ndef binarySearch(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n        else: \n            return binarySearch(arr, mid + 1, r, x) \n    else: \n        return -1\n\nif __name__ == '__main__':\n    arr = [ 2, 3, 4, 10, 40 ] \n    x = 10\n    result = binarySearch(arr, 0, len(arr)-1, x) \n    if result!= -1: \n        print(\"Element is present at index % d\" % result) \n    else: \n        print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\"\"\"\ndef bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\nif __name__ == '__main__':\n    arr = [64, 34, 25, 12, 22, 11, 90] \n    bubbleSort(arr) \n    print(\"Sorted array is:\") \n    for i in range(len(arr)): \n        print(\"% d\" % arr[i])\n<file_sep>/Python/Algorithms/Searching/LinearSearch.py\n\"\"\"\nLinear Search\n\"\"\"\ndef linearSearch(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n\nif __name__ == '__main__':\n    arr"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t\n    # re.compile() creates regular expression character class [0-9] \n    # that matches digits from 0 to 9. \n    regex = re.compile('^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\n                       '(\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$') \n      \n    # Pass the regular expression \n    # and the string in search() method \n    if(regex.search(Ip) == None): \n        print(\"Invalid IP address\") \n    else: \n        print(\"Valid IP address\") \n  \n# Driver Code \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.168.127.12\"\ncheck_IP(Ip) \nIp = \"192.16"}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t\tfor i in range(len(nums)-1):\n\t\t\tif nums[i] < nums[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(decreasing_trend([1,2,3,4,5]))\nprint(decreasing_trend([5,4,3,2,1]))\nprint(decreasing_trend([1,1,1,1,1]))\nprint(decreasing_trend([5,4,3,2,2]))\nprint(decreasing_trend([1,2,3,2,1]))\nprint(decreasing_trend([1,2,3,4,3]))\nprint(decreasing_trend([1,2,3,4,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(decreasing_trend([1,2,"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\treturn n | (n + 1) \n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit(n): \n\t\treturn n & (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_Right_most_Unset_Bit(n): \n\t\treturn n & (n + 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit(n): \n\t\treturn n & (n + 1) \n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_Right_most_Unset_Bit(n): \n\t\treturn n | (n + 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_Right_most_Unset_Bit(n): \n\t\treturn n & (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit(n): \n\t\treturn n & (n + 1) \n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_Right_most_Unset_Bit(n): \n\t\treturn n | (n + 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_Right_most_Unset_Bit(n): \n\t\treturn n & (n - 1) \n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_Right_most_Set_Bit"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t\tif num1 > num2 and num1 > num3: \n\t\t\treturn num1 \n\t\telif num2 > num1 and num2 > num3: \n\t\t\treturn num2 \n\t\telse: \n\t\t\treturn num3\n\nprint(max_of_three(10,20,30))\nprint(max_of_three(10,20,10))\nprint(max_of_three(10,10,30))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t\n    # Converting integer list to string list \n    s = [str(i) for i in list] \n    \n    # Join list items using join() \n    res = int(\"\".join(s)) \n    \n    return(res) \n\nlist = [1, 3, 5, 7, 9] \nprint(convert(list)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t\treturn \" \".join(set(string.split(\" \")))\n\nprint(remove_duplicate(\"hello world hello world\"))\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\n\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef print_list(self):\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t\tprint(temp.data)\n\t\t\ttemp = temp.next\n\n\tdef push(self, data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_after(self, prev_node, data):\n\t\tif prev_node is None:\n\t\t\tprint(\"The given previous node must in the linked list\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef append(self, data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast = self.head\n\t\twhile last.next:\n\t\t\tlast = last.next\n\t\tlast.next = new_node\n\n\tdef delete_node(self, key):\n\t\ttemp = self.head\n\t\tif temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tself.head = temp.next\n\t\t\t\ttemp = None\n\t\t\t\treturn\n\t\twhile temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tbreak\n\t\t\tprev = temp\n\t\t\ttemp = temp.next\n\t\tif temp is None:\n\t\t\treturn\n\t\tprev.next = temp.next\n\t\ttemp = None\n\n\tdef delete_node_at_position(self, position):\n\t\tif self.head is None:\n\t\t\treturn\n\t\ttemp = self.head\n\t\tif position == 0:\n\t\t\tself.head = temp.next\n\t\t\ttemp = None\n\t\t\treturn\n\t\tfor i in range(position - 1):\n\t\t\ttemp = temp.next\n\t\t\tif temp is"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t\tif m <= x + y <= n:\n\t\t\treturn 20\n\t\telse:\n\t\t\treturn x + y\n\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\nprint(sum_nums(10, 11, 20, 30))\n"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t\treturn re.sub(r'[^a-zA-Z0-9]', '', text1)\n\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 25 years old.\"))\nprint(remove_extra_char(\"I am 2"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t\tif a+b>c and a+c>b and b+c>a:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint validity_triangle(1,2,3)\nprint validity_triangle(1,2,4)\nprint validity_triangle(1,2,5)\nprint validity_triangle(1,2,6)\nprint validity_triangle(1,2,7)\nprint validity_triangle(1,2,8)\nprint validity_triangle(1,2,9)\nprint validity_triangle(1,2,10)\nprint validity_triangle(1,2,11)\nprint validity_triangle(1,2,12)\nprint validity_triangle(1,2,13)\nprint validity_triangle(1,2,14)\nprint validity_triangle(1,2,15)\nprint validity_triangle(1,2,16)\nprint validity_triangle(1,2,17)\nprint validity_triangle(1,2,18)\nprint validity_triangle(1,2,19)\nprint validity_triangle(1,2,20)\nprint validity_triangle(1,2,21)\nprint validity_triangle(1,2,22)\nprint validity_triangle(1,2,23)\nprint validity_triangle(1,2,24)\nprint validity_triangle(1,2,25)\nprint validity_triangle(1,2,26)\nprint validity_triangle(1,2,27)\nprint validity_triangle(1,2,28)\nprint validity_triangle(1,2,29)\nprint validity_triangle(1,2,30)\nprint validity_triangle(1,2,31)\nprint validity_triangle(1,2,32)\nprint validity_triangle(1,2,33)\nprint validity_triangle(1,2,34)\nprint validity_triangle(1,2,35)\nprint validity_triangle(1,2,36)\nprint validity_triangle(1,2,37)\nprint validity_triangle(1,2,38)\nprint validity_triangle(1,2,39)\nprint validity_triangle"}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t\treturn str1.replace(\" \",\"\")\n\nprint(remove_spaces(\"Hello World\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python program to print the"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t\tif key in ditionary:\n\t\t\treturn ditionary[key]\n\t\telse:\n\t\t\treturn \"Key not found\"\n\nd = {1:10,2:20,3:30,4:40}\nprint(access_key(d,1))\nprint(access_key(d,5))\n<file_sep>/Python/Python_Assignment/Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a Python program to sum all the items in a list.\n\"\"\"\ndef sum_list(list):\n\tsum = 0\n\tfor i in list:\n\t\tsum = sum + i\n\treturn sum\n\nlist = [1,2,3,4,5]\nprint(sum_list(list))\n<file_sep>/Python/Python_Assignment/Assignment_1/Assignment_1_10.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef largest_number(list):\n\tmax = list[0]\n\tfor i in list:\n\t\tif i > max:\n\t\t\tmax = i\n\treturn max\n\nlist = [1,2,3,4,5]\nprint(largest_number(list))\n<file_sep>/Python/Python_Assignment/Assignment_1/Assignment_1_11.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_number(list):\n\tmin = list[0]\n\tfor i in list:\n\t\tif i < min:\n\t\t\tmin = i\n\treturn min\n\nlist = [1,2,3,4,5]\nprint(smallest_number(list))\n<file_sep>/Python/Python_Assignment/Assignment_1/Assignment_1_12.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_string(list):\n\tcount = 0\n\tfor i in list:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount = count + 1\n\treturn count\n\nlist = ['abc','xyz','aba','1221']\nprint(count_string(list"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t\tfor i in range(len(nums)-1):\n\t\t\tif nums[i] > nums[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(increasing_trend([1,2,3,4,5]))\nprint(increasing_trend([5,4,3,2,1]))\nprint(increasing_trend([1,1,1,1]))\nprint(increasing_trend([5,1,2,3,4]))\nprint(increasing_trend([1,2,3,4,5,6]))\nprint(increasing_trend([1,2,3,4,5,6,7]))\nprint(increasing_trend([1,2,3,4,5,6,7,8]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t\n    # Corner cases \n    if (n <= 1): \n        return n \n  \n    # Check from 2 to n-1 \n    i = 2\n    while (i * i <= n): \n        if (n % i == 0): \n            return i \n        i += 1\n    return n \n\nprint(smallest_Divisor(10))\nprint(smallest_Divisor(15))\nprint(smallest_Divisor(21))\nprint(smallest_Divisor(2))\nprint(smallest_Divisor(1))\nprint(smallest_Divisor(0))\nprint(smallest_Divisor(100))\nprint(smallest_Divisor(1000))\nprint(smallest_Divisor(10000))\nprint(smallest_Divisor(100000))\nprint(smallest_Divisor(1000000))\nprint(smallest_Divisor(10000000))\nprint(smallest_Divisor(100000000))\nprint(smallest_Divisor(1000000000))\nprint(smallest_Divisor(10000000000))\nprint(smallest_Divisor(100000000000))\nprint(smallest_Divisor(1000000000000))\nprint(smallest_Divisor(10000000000000))\nprint(smallest_Divisor(100000000000000))\nprint(smallest_Divisor(1000000000000000))\nprint(smallest_Divisor(10000000000000000))\nprint(smallest_Divisor(100000000000000000))\nprint(smallest_Divisor(1000000000000000000))\nprint(smallest_Divisor(10000000000000"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n<file_sep>/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/python_programs/"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t\n    # Base Cases \n    if (n == 0 or n == 1 or n == 2 or n == 3) : \n        return False\n  \n    # Check from 1 to n/2  \n    for i in range(1, int(n / 2) + 1) : \n        j = n - i * i \n        if (isSquare(j)) : \n            return True\n  \n    return False\n  \n# Returns true if n is a perfect square \ndef isSquare(n) : \n    s = int(math.sqrt(n)) \n    return s * s == n \n  \n# Driver Code \nn = 13 \nif (sum_Square(n)) : \n    print(\"Yes\") \nelse : \n    print(\"No\") <file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1\n\nprint(firstMissingPositive([3, 4, -1, 1]))<file_sep>/Python/Array/2.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t\tcount = 0\n\t\tfor i in str: \n\t\t\tif i == x: \n\t\t\t\tcount += 1\n\t\treturn count \nstr = \"geeksforgeeks\"\nx = 'e'\nprint(count_Char(str,x))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a,b,c):\n\tif a==b==c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\nprint(sum_three(1,2,3))\nprint(sum_three(3,3,3))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_Is(str):\n\tif str[:2] == \"Is\":\n\t\treturn str\n\telse:\n\t\treturn \"Is\"+str\nprint(add_Is(\"Array\"))\nprint(add_Is(\"IsArray\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\ndef string_copies(str,n):\n\treturn str*n\nprint(string_copies(\"Hi\",3))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to find whether a given number (accept from the user"}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code \nn = 10\nprint(sum_Of_Primes(n)) \n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code \nn = 10\nprint(sum_Of_Primes(n)) \n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code \nn = 10\nprint(sum_Of_Primes(n)) \n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code \nn = 10\nprint(sum_Of_Primes(n)) \n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code \nn = 10\nprint(sum_Of_Primes(n)) \n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\n    # Initialize sum \n    sum = 0\n    for i in range(1, n + 1): \n        if isPrime(i): \n            sum += i \n    return sum \n  \n# Driver code "}
{"ID": 85, "source": "MBPP:686", "prompt": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t\tfreq_dict = {}\n\t\tfor i in test_tup:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\nprint(freq_element((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t\tif b == 0:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn recur_gcd(b, a % b)\n\nprint(recur_gcd(12, 16))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn (a**2+b**2)**0.5\n\nprint(len_complex(3,4))\nprint(len_complex(0,1))\nprint(len_complex(1,0))\nprint(len_complex(0,0))\nprint(len_complex(1,1))\nprint(len_complex(1,2))\nprint(len_complex(2,1))\nprint(len_complex(2,2))\nprint(len_complex(2,3))\nprint(len_complex(3,2))\nprint(len_complex(3,3))\nprint(len_complex(3,4))\nprint(len_complex(4,3))\nprint(len_complex(4,4))\nprint(len_complex(4,5))\nprint(len_complex(5,4))\nprint(len_complex(5,5))\nprint(len_complex(5,6))\nprint(len_complex(6,5))\nprint(len_complex(6,6))\nprint(len_complex(6,7))\nprint(len_complex(7,6))\nprint(len_complex(7,7))\nprint(len_complex(7,8))\nprint(len_complex(8,7))\nprint(len_complex(8,8))\nprint(len_complex(8,9))\nprint(len_complex(9,8))\nprint(len_complex(9,9))\nprint(len_complex(9,10))\nprint(len_complex(10,9))\nprint(len_complex(10,10))\nprint(len_complex(10,11))\nprint(len_complex(11,10))\nprint(len_complex(11,11))\nprint(len_complex(11,12))\nprint(len_complex(12,11))\nprint(len_complex(12,12))\nprint(len_complex(12,13))\nprint(len_complex(13,12))\nprint(len_complex(13,13))\nprint(len_complex(13,14))\nprint(len_complex(14,1"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\tif n == 1:\n\t\t\treturn 0\n\t\tif arr[0] == 0:\n\t\t\treturn -1\n\t\tjumps = [float('inf')] * n\n\t\tjumps[0] = 0\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(0, i):\n\t\t\t\tif i <= j + arr[j] and jumps[j]!= float('inf'):\n\t\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\tif jumps[n - 1] == float('inf'):\n\t\t\treturn -1\n\t\treturn jumps[n - 1]\n\narr = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]\nn = len(arr)\nprint(min_jumps(arr, n))\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\tif n == 1:\n\t\t\treturn 0\n\t\tif arr[0] == 0:\n\t\t\treturn -1\n\t\tjumps = [float('inf')] * n\n\t\tjumps[0] = 0\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(0, i):\n\t\t\t\tif i <= j + arr[j] and jumps[j]!= float('inf'):\n\t\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\tif jumps[n - 1] == float('inf'):\n\t\t\treturn -1\n\t\treturn jumps[n - 1]\n\narr = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]\nn = len(arr)\nprint(min_jumps(arr, n))\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif len(nums) == 0:\n\t\t\treturn 0\n\t\tif len(nums) == 1:\n\t\t\treturn nums[0]\n\t\treturn nums[0] * mul_consecutive_nums(nums[1:])\n\nprint(mul_consecutive_nums([1,2,3,4,5]))\nprint(mul_consecutive_nums([1,2,3,4,5,6]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,"}
{"ID": 90, "source": "MBPP:691", "prompt": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t", "predict": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t\treturn {i[1]: i[0] for i in test_list}\n\n# Driver Code\ntest_list = [(\"a\", 1), (\"b\", 2), (\"c\", 1), (\"d\", 2), (\"e\", 3)]\nprint(group_element(test_list))\n<file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t\tif N < 0: \n\t\t\treturn 0\n\t\tif N == 0: \n\t\t\treturn 1\n\t\tif N == 1: \n\t\t\treturn 1\n\t\tif N == 2: \n\t\t\treturn 2\n\t\tif N == 3: \n\t\t\treturn 6\n\t\tif N == 4: \n\t\t\treturn 4\n\t\tif N == 5: \n\t\t\treturn 0\n\t\tif N == 6: \n\t\t\treturn 0\n\t\tif N == 7: \n\t\t\treturn 2\n\t\tif N == 8: \n\t\t\treturn 0\n\t\tif N == 9: \n\t\t\treturn 8\n\t\tif N == 10: \n\t\t\treturn 0\n\t\tif N == 11: \n\t\t\treturn 0\n\t\tif N == 12: \n\t\t\treturn 4\n\t\tif N == 13: \n\t\t\treturn 2\n\t\tif N == 14: \n\t\t\treturn 0\n\t\tif N == 15: \n\t\t\treturn 0\n\t\tif N == 16: \n\t\t\treturn 6\n\t\tif N == 17: \n\t\t\treturn 4\n\t\tif N == 18: \n\t\t\treturn 0\n\t\tif N == 19: \n\t\t\treturn 0\n\t\tif N == 20: \n\t\t\treturn 0\n\t\tif N == 21: \n\t\t\treturn 2\n\t\tif N == 22: \n\t\t\treturn 0\n\t\tif N == 23: \n\t\t\treturn 0\n\t\tif N == 24: \n\t\t\treturn 4\n\t\tif N == 25: \n\t\t\treturn 0\n\t\tif N == 26: \n\t\t\treturn 0\n\t\tif N == 27: \n\t\t\treturn 6\n\t\tif N == 28: \n\t\t\treturn 4\n\t\tif N == 29: \n\t\t\treturn 0\n\t\tif N == 30: \n\t\t\treturn 0\n\t\tif N == 31: \n\t\t\treturn 2\n\t\tif N == 32: \n\t\t\treturn 0\n\t\tif N == 33: \n\t\t\treturn 0\n\t\tif N == 34: \n\t\t\treturn 4\n\t\tif N == 35: \n\t\t\treturn 0\n\t\tif N == "}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t\treturn re.sub(' +','', text1)\n\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces(\"Hello  World  \"))\nprint(remove_multiple_spaces"}
{"ID": 93, "source": "MBPP:694", "prompt": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t\treturn set(test_dict.values())\n\nprint(extract_unique({'a': 1, 'b': 2, 'c': 2}))\nprint(extract_unique({'a': 1, 'b': 2, 'c': 3}))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current date.\n\"\"\"\nimport datetime\nprint(datetime.date.today())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the current date and time in specific format.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/python/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the current date and time in specific format.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/python/python_basics/python"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(check_greater(test_tup1, test_tup2))\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(check_greater(test_tup1, test_tup2))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the name of the operating system platform.\n\"\"\"\nimport platform\nprint(platform.system())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the system processor architecture.\n\"\"\"\nimport platform\nprint(platform.machine())\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the maximum and minimum limits for a system.\n\"\"\"\nimport sys\nprint(sys.maxsize)\nprint("}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\nprint(zip_list(list1,list2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname"}
{"ID": 96, "source": "MBPP:697", "prompt": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t\treturn len(list(filter(lambda x: x%2==0, array_nums)))\n\nprint(count_even([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {('a', 1): 10, ('b', 2): 20, ('c', 3): 30, ('d', 4): 40, ('e', 5): 50}\nprint(sort_dict_item(test_dict))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter radius of circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\tcount = 0\n\t\tfor i in range(len(str1)) : \n\t\t\tif str1[i]!= str2[i] : \n\t\t\t\tcount += 1\n\t\treturn count \n\nstr1 = \"1100\"\nstr2 = \"0101\"\nprint(min_Swaps(str1,str2))<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1) : \n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[0]\n\tfor i in range(n-1) : \n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1) : \n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\ndef reverse(arr,start,end) : \n\twhile start < end : \n\t\ttemp = arr[start]\n\t\tarr[start] = arr[end]\n\t\tarr[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\ndef rotate_2(arr,n) : \n\treverse(arr,0,n-1)\n\treverse(arr,0,n-2)\n\treverse(arr,"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t\tcount = 0\n\t\tfor i in li:\n\t\t\tif i >= min and i <= max:\n\t\t\t\tcount += 1\n\t\treturn count\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_range_in_list(li, 2, 8))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic substring of a given string.\n\"\"\"\ndef longest_palindromic_substring(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest substring with same letters after deletion of any\ncharacter.\n\"\"\"\ndef longest_substring_with_same_letters_after_deletion(s):\n\t\n\n\n\"\"\"\nWrite a function to find the longest"}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t\tarr.sort()\n\t\ti = 0\n\t\tj = n-1\n\t\twhile i<j:\n\t\t\tif arr[j]-arr[i]>k:\n\t\t\t\tj-=1\n\t\t\telse:\n\t\t\t\ti+=1\n\t\treturn n-i\n\narr = [1, 4, 45, 6, 10, 19]\nn = len(arr)\nk = 10\nprint(removals(arr, n, k))\n<file_sep>/Arrays/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tif arr[i]<=0:\n\t\t\tarr[i] = n+1\n\tfor i in range(n):\n\t\ta = abs(arr[i])\n\t\tif a<=n:\n\t\t\tarr[a-1] = -abs(arr[a-1])\n\tfor i in range(n):\n\t\tif arr[i]>0:\n\t\t\treturn i+1\n\treturn n+1\n\narr = [3, 4, -1, 1]\nprint(firstMissingPositive(arr))\n<file_sep>/Arrays/10.py\n\"\"\"\nGiven an array of integers, find the first repeating element in it. We need to find the element that occurs more than once and whose index of first occurrence is smallest.\n\"\"\"\ndef firstRepeating(arr, n):\n\tfor i in range(n):\n\t\tif arr[abs(arr[i])-1]<0:\n\t\t\treturn abs(arr[i])\n\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [10, 5, 3, 4, 3, 5, "}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t\tif x in d.keys():\n\t\t\tprint(\"Key is present in the dictionary\")\n\t\telse:\n\t\t\tprint(\"Key is not present in the dictionary\")\n\nd = {1:10,2:20,3:30,4:40,5:50,6:60}\nis_key_present(d,5)\nis_key_present(d,9)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(5,10):\n\tfor j in range(i,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(5,10):\n\tfor j in range(i"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 1/n + harmonic_sum(n-1)\n\nprint(harmonic_sum(10))\n<file_sep>/python/recursion/factorial.py\n\"\"\"\nWrite a function to calculate the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\nprint(factorial(5))\n<file_sep>/python/recursion/fibonacci.py\n\"\"\"\nWrite a function to calculate the nth fibonacci number.\n\"\"\"\ndef fibonacci(n):\n\tif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n<file_sep>/python/recursion/reverse_string.py\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\ndef reverse_string(s):\n\tif len(s) == 1:\n\t\treturn s\n\telse:\n\t\treturn reverse_string(s[1:]) + s[0]\n\nprint(reverse_string(\"hello\"))\n<file_sep>/python/recursion/palindrome.py\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef palindrome(s):\n\tif len(s) == 1:\n\t\treturn True\n\telif s[0] == s[-1]:\n\t\treturn palindrome(s[1:-1])\n\telse:\n\t\treturn False\n\nprint(palindrome(\"racecar\"))\n<file_sep>/python/recursion/sum_digits.py\n\"\"\"\nWrite a function to calculate the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\tif n < 10:\n\t\treturn n\n\telse:\n\t\treturn n % 10 + sum_digits(n // 10)\n\nprint(sum_digits(1234))\n<file_sep>/python/recursion/sum_numbers.py\n\"\"\"\nWrite a function to calculate the sum of all numbers between 1 and n.\n\"\"\"\ndef sum_numbers(n):\n\tif n == 1:\n\t\t"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t\tlist1.sort(key=lambda x: (len(x), x))\n\t\treturn list1\n\nprint(sort_sublists([[1, 3], [3, 2], [2, 1]]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\nfor i in range(0, 151):\n\tprint(i)\n\n\"\"\"\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\"\"\"\nfor i in range(5, 1001, 5):\n\tprint(i)\n\n\"\"\"\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\"\"\"\nfor i in range(1, 101):\n\tif i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telif i % 5 == 0:\n\t\tprint(\"Coding\")\n\telse:\n\t\tprint(i)\n\n\"\"\"\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\"\"\"\nsum = 0\nfor i in range(0, 500001, 2):\n\tsum += i\nprint(sum)\n\n\"\"\"\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\"\"\"\nfor i in range(2018, 0, -4):\n\tprint(i)\n\n\"\"\"\nFlexible Counter - Set three variables: lowNum, highNum, mult. Starting at lowNum and going through highNum, print only the integers that are a multiple of mult. For example, if lowNum=2, highNum=9, and mult=3, the loop should print 3, 6, 9 (on successive lines)\n\"\"\"\nlowNum = 2\nhighNum = 9\nmult = 3\nfor i in range(lowNum, highNum + 1):\n\tif i % mult =="}
{"ID": 105, "source": "MBPP:706", "prompt": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t", "predict": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t\n    # Sort both arrays \n    arr1.sort() \n    arr2.sort() \n  \n    # Traverse both arrays \n    i = 0\n    j = 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr1[i] > arr2[j]: \n            return False\n        else: \n            i += 1\n            j += 1\n  \n    # If we reach here, then all elements \n    # of arr1[] are matched in arr2[] \n    return True\n\narr1 = [11, 1, 13, 21, 3, 7] \nm = len(arr1) \narr2 = [11, 3, 7, 1] \nn = len(arr2) \nif is_subset(arr1, m, arr2, n): \n    print(\"arr2[] is subset of arr1[] \") \nelse: \n    print(\"arr2[] is not a subset of arr1[] \") \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find if the array contains any duplicates.\n\nYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n\nExample 1:\n\nInput: [1,2,3,1]\nOutput: true\nExample 2:\n\nInput: [1,2,3,4]\nOutput: false\nExample 3:\n\nInput: [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\"\"\"\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums)!= len(set(nums))\n<file_sep>/Python/Array/10.py\n\"\"\"\nGiven an array of integers, find if the array contains any duplicates.\n\nYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n\nExample 1:\n\nInput: [1,2,3,1]\nOutput: true\nExample 2:\n\nInput: [1,2,3,4]\nOutput: false\nExample 3:\n\nInput: [1,"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count \n\ndef count_Set_Bits_2(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn &= (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_3(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_4(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_5(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_6(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_7(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_8(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_9(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_10(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\ndef count_Set_Bits_11(n) : \n\t\tcount = 0\n\t\twhile (n) : \n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count \n\n"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\n    list1=[] \n    list1[:0]=string \n    return list1 \n      \n# Driver code \nstring = 'geeksforgeeks'\nprint(Convert(string)) \n\n# +\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(string): \n\t\n    list1=[] \n    list1[:0]=string \n    return list1 \n      \n# Driver code \nstring = 'geeksforgeeks'\nprint(Convert(string)) \n\n# +\n\"\"\"\nWrite a python function to convert a list to a tuple.\n\"\"\"\ndef Convert(string): \n\t\n    list1=[] \n    list1[:0]=string \n    return tuple(list1) \n      \n# Driver code \nstring = 'geeksforgeeks'\nprint(Convert(string)) \n\n# +\n\"\"\"\nWrite a python function to convert a tuple to a list.\n\"\"\"\ndef Convert(string): \n\t\n    list1=[] \n    list1[:0]=string \n    return list1 \n      \n# Driver code \nstring = 'geeksforgeeks'\nprint(Convert(string)) \n\n# +\n\"\"\"\nWrite a python function to convert a tuple to a string.\n\"\"\"\ndef Convert(string): \n\t\n    list1=[] \n    list1[:0]=string \n    return tuple(list1) \n      \n# Driver code \nstring = 'geeksforgeeks'\nprint(Convert(string)) \n\n# +\n\"\"\"\nWrite a python function to convert a tuple to a dictionary.\n\"\"\"\ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \n# Driver code \ntup = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"b\", 4)] \ndi = {} \nprint(Convert(tup, di)) \n\n# +\n\"\"\"\nWrite a python function to convert a dictionary to a tuple.\n\"\"\"\ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \n# Driver code \ntup = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"b\", 4)] \ndi = {} \nprint(Convert(tup, di)) \n\n# +\n\"\"\"\n"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t\tunique_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i not in unique_dict:\n\t\t\t\tunique_dict[i] = 1\n\t\t\telse:\n\t\t\t\tunique_dict[i] += 1\n\t\treturn unique_dict\n\ntest_list = (1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\treturn test_tup[1:-1]\n\n\"\"\"\nWrite a function to access the middle data of the given tuple record.\n\"\"\"\ndef middle(test_tup):\n\t\t"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t\teven_sum = 0\n\t\todd_sum = 0\n\t\twhile n > 0: \n\t\t\tdigit = n % 10\n\t\t\tif digit % 2 == 0: \n\t\t\t\teven_sum += digit \n\t\t\telse: \n\t\t\t\todd_sum += digit \n\t\t\tn //= 10\n\t\treturn even_sum == odd_sum\n\nn = int(input(\"Enter a number: \"))\nif product_Equal(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers.\n\"\"\"\n\nn = int(input(\"Enter the number of natural numbers: \"))\nsum = 0\nfor i in range(1, n+1):\n    sum += i\nprint(\"Sum of first\", n, \"natural numbers is\", sum)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using recursion.\n\"\"\"\n\ndef sum_of_n_natural_numbers(n):\n    if n <= 1:\n        return n\n    else:\n        return n + sum_of_n_natural_numbers(n-1)\n\nn = int(input(\"Enter the number of natural numbers: \"))\nprint(\"Sum of first\", n, \"natural numbers is\", sum_of_n_natural_numbers(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using while loop.\n\"\"\"\n\nn = int(input(\"Enter the number of natural numbers: \"))\nsum = 0\ni = 1\nwhile i <= n:\n    sum += i\n    i += 1\nprint(\"Sum of first\", n, \"natural numbers is\", sum)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using for loop.\n\"\"\"\n\nn = int(input(\"Enter the number of natural numbers: \"))\nsum = 0\nfor i in range(1, n+1):\n    sum += i\n"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t\tlist2 = []\n\t\tfor i in list1:\n\t\t\tif i not in list2:\n\t\t\t\tlist2.append(i)\n\t\treturn list2\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\nprint(remove_duplicate(list1))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n       "}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif type(test_tup[0]) == int and type(test_tup[1]) == int and type(test_tup[2]) == int:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif type(test_tup[0]) == int and type(test_tup[1]) == int and type(test_tup[2]) == int:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif type(test_tup[0]) == int and type(test_tup[1]) == int and type(test_tup[2]) == int:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif type(test_tup[0]) == int and type(test_tup[1]) == int and type(test_tup[2]) == int:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif type(test_tup[0]) == int and type(test_tup[1]) == int and type(test_tup[2]) == int:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t\tcount = 0\n\t\twhile n % 2 == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / 2\n\t\tfor i in range(3,int(math.sqrt(n))+1,2):  \n\t\t\twhile n % i== 0:  \n\t\t\t\tcount += 1\n\t\t\t\tn = n / i  \n\t\tif n > 2:  \n\t\t\tcount += 1\n\t\treturn count\n\nn = int(input(\"Enter a number: \"))\nprint(count_Fac(n))\n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(factorial(n))\n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_n(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i\n\treturn sum\n\nn = int(input(\"Enter a number: \"))\nprint(sum_n(n))\n<file_sep>/Python/Python_Assignment_1/Q12.py\n\"\"\"\nWrite a python program to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n.\n\"\"\"\ndef sum_series(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += 1/i\n\treturn sum\n\nn = int(input(\"Enter a number: \"))\nprint(sum_series(n))\n<file_sep>/Python/Python_Assignment_1/Q13.py\n\"\"\"\nWrite a python program to find the sum of the series 1 + 1/2^2 + 1/3^2 + 1/4^2 +... + 1/n^2.\n\"\"\"\ndef sum_series(n):\n\tsum = 0\n\tfor i in range(1,n+1):"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t\treturn tuple(test_str)\n\n\"\"\"\nWrite a function to convert the given tuple into a string of integers.\n\"\"\"\ndef tuple_to_str(test_tuple):\n\t\treturn ''.join(test_tuple)\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\t\treturn list(test_str)\n\n\"\"\"\nWrite a function to convert the given list into a string of integers.\n\"\"\"\ndef list_to_str(test_list):\n\t\treturn ''.join(test_list)\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\t\treturn set(test_str)\n\n\"\"\"\nWrite a function to convert the given set into a string of integers.\n\"\"\"\ndef set_to_str(test_set):\n\t\treturn ''.join(test_set)\n\n\"\"\"\nWrite a function to convert the given string of integers into a frozenset.\n\"\"\"\ndef str_to_frozenset(test_str):\n\t\treturn frozenset(test_str)\n\n\"\"\"\nWrite a function to convert the given frozenset into a string of integers.\n\"\"\"\ndef frozenset_to_str(test_frozenset):\n\t\treturn ''.join(test_frozenset)\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\t\treturn dict(test_str)\n\n\"\"\"\nWrite a function to convert the given dictionary into a string of integers.\n\"\"\"\ndef dict_to_str(test_dict):\n\t\treturn ''.join(test_dict)\n\n\"\"\"\nWrite a function to convert the given string of integers into a bytearray.\n\"\"\"\ndef str_to_bytearray(test_str):\n\t\treturn bytearray(test_str)\n\n\"\"\"\nWrite a function to convert the given bytearray into a string of integers.\n\"\"\"\ndef bytearray_to_str(test_bytearray):\n\t\treturn ''.join(test_bytearray)\n\n\"\"\"\nWrite a function to convert the given string of integers into a byte.\n\"\"\"\ndef str_to_byte(test_str):\n\t"}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t\treturn 4*a\n\nprint(rombus_perimeter(5))\n<file_sep>/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python/python_basics/003_print_name.py\n\"\"\"\nWrite a program that prints your name to the screen.\n\"\"\"\nprint(\"<NAME>\")\n<file_sep>/python/python_basics/002_print_name_and_age.py\n\"\"\"\nWrite a program that prints your name and age.\n\"\"\"\nprint(\"<NAME>\")\nprint(\"25\")\n<file_sep>/python/python_basics/004_print_name_and_age_in_one_line.py\n\"\"\"\nWrite a program that prints your name and age in one line.\n\"\"\"\nprint(\"<NAME>\", \"25\")\n<file_sep>/python/python_basics/005_print_name_and_age_in_one_line_with_comma.py\n\"\"\"\nWrite a program that prints your name and age in one line with comma.\n\"\"\"\nprint(\"<NAME>\", \"25\", sep=\",\")\n<file_sep>/python/python_basics/006_print_name_and_age_in_one_line_with_space.py\n\"\"\"\nWrite a program that prints your name and age in one line with space.\n\"\"\"\nprint(\"<NAME>\", \"25\", sep=\" \")\n<file_sep>/python/python_basics/007_print_name_and_age_in_one_line_with_tab.py\n\"\"\"\nWrite a program that prints your name and age in one line with tab.\n\"\"\"\nprint(\"<NAME>\", \"25\", sep=\"\\t\")\n<file_sep>/python/python_basics/008_print_name_and_age_in_one_line_with_new_line.py\n\"\"\"\nWrite a program that prints your name and age in one line with new line.\n\"\"\"\nprint(\"<NAME>\", \"25\", sep=\"\\n\")\n<file_sep>/python/python_basics/009_print_name_and_age_in_one_line_with_new_line_and_space.py\n\"\"\"\nWrite a program that prints your name and"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t\tmean = sum(data)/len(data)\n\t\tsd = 0\n\t\tfor i in data:\n\t\t\tsd += (i-mean)**2\n\t\tsd = (sd/len(data))**0.5\n\t\treturn sd\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef var_calc(data):\n\t\tmean = sum(data)/len(data)\n\t\tvar = 0\n\t\tfor i in data:\n\t\t\tvar += (i-mean)**2\n\t\tvar = (var/len(data))\n\t\treturn var\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef cov_calc(data1, data2):\n\t\tmean1 = sum(data1)/len(data1)\n\t\tmean2 = sum(data2)/len(data2)\n\t\tcov = 0\n\t\tfor i in range(len(data1)):\n\t\t\tcov += (data1[i]-mean1)*(data2[i]-mean2)\n\t\tcov = cov/len(data1)\n\t\treturn cov\n\n\"\"\"\nWrite a function to calculate the correlation.\n\"\"\"\ndef corr_calc(data1, data2):\n\t\tmean1 = sum(data1)/len(data1)\n\t\tmean2 = sum(data2)/len(data2)\n\t\tcov = 0\n\t\tfor i in range(len(data1)):\n\t\t\tcov += (data1[i]-mean1)*(data2[i]-mean2)\n\t\tcov = cov/len(data1)\n\t\tsd1 = sd_calc(data1)\n\t\tsd2 = sd_calc(data2)\n\t\tcorr = cov/(sd1*sd2)\n\t\treturn corr\n\n\"\"\"\nWrite a function to calculate the coefficient of determination.\n\"\"\"\ndef r_squared(data1, data2):\n\t\tmean1 = sum(data1)/len(data1)\n\t\tmean2 = sum(data2)/len(data2)\n\t\tcov = 0\n\t\tfor i in range(len(data1)):\n\t\t\tcov += (data1[i]-mean1)*(data2[i]-mean2)\n\t\tcov = cov/len(data1)\n\t\tsd1 = sd_calc(data1)\n\t\tsd2 = sd_calc(data"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(0,len(list1),2):\n\t\t\tlist2.append(list1[i])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_programs/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_programs/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_programs/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_programs/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):"}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ab*', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has zero or more a's followed by one or more b's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'a*b+', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ab+', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one b's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ab?', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more c's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ac*', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has zero or more c's followed by an a.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'c*a', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has zero or one d's followed by one or more c's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'd?c+', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one b, followed by zero or one c.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ab?c?', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one b, followed by one or more c's.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'ab?c+', text):\n\t\t\treturn True\n\t\telse:"}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\treturn test_tup + (test_dict,)\n\n\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup,"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t\n    # Create a 2D array for storing \n    # intermediate results. \n    # The value at cost[i][j] \n    # will represent the maximum average \n    # of path ending with cell (i, j) \n    dp = [[0 for i in range(N)] for j in range(N)] \n  \n    # Initialize the first column with \n    # the first row values \n    for i in range(N): \n        dp[i][0] = cost[i][0] \n  \n    # Fill the values in dp[][] in \n    # bottom up manner \n    for i in range(1, N): \n        for j in range(1, N): \n  \n            # Fill the values in bottom up manner \n            dp[i][j] = max(dp[i - 1][j], \n                           dp[i][j - 1]) + cost[i][j] \n  \n    # Find the maximum value in \n    # last column of dp[][] \n    res = dp[N - 1][N - 1] \n  \n    # Find the maximum value in \n    # last row of dp[][] \n    for i in range(N - 1, -1, -1): \n        res = max(res, dp[i][N - 1]) \n  \n    # Find the maximum value in \n    # last column of dp[][] \n    for j in range(N - 1, -1, -1): \n        res = max(res, dp[N - 1][j]) \n  \n    return res / N \n  \n# Driver code \nif __name__ == \"__main__\": \n    cost = [[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]] \n    N = len(cost) \n    print(maxAverageOfPath(cost, N)) \n<file_sep>/Python/1001-2000/1001-1100/1009-Complement of Base 10 Integer/1009-Complement of Base 10 Integer.py\n\"\"\"\n1009. Complement of Base 10 Integer\nEasy\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are"}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t\tfor i in students:\n\t\t\tif students[i]['height'] > h and students[i]['width'] > w:\n\t\t\t\tprint(students[i])\n\nstudents = {\n\t'Alice': {'height': 65, 'width': 50},\n\t'Bob': {'height': 70, 'width': 60},\n\t'Charlie': {'height': 65, 'width': 55},\n\t'Dave': {'height': 60, 'width': 55},\n\t'Eve': {'height': 65, 'width': 50},\n\t'Frank': {'height': 70, 'width': 65},\n\t'Glenn': {'height': 65, 'width': 55},\n\t'Harry': {'height': 65, 'width': 50},\n}\n\nfilter_data(students,65,50)\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a function to find the maximum and minimum number from a given list.\n\"\"\"\ndef find_max_min(list):\n\tmax = list[0]\n\tmin = list[0]\n\tfor i in list:\n\t\tif i > max:\n\t\t\tmax = i\n\t\tif i < min:\n\t\t\tmin = i\n\tprint(max,min)\n\nfind_max_min([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a function to find the maximum and minimum number from a given list.\n\"\"\"\ndef find_max_min(list):\n\tmax = list[0]\n\tmin = list[0]\n\tfor i in list:\n\t\tif i > max:\n\t\t\tmax = i\n\t\tif i < min:\n\t\t\tmin = i\n\tprint(max,min)\n\nfind_max_min([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\n"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t\treturn len(list(map(lambda x: x[0] == x[1], zip(nums1, nums2))))\n\nprint(count_same_pair([1, 2, 3], [1, 2, 3]))\nprint(count_same_pair([1, 2, 3], [1, 2, 4]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\treturn sum(int(digit) for digit in str(base ** power))\n\n\"\"\"\nWrite a function to calculate"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t\tpattern = r'\"(.*?)\"'\n\t\tresult = re.findall(pattern, text1)\n\t\treturn result\n\ntext1 = \"The quick brown fox jumps over the lazy dog.\"\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract all email IDs from the given string by using regex.\n\"\"\"\ndef extract_email(text2):\n\t\tpattern = r'[\\w\\.-]+@[\\w\\.-]+'\n\t\tresult = re.findall(pattern, text2)\n\t\treturn result\n\ntext2 = \"Please contact <EMAIL> for assistance.\"\nprint(extract_email(text2))\n\n\"\"\"\nWrite a function to extract all words from the given string by using regex.\n\"\"\"\ndef extract_words(text3):\n\t\tpattern = r'\\w+'\n\t\tresult = re.findall(pattern, text3)\n\t\treturn result\n\ntext3 = \"The quick brown fox jumps over the lazy dog.\"\nprint(extract_words(text3))\n\n\"\"\"\nWrite a function to extract all words from the given string by using regex.\n\"\"\"\ndef extract_words(text3):\n\t\tpattern = r'\\w+'\n\t\tresult = re.findall(pattern, text3)\n\t\treturn result\n\ntext3 = \"The quick brown fox jumps over the lazy dog.\"\nprint(extract_words(text3))\n\n\"\"\"\nWrite a function to extract all words from the given string by using regex.\n\"\"\"\ndef extract_words(text3):\n\t\tpattern = r'\\w+'\n\t\tresult = re.findall(pattern, text3)\n\t\treturn result\n\ntext3 = \"The quick brown fox jumps over the lazy dog.\"\nprint(extract_words(text3))\n\n\"\"\"\nWrite a function to extract all words from the given string by using regex.\n\"\"\"\ndef extract_words(text3):\n\t\tpattern = r'\\w+'\n\t\tresult = re.findall(pattern, text3)\n\t\treturn result\n\ntext3 = \"The quick brown fox jumps over the lazy dog.\"\nprint(extract_words(text3))\n\n\"\"\"\nWrite a function to extract all words from the given string by using regex.\n\"\"\"\ndef extract_words(text3):\n\t\tpattern = r'\\w+'\n\t\tresult ="}
{"ID": 125, "source": "MBPP:726", "prompt": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t\treturn reduce(lambda x,y: x*y, test_tup)\n\nprint multiply_elements((1,2,3,4,5))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Based on earlier \"Countdown by Fours\", given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(0,151):\n\tprint i\n\n# Multiples of Five - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5,1001,5):\n\tprint i\n\n# Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1,101):\n\tif i % 5 == 0 and i % 10 == 0:\n\t\tprint \"Coding Dojo\"\n\telif i % 5 == 0:\n\t\tprint \"Coding\"\n\telse:\n\t\tprint i\n\n# Whoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\nsum = 0\nfor i in range(0,5000"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\nprint(remove_char(\"I'm a #string\"))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t\treturn [x+y for x,y in zip(lst1,lst2)]\n\nprint(sum_list([1,2,3],[4,5,6]))\n<file_sep>/python/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 0 to 9\neven_numbers = [x for x in range(10) if x % 2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 4\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 5\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 6\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 7\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 8\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4]"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif not nums:\n\t\t\treturn []\n\t\tresult = [nums[0]]\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i]!= result[-1]:\n\t\t\t\tresult.append(nums[i])\n\t\treturn result\n\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif not nums:\n\t\t\treturn []\n\t\tresult = [nums[0]]\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i]!= result[-1]:\n\t\t\t\tresult.append(nums[i])\n\t\treturn result\n\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif not nums:\n\t\t\treturn []\n\t\tresult = [nums[0]]\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i]!= result[-1]:\n\t\t\t\tresult.append(nums[i])\n\t\treturn result\n\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif not nums:\n\t\t\treturn []\n\t\tresult = [nums[0]]\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i]!= result[-1]:\n\t\t\t\tresult.append(nums[i])\n\t\treturn result\n\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif not nums:\n\t\t\treturn []\n\t\tresult = [nums[0]]\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i]!= result[-1]:\n\t\t\t\tresult.append(nums["}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t\treturn (math.pi*r*(r+math.sqrt(h**2+r**2)))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn (math.pi*r**2*h/3)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_cylinder(r,h):\n\t\treturn (2*math.pi*r*h+2*math.pi*r**2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\t\treturn (2*math.pi*r*h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn (math.pi*r**2*h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_sphere(r):\n\t\treturn (4*math.pi*r**2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\t\treturn (4*math.pi*r**2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn (4*math.pi*r**3/3)\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_cube(a):\n\t\treturn (6*a**2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(a):\n\t\treturn (4*a**2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\t\treturn (a**3)\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surface_rectangularprism(a,b,c):\n\t\treturn (2*(a*b+b*c+c*a))\n\n\"\"\"\nWrite a function to find the lateral surface"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\nprint(replace_specialchar(\"This is a test sentence.\"))\n<file_sep>/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python has no command for declaring a variable.\n\n# A variable is created the moment you first assign a value to it.\n\n# Variables must be assigned before they can be used, otherwise you will get an error.\n\n# The equal sign (=) is used to assign values to variables.\n\n# Example\n\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\nx = 4 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)\n\n# Python is a dynamically typed language, so you do not need to specify the type of a variable.\n\n# This means you can assign any type of data to any variable.\n\n# Example\n\nx = 4 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)\n\n# Variable Names\n\n# A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).\n\n# Rules for Python variables:\n\n# A variable name must start with a letter or the underscore character\n# A variable name cannot start with a number\n# A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\n# Variable names are case-sensitive (age, Age and AGE are three different variables)\n\n# Example\n\nmyvar = \"John\"\nmy_var = \"John\"\n_my_var = \"John\"\nmyVar = \"John\"\nMYVAR = \"John\"\nmyvar2 = \"John\"\n\n# Variable Names\n\n# A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tprod = 1\n\t\t\tfor j in range(i,n):\n\t\t\t\tprod = prod * arr[j]\n\t\t\t\tsum = sum + prod\n\t\treturn sum\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate_Array(arr,n):\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\treturn arr\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(rotate_Array(arr,n))\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate_Array(arr,n):\n\ttemp = arr[0]\n\tfor i in range(n-1):\n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\treturn arr\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(rotate_Array(arr,n))\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate_Array(arr,n):\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\treturn arr\n\ndef rotate_Array_2(arr,n):\n\tfor i in range(n):\n\t\trotate_Array(arr,n)\n\treturn arr\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(rotate_Array_2(arr,n))\n<file_sep>/Python"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t\t# first and last bit are 1 \n\t\t# so we need to toggle all bits \n\t\t# except first and last \n\t\treturn (n ^ (1 << (len(bin(n)) - 2))) \n\n# Driver code \nn = 10\nprint(toggle_middle_bits(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n\n        # If x is greater, ignore left half\n        if arr[mid] < x:\n            low = mid + 1\n\n        # If x is smaller, ignore right half\n        elif arr[mid] > x:\n            high = mid - 1\n\n        # means x is present at mid\n        else:\n            return mid\n\n    # If we reach here, then the element was not present\n    return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\n# Function call\nresult = binary_search(arr, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear Search/linear_search.py\n\"\"\"\nLinear Search\n\nIn computer science, a linear search or sequential search is a method for finding an element within a list. It sequentially checks each element of the list until a match is found or the"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\t\"\"\"\n\t\tLocate the leftmost index i such that a[i-1] < x <= a[i]\n\t\t\"\"\"\n\t\ti = bisect_left(a, x)\n\t\tif i!= len(a) and a[i] == x:\n\t\t\t\treturn i\n\t\treturn i - 1\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\t\"\"\"\n\t\tLocate the rightmost index i such that a[i-1] <= x < a[i]\n\t\t\"\"\"\n\t\ti = bisect_right(a, x)\n\t\tif i!= len(a) and a[i] == x:\n\t\t\t\treturn i\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the leftmost index i such that a[i] >= x.\n\"\"\"\ndef left_bound(a, x):\n\t\t\"\"\"\n\t\tLocate the leftmost value exactly equal to x\n\t\t\"\"\"\n\t\ti = bisect_left(a, x)\n\t\tif i!= len(a) and a[i] == x:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to locate the rightmost index i such that a[i] > x.\n\"\"\"\ndef right_bound(a, x):\n\t\t\"\"\"\n\t\tLocate the rightmost value exactly equal to x\n\t\t\"\"\"\n\t\ti = bisect_right(a, x)\n\t\tif i!= len(a) and a[i] == x:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to locate the leftmost index i such that a[i] > x.\n\"\"\"\ndef left_strict(a, x):\n\t\t\"\"\"\n\t\tLocate the leftmost index i such that a[i] > x\n\t\t\"\"\"\n\t\ti = bisect_left(a, x)\n\t\tif i!= len(a) and a[i] == x:\n\t\t\t\treturn i\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the rightmost index i such that a[i] >= x.\n\"\"\"\ndef right_strict(a, x):\n\t\t\"\"\"\n\t\tLocate the rightmost index i such that a[i] >= x\n\t\t\"\"\"\n\t\ti"}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t\n    regex = '^[aeiouAEIOU]'\n    if(re.search(regex, string)): \n        print(\"The string starts with a vowel\") \n    else: \n        print(\"The string does not start with a vowel\") \n\ncheck_str(\"apple\")\ncheck_str(\"banana\")\n<file_sep>/Python/100_Python_Programs/001_Python_Basics/003_Python_Operators/001_Python_Arithmetic_Operators.py\n\"\"\"\nPython Arithmetic Operators\n\"\"\"\n\n# Addition\nprint(10 + 20)\n\n# Subtraction\nprint(10 - 20)\n\n# Multiplication\nprint(10 * 20)\n\n# Division\nprint(10 / 20)\n\n# Modulus\nprint(10 % 20)\n\n# Exponent\nprint(10 ** 20)\n\n# Floor Division\nprint(10 // 20)\n<file_sep>/Python/100_Python_Programs/001_Python_Basics/003_Python_Operators/002_Python_Comparison_Operators.py\n\"\"\"\nPython Comparison Operators\n\"\"\"\n\n# Equal\nprint(10 == 20)\n\n# Not Equal\nprint(10!= 20)\n\n# Greater than\nprint(10 > 20)\n\n# Less than\nprint(10 < 20)\n\n# Greater than or equal to\nprint(10 >= 20)\n\n# Less than or equal to\nprint(10 <= 20)\n<file_sep>/Python/100_Python_Programs/001_Python_Basics/003_Python_Operators/003_Python_Logical_Operators.py\n\"\"\"\nPython Logical Operators\n\"\"\"\n\n# And\nprint(True and True)\n\n# Or\nprint(True or False)\n\n# Not\nprint(not True)\n<file_sep>/Python/100_Python_Programs/001_Python_Basics/003_Python_Operators/004_Python_Identity_Operators.py\n\"\"\"\nPython Identity Operators\n\"\"\"\n\n# Is\nprint(10 is 20)\n\n# Is not\n"}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n\nprint(geometric_sum(10))\n<file_sep>/Chapter 10/10.1.py\n\"\"\"\nWrite a function that reads the words in words.txt and stores them as keys in a dictionary. It doesn’t matter what the values are. Then you can use the in operator as a fast way to check whether a string is in the dictionary.\n\"\"\"\n\ndef read_words(filename):\n\twith open(filename) as f:\n\t\twords = f.read().split()\n\treturn words\n\ndef in_dictionary(word, words):\n\treturn word in words\n\nwords = read_words('words.txt')\nprint(in_dictionary('hello', words))\n<file_sep>/Chapter 10/10.2.py\n\"\"\"\nWrite a function called has_duplicates that takes a list and returns True if there is any element that appears more than once. It should not modify the original list.\n\"\"\"\n\ndef has_duplicates(lst):\n\tfor i in range(len(lst)):\n\t\tfor j in range(i + 1, len(lst)):\n\t\t\tif lst[i] == lst[j]:\n\t\t\t\treturn True\n\treturn False\n\nprint(has_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<file_sep>/Chapter 10/10.3.py\n\"\"\"\nWrite a function called has_duplicates that takes a list and returns True if there is any element that appears more than once. It should not modify the original list.\n\"\"\"\n\ndef has_duplicates(lst):\n\treturn len(lst)!= len(set(lst))\n\nprint(has_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<file_sep>/Chapter 10/10.4.py\n\"\"\"\nWrite a function called has_duplicates that takes a list and returns True if there is any element that appears more than once. It should not modify the original list.\n\"\"\"\n\ndef has"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t\t# Initialize result \n\t\tresult = 0\n\t\t# Initialize count \n\t\tcount = 1\n\t\t# Initialize triangular number \n\t\ttriangular_number = 1\n\t\t# Loop until count is less than n \n\t\twhile (count < n): \n\t\t\t# Update result \n\t\t\tresult = result + triangular_number \n\t\t\t# Update count \n\t\t\tcount = count + 1\n\t\t\t# Update triangular number \n\t\t\ttriangular_number = triangular_number + count \n\t\t# Return result \n\t\treturn result \n\n# Driver code \nn = 10\nprint(find_Index(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t\treturn dict(zip(test_tup[::2], test_tup[1::2]))\n\nprint(tuple_to_dict(('a', 'b', 'c', 'd')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')))\nprint(tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t\tif len(s) == 0 :\n\t\t\treturn True\n\t\telse :\n\t\t\treturn False\n\ndef main() :\n\ts = input(\"Enter the string : \")\n\tif all_Characters_Same(s) :\n\t\tprint(\"All the characters are same\")\n\telse :\n\t\tprint(\"All the characters are not same\")\n\nif __name__ == \"__main__\" :\n\tmain()<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t\tarea = (math.sqrt(3) * (side ** 2)) / 4\n\t\treturn area\n\n\"\"\"\nWrite a function to calculate the volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(side):\n\t\tvolume = (math.sqrt(2) * (side ** 3)) / 12\n\t\treturn volume\n\n\"\"\"\nWrite a function to calculate the surface area of a tetrahedron.\n\"\"\"\ndef surface_area_tetrahedron(side):\n\t\tsurface_area = (math.sqrt(3) * (side ** 2))\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the surface area of a cube.\n\"\"\"\ndef surface_area_cube(side):\n\t\tsurface_area = 6 * (side ** 2)\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\n\"\"\"\ndef volume_cube(side):\n\t\tvolume = side ** 3\n\t\treturn volume\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(radius):\n\t\tsurface_area = 4 * math.pi * (radius ** 2)\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(radius):\n\t\tvolume = (4 / 3) * math.pi * (radius ** 3)\n\t\treturn volume\n\n\"\"\"\nWrite a function to calculate the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(radius, height):\n\t\tsurface_area = 2 * math.pi * radius * (radius + height)\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(radius, height):\n\t\tvolume = math.pi * (radius ** 2) * height\n\t\treturn volume\n\n\"\"\"\nWrite a function to calculate the surface area of a cone.\n\"\"\"\ndef surface_area_cone(radius, height):\n\t\tsurface_area = math.pi * radius * (radius + math.sqrt((radius ** 2) + (height ** 2)))\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the volume"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t\tfor i in range(n):\n\t\t\tlist1.insert(0,list1.pop())\n\t\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list1,3,4))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t\tfor i in test_tup:\n\t\t\tif i is None:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(check_none((1,2,3,None)))\nprint(check_none((1,2,3,4)))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t\t\"\"\"\n\t\tFinds numbers within a given range where every number is divisible by every digit it contains.\n\t\t\"\"\"\n\t\tfor num in range(startnum, endnum):\n\t\t\tif num % 10 == 0:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 1:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 2:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 3:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 4:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 5:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 6:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 7:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 8:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 9:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 0:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 1:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 2:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 3:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 4:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 5:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 6:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 7:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 8:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 9:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 0:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 1:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 2:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 3:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 4:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 5:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 6:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 7:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 8:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 9:\n\t\t\t\tcontinue\n\t\t\tif num % 10 == 0:\n\t\t\t\tcontinue\n\t\t\tif num % 10"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t\treturn (r**2)*a/2\n\nprint(sector_area(2,360))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a function to find area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn 3.14*r**2\n\nprint(circle_area(2))\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a function to find area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\t\treturn b*h/2\n\nprint(triangle_area(2,3))\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a function to find area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t\treturn l*b\n\nprint(rectangle_area(2,3))\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a function to find area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\t\treturn (b1+b2)*h/2\n\nprint(trapezoid_area(2,3,4))\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a function to find area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t\treturn b*h\n\nprint(parallelogram_area(2,3))\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a function to find area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\t\treturn d1*d2/2\n\nprint(rhombus_area(2,3))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport {"}
{"ID": 146, "source": "MBPP:747", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t\n    if m == 0 or n == 0 or o == 0: \n        return 0\n    elif X[m-1] == Y[n-1] and X[m-1] == Z[o-1]: \n        return 1 + lcs_of_three(X, Y, Z, m-1, n-1, o-1) \n    else: \n        return max(lcs_of_three(X, Y, Z, m, n-1, o), lcs_of_three(X, Y, Z, m-1, n, o), lcs_of_three(X, Y, Z, m, n, o-1)) \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AGGTAXYB\"\nm = len(X) \nn = len(Y) \no = len(Z) \nprint(\"Length of LCS is\", lcs_of_three(X, Y, Z, m, n, o)) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence/Longest Common Subsequence.py\n\"\"\"\nWrite a function to find the longest common subsequence for the given two string sequence.\n\"\"\"\ndef lcs_of_two(X, Y, m, n): \n\t\n    if m == 0 or n == 0: \n        return 0\n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs_of_two(X, Y, m-1, n-1) \n    else: \n        return max(lcs_of_two(X, Y, m, n-1), lcs_of_two(X, Y, m-1, n)) \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn = len(Y) \nprint(\"Length of LCS is\", lcs_of_two(X, Y, m, n)) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence/Longest Common Subsequence (Bottom Up).py\n\"\"\"\nWrite a function to find the longest common subsequence for the given two string sequence.\n\"\"\"\ndef lcs_of_two(X, Y, m, n): \n    L = [[0 for x in range(n"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\nprint(capital_words_spaces(\"Hello, how are you?\"))\n<file_sep>/python/regex/regex_10.py\n\"\"\"\nWrite a function to check whether a string contains all letters of the alphabet.\n\"\"\"\nimport re\n\ndef contains_all_letters(str1):\n\t\treturn re.search(r'^[a-zA-Z]+$', str1)\n\nprint(contains_all_letters(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python/regex/regex_11.py\n\"\"\"\nWrite a function to check whether a string contains all numbers.\n\"\"\"\nimport re\n\ndef contains_all_numbers(str1):\n\t\treturn re.search(r'^[0-9]+$', str1)\n\nprint(contains_all_numbers(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python/regex/regex_12.py\n\"\"\"\nWrite a function to check whether a string contains all alphanumeric characters.\n\"\"\"\nimport re\n\ndef contains_all_alphanumeric(str1):\n\t\treturn re.search(r'^[a-zA-Z0-9]+$', str1)\n\nprint(contains_all_alphanumeric(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python/regex/regex_13.py\n\"\"\"\nWrite a function to check whether a string contains all special characters.\n\"\"\"\nimport re\n\ndef contains_all_special_characters(str1):\n\t\treturn re.search(r'^[^a-zA-Z0-9]+$', str1)\n\nprint(contains_all_special_characters(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python/regex/regex_14.py\n\"\"\"\nWrite a function to check whether a string contains all printable characters.\n\"\"\"\nimport re\n\ndef contains_all_printable_characters(str1):\n\t\treturn re.search(r'^[ -~]+$', str1)\n\nprint(contains_all_printable_characters(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python/regex/regex_15.py\n\"\"\"\nWrite a function to check whether"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t\treturn sorted(nums_str, key=lambda x: int(x))\n\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"20\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\", \"10000.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\", \"10000.0\", \"100000.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\", \"10000.0\", \"100000.0\", \"1000000.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\", \"10000.0\", \"100000.0\", \"1000000.0\", \"10000000.0\"]))\nprint(sort_numeric_strings([\"1.1\", \"2.0\", \"10.2\", \"20.0\", \"100.0\", \"1000.0\", \"10000.0\", \"100000.0\", \"1000000.0\", \"1000"}
{"ID": 149, "source": "MBPP:750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t\ttest_list.append(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents max heap or not.\n\"\"\"\ndef check_max_heap(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n\"\"\"\nWrite a function to check if the given array represents a binary search tree or not.\n\"\"\"\ndef check_bst(arr, i):\n\t\n\n\n"}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_num(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_num(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_num(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_num(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_num("}
{"ID": 152, "source": "MBPP:753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tif K > len(test_list):\n\t\t\treturn test_list\n\t\telse:\n\t\t\treturn sorted(test_list)[:K]\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\tprint(min_k(test_list, 3))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t\t\"\"\"\n\t\t:type l1: list\n\t\t:type l2: list\n\t\t:type l3: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef test_extract_index_list():\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 4]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 5]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 6]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 7]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 8]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 9]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 10]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 11]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 12]) == [1, 2]\n\tassert extract_index_list([1, 2, 3], [1"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t\t\"\"\"\n\t\tFind the second smallest number in a list.\n\t\t\"\"\"\n\t\t# TODO: Write your code here\n\t\tnumbers.sort()\n\t\treturn numbers[1]\n\nif __name__ == '__main__':\n\tnumbers = [1, 2, 3, 4, 5]\n\tprint(second_smallest(numbers))\n<file_sep>/python/00001_00500/00101_00150/00121_reverse_words_in_a_string.py\n\"\"\"\nReverse Words in a String\n\nGiven an input string, reverse the string word by word.\n\nExample:\n\nInput: \"the sky is blue\",\nOutput: \"blue is sky the\".\nNote:\n\nA word is defined as a sequence of non-space characters.\nInput string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\nYou need to reduce multiple spaces between two words to a single space in the reversed string.\nFollow up: For C programmers, try to solve it in-place in O(1) space.\n\"\"\"\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        return''.join(s.split()[::-1])\n<file_sep>/python/00001_00500/00051_00100/00061_rotate_list.py\n\"\"\"\nRotate List\n\nGiven a linked list, rotate the list to the right by k places, where k is non-negative.\n\nExample 1:\n\nInput: 1->2->3->4->5->NULL, k = 2\nOutput: 4->5->1->2->3->NULL\nExplanation:\nrotate 1 steps to the right: 5->1->2->3->4->NULL\nrotate 2 steps to the right: 4->5->1->2->3->NULL\nExample 2:\n\nInput: 0->1->2->NULL, k = 4\nOutput: 2->0->1->NULL\nExplanation:\nrotate 1 steps to the right: 2->0->1->NULL\nrotate 2 steps to the right: 1->2->0->NULL"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t\treturn re.search(r'ab?', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b'.\n\"\"\"\ndef text_match_zero_more(text):\n\t\treturn re.search(r'ab*', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b'.\n\"\"\"\ndef text_match_one_more(text):\n\t\treturn re.search(r'ab+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_more_c(text):\n\t\treturn re.search(r'ab*c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b' and a 'c'.\n\"\"\"\ndef text_match_one_more_c(text):\n\t\treturn re.search(r'ab+c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_one_c(text):\n\t\treturn re.search(r'ab?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_more_c(text):\n\t\treturn re.search(r'ab*c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b' and a 'c'.\n\"\"\"\ndef text_match_one_more_c(text):\n\t\treturn re.search(r'ab+c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_one_c(text):\n\t\treturn re.search(r'ab?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_more_c(text):\n\t\t"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i][::-1] == test_list[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the longest palindrome in the given string.\n\"\"\"\ndef longest_palindrome(test_string):\n\tlongest_palindrome = \"\"\n\tfor i in range(len(test_string)):\n\t\tfor j in range(i+1, len(test_string)):\n\t\t\tif test_string[i:j] == test_string[i:j][::-1] and len(test_string[i:j]) > len(longest_palindrome):\n\t\t\t\tlongest_palindrome = test_string[i:j]\n\treturn longest_palindrome\n\n\"\"\"\nWrite a function to find the longest palindrome in the given string list.\n\"\"\"\ndef longest_palindrome_list(test_list):\n\tlongest_palindrome = \"\"\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i][::-1] == test_list[j] and len(test_list[i]) > len(longest_palindrome):\n\t\t\t\tlongest_palindrome = test_list[i]\n\treturn longest_palindrome\n\n\"\"\"\nWrite a function to find the longest palindrome in the given string list.\n\"\"\"\ndef longest_palindrome_list_2(test_list):\n\tlongest_palindrome = \"\"\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i][::-1] == test_list[j] and len(test_list[i]) > len(longest_palindrome):\n\t\t\t\tlongest_palindrome = test_list[i]\n\treturn longest_palindrome\n\n\"\"\"\nWrite a function to find the longest palindrome in the given string list.\n\"\"\"\ndef longest_palindrome_list_3(test_list):\n\tlongest_palindrome = \"\"\n\tfor i in range(len(test_list)):"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\tunique_list = []\n\t\tfor i in list1:\n\t\t\tif i not in unique_list:\n\t\t\t\tunique_list.append(i)\n\t\treturn len(unique_list)\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t\treturn True if num % 1 == 0 else False\n\nprint(is_decimal(1.0))\nprint(is_decimal(1.1))\nprint(is_decimal(1.2))\nprint(is_decimal(1.3))\nprint(is_decimal(1.4))\nprint(is_decimal(1.5))\nprint(is_decimal(1.6))\nprint(is_decimal(1.7))\nprint(is_decimal(1.8))\nprint(is_decimal(1.9))\nprint(is_decimal(2.0))\nprint(is_decimal(2.1))\nprint(is_decimal(2.2))\nprint(is_decimal(2.3))\nprint(is_decimal(2.4))\nprint(is_decimal(2.5))\nprint(is_decimal(2.6))\nprint(is_decimal(2.7))\nprint(is_decimal(2.8))\nprint(is_decimal(2.9))\nprint(is_decimal(3.0))\nprint(is_decimal(3.1))\nprint(is_decimal(3.2))\nprint(is_decimal(3.3))\nprint(is_decimal(3.4))\nprint(is_decimal(3.5))\nprint(is_decimal(3.6))\nprint(is_decimal(3.7))\nprint(is_decimal(3.8))\nprint(is_decimal(3.9))\nprint(is_decimal(4.0))\nprint(is_decimal(4.1))\nprint(is_decimal(4.2))\nprint(is_decimal(4.3))\nprint(is_decimal(4.4))\nprint(is_decimal(4.5))\nprint(is_decimal(4.6))\nprint(is_decimal(4.7))\nprint(is_decimal(4.8))\nprint(is_decimal(4.9))\nprint(is_decimal(5.0))\nprint(is_decimal(5.1))\nprint(is_decimal(5.2))\nprint(is_decimal(5.3))\nprint(is_decimal(5.4))\nprint("}
{"ID": 159, "source": "MBPP:760", "prompt": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t\tif len(arr) == 1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(unique_Element(arr,n))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nWrite a python function to rotate an array of n elements to the right by k steps.\n\"\"\"\ndef rotate(arr,n,k):\n\tfor i in range(k):\n\t\ttemp = arr[n-1]\n\t\tfor j in range(n-1,0,-1):\n\t\t\tarr[j] = arr[j-1]\n\t\tarr[0] = temp\n\treturn arr\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nk = 3\nprint(rotate(arr,n,k))\n<file_sep>/Python/Array/Array_Intersection.py\n\"\"\"\nWrite a python function to find the intersection of two arrays.\n\"\"\"\ndef intersection(arr1,arr2,n,m):\n\ti = 0\n\tj = 0\n\twhile i < n and j < m:\n\t\tif arr1[i] < arr2[j]:\n\t\t\ti += 1\n\t\telif arr1[i] > arr2[j]:\n\t\t\tj += 1\n\t\telse:\n\t\t\tprint(arr1[i])\n\t\t\ti += 1\n\t\t\tj += 1\n\narr1 = [1,2,3,4,5,6,7,8,9,10]\narr2 = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr1)\nm = len(arr2)\nintersection(arr1,arr2,n,m)\n<file_sep>/Python/Array/Array_Search.py\n\"\"\"\nWrite a python function to search an element in a sorted array of size n.\n\"\"\"\ndef search(arr,n,x):\n\tfor i in range(n):\n\t\tif arr[i] == x:\n\t\t\treturn i\n\treturn -1\n\narr = [1,2,3,4,5,6"}
{"ID": 160, "source": "MBPP:761", "prompt": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t", "predict": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t\treturn (d*a)/360\n\nprint(arc_length(180,180))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1,7):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1,8):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n\"\"\"\n\nfor i in range(1,9):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the following pattern"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 in [4,6,9,11]:\n\t\t\tprint(\"The month number contains 30 days\")\n\t\telse:\n\t\t\tprint(\"The month number does not contain 30 days\")\n\ncheck_monthnumber_number(monthnum3)\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 in [1,3,5,7,8,10,12]:\n\t\t\tprint(\"The month number contains 31 days\")\n\t\telse:\n\t\t\tprint(\"The month number does not contain 31 days\")\n\ncheck_monthnumber_number(monthnum3)\n\n\"\"\"\nWrite a function to check whether the given month number contains 28 or 29 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 in [2]:\n\t\t\tprint(\"The month number contains 28 or 29 days\")\n\t\telse:\n\t\t\tprint(\"The month number does not contain 28 or 29 days\")\n\ncheck_monthnumber_number(monthnum3)\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 in [4,6,9,11]:\n\t\t\tprint(\"The month number contains 30 days\")\n\t\telse:\n\t\t\tprint(\"The month number does not contain 30 days\")\n\ncheck_monthnumber_number(monthnum3)\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 in [1,3,5,7,8,10,12]:\n\t\t\tprint(\"The month number contains 31 days\")\n\t\telse:\n\t\t\tprint(\"The month number does not contain 31 days\")\n\ncheck_monthnumber_number(monthnum3)\n\n\"\"\"\nWrite a function to check whether the given month number contains 28 or 29 days or not.\n\"\"\"\ndef check_monthnumber_number"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t\tarr.sort() \n\t\treturn arr[n-1] - arr[0] \n\narr = [1, 5, 3, 19, 18, 25] \nn = len(arr) \nprint(find_Min_Diff(arr, n)) \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(arr,n):\n\tsum_arr = sum(arr)\n\tsum_n = (n*(n+1))//2\n\treturn sum_n - sum_arr\n\narr = [1,2,3,4,6,7,8]\nn = len(arr)\nprint(find_missing_number(arr,n))\n<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate_number(arr,n):\n\tfor i in range(n):\n\t\tif arr[abs(arr[i])-1] < 0:\n\t\t\treturn abs(arr[i])\n\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [1,2,3,1,3,6,6]\nn = len(arr)\nprint(find_duplicate_number(arr,n))\n<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(arr,n):\n\tsum_arr = sum(arr)\n\tsum_n = (n*(n+1))//2\n\treturn sum_n - sum_arr\n\narr = [1,2,3,4,6,7,8]\nn = len(arr)\nprint(find_missing_number(arr,n))\n<file_sep>/Python/Array/find_missing_number_3.py\n\"\"\"\nGiven"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t\tcount = 0\n\t\tfor i in str:\n\t\t\tif i.isdigit():\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(number_ctr(\"123456789\"))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given string.\n\"\"\"\ndef sum_of_numbers(str):\n\tsum = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tsum += int(i)\n\treturn sum\n\nprint(sum_of_numbers(\"123456789\"))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given string.\n\"\"\"\ndef sum_of_numbers(str):\n\tsum = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tsum += int(i)\n\treturn sum\n\nprint(sum_of_numbers(\"123456789\"))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given string.\n\"\"\"\ndef sum_of_numbers(str):\n\tsum = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tsum += int(i)\n\treturn sum\n\nprint(sum_of_numbers(\"123456789\"))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given string.\n\"\"\"\ndef sum_of_numbers(str):\n\tsum = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tsum += int(i)\n\treturn sum\n\nprint(sum_of_numbers(\"123456789\"))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given string.\n\"\"\"\ndef sum_of_numbers(str):\n\tsum = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tsum += int(i)\n\treturn sum\n\nprint(sum_of_numbers(\"123456789\"))\n\n\"\"\"\nWrite a python function to find the sum of all"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t\t\"\"\"\n\t\tCheck if a number is polite.\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn True\n\t\tif n % 2 == 0:\n\t\t\treturn False\n\t\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\ndef nth_polite(n):\n\t\"\"\"\n\tFind the nth polite number.\n\t\"\"\"\n\tcount = 0\n\ti = 1\n\twhile count < n:\n\t\ti += 2\n\t\tif is_polite(i):\n\t\t\tcount += 1\n\treturn i\n\nif __name__ == '__main__':\n\tprint(nth_polite(10000))\n<file_sep>/python/0001-0100/0010/0010.py\n\"\"\"\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\"\"\"\ndef is_prime(n):\n\t\"\"\"\n\tCheck if a number is prime.\n\t\"\"\"\n\tif n == 1:\n\t\treturn False\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef sum_primes(n):\n\t\"\"\"\n\tFind the sum of all the primes below n.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\nif __name__ == '__main__':\n\tprint(sum_primes(2000000))\n<file_sep>/python/0001-0100/0001/0001.py\n\"\"\"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t\tfor i in range(len(l1)-1):\n\t\t\tyield l1[i], l1[i+1]\n\nl1 = [1,2,3,4,5]\nfor i in pair_wise(l1):\n\tprint(i)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nr = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * r * r\nprint(\"Area of the circle is: \", area)\n\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nl1 = input(\"Enter the comma separated numbers: \")\nl2 = l1.split(\",\")\nprint(l2)\nprint(tuple(l2))\n\n\"\"\"\nWrite a Python program to display the first and last colors from the following list.\n\"\"\"\nl1 = [\"Red\", \"Green\", \"White\", \"Black\", \"Pink\", \"Yellow\"]\nprint(l1[0], l1[-1])\n\n\"\"\"\nWrite a Python program to display the examination schedule. (extract the date from exam_st_date).\n\"\"\"\nexam_st_date = (11, 12, 2014)\nprint(exam_st_date[0])\n\n\"\"\"\nWrite a Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n\"\"\"\nn = int(input(\"Enter the number: \"))\nprint(n + (n*11) + (n"}
{"ID": 166, "source": "MBPP:767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t\tcount = 0\n\t\tfor i in range(0,n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]+arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\narr = [1, 5, 7, -1, 5]\nn = len(arr)\nsum = 6\nprint(\"Count of pairs is\",get_Pairs_Count(arr,n,sum))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate_Array(arr,n):\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nrotate_Array(arr,n)\nprint(\"Array after rotation is\")\nfor i in range(0,n):\n\tprint(arr[i],end=\" \")\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by ‘d’ elements in clock-wise direction.\n\"\"\"\ndef rotate_Array(arr,n,d):\n\tfor i in range(d):\n\t\trotate_Array_by_one(arr,n)\n\ndef rotate_Array_by_one(arr,n):\n\ttemp = arr[0]\n\tfor i in range(n-1):\n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nd = 2\nrotate_Array(arr,n,d)\nprint(\"Array after rotation is\")\nfor i in range(0,n):\n\tprint(arr[i],end=\" \")\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array arr[] of positive integers of size N. Reverse every sub-array of K group elements.\n\"\"\"\ndef reverse_Array(arr,n,k):\n\t"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\tif x % 2 == 0: \n\t\t\treturn False\n\t\telse: \n\t\t\treturn True\n\nprint(check_Odd_Parity(10))\nprint(check_Odd_Parity(11))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t\treturn (list(set(li1)-set(li2)))\n\nli1=[1,2,3,4,5,6]\nli2=[2,3,4,5,6,7,8]\nprint(Diff(li1,li2))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end"}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1, n+1) : \n\t\t\tsum = sum + i**4\n\t\treturn sum\n\nprint(odd_Num_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(1, 6) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) : \n\tfor j in range(1, i+1) : \n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) : \n\tfor"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t\tstack = []\n\t\tfor i in exp:\n\t\t\t\tif i == '(':\n\t\t\t\t\t\tstack.append(i)\n\t\t\t\telif i == ')':\n\t\t\t\t\t\tif len(stack) == 0:\n\t\t\t\t\t\t\t\treturn False\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tstack.pop()\n\t\tif len(stack) == 0:\n\t\t\t\treturn True\n\t\telse:\n\t\t\t\treturn False\n\nexp = input(\"Enter the expression: \")\nprint(check_expression(exp))\n<file_sep>/Python/Data Structures/Linked List/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\nclass Node:\n\t\tdef __init__(self, data):\n\t\t\t\tself.data = data\n\t\t\t\tself.next = None\n\nclass LinkedList:\n\t\tdef __init__(self):\n\t\t\t\tself.head = None\n\n\t\tdef print_list(self):\n\t\t\t\ttemp = self.head\n\t\t\t\twhile temp:\n\t\t\t\t\t\tprint(temp.data)\n\t\t\t\t\t\ttemp = temp.next\n\n\t\tdef push(self, data):\n\t\t\t\tnew_node = Node(data)\n\t\t\t\tnew_node.next = self.head\n\t\t\t\tself.head = new_node\n\n\t\tdef insert_after(self, prev_node, data):\n\t\t\t\tif prev_node is None:\n\t\t\t\t\t\tprint(\"Previous node is None\")\n\t\t\t\t\t\treturn\n\t\t\t\tnew_node = Node(data)\n\t\t\t\tnew_node.next = prev_node.next\n\t\t\t\tprev_node.next = new_node\n\n\t\tdef append(self, data):\n\t\t\t\tnew_node = Node(data)\n\t\t\t\tif self.head is None:\n\t\t\t\t\t\tself.head = new_node\n\t\t\t\t\t\treturn\n\t\t\t\ttemp = self.head\n\t\t\t\twhile temp.next:\n\t\t\t\t\t\ttemp = temp.next\n\t\t\t\ttemp.next = new_node\n\n\t\tdef delete_node(self, key):\n\t\t\t\ttemp = self.head\n\t\t\t\tif temp is not None:\n\t\t\t\t\t\tif temp.data == key:\n\t\t\t\t\t\t\t\tself.head = temp.next\n\t\t\t\t\t\t\t\ttemp = None\n\t\t\t\t\t\t\t\treturn\n\t\t\t\twhile temp is not None:\n\t\t\t\t\t\tif temp.data == key:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tprev = temp\n\t\t\t\t\t\ttemp = temp.next\n\t\t\t\tif temp is None:\n\t\t\t\t\t\treturn\n\t\t\t\tprev.next = temp.next\n\t\t\t\ttemp = None\n\n\t\tdef delete_node_at_pos(self, pos):\n\t\t\t"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test_str, K))\n\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test_str, K))\n\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test_str, K))\n\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test_str, K))\n\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test_str, K))\n\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\treturn \" \".join(i for i in test_str.split() if len(i)!= K)\n\ntest_str = \"Geeks for Geeks\"\nK = 4\nprint(remove_length(test"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t\tcount = 0\n\t\tfor i in range(len(text)):\n\t\t\tif text[i:i+len(pattern)] == pattern:\n\t\t\t\tcount += 1\n\t\t\t\tprint(\"The substring {} occurs at position {}\".format(pattern,i))\n\t\tprint(\"The substring {} occurs {} times\".format(pattern,count))\n\ntext = \"This is a test string\"\npattern = \"is\"\noccurance_substring(text,pattern)\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\nclass Node:\n\tdef __init__(self,data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef insert_at_beginning(self,data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_at_end(self,data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast_node = self.head\n\t\twhile last_node.next:\n\t\t\tlast_node = last_node.next\n\t\tlast_node.next = new_node\n\n\tdef insert_after_node(self,prev_node,data):\n\t\tif not prev_node:\n\t\t\tprint(\"Previous node does not exist\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef delete_node(self,key):\n\t\thead_node = self.head\n\t\tif head_node and head_node.data == key:\n\t\t\tself.head = head_node.next\n\t\t\thead_node = None\n\t\t\treturn\n\t\tprev = None\n\t\twhile head_node and head_node.data!= key:\n\t\t\tprev = head_node\n\t\t\thead_node = head_node.next\n\t\tif head_node is None:\n\t\t\treturn\n\t\tprev.next = head_node.next\n\t\thead_node = None\n\n\tdef print_list(self):\n\t\ttemp = self.head"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if(re.search(regex,email)):  \n        print(\"Valid Email\")  \n    else:  \n        print(\"Invalid Email\")\n\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")\ncheck_email(\"<EMAIL>\")"}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t\tfor i in range(1,len(nums),2):\n\t\t\tif nums[i]%2==0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(odd_position([1,2,3,4,5,6,7,8,9]))\nprint(odd_position([1,2,3,4,5,6,7,8,10]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t\tvowels = ['a', 'e', 'i', 'o', 'u']\n\t\tcount = 0\n\t\tfor i in range(len(test_str)-1):\n\t\t\tif test_str[i] in vowels and test_str[i+1] in vowels:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_vowels('abecedarian'))\nprint(count_vowels('aeiou'))\nprint(count_vowels('aeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\tsum = 0\n\t\tfor i in range(n): \n\t\t\tsum = sum + arr[i] \n\t\treturn sum \n\ndef find_Sum_Non_Repeated(arr,n): \n\tsum = find_Sum(arr,n) \n\tfor i in range(n): \n\t\tif arr[i]!= 0: \n\t\t\tsum = sum - arr[i] \n\treturn sum \n\narr = [1,2,3,4,5,6,7,8,9,10] \nn = len(arr) \nprint(\"Sum of non-repeated elements is\", find_Sum_Non_Repeated(arr,n)) \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(arr,n): \n\tsum = 0\n\tfor i in range(n): \n\t\tsum = sum + arr[i] \n\treturn (n*(n+1)/2) - sum \n\narr = [1,2,3,4,6,7,8,9,10] \nn = len(arr) \nprint(\"Missing number is\", find_missing_number(arr,n)) \n<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in it.\n\"\"\"\ndef find_duplicate_number(arr,n): \n\tfor i in range(n): \n\t\tif arr[abs(arr[i])-1] > 0: \n\t\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1] \n\t\telse: \n\t\t\treturn abs(arr[i]) \n\treturn -1\n\narr = [1,2,3,1,3,6,6] \nn = len(arr) \nprint(\"First repeated number is\", find_duplicate_number(arr,n)) \n<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\""}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tif i == 0:\n\t\t\t\tlist2.append([list1[i]])\n\t\t\telif list1[i] == list1[i-1]:\n\t\t\t\tlist2[-1].append(list1[i])\n\t\t\telse:\n\t\t\t\tlist2.append([list1[i]])\n\t\treturn list2\n\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4, 5, 5, 5]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\n \n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\n \n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nclass Solution:\n    def commonChars(self, A: List[str]) -> List[str]:\n        if not A:\n            return []\n        if len(A) == 1:\n           "}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\t\"\"\"\n\t\tReturns the number of unique sublists within a list.\n\t\t\"\"\"\n\t\tunique_sublists = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tif list1[i:j] not in unique_sublists:\n\t\t\t\t\tunique_sublists.append(list1[i:j])\n\t\treturn len(unique_sublists)\n\n\"\"\"\nWrite a function to find the longest sublist within a list.\n\"\"\"\ndef longest_sublist(list1):\n\t\t\"\"\"\n\t\tReturns the longest sublist within a list.\n\t\t\"\"\"\n\t\tlongest_sublist = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tif list1[i:j] not in longest_sublist:\n\t\t\t\t\tlongest_sublist = list1[i:j]\n\t\treturn longest_sublist\n\n\"\"\"\nWrite a function to find the longest sublist within a list that is also a palindrome.\n\"\"\"\ndef longest_palindrome(list1):\n\t\t\"\"\"\n\t\tReturns the longest sublist within a list that is also a palindrome.\n\t\t\"\"\"\n\t\tlongest_palindrome = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tif list1[i:j] not in longest_palindrome and list1[i:j] == list1[i:j][::-1]:\n\t\t\t\t\tlongest_palindrome = list1[i:j]\n\t\treturn longest_palindrome\n\n\"\"\"\nWrite a function to find the longest sublist within a list that is also a palindrome.\n\"\"\"\ndef longest_palindrome_2(list1):\n\t\t\"\"\"\n\t\tReturns the longest sublist within a list that is also a palindrome.\n\t\t\"\"\"\n\t\tlongest_palindrome = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tif list1[i:j] not in longest_palindrome and list1[i:j] == list1[i:j][::-1]:\n\t\t\t\t\tlongest_palindrome = list1[i:j]"}
{"ID": 179, "source": "MBPP:780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\t# TODO: Write your code here\n\t\treturn []\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\tprint(find_combinations(test_list))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nif __name__ == '__main__':\n\tprint(single_number([2,2,1]))\n\tprint(single_number([4,1,2,1,2]))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode(object):\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\ndef level_order_bottom(root):\n\t\"\"\"\n\t:type root: TreeNode\n\t:rtype: List"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t\n    # Initialize count of divisors \n    count = 0\n  \n    # Find all divisors \n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            count += 1\n  \n    # Return true if count is even, false otherwise \n    if (count % 2 == 0) : \n        return True\n    else : \n        return False\n  \n# Driver Code \nn = 10\nif (count_Divisors(n)) : \n    print(\"Even\") \nelse : \n    print(\"Odd\") <file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (lname + \" \" + fname)\n\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n"}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t\tsum = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i,len(arr)):\n\t\t\t\tif (j-i+1)%2!= 0:\n\t\t\t\t\tsum += arr[i:j+1]\n\t\treturn sum\n\nprint(Odd_Length_Sum([1,2,3,4,5,6,7,8,9]))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nWrite a python function to rotate an array by n positions.\n\"\"\"\ndef Array_Rotation(arr,n):\n\treturn arr[n:]+arr[:n]\n\nprint(Array_Rotation([1,2,3,4,5,6,7,8,9],3))\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nWrite a python function to rotate an array by n positions.\n\"\"\"\ndef Array_Rotation_2(arr,n):\n\treturn arr[-n:]+arr[:-n]\n\nprint(Array_Rotation_2([1,2,3,4,5,6,7,8,9],3))\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nWrite a python function to rotate an array by n positions.\n\"\"\"\ndef Array_Rotation_3(arr,n):\n\treturn arr[len(arr)-n:]+arr[:len(arr)-n]\n\nprint(Array_Rotation_3([1,2,3,4,5,6,7,8,9],3))\n<file_sep>/Python/Array/Array_Rotation_4.py\n\"\"\"\nWrite a python function to rotate an array by n positions.\n\"\"\"\ndef Array_Rotation_4(arr,n):\n\treturn arr[len(arr)-n:]+arr[:len(arr)-n]\n\nprint(Array_Rotation_4([1,2,3,4,5,6,7,8,9],3))\n<file_sep>/Python/Array/Array_Rotation_5.py\n\"\"\"\nWrite a python function to rotate an array by n positions.\n\"\"\"\ndef Array_Rotation_5(arr,n):\n\treturn arr[len(arr)-n:]+arr[:len(arr)-n]\n\nprint(Array_Rotation_5([1"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t\tr, g, b = r/255.0, g/255.0, b/255.0\n\t\tmx = max(r, g, b)\n\t\tmn = min(r, g, b)\n\t\tdf = mx-mn\n\t\tif mx == mn:\n\t\t\th = 0\n\t\telif mx == r:\n\t\t\th = (60 * ((g-b)/df) + 360) % 360\n\t\telif mx == g:\n\t\t\th = (60 * ((b-r)/df) + 120) % 360\n\t\telif mx == b:\n\t\t\th = (60 * ((r-g)/df) + 240) % 360\n\t\tif mx == 0:\n\t\t\ts = 0\n\t\telse:\n\t\t\ts = (df/mx)*100\n\t\tv = mx*100\n\t\treturn h, s, v\n\n\"\"\"\nWrite a function to convert hsv color to rgb color.\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n\t\th = float(h)\n\t\ts = float(s)\n\t\tv = float(v)\n\t\th60 = h / 60.0\n\t\th60f = math.floor(h60)\n\t\thi = int(h60f) % 6\n\t\tf = h60 - h60f\n\t\tp = v * (1 - s)\n\t\tq = v * (1 - f * s)\n\t\tt = v * (1 - (1 - f) * s)\n\t\tr, g, b = 0, 0, 0\n\t\tif hi == 0: r, g, b = v, t, p\n\t\telif hi == 1: r, g, b = q, v, p\n\t\telif hi == 2: r, g, b = p, v, t\n\t\telif hi == 3: r, g, b = p, q, v\n\t\telif hi == 4: r, g, b = t, p, v\n\t\telif hi == 5: r, g, b = v, p, q\n\t\tr, g, b = int("}
{"ID": 183, "source": "MBPP:784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t\teven_mul = 1\n\t\todd_mul = 1\n\t\tfor i in list1:\n\t\t\tif i%2 == 0:\n\t\t\t\teven_mul = even_mul * i\n\t\t\telse:\n\t\t\t\todd_mul = odd_mul * i\n\t\treturn even_mul * odd_mul\n\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# Syntax: [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 1 to 10\n\nsquares = [x**2 for x in range(1,11)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 1 to 10\n\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of even numbers from 1 to 10 and their squares\n\neven_squares = [x**2 for x in range(1,11) if x%2 == 0]\nprint(even_squares)\n\n# Example 4\n# Create a list of even numbers from 1 to 10 and their squares\n\neven_squares = [x**2 for x in range(1,11) if x%2 == 0]\nprint(even_squares)\n\n# Example 5\n# Create a list of even numbers from 1 to 10 and their squares\n\neven_squares = [x**2 for x in range(1,11) if x%2 == 0]\nprint(even_squares)\n\n# Example 6\n# Create a list of even numbers from 1 to 10 and their squares\n\neven_squares = [x**2 for x in range(1,11) if x%2 == 0]\nprint(even_squares)\n\n# Example 7\n# Create a list of even numbers from 1 to 10 and their"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t\treturn tuple(map(int, test_str.split(',')))\n\nprint(tuple_str_int('1,2,3,4,5'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18'))\nprint(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19'))\nprint(tuple_str_int('1,2,3,"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\t\"\"\"\n\t\tLocate the right insertion point for x in a, assuming a is sorted in increasing order.\n\t\t\"\"\"\n\t\ti = 0\n\t\tj = len(a) - 1\n\t\twhile i < j:\n\t\t\t\tmid = (i + j) // 2\n\t\t\t\tif x > a[mid]:\n\t\t\t\t\t\ti = mid + 1\n\t\t\t\telse:\n\t\t\t\t\t\tj = mid\n\t\treturn i\n\n\"\"\"\nWrite a function to find the index of an element in a sorted array of unknown size.\n\"\"\"\ndef find_index(a, x):\n\t\t\"\"\"\n\t\tFind the index of x in a, assuming a is sorted in increasing order.\n\t\t\"\"\"\n\t\ti = 0\n\t\twhile i < len(a):\n\t\t\t\tif a[i] == x:\n\t\t\t\t\t\treturn i\n\t\t\t\ti += 1\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the index of an element in a sorted array of unknown size.\n\"\"\"\ndef find_index(a, x):\n\t\t\"\"\"\n\t\tFind the index of x in a, assuming a is sorted in increasing order.\n\t\t\"\"\"\n\t\ti = 0\n\t\twhile i < len(a):\n\t\t\t\tif a[i] == x:\n\t\t\t\t\t\treturn i\n\t\t\t\ti += 1\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the index of an element in a sorted array of unknown size.\n\"\"\"\ndef find_index(a, x):\n\t\t\"\"\"\n\t\tFind the index of x in a, assuming a is sorted in increasing order.\n\t\t\"\"\"\n\t\ti = 0\n\t\twhile i < len(a):\n\t\t\t\tif a[i] == x:\n\t\t\t\t\t\treturn i\n\t\t\t\ti += 1\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the index of an element in a sorted array of unknown size.\n\"\"\"\ndef find_index(a, x):\n\t\t\"\"\"\n\t\tFind the index of x in a, assuming a is sorted in increasing order.\n\t\t\"\"\"\n\t\ti = 0\n\t\twhile i < len(a):\n\t\t\t\tif a[i] == x:\n\t\t\t\t\t\treturn i\n\t\t\t\ti += 1\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the index of an element in a sorted array of unknown size.\n\"\"\"\ndef find_"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t\treturn re.search(r'ab{3}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two 'b' or four 'b'.\n\"\"\"\ndef text_match_two_four(text):\n\t\treturn re.search(r'ab{2,4}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b' or four 'b'.\n\"\"\"\ndef text_match_three_four(text):\n\t\treturn re.search(r'ab{3,4}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t\treturn re.search(r'ab{0,1}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b' or five 'b'.\n\"\"\"\ndef text_match_three_five(text):\n\t\treturn re.search(r'ab{3,5}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b'.\n\"\"\"\ndef text_match_zero_more(text):\n\t\treturn re.search(r'ab{0,}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b'.\n\"\"\"\ndef text_match_one_more(text):\n\t\treturn re.search(r'ab{1,}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and a 'c'.\n\"\"\"\ndef text_match_zero_more_c(text):\n\t\treturn re.search(r'ab{0,}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b' and two 'c'.\n\"\"\"\ndef text_match_three_b_two_c(text):\n\t\treturn re.search(r'ab{3}c{2}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b' and a maximum of five 'c'.\n\"\"\"\ndef text_match_three_b_five"}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t\treturn (test_list, test_str)\n\n\"\"\"\nWrite a function to create a new list from the given tuple.\n\"\"\"\ndef new_list(test_tuple):\n\t\treturn list(test_tuple)\n\n\"\"\"\nWrite a function to create a new dictionary from the given tuple.\n\"\"\"\ndef new_dict(test_tuple):\n\t\treturn dict(test_tuple)\n\n\"\"\"\nWrite a function to create a new set from the given tuple.\n\"\"\"\ndef new_set(test_tuple):\n\t\treturn set(test_tuple)\n\n\"\"\"\nWrite a function to create a new string from the given tuple.\n\"\"\"\ndef new_str(test_tuple):\n\t\treturn str(test_tuple)\n\n\"\"\"\nWrite a function to create a new string from the given list.\n\"\"\"\ndef new_str_list(test_list):\n\t\treturn str(test_list)\n\n\"\"\"\nWrite a function to create a new string from the given dictionary.\n\"\"\"\ndef new_str_dict(test_dict):\n\t\treturn str(test_dict)\n\n\"\"\"\nWrite a function to create a new string from the given set.\n\"\"\"\ndef new_str_set(test_set):\n\t\treturn str(test_set)\n\n\"\"\"\nWrite a function to create a new list from the given string.\n\"\"\"\ndef new_list_str(test_str):\n\t\treturn list(test_str)\n\n\"\"\"\nWrite a function to create a new list from the given dictionary.\n\"\"\"\ndef new_list_dict(test_dict):\n\t\treturn list(test_dict)\n\n\"\"\"\nWrite a function to create a new list from the given set.\n\"\"\"\ndef new_list_set(test_set):\n\t\treturn list(test_set)\n\n\"\"\"\nWrite a function to create a new dictionary from the given string.\n\"\"\"\ndef new_dict_str(test_str):\n\t\treturn dict(test_str)\n\n\"\"\"\nWrite a function to create a new dictionary from the given list.\n\"\"\"\ndef new_dict_list(test_list):\n\t\treturn dict(test_list)\n\n\"\"\"\nWrite a function to create a new dictionary from the given set.\n\"\"\"\ndef new_dict_set(test_"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t\treturn s*l\n\nprint(perimeter_polygon(3,4))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\t\treturn 0.5*b*h\n\nprint(area_triangle(3,4))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint(area_circle(3))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,b):\n\t\treturn 2*(l+b)\n\nprint(perimeter_rectangle(3,4))\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(s):\n\t\treturn s*s\n\nprint(area_square(3))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECREMENT } from '../actions/counter';\n\nconst initialState = 0;\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t\tfor i in range(0,len(nums),2):\n\t\t\tif nums[i]%2!= 0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(even_position([1,2,3,4,5,6,7,8,9]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10]))\nprint(even_position([1,2,3,4,5,6,7,8,9,11]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(even_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(even_position([1"}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t\treturn test_tup[0]\n\n\"\"\"\nWrite a function to get the largest number from a given tuple.\n\"\"\"\ndef get_largest(test_tup):\n\t\treturn max(test_tup)\n\n\"\"\"\nWrite a function to get the smallest number from a given tuple.\n\"\"\"\ndef get_smallest(test_tup):\n\t\treturn min(test_tup)\n\n\"\"\"\nWrite a function to find the second largest number from a given tuple.\n\"\"\"\ndef get_second_largest(test_tup):\n\t\treturn sorted(test_tup)[-2]\n\n\"\"\"\nWrite a function to find the second smallest number from a given tuple.\n\"\"\"\ndef get_second_smallest(test_tup):\n\t\treturn sorted(test_tup)[1]\n\n\"\"\"\nWrite a function to find the sum of all the elements in a given tuple.\n\"\"\"\ndef get_sum(test_tup):\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of all the elements in a given tuple.\n\"\"\"\ndef get_product(test_tup):\n\t\treturn reduce(lambda x, y: x * y, test_tup)\n\n\"\"\"\nWrite a function to find the average of all the elements in a given tuple.\n\"\"\"\ndef get_average(test_tup):\n\t\treturn sum(test_tup) / len(test_tup)\n\n\"\"\"\nWrite a function to find the median of all the elements in a given tuple.\n\"\"\"\ndef get_median(test_tup):\n\t\treturn sorted(test_tup)[len(test_tup) / 2]\n\n\"\"\"\nWrite a function to find the mode of all the elements in a given tuple.\n\"\"\"\ndef get_mode(test_tup):\n\t\treturn max(set(test_tup), key=test_tup.count)\n\n\"\"\"\nWrite a function to find the frequency of each element in a given tuple.\n\"\"\"\ndef get_frequency(test_tup):\n\t\treturn {i: test_tup.count(i) for i in test_tup}\n\n\"\"\"\nWrite a function to find the factorial of a given number.\n\"\"\"\ndef get_factorial(num):\n\t\treturn reduce(lambda x, y: x * y, range(1,"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n\nprint(count_list([1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,10],1,2,3,4,5,6,7,8,9,10,[1,2,3,4,5,6,7,8,9,1"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t\tif n==0:\n\t\t\treturn -1\n\t\tif arr[n-1]==x:\n\t\t\treturn n-1\n\t\tif arr[n-1]>x:\n\t\t\treturn last(arr,x,n-1)\n\t\telse:\n\t\t\treturn last(arr,x,n-1)\n\narr=[1,2,3,4,5,6,7,8,9,10]\nx=10\nn=len(arr)\nprint(last(arr,x,n))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array to the right by k steps, where k is non-negative.\n\nExample 1:\n\nInput: [1,2,3,4,5,6,7] and k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\nExample 2:\n\nInput: [-1,-100,3,99] and k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\"\"\"\ndef rotate(arr,k):\n\tn=len(arr)\n\tfor i in range(k):\n\t\ttemp=arr[n-1]\n\t\tfor j in range(n-1,0,-1):\n\t\t\tarr[j]=arr[j-1]\n\t\tarr[0]=temp\n\treturn arr\n\narr=[1,2,3,4,5,6,7]\nk=3\nprint(rotate(arr,k))\n<file_sep>/Python/Array/Array_Intersection.py\n\"\"\"\nGiven two arrays, write a function to compute their intersection.\n\nExample 1:\n\nInput: nums1 = [1,"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\treturn re.search('a.*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith a 'c' in the middle.\n\"\"\"\ndef text_starta_middlec_endb(text):\n\t\treturn re.search('a.*c.*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith any number of a's in the middle.\n\"\"\"\ndef text_starta_middlea_endb(text):\n\t\treturn re.search('a.*a.*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith any number of a's or b's in the middle.\n\"\"\"\ndef text_starta_middleab_endb(text):\n\t\treturn re.search('a.*[ab].*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith any number of a's or b's in the middle, with the 'a' and 'b' in the middle in a row.\n\"\"\"\ndef text_starta_middleabab_endb(text):\n\t\treturn re.search('a.*[ab][ab].*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith any number of a's or b's in the middle, with the 'a' and 'b' in the middle in a row,\nwith any number of a's or b's in the middle.\n\"\"\"\ndef text_starta_middleababab_endb(text):\n\t\treturn re.search('a.*[ab][ab][ab].*b$', text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b',\nwith any number of a's or b's in the middle, with the 'a' and 'b' in the middle in a row,\nwith any number of a's or b's in the middle, with the 'a' and 'b' in the middle in a row.\n\"\"\""}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t\theap = []\n\t\tfor item in items:\n\t\t\theapq.heappush(heap,item)\n\t\treturn [heapq.heappop(heap) for i in range(n)]\n\nitems = [1,2,3,4,5,6,7,8,9,10]\nn = 5\nprint(cheap_items(items,n))\n<file_sep>/README.md\n# Data-Structures-and-Algorithms\nThis repository contains the implementation of various data structures and algorithms in python.\n<file_sep>/Data Structures/Linked List/Singly Linked List/Singly Linked List.py\n\"\"\"\nImplementation of Singly Linked List\n\"\"\"\nclass Node:\n\tdef __init__(self,data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass SinglyLinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef insert_at_beginning(self,data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_at_end(self,data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast_node = self.head\n\t\twhile last_node.next:\n\t\t\tlast_node = last_node.next\n\t\tlast_node.next = new_node\n\n\tdef insert_after_node(self,prev_node,data):\n\t\tif not prev_node:\n\t\t\tprint(\"Previous node does not exist\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef delete_node(self,key):\n\t\thead_node = self.head\n\t\tif head_node and head_node.data == key:\n\t\t\tself.head = head_node.next\n\t\t\thead_node = None\n\t\t\treturn\n\t\tprev = None\n\t\twhile head_node and head_node.data!= key:\n\t\t\tprev = head_node\n\t\t\thead_node = head_node.next\n\t\tif head_node is None:\n\t\t\treturn\n\t\tprev.next = head_"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor i in dict:\n\t\t\tsum += dict[i]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of"}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t\tif l%2==0:\n\t\t\tl=l+1\n\t\tsum=0\n\t\tfor i in range(l,r+1,2):\n\t\t\tsum=sum+i\n\t\treturn sum\n\nprint(sum_in_Range(1,10))\nprint(sum_in_Range(1,11))\nprint(sum_in_Range(1,12))\nprint(sum_in_Range(1,13))\nprint(sum_in_Range(1,14))\nprint(sum_in_Range(1,15))\nprint(sum_in_Range(1,16))\nprint(sum_in_Range(1,17))\nprint(sum_in_Range(1,18))\nprint(sum_in_Range(1,19))\nprint(sum_in_Range(1,20))\nprint(sum_in_Range(1,21))\nprint(sum_in_Range(1,22))\nprint(sum_in_Range(1,23))\nprint(sum_in_Range(1,24))\nprint(sum_in_Range(1,25))\nprint(sum_in_Range(1,26))\nprint(sum_in_Range(1,27))\nprint(sum_in_Range(1,28))\nprint(sum_in_Range(1,29))\nprint(sum_in_Range(1,30))\nprint(sum_in_Range(1,31))\nprint(sum_in_Range(1,32))\nprint(sum_in_Range(1,33))\nprint(sum_in_Range(1,34))\nprint(sum_in_Range(1,35))\nprint(sum_in_Range(1,36))\nprint(sum_in_Range(1,37))\nprint(sum_in_Range(1,38))\nprint(sum_in_Range(1,39))\nprint(sum_in_Range(1,40))\nprint(sum_in_Range(1,41))\nprint(sum_in_Range(1,42))\nprint("}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t\treturn sum(arr)\n\ndef test_sum():\n\tassert _sum([1,2,3,4,5]) == 15\n\tassert _sum([1,2,3,4,5,6]) == 21\n\tassert _sum([1,2,3,4,5,6,7]) == 28\n\tassert _sum([1,2,3,4,5,6,7,8]) == 36\n\tassert _sum([1,2,3,4,5,6,7,8,9]) == 45\n\tassert _sum([1,2,3,4,5,6,7,8,9,10]) == 55\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11]) == 66\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12]) == 78\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 91\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 105\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 120\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 136\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 153\n\tassert _sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\treturn (n << d)|(n >> (32-d))\n\nn = int(input(\"Enter a number: \"))\nd = int(input(\"Enter the number of bits to be rotated: \"))\nprint(\"The left rotated number is: \",left_Rotate(n,d))\n<file_sep>/Python/Basic/10.py\n\"\"\"\nWrite a python program to find the sum of the series 1+1/2+1/3+1/4+1/5+...+1/n\n\"\"\"\nn = int(input(\"Enter the number of terms: \"))\nsum = 0\nfor i in range(1,n+1):\n\tsum += 1/i\nprint(\"The sum of the series is: \",sum)\n<file_sep>/Python/Basic/11.py\n\"\"\"\nWrite a python program to find the sum of the series 1+1/2+1/3+1/4+1/5+...+1/n\n\"\"\"\nn = int(input(\"Enter the number of terms: \"))\nsum = 0\nfor i in range(1,n+1):\n\tsum += 1/i\nprint(\"The sum of the series is: \",sum)\n<file_sep>/Python/Basic/12.py\n\"\"\"\nWrite a python program to find the sum of the series 1+1/2+1/3+1/4+1/5+...+1/n\n\"\"\"\nn = int(input(\"Enter the number of terms: \"))\nsum = 0\nfor i in range(1,n+1):\n\tsum += 1/i\nprint(\"The sum of the series is: \",sum)\n<file_sep>/Python/Basic/13.py\n\"\"\"\nWrite a python program to find the sum of the series 1+1/2+1/3+1/4+1/5+...+1/n\n\"\"\"\nn = int(input(\"Enter the number of terms: \"))\nsum = 0\nfor i in range(1,n+1):\n\tsum += 1/i\nprint(\"The sum of the series is: \",sum)\n<file_sep>/Python/Basic/14.py\n\"\"\"\nWrite a python program to find the sum of the series 1+1/2+1/3+"}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t\treturn text.replace(\" \", \"\")\n\nprint(remove_all_spaces(\"Hello World\"))\n<file_sep>/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python/python_basics/03_variables.py\n\"\"\"\nWrite a program that creates three variables, x, y and z and assigns them\n10, 20 and \"Hello World\" respectively. Finally, print all three variables.\n\"\"\"\nx = 10\ny = 20\nz = \"Hello World\"\nprint(x, y, z)\n<file_sep>/python/python_basics/02_variables.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string,\nin this case, your name. Finally, print, using a print statement, your name.\n\"\"\"\nname = \"<NAME>\"\nprint(name)\n<file_sep>/python/python_basics/04_variables.py\n\"\"\"\nWrite a program that creates two variables, a and b and assigns them the\nvalues 10 and 20 respectively. Finally, print a * b.\n\"\"\"\na = 10\nb = 20\nprint(a * b)\n<file_sep>/python/python_basics/05_variables.py\n\"\"\"\nWrite a program that creates two variables, a and b and assigns them the\nvalues 10 and 20 respectively. Finally, print a / b.\n\"\"\"\na = 10\nb = 20\nprint(a / b)\n<file_sep>/python/python_basics/06_variables.py\n\"\"\"\nWrite a program that creates two variables, a and b and assigns them the\nvalues 10 and 20 respectively. Finally, print a + b.\n\"\"\"\na = 10\nb = 20\nprint(a + b)\n<file_sep>/python/python_basics/07_variables.py\n\"\"\"\nWrite a program that creates two variables, a and b and assigns them the\nvalues 10 and 20 respectively. Finally, print a - b.\n\"\"\"\na = 10\nb = 20\nprint(a - b)\n<file_sep>/python/python_basics/08"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t\tif x==y==z:\n\t\t\treturn 3\n\t\telif x==y or x==z or y==z:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn 0\n\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(3,4,3))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,4))\nprint(test_three_equal(3,4,5))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(3,4,3))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,4))\nprint(test_three_equal(3,4,5))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(3,4,3))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,4))\nprint(test_three_equal(3,4,5))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(3,4,3))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,4))\nprint(test"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t\t# Find the minimum element in arr[0..n-1] \n\t\tmin = arr[0] \n\t\tfor i in range(1, n): \n\t\t\tif arr[i] < min: \n\t\t\t\tmin = arr[i] \n\n\t\t# Return distance between min and 0 \n\t\treturn min \n\n# Driver program to test above function \narr = [15, 18, 2, 3, 6, 12] \nn = len(arr) \nprint(\"Number of rotations required is\", count_Rotation(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr, n): \n\tx = arr[n-1] \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i] = arr[i - 1] \n\tarr[0] = x \n\n# Driver program to test above function \narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nrotate(arr, n) \nfor i in range(0, n): \n\tprint(arr[i], end = \" \") \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/Array_Search.py\n\"\"\"\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\"\"\"\ndef binarySearch(arr, l, r, x): \n\tif r >= l: \n\t\tmid = l + (r - l)//2\n\t\tif arr[mid] == x: \n\t\t\treturn mid \n\t\telif arr[mid] > x: \n\t\t\treturn binarySearch(arr, l, mid-1, x) \n\t\telse: \n\t\t\treturn binarySearch(arr, mid + 1, r, x) \n\telse: \n\t\treturn -1\n\n# Driver Code \narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binarySearch(arr, 0, len(arr)-1, x) \nif result!= -1:"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t\tif n < 0 :\n\t\t\treturn False\n\t\troot = int(math.sqrt(n))\n\t\treturn root * root == n\n\nprint(is_Perfect_Square(16))\nprint(is_Perfect_Square(14))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n# OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n# OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n# OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n# OR\n\nfor"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\treturn arr[n - 1] * is_Product_Even(arr, n - 1) \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(is_Product_Even(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t\tmax_sum = 0\n\t\tmax_list = []\n\t\tfor list in lists:\n\t\t\tif sum(list) > max_sum:\n\t\t\t\tmax_sum = sum(list)\n\t\t\t\tmax_list = list\n\t\treturn max_list\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum(list)\n\treturn sum\n\n\"\"\"\nWrite a function that takes a list of lists and returns the sum of all the elements in the list of lists.\n\"\"\"\ndef sum_list_of_lists(lists):\n\tsum = 0\n\tfor list in lists:\n\t\tsum += sum("}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t\tmax_run = 0\n\t\tcurrent_run = 0\n\t\tfor i in range(len(test_str)):\n\t\t\tif test_str[i].isupper():\n\t\t\t\tcurrent_run += 1\n\t\t\telse:\n\t\t\t\tif current_run > max_run:\n\t\t\t\t\tmax_run = current_run\n\t\t\t\tcurrent_run = 0\n\t\tif current_run > max_run:\n\t\t\tmax_run = current_run\n\t\treturn max_run\n\nprint(max_run_uppercase(\"abcDE\"))\nprint(max_run_uppercase(\"abcde\"))\nprint(max_run_uppercase(\"abcDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\"))\nprint(max_run_uppercase(\"abcDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE\"))\nprint("}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\tfor num in nums:\n\t\t\tif num % 2!= 0:\n\t\t\t\treturn num\n\nprint(first_odd([1,2,3,4,5,6,7,8,9]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nBasic - Print all the multiples of 5 from 5 to 1,000\n\nBasic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nBasic - Print the sum of all numbers from 5 to 5000000.\n\nBasic - Print positive numbers starting at 2018, counting down by fours.\n\nBasic - Print the sum of all the values in the list: a = [1, 2, 5, 10, 255, 3]\n\nBasic - List of all the multiples of 5 from 5 to 50000000\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(151):\n\tprint(i)\n\n# Basic - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5, 1001, 5):\n\tprint(i)\n\n# Basic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1, 101):\n\tif i % 5 == 0 and i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telif i % 5 == 0:\n\t\tprint(\"Coding\")\n\telse:\n\t\tprint(i)\n\n# Basic - Print the sum of all numbers from 5 to 5000000.\nsum = 0\nfor i in range(5, 5000001):\n\tsum += i\nprint(sum)\n\n# Basic - Print positive numbers starting at "}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n# test\ntest_tup = (1, 2, 3, 4, 5)\nK = 3\nprint(check_K(test_tup, K))\n<file_sep>/Python/Python_Basics/01_Python_Basics/01_Python_Basics.py\n\"\"\"\nPython Basics\n\"\"\"\n\n# 1. Print Hello World\nprint(\"Hello World\")\n\n# 2. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 3. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 4. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 5. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 6. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 7. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 8. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 9. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 10. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 11. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 12. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 13. Print the sum of two numbers\na = 10\nb = 20\nprint(a + b)\n\n# 14. Print the sum of two numbers\na = 10\nb = 2"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t\treturn [test_tup2[i] < test_tup1[i] for i in range(len(test_tup1))]\n\nprint(check_smaller((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)))\nprint(check_smaller((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter radius of circle: \"))\nprint(\"Area of circle is: \", math.pi * radius * radius)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a):\n\t\t\tprint(b)\n\t\tfor i in range(c):\n\t\t\tprint(d)\n\ncount_variable(3,\"a\",\"b\",2)\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a function to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\tfor i in range(n-1,0,-1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a function to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\tfor i in range(n-1,0,-1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n\n\"\"\"\nWrite a function to print the following pattern\n1\n1 2\n1 "}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t\treturn street.replace('road', 'rd.')\n\n\"\"\"\nWrite a function to abbreviate'street' as'st.' in a given string.\n\"\"\"\ndef street_st(street):\n\t\treturn street.replace('street','st.')\n\n\"\"\"\nWrite a function to abbreviate 'avenue' as 'ave.' in a given string.\n\"\"\"\ndef avenue_ave(street):\n\t\treturn street.replace('avenue', 'ave.')\n\n\"\"\"\nWrite a function to abbreviate 'boulevard' as 'blvd.' in a given string.\n\"\"\"\ndef boulevard_blvd(street):\n\t\treturn street.replace('boulevard', 'blvd.')\n\n\"\"\"\nWrite a function to abbreviate 'drive' as 'dr.' in a given string.\n\"\"\"\ndef drive_dr(street):\n\t\treturn street.replace('drive', 'dr.')\n\n\"\"\"\nWrite a function to abbreviate 'place' as 'pl.' in a given string.\n\"\"\"\ndef place_pl(street):\n\t\treturn street.replace('place', 'pl.')\n\n\"\"\"\nWrite a function to abbreviate'square' as'sq.' in a given string.\n\"\"\"\ndef square_sq(street):\n\t\treturn street.replace('square','sq.')\n\n\"\"\"\nWrite a function to abbreviate 'circle' as 'cir.' in a given string.\n\"\"\"\ndef circle_cir(street):\n\t\treturn street.replace('circle', 'cir.')\n\n\"\"\"\nWrite a function to abbreviate 'highway' as 'hwy.' in a given string.\n\"\"\"\ndef highway_hwy(street):\n\t\treturn street.replace('highway', 'hwy.')\n\n\"\"\"\nWrite a function to abbreviate 'parkway' as 'pkwy.' in a given string.\n\"\"\"\ndef parkway_pkwy(street):\n\t\treturn street.replace('parkway', 'pkwy.')\n\n\"\"\"\nWrite a function to abbreviate 'court' as 'ct.' in a given string.\n\"\"\"\ndef court_ct(street):\n\t\treturn street.replace('court', 'ct.')\n\n\"\"\"\nWrite a function to abbreviate 'lane' as 'ln.' in a given"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t\tcount = 0\n\t\tfor i in str1:\n\t\t\tcount += 1\n\t\treturn count\n\nstr1 = input(\"Enter the string: \")\nprint(\"Length of the string is: \", string_length(str1))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(i, i+5):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(i+j-1, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(i+j-1, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t\treturn p*q\n\nprint(rombus_area(4,5))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t\n\n\t# Your code here\n\ti = 0\n\tj = 0\n\tk = n-1\n\n\twhile j <= k:\n\t\tif arr[j] == 0:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telif arr[j] == 1:\n\t\t\tj += 1\n\t\telse:\n\t\t\tarr[j], arr[k] = arr[k], arr[j]\n\t\t\tk -= 1\n\n\treturn arr\n\narr = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]\nn = len(arr)\nprint(sort_by_dnf(arr, n))<file_sep>/Arrays/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\ndef first_missing_positive(arr):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\ti = 0\n\twhile i < len(arr):\n\t\tif arr[i] <= 0:\n\t\t\tarr[i] = len(arr) + 1\n\t\ti += 1\n\n\ti = 0\n\twhile i < len(arr):\n\t\tnum = abs(arr[i])\n\t\tif num <= len(arr) and arr[num - 1] > 0:\n\t\t\tarr[num - 1] = -arr[num - 1]\n\t\ti += 1\n\n\ti = 0\n\twhile i < len(arr):\n\t\tif arr[i] > 0:\n\t\t\treturn i + 1\n\t\ti += 1\n\n\treturn len(arr) + 1\n\narr = [3, 4, -1, 1]\nprint"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t\ttest_tup = ()\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to find the length of the given tuple.\n\"\"\"\ndef find_length(test_tup):\n\t\treturn len(test_tup)\n\n\"\"\"\nWrite a function to find the minimum and maximum values in the given tuple.\n\"\"\"\ndef find_min_max(test_tup):\n\t\treturn min(test_tup), max(test_tup)\n\n\"\"\"\nWrite a function to find the sum of all the elements in the given tuple.\n\"\"\"\ndef find_sum(test_tup):\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of all the elements in the given tuple.\n\"\"\"\ndef find_product(test_tup):\n\t\treturn reduce(lambda x, y: x*y, test_tup)\n\n\"\"\"\nWrite a function to find the average of all the elements in the given tuple.\n\"\"\"\ndef find_average(test_tup):\n\t\treturn sum(test_tup)/len(test_tup)\n\n\"\"\"\nWrite a function to find the median of all the elements in the given tuple.\n\"\"\"\ndef find_median(test_tup):\n\t\treturn sorted(test_tup)[len(test_tup)/2]\n\n\"\"\"\nWrite a function to find the mode of all the elements in the given tuple.\n\"\"\"\ndef find_mode(test_tup):\n\t\treturn max(set(test_tup), key=test_tup.count)\n\n\"\"\"\nWrite a function to find the frequency of all the elements in the given tuple.\n\"\"\"\ndef find_frequency(test_tup):\n\t\treturn {i:test_tup.count(i) for i in test_tup}\n\n\"\"\"\nWrite a function to find the second largest element in the given tuple.\n\"\"\"\ndef find_second_largest(test_tup):\n\t\treturn sorted(test_tup)[-2]\n\n\"\"\"\nWrite a function to find the second smallest element in the given tuple.\n\"\"\"\ndef find_second_smallest(test_tup):\n\t\treturn sorted(test_tup)[1]\n\n\"\"\"\nWrite a function to find the elements in the given tuple that are greater than a given number.\n\"\"\"\ndef find_greater_than(test_tup"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],2,3))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to find the sum of all the numbers in a list using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n\treturn sum(nums)\n\nprint(sum_of_nums([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a program to find the largest number in a list using lambda function.\n\"\"\"\n\ndef largest_num(nums):\n\treturn max(nums)\n\nprint(largest_num([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a program to find the product of all the numbers in a list using lambda function.\n\"\"\"\n\ndef product_of_nums(nums):\n\treturn reduce(lambda x,y: x*y,nums)\n\nprint(product_of_nums([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECRE"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t\tcount = 0\n\t\tfor i in str:\n\t\t\tif i.islower():\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(lower_ctr(\"Hello World\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_num(list):\n\treturn min(list)\n\nprint(smallest_num([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_str(list):\n\tcount = 0\n\tfor i in list:\n\t\tif len(i) > 1 and i[0] == i[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_str([\"abc\", \"xyz\", \"aba\", \"1221\"]))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t\tcount = 0\n\t\tfor i in range(len(lists)-1):\n\t\t\tif lists[i] == lists[i+1]:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_duplic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))<file_sep>/python/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(lists):\n\tif len(lists) == 0:\n\t\treturn \"\"\n\tif len(lists) == 1:\n\t\treturn lists[0]\n\tprefix = lists[0]\n\tfor i in range(1,len(lists)):\n\t\twhile lists[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\t\t\tif len(prefix) == 0:\n\t\t\t\treturn \"\"\n\treturn prefix\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))<file_sep>/python/python_practice/python_"}
{"ID": 219, "source": "MBPP:820", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t\tif monthnum1 == 2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nmonthnum1 = int(input(\"Enter the month number: \"))\nif check_monthnum_number(monthnum1):\n\tprint(\"The month number contains 28 days\")\nelse:\n\tprint(\"The month number does not contain 28 days\")\n<file_sep>/Python_Assignment_1/Assignment_1_10.py\n\"\"\"\nWrite a function to check whether the given number is a prime number or not.\n\"\"\"\ndef check_prime_number(num1):\n\tif num1 > 1:\n\t\tfor i in range(2, num1):\n\t\t\tif (num1 % i) == 0:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False\n\nnum1 = int(input(\"Enter the number: \"))\nif check_prime_number(num1):\n\tprint(\"The number is a prime number\")\nelse:\n\tprint(\"The number is not a prime number\")\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a function to check whether the given number is even or odd.\n\"\"\"\ndef check_even_odd(num1):\n\tif num1 % 2 == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnum1 = int(input(\"Enter the number: \"))\nif check_even_odd(num1):\n\tprint(\"The number is even\")\nelse:\n\tprint(\"The number is odd\")\n<file_sep>/Python_Assignment_1/Assignment_1_11.py\n\"\"\"\nWrite a function to check whether the given number is a perfect number or not.\n\"\"\"\ndef check_perfect_number(num1):\n\tsum = 0\n\tfor i in range(1, num1):\n\t\tif num1 % i == 0:\n\t\t\tsum = sum + i\n\tif sum == num1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnum1 = int(input(\"Enter the number: \"))\nif check_perfect_number(num1):\n\tprint(\"The number is a perfect number\")\nelse:\n\tprint(\"The number is not a perfect number\")\n<file_sep>/Python_"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t\treturn {**dict1,**dict2}\n\nprint(merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}))\n\n\"\"\"\nWrite a function to remove duplicates from a dictionary.\n\"\"\"\ndef remove_duplicates(dict1):\n\t\treturn {k:v for k,v in dict1.items() if dict1.values().count(v) == 1}\n\nprint(remove_duplicates({'a':1,'b':2,'c':1,'d':2}))\n\n\"\"\"\nWrite a function to get the top three items in a dictionary.\n\"\"\"\ndef top_three(dict1):\n\t\treturn sorted(dict1.items(),key=lambda x:x[1],reverse=True)[:3]\n\nprint(top_three({'a':1,'b':2,'c':3,'d':4,'e':5}))\n\n\"\"\"\nWrite a function to get the key, value, item of a dictionary.\n\"\"\"\ndef get_key_value_item(dict1):\n\t\treturn dict1.keys(),dict1.values(),dict1.items()\n\nprint(get_key_value_item({'a':1,'b':2,'c':3,'d':4,'e':5}))\n\n\"\"\"\nWrite a function to get the sum of a dictionary values.\n\"\"\"\ndef get_sum_of_values(dict1):\n\t\treturn sum(dict1.values())\n\nprint(get_sum_of_values({'a':1,'b':2,'c':3,'d':4,'e':5}))\n\n\"\"\"\nWrite a function to get the product of a dictionary values.\n\"\"\"\ndef get_product_of_values(dict1):\n\t\treturn reduce(lambda x,y:x*y,dict1.values())\n\nprint(get_product_of_values({'a':1,'b':2,'c':3,'d':4,'e':5}))\n\n\"\"\"\nWrite a function to remove the given key from a dictionary.\n\"\"\"\ndef remove_key(dict1,key):\n\t\tdict1.pop(key)\n\t\treturn dict1\n\nprint(remove_key({'a':1,'b':2,'c':3,'d':4,'e':5},'a'))\n"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif not any(char.isdigit() for char in p):\n\t\t\treturn False\n\t\tif not any(char.isupper() for char in p):\n\t\t\treturn False\n\t\tif not any(char.islower() for char in p):\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif not any(char.isdigit() for char in p):\n\t\t\treturn False\n\t\tif not any(char.isupper() for char in p):\n\t\t\treturn False\n\t\tif not any(char.islower() for char in p):\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif not any(char.isdigit() for char in p):\n\t\t\treturn False\n\t\tif not any(char.isupper() for char in p):\n\t\t\treturn False\n\t\tif not any(char.islower() for char in p):\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif not any(char.isdigit() for char in p):\n\t\t\treturn False\n\t\tif not any(char.isupper() for char in p):\n\t\t\treturn False\n\t\tif not any(char.islower() for char in p):\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif not any(char.isdigit() for char in p):\n\t\t\treturn False\n\t\tif not any(char.isupper() for char in p):\n\t\t\treturn False\n\t\tif not any(char.islower() for char in p):\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\n"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\tpattern = re.compile(sample)\n\t\tif pattern.match(string) : \n\t\t\treturn True\n\t\telse : \n\t\t\treturn False\n\nprint(check_substring(\"Hello World\", \"Hell\"))\nprint(check_substring(\"Hello World\", \"Hello\"))\nprint(check_substring(\"Hello World\", \"World\"))\nprint(check_substring(\"Hello World\", \"Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello World\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\"Hello World\", \"Hello Worlds\"))\nprint(check_substring(\""}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t\treturn [x for x in l if x%2!=0]\n\nprint(remove_even([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/list_comprehension/list_comprehension_1.py\n\"\"\"\nWrite a python program to create a list of all even numbers between 1 and 100.\n\"\"\"\n\ndef even_numbers():\n\treturn [x for x in range(1,101) if x%2==0]\n\nprint(even_numbers())\n<file_sep>/python/list_comprehension/list_comprehension_2.py\n\"\"\"\nWrite a python program to create a list of all odd numbers between 1 and 100.\n\"\"\"\n\ndef odd_numbers():\n\treturn [x for x in range(1,101) if x%2!=0]\n\nprint(odd_numbers())\n<file_sep>/python/list_comprehension/list_comprehension_3.py\n\"\"\"\nWrite a python program to create a list of all numbers divisible by 7 between 1 and 100.\n\"\"\"\n\ndef divisible_by_7():\n\treturn [x for x in range(1,101) if x%7==0]\n\nprint(divisible_by_7())\n<file_sep>/python/list_comprehension/list_comprehension_4.py\n\"\"\"\nWrite a python program to create a list of all numbers divisible by 7 and 5 between 1 and 100.\n\"\"\"\n\ndef divisible_by_7_and_5():\n\treturn [x for x in range(1,101) if x%7==0 and x%5==0]\n\nprint(divisible_by_7_and_5())\n<file_sep>/python/list_comprehension/list_comprehension_5.py\n\"\"\"\nWrite a python program to create a list of all numbers divisible by 7 and 5 between 1 and 100.\n\"\"\"\n\ndef divisible_by_7_and_5():\n\treturn [x for x in range(1,101) if x%7==0 and x%5==0"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t\treturn [nums[i] for i in list_index]\n\nprint(access_elements([1,2,3,4,5], [1,3]))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j"}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t\tif a == b and b == c: \n\t\t\tprint(\"Equilateral Triangle\") \n\t\telif a == b or b == c or a == c: \n\t\t\tprint(\"Isosceles Triangle\") \n\t\telse: \n\t\t\tprint(\"Scalene Triangle\") \n\na = int(input(\"Enter the first side of the triangle: \"))\nb = int(input(\"Enter the second side of the triangle: \"))\nc = int(input(\"Enter the third side of the triangle: \"))\ncheck_Type_Of_Triangle(a,b,c)\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the area of a triangle.\n\"\"\"\ndef area_Of_Triangle(a,b,c):\n\ts = (a+b+c)/2\n\tarea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\treturn area\n\na = int(input(\"Enter the first side of the triangle: \"))\nb = int(input(\"Enter the second side of the triangle: \"))\nc = int(input(\"Enter the third side of the triangle: \"))\nprint(\"Area of the triangle is: \",area_Of_Triangle(a,b,c))\n<file_sep>/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the area of a circle.\n\"\"\"\ndef area_Of_Circle(r):\n\tarea = 3.14 * r * r\n\treturn area\n\nr = int(input(\"Enter the radius of the circle: \"))\nprint(\"Area of the circle is: \",area_Of_Circle(r))\n<file_sep>/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the area of a rectangle.\n\"\"\"\ndef area_Of_Rectangle(l,b):\n\tarea = l * b\n\treturn area\n\nl = int(input(\"Enter the length of the rectangle: \"))\nb = int(input(\"Enter the breadth of the rectangle: \"))\nprint(\"Area of the rectangle is: \",area_Of_Rectangle(l,b))\n<file_sep>/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the area of a square."}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\tsum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tsum += list1[i][C]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\tsum = 0\n\t\tfor i in range(len(list1[0])):\n\t\t\tsum += list1[R][i]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\tsum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tsum += list1[i][C]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\tsum = 0\n\t\tfor i in range(len(list1[0])):\n\t\t\tsum += list1[R][i]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\tsum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tsum += list1[i][C]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\tsum = 0\n\t\tfor i in range(len(list1[0])):\n\t\t\tsum += list1[R][i]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\tsum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tsum += list1[i][C]\n\t\treturn sum\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\tsum = 0\n\t\tfor i in range(len(list1[0])):\n\t\t\tsum += list1["}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t\talpha_count = 0\n\t\tdigit_count = 0\n\t\tspl_count = 0\n\t\tfor i in string:\n\t\t\tif i.isalpha():\n\t\t\t\talpha_count += 1\n\t\t\telif i.isdigit():\n\t\t\t\tdigit_count += 1\n\t\t\telse:\n\t\t\t\tspl_count += 1\n\t\tprint(\"alphabets: \",alpha_count)\n\t\tprint(\"digits: \",digit_count)\n\t\tprint(\"special characters: \",spl_count)\n\ncount_alpha_dig_spl(\"hello1234567890\")\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\npattern(5)\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t\n    # Create an empty hash map \n    freq = {} \n    for i in input: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    # Sort the hash map in descending order \n    # of frequency \n    freq = sorted(freq.items(), key = lambda x: x[1], reverse = True) \n    # Return the second most frequent string \n    return freq[1][0] \n\n# Driver code \ninput = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b"}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t\treturn round(a, -int(math.floor(math.log10(abs(a)))) + digits - 1)\n\nprint(round_up(123.456, 2))\nprint(round_up(123.456, 3))\nprint(round_up(123.456, 4))\nprint(round_up(123.456, 5))\nprint(round_up(123.456, 6))\nprint(round_up(123.456, 7))\nprint(round_up(123.456, 8))\nprint(round_up(123.456, 9))\nprint(round_up(123.456, 10))\nprint(round_up(123.456, 11))\nprint(round_up(123.456, 12))\nprint(round_up(123.456, 13))\nprint(round_up(123.456, 14))\nprint(round_up(123.456, 15))\nprint(round_up(123.456, 16))\nprint(round_up(123.456, 17))\nprint(round_up(123.456, 18))\nprint(round_up(123.456, 19))\nprint(round_up(123.456, 20))\nprint(round_up(123.456, 21))\nprint(round_up(123.456, 22))\nprint(round_up(123.456, 23))\nprint(round_up(123.456, 24))\nprint(round_up(123.456, 25))\nprint(round_up(123.456, 26))\nprint(round_up(123.456,"}
{"ID": 230, "source": "MBPP:831", "prompt": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\tcount = 0\n\t\tfor i in range(0, n): \n\t\t\tfor j in range(i + 1, n): \n\t\t\t\tif (arr[i] == arr[j]): \n\t\t\t\t\tcount += 1\n\t\treturn count \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Count of pairs is\", count_Pairs(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\n    # Split the string into words \n    words = input.split() \n  \n    # Create an empty list \n    result = [] \n  \n    # Iterate through each word \n    for word in words: \n        # Create a regular expression \n        # to match the word \n        regex = re.compile(r'\\d+') \n  \n        # Find all the numbers in the word \n        numbers = regex.findall(word) \n  \n        # If the word has at least one number \n        if numbers: \n            # Convert the numbers to integers \n            numbers = [int(num) for num in numbers] \n  \n            # Append the maximum number to the result \n            result.append(max(numbers)) \n  \n    # Return the maximum number \n    return max(result) \n  \n# Driver code \ninput = \"100 200 300 400 500 600\"\nprint(extract_max(input)) \n\n# +\n\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\n    # Split the string into words \n    words = input.split() \n  \n    # Create an empty list \n    result = [] \n  \n    # Iterate through each word \n    for word in words: \n        # Create a regular expression \n        # to match the word \n        regex = re.compile(r'\\d+') \n  \n        # Find all the numbers in the word \n        numbers = regex.findall(word) \n  \n        # If the word has at least one number \n        if numbers: \n            # Convert the numbers to integers \n            numbers = [int(num) for num in numbers] \n  \n            # Append the maximum number to the result \n            result.append(max(numbers)) \n  \n    # Return the maximum number \n    return max(result) \n  \n# Driver code \ninput = \"100 200 300 400 500 600\"\nprint(extract_max(input)) \n\n# +\n\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\n    # Split the string into words \n    words = input.split() \n  \n    # Create an empty list \n    result = [] \n  \n    # Iterate through each word \n    for word in words: \n        # Create a regular expression \n        # to match the word \n        regex = re.compile(r'\\d+') \n  \n        #"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_key(dict)) \n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_value(dict)) \n\n\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_key(dict)) \n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_value(dict)) \n\n\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_key(dict)) \n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_value(dict)) \n\n\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint(get_key(dict)) \n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values()) \n\n# Driver code \ndict = {'a':1, 'b':2, 'c':3} \nprint("}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t\tmatrix = [[0 for i in range(n)] for j in range(n)]\n\t\ti, j = 0, 0\n\t\tnum = 1\n\t\twhile num <= n*n:\n\t\t\t\twhile j < n and matrix[i][j] == 0:\n\t\t\t\t\t\tmatrix[i][j] = num\n\t\t\t\t\t\tnum += 1\n\t\t\t\t\t\tj += 1\n\t\t\t\tj -= 1\n\t\t\t\ti += 1\n\t\t\t\twhile i < n and matrix[i][j] == 0:\n\t\t\t\t\t\tmatrix[i][j] = num\n\t\t\t\t\t\tnum += 1\n\t\t\t\t\t\ti += 1\n\t\t\t\ti -= 1\n\t\t\t\tj -= 1\n\t\t\t\twhile j >= 0 and matrix[i][j] == 0:\n\t\t\t\t\t\tmatrix[i][j] = num\n\t\t\t\t\t\tnum += 1\n\t\t\t\t\t\tj -= 1\n\t\t\t\tj += 1\n\t\t\t\ti -= 1\n\t\t\t\twhile i >= 0 and matrix[i][j] == 0:\n\t\t\t\t\t\tmatrix[i][j] = num\n\t\t\t\t\t\tnum += 1\n\t\t\t\t\t\ti -= 1\n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\treturn matrix\n\nprint(generate_matrix(4))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    p = TreeNode(1)\n    p.left = TreeNode(2)\n    p.right = TreeNode(3)\n    q = TreeNode(1)\n    q.left ="}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\nprint(slope(5,3,4,2))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t"}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size): \n        max_ending_here += a[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n            start = s \n            end = i \n        if max_ending_here < 0: \n            max_ending_here = 0\n            s = i+1\n    print (\"Maximum contiguous sum is %d\"%(max_so_far)) \n    print (\"Starting index %d\"%(start)) \n    print (\"Ending index %d\"%(end)) \n\na = [1,2,3,-2,5]\nsize = len(a)\nmax_sub_array_sum(a,size)\n<file_sep>/python/array/max_sum_subarray.py\n\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size): \n        max_ending_here += a[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n            start = s \n            end = i \n        if max_ending_here < 0: \n            max_ending_here = 0\n            s = i+1\n    print (\"Maximum contiguous sum is %d\"%(max_so_far)) \n    print (\"Starting index %d\"%(start)) \n    print (\"Ending index %d\"%(end)) \n\na = [1,2,3,-2,5]\nsize = len(a)\nmax_sub_array_sum(a,size)\n<file_sep>/python/array/max_sum_subarray_kadane.py\n\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for"}
{"ID": 236, "source": "MBPP:837", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i*i*i \n\t\treturn sum \n\nn = 5\nprint(cube_Sum(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t\tcount = 0\n\t\tfor i in range(len(s1)) :\n\t\t\tif s1[i]!= s2[i] :\n\t\t\t\tcount += 1\n\t\treturn count\n\ns1 = \"1100\"\ns2 = \"0101\"\nprint(min_Swaps(s1,s2))<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) :\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1) :\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n) :\n\ttemp = arr[0]\n\tfor i in range(n-1) :\n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) :\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1) :\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\ndef reverse(arr,start,end) :\n\twhile start < end :\n\t\ttemp = arr[start]\n\t\tarr[start] = arr[end]\n\t\tarr[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\ndef rotate_2(arr,n) :\n\treverse(arr,0,n-1)\n\treverse(arr,0,n-2)\n\treverse(arr,"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # getting length of list of tuples \n    lst = len(tup) \n    for i in range(0, lst): \n  \n        for j in range(0, lst-i-1): \n            if (tup[j][0] > tup[j + 1][0]): \n                temp = tup[j] \n                tup[j]= tup[j + 1] \n                tup[j + 1]= temp \n    return tup \n  \n# Driver code \ntup = [('a', 2), ('b', 3), ('c', 1)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the second item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # getting length of list of tuples \n    lst = len(tup) \n    for i in range(0, lst): \n  \n        for j in range(0, lst-i-1): \n            if (tup[j][1] > tup[j + 1][1]): \n                temp = tup[j] \n                tup[j]= tup[j + 1] \n                tup[j + 1]= temp \n    return tup \n  \n# Driver code \ntup = [('a', 2), ('b', 3), ('c', 1)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort the tuples by the last item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # getting length of list of tuples \n    lst = len(tup) \n    for i in range(0, lst): \n  \n        for j in range(0, lst-i-1): \n            if (tup[j][2] > tup[j + 1][2]): \n                temp = tup[j] \n                tup[j]= tup[j + 1] \n                tup[j + 1]= temp \n    return tup \n  \n# Driver code \ntup = [('a', 2, 3), ('b', 3, 1), ('c', 1, 2)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort the list of tuples by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # getting length of list of tuples \n    lst = len(tup) \n    for i in range(0, lst): \n  \n        for"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t\tif (b**2 - 4*a*c) > 0:\n\t\t\tprint(\"Roots are numerically equal but opposite in sign\")\n\t\telse:\n\t\t\tprint(\"Roots are not numerically equal but opposite in sign\")\n\nCheck_Solution(1,2,3)\nCheck_Solution(1,2,1)\nCheck_Solution(1,2,2)\nCheck_Solution(1,2,0)\nCheck_Solution(1,2,-1)\nCheck_Solution(1,2,-2)\nCheck_Solution(1,2,-3)\nCheck_Solution(1,2,-4)\nCheck_Solution(1,2,-5)\nCheck_Solution(1,2,-6)\nCheck_Solution(1,2,-7)\nCheck_Solution(1,2,-8)\nCheck_Solution(1,2,-9)\nCheck_Solution(1,2,-10)\nCheck_Solution(1,2,-11)\nCheck_Solution(1,2,-12)\nCheck_Solution(1,2,-13)\nCheck_Solution(1,2,-14)\nCheck_Solution(1,2,-15)\nCheck_Solution(1,2,-16)\nCheck_Solution(1,2,-17)\nCheck_Solution(1,2,-18)\nCheck_Solution(1,2,-19)\nCheck_Solution(1,2,-20)\nCheck_Solution(1,2,-21)\nCheck_Solution(1,2,-22)\nCheck_Solution(1,2,-23)\nCheck_Solution(1,2,-24)\nCheck_Solution(1,2,-25)\nCheck_Solution(1,2,-26)\nCheck_Solution(1,2,-27)\nCheck_Solution(1,2,-28)\nCheck_Solution(1,2,-29)\nCheck_Solution(1,2,-30)\nCheck_Solution(1,2,-31)\nCheck_Solution(1,2,-32)\nCheck_Solution(1,2,-33)\nCheck_Solution(1,2,-34)\nCheck_Solution(1,2,-35)\nCheck_Solution("}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n  \n# Driver Code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint (\"Number of inversions are\", \nget_inv_count(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\"\"\"\n\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i])\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search is a fast search algorithm with run-time complexity of Ο(log n).\nThis search algorithm works on the principle of divide and conquer. For this algorithm to work properly, the data collection should be in the sorted form.\n\"\"\"\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binarySearch(arr, 0, len(arr)-1, x)\n\nif result!="}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for even number of times in the given array.\n\"\"\"\ndef get_even_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\n\n\n\"\"\"\nWrite a function to"}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self."}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\tif k > n: \n\t\t\treturn -1\n\t\tif k <= n / 2: \n\t\t\treturn 2 * k - 1\n\t\treturn 2 * (k - n / 2 - 1) \n\nn = 10\nk = 5\nprint(get_Number(n, k)) \n<file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t\tfact = 1\n\t\tfor i in range(1, n+1): \n\t\t\tfact = fact * i \n\t\treturn len(str(fact)) \n\nn = 10\nprint(find_Digits(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 245, "source": "MBPP:846", "prompt": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t\n    # Sort arrival and departure arrays \n    arr.sort() \n    dep.sort() \n  \n    # plat_needed indicates number of platforms needed at a time \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n  \n    # Similar to merge in merge sort to process all events in sorted order \n    while (i < n and j < n): \n        if (arr[i] <= dep[j]): \n  \n            # If arrival time is smaller than the departure time of the previous platform \n            # then increment number of platforms needed \n            plat_needed += 1\n            i += 1\n  \n            # Update result if needed \n            if (plat_needed > result): \n                result = plat_needed \n        else: \n            plat_needed -= 1\n            j += 1\n  \n    # Required platforms \n    return result \n  \n# Driver Code \narr = [900, 940, 950, 1100, 1500, 1800] \ndep = [910, 1200, 1120, 1130, 1900, 2000] \nn = len(arr) \nprint(\"Minimum Number of Platforms Required = \", find_platform(arr, dep, n)) <file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i])-1] = -abs(nums[abs(nums[i])-1])\n    for i"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\""}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t\treturn 0.5*(base1+base2)*height\n\nprint(area_trapezium(10,20,30))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_1/python_basics_1_7.py\n\"\"\"\nWrite a program to print the following pattern:\n"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\n    # Initialize sum of prime divisors \n    sum = 0\n  \n    # Traverse through all prime divisors \n    for i in range(2, N): \n  \n        # If i divides N \n        if (N % i == 0): \n  \n            # If i is prime \n            if (isPrime(i)): \n  \n                # Add i to sum \n                sum = sum + i \n  \n    return sum \n  \n# Driver Code \nN = 100\nprint(Sum(N)) \n\n# +\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\n    # Initialize sum of prime divisors \n    sum = 0\n  \n    # Traverse through all prime divisors \n    for i in range(2, N): \n  \n        # If i divides N \n        if (N % i == 0): \n  \n            # If i is prime \n            if (isPrime(i)): \n  \n                # Add i to sum \n                sum = sum + i \n  \n    return sum \n  \n# Driver Code \nN = 100\nprint(Sum(N)) \n\n# +\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\n    # Initialize sum of prime divisors \n    sum = 0\n  \n    # Traverse through all prime divisors \n    for i in range(2, N): \n  \n        # If i divides N \n        if (N % i == 0): \n  \n            # If i is prime \n            if (isPrime(i)): \n  \n                # Add i to sum \n                sum = sum + i \n  \n    return sum \n  \n# Driver Code \nN = 100\nprint(Sum(N)) \n\n# +\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\n    # Initialize sum of prime divisors \n    sum = 0\n  \n    # Traverse through all prime divisors \n    for i in range(2, N): \n  \n        # If i divides N \n        if (N % i == 0): \n  \n            # If i is prime \n            if (isPrime(i)): \n  \n                # Add i to sum \n                sum = sum + i \n  \n    return sum \n  \n# Driver Code \nN = 100\n"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n    if a+b+c == 180: \n        return True\n    else: \n        return False\n\na = int(input(\"Enter the first angle: \"))\nb = int(input(\"Enter the second angle: \"))\nc = int(input(\"Enter the third angle: \"))\n\nif is_triangleexists(a,b,c): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 250, "source": "MBPP:851", "prompt": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t\tfor i in range(1,N+1): \n\t\t\tif N%i==0: \n\t\t\t\tSum+=1/i \n\t\treturn Sum \nN=int(input(\"Enter the number: \")) \nSum=0\nprint(\"Sum of inverse of divisors of\",N,\"is\",Sum_of_Inverse_Divisors(N,Sum)) \n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python function to find the sum of the series 1/1!+2/2!+3/3!+...+n/n!\n\"\"\"\ndef Sum_of_Series(N): \n\tSum=0\n\tfor i in range(1,N+1): \n\t\tSum+=i/factorial(i) \n\treturn Sum \ndef factorial(N): \n\tif N==0: \n\t\treturn 1\n\telse: \n\t\treturn N*factorial(N-1) \nN=int(input(\"Enter the number: \")) \nprint(\"Sum of the series is\",Sum_of_Series(N)) \n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python function to find the sum of the series 1+2+3+...+n\n\"\"\"\ndef Sum_of_Series(N): \n\tSum=0\n\tfor i in range(1,N+1): \n\t\tSum+=i \n\treturn Sum \nN=int(input(\"Enter the number: \")) \nprint(\"Sum of the series is\",Sum_of_Series(N)) \n<file_sep>/Python/Python_Assignment_1/Q11.py\n\"\"\"\nWrite a python function to find the sum of the series 1/1!+2/2!+3/3!+...+n/n!\n\"\"\"\ndef Sum_of_Series(N): \n\tSum=0\n\tfor i in range(1,N+1): \n\t\tSum+=i/factorial(i) \n\treturn Sum \ndef factorial(N): \n\tif N==0: \n\t\treturn 1\n\telse: \n\t\treturn N*factorial(N-1) \nN=int(input(\"Enter the number: \")) \nprint(\"Sum of the series is\",Sum_of"}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t\treturn [x for x in num_list if x >= 0]\n\nprint(remove_negs([1,2,-3,4,-5,6]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Based on earlier \"Countdown by Fours\", given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(151):\n\tprint(i)\n\n# Multiples of Five - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5,1001,5):\n\tprint(i)\n\n# Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1,101):\n\tif i % 5 == 0 and i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telif i % 5 == 0:\n\t\tprint(\"Coding\")\n\telse:\n\t\tprint(i)\n\n# Whoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\nsum = 0\nfor i in range"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tif n % i == 0 and i % 2!= 0: \n\t\t\t\tsum = sum + i \n\t\treturn sum \n\nn = 10\nprint(sum_of_odd_Factors(n))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j,"}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t\theap = []\n\t\tfor i in rawheap:\n\t\t\theapq.heappush(heap, i)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heapify algorithm.\n\"\"\"\ndef heapify_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\treturn rawheap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap sort algorithm.\n\"\"\"\ndef heapsort_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapsort(rawheap)\n\t\treturn rawheap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap replace algorithm.\n\"\"\"\ndef heapreplace_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapreplace(heap, 10)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap merge algorithm.\n\"\"\"\ndef heapmerge_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapmerge(heap, rawheap)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heapify_max algorithm.\n\"\"\"\ndef heapify_max_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapify_max(heap)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heapify_min algorithm.\n\"\"\"\ndef heapify_min_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapify_min(heap)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heapify_reverse algorithm.\n\"\"\"\ndef heapify_reverse_heap(rawheap):\n\t\theap = []\n\t\theapq.heapify(rawheap)\n\t\theapq.heapify_reverse(heap)\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts an"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\tif x%2==0:\n\t\t\tprint(\"Even\")\n\t\telse:\n\t\t\tprint(\"Odd\")\n\ncheck_Even_Parity(10)\ncheck_Even_Parity(11)\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\nfor i in range(4,0,-1):\n\tprint(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n\tprint"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t\t# Find the count of inversions in arr[] \n\t\tcount = 0\n\t\tfor i in range(n) : \n\t\t\tfor j in range(i + 1, n) : \n\t\t\t\tif (arr[i] == 0 and arr[j] == 1) : \n\t\t\t\t\tcount += 1\n\t\treturn count \n\n# Driver Code \narr = [0, 1, 0, 1, 1, 0] \nn = len(arr) \nprint(find_Min_Swaps(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n).\nAnother approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half.\nBegin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\nIn computer science, a linear search or sequential search is a method for finding an"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn list(map(lambda x: x, list1))\n\nlist1 = [\"Hello\", \"World\", \"In\", \"Python\"]\nprint(listify_list(list1))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j <= i:\n\t\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j >= i:\n\t\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j >= i:\n\t\t\tprint(j, end=\" \")\n\t\telse:\n\t\t\tprint(\" \", end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j >= i:\n\t\t\tprint(j, end=\" \")\n\t\telse:\n\t\t\tprint(\" \", end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j <= i:\n\t\t"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count**2\n\nprint(count_list([1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[11,12,13,14,15,16,17,18,19,20]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,[11,12,1"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t\tif len(my_list) == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\tsub_list = sub_lists(my_list[1:])\n\t\t\treturn sub_list + [[my_list[0]] + sub for sub in sub_list]\n\nprint(sub_lists([1,2,3]))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t\tregex = re.compile('^[a-zA-Z0-9]+$') \n\t\tif regex.search(string): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(check_alphanumeric(\"1234567890\"))\nprint(check_alphanumeric(\"1234567890abc\"))\nprint(check_alphanumeric(\"1234567890abc@\"))\nprint(check_alphanumeric(\"1234567890abc@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@\"))\nprint(check_alphanumeric(\"1234567890abc@123@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123@\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123@123@\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123@123@123\"))\nprint(check_alphanumeric(\"1234567890abc@123@123@123@123@123@12"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t\treturn list(filter(lambda x: sorted(x)==sorted(str),texts))\n\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'cat'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'god'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'tac'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'act'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'bat'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'dog'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'tac'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'act'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'bat'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'dog'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'tac'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'act'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'bat'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'dog'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'tac'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'act'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'bat'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'dog'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'tac'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'act'))\nprint(anagram_lambda([\"cat\",\"dog\",\"god\",\"tac\",\"act\",\"bat\"],'bat'))\nprint(anagram_lambda([\"cat"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t\twords = text.split()\n\t\tword_count = {}\n\t\tfor word in words:\n\t\t\tif word in word_count:\n\t\t\t\tword_count[word] += 1\n\t\t\telse:\n\t\t\t\tword_count[word] = 1\n\t\tsorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\t\treturn sorted_word_count[:n]\n\nprint(n_common_words(\"This is a test. This is a test. This is a test.\", 3))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val ="}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t\n    # Sort the array \n    arr.sort() \n  \n    # initialize answer \n    ans = 1\n  \n    # check for sequence with \n    # one element \n    if (n == 1): \n        return 1\n  \n    # check for sequence with \n    # two elements \n    if (arr[1] == arr[0] + 1): \n        return 2\n  \n    # Now check for all sub-arrays \n    # starting from arr[0] \n    for i in range(0, n - 1): \n        count = 1\n        j = i + 1\n        while (j < n and \n               arr[j] == arr[j - 1] + 1): \n            count += 1\n            j += 1\n        ans = max(ans, count) \n  \n    return ans \n\narr = [1, 9, 3, 10, 4, 20, 2] \nn = len(arr) \nprint(\"Length of the longest consecutive subsequence is\", find_longest_conseq_subseq(arr, n)) \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)//2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can only be present in left subarray \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n  \n        # Else the element can only be present in right subarray \n        else: \n            return binarySearch(arr, mid+"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t\treturn list(filter(lambda x: x == x[::-1], texts))\n\nprint(palindrome_lambda([\"madam\", \"hello\", \"racecar\", \"world\"]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1, 7):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1, 8):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n\"\"\"\n\nfor i in range(1, 9):\n\tprint(str(i"}
{"ID": 264, "source": "MBPP:865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(map(lambda x:x*n,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp(nums,n):\n\t\treturn [x*n for x in nums]\n\nprint(ntimes_list_comp([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp_gen(nums,n):\n\t\treturn (x*n for x in nums)\n\nprint(list(ntimes_list_comp_gen([1,2,3,4,5],3)))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp_gen_func(nums,n):\n\t\treturn (lambda x:x*n for x in nums)\n\nprint(list(ntimes_list_comp_gen_func([1,2,3,4,5],3)))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp_gen_func_map(nums,n):\n\t\treturn list(map(lambda x:x*n,nums))\n\nprint(ntimes_list_comp_gen_func_map([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp_gen_func_map_map(nums,n):\n\t\treturn list(map(lambda x:x*n,map(lambda x:x*n,nums)))\n\nprint(ntimes_list_comp_gen_func_map_map([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using list comprehension.\n\"\"\"\ndef ntimes_list_comp_gen_func_map_map_map(nums,n):\n\t\treturn list(map(lambda x:x*n,map(lambda x:x*n,"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t\tif monthname2 in ['january','march','may','july','august','october','december']:\n\t\t\tprint(\"month has 31 days\")\n\t\telif monthname2 in ['april','june','september','november']:\n\t\t\tprint(\"month has 30 days\")\n\t\telse:\n\t\t\tprint(\"month has 28 days\")\n\nmonthname2=input(\"enter month name\")\ncheck_monthnumb(monthname2)\n<file_sep>/python_assignment_1/assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_assignment_1/assignment_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_assignment_1/assignment_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/python_assignment_1/assignment_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor"}
{"ID": 266, "source": "MBPP:867", "prompt": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tsum += arr[i]\n\t\tif sum % 2 == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn 1\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(min_Num(arr,n))<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n):\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n):\n\ttemp = arr[0]\n\tfor i in range(n-1):\n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\narr = [1,2,3,4,5]\nn = len(arr)\nrotate(arr,n)\nprint(arr)<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n):\n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\ndef reverse(arr,start,end):\n\twhile start < end:\n\t\ttemp = arr[start]\n\t\tarr[start] = arr[end]\n\t\tarr[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\ndef rotate_2(arr,n):\n\treverse(arr,0,n-1)\n\treverse(arr,0,n-2)\n\treverse(arr,n-1,n-"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t\treturn len(a.split()[-1])\n\nprint(length_Of_Last_Word(\"Hello World\"))\nprint(length_Of_Last_Word(\"Hello World \"))\nprint(length_Of_Last_Word(\"Hello World  \"))\nprint(length_Of_Last_Word(\"Hello World   \"))\nprint(length_Of_Last_Word(\"Hello World    \"))\nprint(length_Of_Last_Word(\"Hello World     \"))\nprint(length_Of_Last_Word(\"Hello World      \"))\nprint(length_Of_Last_Word(\"Hello World       \"))\nprint(length_Of_Last_Word(\"Hello World        \"))\nprint(length_Of_Last_Word(\"Hello World         \"))\nprint(length_Of_Last_Word(\"Hello World          \"))\nprint(length_Of_Last_Word(\"Hello World           \"))\nprint(length_Of_Last_Word(\"Hello World            \"))\nprint(length_Of_Last_Word(\"Hello World             \"))\nprint(length_Of_Last_Word(\"Hello World              \"))\nprint(length_Of_Last_Word(\"Hello World               \"))\nprint(length_Of_Last_Word(\"Hello World                \"))\nprint(length_Of_Last_Word(\"Hello World                 \"))\nprint(length_Of_Last_Word(\"Hello World                  \"))\nprint(length_Of_Last_Word(\"Hello World                   \"))\nprint(length_Of_Last_Word(\"Hello World                    \"))\nprint(length_Of_Last_Word(\"Hello World                     \"))\nprint(length_Of_Last_Word(\"Hello World                      \"))\nprint(length_Of_Last_Word(\"Hello World                       \"))\nprint(length_Of_Last_Word(\"Hello World                        \"))\nprint(length_Of_Last_Word(\"Hello World                         \"))\nprint(length_Of_Last_Word(\"Hello World                          \"))\nprint(length_Of_Last_Word(\"Hello World                           \"))\nprint(length_Of_Last_Word(\"Hello World                            \"))\nprint(length_Of_Last_Word(\"Hello World                             \"))\nprint(length_Of_Last_Word(\"Hello World                              \"))\nprint(length_Of_Last_Word(\"Hello World                               \"))\nprint(length_Of_Last_Word(\"Hello World                                \"))\nprint(length_Of_"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] < leftrange or list1[i] > rigthrange:\n\t\t\t\tdel list1[i]\n\t\treturn list1\n\nprint(remove_list_range([1,2,3,4,5,6,7,8,9,10], 3, 7))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three_numbers(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three_numbers(1, 2, 3))\nprint(sum_three_numbers(1, 1, 1))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_number(list1):\n\treturn min(list1)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_strings(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount +="}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t\treturn sum(list(filter(lambda x: x > 0, nums)))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%"}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t\tsize1 = len(string1) \n\t\tsize2 = len(string2) \n\t\tif size1!= size2: \n\t\t\treturn 0\n\t\ttemp = string1 + string1 \n\t\treturn (temp.find(string2)!= -1) \n\nstring1 = \"AACD\"\nstring2 = \"ACDA\"\nif are_Rotations(string1,string2): \n\tprint(\"Strings are rotations of each other\") \nelse: \n\tprint(\"Strings are not rotations of each other\") \n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        slow = nums[0]\n        fast = nums[nums[0]]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n        fast = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow\n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        slow = nums[0]\n        fast = nums[nums[0]]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n        fast = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow\n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t\tif len(list1) == 0: \n\t\t\treturn True\n\t\tif len(list2) == 0: \n\t\t\treturn False\n\t\tif list1[0] in list2: \n\t\t\treturn check_subset(list1[1:],list2) \n\t\telse: \n\t\t\treturn check_subset(list1,list2[1:]) \n\nlist1 = [1,2,3]\nlist2 = [1,2,3,4,5]\nprint(check_subset(list1,list2))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a,b,c):\n\tif a == b == c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_string(string):\n\tif string[:2] == \"Is\":\n\t\treturn string\n\telse:\n\t\treturn \"Is\"+string\n\nprint(add_string(\"Is\"))\nprint(add_string(\"Hello\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\""}
{"ID": 272, "source": "MBPP:873", "prompt": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t", "predict": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n<file_sep>/python/python_practice/python_practice_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest_number(numbers):\n\tlargest = numbers[0]\n\tfor number in numbers:\n\t\tif number > largest:\n\t\t\tlargest = number\n\treturn largest\n\nprint(largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest_number(numbers):\n\tsmallest = numbers[0]\n\tfor number in numbers:\n\t\tif number < smallest:\n\t\t\tsmallest = number\n\treturn smallest\n\nprint(smallest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest_number(numbers):\n\tlargest = numbers[0]\n\tsecond_largest = numbers[0]\n\tfor number in numbers:\n\t\tif number > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = number\n\t\telif number > second_largest:\n\t\t\tsecond_largest = number\n\treturn second_largest\n\nprint(second_largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\ndef second_smallest_number(numbers):\n\tsmallest = numbers[0]\n\tsecond_smallest = numbers[0]\n\tfor number in numbers:\n\t\tif number < smallest:\n\t\t\tsecond_smallest"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(len(str1)):\n\t\t\t\tif str1[i]!= str2[i]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nstr1 = \"abc\"\nstr2 = \"ab\"\nprint(check_Concat(str1,str2))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: minimum difference between the tuples\n\t\t\"\"\"\n\t\tmin_diff = float('inf')\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif abs(test_list[i][0] - test_list[j][0]) < min_diff:\n\t\t\t\t\tmin_diff = abs(test_list[i][0] - test_list[j][0])\n\t\treturn min_diff\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\tprint(min_difference(test_list))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:param nums: list of integers\n\t:return: integer\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nif __name__ == '__main__':\n\tnums = [2, 2, 1]\n\tprint(single_number(nums))\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\"\"\"\ndef is_palindrome(s):\n\t\"\"\"\n\t:param s: string\n\t:return: boolean\n\t\"\"\"\n\ts = s.lower()\n\ts = ''.join(c for c in s if c.isalnum())\n\treturn s == s[::-1]\n\nif __name__ == '__main__':\n\ts = 'A man, a plan, a canal: Panama'\n\tprint(is_palindrome(s))\n<file_sep>/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\"\"\"\ndef max_depth(root):\n\t\"\"\"\n\t:param root: TreeNode\n"}
{"ID": 275, "source": "MBPP:876", "prompt": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t\n\n\n\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t\n\n\n\"\"\"\nWrite a python function to find the factorial of a positive integer.\n\"\"\"\ndef factorial(x):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n even integers.\n\"\"\"\ndef sum_of_n_even(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n odd integers.\n\"\"\"\ndef sum_of_n_odd(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n prime integers.\n\"\"\"\ndef sum_of_n_prime(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n fibonacci numbers.\n\"\"\"\ndef sum_of_n_fibonacci(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n square numbers.\n\"\"\"\ndef sum_of_n_square(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n cube numbers.\n\"\"\"\ndef sum_of_n_cube(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n factorial numbers.\n\"\"\"\ndef sum_of_n_factorial(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n catalan numbers.\n\"\"\"\ndef sum_of_n_catalan(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n triangular numbers.\n\"\"\"\ndef sum_of_n_triangular(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n pentagonal numbers.\n\"\"\"\ndef sum_of_n_pentagonal(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n hexagonal numbers.\n\"\"\"\ndef sum_of_n_hexagonal(n):\n\t\n\n\n\"\"\"\nWrite a python function to find the sum of the first n heptagonal numbers.\n\"\"\"\ndef sum_of_n_hept"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\nprint(sort_String(\"python\"))\nprint(sort_String(\"java\"))\nprint(sort_String(\"javascript\"))\nprint(sort_String(\"c\"))\nprint(sort_String(\"c++\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c++\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"c#\"))\nprint(sort_String"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_tuples((1,2,3,4,5), 5))\nprint(check_tuples((1,2,3,4,5), 4))\nprint(check_tuples((1,2,3,4,5), 3))\nprint(check_tuples((1,2,3,4,5), 2))\nprint(check_tuples((1,2,3,4,5), 1))\nprint(check_tuples((1,2,3,4,5), 0))\nprint(check_tuples((1,2,3,4,5), -1))\nprint(check_tuples((1,2,3,4,5), 6))\nprint(check_tuples((1,2,3,4,5), 7))\nprint(check_tuples((1,2,3,4,5), 8))\nprint(check_tuples((1,2,3,4,5), 9))\nprint(check_tuples((1,2,3,4,5), 10))\nprint(check_tuples((1,2,3,4,5), 11))\nprint(check_tuples((1,2,3,4,5), 12))\nprint(check_tuples((1,2,3,4,5), 13))\nprint(check_tuples((1,2,3,4,5), 14))\nprint(check_tuples((1,2,3,4,5), 15))\nprint(check_tuples((1,2,3,4,5), 16))\nprint(check_tuples((1,2,3,4,5), 17))\nprint(check_tuples((1,2,3,4,5), 18))\nprint(check_tuples((1,2,3,4,5), 19))\nprint(check_tuples((1,2,3,4,5), 20))\nprint(check_tuples((1,2,3,4,5), 21))\nprint(check_tuples((1,2,3,4,5"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\tif re.search(r'a.*b$', text):\n\t\t\treturn 'Found a match!'\n\t\telse:\n\t\t\treturn 'Not matched!'\n\nprint(text_match('abc'))\nprint(text_match('abXbc'))\nprint(text_match('ababc'))\nprint(text_match('ababcX'))\nprint(text_match('ababcXbc'))\nprint(text_match('ababcXbcX'))\nprint(text_match('ababcXbcXbc'))\nprint(text_match('ababcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbcXbcX'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbcXbcXbc'))\nprint(text_match('ababcXbcXbcXbcXbcXbcXbcXbcXbcXbcXbcX'))\nprint(text_match('"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t\tif a == 0 : \n\t\t\tprint(\"Invalid\") \n\t\telse : \n\t\t\td = b * b - 4 * a * c \n\t\t\tif d > 0 : \n\t\t\t\tprint(\"Real and Distinct\") \n\t\t\telif d == 0 : \n\t\t\t\tprint(\"Real and Equal\") \n\t\t\telse : \n\t\t\t\tprint(\"Imaginary\") \n\na = int(input(\"Enter a : \"))\nb = int(input(\"Enter b : \"))\nc = int(input(\"Enter c : \"))\nCheck_Solution(a,b,c)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the area of triangle.\n\"\"\"\ndef Area_Triangle(a,b,c) : \n\ts = (a + b + c) / 2\n\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\treturn area\n\na = int(input(\"Enter a : \"))\nb = int(input(\"Enter b : \"))\nc = int(input(\"Enter c : \"))\nprint(\"Area of Triangle : \",Area_Triangle(a,b,c))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the area of circle.\n\"\"\"\ndef Area_Circle(r) : \n\tarea = 3.14 * r * r\n\treturn area\n\nr = int(input(\"Enter radius : \"))\nprint(\"Area of Circle : \",Area_Circle(r))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the area of rectangle.\n\"\"\"\ndef Area_Rectangle(l,b) : \n\tarea = l * b\n\treturn area\n\nl = int(input(\"Enter length : \"))\nb = int(input(\"Enter breadth : \"))\nprint(\"Area of Rectangle : \",Area_Rectangle(l,b))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the area of square.\n\"\"\"\ndef Area_Square(a) : \n\tarea = a * a\n\treturn area\n\na = int(input(\"Enter"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t\teven_sum = 0\n\t\todd_sum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tif i%2 == 0:\n\t\t\t\teven_sum += list1[i]\n\t\t\telse:\n\t\t\t\todd_sum += list1[i]\n\t\treturn even_sum, odd_sum\n\nprint(sum_even_odd([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# Syntax: [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 1 to 10\nsquares = [x**2 for x in range(1,11)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 4\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 5\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 6\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0]\nprint(even_numbers)\n\n# Example 7\n# Create a list of even numbers from 1 to 10\neven_numbers = [x for x in range(1,11) if x%2 == 0"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t\treturn 2*(b+h)\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t\treturn b*h\n\n\"\"\"\nWrite a function to calculate perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\t\treturn a+b+c\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\t\ts = (a+b+c)/2\n\t\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to calculate perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a,b,c,d):\n\t\treturn a+b+c+d\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a,b,h):\n\t\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to calculate perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\t\treturn 2*math.pi*r\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn math.pi*r**2\n\n\"\"\"\nWrite a function to calculate perimeter of a ellipse.\n\"\"\"\ndef ellipse_perimeter(a,b):\n\t\treturn math.pi*(3*(a+b)-math.sqrt((3*a+b)*(a+3*b)))\n\n\"\"\"\nWrite a function to calculate area of a ellipse.\n\"\"\"\ndef ellipse_area(a,b):\n\t\treturn math.pi*a*b\n\n\"\"\"\nWrite a function to calculate perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a,b):\n\t\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(a,b):\n\t\treturn a*b\n\n\"\"\"\nWrite a function to calculate perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t\treturn 4*a\n"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],2,3))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to find the sum of all the numbers in a list using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n\treturn sum(nums)\n\nprint(sum_of_nums([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a program to find the largest number in a list using lambda function.\n\"\"\"\n\ndef largest_num(nums):\n\treturn max(nums)\n\nprint(largest_num([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a program to find the product of all the numbers in a list using lambda function.\n\"\"\"\n\ndef product_of_nums(nums):\n\treturn reduce(lambda x,y: x*y,nums)\n\nprint(product_of_nums([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECRE"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit\n\t\t# n is the number, l is the lower limit and r is the upper limit"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn sorted(str1) == sorted(str2)\n\nstr1 = \"aab\"\nstr2 = \"xxy\"\nprint(is_Isomorphic(str1,str2))\n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\ndef findDuplicate(nums):\n\tslow = nums[0]\n\tfast = nums[nums[0]]\n\twhile slow!= fast:\n\t\tslow = nums[slow]\n\t\tfast = nums[nums[fast]]\n\tfast = 0\n\twhile slow!= fast:\n\t\tslow = nums[slow]\n\t\tfast = nums[fast]\n\treturn slow\n\nnums = [1,3,4,2,2]\nprint(findDuplicate(nums))\n<file_sep>/Python/Array/Find_the_duplicate_number_II.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\ndef findDuplicate(nums):\n\tslow = nums[0]\n\tfast = nums[nums[0]]\n\twhile slow!= fast:\n\t\tslow = nums[slow]\n\t\tfast = nums[nums[fast]]\n\tfast = 0\n\twhile slow!= fast:\n\t\tslow = nums[slow]\n\t\tfast = nums[fast]\n\treturn slow\n\nnums = [1,3,4,2,2]\nprint(findDuplicate(nums))\n<file_sep>/Python/Array/Find_the_duplicate_number_III.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t\tsum = 0\n\t\tfor i in numbers:\n\t\t\tsum += i\n\t\treturn sum/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1,7):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1,8):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n\"\"\"\n\nfor i in range(1,9):\n\tfor j in range(1,i+1):\n\t\tprint(j"}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t\treturn n & 1\n\nprint(is_odd(10))\nprint(is_odd(11))\n<file_sep>/python/basic/001_hello_world.py\n\"\"\"\nWrite a python program to print \"Hello World\"\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python/basic/003_input_output.py\n\"\"\"\nWrite a python program to print the sum of two numbers\n\"\"\"\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"Sum of two numbers is: \", a+b)\n<file_sep>/python/basic/002_variables.py\n\"\"\"\nWrite a python program to print the sum of two numbers\n\"\"\"\na = 10\nb = 20\nprint(\"Sum of two numbers is: \", a+b)\n<file_sep>/python/basic/004_operators.py\n\"\"\"\nWrite a python program to print the sum of two numbers\n\"\"\"\na = 10\nb = 20\nprint(\"Sum of two numbers is: \", a+b)\n\n# Arithmetic Operators\nprint(\"a + b = \", a+b)\nprint(\"a - b = \", a-b)\nprint(\"a * b = \", a*b)\nprint(\"a / b = \", a/b)\nprint(\"a // b = \", a//b)\nprint(\"a % b = \", a%b)\nprint(\"a ** b = \", a**b)\n\n# Assignment Operators\na = 10\nb = 20\na += b\nprint(\"a += b = \", a)\na -= b\nprint(\"a -= b = \", a)\na *= b\nprint(\"a *= b = \", a)\na /= b\nprint(\"a /= b = \", a)\na //= b\nprint(\"a //= b = \", a)\na %= b\nprint(\"a %= b = \", a)\na **= b\nprint(\"a **= b = \", a)\n\n# Comparison Operators\na = 10\nb = 20\nprint(\"a == b = \", a==b)\nprint(\"a!= b = \", a!=b)\nprint(\"a > b = \", a>b)\nprint(\""}
{"ID": 287, "source": "MBPP:888", "prompt": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tSubstract the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the maximum element of the given nested tuples.\n\"\"\"\ndef find_max_element(test_tup):\n\t\t\"\"\"\n\t\tFind the maximum element of the given nested tuples.\n\t\t\"\"\"\n\t\treturn max(test_tup)\n\n\"\"\"\nWrite a function to find the minimum element of the given nested tuples.\n\"\"\"\ndef find_min_element(test_tup):\n\t\t\"\"\"\n\t\tFind the minimum element of the given nested tuples.\n\t\t\"\"\"\n\t\treturn min(test_tup)\n\n\"\"\"\nWrite a function to find the sum of the elements of the given nested tuples.\n\"\"\"\ndef find_sum_elements(test_tup):\n\t\t\"\"\"\n\t\tFind the sum of the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of the elements of the given nested tuples.\n\"\"\"\ndef find_product_elements(test_tup):\n\t\t\"\"\"\n\t\tFind the product of the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn reduce(lambda x, y: x * y, test_tup)\n\n\"\"\"\nWrite a function to find the average of the elements of the given nested tuples.\n\"\"\"\ndef find_average_elements(test_tup):\n\t\t\"\"\"\n\t\tFind the average of the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn sum(test_tup) / len(test_tup)\n\n\"\"\"\nWrite a function to find the median of the elements of the given nested tuples.\n\"\"\"\ndef find_median_elements(test_tup):\n\t\t\"\"\"\n\t\tFind the median of the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn statistics.median(test_tup)\n\n\"\"\"\nWrite a function to find the mode of the elements of the given nested tuples.\n\"\"\"\ndef find_mode_elements(test_tup):\n\t\t\"\"\"\n\t\tFind the mode of the elements of the given nested tuples.\n\t\t\"\"\"\n\t\treturn statistics.mode(test_tup)\n\n\"\"\"\nWrite a function to find the variance of the elements of the"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\tfor i in range(len(lists)):\n\t\t\tlists[i].reverse()\n\t\treturn lists\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest = word\n\treturn longest\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(words):\n\tlongest = \"\"\n\tfor word in words:\n\t\tif len(word) > len(longest):\n\t\t\tlongest"}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t\ti = 0\n\t\tj = 0\n\t\twhile i < n and j < n : \n\t\t\tif arr1[i] == arr2[j] : \n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\t\telse : \n\t\t\t\treturn arr1[i]\n\t\treturn arr1[i]\n\narr1 = [1,2,3,4,5,6,7,8,9,10]\narr2 = [1,2,3,4,5,6,7,8,9,10,11]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\tx = arr[n-1]\n\tfor i in range(n-1,0,-1) : \n\t\tarr[i] = arr[i-1]\n\tarr[0] = x\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nrotate(arr,n)\nprint(arr)\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\tx = arr[0]\n\tfor i in range(n-1) : \n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = x\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nrotate(arr,n)\nprint(arr)\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\tx = arr[n-1]\n\tfor i in range(n-1,0,-1) : \n\t\tarr[i] = arr[i-1]\n\tarr[0] = x\n\ndef reverse(arr,start,end) : \n\twhile start < end :"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\tif len(str(A)) == len(str(B)): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nA = 123\nB = 12345\nprint(same_Length(A,B))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\t"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t\treturn''.join(text.split())\n\nprint(remove_spaces(\"Hello  World\"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World  \"))\nprint(remove_spaces(\"Hello  World"}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    return [lst[i][-1] for i in range(0, len(lst))] \n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst)) \n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(\"Current date and time: \")\nprint(time.strftime(\"%c\"))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to get the current date.\n\"\"\"\nimport datetime\nprint(datetime.date.today())\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a Python program to get OS name, platform and release information.\n\"\"\"\nimport os\nprint(os.name)\nprint(os.uname())\nprint(os.getlogin())\n<file_sep>/Python/Python_Basics/Python_Basics_15.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_16.py\n\"\"\"\nWrite a Python program to convert seconds to day, hour, minutes and seconds.\n\"\"\"\nimport datetime\n\nseconds = 1000000\n\nd = datetime"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t\treturn tuple(float(i) for i in test_str.split(','))\n\ntest_str = \"1.2,3.4,5.6\"\nprint(float_to_tuple(test_str))\n\n\"\"\"\nWrite a function to convert the given string of tuple into float.\n\"\"\"\ndef tuple_to_float(test_str):\n\t\treturn float(test_str.replace('(','').replace(')','').replace(',','.'))\n\ntest_str = \"(1.2,3.4,5.6)\"\nprint(tuple_to_float(test_str))\n\n\"\"\"\nWrite a function to convert the given string of tuple into list.\n\"\"\"\ndef tuple_to_list(test_str):\n\t\treturn list(test_str.replace('(','').replace(')','').replace(',',''))\n\ntest_str = \"(1.2,3.4,5.6)\"\nprint(tuple_to_list(test_str))\n\n\"\"\"\nWrite a function to convert the given string of list into tuple.\n\"\"\"\ndef list_to_tuple(test_str):\n\t\treturn tuple(test_str.replace('[','').replace(']','').replace(',',''))\n\ntest_str = \"[1.2,3.4,5.6]\"\nprint(list_to_tuple(test_str))\n\n\"\"\"\nWrite a function to convert the given string of list into float.\n\"\"\"\ndef list_to_float(test_str):\n\t\treturn float(test_str.replace('[','').replace(']','').replace(',','.'))\n\ntest_str = \"[1.2,3.4,5.6]\"\nprint(list_to_float(test_str))\n\n\"\"\"\nWrite a function to convert the given string of list into string.\n\"\"\"\ndef list_to_string(test_str):\n\t\treturn ''.join(test_str.replace('[','').replace(']','').replace(',',''))\n\ntest_str = \"[1.2,3.4,5.6]\"\nprint(list_to_string(test_str))\n\n\"\"\"\nWrite a function to convert the given string of string into list.\n\"\"\"\ndef string_to_list(test_str):\n\t\treturn list("}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t\tif len(A) == 0:\n\t\t\treturn 0\n\t\tif len(A) == 1:\n\t\t\treturn A[0]\n\t\tif len(A) == 2:\n\t\t\treturn max(A[0], A[1])\n\t\tdp = [0] * len(A)\n\t\tdp[0] = A[0]\n\t\tdp[1] = max(A[0], A[1])\n\t\tfor i in range(2, len(A)):\n\t\t\tdp[i] = max(dp[i-1], dp[i-2] + A[i])\n\t\treturn dp[-1]\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_sum_subseq(A))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t\treturn sorted(tuples, key=lambda x: x[1])\n\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(100)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nsentence = input(\"Enter the sentence: \")\nword = input(\"Enter the word to be searched: \")\n\nif is_Word_Present(sentence,word): \n\tprint(\"Word is present in the sentence\") \nelse: \n\tprint(\"Word is not present in the sentence\") \n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\nn = int(input(\"Enter the number: \"))\nprint(\"Factorial of\",n,\"is\",factorial(n))\n<file_sep>/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_n_natural_numbers(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i\n\treturn sum\n\nn = int(input(\"Enter the number: \"))\nprint(\"Sum of first\",n,\"natural numbers is\",sum_of_n_natural_numbers(n))\n<file_sep>/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n even numbers.\n\"\"\"\ndef sum_of_n_even_numbers(n):\n\tsum = 0\n\tfor i in range(2,n+1,2):\n\t\tsum += i\n\treturn sum\n\nn = int(input(\"Enter the number: \"))\nprint(\"Sum of first\",n,\"even numbers is\",sum_of_n_even_numbers(n))\n<file_sep>/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of the first n odd numbers.\n\"\"\"\ndef sum_of_n_odd_numbers(n):\n\tsum = 0\n\tfor i in range(1,n+1,2):\n\t\tsum += i\n\treturn sum\n\nn = int(input(\"Enter the number: \"))\nprint(\"Sum"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t\treturn [numbers[i] for i in range(n)]\n\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n"}
{"ID": 298, "source": "MBPP:899", "prompt": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t\tif n == 1: \n\t\t\treturn True\n\t\tif arr[0] > arr[n - 1]: \n\t\t\treturn False\n\t\treturn check(arr, n - 1) \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nif check(arr, n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n<file_sep>/Python/Array/1.py\n\"\"\"\nWrite a Python program to find the maximum and minimum value in a set.\n\"\"\"\n\ns = {1, 2, 3, 4, 5}\nprint(max(s))\nprint(min(s))\n<file_sep>/Python/Array/10.py\n\"\"\"\nWrite a Python program to find the index of an item of a numpy array.\n\"\"\"\n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nprint(np.where(arr == 4))\n<file_sep>/Python/Array/11.py\n\"\"\"\nWrite a Python program to find the indices of the maximum and minimum values along the given axis of a numpy array.\n\"\"\"\n\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(np.argmax(arr))\nprint(np.argmin(arr))\n<file_sep>/Python/Array/12.py\n\"\"\"\nWrite a Python program to find the indices of the n largest values along the given axis of a numpy array.\n\"\"\"\n\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(np.argmax(arr, axis=0))\nprint(np.argmax(arr, axis=1))\n<file_sep>/Python/Array/13.py\n\"\"\"\nWrite a Python program to create a 2-dimensional array with ones on the diagonal and zeros elsewhere.\n\"\"\"\n\nimport numpy as np\n\narr = np.eye(3)\nprint(arr)\n<file_sep>/Python/Array/14.py\n\"\"\"\nWrite a Python program to create a 2-dimensional array with random values and find the minimum and maximum values.\n\"\"\"\n\n"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t\tif string.startswith('1'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(match_num('12345'))\nprint(match_num('123456'))\nprint(match_num('1234567'))\nprint(match_num('12345678'))\nprint(match_num('123456789'))\nprint(match_num('1234567890'))\nprint(match_num('12345678901'))\nprint(match_num('123456789012'))\nprint(match_num('1234567890123'))\nprint(match_num('12345678901234'))\nprint(match_num('123456789012345'))\nprint(match_num('1234567890123456'))\nprint(match_num('12345678901234567'))\nprint(match_num('123456789012345678'))\nprint(match_num('1234567890123456789'))\nprint(match_num('12345678901234567890'))\nprint(match_num('123456789012345678901'))\nprint(match_num('1234567890123456789012'))\nprint(match_num('12345678901234567890123'))\nprint(match_num('123456789012345678901234'))\nprint(match_num('1234567890123456789012345'))\nprint(match_num('1"}
{"ID": 300, "source": "MBPP:901", "prompt": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the largest palindrome made from the product of two n-digit numbers.\n\"\"\"\ndef largest_palindrome(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the smallest number divisible by each of the numbers 1 to n.\n\"\"\"\ndef smallest_number(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n\n\"\"\"\nWrite a function to find the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\t\tpass\n"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t\td3 = {}\n\t\tfor key in d1:\n\t\t\tif key in d2:\n\t\t\t\td3[key] = d1[key] + d2[key]\n\t\t\telse:\n\t\t\t\td3[key] = d1[key]\n\t\tfor key in d2:\n\t\t\tif key not in d1:\n\t\t\t\td3[key] = d2[key]\n\t\treturn d3\n\nd1 = {'a':1,'b':2}\nd2 = {'b':3,'c':4}\nprint(add_dict(d1,d2))\n<file_sep>/python/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice"}
{"ID": 302, "source": "MBPP:903", "prompt": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t\tcount = 0\n\t\twhile (n) :\n\t\t\tcount += 1\n\t\t\tn = n & (n-1)\n\t\treturn count\n\nn = 10\nprint(count_Unset_Bits(n))\n<file_sep>/Python/Array/Find_Missing_Number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr) :\n\tn = len(arr)\n\ttotal = (n+1)*(n+2)/2\n\tfor i in range(n) :\n\t\ttotal -= arr[i]\n\treturn total\n\narr = [1,2,3,4,6,7,8]\nprint(find_Missing_Number(arr))\n<file_sep>/Python/Array/Find_Missing_Number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr) :\n\tn = len(arr)\n\ttotal = (n+1)*(n+2)/2\n\tfor i in range(n) :\n\t\ttotal -= arr[i]\n\treturn total\n\ndef find_Missing_Number_2(arr) :\n\tn = len(arr)\n\ttotal = 0\n\tfor i in range(n+1) :\n\t\ttotal += i\n\tfor i in range(n) :\n\t\ttotal -= arr[i]\n\treturn total\n\narr = [1,2,3,4,6,7,8]\nprint(find_Missing_Number_2(arr))\n<file_sep>/Python/Array/Find_Missing_Number_3.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr) :\n\tn = len(arr)\n\ttotal = (n+1)*(n+2)/2\n\tfor i in range(n) :\n\t\ttotal -= arr[i]\n\treturn total\n\ndef find_Missing_Number_3(arr)"}
{"ID": 303, "source": "MBPP:904", "prompt": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t", "predict": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t\tif x%2==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(even_num(10))\nprint(even_num(11))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t\tsum = 0\n\t\tfor i in range(0, n+1): \n\t\t\tsum += binomialCoeff(n, i) * binomialCoeff(n, i) \n\t\treturn sum \n\n# Driver program to test above function \nn = 5\nprint(sum_of_square(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\t\tmatch = re.search(pattern, url)\n\t\tif match:\n\t\t\treturn match.group(1), match.group(2), match.group(3)\n\t\telse:\n\t\t\treturn None, None, None\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\t\tmatch = re.search(pattern, url)\n\t\tif match:\n\t\t\treturn match.group(1), match.group(2), match.group(3)\n\t\telse:\n\t\t\treturn None, None, None\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\t\tmatch = re.search(pattern, url)\n\t\tif match:\n\t\t\treturn match.group(1), match.group(2), match.group(3)\n\t\telse:\n\t\t\treturn None, None, None\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\t\tmatch = re.search(pattern, url)\n\t\tif match:\n\t\t\treturn match.group(1), match.group(2), match.group(3)\n\t\telse:\n\t\t\treturn None, None, None\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\t\tmatch = re.search(pattern, url)\n\t\tif match:\n\t\t\treturn match.group(1), match.group(2), match.group(3)\n\t\telse:\n\t\t\treturn None, None, None\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t\tfor i in range(1,n+1):\n\t\t\tif i%3==0 and i%5==0:\n\t\t\t\tprint(i)\n\nlucky_num(10)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t\n    # If the array is empty \n    if n == 0: \n        return -1\n  \n    # If the array is not empty \n    # and the first element is the \n    # last element \n    if arr[0] == 0 and arr[n - 1] == n - 1: \n        return 0\n  \n    # Find the fixed point \n    for i in range(n): \n        if arr[i] == i: \n            return i \n  \n    # If there is no fixed point \n    return -1\n\narr = [0, 2, 5, 8, 17] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)//2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can only be present in left subarray \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n  \n        # Else the element can only be present in right subarray \n        else: \n            return binarySearch(arr, mid+1, r, x) \n  \n    else: \n        # Element is not present in the array \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\n  \n# Function call \nresult = binarySearch(arr, 0, len(arr)-1, x)"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\n\n\nif __name__ == '__main__':\n\tprint(previous_palindrome(123456789))\n\tprint(previous_palindrome(12345678))\n\tprint(previous_palindrome(1234567))\n\tprint(previous_palindrome(123456))\n\tprint(previous_palindrome(12345))\n\tprint(previous_palindrome(1234))\n\tprint(previous_palindrome(123))\n\tprint(previous_palindrome(12))\n\tprint(previous_palindrome(1))\n\tprint(previous_palindrome(0))\n\tprint(previous_palindrome(-1))\n\tprint(previous_palindrome(-12))\n\tprint(previous_palindrome(-123))\n\tprint(previous_palindrome(-1234))\n\tprint(previous_palindrome(-12345))\n\tprint(previous_palindrome(-123456))\n\tprint(previous_palindrome(-1234567))\n\tprint(previous_palindrome(-12345678))\n\tprint(previous_palindrome(-123456789))\n\tprint(previous_palindrome(-1234567890))\n\tprint(previous_palindrome(-12345678901))\n\tprint(previous_palindrome(-123456789012))\n\tprint(previous_palindrome(-1234567890123))\n\tprint(previous_palindrome(-12345678901234))\n\tprint(previous_palindrome(-123456789012345))\n\tprint(previous_palindrome(-1234567890123456))\n\tprint(previous_palindrome(-12345678901234567))\n\tprint(previous_palindrome(-123456789012345678))\n\tprint(previous"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\telif d < 1 or d > 31:\n\t\t\treturn False\n\t\telif y < 1 or y > 2018:\n\t\t"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t\tif len(nums) < 3:\n\t\t\treturn None\n\t\tmax_heap = []\n\t\tmin_heap = []\n\t\tfor num in nums:\n\t\t\tif len(max_heap) < 3:\n\t\t\t\theapq.heappush(max_heap, -num)\n\t\t\telif num > -max_heap[0]:\n\t\t\t\theapq.heappushpop(max_heap, -num)\n\t\t\tif len(min_heap) < 3:\n\t\t\t\theapq.heappush(min_heap, num)\n\t\t\telif num < min_heap[0]:\n\t\t\t\theapq.heappushpop(min_heap, num)\n\t\treturn -max_heap[0] * -max_heap[1] * -max_heap[2]\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(maximum_product(nums))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution(object):\n\tdef isSameTree(self, p, q):\n\t\t\"\"\"\n\t\t:type p: TreeNode\n\t\t:type q: TreeNode\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif p is None and q is None:\n\t\t\treturn True\n\t\tif p is None or q is None:\n\t\t\treturn False\n\t\tif p.val!= q.val:\n\t\t\treturn False\n\t\treturn self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\np = TreeNode(1)\np.left = TreeNode(2)\np.right = TreeNode(3)\n\nq = TreeNode(1)\nq.left = TreeNode(2)\nq.right = TreeNode(3)\n\ns = Solution()\nprint(s.isSameTree("}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The number of digits in the number is {len(str(n))}\")\n\t\tprint(f\"The"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t\tif string.endswith('1') or string.endswith('2') or string.endswith('3') or string.endswith('4') or string.endswith('5') or string.endswith('6') or string.endswith('7') or string.endswith('8') or string.endswith('9') or string.endswith('0'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(end_num('abc123'))\nprint(end_num('abc1234'))\nprint(end_num('abc12345'))\nprint(end_num('abc123456'))\nprint(end_num('abc1234567'))\nprint(end_num('abc12345678'))\nprint(end_num('abc123456789'))\nprint(end_num('abc1234567890'))\nprint(end_num('abc12345678901'))\nprint(end_num('abc123456789012'))\nprint(end_num('abc1234567890123'))\nprint(end_num('abc12345678901234'))\nprint(end_num('abc123456789012345'))\nprint(end_num('abc1234567890123456'))\nprint(end_num('abc12345678901234567'))\nprint(end_num('abc123456789012345678'))\nprint(end_num('abc1234567890123456789'))\nprint(end_num('abc12345678901234567890'))\nprint(end_num('abc123456789012345678901'))\nprint(end_num('abc123456789012345678901"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t\tif len(s) % 2!= 0:  \n\t\t\treturn False  \n\t\tfor i in range(0, len(s), 2):  \n\t\t\tif s[i]!= s[i + 1]:  \n\t\t\t\treturn False  \n\t\treturn True  \ns = \"xyxyxy\"  \nprint(is_Two_Alter(s))  \ns = \"xyxxy\"  \nprint(is_Two_Alter(s))  \ns = \"xyxy\"  \nprint(is_Two_Alter(s))  \ns = \"xyx\"  \nprint(is_Two_Alter(s))  \ns = \"xxy\"  \nprint(is_Two_Alter(s))  \ns = \"xy\"  \nprint(is_Two_Alter(s))  \ns = \"x\"  \nprint(is_Two_Alter(s))  \ns = \"\"  \nprint(is_Two_Alter(s))  <file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):  \n    sum = 0  \n    for i in range(1, n + 1):  \n        sum += i  \n    return sum  \nn = 5  \nprint(sum_of_n_pos_int(n))  \nn = 10  \nprint(sum_of_n_pos_int(n))  \nn = 15  \nprint(sum_of_n_pos_int(n))  \nn = 20  \nprint(sum_of_n_pos_int(n))  \nn = 25  \nprint(sum_of_n_pos_int(n))  \nn = 30  \nprint(sum_of_n_pos_int(n))  \nn = 35  \nprint(sum_of_n_pos_int(n))  \nn = 40  \nprint(sum_of_n_pos_int(n))  \nn = 45  \nprint(sum_of_n_pos_int(n))  \nn = 50  \nprint(sum_"}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t\treturn sorted(array_nums, key=lambda x: x < 0)\n\nprint(rearrange_numbs([1,2,-1,3,-2,4,5,-3]))<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\n\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (lname + \" \" + fname)\n\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\n\nvalues = input(\"Input some comma seprated numbers : \")\nlist = values.split(\",\")\ntuple = tuple(list)\nprint('List : ',list)\nprint('Tuple : ',tuple)\n\n\"\"\"\nWrite a Python program to display the first and last colors from the following list.\n\"\"\"\n\ncolor_"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t\n    # Sort the elements \n    A.sort() \n  \n    # Now fix the first element one by one and find the \n    # other two elements \n    for i in range(0, arr_size-1): \n  \n        # To find the other two elements, start two index \n        # variables from two corners of the array and move \n        # them toward each other \n        l = i + 1\n        r = arr_size-1\n        while (l < r): \n            if( A[i] + A[l] + A[r] == sum ): \n                print(\"Triplet is\", A[i], \n                          \", \", A[l], \" and \", A[r]) \n                return True\n            elif (A[i] + A[l] + A[r] < sum): \n                l += 1\n            else: # A[i] + A[l] + A[r] > sum \n                r -= 1\n    return False\n\n# Driver program to test the above function \nA = [1, 4, 45, 6, 10, 8] \nn = 16\nsum = 22\narr_size = len(A) \nfind_triplet_array(A, arr_size, sum) \n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)/2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t\tresult = []\n\t\tfor word in text.split():\n\t\t\tif word.isupper():\n\t\t\t\tresult.append(word)\n\t\t\telif word.islower():\n\t\t\t\tresult.append(word)\n\t\treturn \" \".join(result)\n\nif __name__ == '__main__':\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello world\"))\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"HELLO WORLD\"))\n\tprint(text_uppercase_lowercase(\""}
{"ID": 317, "source": "MBPP:918", "prompt": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t", "predict": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\n    # table[i] will be storing the number of solutions for \n    # value i. We need n+1 rows as the table is constructed \n    # in bottom up manner using the base case (n = 0) \n    # Initialize all table values as 0 \n    table = [0 for k in range(n+1)] \n  \n    # Base case (If given value is 0) \n    table[0] = 1\n  \n    # Pick all coins one by one and update the table[] values \n    # after the index greater than or equal to the value of the \n    # picked coin \n    for i in range(0,m): \n        for j in range(S[i],n+1): \n            table[j] += table[j-S[i]] \n  \n    return table[n] \n  \n# Driver program to test above function \narr = [1, 2, 3] \nm = len(arr) \nn = 4\nprint(coin_change(arr, m, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Aug 17 11:20:34 2020\n\n@author: <NAME>\n\"\"\"\n\n# Python program to print Hello world!\n\nprint(\"Hello World!\")\n\n# Python program to add two numbers\n\nnum1 = 1.5\nnum2 = 6.3\n\n# Add two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n\n# Python program to check if the input number is odd or even.\n\nnum = int(input(\"Enter a number: \"))\n\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n# Python program to check if the input number is prime or not\n\nnum = int(input(\"Enter a number: \"))\n\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t\tproduct = 1\n\t\tfor item in items:\n\t\t\tproduct *= item\n\t\treturn product\n\nprint(multiply_list([1,2,3,4]))\nprint(multiply_list([1,2,3,4,5]))\nprint(multiply_list([1,2,3,4,5,6]))\nprint(multiply_list([1,2,3,4,5,6,7]))\nprint(multiply_list([1,2,3,4,5,6,7,8]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(multiply_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(multiply_list([1,2"}
{"ID": 319, "source": "MBPP:920", "prompt": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t\treturn [tuple(i) for i in test_list if i]\n\ntest_list = [(1, 2, 3), (4, 0, 5), (6, 7, 8), (9, 10, 11), (12, 0, 13), (14, 15, 16)]\nprint(remove_tuple(test_list))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef largest_number(test_list):\n\treturn max(test_list)\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(largest_number(test_list))\n<file_sep>/python_practice/python_practice_10.py\n\"\"\"\nWrite a Python program to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef find_list(test_list):\n\treturn max(test_list, key=sum)\n\ntest_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(find_list(test_list))\n<file_sep>/python_practice/python_practice_11.py\n\"\"\"\nWrite a Python program to find common items from two lists.\n\"\"\"\ndef common_items(test_list1, test_list2):\n\treturn list(set(test_list1) & set(test_list2))\n\ntest_list1 = [1, 2, 3, 4, 5]\ntest_list2 = [3, 4, 5, 6, 7]\nprint(common_items(test_list1, test_list2))\n<file_sep>/python_practice/python_practice_12.py\n\"\"\"\nWrite a Python program to find the list in a list of lists whose sum of elements is the lowest.\n\"\"\"\ndef find_list(test_list):\n\treturn min(test_list, key=sum)\n\ntest_list = [[1, 2, 3], [4, "}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t\treturn [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\nprint(chunk_tuples(test_tup, 3))\n<file_sep>/README.md\n# Python-Practice\n\nThis repository contains some of the python practice problems I have done.\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the longest word in a sentence.\n\"\"\"\ndef longest_word(sentence):\n\treturn max(sentence.split(), key=len)\n\nprint(longest_word(\"This is a test sentence\"))\n<file_sep>/python_practice/python_practice_2.py\n\"\"\"\nWrite a function to find the second largest word in a sentence.\n\"\"\"\ndef second_largest_word(sentence):\n\treturn sorted(sentence.split(), key=len)[-2]\n\nprint(second_largest_word(\"This is a test sentence\"))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport { createStore, applyMiddleware } from'redux';\nimport ReduxThunk from'redux-thunk';\nimport reducers from '../reducers';\nimport { Router, Scene } from'react-native-router-flux';\nimport LoginForm from './LoginForm';\nimport EmployeeList from './EmployeeList';\nimport EmployeeCreate from './EmployeeCreate';\nimport EmployeeEdit from './EmployeeEdit';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={createStoreWithMiddleware(reducers)}>\n        <Router>\n          <Scene key=\"root\">\n            <Scene key=\"login\" component={LoginForm} title=\"Please Login\" initial={true} />\n            <Scene key=\"main\" hideNavBar>\n              <Scene key=\"employeeList\" component={EmployeeList} title=\"Employee List\" />\n              <Scene key=\"employeeCreate\" component={EmployeeCreate} title=\"Create Employee\" />\n              <Scene key=\"employeeEdit\" component={EmployeeEdit} title=\"Edit Employee\" />\n            </Scene>\n          </Scene>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t\n    # If the array has only one element, return that element \n    if len(arr) == 1: \n        return arr[0] \n  \n    # Sort the given array arr in \n    # non-decreasing order \n    arr.sort() \n  \n    # Return the product of last two elements \n    return arr[-1] * arr[-2] \n  \n# Driver code \narr = [10, 3, 5, 6, 20] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000, 10000] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000, 10000, 100000] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000, 10000, 100000, 1000000] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000, 10000, 100000, 1000000, 10000000] \nprint(\"Maximum product is\", max_product(arr)) \narr = [10, 3, 5, 6, 20, 100, 1000, 10000, 100000, 100"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t\t# Create a table to store results of subproblems\n\t\tL = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n\t\t# Fill d[][] in bottom up manner\n\t\tfor i in range(m + 1):\n\t\t\tfor j in range(n + 1):\n\n\t\t\t\t# If first string is empty, only option is to\n\t\t\t\t# insert all characters of second string\n\t\t\t\tif i == 0:\n\t\t\t\t\tL[i][j] = j # Max length of LCS is j\n\n\t\t\t\t# If second string is empty, only option is to\n\t\t\t\t# remove all characters of second string\n\t\t\t\telif j == 0:\n\t\t\t\t\tL[i][j] = i # Max length of LCS is i\n\n\t\t\t\t# If last characters are same, ignore last char\n\t\t\t\t# and recur for remaining string\n\t\t\t\telif X[i - 1] == Y[j - 1]:\n\t\t\t\t\tL[i][j] = L[i - 1][j - 1] + 1\n\n\t\t\t\t# If last character are different, consider all\n\t\t\t\t# possibilities and find the maximum\n\t\t\t\telse:\n\t\t\t\t\tL[i][j] = 1 + min(L[i][j - 1], L[i - 1][j])\n\n\t\treturn L[m][n]\n\n# Driver program to test the above function\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Length of the shortest supersequence is \", super_seq(X, Y, len(X), len(Y)))\n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence/Longest Common Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them.\nA subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\nFor example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”,.. etc are subsequences of “abcdefg”.\n\"\"\"\n\ndef lcs(X, Y, m, n):\n\t# Create a table to store results of subproblems\n\tL = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n\t# Fill d[][] in bottom up manner\n\tfor i in"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t if x > y:\n\t \treturn x\n\t else:\n\t \treturn y\n\nprint(max_of_two(3, 4))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\t if x > y and x > z:\n\t \treturn x\n\t elif y > x and y > z:\n\t \treturn y\n\t else:\n\t \treturn z\n\nprint(max_of_three(3, 4, 5))\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, a ):\n\t if x > y and x > z and x > a:\n\t \treturn x\n\t elif y > x and y > z and y > a:\n\t \treturn y\n\t elif z > x and z > y and z > a:\n\t \treturn z\n\t else:\n\t \treturn a\n\nprint(max_of_four(3, 4, 5, 6))\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, a, b ):\n\t if x > y and x > z and x > a and x > b:\n\t \treturn x\n\t elif y > x and y > z and y > a and y > b:\n\t \treturn y\n\t elif z > x and z > y and z > a and z > b:\n\t \treturn z\n\t elif a > x and a > y and a > z and a > b:\n\t \treturn a\n\t else:\n\t \treturn b\n\nprint(max_of_five(3, 4, 5, 6, 7))\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, a, b, c ):\n\t if x > y and x > z and x > a and x > b and x > c:\n\t \treturn x\n\t elif y > x and y > z and y > a and y > b and y > c:\n\t \treturn y\n\t elif z > x and z > y and z > a and z > b and z > c:\n\t \treturn z\n\t elif a > x and a > y and a > z and a > b"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t\tresult = 1\n\t\tfor i in nums:\n\t\t\tresult *= i\n\t\treturn result\n\nprint(mutiple_tuple((1,2,3,4,5)))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to calculate the sum of all the numbers of a given tuple.\n\"\"\"\ndef sum_tuple(nums):\n\t\tresult = 0\n\t\tfor i in nums:\n\t\t\tresult += i\n\t\treturn result\n\nprint(sum_tuple((1,2,3,4,5)))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to calculate the sum of all the numbers of a given tuple.\n\"\"\"\ndef sum_tuple(nums):\n\t\tresult = 0\n\t\tfor i in nums:\n\t\t\tresult += i\n\t\treturn result\n\nprint(sum_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t\tresult = 1\n\t\tfor i in nums:\n\t\t\tresult *= i\n\t\treturn result\n\nprint(mutiple_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a python function to calculate the average of all the numbers of a given tuple.\n\"\"\"\ndef average_tuple(nums):\n\t\tresult = 0\n\t\tfor i in nums:\n\t\t\tresult += i\n\t\treturn result/len(nums)\n\nprint(average_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a python function to calculate the average of all the numbers of a given tuple.\n\"\"\"\ndef average_tuple(nums):\n\t\tresult = 0\n\t\tfor i in nums:\n\t\t\tresult += i\n\t\treturn result/len(nums)\n\nprint(average_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a python function to calculate the average of all the numbers of a given tuple.\n\"\"\"\ndef average_tuple(nums):\n\t\tresult = 0\n\t\tfor i in nums:\n\t\t\tresult += i\n\t\treturn result/len(nums)\n\nprint(average_tuple((1,2,3,4,5)))"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\n    if n == 0: \n        return 1\n    if m == 0: \n        return 0\n    return rencontres_number(n - 1, m) + rencontres_number(n, m - 1) \n\ndef main():\n    n = 3\n    m = 2\n    print(rencontres_number(n, m))\n\nif __name__ == \"__main__\":\n    main()\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max(height(root.left), height(root.right))\n\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \n\nprint(\"Height of tree is %d\" %(height(root)))\n<file_sep>/Python/Algorithms/Sorting/selection_sort.py\n\"\"\"\nSelection sort is a sorting algorithm, specifically an in-place comparison sort.\nIt has O(n2) time complexity, making it inefficient on large lists, and generally\nperforming worse than the similar insertion sort.\n\"\"\"\n\ndef selection_sort(arr):\n\tfor i in range(len(arr)):\n\t\tmin_idx = i\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[min_idx] > arr[j]:\n\t\t\t\tmin_idx = j\n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i]\n\treturn arr\n\narr = [64, 25, 12, 22, 11]\nprint(selection_sort(arr))\n<file_sep>/Python/Algorithms/Sorting/bubble_sort.py\n\"\"\"\nBubble sort is a simple sorting algorithm that repeatedly steps through the list,\ncompares adjacent elements and swaps them if they are in the wrong order.\n\"\"\"\n\ndef bubble_sort(arr):\n\tfor i in range(len(arr)):\n\t\tfor j in range(0, len(arr)-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\treturn arr\n\narr = [64, 25, 12, 22, 11]\nprint(bubble_sort(arr))\n<file_sep>/Python/Algorithms/Sorting/insertion_sort.py\n\"\"\"\nInsertion sort is a simple sorting algorithm that builds the final sorted array\n("}
{"ID": 327, "source": "MBPP:928", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t\treturn dt[8:10] + \"-\" + dt[5:7] + \"-\" + dt[0:4]\n\nprint(change_date_format(\"2019-01-01\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the hypotenuse of a right angled triangle.\n\"\"\"\nimport math\n\ndef hypotenuse(a, b):\n\t\treturn math.sqrt(a**2 + b**2)\n\nprint(hypotenuse(3, 4))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to convert temperatures to and from celsius, fahrenheit.\n[ Formula : c/5 = f-32/9 [ where c = temperature in celsius and f = temperature in fahrenheit ]\nExpected Output :\n60°C is 140 in Fahrenheit\n45°F is 7 in Celsius\n\"\"\"\ndef convert_temp(temp, unit):\n\t\tif unit == \"C\":\n\t\t\t\treturn temp * 9/5 + 32\n\t\telif unit == \"F\":\n\t\t\t\treturn (temp - 32) * 5/9\n\t\telse:\n\t\t\t\treturn \"Invalid unit\"\n\nprint(convert_temp(60, \"C\"))\nprint(convert_temp(45, \"F\"))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to convert height (in feet and inches) to centimeters.\n\"\"\"\ndef convert_height(ft, inch):\n\t\treturn ft * 30.48 + inch * 2"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t\tcount = 0\n\t\tfor i in tuplex:\n\t\t\tif i == value:\n\t\t\t\tcount = count + 1\n\t\treturn count\n\ntuplex = (1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, "}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\tpattern = 'ab*'\n\t\tif re.search(pattern, text):\n\t\t\treturn 'Found a match!'\n\t\telse:\n\t\t\treturn 'Not matched!'\n\nprint(text_match('ac'))\nprint(text_match('abc'))\nprint(text_match('abbc'))\nprint(text_match('abbbbbbb'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text_match('abbbbbbbbc'))\nprint(text"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t\tsum = 0\n\t\tfor i in range(1, number+1):\n\t\t\t\tsum += i**3\n\t\treturn sum\n\nprint(sum_series(5))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(i, end=\"\")\n\t\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n\nfor i in range(1, 6):\n\t\tfor j in range(1, i+1):\n\t\t\t\tprint(j, end=\"\")\n\t\tprint()\n<file_sep>/python/python_basics/python_basics_13"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_2(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_3(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_4(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_5(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_6(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_7(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_8(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_9(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_10(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_11(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_12(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_13(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_14(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_15(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_16(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_17(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_18(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_19(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_20(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_21(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_list_22(l):\n\t\treturn list(set(l))\n\ndef remove_duplic_"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\nprint(camel_to_snake('HelloWorld'))\nprint(camel_to_snake('helloWorld'))\nprint(camel_to_snake('helloWorld123'))\nprint(camel_to_snake('helloWorld1234'))\nprint(camel_to_snake('helloWorld12345'))\nprint(camel_to_snake('helloWorld123456'))\nprint(camel_to_snake('helloWorld1234567'))\nprint(camel_to_snake('helloWorld12345678'))\nprint(camel_to_snake('helloWorld123456789'))\nprint(camel_to_snake('helloWorld1234567890'))\nprint(camel_to_snake('helloWorld12345678901'))\nprint(camel_to_snake('helloWorld123456789012'))\nprint(camel_to_snake('helloWorld1234567890123'))\nprint(camel_to_snake('helloWorld12345678901234'))\nprint(camel_to_snake('helloWorld123456789012345'))\nprint(camel_to_snake('helloWorld1234567890123456'))\nprint(camel_to_snake('helloWorld12345678901234567'))\nprint(camel_to_snake('helloWorld123456789012345678'))\nprint(camel_to_snake('helloWorld1234567890123456789'))\nprint(camel_to_snake('helloWorld12345678901234567890'))\nprint(camel_to_snake('helloWorld123456789012345678901'))\nprint(camel_to_"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\tif m == 0: \n\t\t\treturn 1\n\t\treturn dealnnoy_num(n - 1, m) + dealnnoy_num(n, m - 1) + dealnnoy_num(n - 1, m - 1) \n\n# Driver program to test above function \nn = 3\nm = 3\nprint(\"The value of nth delannoy number is\", dealnnoy_num(n, m)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n        else: \n            return binarySearch(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binarySearch(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print(\"Element is present at index % d\" % result) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/LinearSearch.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to"}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t\treturn sum(i**2 for i in range(1, number+1))\n\nprint(series_sum(10))\n<file_sep>/python/codewars/7kyu/sum_of_digits_digital_root.py\n\"\"\"\nDigital root is the recursive sum of all the digits in a number.\n\nGiven n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.\n\nHere's how it works:\n\ndigital_root(16)\n=> 1 + 6\n=> 7\n\ndigital_root(942)\n=> 9 + 4 + 2\n=> 15...\n=> 1 + 5\n=> 6\n\ndigital_root(132189)\n=> 1 + 3 + 2 + 1 + 8 + 9\n=> 24...\n=> 2 + 4\n=> 6\n\ndigital_root(493193)\n=> 4 + 9 + 3 + 1 + 9 + 3\n=> 29...\n=> 2 + 9\n=> 11...\n=> 1 + 1\n=> 2\n\"\"\"\ndef digital_root(number):\n\t\tif number < 10:\n\t\t\t\treturn number\n\t\telse:\n\t\t\t\treturn digital_root(sum(int(i) for i in str(number)))\n\nprint(digital_root(132189))\n<file_sep>/python/codewars/7kyu/sum_of_odd_numbers.py\n\"\"\"\nGiven the triangle of consecutive odd numbers:\n\n             1\n          3     5\n       7     9    11\n   13    15    17    19\n21    23    25    27    29\n...\nCalculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n\nrow_sum_odd_numbers(1); # 1\nrow_sum_odd_numbers(2); # 3 + 5 = 8\n\"\"\"\ndef row_sum_odd_numbers(n):\n\t\treturn sum(i for i in range("}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t\n\n\treturn test_list\n\nif __name__ == \"__main__\":\n\ttest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\tord_list = [1, 3, 5, 7]\n\tprint(re_arrange_tuples(test_list, ord_list))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nif __name__ == \"__main__\":\n\tnums = [2,2,1]\n\tprint(single_number(nums))\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val ="}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t\tchar_dict = {}\n\t\tfor char in str1:\n\t\t\tif char in char_dict:\n\t\t\t\tchar_dict[char] += 1\n\t\t\telse:\n\t\t\t\tchar_dict[char] = 1\n\t\tmax_char = max(char_dict, key=char_dict.get)\n\t\treturn max_char\n\nprint(max_char(\"Hello World\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\n\ndef add_string(str1):\n\tif str1[:2] == \"Is\":\n\t\treturn str1\n\telse:\n\t\treturn \"Is\" + str1\n\nprint(add_string(\"Array\"))\nprint(add_string(\"IsArray\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\n\ndef string_copies(str1, n):\n\treturn str1"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t\t\"\"\"\n\t\t:type A: List[int]\n\t\t:type B: List[int]\n\t\t:type C: List[int]\n\t\t:type p: int\n\t\t:type q: int\n\t\t:type r: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\ti = 0\n\t\tj = 0\n\t\tk = 0\n\t\tmin_diff = float('inf')\n\t\tres = []\n\t\twhile i < len(A) and j < len(B) and k < len(C):\n\t\t\tdiff = abs(A[i] - B[j]) + abs(B[j] - C[k]) + abs(C[k] - A[i])\n\t\t\tif diff < min_diff:\n\t\t\t\tmin_diff = diff\n\t\t\t\tres = [A[i], B[j], C[k]]\n\t\t\tif A[i] < B[j]:\n\t\t\t\ti += 1\n\t\t\telif B[j] < C[k]:\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tk += 1\n\t\treturn res\n\nA = [1, 4, 5, 7]\nB = [10, 20, 30, 40]\nC = [100, 200, 300, 400]\np = 22\nq = 20\nr = 130\nprint(find_closet(A, B, C, p, q, r))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     "}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t\treturn sorted(models, key=lambda x: x['price'])\n\nmodels = [\n\t{'name': '2012 Audi A4','mpg': 24, 'price': 47990},\n\t{'name': '2012 Ford Focus','mpg': 27, 'price': 34000},\n\t{'name': '2012 Ford Edge','mpg': 28, 'price': 36000},\n\t{'name': '2012 Mercedes C-Class','mpg': 31, 'price': 53990},\n\t{'name': '2012 Mercedes E-Class','mpg': 30, 'price': 61900},\n\t{'name': '2012 Volkswagen GTI','mpg': 22, 'price': 28700},\n\t{'name': '2012 <NAME>','mpg': 21, 'price': 29000},\n\t{'name': '2012 <NAME>','mpg': 27, 'price': 39900},\n\t{'name': '2012 Ford F-150','mpg': 26, 'price': 37900},\n\t{'name': '2012 Nissan Pathfinder','mpg': 28, 'price': 43900},\n\t{'name': '2012 GMC Terrain','mpg': 21, 'price': 34300},\n\t{'name': '2012 Dodge Challenger','mpg': 15, 'price': 41900},\n\t{'name': '2012 Acura MDX','mpg': 23, 'price': 33500}\n]\n\nprint(sorted_models(models))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\"\"\"\nfor i in range(0"}
{"ID": 339, "source": "MBPP:940", "prompt": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using quick sort.\n\"\"\"\ndef quick_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using insertion sort.\n\"\"\"\ndef insertion_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using selection sort.\n\"\"\"\ndef selection_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using bubble sort.\n\"\"\"\ndef bubble_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using radix sort.\n\"\"\"\ndef radix_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using bucket sort.\n\"\"\"\ndef bucket_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using cocktail sort.\n\"\"\"\ndef cocktail_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using comb sort.\n\"\"\"\ndef comb_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using gnome sort.\n\"\"\"\ndef gnome_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using odd-even sort.\n\"\"\"\ndef odd_even_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using pigeonhole sort.\n\"\"\"\ndef pigeonhole_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using cycle sort.\n\"\"\"\ndef cycle_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using tim sort.\n\"\"\"\ndef tim_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using tree sort.\n\"\"\"\ndef tree_sort(arr):\n\t\n\n\n\"\"\"\nWrite a function to sort the given array by using topological sort.\n\"\"\""}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t\tcount = 0\n\t\tfor i in num:\n\t\t\tif type(i) == tuple:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_elim([1,2,3,4,5,6,7,8,9,10]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t\tfor i in test_tup:\n\t\t\tif i in check_list:\n\t\t\t\treturn True\n\t\treturn False\n\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, check_list))\n\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [6, 7, 8, 9, 10]\nprint(check_element(test_tup, check_list))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t\theapq.heapify(num1)\n\t\theapq.heapify(num2)\n\t\tresult = []\n\t\twhile num1 or num2:\n\t\t\tif num1 and num2:\n\t\t\t\tif num1[0] < num2[0]:\n\t\t\t\t\tresult.append(heapq.heappop(num1))\n\t\t\t\telse:\n\t\t\t\t\tresult.append(heapq.heappop(num2))\n\t\t\telif num1:\n\t\t\t\tresult.append(heapq.heappop(num1))\n\t\t\telse:\n\t\t\t\tresult.append(heapq.heappop(num2))\n\t\treturn result\n\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left,q."}
{"ID": 343, "source": "MBPP:944", "prompt": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t", "predict": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t\tfor i in range(len(text)):\n\t\t\tif text[i].isdigit():\n\t\t\t\tprint(text[i], i)\n\nnum_position(\"123456789\")\n<file_sep>/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints Hello World!\n\"\"\"\nprint(\"Hello World!\")\n<file_sep>/python/python_basics/003_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tprint(i)\n<file_sep>/python/python_basics/004_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2!= 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/005_print_even_numbers.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2 == 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/006_print_odd_numbers_between_1_and_100.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2!= 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/007_print_even_numbers_between_1_and_100.py\n\"\"\"\nWrite a program that prints the even numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2 == 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/008_print_numbers_between_1_and_100.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\t"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t\treturn set(t)\n\nprint(tuple_to_set((1,2,3,4,5,6,7,8,9,10)))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t\td={}\n\t\tfor i in s:\n\t\t\tif i in d:\n\t\t\t\td[i]+=1\n\t\t\telse:\n\t\t\t\td[i]=1\n\t\tfor i in d:\n\t\t\tif d[i]==a:\n\t\t\t\tprint(i,d[i])\n\ns=input(\"Enter the string: \")\na=int(input(\"Enter the count: \"))\nmost_common_elem(s,a)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_list(l):\n\tsum=0\n\tfor i in l:\n\t\tsum+=i\n\tprint(sum)\n\nl=list(map(int,input(\"Enter the list: \").split()))\nsum_list(l)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a program to find the largest number in a list.\n\"\"\"\ndef largest_num(l):\n\tmax=l[0]\n\tfor i in l:\n\t\tif i>max:\n\t\t\tmax=i\n\tprint(max)\n\nl=list(map(int,input(\"Enter the list: \").split()))\nlargest_num(l)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a program to find the smallest number in a list.\n\"\"\"\ndef smallest_num(l):\n\tmin=l[0]\n\tfor i in l:\n\t\tif i<min:\n\t\t\tmin=i\n\tprint(min)\n\nl=list(map(int,input(\"Enter the list: \").split()))\nsmallest_num(l)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a program to find the second largest number in a list.\n\"\"\"\ndef second_largest_num(l):\n\tmax=l[0]\n\tsec_max=l[0]\n\tfor i in l:\n\t\tif i>max:\n\t\t\tsec_max=max\n\t\t\tmax=i\n\t\telif i>sec_max:\n\t\t\tsec_max=i\n\tprint(sec_max)\n\n"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t\tmin_len = len(list1[0])\n\t\tfor i in list1:\n\t\t\tif len(i) < min_len:\n\t\t\t\tmin_len = len(i)\n\t\treturn min_len\n\nprint(len_log(['a','b','c','d','e']))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = len(list1[0])\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e']))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = len(list1[0])\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e']))\n\n\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t\tmin_len = len(list1[0])\n\t\tfor i in list1:\n\t\t\tif len(i) < min_len:\n\t\t\t\tmin_len = len(i)\n\t\treturn min_len\n\nprint(len_log(['a','b','c','d','e']))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = len(list1[0])\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e']))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\n"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\treturn tup1[index]\n\ntup1 = (1,2,3,4,5)\nprint(get_item(tup1,2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \",area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnum = input(\"Enter the numbers separated by comma: \")\nlist1 = num.split(\",\")\ntuple1 = tuple(list1)\nprint(\"List"}
{"ID": 348, "source": "MBPP:949", "prompt": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t\treturn sorted(test_list, key=lambda x: sum(map(int, str(x))))\n\nprint(sort_list([('10', 2, (4, 5)), ('4', 5, (9, 8)), ('0', 9, (9, 9)), ('1', 2, (1, 2)), ('1', 1, (2, 3)), ('1', 7, (1, 2)), ('1', 7, (1, 2)), ('2', 7, (2, 8))]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t\tif year % 12 == 0:\n\t\t\tprint(\"Monkey\")\n\t\telif year % 12 == 1:\n\t\t\tprint(\"Rooster\")\n\t\telif year % 12 == 2:\n\t\t\tprint(\"Dog\")\n\t\telif year % 12 == 3:\n\t\t\tprint(\"Pig\")\n\t\telif year % 12 == 4:\n\t\t\tprint(\"Rat\")\n\t\telif year % 12 == 5:\n\t\t\tprint(\"Ox\")\n\t\telif year % 12 == 6:\n\t\t\tprint(\"Tiger\")\n\t\telif year % 12 == 7:\n\t\t\tprint(\"Rabbit\")\n\t\telif year % 12 == 8:\n\t\t\tprint(\"Dragon\")\n\t\telif year % 12 == 9:\n\t\t\tprint(\"Snake\")\n\t\telif year % 12 == 10:\n\t\t\tprint(\"Horse\")\n\t\telif year % 12 == 11:\n\t\t\tprint(\"Sheep\")\n\nchinese_zodiac(2016)\n<file_sep>/python/python_basics/01_python_basics/01_python_basics.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/python/python_basics/02_python_basics/02_python_basics.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/03_python_basics/03_python_basics.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/04_python_basics/04_python_basics.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: tuple of max similar indices\n\t\t\"\"\"\n\t\tmax_similar_indices = []\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i][0] == test_list2[j][0]:\n\t\t\t\t\tmax_similar_indices.append((i, j))\n\t\treturn max_similar_indices\n\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices_2(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: tuple of max similar indices\n\t\t\"\"\"\n\t\tmax_similar_indices = []\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i][0] == test_list2[j][0]:\n\t\t\t\t\tmax_similar_indices.append((i, j))\n\t\treturn max(max_similar_indices)\n\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices_3(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: tuple of max similar indices\n\t\t\"\"\"\n\t\tmax_similar_indices = []\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i][0] == test_list2[j][0]:\n\t\t\t\t\tmax_similar_indices.append((i, j))\n\t\treturn max(max_similar_indices, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices_4(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\n    # Initialize result \n    res = 1\n  \n    # A simple approach is to first find n! \n    # and then divide by (n-r)! and r! \n    for i in range(r): \n        res = (res * (n - i)) % p \n  \n    # return n! / (n-r)! * r! \n    return res \n  \n# Driver Code \nn = 10\nr = 2\np = 13\nprint(nCr_mod_p(n, r, p)) \n\n# + [markdown] id=\"888888888888\"\n# ## 10. Find the number of ways to reach the nth stair\n#\n# Given a staircase with n steps and an array of n+1 integers where each integer represents the maximum number of steps that can be made in one jump. Find the number of ways that a person can reach the top of the staircase.\n#\n# Example:\n#\n# Input: arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}\n# Output: 34\n# There are 34 ways to reach the top.\n#\n# Input: arr[] = {1, 2}\n# Output: 1\n# There is one way to reach the top.\n#\n# Input: arr[] = {1, 3, 5, 10}\n# Output: 4\n# There are 4 ways to reach the top.\n#\n# Input: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6}\n# Output: 13\n# There are 13 ways to reach the top.\n#\n# Input: arr[] = {1, 3, 5, 10, 100}\n# Output: 18\n# There are 18 ways to reach the top.\n#\n# Input: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t\n    # Sort the array in ascending order \n    ar.sort() \n  \n    # Initialize result \n    res = 0\n  \n    # Traverse the array \n    for i in range(n): \n  \n        # If the current element is smaller \n        # than or equal to the previous element \n        # then increment the result \n        if (i == 0 or ar[i] > ar[i - 1]): \n            res += 1\n  \n    # Return the result \n    return res \n  \n# Driver code \nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(ar) \nprint(subset(ar, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\nprint(profit_amount(100,120))\nprint(profit_amount(100,80))\nprint(profit_amount(100,100))\nprint(profit_amount(100,1000))\nprint(profit_amount(100,10000))\nprint(profit_amount(100,100000))\nprint(profit_amount(100,1000000))\nprint(profit_amount(100,10000000))\nprint(profit_amount(100,100000000))\nprint(profit_amount(100,1000000000))\nprint(profit_amount(100,10000000000))\nprint(profit_amount(100,100000000000))\nprint(profit_amount(100,1000000000000))\nprint(profit_amount(100,10000000000000))\nprint(profit_amount(100,100000000000000))\nprint(profit_amount(100,1000000000000000))\nprint(profit_amount(100,10000000000000000))\nprint(profit_amount(100,100000000000000000))\nprint(profit_amount(100,1000000000000000000))\nprint(profit_amount(100,10000000000000000000))\nprint(profit_amount(100,10000000000000000000"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t\treturn sum(divisors(n)) > n\n\ndef divisors(n):\n\t\treturn [i for i in range(1, n) if n % i == 0]\n\ndef main():\n\t\tprint(is_abundant(12))\n\t\tprint(is_abundant(18))\n\t\tprint(is_abundant(20))\n\t\tprint(is_abundant(28))\n\t\tprint(is_abundant(36))\n\t\tprint(is_abundant(40))\n\t\tprint(is_abundant(56))\n\t\tprint(is_abundant(63))\n\t\tprint(is_abundant(70))\n\t\tprint(is_abundant(72))\n\t\tprint(is_abundant(84))\n\t\tprint(is_abundant(96))\n\t\tprint(is_abundant(100))\n\nif __name__ == '__main__':\n\t\tmain()\n<file_sep>/python/0001-0100/0010-0100/0010-summation-of-primes.py\n\"\"\"\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\"\"\"\ndef summation_of_primes(n):\n\t\treturn sum(primes(n))\n\ndef primes(n):\n\t\treturn [i for i in range(2, n) if is_prime(i)]\n\ndef is_prime(n):\n\t\tif n < 2:\n\t\t\t\treturn False\n\t\tif n == 2:\n\t\t\t\treturn True\n\t\tif n % 2 == 0:\n\t\t\t\treturn False\n\t\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\t\t\tif n % i == 0:\n\t\t\t\t\t\treturn False\n\t\treturn True\n\ndef main():\n\t\tprint(summation_of_primes(10))\n\t\tprint(summation_of_primes(2000000))\n\nif __name__ == '__main__':\n\t\tmain()\n<file_sep>/python/000"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t\treturn re.split(r'[A-Z]', text)\n\nprint(split_list(\"HelloWorld\"))\nprint(split_list(\"Hello World\"))\nprint(split_list(\"Hello World Eve\"))\nprint(split_list(\"Hello World Eve And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone\"))\nprint(split_list(\"Hello World Eve And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Everyone Else And Every"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\tpos = 1\n\t\twhile n & 1 == 0:\n\t\t\tn = n >> 1\n\t\t\tpos += 1\n\t\treturn pos\n\ndef get_First_Set_Bit_Pos_2(n):\n\treturn n & ~(n-1)\n\ndef get_First_Set_Bit_Pos_3(n):\n\treturn n & -n\n\ndef get_First_Set_Bit_Pos_4(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_5(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_6(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_7(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_8(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_9(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_10(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_11(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_12(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_13(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_14(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_15(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_16(n):\n\treturn n & (n ^ (n-1))\n\ndef get_First_Set_Bit_Pos_17(n"}
{"ID": 357, "source": "MBPP:958", "prompt": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t", "predict": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t\t\"\"\"\n\t\t:type num: int\n\t\t:rtype: str\n\t\t\"\"\"\n\t\troman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n\t\troman_num = ''\n\t\tfor key in sorted(roman_dict.keys(), reverse=True):\n\t\t\twhile num >= key:\n\t\t\t\troman_num += roman_dict[key]\n\t\t\t\tnum -= key\n\t\treturn roman_num\n\nprint int_to_roman(1994)\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t\n    return sum(lst) / len(lst) \n\nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", Average(lst)) \n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n\"\"\"\nWrite a"}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 3\n\t\treturn get_noOfways(n-1) + get_noOfways(n-2) + get_noOfways(n-3)\n\nprint get_noOfways(4)\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t\t\"\"\"\n\t\t:type s: str\n\t\t:rtype: int\n\t\t\"\"\"\n\t\troman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n\t\tresult = 0\n\t\tfor i in range(len(s)):\n\t\t\tif i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n\t\t\t\tresult += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n\t\t\telse:\n\t\t\t\tresult += roman_dict[s[i]]\n\t\treturn result\n\nprint(roman_to_int('MCMXCIV'))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2==0:\n\t\t\t\tsum = sum + i\n\t\treturn sum\n\nprint(sum_Even(1,10))\nprint(sum_Even(1,100))\nprint(sum_Even(1,1000))\nprint(sum_Even(1,10000))\nprint(sum_Even(1,100000))\nprint(sum_Even(1,1000000))\nprint(sum_Even(1,10000000))\nprint(sum_Even(1,100000000))\nprint(sum_Even(1,1000000000))\nprint(sum_Even(1,10000000000))\nprint(sum_Even(1,100000000000))\nprint(sum_Even(1,1000000000000))\nprint(sum_Even(1,10000000000000))\nprint(sum_Even(1,100000000000000))\nprint(sum_Even(1,1000000000000000))\nprint(sum_Even(1,10000000000000000))\nprint(sum_Even(1,100000000000000000))\nprint(sum_Even(1,1000000000000000000))\nprint(sum_Even(1,10000000000000000000))\nprint(sum_Even(1,100000000000000000000))\nprint(sum_Even(1,1000000000000000000000))\nprint(sum_Even(1,10"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (y**2)-(4*x*z)\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef roots_of_quadratic_equation(x,y,z):\n\t\tif discriminant_value(x,y,z) > 0:\n\t\t\tprint(\"The roots of the quadratic equation are: \",(-y+math.sqrt(discriminant_value(x,y,z)))/(2*x),(-y-math.sqrt(discriminant_value(x,y,z)))/(2*x))\n\t\telif discriminant_value(x,y,z) == 0:\n\t\t\tprint(\"The roots of the quadratic equation are: \",(-y)/(2*x))\n\t\telse:\n\t\t\tprint(\"The roots of the quadratic equation are imaginary.\")\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef roots_of_quadratic_equation_2(x,y,z):\n\t\tif discriminant_value(x,y,z) > 0:\n\t\t\tprint(\"The roots of the quadratic equation are: \",(-y+math.sqrt(discriminant_value(x,y,z)))/(2*x),(-y-math.sqrt(discriminant_value(x,y,z)))/(2*x))\n\t\telif discriminant_value(x,y,z) == 0:\n\t\t\tprint(\"The roots of the quadratic equation are: \",(-y)/(2*x))\n\t\telse:\n\t\t\tprint(\"The roots of the quadratic equation are imaginary.\")\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef roots_of_quadratic_equation_3(x,y,z):\n\t\tif discriminant_value(x,y,z) > 0:\n\t\t\tprint(\"The roots of the quadratic equation are: \",(-y+math.sqrt(discriminant_value(x,y,z)))/(2*x),(-y-math.sqrt(discriminant_value(x,y,z)))/(2*x))\n\t\telif discriminant_value(x,y,z) == 0:\n\t\t\tprint(\"The roots of"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s) % 2 == 0: \n\t\t\tprint(\"Even\") \n\t\telse: \n\t\t\tprint(\"Odd\") \n\nword_len(\"Python\")\nword_len(\"Java\")\nword_len(\"JavaScript\")\nword_len(\"C\")\nword_len(\"C++\")\nword_len(\"C#\")\nword_len(\"Java Script\")\nword_len(\"Python Programming\")\nword_len(\"Python Programming Language\")\nword_len(\"Python Programming Languages\")\nword_len(\"Python Programming Languages and Frameworks\")\nword_len(\"Python Programming Languages and Frameworks and Tools\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data and Machine Learning\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data and Machine Learning and Artificial Intelligence\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data and Machine Learning and Artificial Intelligence and Data Science\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data and Machine Learning and Artificial Intelligence and Data Science and Data Engineering\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and DevOps and Big Data and Machine Learning and Artificial Intelligence and Data Science and Data Engineering and Data Analytics\")\nword_len(\"Python Programming Languages and Frameworks and Tools and Libraries and Databases and Servers and Clouds and"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', text).lower()\n\nprint(camel_to_snake('camelCase'))\nprint(camel_to_snake('camelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToCamelCase'))\nprint(camel_to_snake('camelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamelCaseToSnakeCaseToCamel"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\tfor i in tuple1:\n\t\t\tif i == ():\n\t\t\t\ttuple1.remove(i)\n\t\treturn tuple1\n\ntuple1 = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(tuple1))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnum ="}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t\tvowels = 'aeiou'\n\t\tfor char in string: \n\t\t\tif char in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\nstring = input(\"Enter a string: \")\nprint(check(string))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\""}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t\t\"\"\"\n\t\t:type A: int\n\t\t:type B: int\n\t\t:type N: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif N == 0:\n\t\t\treturn 0\n\t\tif N == 1:\n\t\t\treturn A\n\t\tif N == 2:\n\t\t\treturn max(A,B)\n\t\tif N == 3:\n\t\t\treturn max(A,B,A+B)\n\t\tif N == 4:\n\t\t\treturn max(A,B,A+B,A+2*B)\n\t\tif N == 5:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B)\n\t\tif N == 6:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B)\n\t\tif N == 7:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B,A+5*B)\n\t\tif N == 8:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B,A+5*B,A+6*B)\n\t\tif N == 9:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B,A+5*B,A+6*B,A+7*B)\n\t\tif N == 10:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B,A+5*B,A+6*B,A+7*B,A+8*B)\n\t\tif N == 11:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3*B,A+4*B,A+5*B,A+6*B,A+7*B,A+8*B,A+9*B)\n\t\tif N == 12:\n\t\t\treturn max(A,B,A+B,A+2*B,A+3"}
{"ID": 368, "source": "MBPP:969", "prompt": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t", "predict": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t\t\"\"\"\n\t\tJoins the tuples if they have similar initial elements.\n\t\t\"\"\"\n\t\tnew_list = []\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i][0] == test_list[j][0]:\n\t\t\t\t\tnew_list.append(test_list[i] + test_list[j])\n\t\treturn new_list\n\n\"\"\"\nWrite a function to find the longest word in a list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\t\"\"\"\n\t\tFinds the longest word in a list of words.\n\t\t\"\"\"\n\t\tlongest_word = \"\"\n\t\tfor word in test_list:\n\t\t\tif len(word) > len(longest_word):\n\t\t\t\tlongest_word = word\n\t\treturn longest_word\n\n\"\"\"\nWrite a function to find the longest common prefix string in a list of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\t\"\"\"\n\t\tFinds the longest common prefix string in a list of strings.\n\t\t\"\"\"\n\t\tif len(test_list) == 0:\n\t\t\treturn \"\"\n\t\tlongest_prefix = test_list[0]\n\t\tfor word in test_list:\n\t\t\tprefix = \"\"\n\t\t\tfor i in range(len(word)):\n\t\t\t\tif word[i] == longest_prefix[i]:\n\t\t\t\t\tprefix += word[i]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif len(prefix) < len(longest_prefix):\n\t\t\t\tlongest_prefix = prefix\n\t\treturn longest_prefix\n\n\"\"\"\nWrite a function to find the longest common suffix string in a list of strings.\n\"\"\"\ndef longest_common_suffix(test_list):\n\t\t\"\"\"\n\t\tFinds the longest common suffix string in a list of strings.\n\t\t\"\"\"\n\t\tif len(test_list) == 0:\n\t\t\treturn \"\"\n\t\tlongest_suffix = test_list[0]\n\t\tfor word in test_list:\n\t\t\tsuffix = \"\"\n\t\t\tfor i in range(len(word)):\n\t\t\t\tif word[-i] == longest_suffix[-i]:\n\t\t\t\t\tsuffix += word[-i]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif len(suffix) < len(longest_suffix):\n\t\t\t"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t\tif x < y:\n\t\t\treturn x\n\t\telse:\n\t\t\treturn y\n\nprint min_of_two( 10, 20 )\nprint min_of_two( 20, 10 )\n<file_sep>/python/python_basics/python_basics_001.py\n\"\"\"\nWrite a program to print Hello World\n\"\"\"\nprint \"Hello World\"\n<file_sep>/python/python_basics/python_basics_003.py\n\"\"\"\nWrite a program to print the sum of two numbers\n\"\"\"\ndef sum_of_two( x, y ):\n\t\treturn x + y\n\nprint sum_of_two( 10, 20 )\n<file_sep>/python/python_basics/python_basics_004.py\n\"\"\"\nWrite a program to print the sum of two numbers\n\"\"\"\ndef sum_of_two( x, y ):\n\t\treturn x + y\n\nprint sum_of_two( 10, 20 )\nprint sum_of_two( 20, 10 )\nprint sum_of_two( 10, 10 )\n<file_sep>/python/python_basics/python_basics_002.py\n\"\"\"\nWrite a program to print the sum of two numbers\n\"\"\"\ndef sum_of_two( x, y ):\n\t\treturn x + y\n\nprint sum_of_two( 10, 20 )\nprint sum_of_two( 20, 10 )\n<file_sep>/python/python_basics/python_basics_005.py\n\"\"\"\nWrite a program to print the sum of two numbers\n\"\"\"\ndef sum_of_two( x, y ):\n\t\treturn x + y\n\nprint sum_of_two( 10, 20 )\nprint sum_of_two( 20, 10 )\nprint sum_of_two( 10, 10 )\nprint sum_of_two( 10, 10 )\nprint sum_of_two( 10, 10 )\nprint sum_of_two( 10, 10 )\nprint sum_of_two( 10, 10 )\nprint sum_of_two( "}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t\n    # Initialize result \n    res = 0\n  \n    # Find maximum number of segments \n    # with length 'a' \n    res += n // a\n  \n    # Find maximum number of segments \n    # with length 'b' \n    res += n // b\n  \n    # Find maximum number of segments \n    # with length 'c' \n    res += n // c\n  \n    # Return result \n    return res \n  \n# Driver code \nn = 10\na = 2\nb = 3\nc = 5\nprint(maximum_segments(n, a, b, c)) \n\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef maximum_product(arr) : \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the maximum product \n    return arr[-1] * arr[-2] * arr[-3] \n  \n# Driver code \narr = [10, 3, 5, 6, 20] \nprint(maximum_product(arr)) \n\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef maximum_product(arr) : \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the maximum product \n    return arr[-1] * arr[-2] * arr[-3] \n  \n# Driver code \narr = [10, 3, 5, 6, 20] \nprint(maximum_product(arr)) \n\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef maximum_product(arr) : \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the maximum product \n    return arr[-1] * arr[-2] * arr[-3] \n  \n# Driver code \narr = [10, 3, 5, 6, 20] \nprint(maximum_product(arr)) \n\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef maximum_product(arr) : \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Return the maximum product \n    return arr[-1] * arr[-2] * arr[-3] \n  \n# Driver code "}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t\treturn (test_tup1, test_tup2)\n\n\"\"\"\nWrite a function to convert a given tuple to a string.\n\"\"\"\ndef convert_tuple_to_string(test_tup):\n\t\treturn ''.join(test_tup)\n\n\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef convert_string_to_tuple(test_str):\n\t\treturn tuple(test_str)\n\n\"\"\"\nWrite a function to convert a given list to a tuple.\n\"\"\"\ndef convert_list_to_tuple(test_list):\n\t\treturn tuple(test_list)\n\n\"\"\"\nWrite a function to convert a given tuple to a list.\n\"\"\"\ndef convert_tuple_to_list(test_tup):\n\t\treturn list(test_tup)\n\n\"\"\"\nWrite a function to convert a given list to a set.\n\"\"\"\ndef convert_list_to_set(test_list):\n\t\treturn set(test_list)\n\n\"\"\"\nWrite a function to convert a given set to a list.\n\"\"\"\ndef convert_set_to_list(test_set):\n\t\treturn list(test_set)\n\n\"\"\"\nWrite a function to convert a given set to a tuple.\n\"\"\"\ndef convert_set_to_tuple(test_set):\n\t\treturn tuple(test_set)\n\n\"\"\"\nWrite a function to convert a given tuple to a set.\n\"\"\"\ndef convert_tuple_to_set(test_tup):\n\t\treturn set(test_tup)\n\n\"\"\"\nWrite a function to convert a given list to a frozenset.\n\"\"\"\ndef convert_list_to_frozenset(test_list):\n\t\treturn frozenset(test_list)\n\n\"\"\"\nWrite a function to convert a given frozenset to a list.\n\"\"\"\ndef convert_frozenset_to_list(test_frozenset):\n\t\treturn list(test_frozenset)\n\n\"\"\"\nWrite a function to convert a given list to a dictionary.\n\"\"\"\ndef convert_list_to_dictionary(test_list):\n\t\treturn dict(test_list)\n\n\"\"\"\nWrite a function to convert a given dictionary to a list.\n\"\"\"\ndef convert_dictionary_to_list(test_dict):\n\t\treturn list(test_dict"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t\treturn s[d:]+s[:d]\n\nprint(left_rotate(\"abcdef\",2))\n<file_sep>/python/string/string_reverse.py\n\"\"\"\nWrite a python function to reverse a string.\n\"\"\"\ndef reverse(s):\n\treturn s[::-1]\n\nprint(reverse(\"abcdef\"))\n<file_sep>/python/string/string_palindrome.py\n\"\"\"\nWrite a python function to check if a string is palindrome.\n\"\"\"\ndef palindrome(s):\n\treturn s == s[::-1]\n\nprint(palindrome(\"abcdef\"))\nprint(palindrome(\"abcba\"))\n<file_sep>/python/string/string_remove_duplicate.py\n\"\"\"\nWrite a python function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate(s):\n\treturn \"\".join(set(s))\n\nprint(remove_duplicate(\"abcdef\"))\n<file_sep>/python/string/string_remove_space.py\n\"\"\"\nWrite a python function to remove spaces from a string.\n\"\"\"\ndef remove_space(s):\n\treturn s.replace(\" \",\"\")\n\nprint(remove_space(\"a b c d\"))\n<file_sep>/python/string/string_remove_vowels.py\n\"\"\"\nWrite a python function to remove vowels from a string.\n\"\"\"\ndef remove_vowels(s):\n\treturn \"\".join([c for c in s if c not in \"aeiou\"])\n\nprint(remove_vowels(\"abcdef\"))\n<file_sep>/python/string/string_remove_duplicate_char.py\n\"\"\"\nWrite a python function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(s):\n\treturn \"\".join(set(s))\n\nprint(remove_duplicate_char(\"abcdef\"))\n<file_sep>/python/string/string_remove_duplicate_char_2.py\n\"\"\"\nWrite a python function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(s):\n\treturn \"\".join(set(s))\n\nprint(remove_duplicate_char(\"abcdef\"))\n<file_sep>/python/string/string_remove_duplicate_char_3.py\n\"\"\"\nWrite a python function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(s):\n\treturn \"\"."}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t\n    for i in range(len(A)-2, -1, -1): \n        for j in range(i+1): \n            A[i][j] += min(A[i+1][j], A[i+1][j+1]) \n    return A[0][0] \n\nA = [[2], [3,4], [6,5,7], [4,1,8,3]]\nprint(min_sum_path(A))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n           "}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t\treturn s.replace(ch, '', 1).replace(ch, '', 1)\n\ns = \"hello\"\nch = 'l'\nprint(remove_Occ(s,ch))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n\nfor i in range(5,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t\t# sort the rows of M according to the sum of the elements in each row\n\t\t# return the sorted matrix\n\t\treturn sorted(M, key=lambda x: sum(x))\n\n# test\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))\n<file_sep>/python/leetcode/1001-1100/1009.py\n\"\"\"\n1009. Complement of Base 10 Integer\nEasy\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n \n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        \"\"\"\n        Time complexity: O(1)\n        Space complexity: O(1)\n        \"\"\"\n        return N ^ (1 << (N.bit_length() + 1) - 1)\n"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\t\"\"\"\n\t\tCount the most common words in a dictionary.\n\t\t\"\"\"\n\t\t# TODO: Implement me\n\t\tpass\n\nif __name__ == '__main__':\n\twords = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', '"}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t\treturn (1/3)*l*b*h\n\nprint(find_Volume(2,3,4))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to find the area of a triangle.\n\"\"\"\ndef find_Area(b,h) : \n\t\treturn (1/2)*b*h\n\nprint(find_Area(2,3))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to find the area of a circle.\n\"\"\"\ndef find_Area(r) : \n\t\treturn 3.14*r*r\n\nprint(find_Area(2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to find the area of a rectangle.\n\"\"\"\ndef find_Area(l,b) : \n\t\treturn l*b\n\nprint(find_Area(2,3))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to find the area of a square.\n\"\"\"\ndef find_Area(l) : \n\t\treturn l*l\n\nprint(find_Area(2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python program to find the area of a trapezium.\n\"\"\"\ndef find_Area(b1,b2,h) : \n\t\treturn (1/2)*(b1+b2)*h\n\nprint(find_Area(2,3,4))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a python program to find the area of a parallelogram.\n\"\"\"\ndef find_Area(b,h) : \n\t\treturn b*h\n\nprint(find_Area(2,3))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a python program to find the area of a rhombus.\n\"\"\""}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\treturn [word for word in text.split() if word.islower()]\n\nprint(split_lowerstring(\"Hello world!\"))\nprint(split_lowerstring(\"Hello World!\"))\nprint(split_lowerstring(\"HELLO WORLD!\"))\nprint(split_lowerstring(\"12345\"))\nprint(split_lowerstring(\"12345abc\"))\nprint(split_lowerstring(\"12345ABC\"))\nprint(split_lowerstring(\"12345abcABC\"))\nprint(split_lowerstring(\"12345abcABC12345\"))\nprint(split_lowerstring(\"12345abcABC12345abc\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abc\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345abc\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345abcABC\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345abcABC12345\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345abcABC12345abc\"))\nprint(split_lowerstring(\"12345abcABC12345abcABC12345abcABC12345abcABC12345abcABC\"))\nprint(split_lower"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t\treturn re.findall(r'[a-z]+_[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a dash.\n\"\"\"\ndef text_lowercase_dash(text):\n\t\treturn re.findall(r'[a-z]+-[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space.\n\"\"\"\ndef text_lowercase_space(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space or a dash.\n\"\"\"\ndef text_lowercase_space_or_dash(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+|[a-z]+-[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space or a dash or an underscore.\n\"\"\"\ndef text_lowercase_space_or_dash_or_underscore(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+|[a-z]+-[a-z]+|[a-z]+_[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space, a dash or an underscore.\n\"\"\"\ndef text_lowercase_space_dash_or_underscore(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+|[a-z]+-[a-z]+|[a-z]+_[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space, a dash or an underscore.\n\"\"\"\ndef text_lowercase_space_dash_or_underscore(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+|[a-z]+-[a-z]+|[a-z]+_[a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with a space, a dash or an underscore.\n\"\"\"\ndef text_lowercase_space_dash_or_underscore(text):\n\t\treturn re.findall(r'[a-z]+ [a-z]+|[a-z]+-[a-z]+|["}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t\treturn 4*a\n\nprint(square_perimeter(5))\n<file_sep>/python/python_basics/python_basics_001.py\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\t\treturn a*a\n\nprint(square_area(5))\n<file_sep>/python/python_basics/python_basics_003.py\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a,b):\n\t\treturn 2*(a+b)\n\nprint(rectangle_perimeter(5,6))\n<file_sep>/python/python_basics/python_basics_002.py\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a,b):\n\t\treturn a*b\n\nprint(rectangle_area(5,6))\n<file_sep>/python/python_basics/python_basics_004.py\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\t\treturn a+b+c\n\nprint(triangle_perimeter(5,6,7))\n<file_sep>/python/python_basics/python_basics_005.py\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\t\ts = (a+b+c)/2\n\t\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(5,6,7))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport { createStore, applyMiddleware } from'redux';\nimport ReduxThunk from'redux-thunk';\nimport reducers from '../reducers';\nimport { Router, Scene } from'react-native-router-flux';\nimport LoginForm from './LoginForm';\nimport EmployeeList from './EmployeeList';\nimport EmployeeCreate from './EmployeeCreate';\nimport EmployeeEdit from './EmployeeEdit';\n\nconst createStoreWithMiddleware"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t\treturn \"\".join([char for char in string if char not in second_string])\n\nprint(remove_dirty_chars(\"Hello World\", \"llo\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t\tif len(arraynums) == len(set(arraynums)):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10]))\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,10]))\n<file_sep>/python/leetcode/easy/136.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\"\"\"\ndef singleNumber(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nprint(singleNumber([1,2,3,4,5,6,7,8,9,10,10]))\n<file_sep>/python/leetcode/easy/121.py\n\"\"\"\nSay you have an array for which the ith element is the price of a given stock on day i.\nIf you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\"\"\"\ndef maxProfit(prices):\n\t\"\"\"\n\t:type prices: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(prices) == 0:\n\t\treturn 0\n\tmin_price = prices[0]\n\tmax_profit = 0\n\tfor price in prices:\n\t\tif price < min_price:\n\t\t\tmin_price = price\n\t\telif price - min_price > max_profit:\n\t\t\tmax_profit = price - min_price\n\treturn max_profit\n\nprint(maxProfit([7,1,5,3,6,4]))\n<file_sep>/python/leetcode/easy/169.py\n\"\"\"\nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\n\"\"\"\ndef majorityElement(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sorted(nums)[len(nums)//2]\n\nprint"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\tif x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(is_woodall(10))\nprint(is_woodall(11))\nprint(is_woodall(12))\nprint(is_woodall(13))\nprint(is_woodall(14))\nprint(is_woodall(15))\nprint(is_woodall(16))\nprint(is_woodall(17))\nprint(is_woodall(18))\nprint(is_woodall(19))\nprint(is_woodall(20))\nprint(is_woodall(21))\nprint(is_woodall(22))\nprint(is_woodall(23))\nprint(is_woodall(24))\nprint(is_woodall(25))\nprint(is_woodall(26))\nprint(is_woodall(27))\nprint(is_woodall(28))\nprint(is_woodall(29))\nprint(is_woodall(30))\nprint(is_woodall(31))\nprint(is_woodall(32))\nprint(is_woodall(33))\nprint(is_woodall(34))\nprint(is_woodall(35))\nprint(is_woodall(36))\nprint(is_woodall(37))\nprint(is_woodall(38))\nprint(is_woodall(39))\nprint(is_woodall(40))\nprint(is_woodall(41))\nprint(is_woodall(42))\nprint(is_woodall(43))\nprint(is_woodall(44))\nprint(is_woodall(45))\nprint(is_woodall(46))\nprint(is_woodall(47))\nprint(is_woodall(48))\nprint(is_woodall(49))\nprint(is_wood"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t\treturn [i*n for i in range(1,m+1)]\n\nprint(multiples_of_num(5,3))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_of_list(list):\n\t\treturn sum(list)\n\nprint(sum_of_list([1,2,3,4,5]))\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min_list(list):\n\t\treturn max(list),min(list)\n\nprint(max_min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\t# 1. use a set to store the unique elements\n\t\t# 2. if the element is already in the set, return it\n\t\t# 3. otherwise, add it to the set\n\t\tunique_set = set()\n\t\tfor num in nums:\n\t\t\tif num in unique_set:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tunique_set.add(num)\n\t\treturn -1\n\ndef find_first_duplicate_2(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\t# 1. use a set to store the unique elements\n\t\t# 2. if the element is already in the set, return it\n\t\t# 3. otherwise, add it to the set\n\t\tunique_set = set()\n\t\tfor num in nums:\n\t\t\tif num in unique_set:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tunique_set.add(num)\n\t\treturn -1\n\ndef find_first_duplicate_3(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\t# 1. use a set to store the unique elements\n\t\t# 2. if the element is already in the set, return it\n\t\t# 3. otherwise, add it to the set\n\t\tunique_set = set()\n\t\tfor num in nums:\n\t\t\tif num in unique_set:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tunique_set.add(num)\n\t\treturn -1\n\ndef find_first_duplicate_4(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\t# 1. use a set to store the unique elements\n\t\t# 2. if the element is already in the set, return it\n\t\t# 3. otherwise, add it to the set\n\t\tunique_set = set()\n\t\tfor num in nums:\n\t\t\tif num in unique_set:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tunique_set.add(num)\n\t\treturn -1\n\ndef find_first_duplicate_5(nums):\n\t\t\"\"\"\n\t\t:type nums:"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t\tmax_sum = 0\n\t\tfor i in range(len(list1)): \n\t\t\tfor j in range(len(list1[i])): \n\t\t\t\tmax_sum += list1[i][j] \n\t\treturn max_sum\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(maximum_Sum(list1)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(factorial(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers.\n\"\"\"\n\ndef sum_of_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(sum_of_n_numbers(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using recursion.\n\"\"\"\n\ndef sum_of_n_numbers(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_of_n_numbers(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(sum_of_n_numbers(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using while loop.\n\"\"\"\n\ndef sum_of_n_numbers(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(sum_of_n_numbers(n))\n<file_sep>/Python/Python_Assignment"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t\n    decimal, i, n = 0, 0, 0\n    while(binary!= 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal\n\nprint(binary_to_decimal(1010))\nprint(binary_to_decimal(1011))\nprint(binary_to_decimal(1100))\nprint(binary_to_decimal(1001))\nprint(binary_to_decimal(1000))\nprint(binary_to_decimal(1111))\nprint(binary_to_decimal(10101010))\nprint(binary_to_decimal(11111111))\nprint(binary_to_decimal(10000000))\nprint(binary_to_decimal(1111111111111111))\nprint(binary_to_decimal(1000000000000000))\nprint(binary_to_decimal(11111111111111111111111111111111))\nprint(binary_to_decimal(10000000000000000000000000000000))\nprint(binary_to_decimal(1111111111111111111111111111111111111111111111111111111111111111))\nprint(binary_to_decimal(1000000000000000000000000000000000000000000000000000000000000000))\nprint(binary_to_decimal(111111111111111111111"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t\tprod = 1\n\t\tfor i in range(0,n): \n\t\t\tprod = prod * arr[i] \n\t\tfor i in range(0,n): \n\t\t\tprod = prod // arr[i] \n\t\treturn prod \narr = [10, 3, 5, 6, 2] \nn = len(arr) \nprint(\"Product is\", find_Product(arr, n)) \n<file_sep>/Python/Array/Find_the_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing(arr, n): \n\tsum_of_n = (n * (n + 1)) // 2\n\tsum_of_arr = sum(arr) \n\treturn sum_of_n - sum_of_arr \narr = [1, 2, 4, 5, 6] \nn = len(arr) \nprint(find_missing(arr, n)) \n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate(arr, n): \n\tfor i in range(n): \n\t\tif arr[abs(arr[i])] >= 0: \n\t\t\tarr[abs(arr[i])] = -arr[abs(arr[i])] \n\t\telse: \n\t\t\treturn abs(arr[i]) \narr = [1, 2, 3, 1, 3, 6, 6] \nn = len(arr) \nprint(\"The first repeated number is\", find_duplicate(arr, n)) \n<file_sep>/Python/Array/Find_the_union_and_intersection_of_two_sorted_arrays.py\n\"\"\"\nGiven two sorted arrays arr1[] and arr2[] of sizes N and M in non-decreasing order. Find the intersection of two sorted arrays.\n\"\"\"\ndef find_union(arr1, arr2, m, n): \n\ti = 0\n\tj = 0\n\twhile i < m and j < n: \n\t\tif arr1[i] < arr2[j]: \n\t\t\t"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i])!= K:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif len(test_list[i"}
{"ID": 390, "source": "MBPP:27", "prompt": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t", "predict": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t\n    # traverse in the list \n    for x in list: \n        # remove all digits from list \n        x = \"\".join(x.split()) \n  \n    return list \n  \n# Driver code \nlist = [\"geeks1geeks2\", \"geeks3\"] \nprint(remove(list)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t\tC = [[0 for x in range(k+1)] for x in range(n+1)] \n\t\tfor i in range(n+1): \n\t\t\tfor j in range(min(i, k)+1): \n\t\t\t\tif j == 0 or j == i: \n\t\t\t\t\tC[i][j] = 1\n\t\t\t\telse: \n\t\t\t\t\tC[i][j] = C[i-1][j-1] + C[i-1][j] \n\t\treturn C[n][k] \n\nn = 4\nk = 2\nprint(binomial_Coeff(n,k))\n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(arr)\n<file_sep>/Python/Algorithms/Sorting/SelectionSort.py\n\"\"\"\nSelection Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef selectionSort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nselectionSort(arr)\nprint(arr)\n<file_sep>/Python/Algorithms/Sorting/InsertionSort.py\n\"\"\"\nInsertion Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\n\"\"\"\n\ndef insertionSort(arr):\n    n"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t\tres = 0\n\t\tfor i in range(0, arr_size):\n\t\t\tres = res ^ arr[i]\n\t\treturn res\n\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nprint(get_Odd_Occurrence(arr, arr_size))\n<file_sep>/Python/Array/Find_Missing_Number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef get_Missing_Number(arr,arr_size):\n\tn = len(arr)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_arr = sum(arr)\n\treturn total - sum_of_arr\n\narr = [1, 2, 4, 5, 6]\narr_size = len(arr)\nmiss = get_Missing_Number(arr,arr_size)\nprint(miss)\n<file_sep>/Python/Array/Find_Duplicate_Number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef get_Duplicate_Number(arr,arr_size):\n\tfor i in range(0,arr_size):\n\t\tif arr[abs(arr[i])-1] < 0:\n\t\t\treturn abs(arr[i])\n\t\telse:\n\t\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [1, 2, 3, 1, 3, 6, 6]\narr_size = len(arr)\nprint(get_Duplicate_Number(arr,arr_size))\n<file_sep>/Python/Array/Find_Missing_Number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef get_Missing_Number(arr,arr_size):\n\tn = len(arr)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_arr = sum(arr)\n\treturn"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tn = len(s) \n\t\tres = 0\n\t\tfor i in range(n): \n\t\t\tfor j in range(i, n): \n\t\t\t\tif (s[i] == s[j]): \n\t\t\t\t\tres += 1\n\t\treturn res \n\ns = \"abc\"\nprint(count_Substring_With_Equal_Ends(s))\n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\"\"\"\ndef binary_search(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, l, mid-1, x) \n        else: \n            return binary_search(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\"\"\"\ndef linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = linear_search(arr, x) \nif result!= -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Jump_Search.py\n\"\"\"\nJump Search\n\"\"\"\ndef jump_search(arr, x, n): \n    step = int(math.sqrt(n)) \n    prev = 0\n    while arr[min(step, n)-1] < x: \n        prev = step \n        step += int(math.sqrt(n)) \n        if prev >= n: \n            return -1\n    while arr[prev] < x: \n       "}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t\nif __name__ == \"__main__\":\n\tnums = [1, 1, 1, 2, 2, 3]\n\tk = 2\n\tprint(func(nums, k))<file_sep>/leetcode/1001-1100/1009. Complement of Base 10 Integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n \n\nNote:\n\n0 <= N < 10^9\n\"\"\"\nclass Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        if N == 0:\n            return 1\n        return (1 << (len(bin(N)) - 2)) - N<file_sep>/leetcode/1001-1100/1002. Find Common Characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example"}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t\n    # Initialize the maximum prime factor \n    # variable with the lowest one \n    maxPrime = -1\n  \n    # Print the number of 2s that divide n \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1\t # equivalent to n /= 2 \n  \n    # n must be odd at this point,  \n    # thus skip the even numbers and  \n    # iterate only for odd integers \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i== 0: \n            maxPrime = i \n            n = n / i \n  \n    # This condition is to handle the  \n    # case when n is a prime number  \n    # greater than 2 \n    if n > 2: \n        maxPrime = n \n    return maxPrime\n\nprint(max_Prime_Factors(100))\nprint(max_Prime_Factors(1000))\nprint(max_Prime_Factors(10000))\nprint(max_Prime_Factors(100000))\nprint(max_Prime_Factors(1000000))\nprint(max_Prime_Factors(10000000))\nprint(max_Prime_Factors(100000000))\nprint(max_Prime_Factors(1000000000))\nprint(max_Prime_Factors(10000000000))\nprint(max_Prime_Factors(100000000000))\nprint(max_Prime_Factors(1000000000000))\nprint(max_Prime_Factors(10000000000000))\nprint(max_Prime_Factors(100000000000000))\nprint(max_Prime_Factors(1000000000000000))\nprint(max_Prime_Factors(10000000000000000))\nprint(max_Prime_Factors(100000000000000000))\nprint(max_Prime_Factors(1000000"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t\tif N > 1: \n\t\t\tdecimal_To_Binary(N // 2) \n\t\tprint(N % 2, end = '') \n\ndecimal_To_Binary(10) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# Your code here \n\t\tfor i in range(N): \n\t\t\tif ar[i]!= i: \n\t\t\t\treturn i \n\t\treturn N \n\n# Driver code \nar = [0, 1, 2, 3, 4, 6, 7, 8, 9] \nN = len(ar) \nprint(find_missing(ar, N)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# Your code here \n\t\tfor i in range(N): \n\t\t\tif ar[i]!= i: \n\t\t\t\treturn i \n\t\treturn N \n\n# Driver code \nar = [0, 1, 2, 3, 4, 6, 7, 8, 9] \nN = len(ar) \nprint(find_missing(ar, N)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# Your code here \n\t\tfor i in range(N): \n\t\t\tif ar[i]!= i: \n\t\t\t\treturn i \n\t\treturn N \n\n# Driver code \nar = [0, 1, 2, 3, 4, 6, 7, 8, 9] \nN = len(ar) \nprint(find_missing(ar, N)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# Your code here \n\t\tfor i in range(N): \n\t\t\tif ar[i]!= i: \n\t\t\t\treturn i \n\t\treturn N \n\n# Driver code \nar = [0, 1, 2, 3, 4, 6, 7, 8, 9] \nN = len(ar) \nprint(find_missing(ar,"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th triangular number.\n\"\"\"\ndef find_tri_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th pentagonal number.\n\"\"\"\ndef find_pent_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th hexagonal number.\n\"\"\"\ndef find_hex_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th heptagonal number.\n\"\"\"\ndef find_hept_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th octagonal number.\n\"\"\"\ndef find_oct_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th nonagonal number.\n\"\"\"\ndef find_non_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th decagonal number.\n\"\"\"\ndef find_dec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th undecagonal number.\n\"\"\"\ndef find_undec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th duodecagonal number.\n\"\"\"\ndef find_duodec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th tridecagonal number.\n\"\"\"\ndef find_tridec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th tetradecagonal number.\n\"\"\"\ndef find_tetradec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th pentadecagonal number.\n\"\"\"\ndef find_pentadec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th hexadecagonal number.\n\"\"\"\ndef find_hexadec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th heptadecagonal number.\n\"\"\"\ndef find_heptadec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th octadecagonal number.\n\"\"\"\ndef find_octadec_num(n):\n\t\n\n\n\"\"\"\nWrite a function to find the n-th non"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\t# Finding the value of p/q  \n\t\tvalue = p/q  \n\t\t# Finding the value of p/q in string  \n\t\tvalue = str(value)  \n\t\t# Finding the length of the string  \n\t\tlength = len(value)  \n\t\t# Finding the index of the decimal point  \n\t\tindex = value.index('.')  \n\t\t# Finding the index of the Nth digit  \n\t\tindex = index + N  \n\t\t# Finding the Nth digit  \n\t\tdigit = value[index]  \n\t\t# Printing the Nth digit  \n\t\tprint(digit)  \n# Driver Code  \np = 1  \nq = 2  \nN = 3  \nfind_Nth_Digit(p,q,N)  \n# This code is contributed by <NAME>  <file_sep>/Python/Algorithms/Searching/Binary Search/Binary Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binarySearch(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\t\"\"\"\n\t\tSorts a given mixed list of integers and strings.\n\t\t\"\"\"\n\t\tmixed_list.sort()\n\t\treturn mixed_list\n\n\"\"\"\nWrite a function to find the second largest number in a given list of integers.\n\"\"\"\ndef second_largest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second largest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn list_of_integers[-2]\n\n\"\"\"\nWrite a function to find the second smallest number in a given list of integers.\n\"\"\"\ndef second_smallest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second smallest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn list_of_integers[1]\n\n\"\"\"\nWrite a function to find the second largest number in a given list of integers.\n\"\"\"\ndef second_largest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second largest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn list_of_integers[-2]\n\n\"\"\"\nWrite a function to find the second smallest number in a given list of integers.\n\"\"\"\ndef second_smallest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second smallest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn list_of_integers[1]\n\n\"\"\"\nWrite a function to find the second largest number in a given list of integers.\n\"\"\"\ndef second_largest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second largest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn list_of_integers[-2]\n\n\"\"\"\nWrite a function to find the second smallest number in a given list of integers.\n\"\"\"\ndef second_smallest_number(list_of_integers):\n\t\t\"\"\"\n\t\tFinds the second smallest number in a given list of integers.\n\t\t\"\"\"\n\t\tlist_of_integers.sort()\n\t\treturn"}
{"ID": 401, "source": "MBPP:38", "prompt": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t\teven_sum = 0\n\t\todd_sum = 0\n\t\tfor i in list1:\n\t\t\tif i%2 == 0:\n\t\t\t\teven_sum += i\n\t\t\telse:\n\t\t\t\todd_sum += i\n\t\treturn even_sum/odd_sum\n\nprint(div_even_odd([1,2,3,4,5,6,7,8,9]))\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# Syntax: [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 0 to 9\neven_numbers = [x for x in range(10) if x%2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 4\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 5\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 6\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 7\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t\tif len(S) % 2 == 1:\n\t\t\treturn False\n\t\telse:\n\t\t\tS = sorted(S)\n\t\t\tfor i in range(len(S)-1):\n\t\t\t\tif S[i] == S[i+1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(rearange_string(\"aabb\"))\nprint(rearange_string(\"aabbcc\"))\nprint(rearange_string(\"aabbccddeef\"))\nprint(rearange_string(\"aabbcd\"))\nprint(rearange_string(\"aabbcddeef\"))\nprint(rearange_string(\"aabbcddeeff\"))\nprint(rearange_string(\"aabbcddeeffg\"))\nprint(rearange_string(\"aabbcddeeffgh\"))\nprint(rearange_string(\"aabbcddeeffghj\"))\nprint(rearange_string(\"aabbcddeeffghjk\"))\nprint(rearange_string(\"aabbcddeeffghjkl\"))\nprint(rearange_string(\"aabbcddeeffghjklm\"))\nprint(rearange_string(\"aabbcddeeffghjklmn\"))\nprint(rearange_string(\"aabbcddeeffghjklmno\"))\nprint(rearange_string(\"aabbcddeeffghjklmnop\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopq\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqr\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrs\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrst\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstu\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuv\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvw\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvwx\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvwxy\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvwxyz\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvwxyza\"))\nprint(rearange_string(\"aabbcddeeffghjklmnopqrstuvwxyzab\"))\nprint(rearange_string(\"aabbcd"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t\tfrom collections import Counter\n\t\treturn Counter(nums)\n\nprint(freq_element([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\n\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\n\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a Python program which accepts the base and height of a triangle and compute the"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t\treturn list(filter(lambda x: x%2==0, nums))\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4,5,6,7,8,9,10]\n\tprint(filter_evennumbers(nums))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern.\n*\n**\n***\n****\n*****\n\"\"\"\n\ndef print_pattern(n):\n\tfor i in range(1,n+1):\n\t\tprint(\"*\"*i)\n\nif __name__ == '__main__':\n\tn = int(input(\"Enter the number of rows: \"))\n\tprint_pattern(n)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n22\n333\n4444\n55555\n\"\"\"\n\ndef print_pattern(n):\n\tfor i in range(1,n+1):\n\t\tprint(str(i)*i)\n\nif __name__ == '__main__':\n\tn = int(input(\"Enter the number of rows: \"))\n\tprint_pattern(n)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\ndef print_pattern(n):\n\tfor i in range(1,n+1):\n\t\tprint(\"\".join(str(j) for j in range(1,i+1)))\n\nif __name__ == '__main__':\n\tn = int(input(\"Enter the number of rows: \"))\n\tprint_pattern(n)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n23\n456\n78910\n\"\"\"\n\ndef print_pattern(n):\n\tfor i in range(1,n+1):\n\t\tprint(\"\".join(str(j) for j in range(i,i+n)))\n\nif __name__ == '__main__':\n\t"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\tsum = 0\n\t\tfor i in range(0, n): \n\t\t\tsum += arr[i] \n\t\treturn sum \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Sum of all elements in given array is\", find_Sum(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'[a-z]+_[a-z]+', text)\n\nprint(text_match(\"hey, how are you?\"))\nprint(text_match(\"one_two_three\"))\nprint(text_match(\"one_two_three_four\"))\nprint(text_match(\"one_two_three_four_five\"))\nprint(text_match(\"one_two_three_four_five_six\"))\nprint(text_match(\"one_two_three_four_five_six_seven\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen_fourteen\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen_fourteen_fifteen\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen_fourteen_fifteen_sixteen\"))\nprint(text_match(\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen_fourteen_fifteen_sixteen_seventeen\"))\nprint(text_match(\"one_two_three"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\tif text.startswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\tif text.endswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word inside a string.\n\"\"\"\ndef text_match_inside(text):\n\t\tif \"match\" in text:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nbut only if it's not followed by another word.\n\"\"\"\ndef text_match_start_not_followed(text):\n\t\tif text.startswith(\"match\") and not text.endswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nbut only if it's not preceded by another word.\n\"\"\"\ndef text_match_end_not_preceded(text):\n\t\tif text.endswith(\"match\") and not text.startswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word inside a string,\nbut only if it's not followed by another word.\n\"\"\"\ndef text_match_inside_not_followed(text):\n\t\tif \"match\" in text and not text.endswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word inside a string,\nbut only if it's not preceded by another word.\n\"\"\"\ndef text_match_inside_not_preceded(text):\n\t\tif \"match\" in text and not text.startswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a word inside a string,\nbut only if it's not followed by or preceded by another word.\n\"\"\"\ndef text_match_inside_not_followed_not_preceded(text):\n\t\tif \"match\" in text and not text.endswith(\"match\") and not text.startswith(\"match\"):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\""}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t\tif len(l) == 1:\n\t\t\treturn l[0]\n\t\telse:\n\t\t\treturn get_gcd([l[0], get_gcd(l[1:])])\n\nprint get_gcd([12, 18, 24, 30])\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n       "}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t\treturn len(data) == len(set(data))\n\nprint(test_distinct([1,2,3,4,5]))\nprint(test_distinct([1,2,3,4,5,1]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_list(data):\n\treturn sum(data)\n\nprint(sum_list([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the maximum number in a list.\n\"\"\"\ndef max_list(data):\n\treturn max(data)\n\nprint(max_list([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the minimum number in a list.\n\"\"\"\ndef min_list(data):\n\treturn min(data)\n\nprint(min_list([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a python function to find the average of all the numbers in a list.\n\"\"\"\ndef avg_list(data):\n\treturn sum(data)/len(data)\n\nprint(avg_list([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_5.py\n\"\"\"\nWrite a python function to find the median of all the numbers in a list.\n\"\"\"\ndef median_list(data):\n\tdata.sort()\n\tif len(data) % 2 == 0:\n\t\treturn (data[len(data)/2] + data[len(data)/2 - 1])/2\n\telse:\n\t\treturn data[len(data)/2]\n\nprint(median_list([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_6.py\n\"\"\"\nWrite a python function to find the mode of all the numbers in a list.\n\"\"\"\ndef mode_list(data):\n\treturn max(set(data), key=data.count)\n"}
{"ID": 410, "source": "MBPP:47", "prompt": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t\tif A==0:\n\t\t\treturn 1\n\t\tif B==0:\n\t\t\treturn 1\n\t\tif A==1:\n\t\t\treturn 1\n\t\tif B==1:\n\t\t\treturn 1\n\t\tif A==2:\n\t\t\treturn 2\n\t\tif B==2:\n\t\t\treturn 2\n\t\tif A==3:\n\t\t\treturn 6\n\t\tif B==3:\n\t\t\treturn 6\n\t\tif A==4:\n\t\t\treturn 4\n\t\tif B==4:\n\t\t\treturn 4\n\t\tif A==5:\n\t\t\treturn 2\n\t\tif B==5:\n\t\t\treturn 2\n\t\tif A==6:\n\t\t\treturn 2\n\t\tif B==6:\n\t\t\treturn 6\n\t\tif A==7:\n\t\t\treturn 2\n\t\tif B==7:\n\t\t\treturn 2\n\t\tif A==8:\n\t\t\treturn 8\n\t\tif B==8:\n\t\t\treturn 8\n\t\tif A==9:\n\t\t\treturn 6\n\t\tif B==9:\n\t\t\treturn 6\n\t\tif A==10:\n\t\t\treturn 0\n\t\tif B==10:\n\t\t\treturn 0\n\t\tif A==11:\n\t\t\treturn 2\n\t\tif B==11:\n\t\t\treturn 2\n\t\tif A==12:\n\t\t\treturn 2\n\t\tif B==12:\n\t\t\treturn 8\n\t\tif A==13:\n\t\t\treturn 6\n\t\tif B==13:\n\t\t\treturn 6\n\t\tif A==14:\n\t\t\treturn 4\n\t\tif B==14:\n\t\t\treturn 4\n\t\tif A==15:\n\t\t\treturn 2\n\t\tif B==15:\n\t\t\treturn 2\n\t\tif A==16:\n\t\t\treturn 8\n\t\tif B==16:\n\t\t\treturn 8\n\t\tif A==17:\n\t\t\treturn 6\n\t\tif B==17:\n\t\t\treturn 6\n\t\tif A==18:\n\t\t\treturn 4\n\t\tif B==18:\n\t\t\treturn 4\n\t\tif A==19:\n\t\t\treturn 2\n\t\tif B==19:\n\t\t\treturn 2\n\t\tif A==20:\n\t\t\treturn 0"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\treturn n | 0x55555555\n\nprint(odd_bit_set_number(10))\n<file_sep>/python/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t\treturn [nums[i][N] for i in range(len(nums))]\n\nnums = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\nprint(specified_element(nums, 2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius ** 2\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t\treturn min(input_list, key=lambda x: len(x))\n\nprint(min_length_list([\"Python\", \"Java\", \"C++\", \"Ruby\"]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t\tif x==y==z:\n\t\t\tprint(\"Equilateral\")\n\t\telse:\n\t\t\tprint(\"Not Equilateral\")\n\ncheck_equilateral(3,3,3)\ncheck_equilateral(3,4,5)\ncheck_equilateral(3,4,6)\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\""}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t\treturn b*h\n\nprint parallelogram_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\t\treturn 0.5*b*h\n\nprint triangle_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\t\treturn 0.5*(b1+b2)*h\n\nprint trapezoid_area(5,6,7)\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn 3.14*r*r\n\nprint circle_area(5)\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t\treturn l*b\n\nprint rectangle_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\t\treturn s*s\n\nprint square_area(5)\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\t\treturn 0.5*d1*d2\n\nprint rhombus_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a kite.\n\"\"\"\ndef kite_area(d1,d2):\n\t\treturn 0.5*d1*d2\n\nprint kite_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a regular polygon.\n\"\"\"\ndef regular_polygon_area(n,s):\n\t\treturn (n*s*s)/(4*tan(pi/n))\n\nprint regular_polygon_area(5,6)\n\n\"\"\"\nWrite a function to calculate area of a regular hexagon.\n\"\"\"\ndef regular_hexagon_area(s):\n\t\treturn 2.598*s*s\n\nprint regular_hexagon_area(5)\n\n\"\"\"\nWrite a function to calculate area of a regular octagon.\n\"\"\"\ndef regular_octagon_"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t\tif str[0] == str[-1]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Equality(\"hello\"))\nprint(check_Equality(\"helloo\"))\nprint(check_Equality(\"helo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"heloo\"))\nprint(check_Equality(\"he"}
{"ID": 417, "source": "MBPP:54", "prompt": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t\t# Find the largest element in the list\n\t\tlargest = max(my_list)\n\n\t\t# Create a list of zeros with length of largest + 1\n\t\tcount_list = [0] * (largest + 1)\n\n\t\t# Count the number of times each number appears in the list\n\t\tfor num in my_list:\n\t\t\tcount_list[num] += 1\n\n\t\t# Create a list with the sorted numbers\n\t\tsorted_list = []\n\n\t\t# Add the number of times it appears to the sorted list\n\t\tfor i in range(len(count_list)):\n\t\t\tsorted_list.extend([i] * count_list[i])\n\n\t\treturn sorted_list\n\nprint(counting_sort([1, 4, 1, 2, 7, 5, 2]))\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\n\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef print_list(self):\n\t\tcurr_node = self.head\n\t\twhile curr_node:\n\t\t\tprint(curr_node.data)\n\t\t\tcurr_node = curr_node.next\n\n\tdef append(self, data):\n\t\tnew_node = Node(data)\n\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\n\t\tlast_node = self.head\n\t\twhile last_node.next:\n\t\t\tlast_node = last_node.next\n\t\tlast_node.next = new_node\n\n\tdef prepend(self, data):\n\t\tnew_node = Node(data)\n\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_after_node(self, prev_node, data):\n\t\tif not prev_node:\n\t\t\tprint(\"Previous node is not in the list\")\n\t\t\treturn\n\n\t\tnew_node = Node(data)\n\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef delete_node(self, key):\n\t\tcurr_node = self."}
{"ID": 418, "source": "MBPP:55", "prompt": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t\treturn a*(r**(n-1))\n\na=int(input(\"Enter the first term of the series: \"))\nn=int(input(\"Enter the value of n: \"))\nr=int(input(\"Enter the value of r: \"))\nprint(\"The nth term of the series is: \",tn_gp(a,n,r))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the triangle\n\"\"\"\ndef triangle(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(\"*\",end=\" \")\n\t\tprint()\n\nn=int(input(\"Enter the number of rows: \"))\ntriangle(n)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_10.py\n\"\"\"\nWrite a program to print the following pattern\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\nn=int(input(\"Enter the number of rows: \"))\npattern(n)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_11.py\n\"\"\"\nWrite a program to print the following pattern\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\tfor i in range(n-1,0,-1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\nn=int(input(\"Enter the number of rows: \"))\npattern(n)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_12.py\n\"\"\"\nWrite a program to print the following pattern\n\"\"\"\ndef pattern(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,i+1):\n\t\t\tprint(j,end=\" \")\n\t\tprint()\n\tfor i in range(n-1,0,-1):\n\t\tfor j in range(1,i+1):\n\t\t"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t\trev = 0\n\t\twhile n > 0:\n\t\t\trev = rev * 10 + n % 10\n\t\t\tn = n // 10\n\t\tif rev == 2 * n - 1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check(121))\nprint(check(123))\nprint(check(122))\nprint(check(1234))\nprint(check(12345))\nprint(check(123456))\nprint(check(1234567))\nprint(check(12345678))\nprint(check(123456789))\nprint(check(1234567890))\nprint(check(12345678901))\nprint(check(123456789012))\nprint(check(1234567890123))\nprint(check(12345678901234))\nprint(check(123456789012345))\nprint(check(1234567890123456))\nprint(check(12345678901234567))\nprint(check(123456789012345678))\nprint(check(1234567890123456789))\nprint(check(12345678901234567890))\nprint(check(123456789012345678901))\nprint(check(1234567890123456789012))\nprint(check(12345678901234567890123))\nprint(check(123456789012345678901234))\nprint"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t\n    # Sort the given array \n    arr.sort(reverse = True) \n  \n    # Create an empty string \n    res = \"\" \n  \n    # Traverse the given array \n    for i in range(n) : \n        res = res + str(arr[i]) \n  \n    return res \n  \n# Driver Code \narr = [3, 30, 34, 5, 9] \nn = len(arr) \nprint(find_Max_Num(arr, n)) \n\n\"\"\"\nWrite a python function to find the smallest number that can be formed with the given digits.\n\"\"\"\ndef find_Min_Num(arr,n) : \n\t\n    # Sort the given array \n    arr.sort() \n  \n    # Create an empty string \n    res = \"\" \n  \n    # Traverse the given array \n    for i in range(n) : \n        res = res + str(arr[i]) \n  \n    return res \n  \n# Driver Code \narr = [3, 30, 34, 5, 9] \nn = len(arr) \nprint(find_Min_Num(arr, n)) \n\n\"\"\"\nWrite a python function to find the smallest number that can be formed with the given digits.\n\"\"\"\ndef find_Min_Num(arr,n) : \n\t\n    # Sort the given array \n    arr.sort() \n  \n    # Create an empty string \n    res = \"\" \n  \n    # Traverse the given array \n    for i in range(n) : \n        res = res + str(arr[i]) \n  \n    return res \n  \n# Driver Code \narr = [3, 30, 34, 5, 9] \nn = len(arr) \nprint(find_Min_Num(arr, n)) \n\n\"\"\"\nWrite a python function to find the smallest number that can be formed with the given digits.\n\"\"\"\ndef find_Min_Num(arr,n) : \n\t\n    # Sort the given array \n    arr.sort() \n  \n    # Create an empty string \n    res = \"\" \n  \n    # Traverse the given array \n    for i in range(n) : \n        res = res + str(arr[i]) \n  \n    return res \n  \n# Driver Code \narr = [3, 30, 34, 5, 9] \nn = len(arr)"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t\treturn (x ^ y) < 0\n\nx = 10\ny = -10\nprint(opposite_Signs(x,y))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_15.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\t\"\"\"\n\t\t>>> is_octagonal(1)\n\t\tTrue\n\t\t>>> is_octagonal(2)\n\t\tTrue\n\t\t>>> is_octagonal(3)\n\t\tFalse\n\t\t>>> is_octagonal(4)\n\t\tTrue\n\t\t>>> is_octagonal(5)\n\t\tFalse\n\t\t>>> is_octagonal(6)\n\t\tTrue\n\t\t>>> is_octagonal(7)\n\t\tFalse\n\t\t>>> is_octagonal(8)\n\t\tTrue\n\t\t>>> is_octagonal(9)\n\t\tFalse\n\t\t>>> is_octagonal(10)\n\t\tTrue\n\t\t>>> is_octagonal(11)\n\t\tFalse\n\t\t>>> is_octagonal(12)\n\t\tTrue\n\t\t>>> is_octagonal(13)\n\t\tFalse\n\t\t>>> is_octagonal(14)\n\t\tTrue\n\t\t>>> is_octagonal(15)\n\t\tFalse\n\t\t>>> is_octagonal(16)\n\t\tTrue\n\t\t>>> is_octagonal(17)\n\t\tFalse\n\t\t>>> is_octagonal(18)\n\t\tTrue\n\t\t>>> is_octagonal(19)\n\t\tFalse\n\t\t>>> is_octagonal(20)\n\t\tTrue\n\t\t>>> is_octagonal(21)\n\t\tFalse\n\t\t>>> is_octagonal(22)\n\t\tTrue\n\t\t>>> is_octagonal(23)\n\t\tFalse\n\t\t>>> is_octagonal(24)\n\t\tTrue\n\t\t>>> is_octagonal(25)\n\t\tFalse\n\t\t>>> is_octagonal(26)\n\t\tTrue\n\t\t>>> is_octagonal(27)\n\t\tFalse\n\t\t>>> is_octagonal(28)\n\t\tTrue\n\t\t>>> is_octagonal(29)\n\t\tFalse\n\t\t>>> is_octagonal(30)\n\t\tTrue\n\t\t>>> is_octagonal(31)\n\t\tFalse\n\t\t>>> is_octagonal(32)\n\t\tTrue\n\t\t>>> is_octagonal(33)\n\t\tFalse\n\t\t>>> is_octagonal(34)\n\t\tTrue\n\t\t>>> is_octagonal("}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\t# Initialize result \n\t\tres = 0\n\t\t# Initialize the first element \n\t\t# of the subsequence \n\t\tprev = arr[0] \n\t\t# Initialize the second element \n\t\t# of the subsequence \n\t\tcurr = arr[1] \n\t\t# Traverse the array \n\t\tfor i in range(2, n): \n\t\t\t# If the difference between \n\t\t\t# current element and previous \n\t\t\t# element is greater than 1 \n\t\t\tif (abs(curr - prev) > 1): \n\t\t\t\t# Update the result \n\t\t\t\tres = max(res, i - 1) \n\t\t\t\t# Update the previous element \n\t\t\t\tprev = arr[i - 1] \n\t\t\t\t# Update the current element \n\t\t\t\tcurr = arr[i] \n\t\t\telse: \n\t\t\t\t# Update the current element \n\t\t\t\tcurr = arr[i] \n\t\t# Update the result \n\t\tres = max(res, i - 1) \n\t\treturn res \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(max_len_sub(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i]"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i,n):\n\t\t\t\tsum = 0\n\t\t\t\tfor k in range(i,j+1):\n\t\t\t\t\tsum += int(s[k])\n\t\t\t\tif sum == j-i+1:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ns = \"12345\"\nn = len(s)\nprint(count_Substrings(s,n))\n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort\n\"\"\"\ndef bubbleSort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0,n-i-1):\n\t\t\tif arr[j] > arr[j+1]:\n\t\t\t\tarr[j],arr[j+1] = arr[j+1],arr[j]\n\treturn arr\n\narr = [64,34,25,12,22,11,90]\nprint(bubbleSort(arr))\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\"\"\"\ndef binarySearch(arr,l,r,x):\n\tif r >= l:\n\t\tmid = l + (r-l)//2\n\t\tif arr[mid] == x:\n\t\t\treturn mid\n\t\telif arr[mid] > x:\n\t\t\treturn binarySearch(arr,l,mid-1,x)\n\t\telse:\n\t\t\treturn binarySearch(arr,mid+1,r,x)\n\telse:\n\t\treturn -1\n\narr = [2,3,4,10,40]\nx = 10\nresult = binarySearch(arr,0,len(arr)-1,x)\nif result!= -1:\n\tprint(\"Element is present at index\",result)\nelse:\n\tprint(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/LinearSearch.py\n\"\"\"\nLinear Search\n\"\"\"\ndef linearSearch(arr,x):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == x:\n\t\t\treturn i\n\treturn -1\n\narr = [2,3,4,10,40]\nx"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\"\"\"\nWrite a python function to find second smallest number in a list.\n\"\"\"\ndef second_smallest_num(xs):\n  return sorted(xs)[1]\n\n\"\"\"\nWrite a python function to find second largest number in a list.\n\"\"\"\ndef second_largest_num(xs):\n  return sorted(xs)[-2]\n\n\"\"\"\nWrite a python function to find the sum of all numbers in a list.\n\"\"\"\ndef sum_of_list(xs):\n  return sum(xs)\n\n\"\"\"\nWrite a python function to find the average of all numbers in a list.\n\"\"\"\ndef average_of_list(xs):\n  return sum(xs)/len(xs)\n\n\"\"\"\nWrite a python function to find the median of all numbers in a list.\n\"\"\"\ndef median_of_list(xs):\n  return sorted(xs)[len(xs)//2]\n\n\"\"\"\nWrite a python function to find the mode of all numbers in a list.\n\"\"\"\ndef mode_of_list(xs):\n  return max(set(xs), key=xs.count)\n\n\"\"\"\nWrite a python function to find the product of all numbers in a list.\n\"\"\"\ndef product_of_list(xs):\n  return reduce(lambda x,y: x*y, xs)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n  return reduce(lambda x,y: x*y, range(1,n+1))\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef fibonacci(n):\n  return reduce(lambda x,y: x+y, range(n))\n\n\"\"\"\nWrite a python function to check whether a number is prime or not.\n\"\"\"\ndef is_prime(n):\n  return all(n%i for i in range(2,n))\n\n\"\"\"\nWrite a python function to check whether a number is perfect or not.\n\"\"\"\ndef is_perfect(n):\n  return sum(i for i in range(1,n) if n%i==0)==n\n\n\"\"\"\nWrite a python function to check whether a number is amstrong or not.\n\"\"\"\ndef is_amstrong(n):\n  return sum(int(i)**3 for i"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t\tmax_diff = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif abs(test_list[i] - test_list[j]) > max_diff:\n\t\t\t\t\tmax_diff = abs(test_list[i] - test_list[j])\n\t\treturn max_diff\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_difference(test_list))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nnums = [2, 2, 1]\nprint(single_number(nums))\n<file_sep>/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\"\"\"\ndef max_depth(root):\n\t\"\"\"\n\t:type root: TreeNode\n\t:rtype: int\n\t\"\"\"\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn max(max_depth(root.left), max_depth(root.right)) + 1\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\"\"\"\ndef is_palindrome(s):\n\t\"\"\"\n\t:type s: str\n\t:rtype: bool\n\t\"\"\"\n\ts = s.lower()\n\ts = ''.join(c for c in s if c.isalnum())\n\treturn s == s[::-1]\n\ns = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(s))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t\treturn subjectmarks[1]\n\ndef sort_marks(marks, subject):\n\treturn sorted(marks, key=lambda x: x[subject])\n\nmarks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\nprint(sort_marks(marks, 'Maths'))\n<file_sep>/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics"}
{"ID": 428, "source": "MBPP:65", "prompt": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t", "predict": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum(data_list[1:])\n\nprint(recursive_list_sum([1,2,3,4,5]))\n<file_sep>/python/python_basic/python_basic_001.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef find_max(data_list):\n\tmax_num = data_list[0]\n\tfor i in data_list:\n\t\tif i > max_num:\n\t\t\tmax_num = i\n\treturn max_num\n\nprint(find_max([1,2,3,4,5]))\n<file_sep>/python/python_basic/python_basic_003.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef find_second_max(data_list):\n\tmax_num = data_list[0]\n\tsecond_max_num = data_list[0]\n\tfor i in data_list:\n\t\tif i > max_num:\n\t\t\tsecond_max_num = max_num\n\t\t\tmax_num = i\n\t\telif i > second_max_num:\n\t\t\tsecond_max_num = i\n\treturn second_max_num\n\nprint(find_second_max([1,2,3,4,5]))\n<file_sep>/python/python_basic/python_basic_002.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef find_min(data_list):\n\tmin_num = data_list[0]\n\tfor i in data_list:\n\t\tif i < min_num:\n\t\t\tmin_num = i\n\treturn min_num\n\nprint(find_min([1,2,3,4,5]))\n<file_sep>/python/python_basic/python_basic_004.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\ndef find_second_min(data_list):\n\tmin"}
{"ID": 429, "source": "MBPP:66", "prompt": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t\tcount = 0\n\t\tfor i in list:\n\t\t\tif i > 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(pos_count([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a,b,c):\n\tif a == b == c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_num(list):\n\treturn min(list)\n\nprint(smallest_num([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_str(list):\n\tcount = 0\n\tfor i in list:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_str(['abc','xyz','aba','1221']))\n<file_sep>/python/python_basics"}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t\tif n < 0:\n\t\t\treturn 0\n\t\tif n == 0:\n\t\t\treturn 1\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 5\n\t\tif n == 4:\n\t\t\treturn 15\n\t\tif n == 5:\n\t\t\treturn 52\n\t\tif n == 6:\n\t\t\treturn 203\n\t\tif n == 7:\n\t\t\treturn 877\n\t\tif n == 8:\n\t\t\treturn 4140\n\t\tif n == 9:\n\t\t\treturn 21147\n\t\tif n == 10:\n\t\t\treturn 115975\n\t\tif n == 11:\n\t\t\treturn 678570\n\t\tif n == 12:\n\t\t\treturn 4213597\n\t\tif n == 13:\n\t\t\treturn 27644437\n\t\tif n == 14:\n\t\t\treturn 190899322\n\t\tif n == 15:\n\t\t\treturn 1382958545\n\t\tif n == 16:\n\t\t\treturn 10480142147\n\t\tif n == 17:\n\t\t\treturn 82864869800\n\t\tif n == 18:\n\t\t\treturn 682076806159\n\t\tif n == 19:\n\t\t\treturn 5832742205057\n\t\tif n == 20:\n\t\t\treturn 51724158235372\n\t\tif n == 21:\n\t\t\treturn 475219572485118\n\t\tif n == 22:\n\t\t\treturn 4507779622658765\n\t\tif n == 23:\n\t\t\treturn 43973681555290762\n\t\tif n == 24:\n\t\t\treturn 4397368"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\treturn (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nA = [1,2,3,4,5,6,7,8,9,10]\nprint(is_Monotonic(A))\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nprint(is_Monotonic(A))\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,3"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t\tfor i in range(len(l)):\n\t\t\t\tif l[i] == s[0]:\n\t\t\t\t\t\tif l[i:i+len(s)] == s:\n\t\t\t\t\t\t\t\treturn True\n\t\treturn False\n\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, "}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t\tif len(Input) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(len(Input)):\n\t\t\t\tif len(Input[i])!= k:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nInput = [(1,2,3), (4,5,6), (7,8,9)]\nk = 3\nprint(get_equal(Input, k))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nr = float(input(\"Enter the radius of the circle: \"))\nprint(\"Area of the circle is: \", math.pi * r * r)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-"}
{"ID": 434, "source": "MBPP:71", "prompt": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using bubble sort.\n\"\"\"\ndef bubble_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using insertion sort.\n\"\"\"\ndef insertion_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using selection sort.\n\"\"\"\ndef selection_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using merge sort.\n\"\"\"\ndef merge_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using quick sort.\n\"\"\"\ndef quick_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using heap sort.\n\"\"\"\ndef heap_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using shell sort.\n\"\"\"\ndef shell_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using counting sort.\n\"\"\"\ndef counting_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using bucket sort.\n\"\"\"\ndef bucket_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using tim sort.\n\"\"\"\ndef tim_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using cocktail sort.\n\"\"\"\ndef cocktail_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using gnome sort.\n\"\"\"\ndef gnome_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using odd-even sort.\n\"\"\"\ndef odd_even_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using cycle sort.\n\"\"\"\ndef cycle_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using bogo sort.\n\"\"\"\ndef bogo_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using shaker sort.\n\"\"\"\ndef shaker_sort(nums):\n\t\n\n\n\"\"\"\nWrite a function to sort a list of elements using stooge sort.\n\"\"\"\n"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t\tfor i in range(0, n+1): \n\t\t\tfor j in range(0, n+1): \n\t\t\t\tif (i*i - j*j == n): \n\t\t\t\t\treturn True\n\t\treturn False\n\nn = 10\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n    print(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i)\n\n#OR\n\nfor i in range(1,6):\n    print(\"*\"*i)\nfor i in range(4,0,-1):\n    print(\"*\"*i"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t\treturn re.split(r'[;,\\s]\\s*', text)\n\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint(multiple_split(\"this,is;a test;of split\"))\nprint"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_2(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_3(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_4(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_5(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_6(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_7(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_8(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_9(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_10(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_11(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ndef is_samepatterns_12(colors, patterns):\n\t\tfor i in range(len(colors)):\n\t\t\tif colors"}
{"ID": 438, "source": "MBPP:75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t\n\n\treturn test_list\n\n# Driver Code\ntest_list = [(1, 2, 3, 4), (10, 20, 40, 80), (9, 3), (10, 20, 30, 40)]\nK = 3\nprint(find_tuples(test_list, K))\n<file_sep>/Python/Python_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs/Python_Practice_Programs"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t\tcount = 0\n\t\tfor i in range(m):\n\t\t\tfor j in range(n):\n\t\t\t\tif i == j:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Squares(4,4))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_n(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_n(10))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python function to find the sum of the first n even numbers.\n\"\"\"\ndef sum_even(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_even(10))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python function to find the sum of the first n odd numbers.\n\"\"\"\ndef sum_odd(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tif i%2!= 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_odd(10))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_prime(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(sum_prime(10))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python"}
{"ID": 440, "source": "MBPP:77", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t\tsum_even = 0\n\t\tsum_odd = 0\n\t\twhile n > 0: \n\t\t\trem = n % 10\n\t\t\tif rem % 2 == 0: \n\t\t\t\tsum_even += rem \n\t\t\telse: \n\t\t\t\tsum_odd += rem \n\t\t\tn //= 10\n\t\treturn sum_even - sum_odd\n\nn = int(input(\"Enter a number: \"))\nprint(is_Diff(n))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t\tcount = 0\n\t\tfor i in range(1, n + 1): \n\t\t\tcount += (i & 1) \n\t\treturn count \n\nn = 10\nprint(count_With_Odd_SetBits(n))\n<file_sep>/Python/Array/Find_Missing_Number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) // 2\n\tfor num in arr:\n\t\ttotal -= num\n\treturn total\n\narr = [1, 2, 4, 6, 3, 7, 8]\nprint(find_Missing_Number(arr))\n<file_sep>/Python/Array/Find_Missing_Number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) // 2\n\tfor num in arr:\n\t\ttotal -= num\n\treturn total\n\narr = [1, 2, 4, 6, 3, 7, 8]\nprint(find_Missing_Number(arr))\n\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_Missing_Number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) // 2\n\tfor num in arr:\n\t\ttotal -= num\n\treturn total\n\narr = [1, 2, 4, 6, 3, 7, 8]\nprint(find_Missing_Number(arr))\n<file_sep>/Python/Array/Find_Missing_Number_3.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s)%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(word_len(\"Hello\"))\nprint(word_len(\"Hi\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Java\"))\n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python function to check whether the given number is prime or not.\n\"\"\"\ndef prime(n):\n\tif n>1:\n\t\tfor i in range(2,n):\n\t\t\tif n%i==0:\n\t\t\t\treturn \"Not Prime\"\n\t\telse:\n\t\t\treturn \"Prime\"\n\telse:\n\t\treturn \"Not Prime\"\n\nprint(prime(11))\nprint(prime(12))\nprint(prime(13))\nprint(prime(14))\n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python function to check whether the given number is even or not.\n\"\"\"\ndef even(n):\n\tif n%2==0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\nprint(even(11))\nprint(even(12))\nprint(even(13))\nprint(even(14))\n<file_sep>/Python/Python_Assignment_1/Q11.py\n\"\"\"\nWrite a python function to check whether the given number is perfect or not.\n\"\"\"\ndef perfect(n):\n\tsum=0\n\tfor i in range(1,n):\n\t\tif n%i==0:\n\t\t\tsum=sum+i\n\tif sum==n:\n\t\treturn \"Perfect\"\n\telse:\n\t\treturn \"Not Perfect\"\n\nprint(perfect(6))\nprint(perfect(12))\nprint(perfect(13))\nprint(perfect(14))\n<file_sep>/Python/Python_Assignment_1/Q12.py\n\"\"\"\nWrite a python function to check whether the given number is amstrong or not.\n\"\"\"\ndef amstrong(n):\n\tsum=0\n\ttemp=n\n\twhile temp>0:\n\t\tdigit=temp%10\n\t\tsum=sum+digit**3\n\t\ttemp=temp//10\n\t"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\treturn (n * (n + 1) * (n + 2)) / 6\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_number(n): \n\t\treturn (n * (3 * n - 1)) / 2\n\n\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_number(n): \n\t\treturn n * (2 * n - 1)\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_number(n): \n\t\treturn n * (5 * n - 3) / 2\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_number(n): \n\t\treturn n * (3 * n - 2)\n\n\"\"\"\nWrite a function to find the nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n): \n\t\treturn n * n\n\n\"\"\"\nWrite a function to find the nth centered pentagonal number.\n\"\"\"\ndef centered_pentagonal_number(n): \n\t\treturn n * (3 * n - 1)\n\n\"\"\"\nWrite a function to find the nth centered heptagonal number.\n\"\"\"\ndef centered_heptagonal_number(n): \n\t\treturn n * (2 * n - 1)\n\n\"\"\"\nWrite a function to find the nth centered octagonal number.\n\"\"\"\ndef centered_octagonal_number(n): \n\t\treturn n * (5 * n - 3) / 2\n\n\"\"\"\nWrite a function to find the nth square pyramidal number.\n\"\"\"\ndef square_pyramidal_number(n): \n\t\treturn n * (n + 1) * (2 * n + 1) / 6\n\n\"\"\"\nWrite a function to find the nth triangular number.\n\"\"\"\ndef triangular_number(n): \n\t\treturn n * (n + 1) / 2\n\n\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\treturn (n * (n + 1) * (n + 2)) /"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t\treturn zip(test_tup1, test_tup2)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(test_list):\n\t\treturn max(test_list, key=len)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(test_list):\n\t\treturn os.path.commonprefix(test_list)\n\n\"\"\"\nWrite a function to find the longest common prefix"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r**2\n\nprint(area_circle(2))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\nprint(circumference_circle(2))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\t\treturn 0.5*b*h\n\nprint(area_triangle(2,3))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\t\treturn l*w\n\nprint(area_rectangle(2,3))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(s):\n\t\treturn s**2\n\nprint(area_square(2))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b1,b2,h):\n\t\treturn 0.5*(b1+b2)*h\n\nprint(area_trapezoid(2,3,4))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\t\treturn b*h\n\nprint(area_parallelogram(2,3))\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,n):\n\t\treturn (n*s**2)/(4*tan(pi/n))\n\nprint(area_pentagon(2,5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,n):\n\t\treturn (n*s**2)/(4*tan(pi/n))\n\nprint(area_hexagon(2,6))\n\n\"\"\"\nWrite a function to find the area"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t\treturn ''.join(set(strr))\n\nprint(get_Char(\"abc\"))\nprint(get_Char(\"abcabc\"))\nprint(get_Char(\"abcabcabc\"))\nprint(get_Char(\"abcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(get_Char(\"abcabc"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn = 10\nprint(sequence(n)) \n\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn = 10\nprint(sequence(n)) \n\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn = 10\nprint(sequence(n)) \n\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn = 10\nprint(sequence(n)) \n\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn = 10\nprint(sequence(n)) \n\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\treturn sequence(n - 1) + sequence(n - 2) \n\n# Driver code \nn ="}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn (4/3)*math.pi*r**3\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*math.pi*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn math.pi*r**2\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*math.pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the circumference of a cylinder.\n\"\"\"\ndef circumference_cylinder(r,h):\n\t\treturn 2*math.pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r,h):\n\t\treturn 2*math.pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn (1/3)*math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the circumference of a cone.\n\"\"\"\ndef circumference_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\treturn n * (2 * n - 1)\n\n\"\"\"\nWrite a function to find nth centered pentagonal number.\n\"\"\"\ndef centered_pentagonal_number(n):\n\t\treturn n * (3 * n - 2)\n\n\"\"\"\nWrite a function to find nth centered triangular number.\n\"\"\"\ndef centered_triangular_number(n):\n\t\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a function to find nth centered square number.\n\"\"\"\ndef centered_square_number(n):\n\t\treturn n * n\n\n\"\"\"\nWrite a function to find nth centered octagonal number.\n\"\"\"\ndef centered_octagonal_number(n):\n\t\treturn n * (3 * n - 1)\n\n\"\"\"\nWrite a function to find nth centered heptagonal number.\n\"\"\"\ndef centered_heptagonal_number(n):\n\t\treturn n * (5 * n - 3)\n\n\"\"\"\nWrite a function to find nth centered nonagonal number.\n\"\"\"\ndef centered_nonagonal_number(n):\n\t\treturn n * (7 * n - 4)\n\n\"\"\"\nWrite a function to find nth centered decagonal number.\n\"\"\"\ndef centered_decagonal_number(n):\n\t\treturn n * (11 * n - 6)\n\n\"\"\"\nWrite a function to find nth centered dodecagonal number.\n\"\"\"\ndef centered_dodecagonal_number(n):\n\t\treturn n * (13 * n - 7)\n\n\"\"\"\nWrite a function to find nth centered tridecagonal number.\n\"\"\"\ndef centered_tridecagonal_number(n):\n\t\treturn n * (15 * n - 9)\n\n\"\"\"\nWrite a function to find nth centered tetradecagonal number.\n\"\"\"\ndef centered_tetradecagonal_number(n):\n\t\treturn n * (17 * n - 10)\n\n\"\"\"\nWrite a function to find nth centered pentadecagonal number.\n\"\"\"\ndef centered_pentadecagonal_number(n):\n\t\treturn n * (19 * n - 11)\n\n\"\"\"\nWrite a function to find nth centered hexadec"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t\treturn {**dict1, **dict2, **dict3}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_four(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_five(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_six(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_seven(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_eight(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_nine(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_ten(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_eleven(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_twelve(dict1,dict2, dict3):\n\t\treturn dict(dict1, **dict2, **dict3)\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries"}
{"ID": 451, "source": "MBPP:88", "prompt": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t", "predict": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t\tfreq = {}\n\t\tfor item in list1:\n\t\t\tif (item in freq):\n\t\t\t\tfreq[item] += 1\n\t\t\telse:\n\t\t\t\tfreq[item] = 1\n\t\treturn freq\n\nprint(freq_count([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\t\"\"\"\n\t\t:type N: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif N == 0:\n\t\t\treturn 0\n\t\tif N == 1:\n\t\t\treturn 0\n\t\tif N == 2:\n\t\t\treturn 1\n\t\tif N == 3:\n\t\t\treturn 2\n\t\tif N == 4:\n\t\t\treturn 2\n\t\tif N == 5:\n\t\t\treturn 4\n\t\tif N == 6:\n\t\t\treturn 4\n\t\tif N == 7:\n\t\t\treturn 6\n\t\tif N == 8:\n\t\t\treturn 6\n\t\tif N == 9:\n\t\t\treturn 8\n\t\tif N == 10:\n\t\t\treturn 8\n\t\tif N == 11:\n\t\t\treturn 10\n\t\tif N == 12:\n\t\t\treturn 10\n\t\tif N == 13:\n\t\t\treturn 12\n\t\tif N == 14:\n\t\t\treturn 12\n\t\tif N == 15:\n\t\t\treturn 14\n\t\tif N == 16:\n\t\t\treturn 14\n\t\tif N == 17:\n\t\t\treturn 16\n\t\tif N == 18:\n\t\t\treturn 16\n\t\tif N == 19:\n\t\t\treturn 18\n\t\tif N == 20:\n\t\t\treturn 18\n\t\tif N == 21:\n\t\t\treturn 20\n\t\tif N == 22:\n\t\t\treturn 20\n\t\tif N == 23:\n\t\t\treturn 22\n\t\tif N == 24:\n\t\t\treturn 22\n\t\tif N == 25:\n\t\t\treturn 24\n\t\tif N == 26:\n\t\t\treturn 24\n\t\tif N == 27:\n\t\t\treturn 26\n\t\tif N == 28:\n\t\t\treturn 26\n\t\tif N == 29:\n\t\t\treturn 28\n\t\tif N == 30:\n\t\t\treturn 28\n\t\tif N == 31:\n\t\t\treturn 30\n\t\tif N == 32:\n\t\t\treturn 30\n\t\tif N == 33:\n\t\t\treturn 32\n\t\tif N =="}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = 0\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = 0\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = 0\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\tmax_len = 0\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(len_log(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i:i+len(sub_str)] == sub_str:\n\t\t\t\treturn True\n\t\treturn False\n\nstr1 = \"This is a test string\"\nsub_str = \"test\"\nprint(find_substring(str1, sub_str))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t\tn = str(n) \n\t\tfor i in range(0, len(n) - 1, 2): \n\t\t\tif n[i] == n[i + 1]: \n\t\t\t\treturn False\n\t\treturn True\n\nprint(is_undulating(1234))\nprint(is_undulating(12345))\nprint(is_undulating(123456))\nprint(is_undulating(1234567))\nprint(is_undulating(12345678))\nprint(is_undulating(123456789))\nprint(is_undulating(1234567890))\nprint(is_undulating(12345678901))\nprint(is_undulating(123456789012))\nprint(is_undulating(1234567890123))\nprint(is_undulating(12345678901234))\nprint(is_undulating(123456789012345))\nprint(is_undulating(1234567890123456))\nprint(is_undulating(12345678901234567))\nprint(is_undulating(123456789012345678))\nprint(is_undulating(1234567890123456789))\nprint(is_undulating(12345678901234567890))\nprint(is_undulating(123456789012345678901))\nprint(is_undulating(1234567890123456789012))\nprint(is_undulating(12345678901234567890123))\nprint(is_undulating(123"}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t\tif b==0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn a*power(a,b-1)\n\nprint(power(2,3))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+4):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+4):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,5):\n\tfor j in range(i,i+4):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(i,i+4):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,5):\n\tfor j in range(i,i+4):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,5):\n\tfor j in range("}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t\tmin_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] < test_list[min_index][1]:\n\t\t\t\tmin_index = i\n\t\treturn min_index\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum(test_list):\n\t\tmax_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] > test_list[max_index][1]:\n\t\t\t\tmax_index = i\n\t\treturn max_index\n\n\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum_value(test_list):\n\t\tmin_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] < test_list[min_index][1]:\n\t\t\t\tmin_index = i\n\t\treturn test_list[min_index]\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum_value(test_list):\n\t\tmax_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] > test_list[max_index][1]:\n\t\t\t\tmax_index = i\n\t\treturn test_list[max_index]\n\n\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum_value_record(test_list):\n\t\tmin_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] < test_list[min_index][1]:\n\t\t\t\tmin_index = i\n\t\treturn test_list[min_index][0]\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum_value_record(test_list):\n\t\tmax_index = 0\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i][1] > test_list["}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t\tmin_length = len(lst)  \n\t\tfor i in range(len(lst)):  \n\t\t\tfor j in range(i, len(lst)):  \n\t\t\t\tif len(lst[i:j+1]) < min_length:  \n\t\t\t\t\tmin_length = len(lst[i:j+1])  \n\t\treturn min_length  \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprint(Find_Min_Length(lst))  <file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_of_n_pos_int(10))<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_of_n_pos_int(10))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_of_n_pos_int(10))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_of_n_pos_int(10))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_pos_int(n):\n    sum = 0\n    for i in range(1, n+1):"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t\tcount = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif n%i == 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(divisor(10))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_of_n(10))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python program to find the factorial of a given number.\n\"\"\"\ndef factorial(n):\n\tfact = 1\n\tfor i in range(1,n+1):\n\t\tfact *= i\n\treturn fact\n\nprint(factorial(5))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a python program to find the sum of the squares of the first n positive integers.\n\"\"\"\ndef sum_of_squares(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i**2\n\treturn sum\n\nprint(sum_of_squares(10))\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a python program to find the sum of the cubes of the first n positive integers.\n\"\"\"\ndef sum_of_cubes(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i**3\n\treturn sum\n\nprint(sum_of_cubes(10))\n<file_sep>/python/python_basics/python_basics_5.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers squared.\n\"\"\"\ndef sum_of_squares(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i**2\n\treturn sum\n\nprint(sum_of_squares(10))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\tdict1 = {}\n\t\tfor i in list1:\n\t\t\tfor j in i:\n\t\t\t\tif j in dict1:\n\t\t\t\t\tdict1[j] += 1\n\t\t\t\telse:\n\t\t\t\t\tdict1[j] = 1\n\t\treturn dict1\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3"}
{"ID": 461, "source": "MBPP:98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t", "predict": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t\ttotal = 1\n\t\tfor x in numbers:\n\t\t\ttotal *= x\n\t\treturn total / len(numbers)\n\nprint(multiply_num([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\treturn max(numbers), min(numbers)\n\nprint(max_min([1,2,3,4]))\n\n\"\"\"\nWrite a function to find the maximum and minimum number in a list.\n\"\"\"\ndef max_min(numbers):\n\t"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t\n    if n > 1: \n        decimal_to_binary(n//2) \n    print(n % 2,end = '') \n\ndecimal_to_binary(10)\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a,b,c):\n    if a == b == c:\n        return 3*(a+b+c)\n    else:\n        return a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_is(s):\n    if s[:2] == \"Is\":\n        return s\n    else:\n        return \"Is\" + s\n\nprint(add_is(\"Is\"))\nprint(add_is(\"Isn't\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\ndef string_copies(s,n):\n    return s*n\n\nprint(string_copies(\"abc\",3))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.\n\"\"\"\ndef even"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\n\n\nif __name__ == '__main__':\n\tprint(next_smallest_palindrome(123))\n\tprint(next_smallest_palindrome(1234))\n\tprint(next_smallest_palindrome(12345))\n\tprint(next_smallest_palindrome(123456))\n\tprint(next_smallest_palindrome(1234567))\n\tprint(next_smallest_palindrome(12345678))\n\tprint(next_smallest_palindrome(123456789))\n\tprint(next_smallest_palindrome(1234567890))\n\tprint(next_smallest_palindrome(12345678901))\n\tprint(next_smallest_palindrome(123456789012))\n\tprint(next_smallest_palindrome(1234567890123))\n\tprint(next_smallest_palindrome(12345678901234))\n\tprint(next_smallest_palindrome(123456789012345))\n\tprint(next_smallest_palindrome(1234567890123456))\n\tprint(next_smallest_palindrome(12345678901234567))\n\tprint(next_smallest_palindrome(123456789012345678))\n\tprint(next_smallest_palindrome(1234567890123456789))\n\tprint(next_smallest_palindrome(12345678901234567890))\n\tprint(next_smallest_palindrome(123456789012345678901))\n\tprint(next_smallest_palindrome(123456789012345"}
{"ID": 464, "source": "MBPP:101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in the given array.\n\"\"\"\ndef kth_smallest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth largest element in the given array.\n\"\"\"\ndef kth_largest(arr, n, k):\n\t\n\n\n\"\"\"\nWrite a function to find the kth smallest element in"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\nprint(snake_to_camel('hello_world'))\nprint(snake_to_camel('hello_world_is_good'))\nprint(snake_to_camel('hello_world_is_good_and_nice'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool_and_cool_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool_and_cool_and_cool_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool_and_cool_and_cool_and_cool_and_cool'))\nprint(snake_to_camel('hello_world_is_good_and_nice_and_awesome_and_cool_and_awesome_and_cool_and_cool_and_cool_and_cool_and_cool_and_cool_and_cool'))\nprint(snake_to_camel('hello_"}
{"ID": 466, "source": "MBPP:103", "prompt": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t\n    # Base case \n    if (n == 0): \n        return 1\n  \n    # Initialize result \n    res = 0\n  \n    # Count all possible paths from (n, m) to (0, 0) \n    for i in range(0, m + 1): \n        res += eulerian_num(n - 1, i) \n  \n    return res \n  \n# Driver Code \nn = 3\nm = 3\nprint(eulerian_num(n, m)) \n\n\"\"\"\nOutput:\n12\n\"\"\"\n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nTime Complexity: O(log n)\nSpace Complexity: O(1)\n\"\"\"\n\ndef binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 10\n\nprint(binary_search(arr, target))\n<file_sep>/Python/Algorithms/Sorting/Bubble Sort/bubble_sort.py\n\"\"\"\nBubble Sort\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    return arr\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(bubble_sort(arr))\n<file_sep>/Python/Algorithms/Searching/Linear Search/linear_search.py\n\"\"\"\nLinear Search\n\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"\n\ndef linear_search("}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t\treturn sorted(input_list, key=lambda x: x[0])\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current date.\n\"\"\"\nimport datetime\nprint(datetime.date.today())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to determine if the Python shell is executing in 32bit or 64bit mode on operating system.\n\"\"\"\nimport struct\nprint(struct.calcsize(\"P\") * 8)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get OS name, platform and release information.\n\"\"\"\nimport os\nprint(os.name)\nprint(os.uname())\nprint(os.getlogin())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to locate Python site-packages.\n\"\"\"\nimport site\nprint(site.getsitepackages())\n<file_sep>/python/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the reference count of an object.\n\"\"\"\nimport sys\na = [1, 2, 3]\nprint(sys.getrefcount(a))\n<file_sep>"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t\tcount = 0\n\t\tfor i in lst:\n\t\t\tif i == True:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count([True, False, True, True]))\n<file_sep>/Python/Python_Basics/01_Python_Basics/01_Python_Basics.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/02_Python_Basics/02_Python_Basics.py\n\"\"\"\nWrite a python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/03_Python_Basics/03_Python_Basics.py\n\"\"\"\nWrite a python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/04_Python_Basics/04_Python_Basics.py\n\"\"\"\nWrite a python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/05_Python_Basics/05_Python_Basics.py\n\"\"\"\nWrite a python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t\treturn test_list + test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\treturn test_list - test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t\tcount = 0\n\t\tfor i in range(L,R+1) :\n\t\t\tif i >= 10 and i <= 15 :\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Hexadecimal(10,15))\nprint(count_Hexadecimal(1,15))\nprint(count_Hexadecimal(1,10))\nprint(count_Hexadecimal(1,1))\nprint(count_Hexadecimal(1,0))\nprint(count_Hexadecimal(10,10))\nprint(count_Hexadecimal(10,11))\nprint(count_Hexadecimal(10,12))\nprint(count_Hexadecimal(10,13))\nprint(count_Hexadecimal(10,14))\nprint(count_Hexadecimal(10,15))\nprint(count_Hexadecimal(10,16))\nprint(count_Hexadecimal(10,17))\nprint(count_Hexadecimal(10,18))\nprint(count_Hexadecimal(10,19))\nprint(count_Hexadecimal(10,20))\nprint(count_Hexadecimal(10,21))\nprint(count_Hexadecimal(10,22))\nprint(count_Hexadecimal(10,23))\nprint(count_Hexadecimal(10,24))\nprint(count_Hexadecimal(10,25))\nprint(count_Hexadecimal(10,26))\nprint(count_Hexadecimal(10,27))\nprint(count_Hexadecimal(10,28))\nprint(count_Hexadecimal(10,29))\nprint(count_Hexadecimal(10,30))\nprint(count_Hexadecimal(10,31))\nprint(count_Hexadecimal(10,32))\nprint(count_Hexadecimal(10,33))\nprint(count_Hexadecimal(10,34))\nprint(count_Hexadecimal(10,35))\nprint(count_Hexadecimal(10,36))\nprint(count_Hexadecimal(10,37))\nprint(count_Hexadecimal(10,"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t\theap = []\n\t\theapq.heappush(heap,num1[0])\n\t\theapq.heappush(heap,num2[0])\n\t\theapq.heappush(heap,num3[0])\n\t\tresult = []\n\t\twhile heap:\n\t\t\tmin_num = heapq.heappop(heap)\n\t\t\tresult.append(min_num)\n\t\t\tif min_num == num1[0]:\n\t\t\t\tif len(num1) > 1:\n\t\t\t\t\theapq.heappush(heap,num1[1])\n\t\t\t\t\tnum1 = num1[1:]\n\t\t\t\telse:\n\t\t\t\t\tnum1 = []\n\t\t\telif min_num == num2[0]:\n\t\t\t\tif len(num2) > 1:\n\t\t\t\t\theapq.heappush(heap,num2[1])\n\t\t\t\t\tnum2 = num2[1:]\n\t\t\t\telse:\n\t\t\t\t\tnum2 = []\n\t\t\telse:\n\t\t\t\tif len(num3) > 1:\n\t\t\t\t\theapq.heappush(heap,num3[1])\n\t\t\t\t\tnum3 = num3[1:]\n\t\t\t\telse:\n\t\t\t\t\tnum3 = []\n\t\treturn result\n\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nnum3 = [11,13,15,17,19]\nprint(merge_sorted_list(num1,num2,num3))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tif (s[i] == '1'): \n\t\t\t\tcount += 1\n\t\treturn count \n\ndef countRotations(s, n): \n\tif (n == 0): \n\t\treturn 0\n\tif (n == 1): \n\t\treturn 1\n\tif (n == 2): \n\t\treturn 2\n\tif (n == 3): \n\t\treturn 3\n\tif (n == 4): \n\t\treturn 4\n\tif (n == 5): \n\t\treturn 5\n\tif (n == 6): \n\t\treturn 6\n\tif (n == 7): \n\t\treturn 7\n\tif (n == 8): \n\t\treturn 8\n\tif (n == 9): \n\t\treturn 9\n\tif (n == 10): \n\t\treturn 10\n\tif (n == 11): \n\t\treturn 11\n\tif (n == 12): \n\t\treturn 12\n\tif (n == 13): \n\t\treturn 13\n\tif (n == 14): \n\t\treturn 14\n\tif (n == 15): \n\t\treturn 15\n\tif (n == 16): \n\t\treturn 16\n\tif (n == 17): \n\t\treturn 17\n\tif (n == 18): \n\t\treturn 18\n\tif (n == 19): \n\t\treturn 19\n\tif (n == 20): \n\t\treturn 20\n\tif (n == 21): \n\t\treturn 21\n\tif (n == 22): \n\t\treturn 22\n\tif (n == 23): \n\t\treturn 23\n\tif (n == 24): \n\t\treturn 24\n\tif (n == 25): \n\t\treturn 25\n\tif (n == 26): \n\t\treturn 26\n\tif (n == 27): \n\t\treturn 27\n\tif (n == 28): \n\t\treturn 28\n\tif (n == 29): \n\t\treturn 29\n\tif (n"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t\t\"\"\"\n\t\t:param test_list: list of integers\n\t\t:param strt_val: start value\n\t\t:param stop_val: end value\n\t\t:return: list of missing values\n\t\t\"\"\"\n\t\tmissing_list = []\n\t\tfor i in range(strt_val, stop_val + 1):\n\t\t\tif i not in test_list:\n\t\t\t\tmissing_list.append(i)\n\t\treturn missing_list\n\nif __name__ == '__main__':\n\ttest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\tprint(extract_"}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t\t\"\"\"\n\t\t:param nestedlist: list of lists\n\t\t:return: list of common elements\n\t\t\"\"\"\n\t\tcommon_list = []\n\t\tfor i in nestedlist:\n\t\t\tfor j in i:\n\t\t\t\tif j not in common_list:\n\t\t\t\t\tcommon_list.append(j)\n\t\treturn common_list\n\n\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists_2(nestedlist):\n\t\t\"\"\"\n\t\t:param nestedlist: list of lists\n\t\t:return: list of common elements\n\t\t\"\"\"\n\t\tcommon_list = []\n\t\tfor i in nestedlist:\n\t\t\tfor j in i:\n\t\t\t\tif j not in common_list:\n\t\t\t\t\tcommon_list.append(j)\n\t\treturn common_list\n\n\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists_3(nestedlist):\n\t\t\"\"\"\n\t\t:param nestedlist: list of lists\n\t\t:return: list of common elements\n\t\t\"\"\"\n\t\tcommon_list = []\n\t\tfor i in nestedlist:\n\t\t\tfor j in i:\n\t\t\t\tif j not in common_list:\n\t\t\t\t\tcommon_list.append(j)\n\t\treturn common_list\n\n\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists_4(nestedlist):\n\t\t\"\"\"\n\t\t:param nestedlist: list of lists\n\t\t:return: list of common elements\n\t\t\"\"\"\n\t\tcommon_list = []\n\t\tfor i in nestedlist:\n\t\t\tfor j in i:\n\t\t\t\tif j not in common_list:\n\t\t\t\t\tcommon_list.append(j)\n\t\treturn common_list\n\n\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists_5(nestedlist):\n\t\t\"\"\"\n\t\t:param nestedlist: list of lists\n\t\t:return: list of common elements\n\t\t\"\"\"\n\t\tcommon_list = []\n\t\tfor i in nestedlist:\n\t\t"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t\treturn 2*3.14*diameter + 2*3.14*diameter + 2*height\n\nprint(perimeter(10,20))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle : \"))\nprint(\"Area of the circle is : \",math.pi*radius*radius)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name : \")\nlast_name = input(\"Enter your last name : \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a python program which accepts an integer (n) and computes the value of n+nn+nnn.\n\"\"\"\nn = int(input(\"Enter the value of n : \"))\nprint(n+n*n+n*n*n)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a python program to calculate number of days"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t\ttry:\n\t\t\tint(text)\n\t\t\treturn True\n\t\texcept ValueError:\n\t\t\treturn False\n\nprint(check_integer(\"123\"))\nprint(check_integer(\"123.45\"))\nprint(check_integer(\"123.45.67\"))\nprint(check_integer(\"123.45e67\"))\nprint(check_integer(\"123.45e\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\"123.45e+\"))\nprint(check_integer(\"123.45e-\"))\nprint(check_integer(\"123.45e+67\"))\nprint(check_integer(\"123.45e-67\"))\nprint(check_integer(\""}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n# Driver Code\ntest_list = [(1, 2), (4, 5), (3, 1), (1, 2), (5, 6), (1, 2)]\nprint(assign_freq(test_list))\n\n\"\"\"\nWrite a Python program to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated(test_str):\n\tfor i in range(len(test_str)):\n\t\tif test_str.count(test_str[i]) > 1:\n\t\t\treturn test_str[i]\n\treturn -1\n\n# Driver Code\ntest_str = \"geeksforgeeks\"\nprint(first_repeated(test_str))\n\n\"\"\"\nWrite a Python program to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating(test_str):\n\tfor i in range(len(test_str)):\n\t\tif test_str.count(test_str[i]) == 1:\n\t\t\treturn test_str[i]\n\treturn -1\n\n# Driver Code\ntest_str = \"geeksforgeeks\"\nprint(first_non_repeating(test_str))\n\n\"\"\"\nWrite a Python program to find the first repeating character in a given string.\n\"\"\"\ndef first_repeating(test_str):\n\tfor i in range(len(test_str)):\n\t\tif test_str.count(test_str[i]) > 1:\n\t\t\treturn test_str[i]\n\treturn -1\n\n# Driver Code\ntest_str = \"geeksforgeeks\"\nprint(first_repeating(test_str))\n\n\"\"\"\nWrite a Python program to find the first repeating character in a given string.\n\"\"\"\ndef first_repeating(test_str):\n\tfor i in range(len(test_str)):\n\t\tif test_str.count(test_str[i]) > 1:\n\t\t\treturn test_str[i]\n"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(empty_dit([{},{},{}]))\nprint(empty_dit([{},{},{'a':1}]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t\treturn int(''.join(map(str, nums)))\n\nprint(tuple_to_int((1, 2, 3)))\nprint(tuple_to_int((1, 2, 3, 4, 5)))\nprint(tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n           "}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\tif type(test_list[i]) == int:\n\t\t\t\ttest_list[i] = float(test_list[i])\n\t\treturn test_list\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(list_to_float(test_list))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t\treturn string.split()\n\nprint(string_to_list(\"Hello World\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a string.\n\"\"\"\ndef list_to_string(list): \n\t\treturn \" \".join(list)\n\nprint(list_to_string([\"Hello\", \"World\"]))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a tuple.\n\"\"\"\ndef list_to_tuple(list): \n\t\treturn tuple(list)\n\nprint(list_to_tuple([\"Hello\", \"World\"]))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a tuple to a list.\n\"\"\"\ndef tuple_to_list(tuple): \n\t\treturn list(tuple)\n\nprint(tuple_to_list((\"Hello\", \"World\")))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a tuple to a string.\n\"\"\"\ndef tuple_to_string(tuple): \n\t\treturn \" \".join(tuple)\n\nprint(tuple_to_string((\"Hello\", \"World\")))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a tuple.\n\"\"\"\ndef string_to_tuple(string): \n\t\treturn tuple(string)\n\nprint(string_to_tuple(\"Hello World\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a set.\n\"\"\"\ndef list_to_set(list): \n\t\treturn set(list)\n\nprint(list_to_set([\"Hello\", \"World\"]))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a set to a list.\n\"\"\"\ndef set_to_list(set): \n\t\treturn list(set)\n\nprint(set_to_list({\"Hello\", \"World\"}))\n\n\"\"\"\n[link text](https:// [link text]("}
{"ID": 482, "source": "MBPP:119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t\tif n == 1 :\n\t\t\treturn arr[0]\n\t\tif n == 2 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telse :\n\t\t\t\treturn arr[1]\n\t\tif n == 3 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telif arr[1]!= arr[2] :\n\t\t\t\treturn arr[1]\n\t\t\telse :\n\t\t\t\treturn arr[2]\n\t\tif n == 4 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telif arr[1]!= arr[2] :\n\t\t\t\treturn arr[1]\n\t\t\telif arr[2]!= arr[3] :\n\t\t\t\treturn arr[2]\n\t\t\telse :\n\t\t\t\treturn arr[3]\n\t\tif n == 5 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telif arr[1]!= arr[2] :\n\t\t\t\treturn arr[1]\n\t\t\telif arr[2]!= arr[3] :\n\t\t\t\treturn arr[2]\n\t\t\telif arr[3]!= arr[4] :\n\t\t\t\treturn arr[3]\n\t\t\telse :\n\t\t\t\treturn arr[4]\n\t\tif n == 6 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telif arr[1]!= arr[2] :\n\t\t\t\treturn arr[1]\n\t\t\telif arr[2]!= arr[3] :\n\t\t\t\treturn arr[2]\n\t\t\telif arr[3]!= arr[4] :\n\t\t\t\treturn arr[3]\n\t\t\telif arr[4]!= arr[5] :\n\t\t\t\treturn arr[4]\n\t\t\telse :\n\t\t\t\treturn arr[5]\n\t\tif n == 7 :\n\t\t\tif arr[0]!= arr[1] :\n\t\t\t\treturn arr[0]\n\t\t\telif arr[1]!= arr[2] :\n\t\t\t\treturn arr[1]\n\t\t\telif arr[2]!= arr[3] :\n\t\t\t\treturn arr[2]\n\t\t\telif arr[3]!= arr[4] :\n\t\t\t\treturn arr[3]\n\t\t\telif arr[4]!= arr[5] :\n\t\t\t\t"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t\tmax_product = 0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tproduct = list1[i][0] * list1[j][0]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(max_product_tuple([(1,2), (3,4), (5,6), (7,8)]))\n<file_sep>/python/python_practice/python_practice_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest_number(list1):\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\nprint(largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_10.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest_number(list1):\n\tsmallest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] < smallest:\n\t\t\tsmallest = list1[i]\n\treturn smallest\n\nprint(smallest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_11.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest_number(list1):\n\tlargest = list1[0]\n\tsecond_largest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = list1[i]\n\t\telif list1[i] > second_largest:\n\t\t\tsecond_largest = list1[i]\n\treturn second_largest\n\nprint(second_largest_number([1,"}
{"ID": 484, "source": "MBPP:121", "prompt": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t", "predict": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t\t\"\"\"\n\t\t:param A: given array\n\t\t:param n: size of the array\n\t\t:param sum: sum of the triplet\n\t\t:param count: count of triplets\n\t\t:return: count of triplets\n\t\t\"\"\"\n\t\t# sort the array\n\t\tA.sort()\n\t\t# traverse the array\n\t\tfor i in range(n - 2):\n\t\t\t# initialize left and right\n\t\t\tleft = i + 1\n\t\t\tright = n - 1\n\t\t\t# traverse the array\n\t\t\twhile left < right:\n\t\t\t\t# check if the sum is equal to the given sum\n\t\t\t\tif A[i] + A[left] + A[right] == sum:\n\t\t\t\t\t# increment the count\n\t\t\t\t\tcount += 1\n\t\t\t\t\t# increment the left\n\t\t\t\t\tleft += 1\n\t\t\t\t\t# decrement the right\n\t\t\t\t\tright -= 1\n\t\t\t\t# check if the sum is greater than the given sum\n\t\t\t\telif A[i] + A[left] + A[right] > sum:\n\t\t\t\t\t# decrement the right\n\t\t\t\t\tright -= 1\n\t\t\t\t# check if the sum is less than the given sum\n\t\t\t\telse:\n\t\t\t\t\t# increment the left\n\t\t\t\t\tleft += 1\n\t\t# return the count\n\t\treturn count\n\n# main function\nif __name__ == \"__main__\":\n\t# take the input\n\tn = int(input())\n\tA = list(map(int, input().split()))\n\tsum = int(input())\n\t# call the function\n\tcount = check_triplet(A, n, sum, 0)\n\t# print the count\n\tprint(count)\n<file_sep>\"\"\"\nWrite a function to find the maximum sum of the subarray\n\"\"\"\ndef max_sum_subarray(A, n):\n\t\t\"\"\"\n\t\t:param A: given array\n\t\t:param n: size of the array\n\t\t:return: maximum sum of the subarray\n\t\t\"\"\"\n\t\t# initialize the maximum sum\n\t\tmax_sum = 0\n\t\t# initialize the current sum\n\t\tcurrent_sum = 0\n\t\t# traverse the array\n\t\tfor i in range(n):\n\t\t\t# check if the current sum is less than 0\n\t\t\tif current_sum < 0:\n\t\t\t\t# update the current sum\n\t\t\t\tcurrent_sum = A[i]\n\t\t\t#"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t\n    # Initialize result \n    res = 0\n    # Initialize power \n    p = 1\n    # Initialize number \n    num = 1\n    # Loop to findn'th smart number \n    while (n > 0): \n        # If n is odd \n        if (n & 1): \n            res = res + num * p \n        # Increment number \n        num = num + 1\n        # Increment power \n        p = p * 10\n        # Divide n by 2 \n        n = n >> 1\n    return res \n  \n# Driver code \nn = 10\nprint(smartNumber(n)) \n\n\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n    # Initialize result \n    res = 0\n    # Initialize power \n    p = 1\n    # Initialize number \n    num = 1\n    # Loop to findn'th smart number \n    while (n > 0): \n        # If n is odd \n        if (n & 1): \n            res = res + num * p \n        # Increment number \n        num = num + 1\n        # Increment power \n        p = p * 10\n        # Divide n by 2 \n        n = n >> 1\n    return res \n  \n# Driver code \nn = 10\nprint(smartNumber(n)) \n\n\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n    # Initialize result \n    res = 0\n    # Initialize power \n    p = 1\n    # Initialize number \n    num = 1\n    # Loop to findn'th smart number \n    while (n > 0): \n        # If n is odd \n        if (n & 1): \n            res = res + num * p \n        # Increment number \n        num = num + 1\n        # Increment power \n        p = p * 10\n        # Divide n by 2 \n        n = n >> 1\n    return res \n  \n# Driver code \nn = 10\nprint(smartNumber(n)) \n\n\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n    # Initialize result \n    res = 0\n    # Initialize power \n    p = 1\n    # Initialize number \n    num = 1\n    # Loop to findn'th smart number \n    while (n > 0): \n        # If n is odd \n        if (n &"}
{"ID": 486, "source": "MBPP:123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t", "predict": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t\t\"\"\"\n\t\tReturns the sum of all amicable numbers from 1 to a specified number.\n\t\t\"\"\"\n\t\tamicable_numbers = []\n\t\tfor i in range(1, limit):\n\t\t\tdivisors = []\n\t\t\tfor j in range(1, i):\n\t\t\t\tif i % j == 0:\n\t\t\t\t\tdivisors.append(j)\n\t\t\tdivisors_sum = sum(divisors)\n\t\t\tdivisors = []\n\t\t\tfor j in range(1, divisors_sum):\n\t\t\t\tif divisors_sum % j == 0:\n\t\t\t\t\tdivisors.append(j)\n\t\t\tdivisors_sum = sum(divisors)\n\t\t\tif divisors_sum == i and divisors_sum!= i:\n\t\t\t\tamicable_numbers.append(i)\n\t\treturn sum(amicable_numbers)\n\nprint(amicable_numbers_sum(10000))\n<file_sep>/problem_001.py\n\"\"\"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef multiples_sum(limit):\n\t\"\"\"\n\tReturns the sum of all multiples of 3 or 5 below a specified number.\n\t\"\"\"\n\tmultiples = []\n\tfor i in range(1, limit):\n\t\tif i % 3 == 0 or i % 5 == 0:\n\t\t\tmultiples.append(i)\n\treturn sum(multiples)\n\nprint(multiples_sum(1000))\n<file_sep>/problem_002.py\n\"\"\"\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\tif a == 0:\n\t\t\treturn 0\n\t\telif b == 0:\n\t\t\treturn 90\n\t\telif a > 0 and b > 0:\n\t\t\treturn math.degrees(math.atan(b/a))\n\t\telif a < 0 and b > 0:\n\t\t\treturn 180 + math.degrees(math.atan(b/a))\n\t\telif a < 0 and b < 0:\n\t\t\treturn 180 + math.degrees(math.atan(b/a))\n\t\telif a > 0 and b < 0:\n\t\t\treturn 360 + math.degrees(math.atan(b/a))\n\nprint(angle_complex(1,1))\nprint(angle_complex(1,-1))\nprint(angle_complex(-1,1))\nprint(angle_complex(-1,-1))\nprint(angle_complex(0,1))\nprint(angle_complex(0,-1))\nprint(angle_complex(1,0))\nprint(angle_complex(-1,0))\nprint(angle_complex(0,0))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSame"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\n    # Initialize result \n    res = 0; \n    curr_zero = 0; \n    curr_one = 0; \n  \n    # Traverse through the string \n    for i in range(n): \n        if (string[i] == '0'): \n            curr_zero += 1; \n        else: \n            curr_one += 1; \n  \n        # Find the length of the subarray \n        # with maximum difference \n        res = max(res, abs(curr_zero - curr_one)); \n  \n    return res; \n  \n# Driver code \nif __name__ == \"__main__\": \n    string = \"0100101010\"; \n    n = len(string); \n    print(find_length(string, n)); \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid+1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear Search/linear"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t\tsum = 0\n\t\tfor i in range(1, min(a,b)+1):\n\t\t\tif a%i==0 and b%i==0:\n\t\t\t\tsum = sum + i\n\t\treturn sum\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(\"The sum of common divisors of\",a,\"and\",b,\"is\",sum(a,b))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first 100 natural numbers.\n\"\"\"\nsum = 0\nfor i in range(1,101):\n\tsum = sum + i\nprint(\"The sum of first 100 natural numbers is\",sum)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first 100 odd natural numbers.\n\"\"\"\nsum = 0\nfor i in range(1,101):\n\tif i%2!=0:\n\t\tsum = sum + i\nprint(\"The sum of first 100 odd natural numbers is\",sum)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first 100 even natural numbers.\n\"\"\"\nsum = 0\nfor i in range(1,101):\n\tif i%2==0:\n\t\tsum = sum + i\nprint(\"The sum of first 100 even natural numbers is\",sum)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to find the sum of the first 100 natural numbers which are divisible by 3.\n\"\"\"\nsum = 0\nfor i in range(1,101):\n\tif i%3==0:\n\t\tsum = sum + i\nprint(\"The sum of first 100 natural numbers divisible by 3 is\",sum)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t\tif x == 0 or y == 0:\n\t\t\treturn 0\n\t\tif x < 0:\n\t\t\tx = -x\n\t\tif y < 0:\n\t\t\ty = -y\n\t\treturn x + multiply_int(x, y-1)\n\nprint(multiply_int(3, 4))\nprint(multiply_int(-3, 4))\nprint(multiply_int(3, -4))\nprint(multiply_int(-3, -4))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t\treturn [word for word in str if len(word) > n]\n\nprint(long_words(3, [\"abc\", \"de\", \"fgh\", \"ijk\", \"lmn\"]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a, b, c):\n\t\tif a == b == c:\n\t\t\t\treturn 3 * (a + b + c)\n\t\telse:\n\t\t\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_number(list):\n\t\treturn min(list)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_strings(list):\n\t\treturn len([word for word in list if len(word) > 1 and word[0] == word[-1]])\n\nprint(count_strings([\"abc\", \"xyz\", \"aba\", \"1221\"]))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t\t\"\"\"\n\t\tThis function will test if the matrix is a magic square.\n\t\t\"\"\"\n\t\t# Check if the matrix is a square matrix\n\t\tif len(my_matrix)!= len(my_matrix[0]):\n\t\t\treturn False\n\t\t# Check if the matrix is a magic square\n\t\tfor i in range(len(my_matrix)):\n\t\t\tif sum(my_matrix[i])!= sum(my_matrix[0]):\n\t\t\t\treturn False\n\t\tfor i in range(len(my_matrix)):\n\t\t\tif sum([my_matrix[j][i] for j in range(len(my_matrix))])!= sum(my_matrix[0]):\n\t\t\t\treturn False\n\t\tif sum([my_matrix[i][i] for i in range(len(my_matrix))])!= sum(my_matrix[0]):\n\t\t\treturn False\n\t\tif sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])!= sum(my_matrix[0]):\n\t\t\treturn False\n\t\treturn True\n\ndef magic_square(n):\n\t\"\"\"\n\tThis function will generate a magic square of size n.\n\t\"\"\"\n\t# Check if n is odd\n\tif n % 2 == 0:\n\t\treturn False\n\t# Create a matrix of size n\n\tmy_matrix = [[0 for i in range(n)] for j in range(n)]\n\t# Fill the matrix\n\ti = n // 2\n\tj = n - 1\n\tnum = 1\n\twhile num <= n * n:\n\t\tif i == -1 and j == n:\n\t\t\tj = n - 2\n\t\t\ti = 0\n\t\telse:\n\t\t\tif j == n:\n\t\t\t\tj = 0\n\t\t\tif i < 0:\n\t\t\t\ti = n - 1\n\t\tif my_matrix[i][j]:\n\t\t\tj = j - 2\n\t\t\ti = i + 1\n\t\t\tcontinue\n\t\tmy_matrix[i][j] = num\n\t\tnum += 1\n\t\ti = i - 1\n\t\tj = j + 1\n\treturn my_matrix\n\ndef main():\n\t\"\"\"\n\tThis function will test the magic square function.\n\t\"\"\"\n\t#"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tmax_count = 0\n\t\tmax_num = None\n\t\tnum_dict = {}\n\t\tfor num in nums:\n\t\t\tif num in num_dict:\n\t\t\t\tnum_dict[num] += 1\n\t\t\telse:\n\t\t\t\tnum_dict[num] = 1\n\t\t\tif num_dict[num] > max_count:\n\t\t\t\tmax_count = num_dict[num]\n\t\t\t\tmax_num = num\n\t\treturn max_num\n\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tmax_count = 0\n\t\tmax_num = None\n\t\tnum_dict = {}\n\t\tfor num in nums:\n\t\t\tif num in num_dict:\n\t\t\t\tnum_dict[num] += 1\n\t\t\telse:\n\t\t\t\tnum_dict[num] = 1\n\t\t\tif num_dict[num] > max_count:\n\t\t\t\tmax_count = num_dict[num]\n\t\t\t\tmax_num = num\n\t\treturn max_num\n\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tmax_count = 0\n\t\tmax_num = None\n\t\tnum_dict = {}\n\t\tfor num in nums:\n\t\t\tif num in num_dict:\n\t\t\t\tnum_dict[num] += 1\n\t\t\telse:\n\t\t\t\tnum_dict[num] = 1\n\t\t\tif num_dict[num] > max_count:\n\t\t\t\tmax_count = num_dict[num]\n\t\t\t\tmax_num = num\n\t\treturn max_num\n\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tmax_count = 0\n\t\tmax_num = None\n\t\tnum_dict = {}\n\t\tfor num"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t\tvowels = ['a','e','i','o','u']\n\t\tstr1 = list(str1)\n\t\tvowels_list = []\n\t\tfor i in str1:\n\t\t\tif i in vowels:\n\t\t\t\tvowels_list.append(i)\n\t\tvowels_list.reverse()\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] in vowels:\n\t\t\t\tstr1[i] = vowels_list.pop()\n\t\treturn ''.join(str1)\n\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('hello world'))\nprint(reverse_vowels('aeiou world'))\nprint(reverse_vowels('hello aeiou'))\nprint(reverse_vowels('aeiou hello'))\nprint(reverse_vowels('aeiou hello world'))\nprint(reverse_vowels('aeiou world hello'))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t\treturn ''.join(tup1)\n\ntup1 = ('p','y','t','h','o','n')\nprint(tup_string(tup1))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (\"Hello  \" + lname + \" \" + fname)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user"}
{"ID": 496, "source": "MBPP:133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t\treturn sum(list(filter(lambda x: x < 0, nums)))\n\nprint(sum_negativenum([-1,2,-3,4,5]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three_numbers(a,b,c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three_numbers(1,2,3))\nprint(sum_three_numbers(1,1,1))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_number(nums):\n\treturn min(nums)\n\nprint(smallest_number([1,2,3,4,5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_strings(strings):\n\tcount = 0\n\tfor string in strings:\n\t\tif len(string) >= 2 and string[0] == string[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_strings(['abc', 'xyz', 'aba', '1221']))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to sum of two given integers. However,"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t\tif (arr[n-1]%2==0): \n\t\t\tprint(\"Even\") \n\t\telse: \n\t\t\tprint(\"Odd\") \n\t\tfor i in range(p): \n\t\t\tarr[n-1] = arr[n-1] + 1\n\t\tif (arr[n-1]%2==0): \n\t\t\tprint(\"Even\") \n\t\telse: \n\t\t\tprint(\"Odd\") \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \np = 2\ncheck_last(arr, n, p) \n<file_sep>/Python/Array/1.py\n\"\"\"\nWrite a Python program to find the second largest number in a list.\n\"\"\"\ndef second_largest(arr,n):\n    max_1 = max(arr[0],arr[1])\n    max_2 = min(arr[0],arr[1])\n    for i in range(2,n):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2 and arr[i]!= max_1:\n            max_2 = arr[i]\n    return max_2\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(\"Second largest element is\",second_largest(arr,n))\n<file_sep>/Python/Array/10.py\n\"\"\"\nWrite a Python program to find the maximum occurring character in a given string.\n\"\"\"\ndef max_occur(str):\n    max_count = 0\n    max_char = ''\n    for i in str:\n        count = str.count(i)\n        if count > max_count:\n            max_count = count\n            max_char = i\n    return max_char\n\nstr = \"geeksforgeeks\"\nprint(\"Maximum occurring character is\",max_occur(str))\n<file_sep>/Python/Array/11.py\n\"\"\"\nWrite a Python program to find the maximum occurring character in a given string.\n\"\"\"\ndef max_occur(str):\n    max_count = 0\n    max_char = ''\n    for i in str:\n        count = str.count(i)\n       "}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\n    return (n * (2 * n - 1)) \n\nprint(hexagonal_num(10))\n<file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python"}
{"ID": 499, "source": "MBPP:136", "prompt": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t", "predict": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t\tif units <= 100:\n\t\t\tbill = units * 1.20\n\t\telif units <= 200:\n\t\t\tbill = 100 * 1.20 + (units - 100) * 1.50\n\t\telse:\n\t\t\tbill = 100 * 1.20 + 100 * 1.50 + (units - 200) * 1.80\n\t\treturn bill\n\nunits = int(input(\"Enter the units consumed: \"))\nprint(\"Electricity bill is: \", cal_electbill(units))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1, 6):\n\tprint("}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t\tcount = 0\n\t\tfor num in nums:\n\t\t\tif num == 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\ndef zero_ratio(nums):\n\treturn zero_count(nums) / len(nums)\n\ndef test_zero_ratio():\n\tassert zero_ratio([1, 2, 3, 4, 5]) == 0\n\tassert zero_ratio([1, 2, 3, 0, 5]) == 1/5\n\tassert zero_ratio([1, 2, 3, 0, 0, 5]) == 2/5\n\tassert zero_ratio([1, 2, 3, 0, 0, 0, 5]) == 3/5\n\tassert zero_ratio([1, 2, 3, 0, 0, 0, 0, 5]) == 4/5\n\tassert zero_ratio([1, 2, 3, 0, 0, 0, 0, 0, 5]) == 5/5\n\nif __name__ == '__main__':\n\ttest_zero_ratio()\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn 2 * sum(set(nums)) - sum(nums)\n\ndef test_single_number():\n\tassert single_number([2, 2, 1]) == 1\n\tassert single_number([4, 1, 2, 1, 2]) == 4\n\nif __name__ == '__main__':\n\ttest_single_number()\n<file_sep>/python/leetcode/easy/125_valid_"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t\twhile n: \n\t\t\tif n & 1: \n\t\t\t\treturn False\n\t\t\tn >>= 1\n\t\treturn True\n\nn = 10\nprint(is_Sum_Of_Powers_Of_Two(n))\n\nn = 12\nprint(is_Sum_Of_Powers_Of_Two(n))\n\nn = 16\nprint(is_Sum_Of_Powers_Of_Two(n))\n\nn = 17\nprint(is_Sum_Of_Powers_Of_Two(n))\n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t\treturn 2*3.14*r\n\nprint(circle_circumference(10))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn 3.14*r*r\n\nprint(circle_area(10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\t\treturn 4/3*3.14*r*r*r\n\nprint(sphere_volume(10))\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef sphere_area(r):\n\t\treturn 4*3.14*r*r\n\nprint(sphere_area(10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r,h):\n\t\treturn 3.14*r*r*h\n\nprint(cylinder_volume(10,20))\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef cylinder_area(r,h):\n\t\treturn 2*3.14*r*r+2*3.14*r*h\n\nprint(cylinder_area(10,20))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r,h):\n\t\treturn 3.14*r*r*h/3\n\nprint(cone_volume(10,20))\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef cone_area(r,h):\n\t\treturn 3.14*r*r+3.14*r*h\n\nprint(cone_area(10,20))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef cube_volume(a):\n\t\treturn a*a*a\n\nprint(cube_volume(10))\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef cube_area(a):\n\t\treturn 6*a*a\n\nprint(cube_area("}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t\tsingly_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) == 1:\n\t\t\t\tsingly_list.append(i)\n\t\treturn singly_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1:\n\t\t\t\trepeated_list.append(i)\n\t\treturn repeated_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1:\n\t\t\t\trepeated_list.append(i)\n\t\treturn repeated_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1:\n\t\t\t\trepeated_list.append(i)\n\t\treturn repeated_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1:\n\t\t\t\trepeated_list.append(i)\n\t\treturn repeated_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1:\n\t\t\t\trepeated_list.append(i)\n\t\treturn repeated_list\n\n\"\"\"\nWrite a function to extract elements that occur more than once in the given tuple list.\n\"\"\"\ndef extract_repeated(test_list):\n\t\trepeated_list = []\n\t\tfor i in test_list:\n\t\t\tif test_list.count(i) > 1"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\n\n\nif __name__ == '__main__':\n\tnums = [1, 5, 4, 3, 2]\n\tprint(pancake_sort(nums))<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus"}
{"ID": 505, "source": "MBPP:142", "prompt": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t\tcount = 0\n\t\tfor i in list1:\n\t\t\tfor j in list2:\n\t\t\t\tfor k in list3:\n\t\t\t\t\tif i == j == k:\n\t\t\t\t\t\tcount += 1\n\t\treturn count\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5]\nlist3 = [1,2,3,4,5]\nprint(count_samepair(list1,list2,list3))\n<file_sep>/python/leetcode/1001-1100/1009.py\n\"\"\"\n1009. Complement of Base 10 Integer\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n \n\nNote:\n\n0 <= N < 10^9\n\"\"\"\nclass Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        if N == 0:\n            return 1\n        return N ^ (1 <<"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count = count + 1\n    return count\n\nInput = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,1"}
{"ID": 507, "source": "MBPP:144", "prompt": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t\tsum = 0\n\t\tfor i in range(n): \n\t\t\tfor j in range(i+1, n): \n\t\t\t\tsum += abs(arr[i] - arr[j]) \n\t\treturn sum \n\narr = [1, 3, 5] \nn = len(arr) \nprint(sum_Pairs(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 508, "source": "MBPP:145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t\tmax_diff = arr[1] - arr[0] \n\t\tfor i in range(0, n): \n\t\t\tfor j in range(i+1, n): \n\t\t\t\tif (arr[j] - arr[i]) > max_diff: \n\t\t\t\t\tmax_diff = arr[j] - arr[i] \n\t\treturn max_diff \n\narr = [1, 2, 90, 10, 110] \nn = len(arr) \nprint(\"Maximum absolute difference is\", max_Abs_Diff(arr, n)) \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr,l,r,x):\n    if r>=l:\n        mid = l+(r-l)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid]>x:\n            return binary_search(arr,l,mid-1,x)\n        else:\n            return binary_search(arr,mid+1,r,x)\n    else:\n        return -1\n\narr = [2,3,4,10,40]\nx = 10\n\nresult = binary_search(arr,0,len(arr)-1,x)\n\nif result!= -1:\n    print(\"Element is present at index\",str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search, i.e"}
{"ID": 509, "source": "MBPP:146", "prompt": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t\tsum = 0\n\t\tfor i in str1:\n\t\t\tsum += ord(i)\n\t\treturn sum\n\nprint(ascii_value_string(\"Hello\"))\nprint(ascii_value_string(\"World\"))\nprint(ascii_value_string(\"Python\"))\nprint(ascii_value_string(\"Java\"))\nprint(ascii_value_string(\"C++\"))\nprint(ascii_value_string(\"C\"))\nprint(ascii_value_string(\"C#\"))\nprint(ascii_value_string(\"Cobol\"))\nprint(ascii_value_string(\"Perl\"))\nprint(ascii_value_string(\"Ruby\"))\nprint(ascii_value_string(\"JavaScript\"))\nprint(ascii_value_string(\"PHP\"))\nprint(ascii_value_string(\"Go\"))\nprint(ascii_value_string(\"Swift\"))\nprint(ascii_value_string(\"Kotlin\"))\nprint(ascii_value_string(\"Scala\"))\nprint(ascii_value_string(\"Rust\"))\nprint(ascii_value_string(\"Dart\"))\nprint(ascii_value_string(\"R\"))\nprint(ascii_value_string(\"Matlab\"))\nprint(ascii_value_string(\"Julia\"))\nprint(ascii_value_string(\"Groovy\"))\nprint(ascii_value_string(\"Clojure\"))\nprint(ascii_value_string(\"Haskell\"))\nprint(ascii_value_string(\"Prolog\"))\nprint(ascii_value_string(\"Erlang\"))\nprint(ascii_value_string(\"Elixir\"))\nprint(ascii_value_string(\"F#\"))\nprint(ascii_value_string(\"OCaml\"))\nprint(ascii_value_string(\"Oxygene\"))\nprint(ascii_value_string(\"Ada\"))\nprint(ascii_value_string(\"Fortran\"))\nprint(ascii_value_string(\"Lisp\"))\nprint(ascii_value_string(\"Scheme\"))\nprint(ascii_value_string(\"Common Lisp\"))\nprint(ascii_value_string(\"Smalltalk\"))\nprint(ascii_value_string(\"D\"))\nprint(ascii_value_string(\"Go\"))\nprint(ascii_value_string(\"Rust\"))\nprint(ascii_value_string(\"Dart\"))\nprint(ascii_value_string(\"R\"))\nprint(ascii_value_string(\"Matlab\"))\nprint("}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t\n    # Base case \n    if (m == n): \n        return tri[m][n] \n  \n    # Find the maximum sum in the bottom row \n    max_bottom = max(tri[m][n], tri[m + 1][n]) \n  \n    # Find the maximum sum in the bottom row \n    # of the remaining triangle \n    max_bottom_remaining = max_path_sum(tri, m + 1, n) \n  \n    # Return the maximum of the two sums \n    return max_bottom + max_bottom_remaining \n\n# Driver Code \ntri = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]] \nm = 0\nn = 0\nprint(max_path_sum(tri, m, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)//2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can only be present in left subarray \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n  \n        # Else the element can only be present in right subarray \n        else: \n            return binarySearch(arr, mid+1, r, x) \n  \n    else: \n        # Element is not present in the array \n        return -1\n\n# Driver Code \narr = [ 2"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t\tif N < 10 : \n\t\t\treturn N, 0\n\t\telse : \n\t\t\tmax_sum = 0\n\t\t\tmax_sum_pair = []\n\t\t\tfor i in range(1, N) : \n\t\t\t\tsum_left = sum(list(map(int, str(i))))\n\t\t\t\tsum_right = sum(list(map(int, str(N - i))))\n\t\t\t\tif sum_left + sum_right > max_sum : \n\t\t\t\t\tmax_sum = sum_left + sum_right\n\t\t\t\t\tmax_sum_pair = [i, N - i]\n\t\t\treturn max_sum_pair\n\nprint(sum_digits_twoparts(1234))\nprint(sum_digits_twoparts(12345))\nprint(sum_digits_twoparts(123456))\nprint(sum_digits_twoparts(1234567))\nprint(sum_digits_twoparts(12345678))\nprint(sum_digits_twoparts(123456789))\nprint(sum_digits_twoparts(1234567890))\nprint(sum_digits_twoparts(12345678901))\nprint(sum_digits_twoparts(123456789012))\nprint(sum_digits_twoparts(1234567890123))\nprint(sum_digits_twoparts(12345678901234))\nprint(sum_digits_twoparts(123456789012345))\nprint(sum_digits_twoparts(1234567890123456))\nprint(sum_digits_twoparts(12345678901234567))\nprint(sum_digits_twoparts(123456789012345678))\nprint(sum_digits_twoparts(123456789012345678"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t\n    # Initialize result \n    res = 0\n  \n    # Initialize prev and curr \n    prev = 0\n    curr = 1\n  \n    # Traverse the array \n    for i in range(1, n): \n  \n        # If difference is 1, \n        # then increment curr \n        if (arr[i] - arr[i - 1] == 1): \n            curr += 1\n  \n        # If difference is more than 1, \n        # then update result and \n        # initialize curr \n        else: \n            res = max(res, curr) \n            curr = 1\n  \n    # Update result \n    res = max(res, curr) \n  \n    return res \n  \n# Driver code \narr = [1, 3, 5, 4, 7] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 5] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr)"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t\tif a == b: \n\t\t\treturn True\n\t\tif a > b: \n\t\t\treturn False\n\t\treturn does_Contain_B(a*b, b, c) \n\na = 1\nb = 2\nc = 3\n\nprint(does_Contain_B(a,b,c))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t\tif gcd(x,y)==1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(is_coprime(10,15))\nprint(is_coprime(10,12))\nprint(is_coprime(10,11))\nprint(is_coprime(10,10))\nprint(is_coprime(10,1))\nprint(is_coprime(10,2))\nprint(is_coprime(10,3))\nprint(is_coprime(10,4))\nprint(is_coprime(10,5))\nprint(is_coprime(10,6))\nprint(is_coprime(10,7))\nprint(is_coprime(10,8))\nprint(is_coprime(10,9))\nprint(is_coprime(10,13))\nprint(is_coprime(10,14))\nprint(is_coprime(10,16))\nprint(is_coprime(10,17))\nprint(is_coprime(10,18))\nprint(is_coprime(10,19))\nprint(is_coprime(10,20))\nprint(is_coprime(10,21))\nprint(is_coprime(10,22))\nprint(is_coprime(10,23))\nprint(is_coprime(10,24))\nprint(is_coprime(10,25))\nprint(is_coprime(10,26))\nprint(is_coprime(10,27))\nprint(is_coprime(10,28))\nprint(is_coprime(10,29))\nprint(is_coprime(10,30))\nprint(is_coprime(10,31))\nprint(is_coprime(10,32))\nprint(is_coprime(10,33))\nprint(is_coprime(10,34))\nprint(is_coprime(10,35))\nprint(is_coprime("}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t\tif len(x) <= 1:\n\t\t\t\treturn x\n\t\tmid = len(x) // 2\n\t\tleft = merge_sort(x[:mid])\n\t\tright = merge_sort(x[mid:])\n\t\treturn merge(left, right)\n\ndef merge(left, right):\n\t\tresult = []\n\t\ti, j = 0, 0\n\t\twhile i < len(left) and j < len(right):\n\t\t\t\tif left[i] <= right[j]:\n\t\t\t\t\t\tresult.append(left[i])\n\t\t\t\t\t\ti += 1\n\t\t\t\telse:\n\t\t\t\t\t\tresult.append(right[j])\n\t\t\t\t\t\tj += 1\n\t\tresult += left[i:]\n\t\tresult += right[j:]\n\t\treturn result\n\nprint(merge_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q."}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\n    # Find the vertex of the parabola \n    # by finding the roots of the equation \n    # x^2 + bx + c = 0 \n    x1 = (-b + sqrt(b**2 - 4*a*c)) / (2*a) \n    x2 = (-b - sqrt(b**2 - 4*a*c)) / (2*a) \n  \n    # Print the roots \n    print(\"The roots of the equation are\", x1, \"and\", x2) \n  \n# Driver Code \na = 1\nb = 6\nc = 1\nparabola_vertex(a, b, c) \n\n\"\"\"\nWrite a function to find the roots of a quadratic equation.\n\"\"\"\ndef quadratic_roots(a, b, c): \n  \n    # Calculate the discriminant \n    discriminant = b**2 - 4*a*c \n  \n    # Find the two roots of the equation \n    root1 = (-b + sqrt(discriminant)) / (2*a) \n    root2 = (-b - sqrt(discriminant)) / (2*a) \n  \n    # Print the roots \n    print(\"The roots of the equation are\", root1, \"and\", root2) \n  \n# Driver Code \na = 1\nb = 6\nc = 1\nquadratic_roots(a, b, c) \n\n\"\"\"\nWrite a function to find the roots of a quadratic equation.\n\"\"\"\ndef quadratic_roots(a, b, c): \n  \n    # Calculate the discriminant \n    discriminant = b**2 - 4*a*c \n  \n    # Find the two roots of the equation \n    root1 = (-b + sqrt(discriminant)) / (2*a) \n    root2 = (-b - sqrt(discriminant)) / (2*a) \n  \n    # Print the roots \n    print(\"The roots of the equation are\", root1, \"and\", root2) \n  \n# Driver Code \na = 1\nb = 6\nc = 1\nquadratic_roots(a, b, c) \n\n\"\"\"\nWrite a function to find the roots of a quadratic equation.\n\"\"\"\ndef quadratic_roots(a, b, c): \n  \n    # Calculate the discriminant \n    discriminant = b**2"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][N] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [max(nums), min(nums)]\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a given two dimensional list.\n\"\"\"\ndef max_min(nums):\n\t\t\"\"\"\n\t\t:type nums:"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\treturn n ^ 0x55555555\n\nprint even_bit_toggle_number(10)\nprint even_bit_toggle_number(11)\nprint even_bit_toggle_number(12)\nprint even_bit_toggle_number(13)\nprint even_bit_toggle_number(14)\nprint even_bit_toggle_number(15)\nprint even_bit_toggle_number(16)\nprint even_bit_toggle_number(17)\nprint even_bit_toggle_number(18)\nprint even_bit_toggle_number(19)\nprint even_bit_toggle_number(20)\nprint even_bit_toggle_number(21)\nprint even_bit_toggle_number(22)\nprint even_bit_toggle_number(23)\nprint even_bit_toggle_number(24)\nprint even_bit_toggle_number(25)\nprint even_bit_toggle_number(26)\nprint even_bit_toggle_number(27)\nprint even_bit_toggle_number(28)\nprint even_bit_toggle_number(29)\nprint even_bit_toggle_number(30)\nprint even_bit_toggle_number(31)\nprint even_bit_toggle_number(32)\nprint even_bit_toggle_number(33)\nprint even_bit_toggle_number(34)\nprint even_bit_toggle_number(35)\nprint even_bit_toggle_number(36)\nprint even_bit_toggle_number(37)\nprint even_bit_toggle_number(38)\nprint even_bit_toggle_number(39)\nprint even_bit_toggle_number(40)\nprint even_bit_toggle_number(41)\nprint even_bit_toggle_number(42)\nprint even_bit_toggle_number(43)\nprint even_bit_toggle_number(44)\nprint even_bit_toggle_number(45)\nprint even_bit_toggle_number(46)\nprint even_bit_toggle_number(47)\nprint"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t\ttuple_int = ()\n\t\tfor i in tuple_str:\n\t\t\ttuple_int += (int(i),)\n\t\treturn tuple_int\n\ntuple_str = ('1','2','3','4','5')\nprint(tuple_int_str(tuple_str))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnumbers = input(\"Enter the numbers separated by comma: \")\nlist_numbers ="}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t\t\"\"\"\n\t\t:type list1: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tif i == 0:\n\t\t\t\tlist2.append(list1[i])\n\t\t\t\tlist2.append(1)\n\t\t\telif list1[i] == list1[i-1]:\n\t\t\t\tlist2[len(list2)-1] += 1\n\t\t\telse:\n\t\t\t\tlist2.append(list1[i])\n\t\t\t\tlist2.append(1)\n\t\treturn list2\n\ndef decode_list(list1):\n\t\t\"\"\"\n\t\t:type list1: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tif i % 2 == 0:\n\t\t\t\tlist2.append(list1[i])\n\t\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\ndef main():\n\tlist1 = [1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,"}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t\t# Find the minimum and maximum element \n\t\tmin_ele = min(arr) \n\t\tmax_ele = max(arr) \n\t\t# If the difference between maximum and minimum is \n\t\t# less than or equal to k, then return 0 \n\t\tif (max_ele - min_ele) <= k: \n\t\t\treturn 0\n\t\t# If the difference between maximum and minimum is \n\t\t# more than k, then return -1 \n\t\tif (max_ele - min_ele) > k: \n\t\t\treturn -1\n\t\t# If the difference between maximum and minimum is \n\t\t# equal to k, then return 1 \n\t\tif (max_ele - min_ele) == k: \n\t\t\treturn 1\n\n# Driver code \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nk = 2\nprint(min_Ops(arr, n, k)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1\n\nprint(firstMissingPositive([3, 4, -1, 1]))\nprint(firstMissingPositive([1, 2, 0]))\n<file_sep>/Python"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t\tif month == 12 or month == 1 or month == 2:\n\t\t\tprint(\"Winter\")\n\t\telif month == 3 or month == 4 or month == 5:\n\t\t\tprint(\"Spring\")\n\t\telif month == 6 or month == 7 or month == 8:\n\t\t\tprint(\"Summer\")\n\t\telif month == 9 or month == 10 or month == 11:\n\t\t\tprint(\"Fall\")\n\t\telse:\n\t\t\tprint(\"Invalid month\")\n\nmonth_season(12,1)\nmonth_season(1,1)\nmonth_season(2,1)\nmonth_season(3,1)\nmonth_season(4,1)\nmonth_season(5,1)\nmonth_season(6,1)\nmonth_season(7,1)\nmonth_season(8,1)\nmonth_season(9,1)\nmonth_season(10,1)\nmonth_season(11,1)\nmonth_season(12,1)\nmonth_season(13,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1)\nmonth_season(1,1"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t\n#\tif a == 0 and b == 0:\n#\t\treturn 0, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0:\n#\t\treturn n/a, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0:\n#\t\treturn n/a, 0\n#\tif a!= 0 and b!= 0:\n#\t\treturn n/a, n/b\n#\tif a == 0 and b == 0:\n#\t\treturn 0, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0:\n#\t\treturn n/a, 0\n#\tif a!= 0 and b!= 0:\n#\t\treturn n/a, n/b\n#\tif a == 0 and b == 0:\n#\t\treturn 0, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0:\n#\t\treturn n/a, 0\n#\tif a!= 0 and b!= 0:\n#\t\treturn n/a, n/b\n#\tif a == 0 and b == 0:\n#\t\treturn 0, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0:\n#\t\treturn n/a, 0\n#\tif a!= 0 and b!= 0:\n#\t\treturn n/a, n/b\n#\tif a == 0 and b == 0:\n#\t\treturn 0, 0\n#\tif a == 0 and b!= 0:\n#\t\treturn 0, n/b\n#\tif a!= 0 and b == 0"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t\tfor i in list2:\n\t\t\tif i in list1:\n\t\t\t\tlist1.remove(i)\n\t\treturn list1\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = [1,2,3,10,11,12]\nprint(remove_elements(list1, list2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence"}
{"ID": 525, "source": "MBPP:162", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n + sum_series(n-2)\n\nprint(sum_series(10))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(0,151):\n\tprint(i)\n\n# Multiples of Five - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5,1001,5):\n\tprint(i)\n\n# Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1,101):\n\tif i % 5 == 0 and i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telif i % 5 == 0:\n\t\tprint(\"Coding\")\n\telse:\n\t\tprint(i)\n\n# Whoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\nsum"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t\treturn (s*l)/2\n\nprint(area_polygon(4,5))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t\tsum1 = 0\n\t\tsum2 = 0\n\t\tfor i in range(1,num1):\n\t\t\tif num1%i == 0:\n\t\t\t\tsum1 += i\n\t\tfor i in range(1,num2):\n\t\t\tif num2%i == 0:\n\t\t\t\tsum2 += i\n\t\tif sum1 == num2 and sum2 == num1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nprint(areEquivalent(num1,num2))<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python function to check whether the given number is prime or not.\n\"\"\"\ndef isPrime(num):\n\tif num > 1:\n\t\tfor i in range(2,num):\n\t\t\tif num%i == 0:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False\n\nnum = int(input(\"Enter the number: \"))\nprint(isPrime(num))<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python function to check whether the given number is palindrome or not.\n\"\"\"\ndef isPalindrome(num):\n\trev = 0\n\ttemp = num\n\twhile num > 0:\n\t\trev = rev*10 + num%10\n\t\tnum = num//10\n\tif rev == temp:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnum = int(input(\"Enter the number: \"))\nprint(isPalindrome(num))<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python function to check whether the given number is armstrong or not.\n\"\"\"\ndef isArmstrong(num):\n\tsum = 0\n\ttemp = num\n\twhile num > 0:\n\t\tsum += (num%10)**3\n\t\tnum = num//10\n\tif sum == temp:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnum = int(input(\"Enter the number: \"))\nprint(isArmstrong(num))<file_sep>/Python/Python_Assignment"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t\n    # initializing count array \n    count = [0] * 26 \n  \n    # traverse string \n    for i in str1: \n        if (ord(i) >= 97 and ord(i) <= 122): \n            count[ord(i) - 97] += 1\n        elif (ord(i) >= 65 and ord(i) <= 90): \n            count[ord(i) - 65] += 1\n  \n    # print count array \n    for i in range(26): \n        print(chr(i + 97), \":\", count[i]) \n  \n# Driver Code \nif __name__ == '__main__': \n    str1 = \"GeeksforGeeks\"\n    count_char_position(str1) \n<file_sep>/python/string/string_to_int.py\n\"\"\"\nWrite a Python program to convert a given string into an integer.\n\"\"\"\ndef string_to_int(str1):\n    return int(str1)\n\nif __name__ == '__main__':\n    str1 = \"12345\"\n    print(string_to_int(str1))<file_sep>/python/string/string_to_list.py\n\"\"\"\nWrite a Python program to convert a given string into a list.\n\"\"\"\ndef string_to_list(str1):\n    return list(str1)\n\nif __name__ == '__main__':\n    str1 = \"GeeksforGeeks\"\n    print(string_to_list(str1))<file_sep>/python/string/string_to_tuple.py\n\"\"\"\nWrite a Python program to convert a given string into a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n    return tuple(str1)\n\nif __name__ == '__main__':\n    str1 = \"GeeksforGeeks\"\n    print(string_to_tuple(str1))<file_sep>/python/string/string_to_set.py\n\"\"\"\nWrite a Python program to convert a given string into a set.\n\"\"\"\ndef string_to_set(str1):\n    return set(str1)\n\nif __name__ == '__main__':\n    str1 = \"GeeksforGeeks\"\n    print(string_to_set(str1))<file_sep>/python/string/string_"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t\tcount = 0\n\t\tfor i in range(N): \n\t\t\tfor j in range(i+1,N): \n\t\t\t\tif (A[i] ^ A[j]) % 2 == 0: \n\t\t\t\t\tcount += 1\n\t\treturn count \n\nA = [1, 2, 3, 4, 5] \nN = len(A) \nprint(find_even_Pair(A,N)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t\treturn 1 if (n == 0) else 2**(n - 1).bit_length() \n\n# Driver program to test above function \nn = 10\nprint(\"The smallest power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, l, mid-1, x) \n        else: \n            return binary_search(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print(\"Element is present at index % d\" % result) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search, i.e\n\"\"\"\n\ndef linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n   "}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t\tcount = 0\n\t\tfor i in range(len(a)): \n\t\t\tif a[i] == x: \n\t\t\t\tcount+=1\n\t\treturn count\n\na = [1,2,3,4,5,6,7,8,9,10]\nx = 10\nprint(frequency(a,x))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range("}
{"ID": 532, "source": "MBPP:169", "prompt": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\telif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn 2 * get_pell(n - 1) + get_pell(n - 2) \n\nprint(get_pell(5))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\tsum = 0\n\t\tfor i in range(m, n+1):\n\t\t\tsum += list1[i]\n\t\treturn sum\n\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10], 2, 5))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three_numbers(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three_numbers(1, 2, 3))\nprint(sum_three_numbers(1, 1, 1))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_number(list1):\n\tmin = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] < min:\n\t\t\tmin = list1[i]\n\treturn min\n\nprint(smallest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_strings(list1):\n\tcount"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t\treturn 5*a\n\nprint(perimeter_pentagon(5))\n<file_sep>/python/python_basics/python_basics_001.py\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint(area_circle(5))\n<file_sep>/python/python_basics/python_basics_003.py\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\ts = (a+b+c)/2\n\t\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area_triangle(3,4,5))\n<file_sep>/python/python_basics/python_basics_002.py\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\t\treturn a*b\n\nprint(area_rectangle(5,6))\n<file_sep>/python/python_basics/python_basics_004.py\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(a):\n\t\treturn a*a\n\nprint(area_square(5))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECREMENT } from '../actions/counter';\n\nconst initialState = 0;\n\nexport default (state"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in range(len(s)):\n\t\t\tif s[i:i+3] =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t\n    # Pass the regular expression \n    # to compile method \n    regex = re.compile('[^a-zA-Z0-9]') \n    \n    # Pass the text \n    # to compile method \n    text = re.sub(regex,'', text) \n    \n    return text\n\n# Driver Code \nif __name__ == '__main__': \n\t\n    # Given string \n    text = \"Geeks for Geeks, 1234567890\"\n    \n    # Printing the modified string \n    print(remove_splchar(text))\n<file_sep>/README.md\n# Python-Programs\n\nThis repository contains python programs for beginners.\n<file_sep>/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/Python Programs/"}
{"ID": 537, "source": "MBPP:174", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t\td = {}\n\t\tfor k, v in l:\n\t\t\t\td.setdefault(k, []).append(v)\n\t\treturn d\n\n\"\"\"\nWrite a function to sort a list of dictionaries by a common key.\n\"\"\"\ndef sort_dict(l, key):\n\t\treturn sorted(l, key=lambda x: x[key])\n\n\"\"\"\nWrite a function to sort a list of dictionaries by a common key in reverse order.\n\"\"\"\ndef sort_dict_reverse(l, key):\n\t\treturn sorted(l, key=lambda x: x[key], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys.\n\"\"\"\ndef sort_dict_multi(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys))\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys in reverse order.\n\"\"\"\ndef sort_dict_multi_reverse(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys), reverse=True)\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys in reverse order.\n\"\"\"\ndef sort_dict_multi_reverse(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys), reverse=True)\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys in reverse order.\n\"\"\"\ndef sort_dict_multi_reverse(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys), reverse=True)\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys in reverse order.\n\"\"\"\ndef sort_dict_multi_reverse(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys), reverse=True)\n\n\"\"\"\nWrite a function to sort a list of dictionaries by multiple common keys in reverse order.\n\"\"\"\ndef sort_dict_multi_reverse(l, keys):\n\t\treturn sorted(l, key=lambda x: tuple(x[k] for k in keys), reverse=True)\n\n\"\"\"\nWrite a"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t\tstack = []\n\t\tfor i in str1:\n\t\t\tif i == '(':\n\t\t\t\tstack.append(i)\n\t\t\telif i == ')':\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\treturn False\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\tif len(stack) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(is_valid_parenthese('()'))\nprint(is_valid_parenthese('()()'))\nprint(is_valid_parenthese('(()'))\nprint(is_valid_parenthese('(()))'))\nprint(is_valid_parenthese('(()())'))\nprint(is_valid_parenthese('(()())('))\nprint(is_valid_parenthese('(()())()'))\nprint(is_valid_parenthese('(()())()('))\nprint(is_valid_parenthese('(()())()())'))\nprint(is_valid_parenthese('(()())()())('))\nprint(is_valid_parenthese('(()())()())()'))\nprint(is_valid_parenthese('(()())()())()('))\nprint(is_valid_parenthese('(()())()())()())'))\nprint(is_valid_parenthese('(()())()())()())('))\nprint(is_valid_parenthese('(()())()())()())()'))\nprint(is_valid_parenthese('(()())()())()())()('))\nprint(is_valid_parenthese('(()())()())()())()())'))\nprint(is_valid_parenthese('(()())()())()())()())('))\nprint(is_valid_parenthese('(()())()())()())()())()'))\nprint(is_valid_parenthese('(()())()())()())()())('))\nprint(is_valid_parenthese('(()())()())()())()())()('))\nprint(is_valid_parenthese('(()())()())()())()())()('))\nprint(is_valid_parenthese('(()())()())()())()())()('))\nprint(is_valid_parenthese('(()())()())()())()())()('))"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn (a*b*c)**(1/2)\n\nprint(area_triangle(3,4,5))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(a,b):\n\t\treturn 2*(a+b)\n\nprint(perimeter_rectangle(3,4))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\t\treturn a*b\n\nprint(area_rectangle(3,4))\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(a):\n\t\treturn 4*a\n\nprint(perimeter_square(3))\n<file_sep>/python/python_basics/python_basics_5.py\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(a):\n\t\treturn a**2\n\nprint(area_square(3))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t\n#\tprint(L,R)\n\tfor i in range(L,R+1):\n\t\tfor j in range(i+1,R+1):\n\t\t\tif i*j<=R:\n\t\t\t\tif gcd(i,j)==1:\n\t\t\t\t\treturn i,j\n\t\t\telse:\n\t\t\t\tbreak\n\treturn -1,-1\n\ndef gcd(a,b):\n\tif a==0:\n\t\treturn b\n\treturn gcd(b%a,a)\n\nprint(answer(1,10))\nprint(answer(1,100))\nprint(answer(1,1000))\nprint(answer(1,10000))\nprint(answer(1,100000))\nprint(answer(1,1000000))\nprint(answer(1,10000000))\nprint(answer(1,100000000))\nprint(answer(1,1000000000))\nprint(answer(1,10000000000))\nprint(answer(1,100000000000))\nprint(answer(1,1000000000000))\nprint(answer(1,10000000000000))\nprint(answer(1,100000000000000))\nprint(answer(1,1000000000000000))\nprint(answer(1,10000000000000000))\nprint(answer(1,100000000000000000))\nprint(answer(1,1000000000000000000))\nprint(answer(1,10000000000000000000))\nprint(answer(1,100000000000000000000))\nprint(answer(1,100000"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\t\"\"\"\n\t\t:type patterns: List[str]\n\t\t:type text: str\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tresult = []\n\t\tfor pattern in patterns:\n\t\t\tif pattern in text:\n\t\t\t\tresult.append(text.index(pattern))\n\t\treturn result\n\nif __name__ == '__main__':\n\tprint(string_literals([\"ab\",\"cd\"],\"abcdefg\"))\n<file_sep>/leetcode/1001-1100/1009.complement-of-base-10-integer.py\n\"\"\"\n1009. Complement of Base 10 Integer\nEasy\n\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n \n\nNote:\n\n0 <= N < 10^9\n\"\"\"\n\nclass Solution(object):\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 1\n        return N"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\twhile x > 0: \n\t\t\tsum = 0\n\t\t\twhile x > 0: \n\t\t\t\tsum += (x % 10) * (x % 10) * (x % 10) \n\t\t\t\tx //= 10\n\t\t\tx = sum \n\t\treturn True\n\nprint(is_num_keith(153))\nprint(is_num_keith(123))\nprint(is_num_keith(1234))\nprint(is_num_keith(12345))\nprint(is_num_keith(123456))\nprint(is_num_keith(1234567))\nprint(is_num_keith(12345678))\nprint(is_num_keith(123456789))\nprint(is_num_keith(1234567890))\nprint(is_num_keith(12345678901))\nprint(is_num_keith(123456789012))\nprint(is_num_keith(1234567890123))\nprint(is_num_keith(12345678901234))\nprint(is_num_keith(123456789012345))\nprint(is_num_keith(1234567890123456))\nprint(is_num_keith(12345678901234567))\nprint(is_num_keith(123456789012345678))\nprint(is_num_keith(1234567890123456789))\nprint(is_num_keith(12345678901234567890))\nprint(is_num_keith(12345678901234567"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t# approximate radius of earth in km\n\t\tR = 6373.0\n\t\tlat1 = radians(slat)\n\t\tlon1 = radians(slon)\n\t\tlat2 = radians(elat)\n\t\tlon2 = radians(elon)\n\t\tdlon = lon2 - lon1\n\t\tdlat = lat2 - lat1\n\t\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\t\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\t\tdistance = R * c\n\t\treturn distance\n\ndef main():\n\tslat = 37.773972\n\tslon = -122.431297\n\telat = 37.772723\n\telon = -122.433538\n\tprint(distance_lat_long(slat,slon,elat,elon))\n\nif __name__ == '__main__':\n\tmain()<file_sep>/README.md\n# Python-Scripts\n\nThis repository contains python scripts that I have written for various purposes.\n\n## Contents\n\n### 1. [Distance between two points](https://github.com/siddharth-kumar-k/Python-Scripts/blob/master/distance_lat_long.py)\n\nWrite a function to calculate distance between two points using latitude and longitude.\n\n### 2. [Find the most frequent word in a string](https://github.com/siddharth-kumar-k/Python-Scripts/blob/master/most_frequent_word.py)\n\nWrite a function to find the most frequent word in a string.\n\n### 3. [Find the most frequent word in a string](https://github.com/siddharth-kumar-k/Python-Scripts/blob/master/most_frequent_word.py)\n\nWrite a function to find the most frequent word in a string.\n\n### 4. [Find the most frequent word in a string](https://github.com/siddharth-kumar-k/Python-Scripts/blob/master/most_frequent_word."}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t\tn1 = len(str1) \n\t\tn2 = len(str2) \n\t\tresult = \"\" \n\t\ti = 0\n\t\twhile i < n1 and i < n2: \n\t\t\tif str1[i] == str2[i]: \n\t\t\t\tresult += str1[i] \n\t\t\t\ti += 1\n\t\t\telse: \n\t\t\t\tbreak\n\t\treturn result \n\ndef common_prefix(arr): \n\tresult = arr[0] \n\tfor i in range(1, len(arr)): \n\t\tresult = common_prefix_util(result, arr[i]) \n\treturn result \n\narr = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr = [\"apple\", \"ape\", \"april\"] \nprint(common_prefix(arr)) \n\narr"}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t\tuppercase = re.findall(r'[A-Z]', string)\n\t\tlowercase = re.findall(r'[a-z]', string)\n\t\tspecial_char = re.findall(r'[^a-zA-Z0-9]', string)\n\t\tnumeric = re.findall(r'[0-9]', string)\n\t\tprint(\"Uppercase characters: \", uppercase)\n\t\tprint(\"Lowercase characters: \", lowercase)\n\t\tprint(\"Special characters: \", special_char)\n\t\tprint(\"Numeric characters: \", numeric)\n\nif __name__ == \"__main__\":\n\tstring = input(\"Enter a string: \")\n\tfind_character(string)\n<file_sep>/Python/Data Structures/Linked List/linked_list.py\n\"\"\"\nImplementation of a linked list in python.\n\"\"\"\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef print_list(self):\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t\tprint(temp.data)\n\t\t\ttemp = temp.next\n\n\tdef push(self, data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_after(self, prev_node, data):\n\t\tif prev_node is None:\n\t\t\tprint(\"Previous node is None\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef append(self, data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\ttemp = self.head\n\t\twhile temp.next:\n\t\t\ttemp = temp.next\n\t\ttemp.next = new_node\n\n\tdef delete_node(self, key):\n\t\ttemp = self.head\n\t\tif temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tself.head = temp.next\n\t\t\t\ttemp = None\n\t\t\t\treturn\n\t\twhile temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tbreak\n\t\t\tprev"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t\t# Your code here\n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\narr = [1, 5, 3, 4, 2]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))\n<file_sep>/Python/Arrays/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef first_missing_positive(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tif arr[i] <= 0:\n\t\t\tarr[i] = n + 1\n\tfor i in range(n):\n\t\ta = abs(arr[i])\n\t\tif a <= n:\n\t\t\tarr[a - 1] = -abs(arr[a - 1])\n\tfor i in range(n):\n\t\tif arr[i] > 0:\n\t\t\treturn i + 1\n\treturn n + 1\n\narr = [3, 4, -1, 1]\nprint(first_missing_positive(arr))\n<file_sep>/Python/Arrays/2.py\n\"\"\"\nGiven an array of integers, find the first repeating element in it. We need to find the element that occurs more than once and whose index of first occurrence is smallest.\n\nExamples:\n\nInput: arr[] = {10, 5, 3, 4, 3, 5, 6}\nOutput: 5 (5 is the first element that repeats)\n\nInput: arr[] = {6, 10, 5, 4, 9, 120, 4, 6, 10}\nOutput: 6 ("}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t\treturn [i for i in list if i > num]\n\nprint greater_specificnum([1,2,3,4,5,6,7,8,9,10],5)\n\n\"\"\"\nWrite a function to find the maximum value in a list.\n\"\"\"\ndef max_list(list):\n\treturn max(list)\n\nprint max_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the minimum value in a list.\n\"\"\"\ndef min_list(list):\n\treturn min(list)\n\nprint min_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the sum of all the values in a list.\n\"\"\"\ndef sum_list(list):\n\treturn sum(list)\n\nprint sum_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the average of all the values in a list.\n\"\"\"\ndef avg_list(list):\n\treturn sum(list)/len(list)\n\nprint avg_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the median of all the values in a list.\n\"\"\"\ndef median_list(list):\n\tlist.sort()\n\tif len(list) % 2 == 0:\n\t\treturn (list[len(list)/2] + list[len(list)/2 - 1])/2.0\n\telse:\n\t\treturn list[len(list)/2]\n\nprint median_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the mode of all the values in a list.\n\"\"\"\ndef mode_list(list):\n\treturn max(set(list), key=list.count)\n\nprint mode_list([1,2,3,4,5,6,7,8,9,10])\n\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef factorial("}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\n    # Calculating the focus using the \n    # formula \n    focus = (-b + (b**2 - 4*a*c)**0.5) / (2*a) \n    return focus \n\n# Driver Code \na = 1\nb = 6\nc = 9\nprint(parabola_focus(a, b, c)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t\tif patterns is not None:\n\t\t\tfor pattern in patterns:\n\t\t\t\tprint(\"Searching for %r in %r\" % (pattern, text))\n\t\t\t\tprint(re.findall(pattern, text))\n\t\t\t\tprint()\n\nif __name__ == '__main__':\n\ttext = 'abbaaabbbbaaaaa'\n\tpatterns = ['ab']\n\tcheck_literals(text, patterns)\n<file_sep>/python/python_cookbook/chapter_1/1-1.py\n\"\"\"\nWrite a function to find the longest string in a list.\n\"\"\"\ndef longest_string(strings):\n\tlongest = ''\n\tfor string in strings:\n\t\tif len(string) > len(longest):\n\t\t\tlongest = string\n\treturn longest\n\nif __name__ == '__main__':\n\tstrings = ['a', 'ab', 'abc', 'abcd', 'abcde']\n\tprint(longest_string(strings))\n<file_sep>/python/python_cookbook/chapter_1/1-2.py\n\"\"\"\nWrite a function to find the longest string in a list.\n\"\"\"\ndef longest_string(strings):\n\tlongest = ''\n\tfor string in strings:\n\t\tif len(string) > len(longest):\n\t\t\tlongest = string\n\treturn longest\n\nif __name__ == '__main__':\n\tstrings = ['a', 'ab', 'abc', 'abcd', 'abcde']\n\tprint(longest_string(strings))\n<file_sep>/python/python_cookbook/chapter_1/1-3.py\n\"\"\"\nWrite a function to find the longest string in a list.\n\"\"\"\ndef longest_string(strings):\n\tlongest = ''\n\tfor string in strings:\n\t\tif len(string) > len(longest):\n\t\t\tlongest = string\n\treturn longest\n\nif __name__ == '__main__':\n\tstrings = ['a', 'ab', 'abc', 'abcd', 'abcde']\n\tprint(longest_string(strings))\n<file_sep>/python/python_cookbook/chapter_1/1-4.py\n\"\"\"\nWrite a function to find the longest string in a list.\n\"\"\"\ndef longest_string(strings):\n\tlongest = ''\n\tfor string in strings:\n\t\tif len(string) > len(longest):\n\t\t\tlongest = string\n\treturn longest\n"}
{"ID": 550, "source": "MBPP:187", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t\n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Fill d[][] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n  \n            # If first string is empty, only option is to \n            # not take any character \n            if i == 0: \n                L[i][j] = 0\n  \n            # If second string is empty, only option is to \n            # not take any character \n            elif j == 0: \n                L[i][j] = 0\n  \n            # If last character of first string is same as \n            # last character of second string, then we \n            # take 1 + last subsequence of remaining strings \n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n  \n            # If last character is different, then we \n            # take max of last subsequence of remaining \n            # strings (including both) \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] \n    return L[m][n] \n\n# Driver program to test the above function \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Length of LCS is \", longest_common_subsequence(X, Y, len(X), len(Y))) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Increasing Subsequence.py\n\"\"\"\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n\nFor example,\nGiven [10, 9, 2, 5, 3, 7, 101, 18],\nThe longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.\n\nYour algorithm should run in O(n2) complexity.\n\nFollow up:"}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t\tfor i in range(1,n):\n\t\t\tfor j in range(1,n):\n\t\t\t\tif i*j == n:\n\t\t\t\t\treturn True\n\t\treturn False\n\nprint(prod_Square(10))\nprint(prod_Square(12))\nprint(prod_Square(14))\nprint(prod_Square(16))\nprint(prod_Square(18))\nprint(prod_Square(20))\nprint(prod_Square(22))\nprint(prod_Square(24))\nprint(prod_Square(26))\nprint(prod_Square(28))\nprint(prod_Square(30))\nprint(prod_Square(32))\nprint(prod_Square(34))\nprint(prod_Square(36))\nprint(prod_Square(38))\nprint(prod_Square(40))\nprint(prod_Square(42))\nprint(prod_Square(44))\nprint(prod_Square(46))\nprint(prod_Square(48))\nprint(prod_Square(50))\nprint(prod_Square(52))\nprint(prod_Square(54))\nprint(prod_Square(56))\nprint(prod_Square(58))\nprint(prod_Square(60))\nprint(prod_Square(62))\nprint(prod_Square(64))\nprint(prod_Square(66))\nprint(prod_Square(68))\nprint(prod_Square(70))\nprint(prod_Square(72))\nprint(prod_Square(74))\nprint(prod_Square(76))\nprint(prod_Square(78))\nprint(prod_Square(80))\nprint(prod_Square(82))\nprint(prod_Square(84))\nprint(prod_Square(86))\nprint(prod_Square(88))\nprint(prod_Square(90))\nprint(prod_Square(92))\nprint(prod_Square(94))\nprint(prod_Square(96))\nprint(prod_Square(98))\nprint(prod_Square(100))\nprint(prod_Square(102))\n"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t\tfor i in range(n): \n\t\t\twhile arr[i] > 0 and arr[i] <= n and arr[arr[i] - 1]!= arr[i]: \n\t\t\t\tarr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] \n\t\tfor i in range(n): \n\t\t\tif arr[i]!= i + 1: \n\t\t\t\treturn i + 1\n\t\treturn n + 1\n\narr = [1, 2, 0] \nn = len(arr) \nprint(first_Missing_Positive(arr, n)) \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        while nums[i] > 0 and nums[i] <= len(nums) and nums[nums[i] - 1]!= nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\n\nprint(firstMissingPositive([3, 4, -1, 1]))\nprint(firstMissingPositive([1, 2, 0]))\n<file_sep>/Python/Array/2.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t\tcount = 0\n\t\tfor x in range(x1,x2+1):\n\t\t\tfor y in range(y1,y2+1):\n\t\t\t\tif x==0 or y==0:\n\t\t\t\t\tcount+=1\n\t\t\t\telif x>0 and y>0:\n\t\t\t\t\tcount+=1\n\t\treturn count\n\nprint(count_Intgral_Points(1,1,3,3))\nprint(count_Intgral_Points(1,1,4,4))\nprint(count_Intgral_Points(1,1,5,5))\nprint(count_Intgral_Points(1,1,6,6))\nprint(count_Intgral_Points(1,1,7,7))\nprint(count_Intgral_Points(1,1,8,8))\nprint(count_Intgral_Points(1,1,9,9))\nprint(count_Intgral_Points(1,1,10,10))\nprint(count_Intgral_Points(1,1,11,11))\nprint(count_Intgral_Points(1,1,12,12))\nprint(count_Intgral_Points(1,1,13,13))\nprint(count_Intgral_Points(1,1,14,14))\nprint(count_Intgral_Points(1,1,15,15))\nprint(count_Intgral_Points(1,1,16,16))\nprint(count_Intgral_Points(1,1,17,17))\nprint(count_Intgral_Points(1,1,18,18))\nprint(count_Intgral_Points(1,1,19,19))\nprint(count_Intgral_Points(1,1,20,20))\nprint(count_Intgral_Points(1,1,21,21))\nprint(count_Intgral_Points(1,1,22,22))\nprint(count_Intgral_Points(1,1,23,23))\nprint(count_Intgral_Points(1,"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t\tif monthname3 in ['April','June','September','November']:\n\t\t\tprint(\"Month has 30 days\")\n\t\telse:\n\t\t\tprint(\"Month has 31 days\")\n\nmonthname3 = input(\"Enter the month name: \")\ncheck_monthnumber(monthname3)\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_6.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_7.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t\n    # Using isdigit() to check if string is digit or not \n    if str.isdigit(): \n        return False\n  \n    # Using isalpha() to check if string is alphabet or not \n    if str.isalpha(): \n        return False\n  \n    return True\n\nstr = input(\"Enter a string: \")\nif check_String(str): \n    print(\"Yes\") \nelse: \n    print(\"No\") <file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(4,0,-1):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j,end=\" \")\n    print()\n\nfor i in range(4,0,-1):\n    for j in range(1,i"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t\treturn tuple(set(test_tup))\n\nprint(remove_tuple((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9)))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the name of the user on which the routine is running.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit and set the new value.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the size of an object in bytes.\n\"\"\"\nimport sys\nprint(sys.getsizeof(1))\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the size of an object in bytes.\n\"\"\"\nimport sys\nprint(sys.getsizeof(1))\nprint(sys.getsizeof(1.0))\nprint(sys.getsizeof(1+2j))\nprint(sys.getsizeof('1'))\nprint(sys.getsizeof(\"1\"))\nprint(sys.getsizeof([1,2,3]))\nprint(sys"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t\treturn int(n, 8)  \nn = input(\"Enter octal number: \")  \nprint(\"Decimal number is: \", octal_To_Decimal(n))  <file_sep>/Python/Python_Assignment_1/Python_Assignment_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\nfor i in range(4, 0, -1):\n    for j in"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t\tif n == 0: \n\t\t\treturn -1\n\t\tif arr[n-1] == x: \n\t\t\treturn n-1\n\t\tif arr[n-1] > x: \n\t\t\treturn first(arr, x, n-1) \n\t\treturn first(arr, x, n-1) \n\narr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8] \nx = 2\nn = len(arr) \nprint(\"First occurrence of\", x, \"is\", first(arr, x, n)) \n<file_sep>/Python/Array/1.py\n\"\"\"\nWrite a Python program to find the second smallest number in a list.\n\"\"\"\ndef secondSmallest(arr, n): \n    arr.sort() \n    return arr[1] \n\narr = [12, 13, 1, 10, 34, 1] \nn = len(arr) \nprint(\"Second smallest number is\", secondSmallest(arr, n)) \n<file_sep>/Python/Array/10.py\n\"\"\"\nWrite a Python program to find the index of an item in a specified list.\n\"\"\"\ndef search(arr, x, n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i; \n    return -1; \n\narr = [8, 3, 1, 2, 4, 5, 6, 7] \nx = 1\nn = len(arr) \nprint(search(arr, x, n)) \n<file_sep>/Python/Array/11.py\n\"\"\"\nWrite a Python program to find the index of an item of a specified list.\n\"\"\"\ndef search(arr, x, n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i; \n    return -1; \n\narr = [8, 3, 1, 2, 4, 5, 6, 7] \nx = 1\nn = len(arr) \nprint(search(arr, x, n)) \n<file_sep>/Python/Array/12.py\n\"\"\"\nWrite a Python program to find the index of an item of a"}
{"ID": 559, "source": "MBPP:196", "prompt": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:type K: int\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x)!= K]\n\n\"\"\"\n"}
{"ID": 560, "source": "MBPP:197", "prompt": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t\treturn test_tup1 ** test_tup2\n\n\"\"\"\nWrite a function to perform the division of the given two tuples.\n\"\"\"\ndef find_division(test_tup1, test_tup2):\n\t\treturn test_tup1 / test_tup2\n\n\"\"\"\nWrite a function to perform the floor division of the given two tuples.\n\"\"\"\ndef find_floor_division(test_tup1, test_tup2):\n\t\treturn test_tup1 // test_tup2\n\n\"\"\"\nWrite a function to perform the modulo division of the given two tuples.\n\"\"\"\ndef find_modulo_division(test_tup1, test_tup2):\n\t\treturn test_tup1 % test_tup2\n\n\"\"\"\nWrite a function to perform the bitwise AND of the given two tuples.\n\"\"\"\ndef find_bitwise_and(test_tup1, test_tup2):\n\t\treturn test_tup1 & test_tup2\n\n\"\"\"\nWrite a function to perform the bitwise OR of the given two tuples.\n\"\"\"\ndef find_bitwise_or(test_tup1, test_tup2):\n\t\treturn test_tup1 | test_tup2\n\n\"\"\"\nWrite a function to perform the bitwise XOR of the given two tuples.\n\"\"\"\ndef find_bitwise_xor(test_tup1, test_tup2):\n\t\treturn test_tup1 ^ test_tup2\n\n\"\"\"\nWrite a function to perform the bitwise NOT of the given tuple.\n\"\"\"\ndef find_bitwise_not(test_tup):\n\t\treturn ~test_tup\n\n\"\"\"\nWrite a function to perform the left shift of the given tuple.\n\"\"\"\ndef find_left_shift(test_tup, test_num):\n\t\treturn test_tup << test_num\n\n\"\"\"\nWrite a function to perform the right shift of the given tuple.\n\"\"\"\ndef find_right_shift(test_tup, test_num):\n\t\treturn test_tup >> test_num\n\n\"\"\"\nWrite a function to perform the bitwise AND of the given two tuples.\n\"\"\"\ndef find_bitwise_and(test_tup1, test_tup2):\n\t\treturn test_tup1 & test_tup2\n\n\"\"\"\nWrite a function to perform the bitwise OR of the given"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t\t\"\"\"\n\t\ta,b: positive floats\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest triangle that can be inscribed in a circle.\n\"\"\"\ndef largest_triangle_circle(r): \n\t\t\"\"\"\n\t\tr: positive float\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in a circle.\n\"\"\"\ndef largest_regular_polygon_circle(r): \n\t\t\"\"\"\n\t\tr: positive float\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in an ellipse.\n\"\"\"\ndef largest_regular_polygon_ellipse(a,b): \n\t\t\"\"\"\n\t\ta,b: positive floats\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in a square.\n\"\"\"\ndef largest_regular_polygon_square(s): \n\t\t\"\"\"\n\t\ts: positive float\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in a rectangle.\n\"\"\"\ndef largest_regular_polygon_rectangle(w,h): \n\t\t\"\"\"\n\t\tw,h: positive floats\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in a triangle.\n\"\"\"\ndef largest_regular_polygon_triangle(a,b,c): \n\t\t\"\"\"\n\t\ta,b,c: positive floats\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest regular polygon that can be inscribed in a hexagon.\n\"\"\"\ndef largest_regular_polygon_hexagon(s): \n\t\t\"\"\"\n\t\ts: positive float\n\t\treturns: a float\n\t\t\"\"\"\n\t\t# Your code here\n\t\treturn 0\n\n\"\"\"\nWrite a function to find the largest"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn n & ~(n-1)\n\nn = 10\nprint(highest_Power_of_2(n))\n\nn = 12\nprint(highest_Power_of_2(n))\n\nn = 16\nprint(highest_Power_of_2(n))\n\nn = 20\nprint(highest_Power_of_2(n))\n\nn = 25\nprint(highest_Power_of_2(n))\n\nn = 31\nprint(highest_Power_of_2(n))\n\nn = 32\nprint(highest_Power_of_2(n))\n\nn = 64\nprint(highest_Power_of_2(n))\n\nn = 128\nprint(highest_Power_of_2(n))\n\nn = 256\nprint(highest_Power_of_2(n))\n\nn = 512\nprint(highest_Power_of_2(n))\n\nn = 1024\nprint(highest_Power_of_2(n))\n\nn = 2048\nprint(highest_Power_of_2(n))\n\nn = 4096\nprint(highest_Power_of_2(n))\n\nn = 8192\nprint(highest_Power_of_2(n))\n\nn = 16384\nprint(highest_Power_of_2(n))\n\nn = 32768\nprint(highest_Power_of_2(n))\n\nn = 65536\nprint(highest_Power_of_2(n))\n\nn = 131072\nprint(highest_Power_of_2(n))\n\nn = 262144\nprint(highest_Power_of_2(n))\n\nn = 524288\nprint(highest_Power_of_2(n))\n\nn = 1048576\nprint(highest_Power_of_2(n))\n\nn = 2097152\nprint(highest_Power_of_2(n))\n"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t\tmax_value = max(list1)\n\t\tmax_index = []\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] == max_value:\n\t\t\t\tmax_index.append(i)\n\t\treturn max_index\n\nprint(position_max([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the maximum value in a given list.\n\"\"\"\ndef max_value(list1):\n\tmax_value = max(list1)\n\treturn max_value\n\nprint(max_value([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_3.py\n\"\"\"\nWrite a function to find the minimum value in a given list.\n\"\"\"\ndef min_value(list1):\n\tmin_value = min(list1)\n\treturn min_value\n\nprint(min_value([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_4.py\n\"\"\"\nWrite a function to find the average value in a given list.\n\"\"\"\ndef average_value(list1):\n\taverage_value = sum(list1)/len(list1)\n\treturn average_value\n\nprint(average_value([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_2.py\n\"\"\"\nWrite a function to find the minimum value in a given list.\n\"\"\"\ndef min_value(list1):\n\tmin_value = min(list1)\n\treturn min_value\n\nprint(min_value([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport { createStore, applyMiddleware } from'redux';\nimport ReduxThunk from'redux-thunk"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst[1:] == lst[:-1]\n\nlst = [10, 20, 30, 40, 50, 30] \nprint(chkList(lst)) \n\nlst = [10, 20, 30, 40, 50, 60] \nprint(chkList(lst)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef sum_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_n_numbers(10))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef sum_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_n_numbers(10))\n\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef sum_n_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_n_numbers(10))\n\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t\treturn str1[::2]\n\nprint(remove_even(\"Hello World\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t\t# convert to binary and count set bits \n\t\treturn bin(n1 ^ n2).count(\"1\") \n\n# Driver program \nn1 = 10\nn2 = 20\nprint(hamming_Distance(n1, n2)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t\tcount = 0\n\t\tfor i in s :\n\t\t\tif i == c :\n\t\t\t\tcount += 1\n\t\treturn count\n\ns = input(\"Enter a string : \")\nc = input(\"Enter a character : \")\nprint(count(s,c))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,6) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(4,0,-1) :\n\tfor j in range(1,i+1) :\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6) :\n\tfor j in range"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t\t\"\"\"\n\t\tThis function takes a tuple as an argument and returns the number of inversions in the tuple.\n\t\t\"\"\"\n\t\tinversion_count = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tfor j in range(i+1, len(test_tup)):\n\t\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\t\tinversion_count += 1\n\t\treturn inversion_count\n\ndef main():\n\t\"\"\"\n\tThis function takes a tuple list as an argument and returns the number of inversions in the tuple list.\n\t\"\"\"\n\ttest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\tprint(inversion_elements(test_tup))\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/README.md\n# Python-Programming\nThis repository contains the solutions to the problems in the book \"Python Programming\" by <NAME>.\n<file_sep>/Chapter 1/1.1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\ndef pattern():\n\t\"\"\"\n\tThis function prints the pattern.\n\t\"\"\"\n\tfor i in range(1, 6):\n\t\tprint(\"*\" * i)\n\ndef main():\n\t\"\"\"\n\tThis function calls the pattern function.\n\t\"\"\"\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/Chapter 1/1.2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\ndef pattern():\n\t\"\"\"\n\tThis function prints the pattern.\n\t\"\"\"\n\tfor i in range(1, 6):\n\t\tprint(str(i) * i)\n\ndef main():\n\t\"\"\"\n\tThis function calls the pattern function.\n\t\"\"\"\n\tpattern()\n\nif __name__ == \"__main__\":\n\tmain()\n<file_sep>/Chapter 1/1.3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\ndef pattern"}
{"ID": 569, "source": "MBPP:206", "prompt": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t\treturn tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n\nprint(concatenate_elements((1,2,3,4,5)))\nprint(concatenate_elements((1,2,3,4,5,6)))\nprint(concatenate_elements((1,2,3,4,5,6,7)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)))\nprint(concatenate_elements((1,2,3,4"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t\tn = len(str) \n\t\tL = [[0 for x in range(n + 1)] for x in range(n + 1)] \n\n\t\tfor i in range(1, n + 1): \n\t\t\tfor j in range(1, n + 1): \n\t\t\t\tif (str[i - 1] == str[j - 1] and i!= j): \n\t\t\t\t\tL[i][j] = 1 + L[i - 1][j - 1] \n\t\t\t\telse: \n\t\t\t\t\tL[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n\t\treturn L[n][n] \n\nstr = \"AABEBCDD\"\nprint(find_longest_repeating_subseq(str)) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.\n\"\"\"\ndef lcs(X, Y, m, n): \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    return L[m][n] \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(lcs(X, Y, len(X), len(Y))) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Palindromic Subsequence.py\n\"\"\"\nGiven a sequence, find the length of the longest palindromic subsequence in it.\n\"\"\"\ndef lps(str): \n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n\n    for i in range(n): \n        L[i][i] ="}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t\treturn re.match(r'^[+-]?\\d+(\\.\\d{1,2})?$', num)\n\nprint(is_decimal('1.23'))\nprint(is_decimal('1.234'))\nprint(is_decimal('1.2345'))\nprint(is_decimal('1.23456'))\nprint(is_decimal('1.234567'))\nprint(is_decimal('1.2345678'))\nprint(is_decimal('1.23456789'))\nprint(is_decimal('1.234567890'))\nprint(is_decimal('1.2345678901'))\nprint(is_decimal('1.23456789012'))\nprint(is_decimal('1.234567890123'))\nprint(is_decimal('1.2345678901234'))\nprint(is_decimal('1.23456789012345'))\nprint(is_decimal('1.234567890123456'))\nprint(is_decimal('1.2345678901234567'))\nprint(is_decimal('1.23456789012345678'))\nprint(is_decimal('1.234567890123456789'))\nprint(is_decimal('1.2345678901234567890'))\nprint(is_decimal('1.23456789012345678901'))\nprint(is_decimal('1.234567890123456789012'))\nprint(is_decimal('1.2345678901234567890123'))\nprint(is_decimal('1.23456789012345"}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t\theap[0] = a\n\t\theapify(heap,0)\n\ndef heap_delete(heap):\n\theap[0] = heap[-1]\n\theapify(heap,0)\n\theap.pop()\n\ndef heap_insert(heap,a):\n\theap.append(a)\n\theapify(heap,len(heap)-1)\n\ndef heap_sort(heap):\n\tfor i in range(len(heap)-1,0,-1):\n\t\theap_delete(heap)\n\treturn heap\n\ndef heap_replace_sort(heap,a):\n\theap_replace(heap,a)\n\treturn heap_sort(heap)\n\ndef heap_insert_sort(heap,a):\n\theap_insert(heap,a)\n\treturn heap_sort(heap)\n\ndef heap_sort_test():\n\theap = [1,2,3,4,5,6,7,8,9,10]\n\theap_sort(heap)\n\tprint(heap)\n\theap = [1,2,3,4,5,6,7,8,9,10]\n\theap_replace_sort(heap,11)\n\tprint(heap)\n\theap = [1,2,3,4,5,6,7,8,9,10]\n\theap_insert_sort(heap,11)\n\tprint(heap)\n\nheap_sort_test()<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t\n#\treturn re.match(r\"^[a-z0-9]+$\", string)\n\treturn re.match(r\"^[a-z0-9]+$\", string) is not None\n\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))\nprint(is_allowed_specific_char(\"*&%@#!}{\"))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tif (i & (i << 10)!= 0): \n\t\t\t\tcount += 1\n\t\treturn count \n\nn = 100\nprint(count_Num(n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i*i*i*i\n\t\treturn sum\n\nprint(fourth_Power_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c', 'd')))\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n# Test\nprint(concatenate_strings(('a', 'b'), ('c"}
{"ID": 577, "source": "MBPP:214", "prompt": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t", "predict": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t\treturn radian * 180 / math.pi\n\nprint(degree_radian(math.pi))\nprint(degree_radian(math.pi / 2))\nprint(degree_radian(math.pi / 4))\nprint(degree_radian(math.pi / 6))\nprint(degree_radian(math.pi / 8))\nprint(degree_radian(math.pi / 10))\nprint(degree_radian(math.pi / 12))\nprint(degree_radian(math.pi / 14))\nprint(degree_radian(math.pi / 16))\nprint(degree_radian(math.pi / 18))\nprint(degree_radian(math.pi / 20))\nprint(degree_radian(math.pi / 22))\nprint(degree_radian(math.pi / 24))\nprint(degree_radian(math.pi / 26))\nprint(degree_radian(math.pi / 28))\nprint(degree_radian(math.pi / 30))\nprint(degree_radian(math.pi / 32))\nprint(degree_radian(math.pi / 34))\nprint(degree_radian(math.pi / 36))\nprint(degree_radian(math.pi / 38))\nprint(degree_radian(math.pi / 40))\nprint(degree_radian(math.pi / 42))\nprint(degree_radian(math.pi / 44))\nprint(degree_radian(math.pi / 46))\nprint(degree_radian(math.pi / 48))\nprint(degree_radian(math.pi / 50))\nprint(degree_radian(math.pi / 52))\nprint(degree_radian(math.pi / 54))\nprint(degree_radian(math.pi / 56))\nprint(degree_radian(math.pi / 58))\nprint(degree_radian(math.pi / 60))\nprint(degree_radian(math."}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\t\"\"\"\n\t\tDecode a run-length encoded list.\n\t\t\"\"\"\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] * alist[1] + decode_list(alist[2:])\n\n\"\"\"\nWrite a function to decode a run-length encoded string.\n\"\"\"\ndef decode_string(astr):\n\t\t\"\"\"\n\t\tDecode a run-length encoded string.\n\t\t\"\"\"\n\t\tif astr == '':\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [astr[0]] * int(astr[1]) + decode_string(astr[2:])\n\n\"\"\"\nWrite a function to encode a list.\n\"\"\"\ndef encode_list(alist):\n\t\t\"\"\"\n\t\tEncode a list.\n\t\t\"\"\"\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [len(alist)] + [alist[0]] + encode_list(alist[1:])\n\n\"\"\"\nWrite a function to encode a string.\n\"\"\"\ndef encode_string(astr):\n\t\t\"\"\"\n\t\tEncode a string.\n\t\t\"\"\"\n\t\tif astr == '':\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [len(astr)] + [astr[0]] + encode_string(astr[1:])\n\n\"\"\"\nWrite a function to encode a list of lists.\n\"\"\"\ndef encode_list_of_lists(alist):\n\t\t\"\"\"\n\t\tEncode a list of lists.\n\t\t\"\"\"\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [len(alist)] + [alist[0]] + encode_list_of_lists(alist[1:])\n\n\"\"\"\nWrite a function to encode a string of strings.\n\"\"\"\ndef encode_string_of_strings(astr):\n\t\t\"\"\"\n\t\tEncode a string of strings.\n\t\t\"\"\"\n\t\tif astr == '':\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [len(astr)] + [astr[0]] + encode_string_of_strings(astr[1:])\n\n\"\"\"\nWrite a function to encode a list of lists of lists.\n\"\"\"\ndef encode_list_of_lists_of_lists(alist):\n\t\t\"\"\"\n\t\tEncode a list of lists of lists.\n\t\t\"\"\"\n\t\tif alist == []:\n\t\t\treturn []\n\t"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\n    # Check if list1 is subset of list2 \n    if(all(item in list2 for item in list1)): \n        print(\"List1 is subset of list2\") \n    else: \n        print(\"List1 is not a subset of list2\") \n  \n# Driver Code \nlist1 = [1, 4, 6, 8] \nlist2 = [1, 2, 3, 4, 6, 7, 8] \ncheck_subset_list(list1, list2) \nlist1 = [1, 2, 3] \nlist2 = [1, 2, 3, 4, 5] \ncheck_subset_list(list1, list2) \n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\n    # Check if list1 is subset of list2 \n    if(all(item in list2 for item in list1)): \n        print(\"List1 is subset of list2\") \n    else: \n        print(\"List1 is not a subset of list2\") \n  \n# Driver Code \nlist1 = [1, 4, 6, 8] \nlist2 = [1, 2, 3, 4, 6, 7, 8] \ncheck_subset_list(list1, list2) \nlist1 = [1, 2, 3] \nlist2 = [1, 2, 3, 4, 5] \ncheck_subset_list(list1, list2) \n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\n    # Check if list1 is subset of list2 \n    if(all(item in list2 for item in list1)): \n        print(\"List1 is subset of list2\") \n    else: \n        print(\"List1 is not a subset of list2\") \n  \n# Driver Code \nlist1 = [1, 4, 6, 8] \nlist2 = [1, 2, 3, 4, 6, 7, 8] \ncheck_subset_list(list"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\n    # Create an empty hashset \n    s = set() \n  \n    # Traverse the given string \n    for i in str: \n  \n        # If the current character is not present in hashset, \n        # then add it \n        if i not in s: \n            s.add(i) \n  \n        # If the current character is present in hashset, \n        # then return true \n        else: \n            return i \n  \n    # If no character is repeating, then return false \n    return False\n\n# Driver Code \nif __name__ == '__main__': \n    str = \"geeksforgeeks\"\n    print(first_Repeated_Char(str)) \n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\"\"\"\n\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i])\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search is a fast search algorithm with run-time complexity of Ο(log n).\nThis search algorithm works on the principle of divide and conquer.\nFor this algorithm to work properly, the data collection should be in the sorted form.\n\"\"\"\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid+1, r, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, 0"}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t\tif A == B:  \n\t\t\treturn 0  \n\t\tif A > B:  \n\t\t\tA, B = B, A  \n\t\tif B % A == 0:  \n\t\t\treturn B // A  \n\t\treturn 1 + min_Operations(A, B % A)  \nA = int(input(\"Enter the first number: \"))  \nB = int(input(\"Enter the second number: \"))  \nprint(\"Minimum operations required to make two numbers equal: \", min_Operations(A, B))  <file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 582, "source": "MBPP:219", "prompt": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:param K: int\n\t\t:return: tuple\n\t\t\"\"\"\n\t\tif K > len(test_tup):\n\t\t\treturn \"K is greater than length of tuple\"\n\t\telse:\n\t\t\treturn (min(test_tup[:K]), max(test_tup[:K]))\n\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), 3))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), 10))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), 11))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), 0))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), -1))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), 1.5))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), \"a\"))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), None))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), True))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), False))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), [1,2,3]))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10), {\"a\":1, \"b\":2}))\nprint(extract_min_max((1,2,3,4,5,6,7,8,9,10"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t\ttext = text.replace(\" \",\":\",n)\n\t\ttext = text.replace(\",\",\":\",n)\n\t\ttext = text.replace(\".\",\":\",n)\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_all_specialchar(text):\n\t\ttext = text.replace(\" \",\":\")\n\t\ttext = text.replace(\",\",\":\")\n\t\ttext = text.replace(\".\",\":\")\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given character with a colon.\n\"\"\"\ndef replace_all_char(text,char):\n\t\ttext = text.replace(char,\":\")\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string(text,string):\n\t\ttext = text.replace(string,\":\")\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string_with_char(text,string,char):\n\t\ttext = text.replace(string,char)\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string_with_string(text,string,string2):\n\t\ttext = text.replace(string,string2)\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string_with_string_and_char(text,string,string2,char):\n\t\ttext = text.replace(string,string2+char)\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string_with_string_and_char_and_string(text,string,string2,char,string3):\n\t\ttext = text.replace(string,string2+char+string3)\n\t\treturn text\n\n\"\"\"\nWrite a function to replace all occurrences of a given string with a colon.\n\"\"\"\ndef replace_all_string_with_string_and_char_and_string_and_char(text,string,string2,"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\tfor num in nums:\n\t\t\tif num % 2 == 0:\n\t\t\t\treturn num\n\nprint(first_even([1,2,3,4,5,6,7,8,9]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list of numbers.\n\"\"\"\ndef sum_of_numbers(nums):\n\tsum = 0\n\tfor num in nums:\n\t\tsum += num\n\treturn sum\n\nprint(sum_of_numbers([1,2,3,4,5,6,7,8,9]))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the largest number in a given list of numbers.\n\"\"\"\ndef largest_number(nums):\n\tlargest = nums[0]\n\tfor num in nums:\n\t\tif num > largest:\n\t\t\tlargest = num\n\treturn largest\n\nprint(largest_number([1,2,3,4,5,6,7,8,9]))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the average of all the numbers in a given list of numbers.\n\"\"\"\ndef average_of_numbers(nums):\n\tsum = 0\n\tfor num in nums:\n\t\tsum += num\n\treturn sum / len(nums)\n\nprint(average_of_numbers([1,2,3,4,5,6,7,8,9]))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t\treturn all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1,2,3,4)))\nprint(check_type((1,2,3,4.0)))\nprint(check_type((1,2,3,4.0,5.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0)))\nprint(check_type((1,2,3,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12."}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t\n#\tif n == 0:\n#\t\treturn False\n#\t\n#\tif n == 1:\n#\t\treturn True\n#\t\n#\tif arr[n-1] == x:\n#\t\treturn True\n#\t\n#\tif arr[n-1]!= x:\n#\t\treturn False\n#\t\n#\treturn is_majority(arr, n-1, x)\n\n\tif n == 0:\n\t\treturn False\n\t\n\tif n == 1:\n\t\treturn True\n\t\n\tif arr[n-1] == x:\n\t\treturn True\n\t\n\tif arr[n-1]!= x:\n\t\treturn False\n\t\n\treturn is_majority(arr, n-1, x)\n\narr = [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n\nn = 10\nprint(count_Set_Bits(n))\n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid+1, r, x)\n    else:\n        return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Sorting/Bubble_Sort.py\n\"\"\"\nBubble Sort\n\"\"\"\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nbubble_sort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i])\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\"\"\"\n\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t\tif high < low: \n\t\t\treturn arr[0] \n\t\tif high == low: \n\t\t\treturn arr[low] \n\t\tmid = int((low + high)/2) \n\t\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\t\treturn arr[mid + 1] \n\t\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\t\treturn arr[mid] \n\t\tif arr[high] > arr[mid]: \n\t\t\treturn find_Min(arr, low, mid-1) \n\t\treturn find_Min(arr, mid+1, high) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint (\"Minimum element is\", find_Min(arr, 0, n-1)) \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(arr):\n\tn = len(arr)\n\tsum_n = (n+1)*(n+2)/2\n\tsum_arr = sum(arr)\n\treturn int(sum_n - sum_arr)\n\narr = [1, 2, 4, 5, 6]\nprint(find_missing_number(arr))\n<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate_number(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tif arr[abs(arr[i])-1] < 0:\n\t\t\treturn abs(arr[i])\n\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [1, 2, 3, 1, 3, 6, 6]\nprint(find_duplicate_number(arr))\n<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t\treturn str[::2]\n\nprint(odd_values_string(\"Hello\"))\nprint(odd_values_string(\"Python\"))\nprint(odd_values_string(\"Java\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"C#\"))\nprint(odd"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t\tif a < b and a < c: \n\t\t\treturn a \n\t\telif b < a and b < c: \n\t\t\treturn b \n\t\telse: \n\t\t\treturn c \n\n# Driver Code \na = 10\nb = 20\nc = 30\nprint(min_of_three(a, b, c)) \n\na = 25\nb = 15\nc = 20\nprint(min_of_three(a, b, c)) \n\na = 10\nb = 20\nc = 10\nprint(min_of_three(a, b, c)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python"}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t\tmask = 1 << r\n\t\tmask = mask - 1\n\t\tmask = mask << l\n\t\tmask = ~mask\n\t\treturn (n & mask) == 0\n\nn = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n<file_sep>/Python/Bitwise/Bitwise_Operators/Bitwise_Operators.py\n\"\"\"\nBitwise Operators\n\nBitwise operators are used to perform bit-by-bit operations on the binary representation of the operands.\n\nThe bitwise operators are:\n\n& - AND\n| - OR\n^ - XOR\n~ - NOT\n<< - Left Shift\n>> - Right Shift\n\"\"\"\n\n# AND\n\"\"\"\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation on the binary representation of the operands.\n\nThe bitwise AND operator & is used to perform bit-by-bit AND operation"}
{"ID": 592, "source": "MBPP:229", "prompt": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t\n\n\t# Your code here\n\ti = 0\n\tj = 0\n\twhile i < n and j < n:\n\t\tif arr[i] < 0:\n\t\t\ti += 1\n\t\telse:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tj += 1\n\treturn arr\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)\nprint(re_arrange_array(arr, n))\n<file_sep>/Arrays/1.py\n\"\"\"\nGiven an array of integers, find the first repeating element in it. We need to find the element that occurs more than once and whose index of first occurrence is smallest.\n\"\"\"\ndef first_repeating(arr, n):\n\t# Your code here\n\tfor i in range(n):\n\t\tif arr[abs(arr[i]) - 1] < 0:\n\t\t\treturn abs(arr[i])\n\t\telse:\n\t\t\tarr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n\treturn -1\n\narr = [1, 5, 3, 4, 3, 5, 6]\nn = len(arr)\nprint(first_repeating(arr, n))\n<file_sep>/Arrays/2.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in it.\n\"\"\"\ndef first_missing_positive(arr, n):\n\t# Your code here\n\tfor i in range(n):\n\t\tif arr[i] <= 0:\n\t\t\tarr[i] = n + 1\n\tfor i in range(n):\n\t\tif abs(arr[i]) <= n:\n\t\t\tarr[abs(arr[i]) - 1] = -abs(arr[abs(arr[i]) - 1])\n\tfor i in range(n):\n\t\tif arr[i] > 0:\n\t\t\treturn i + 1\n\treturn n + 1\n\narr = [1, 2, 0]\nn = len(arr)\nprint(first_missing_positive(arr, n))\n<file_sep>/Arrays"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t\treturn char.join(str1.split())\n\nprint replace_blank(\"Hello World\",\"-\")\n<file_sep>/python/string/reverse_string.py\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\ndef reverse_string(str1):\n\treturn str1[::-1]\n\nprint reverse_string(\"Hello World\")\n<file_sep>/python/string/remove_duplicate_char.py\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(str1):\n\treturn \"\".join(set(str1))\n\nprint remove_duplicate_char(\"Hello World\")\n<file_sep>/python/string/remove_duplicate_char_2.py\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(str1):\n\treturn \"\".join(set(str1))\n\nprint remove_duplicate_char(\"Hello World\")\n\ndef remove_duplicate_char_2(str1):\n\treturn \"\".join(sorted(set(str1)))\n\nprint remove_duplicate_char_2(\"Hello World\")\n<file_sep>/python/string/remove_duplicate_char_3.py\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(str1):\n\treturn \"\".join(set(str1))\n\nprint remove_duplicate_char(\"Hello World\")\n\ndef remove_duplicate_char_2(str1):\n\treturn \"\".join(sorted(set(str1)))\n\nprint remove_duplicate_char_2(\"Hello World\")\n\ndef remove_duplicate_char_3(str1):\n\treturn \"\".join(sorted(set(str1),key=str1.index))\n\nprint remove_duplicate_char_3(\"Hello World\")\n<file_sep>/python/string/remove_duplicate_char_4.py\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\ndef remove_duplicate_char(str1):\n\treturn \"\".join(set(str1))\n\nprint remove_duplicate_char(\"Hello World\")\n\ndef remove_duplicate_char_2(str1):\n\treturn \"\".join(sorted(set(str1)))\n\nprint remove_duplicate_char_2(\"Hello World\")\n\ndef"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t\n    # Base Case \n    if (n == 1): \n        return tri[0][0] \n  \n    # Initialize result \n    max_sum = 0\n  \n    # Traverse bottom-up \n    for i in range(n): \n  \n        # Find the maximum sum \n        # by adding the maximum of all \n        # the numbers in the row \n        # with the number in the \n        # current row \n        max_sum = max(max_sum, tri[n - 1][i] + max_sum) \n  \n    return max_sum \n\n# Driver Code \nif __name__ == '__main__': \n    tri = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]] \n    n = len(tri) \n    print(max_sum(tri, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t\tlist1.sort()\n\t\tprint(list1[-n:])\n\nlarg_nnum([1,2,3,4,5,6,7,8,9,10],3)\n<file_sep>/python/python_basic/python_basic_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basic/python_basic_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a,b,c):\n\tif a==b==c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/python/python_basic/python_basic_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef small_num(list1):\n\tlist1.sort()\n\tprint(list1[0])\n\nsmall_num([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python/python_basic/python_basic_11.py\n\"\"\"\nWrite a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20.\n\"\"\"\ndef sum_two(a,b):\n\tif 15<=a+b<=20:\n\t\treturn 20\n\telse:\n\t\treturn a+b\n\nprint(sum_two(1,2))\nprint(sum_two(15,2))\n<file_sep>/python/python_basic/python_basic_13.py\n\"\"\"\nWrite a Python program to get"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t\treturn 2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef totalsuface_cylinder(r,h):\n\t\treturn 2*math.pi*r*h+2*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef suface_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsuface_cone(r,h):\n\t\treturn math.pi*r*math.sqrt(h**2+r**2)\n\n\"\"\"\nWrite a function to find the total surface area of a cone.\n\"\"\"\ndef totalsuface_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn math.pi*r**2*h/3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef suface_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsuface_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the total surface area of a sphere.\n\"\"\"\ndef totalsuface_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4*math.pi*r**3/3\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\ndef suface_hemisphere(r):\n\t"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l**3\n\nprint(volume_cube(3))\n<file_sep>/python_basics/01_python_basics/01_01_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python_basics/01_python_basics/01_03_variables.py\n\"\"\"\nWrite a program that creates three variables, x, y and z and assigns them\n10, 20 and 30 respectively. Then print the sum of all the variables.\n\"\"\"\nx = 10\ny = 20\nz = 30\nprint(x+y+z)\n<file_sep>/python_basics/01_python_basics/01_02_variables.py\n\"\"\"\nWrite a program that creates a variable called name and assigns it a string,\n\"Bob\". Then print \"Hello, Bob!\"\n\"\"\"\nname = \"Bob\"\nprint(\"Hello, \"+name+\"!\")\n<file_sep>/python_basics/01_python_basics/01_04_variables.py\n\"\"\"\nWrite a program that creates two variables, x and y and assigns them 10 and 20\nrespectively. Then print the result of 4 times x plus 5 times y.\n\"\"\"\nx = 10\ny = 20\nprint(4*x+5*y)\n<file_sep>/python_basics/01_python_basics/01_05_variables.py\n\"\"\"\nWrite a program that creates two variables, x and y and assigns them 14 and 2.\nThen print the result of x divided by y.\n\"\"\"\nx = 14\ny = 2\nprint(x/y)\n<file_sep>/python_basics/01_python_basics/01_06_variables.py\n\"\"\"\nWrite a program that creates two variables, x and y and assigns them 14 and 2.\nThen print the result of x divided by y with a remainder.\n\"\"\"\nx = 14\ny = 2\nprint(x%y)\n<file_sep>/python_basics/01_python_basics/01_07_variables.py\n\"\"\"\nWrite a program that creates two variables, x"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t\n    # If n is odd, then n-1 will make it even \n    if (n & 1): \n        n = n - 1\n  \n    # Now n is even. \n    # Set all odd bits of n \n    n = n | (n >> 1) \n  \n    # Set all odd bits of n \n    n = n | (n >> 2) \n  \n    # Set all odd bits of n \n    n = n | (n >> 4) \n  \n    # Set all odd bits of n \n    n = n | (n >> 8) \n  \n    # Set all odd bits of n \n    n = n | (n >> 16) \n  \n    return n \n  \n# Driver code \nn = 10\nprint(even_bit_set_number(n)) \n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n): \n\t\n    # If n is even, then n+1 will make it odd \n    if (not n & 1): \n        n = n + 1\n  \n    # Now n is odd. \n    # Set all even bits of n \n    n = n | (n >> 1) \n  \n    # Set all even bits of n \n    n = n | (n >> 2) \n  \n    # Set all even bits of n \n    n = n | (n >> 4) \n  \n    # Set all even bits of n \n    n = n | (n >> 8) \n  \n    # Set all even bits of n \n    n = n | (n >> 16) \n  \n    return n \n  \n# Driver code \nn = 10\nprint(odd_bit_set_number(n)) \n\n\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef toggle_odd_bit_number(n): \n\t\n    # If n is even, then n+1 will make it odd \n    if (not n & 1): \n        n = n + 1\n  \n    # Now n is odd. \n    # Set all even bits of n \n    n = n ^ (n >> 1) \n  \n    # Set all even bits of n \n    n = n ^ (n >> 2) \n  \n    # Set all even bits of n \n    n = n ^ (n >> 4) \n  \n    # Set all even bits of n \n    n = n ^ (n"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t\tif N==0:\n\t\t\treturn 0\n\t\tif N==1:\n\t\t\treturn 1\n\t\tif N==2:\n\t\t\treturn 1\n\t\tif N==3:\n\t\t\treturn 1\n\t\tif N==4:\n\t\t\treturn 2\n\t\tif N==5:\n\t\t\treturn 2\n\t\tif N==6:\n\t\t\treturn 2\n\t\tif N==7:\n\t\t\treturn 2\n\t\tif N==8:\n\t\t\treturn 3\n\t\tif N==9:\n\t\t\treturn 3\n\t\tif N==10:\n\t\t\treturn 3\n\t\tif N==11:\n\t\t\treturn 3\n\t\tif N==12:\n\t\t\treturn 4\n\t\tif N==13:\n\t\t\treturn 4\n\t\tif N==14:\n\t\t\treturn 4\n\t\tif N==15:\n\t\t\treturn 4\n\t\tif N==16:\n\t\t\treturn 5\n\t\tif N==17:\n\t\t\treturn 5\n\t\tif N==18:\n\t\t\treturn 5\n\t\tif N==19:\n\t\t\treturn 5\n\t\tif N==20:\n\t\t\treturn 5\n\t\tif N==21:\n\t\t\treturn 5\n\t\tif N==22:\n\t\t\treturn 5\n\t\tif N==23:\n\t\t\treturn 5\n\t\tif N==24:\n\t\t\treturn 6\n\t\tif N==25:\n\t\t\treturn 6\n\t\tif N==26:\n\t\t\treturn 6\n\t\tif N==27:\n\t\t\treturn 6\n\t\tif N==28:\n\t\t\treturn 6\n\t\tif N==29:\n\t\t\treturn 6\n\t\tif N==30:\n\t\t\treturn 6\n\t\tif N==31:\n\t\t\treturn 6\n\t\tif N==32:\n\t\t\treturn 7\n\t\tif N==33:\n\t\t\treturn 7\n\t\tif N==34:\n\t\t\treturn 7\n\t\tif N==35:\n\t\t\treturn 7\n\t\tif N==36:\n\t\t\treturn 7\n\t\tif N==37:\n\t\t\treturn 7\n\t\tif N==38:\n\t\t\treturn 7\n\t\tif N==39:\n\t\t\treturn 7\n\t\tif"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\t# create a dictionary to store the count of each tuple\n\t\tdict_count = {}\n\t\t# iterate over the list of tuples\n\t\tfor i in test_list:\n\t\t\t# if the tuple is not present in the dictionary, add it with count 1\n\t\t\tif i not in dict_count:\n\t\t\t\tdict_count[i] = 1\n\t\t\t# if the tuple is present in the dictionary, increment the count by 1\n\t\t\telse:\n\t\t\t\tdict_count[i] += 1\n\t\t# create a list to store the tuples with count greater than 1\n\t\tresult = []\n\t\t# iterate over the dictionary\n\t\tfor key, value in dict_count.items():\n\t\t\t# if the count is greater than 1, append the tuple to the result list\n\t\t\tif value > 1:\n\t\t\t\tresult.append(key)\n\t\t# return the result list\n\t\treturn result\n\n# test the function\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (9, 10)]\nprint(check_occurences(test_list))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\t\"\"\"\n\t:param a: int\n\t:param b: int\n\t:param c: int\n\t:return"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t\tn = len(str) \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tfor j in range(i, n): \n\t\t\t\tif (str[i]!= str[j]): \n\t\t\t\t\tcount += 1\n\t\treturn count \n\nstr = \"abc\"\nprint(number_of_substrings(str))\n<file_sep>/Python/Algorithms/Sorting/selection_sort.py\n\"\"\"\nSelection Sort\n\nThe selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.\n\n1) The subarray which is already sorted.\n2) Remaining subarray which is unsorted.\n\nIn every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.\n\n\"\"\"\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\narr = [64, 25, 12, 22, 11]\nprint(selection_sort(arr))\n<file_sep>/Python/Algorithms/Sorting/bubble_sort.py\n\"\"\"\nBubble Sort\n\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [64, 25, 12, 22, 11]\nprint(bubble_sort(arr))\n<file_sep>/Python/Algorithms/Sorting/insertion_sort.py\n\"\"\"\nInsertion Sort\n\nInsertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands.\n\n\"\"\"\n\ndef insertion_sort("}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif m == 1: \n\t\t\treturn 1\n\t\tif m == 2: \n\t\t\treturn 2\n\t\tif n == 2: \n\t\t\treturn 2\n\t\treturn get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2) \n\nm = 3\nn = 3\nprint(get_total_number_of_sequences(m,n))\n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.\n\"\"\"\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0\n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1) \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)) \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn = len(Y) \nprint(\"Length of LCS is \", lcs(X, Y, m, n)) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Increasing Subsequence.py\n\"\"\"\nGiven an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.\n\"\"\"\ndef lis(arr, n): \n    lis = [1]*n \n    for i in range (1, n): \n        for j in range(0, i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis) \n\narr = [10, 22, 9, 33, 21, 50, 41, 60] \nn = len(arr) \nprint(\"Length of lis is\", lis(arr, n)) \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Palindromic"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t\tlist1[-1]=list2\n\t\treturn list1\n\nprint(replace_list([1,2,3,4,5],[10,20,30]))\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n\n# Syntax: [expression for item in list]\n\n# Example 1\n\n# Without list comprehension\n\nsquares = []\nfor i in range(10):\n\tsquares.append(i**2)\nprint(squares)\n\n# With list comprehension\n\nsquares = [i**2 for i in range(10)]\nprint(squares)\n\n# Example 2\n\n# Without list comprehension\n\neven_squares = []\nfor i in range(10):\n\tif i%2 == 0:\n\t\teven_squares.append(i**2)\nprint(even_squares)\n\n# With list comprehension\n\neven_squares = [i**2 for i in range(10) if i%2 == 0]\nprint(even_squares)\n\n# Example 3\n\n# Without list comprehension\n\nsquare_dict = {}\nfor i in range(5):\n\tsquare_dict[i] = i**2\nprint(square_dict)\n\n# With list comprehension\n\nsquare_dict = {i:i**2 for i in range(5)}\nprint(square_dict)\n\n# Example 4\n\n# Without list comprehension\n\nsquare_set = set()\nfor i in range(5):\n\tsquare_set.add(i**2)\nprint(square_set)\n\n# With list comprehension\n\nsquare_set = {i**2 for i in range(5)}\nprint(square_set)\n\n# Example 5\n\n# Without list comprehension\n\nsquare_list = []\nfor i in range(5):\n\tsquare_list.append(i**2)\nprint(square_list)\n\n# With list comprehension\n\nsquare_list = [i**2 for i in range(5)]\nprint(square_list)\n\n# Example 6\n\n# Without list compreh"}
{"ID": 604, "source": "MBPP:241", "prompt": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t", "predict": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t\tarr = [[['*' for i in range(n)] for j in range(m)] for k in range(o)]\n\t\treturn arr\n\nprint(array_3d(2,3,4))\n<file_sep>/python/array/array_1d.py\n\"\"\"\nWrite a function to generate a 1d array having each element as '*'.\n\"\"\"\ndef array_1d(n):\n\t\tarr = ['*' for i in range(n)]\n\t\treturn arr\n\nprint(array_1d(5))\n<file_sep>/python/array/array_2d.py\n\"\"\"\nWrite a function to generate a 2d array having each element as '*'.\n\"\"\"\ndef array_2d(m,n):\n\t\tarr = [['*' for i in range(n)] for j in range(m)]\n\t\treturn arr\n\nprint(array_2d(2,3))\n<file_sep>/python/array/array_2d_2.py\n\"\"\"\nWrite a function to generate a 2d array having each element as '*'.\n\"\"\"\ndef array_2d(m,n):\n\t\tarr = [['*' for i in range(n)] for j in range(m)]\n\t\treturn arr\n\nprint(array_2d(2,3))\n\n\"\"\"\nWrite a function to generate a 2d array having each element as '*'.\n\"\"\"\ndef array_2d(m,n):\n\t\tarr = [['*' for i in range(n)] for j in range(m)]\n\t\treturn arr\n\nprint(array_2d(2,3))\n\n\"\"\"\nWrite a function to generate a 2d array having each element as '*'.\n\"\"\"\ndef array_2d(m,n):\n\t\tarr = [['*' for i in range(n)] for j in range(m)]\n\t\treturn arr\n\nprint(array_2d(2,3))\n\n\"\"\"\nWrite a function to generate a 2d array having each element as '*'.\n\"\"\"\ndef array_2d(m,n):\n\t\tarr = [['*' for i in range(n)] for j in range(m)]\n\t\treturn arr\n\nprint(array_2d(2,3))\n\n\"\"\"\nWrite a function to generate a 2d array having each element as '*"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t\tcount = 0\n\t\tfor i in str1:\n\t\t\tcount += 1\n\t\treturn count\n\nstr1 = input(\"Enter a string: \")\nprint(count_charac(str1))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i+j-1,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i+j-1,end=\" \")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # sort the list based on the first element of tuples \n    lst.sort(key = lambda x: x[0]) \n    return lst \n\n# Driver code \nlst = [(1, 2), (3, 4), (1, 2), (5, 6, 7), (3, 4), (3, 4)] \nprint(sort_on_occurence(lst)) \n\n# +\n\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # sort the list based on the first element of tuples \n    lst.sort(key = lambda x: x[0]) \n    return lst \n\n# Driver code \nlst = [(1, 2), (3, 4), (1, 2), (5, 6, 7), (3, 4), (3, 4)] \nprint(sort_on_occurence(lst)) \n\n# +\n\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # sort the list based on the first element of tuples \n    lst.sort(key = lambda x: x[0]) \n    return lst \n\n# Driver code \nlst = [(1, 2), (3, 4), (1, 2), (5, 6, 7), (3, 4), (3, 4)] \nprint(sort_on_occurence(lst)) \n\n# +\n\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # sort the list based on the first element of tuples \n    lst.sort(key = lambda x: x[0]) \n    return lst \n\n# Driver code \nlst = [(1, 2), (3, 4), (1, 2), (5, 6, 7), (3, 4), (3, 4)] \nprint(sort_on_occurence(lst)) \n\n# +\n\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\n"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\n    # Finding the square root of N \n    # using floor function \n    N = int(N) \n    root = int(N ** 0.5) \n  \n    # Checking if the square of root is equal to N \n    if root * root == N: \n        return N \n  \n    # Checking if the square of root is less than N \n    if root * root < N: \n        return (root + 1) * (root + 1) \n  \n    # Checking if the square of root is greater than N \n    if root * root > N: \n        return root * root \n  \n# Driver Code \nN = 121\nprint(next_Perfect_Square(N)) \n\n# +\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\n    # Finding the square root of N \n    # using floor function \n    N = int(N) \n    root = int(N ** 0.5) \n  \n    # Checking if the square of root is equal to N \n    if root * root == N: \n        return N \n  \n    # Checking if the square of root is less than N \n    if root * root < N: \n        return (root + 1) * (root + 1) \n  \n    # Checking if the square of root is greater than N \n    if root * root > N: \n        return root * root \n  \n# Driver Code \nN = 121\nprint(next_Perfect_Square(N)) \n\n# +\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\n    # Finding the square root of N \n    # using floor function \n    N = int(N) \n    root = int(N ** 0.5) \n  \n    # Checking if the square of root is equal to N \n    if root * root == N: \n        return N \n  \n    # Checking if the square of root is less than N \n    if root * root < N: \n        return (root + 1) * (root + 1) \n  \n    # Checking if the square of root is greater than N \n    if root * root > N: \n        return root * root \n  \n# Driver Code \nN = 121\nprint(next_Perfect_Square(N)) \n\n# +\n\"\"\""}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t\n    # Initialize result \n    res = 0\n  \n    # Initialize sum of elements \n    # in bi-tonic sub-sequence \n    curr_sum = 0\n  \n    # Initialize previous element \n    prev = -1\n  \n    # Traverse the given array \n    for i in range(n): \n  \n        # If current element is greater \n        # than previous element \n        if (arr[i] > prev): \n  \n            # Add current element to sum \n            curr_sum += arr[i] \n  \n            # Update previous element \n            prev = arr[i] \n  \n        # If current element is smaller \n        # than previous element \n        else: \n  \n            # Update result if required \n            res = max(res, curr_sum) \n  \n            # Reset sum of elements \n            # in bi-tonic sub-sequence \n            curr_sum = 0\n  \n            # Update previous element \n            prev = -1\n  \n    # Update result if required \n    res = max(res, curr_sum) \n  \n    return res \n  \n# Driver code \narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(max_sum(arr, n)) \n<file_sep>/Python/Array/15.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i])-1] = -abs(nums[abs(nums[i])-1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i+1\n    return len(nums)+1\n<file_sep>/Python/Array/"}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t\tguess = number / 2\n\t\twhile True:\n\t\t\t\tnew_guess = (guess + number / guess) / 2\n\t\t\t\tif new_guess == guess:\n\t\t\t\t\t\treturn new_guess\n\t\t\t\tguess = new_guess\n\nprint(babylonian_squareroot(100))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest_number(numbers):\n\t\tlargest = numbers[0]\n\t\tfor number in numbers:\n\t\t\t\tif number > largest:\n\t\t\t\t\t\tlargest = number\n\t\treturn largest\n\nprint(largest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest_number(numbers):\n\t\tsmallest = numbers[0]\n\t\tfor number in numbers:\n\t\t\t\tif number < smallest:\n\t\t\t\t\t\tsmallest = number\n\t\treturn smallest\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest_number(numbers):\n\t\tsmallest = numbers[0]\n\t\tfor number in numbers:\n\t\t\t\tif number < smallest:\n\t\t\t\t\t\tsmallest = number\n\t\treturn smallest\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest_number(numbers):\n\t\tsmallest = numbers[0]\n\t\tfor number in numbers:\n\t\t\t\tif number < smallest:\n\t\t\t\t\t\tsmallest = number\n\t\treturn smallest\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_5.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n"}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t\tn = len(str) \n\t\tl = [[0 for x in range(n)] for x in range(n)] \n\n\t\t# Every character is a palindrome of length 1 \n\t\tfor i in range(n): \n\t\t\tl[i][i] = 1\n\n\t\t# check sub-string of length 2 \n\t\tfor i in range(n-1): \n\t\t\tif (str[i] == str[i+1]): \n\t\t\t\tl[i][i+1] = 2\n\t\t\telse: \n\t\t\t\tl[i][i+1] = 1\n\n\t\t# Check for sub-string of length greater than 2 \n\t\t# (Note that the matrix is filled in diagonal fashion \n\t\t# (similar to http://goo.gl/PQqoS), \n\t\t# cell (i, j) is being computed only if i >= j) \n\t\tfor cl in range(3, n+1): \n\t\t\tfor i in range(n-cl+1): \n\t\t\t\tj = i+cl-1\n\t\t\t\tif (str[i] == str[j] and cl == 2): \n\t\t\t\t\tl[i][j] = 2\n\t\t\t\telif (str[i] == str[j]): \n\t\t\t\t\tl[i][j] = l[i+1][j-1] + 2\n\t\t\t\telse: \n\t\t\t\t\tl[i][j] = max(l[i][j-1], l[i+1][j]); \n\n\t\treturn l[0][n-1] \n\n# Driver program to test the above function \nstr = \"GEEKS FOR GEEKS\"\nprint(lps(str)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them.\nA subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\nFor example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”,.. etc are subsequences of “abcdefg”.\nSo a string of length n has 2^n different possible subsequences.\n\"\"\"\n\ndef lcs(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[None]*("}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 1/n + harmonic_sum(n-1)\n\nprint(harmonic_sum(10))\n<file_sep>/python/recursion/factorial.py\n\"\"\"\nWrite a function to calculate the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\nprint(factorial(5))\n<file_sep>/python/recursion/fibonacci.py\n\"\"\"\nWrite a function to calculate the nth fibonacci number.\n\"\"\"\ndef fibonacci(n):\n\tif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n<file_sep>/python/recursion/reverse_string.py\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\ndef reverse_string(s):\n\tif len(s) == 1:\n\t\treturn s\n\telse:\n\t\treturn reverse_string(s[1:]) + s[0]\n\nprint(reverse_string(\"hello\"))\n<file_sep>/python/recursion/palindrome.py\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef palindrome(s):\n\tif len(s) == 1:\n\t\treturn True\n\telif s[0] == s[-1]:\n\t\treturn palindrome(s[1:-1])\n\telse:\n\t\treturn False\n\nprint(palindrome(\"racecar\"))\n<file_sep>/python/recursion/sum_digits.py\n\"\"\"\nWrite a function to calculate the sum of the digits of a number.\n\"\"\"\ndef sum_digits(n):\n\tif n < 10:\n\t\treturn n\n\telse:\n\t\treturn n % 10 + sum_digits(n // 10)\n\nprint(sum_digits(1234))\n<file_sep>/python/recursion/sum_numbers.py\n\"\"\"\nWrite a function to calculate the sum of all numbers between 1 and n.\n\"\"\"\ndef sum_numbers(n):\n\tif n == 1:\n\t\t"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t\treturn list(set(array_nums1).intersection(array_nums2))\n\narray_nums1 = [1,2,3,4,5,6,7,8,9,10]\narray_nums2 = [1,2,3,4,5,6,7,8,9,10]\nprint(intersection_array(array_nums1,array_nums2))\n<file_sep>/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t\n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \n\ntup = ('a', 'b', 'c', 'd', 'a', 'b', 'c', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a',"}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t\tfor i in range(len(list)):\n\t\t\tlist.insert(i,element)\n\t\treturn list\n\nprint(insert_element([1,2,3,4,5],0))\n<file_sep>/python/list/list_to_string.py\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_to_string(list):\n\treturn ''.join(list)\n\nprint(list_to_string([1,2,3,4,5]))\n<file_sep>/python/list/list_to_tuple.py\n\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_to_tuple(list):\n\treturn tuple(list)\n\nprint(list_to_tuple([1,2,3,4,5]))\n<file_sep>/python/list/list_to_set.py\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_to_set(list):\n\treturn set(list)\n\nprint(list_to_set([1,2,3,4,5]))\n<file_sep>/python/list/list_to_dict.py\n\"\"\"\nWrite a function to convert a list to a dictionary.\n\"\"\"\ndef list_to_dict(list):\n\treturn dict(enumerate(list))\n\nprint(list_to_dict([1,2,3,4,5]))\n<file_sep>/python/list/list_to_list.py\n\"\"\"\nWrite a function to convert a list to a list.\n\"\"\"\ndef list_to_list(list):\n\treturn list\n\nprint(list_to_list([1,2,3,4,5]))\n<file_sep>/python/list/list_to_dict_with_keys.py\n\"\"\"\nWrite a function to convert a list to a dictionary with keys.\n\"\"\"\ndef list_to_dict_with_keys(list,keys):\n\treturn dict(zip(keys,list))\n\nprint(list_to_dict_with_keys([1,2,3,4,5],['a','b','c','d','e']))\n<file_sep>/python/list/list_to_dict_with_keys_and_values.py\n\"\"\"\nWrite a function to convert a list to a dictionary"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t\treturn [complex(x,y).polar() for x,y in numbers]\n\nprint(convert([(1,1),(1,0),(0,0)]))\n<file_sep>/python/00001.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef largest(numbers):\n\treturn max(numbers)\n\nprint(largest([1,2,3,4,5]))\n<file_sep>/python/00003.py\n\"\"\"\nWrite a Python program to sum all the items in a list.\n\"\"\"\ndef sum(numbers):\n\treturn sum(numbers)\n\nprint(sum([1,2,3,4,5]))\n<file_sep>/python/00002.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest(numbers):\n\treturn min(numbers)\n\nprint(smallest([1,2,3,4,5]))\n<file_sep>/python/00004.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count(strings):\n\treturn len([x for x in strings if len(x) > 1 and x[0] == x[-1]])\n\nprint(count(['abc','xyz','aba','1221']))\n<file_sep>/python/00005.py\n\"\"\"\nWrite a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort(tuples):\n\treturn sorted(tuples, key=lambda x: x[-1])\n\nprint(sort([(2,5),(1,2),(4,4),(2,3),(2,1)]))\n<file_sep>/python/00006.py\n\"\"\"\nWrite a Python program to remove duplicates from a list.\n\"\"\"\ndef remove(numbers):\n\treturn list(set(numbers))\n\nprint(remove([1,2,3,4,5,1,2,3,4,5]))\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React,"}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t\tcount = 0\n\t\tfor i in list1:\n\t\t\tif type(i) == int:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_integer([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a given list.\n\"\"\"\ndef sum_list(list1):\n\tsum = 0\n\tfor i in list1:\n\t\tsum += i\n\treturn sum\n\nprint(sum_list([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the largest number in a given list.\n\"\"\"\ndef largest_number(list1):\n\tlargest = list1[0]\n\tfor i in list1:\n\t\tif i > largest:\n\t\t\tlargest = i\n\treturn largest\n\nprint(largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to find the smallest number in a given list.\n\"\"\"\ndef smallest_number(list1):\n\tsmallest = list1[0]\n\tfor i in list1:\n\t\tif i < smallest:\n\t\t\tsmallest = i\n\treturn smallest\n\nprint(smallest_number([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t\treturn [word for word in text.split() if word[0] in ['a','e']]\n\nprint(words_ae(\"apple banana cat dog elephant\"))\n<file_sep>/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# A variable is created the moment you first assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language, so you do not need to declare variables before using them, or declare their type.\n\n# This makes Python very easy to use, especially when you begin to add in functions and modules.\n\n# Variables are case sensitive, or in other words, variable names are not the same as constants.\n\n# Variables can contain letters, numbers, and the underscore character.\n\n# Variables can start with a letter or an underscore, but they cannot start with a number.\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables).\n\n# A variable name cannot contain a space.\n\n# A variable name can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ ).\n\n# Variable names are case-sensitive.\n\n# Variable names cannot start with a number.\n\n# Variable names can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ ).\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables).\n\n# Variable names cannot start with a number.\n\n# Variable names can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ ).\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables).\n\n# Variable names cannot start with a number.\n\n# Variable names can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ ).\n\n# Variable names are case-sensitive (age, Age and AGE are three different variables).\n\n# Variable names cannot start with a number.\n\n# Variable names can only contain alpha-numeric characters and unders"}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + [y] for x in combinations_colors(l, n-1) for y in l]\n\nprint combinations_colors(['red', 'green', 'blue'], 2)\n<file_sep>/python/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n<file_sep>/python/python_practice/python_practice_2.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t\tif n < 2:\n\t\t\treturn 0\n\t\tcount = 1\n\t\tfor i in range(3, n+1, 2):\n\t\t\tif is_prime(i):\n\t\t\t\tcount += 1\n\t\treturn count\n\ndef is_prime(n):\n\tif n < 2:\n\t\treturn False\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(count_Primes_nums(100))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t\ta = a + b\n\t\tb = a - b\n\t\ta = a - b\n\t\treturn a,b\n\na = 10\nb = 20\nprint(swap_numbers(a,b))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint()\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint(j,end=\" \")\n\tprint"}
{"ID": 621, "source": "MBPP:258", "prompt": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t\treturn len(list(filter(lambda x: x%2!= 0, array_nums)))\n\nprint(count_odd([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn (max(test_tup1), max(test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10)\n\tprint(maximize_elements(test_tup1, test_tup2))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\t\"\"\"\n\t\t:param a: int\n\t\t:param b: int\n\t\t:param c: int\n\t\t:return: int\n\t\t\"\"\"\n\t\treturn max(a, b, c)\n\nif __name__ == '__main__':\n\ta = 1\n\tb = 2\n\tc = 3\n\tprint(max_of_three(a, b, c))\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\t\"\"\"\n\t\t:param a: int\n\t\t:param b: int\n\t\t:param c: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif a > b and a > c:\n\t\t\treturn a\n\t\telif b > a and b > c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\nif __name__ == '__main__':\n\ta = 1\n\tb = 2\n\tc = 3\n\tprint(max_of_three(a, b, c))\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\t\"\"\"\n\t\t:param a: int\n\t\t:param b: int\n\t\t:param c: int\n\t\t:return: int"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t\tif n < 1: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 2\n\t\tif n == 2: \n\t\t\treturn 3\n\t\tif n == 3: \n\t\t\treturn 5\n\t\tif n == 4: \n\t\t\treturn 7\n\t\tif n == 5: \n\t\t\treturn 11\n\t\tif n == 6: \n\t\t\treturn 13\n\t\tif n == 7: \n\t\t\treturn 17\n\t\tif n == 8: \n\t\t\treturn 19\n\t\tif n == 9: \n\t\t\treturn 23\n\t\tif n == 10: \n\t\t\treturn 29\n\t\tif n == 11: \n\t\t\treturn 31\n\t\tif n == 12: \n\t\t\treturn 37\n\t\tif n == 13: \n\t\t\treturn 41\n\t\tif n == 14: \n\t\t\treturn 43\n\t\tif n == 15: \n\t\t\treturn 47\n\t\tif n == 16: \n\t\t\treturn 53\n\t\tif n == 17: \n\t\t\treturn 59\n\t\tif n == 18: \n\t\t\treturn 61\n\t\tif n == 19: \n\t\t\treturn 67\n\t\tif n == 20: \n\t\t\treturn 71\n\t\tif n == 21: \n\t\t\treturn 73\n\t\tif n == 22: \n\t\t\treturn 79\n\t\tif n == 23: \n\t\t\treturn 83\n\t\tif n == 24: \n\t\t\treturn 89\n\t\tif n == 25: \n\t\t\treturn 97\n\t\tif n == 26: \n\t\t\treturn 101\n\t\tif n == 27: \n\t\t\treturn 103\n\t\tif n == 28: \n\t\t\treturn 107\n\t\tif n == 29: \n\t\t\treturn 109\n\t\tif n == 30: \n\t\t\treturn 113\n\t\tif n == 31: \n\t\t\treturn 127\n\t\tif n == 32: \n\t\t\treturn 131\n\t\tif n == 33: \n\t\t\treturn 137\n\t\tif n == 34: \n\t\t"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical division operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical multiplication operation across the given tuples.\n\"\"\"\ndef multiplication_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical multiplication operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical addition operation across the given tuples.\n\"\"\"\ndef addition_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical addition operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical subtraction operation across the given tuples.\n\"\"\"\ndef subtraction_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical subtraction operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical floor division operation across the given tuples.\n\"\"\"\ndef floor_division_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical floor division operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x // y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical modulo operation across the given tuples.\n\"\"\"\ndef modulo_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical modulo operation across the given tuples.\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical power operation across the given tuples.\n\"\"\"\ndef power_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tThis function will perform mathematical power operation across the given tuples.\n\t\t\"\"\""}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t\treturn [list1[:L], list1[L:]]\n\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 4))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 0))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 9))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 2))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 20))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 3))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 5))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 4))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 8))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 7))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 6))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 1))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 9))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 5))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 4))\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 8))\nprint(split_two_parts([1,2,3,4,"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t\td1.update(d2)\n\t\treturn d1\n\nd1 = {'a':1,'b':2}\nd2 = {'c':3,'d':4}\nprint(merge_dict(d1,d2))\n<file_sep>/python/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\nprint(dog_age(10))\n<file_sep>/python/python_basics/01_variables.py\n\"\"\"\nVariables\n\"\"\"\n\n# Variables are containers for storing data values.\n\n# Variables are created when you assign a value to it.\n\n# Variables do not need to be declared with any particular type and can even change type after they have been set.\n\n# Python is a dynamically typed language, so you do not need to declare variables before using them, or declare the type of value a variable will hold.\n\n# Variable names are case sensitive.\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names cannot be any of Python's reserved words.\n\n# Variable names are case sensitive.\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names cannot be any of Python's reserved words.\n\n# Variable names are case sensitive.\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names cannot be any of Python's reserved words.\n\n# Variable names are case sensitive.\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names cannot be any of Python's reserved words.\n\n# Variable names are case sensitive.\n\n# Variable names can contain letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number.\n\n# Variable names cannot start with a number.\n\n# Variable names can be any length.\n\n# Variable names cannot be any of Python's reserved words.\n\n# Variable names are case sensitive.\n\n# Variable names"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t\treturn [S[i::step] for i in range(step)]\n\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\n<file_sep>/python/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 0 to 9\neven_numbers = [x for x in range(10) if x % 2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 4\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 5\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 6\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 7\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 8\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t\treturn 6*l**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\t\treturn 4*math.pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*math.pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*math.pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\t\treturn 2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn math.pi*r*(r+math.sqrt(h**2+r**2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t\treturn math.pi*r*math.sqrt(h**2+r**2)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 1/3*math.pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(b,h):\n\t\treturn b*h+math.sqrt(b**2+h**2)*b\n\n\"\"\"\nWrite a function to find the lateral"}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum += i*i\n\t\treturn sum\n\nprint(square_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn n + find_star_num(n - 1) \n\n# Driver Code \nn = 5\nprint(find_star_num(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver Code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver Code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver Code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver Code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10 + sum_of_digits(int(n / 10"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\nprint(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\nprint(ascii_value('e'))\nprint(ascii_value('f'))\nprint(ascii_value('g'))\nprint(ascii_value('h'))\nprint(ascii_value('i'))\nprint(ascii_value('j'))\nprint(ascii_value('k'))\nprint(ascii_value('l'))\nprint(ascii_value('m'))\nprint(ascii_value('n'))\nprint(ascii_value('o'))\nprint(ascii_value('p'))\nprint(ascii_value('q'))\nprint(ascii_value('r'))\nprint(ascii_value('s'))\nprint(ascii_value('t'))\nprint(ascii_value('u'))\nprint(ascii_value('v'))\nprint(ascii_value('w'))\nprint(ascii_value('x'))\nprint(ascii_value('y'))\nprint(ascii_value('z'))\nprint(ascii_value('A'))\nprint(ascii_value('B'))\nprint(ascii_value('C'))\nprint(ascii_value('D'))\nprint(ascii_value('E'))\nprint(ascii_value('F'))\nprint(ascii_value('G'))\nprint(ascii_value('H'))\nprint(ascii_value('I'))\nprint(ascii_value('J'))\nprint(ascii_value('K'))\nprint(ascii_value('L'))\nprint(ascii_value('M'))\nprint(ascii_value('N'))\nprint(ascii_value('O'))\nprint(ascii_value('P'))\nprint(ascii_value('Q'))\nprint(ascii_value('R'))\nprint(ascii_value('S'))\nprint(ascii_value('T'))\nprint(ascii_value('U'))\nprint(ascii_value('V'))\nprint(ascii_value('W'))\nprint(ascii_value('X'))\nprint(ascii_value('Y'))\nprint(ascii_value('Z'))\nprint(ascii_value('0'))\nprint(ascii_value('1'))\nprint(ascii_value('2'))\nprint(ascii_value('3'))\n"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t\tsum = 0\n\t\tfor i in range(0, n, 2): \n\t\t\tsum = sum + arr[i] \n\t\treturn sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Sum of even numbers at even positions is\", sum_even_and_even_index(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 634, "source": "MBPP:271", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tif i % 2 == 0: \n\t\t\t\tsum += i ** 5\n\t\treturn sum\n\nprint(even_Power_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in range(4, 0, -1):\n    for j in range(1, i+1):\n        print(j, end=\" \")\n    print()\n\nfor i in"}
{"ID": 635, "source": "MBPP:272", "prompt": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t", "predict": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t\treturn test_list.pop()\n\n\"\"\"\nWrite a function to perform the front element extraction from list of tuples records.\n\"\"\"\ndef front_extract(test_list):\n\t\treturn test_list.pop(0)\n\n\"\"\"\nWrite a function to perform the rear element insertion into list of tuples records.\n\"\"\"\ndef rear_insert(test_list, test_tuple):\n\t\ttest_list.append(test_tuple)\n\n\"\"\"\nWrite a function to perform the front element insertion into list of tuples records.\n\"\"\"\ndef front_insert(test_list, test_tuple):\n\t\ttest_list.insert(0, test_tuple)\n\n\"\"\"\nWrite a function to perform the rear element deletion from list of tuples records.\n\"\"\"\ndef rear_delete(test_list):\n\t\ttest_list.pop()\n\n\"\"\"\nWrite a function to perform the front element deletion from list of tuples records.\n\"\"\"\ndef front_delete(test_list):\n\t\ttest_list.pop(0)\n\n\"\"\"\nWrite a function to perform the rear element search from list of tuples records.\n\"\"\"\ndef rear_search(test_list, test_tuple):\n\t\treturn test_list.index(test_tuple)\n\n\"\"\"\nWrite a function to perform the front element search from list of tuples records.\n\"\"\"\ndef front_search(test_list, test_tuple):\n\t\treturn test_list.index(test_tuple, 0, len(test_list))\n\n\"\"\"\nWrite a function to perform the rear element search from list of tuples records.\n\"\"\"\ndef rear_search_all(test_list, test_tuple):\n\t\treturn [i for i, x in enumerate(test_list) if x == test_tuple]\n\n\"\"\"\nWrite a function to perform the front element search from list of tuples records.\n\"\"\"\ndef front_search_all(test_list, test_tuple):\n\t\treturn [i for i, x in enumerate(test_list) if x == test_tuple]\n\n\"\"\"\nWrite a function to perform the rear element search from list of tuples records.\n\"\"\"\ndef rear_search_all_index(test_list, test_tuple):\n\t\treturn [i for i, x in enumerate(test_list) if x == test_tuple"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t\treturn tuple(i-j for i,j in zip(test_tup1, test_tup2))\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 3, 4, 5, 6)\nprint(substract_elements(test_tup1, test_tup2))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(i, i+5):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(i+j-1, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+"}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t\tif n < 0: \n\t\t\treturn 0\n\t\tif n == 0 or n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 3\n\t\tif n % 2 == 0: \n\t\t\treturn even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 3) \n\t\telse: \n\t\t\treturn even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) \n\nn = 5\nprint(even_binomial_Coeff_Sum(n)) \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, l, mid-1, x) \n        else: \n            return binary_search(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print (\"Element is present at index % d\" % result) \nelse: \n    print (\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\tfor i in range(n): \n\t\t\tif a[i] == m: \n\t\t\t\treturn i \n\t\treturn -1\n\na = [1,2,3,4,5,6,7,8,9,10] \nn = len(a) \nm = 10\nprint(get_Position(a,n,m)) \n<file_sep>/Python/Array/Find_the_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef getMissingNo(a, n): \n\ti, total = 0, 0\n\ttotal = (n + 1)*(n + 2)/2\n\tfor i in range(n): \n\t\ttotal -= a[i] \n\treturn total \n\na = [1, 2, 4, 5, 6] \nn = len(a) \nprint(getMissingNo(a, n)) \n<file_sep>/Python/Array/Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef getDup(a, n): \n\tfor i in range(n): \n\t\tif a[abs(a[i])-1] >= 0: \n\t\t\ta[abs(a[i])-1] = -a[abs(a[i])-1] \n\t\telse: \n\t\t\treturn abs(a[i]) \n\treturn -1\n\na = [1, 2, 3, 1, 3, 6, 6] \nn = len(a) \nprint(getDup(a, n)) \n<file_sep>/Python/Array/Find_the_union_and_intersection_of_two_sorted_arrays.py\n\"\"\"\nGiven two sorted arrays, find their union and intersection.\n\"\"\"\ndef printUnion(a, b, n, m): \n\ti, j = 0, 0\n\twhile i < n and j < m: \n\t\tif a[i] < b[j]: \n\t\t\tprint(a[i]) \n\t\t\ti += 1\n\t\telif a[i] > b[j]: \n\t\t\tprint(b[j"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint volume_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r,h):\n\t\treturn 2*3.14*r*h\n\nprint area_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\t\treturn 2*3.14*r*r+2*3.14*r*h\n\nprint surface_area_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the circumference of a cylinder.\n\"\"\"\ndef circumference_cylinder(r,h):\n\t\treturn 2*3.14*r\n\nprint circumference_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surface_area_cylinder(r,h):\n\t\treturn 2*3.14*r*r+2*3.14*r*h+2*3.14*r*r\n\nprint total_surface_area_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the total volume of a cylinder.\n\"\"\"\ndef total_volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint total_volume_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surface_area_cylinder(r,h):\n\t\treturn 2*3.14*r*r+2*3.14*r*h+2*3.14*r*r\n\nprint total_surface_area_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the total volume of a cylinder.\n\"\"\"\ndef total_volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint total_volume_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the total"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t\treturn {k:v for k,v in dict.items() if v>n}\n\nprint(dict_filter(dict,10))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current date.\n\"\"\"\nimport datetime\nprint(datetime.date.today())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get OS name, platform and release information.\n\"\"\"\nimport os\nprint(os.name)\nprint(os.uname())\nprint(os.getlogin())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to convert seconds to day, hour, minutes and seconds.\n\"\"\"\nimport datetime\nprint(datetime.timedelta(seconds=1000000000))\n<file_sep>/python/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the identity of an object.\n\"\"\"\nimport sys\nprint(sys.getrefcount(1))\n<file_sep>/python/python_basics/python_basics_18.py\n\"\"\"\nWrite a Python program to convert a byte string to a string.\n\"\"\"\n"}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t\treturn len(test_tup)\n\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\treturn (10 * n + 1) * n / 2\n\ndef nth_decagonal(n):\n\tif n < 1:\n\t\treturn None\n\telse:\n\t\ti = 1\n\t\twhile True:\n\t\t\tif is_num_decagonal(i) == n:\n\t\t\t\treturn i\n\t\t\telif is_num_decagonal(i) > n:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\ti += 1\n\nprint nth_decagonal(1)\nprint nth_decagonal(2)\nprint nth_decagonal(3)\nprint nth_decagonal(4)\nprint nth_decagonal(5)\nprint nth_decagonal(6)\nprint nth_decagonal(7)\nprint nth_decagonal(8)\nprint nth_decagonal(9)\nprint nth_decagonal(10)\nprint nth_decagonal(11)\nprint nth_decagonal(12)\nprint nth_decagonal(13)\nprint nth_decagonal(14)\nprint nth_decagonal(15)\nprint nth_decagonal(16)\nprint nth_decagonal(17)\nprint nth_decagonal(18)\nprint nth_decagonal(19)\nprint nth_decagonal(20)\nprint nth_decagonal(21)\nprint nth_decagonal(22)\nprint nth_decagonal(23)\nprint nth_decagonal(24)\nprint nth_decagonal(25)\nprint nth_decagonal(26)\nprint nth_decagonal(27)\nprint nth_decagonal(28)\nprint nth_decagonal(29)\nprint nth_decagonal(30)\nprint nth_decagonal(31)\nprint nth_decagonal(32)\nprint nth_decagonal(33)\nprint nth_decagonal(34)\nprint nth_decagonal(35)\nprint nth_decagonal(36)\nprint nth_decagonal(37)\nprint nth_decagonal(3"}
{"ID": 643, "source": "MBPP:280", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t\tfor i in range(len(dlist)):\n\t\t\tif dlist[i] == item:\n\t\t\t\treturn i\n\t\treturn -1\n\ndef main():\n\tdlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(sequential_search(dlist, 10))\n\nif __name__ == '__main__':\n\tmain()<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\n\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef print_list(self):\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t\tprint(temp.data)\n\t\t\ttemp = temp.next\n\n\tdef push(self, data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_after(self, prev_node, data):\n\t\tif prev_node is None:\n\t\t\tprint(\"The given previous node must in the linked list\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef append(self, data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast = self.head\n\t\twhile last.next:\n\t\t\tlast = last.next\n\t\tlast.next = new_node\n\n\tdef delete_node(self, key):\n\t\ttemp = self.head\n\t\tif temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tself.head = temp.next\n\t\t\t\ttemp = None\n\t\t\t\treturn\n\t\twhile temp is not None:\n\t\t\tif temp.data == key:\n\t\t\t\tbreak\n\t\t\tprev = temp\n\t\t\ttemp = temp.next\n\t\tif temp is None:\n\t\t\treturn\n\t\tprev.next = temp.next\n\t\ttemp = None\n\n\tdef delete_node_at_position"}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t\treturn len(test_list) == len(set(test_list))\n\nprint(all_unique([1,2,3,4,5,6,7,8,9,10]))\nprint(all_unique([1,2,3,4,5,6,7,8,9,10,10]))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a python program to print the following pattern:"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x-y,nums1,nums2))\n\nprint(sub_list([1,2,3],[4,5,6]))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\tn = str(n) \n\t\tfor i in range(len(n)): \n\t\t\tif int(n[i]) > i: \n\t\t\t\treturn False\n\t\treturn True\n\nn = 12345\nprint(validate(n))\n\nn = 12123\nprint(validate(n))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (lname + \" \" + fname)\n\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nvalues = input(\"Input some comma seprated numbers : \")\nlist = values.split(\",\")\ntuple = tuple(list)\nprint('List : ',list)\nprint('Tuple : ',tuple)\n\n\"\"\""}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t\tfor i in list:\n\t\t\tif i!= element:\n\t\t\t\treturn False\n\t\treturn True\n\nlist = ['a','a','a']\nelement = 'a'\nprint(check_element(list,element))\n<file_sep>/python/list/list_1.py\n\"\"\"\nWrite a Python program to sum all the items in a list.\n\"\"\"\ndef sum_list(list):\n\tsum = 0\n\tfor i in list:\n\t\tsum += i\n\treturn sum\n\nlist = [1,2,3,4,5]\nprint(sum_list(list))\n<file_sep>/python/list/list_10.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef max_list(list):\n\tmax = list[0]\n\tfor i in list:\n\t\tif i > max:\n\t\t\tmax = i\n\treturn max\n\nlist = [1,2,3,4,5]\nprint(max_list(list))\n<file_sep>/python/list/list_11.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef min_list(list):\n\tmin = list[0]\n\tfor i in list:\n\t\tif i < min:\n\t\t\tmin = i\n\treturn min\n\nlist = [1,2,3,4,5]\nprint(min_list(list))\n<file_sep>/python/list/list_12.py\n\"\"\"\nWrite a Python program to remove duplicates from a list.\n\"\"\"\ndef remove_duplicates(list):\n\tnew_list = []\n\tfor i in list:\n\t\tif i not in new_list:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nlist = [1,2,3,4,5,1,2,3,4,5]\nprint(remove_duplicates(list))\n<file_sep>/python/list/list_13.py\n\"\"\"\nWrite a Python program to check a list is empty or not.\n\"\"\"\ndef check_empty(list):\n\tif len(list) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nlist = []\nprint(check_empty(list))\n<file_sep>/python"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t\treturn re.search(r'ab{2,3}', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three_c(text):\n\t\treturn re.search(r'ab{2,3}c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b' and then an ending 'c'.\n\"\"\"\ndef text_match_two_three"}
{"ID": 649, "source": "MBPP:286", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t\n    # Initialize result and current sum \n    # for all subarrays of size 1 \n    max_sum = 0\n    curr_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        max_sum = max(max_sum, curr_sum) \n  \n        # If current sum becomes negative, \n        # reset it to 0 \n        if curr_sum < 0: \n            curr_sum = 0\n  \n    # If all elements are negative \n    if max_sum == 0: \n        return max_sum \n  \n    # Find the maximum sum with \n    # single repetition \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        max_sum = max(max_sum, curr_sum) \n  \n        # If current sum becomes negative, \n        # reset it to 0 \n        if curr_sum < 0: \n            curr_sum = 0\n  \n    # Find the maximum sum with \n    # k repetition \n    max_sum = max_sum * k\n  \n    return max_sum \n  \n# Driver code \na = [1, 2, 3, -2, 5] \nn = len(a) \nk = 3\nprint(max_sub_array_sum_repeated(a, n, k)) \n\na = [-1, -2, -3, -4] \nn = len(a) \nk = 7\nprint(max_sub_array_sum_repeated(a, n, k)) \n\na = [10, -1, 2, 3, -4, 100] \nn = len(a) \nk = 4\nprint(max_sub_array_sum_repeated(a, n, k)) \n\na = [1, 2, 3] \nn = len(a) \nk = 7\nprint(max_sub_array_sum_repeated(a, n, k)) \n\na = [1, 20, 2, 80, 10] \nn = len(a) \nk = 4\nprint(max_sub_array_sum_repeated(a, n, k)) \n\na = [10, 5, 2, "}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum += i*i\n\t\treturn sum\n\nprint(square_Sum(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j"}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t\t# Create a hash table to store the count of elements\n\t\t# having modular inverse equal to itself\n\t\thash_table = [0] * P\n\n\t\t# Traverse the array and store the count of elements\n\t\t# having modular inverse equal to itself\n\t\tfor i in range(N):\n\t\t\thash_table[arr[i] % P] += 1\n\n\t\t# Traverse the hash table and print the count of\n\t\t# elements having modular inverse equal to itself\n\t\tfor i in range(P):\n\t\t\tif hash_table[i] > 1:\n\t\t\t\tprint(hash_table[i])\n\n# Driver code\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = len(arr)\nP = 11\nmodular_inverse(arr, N, P)\n\n# This code is contributed by <NAME>\n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1,"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\todd_days = 0\n\t\tfor i in range(1, N+1): \n\t\t\tif (i % 2!= 0): \n\t\t\t\todd_days += 1\n\t\treturn odd_days \n\nN = int(input(\"Enter the year: \"))\nprint(\"Number of odd days in the year\", N, \"is\", odd_Days(N)) \n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python function to calculate the number of even days in a given year.\n\"\"\"\ndef even_Days(N): \n\t\teven_days = 0\n\t\tfor i in range(1, N+1): \n\t\t\tif (i % 2 == 0): \n\t\t\t\teven_days += 1\n\t\treturn even_days \n\nN = int(input(\"Enter the year: \"))\nprint(\"Number of even days in the year\", N, \"is\", even_Days(N)) \n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python function to calculate the number of days in a given year.\n\"\"\"\ndef days_in_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 366\n            else:\n                return 365\n        else:\n            return 366\n    else:\n        return 365\n\nyear = int(input(\"Enter the year: \"))\nprint(\"Number of days in the year\", year, \"is\", days_in_year(year))\n<file_sep>/Python/Python_Assignment_1/Q11.py\n\"\"\"\nWrite a python function to calculate the number of leap days in a given year.\n\"\"\"\ndef leap_Days(N): \n\t\tleap_days = 0\n\t\tfor i in range(1, N+1): \n\t\t\tif (i % 4 == 0): \n\t\t\t\tleap_days += 1\n\t\treturn leap_days \n\nN = int(input(\"Enter the year: \"))\nprint(\"Number of leap days in the year\", N, \"is\", leap_Days(N)) \n<file_sep>/Python/Python_Assignment_1/Q12.py\n\"\"\"\nWrite a python"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t\tmax_len = 0\n\t\tfor i in list1:\n\t\t\tif len(i) > max_len:\n\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\ndef max_length_list(list1):\n\tmax_len = max_length(list1)\n\tmax_len_list = []\n\tfor i in list1:\n\t\tif len(i) == max_len:\n\t\t\tmax_len_list.append(i)\n\treturn max_len_list\n\nlist1 = [[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2]]\nprint(max_length_list(list1))\n<file_sep>/python/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn k \n\t\tif n == 2: \n\t\t\treturn k * k \n\t\treturn (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)) \n\nn = 3\nk = 2\nprint(count_no_of_ways(n, k)) \n<file_sep>/Python/Algorithms/DP/Longest_Common_Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.\n\"\"\"\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0\n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1) \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)) \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(lcs(X, Y, len(X), len(Y))) \n<file_sep>/Python/Algorithms/DP/Longest_Common_Subsequence_2.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them with no restriction on the order.\n\"\"\"\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0\n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1) \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)) \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(lcs(X, Y, len(X), len(Y))) \n<file_sep>/Python/Algorithms/DP/Longest_Common_Subsequence_3.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them with no restriction on the order.\n\"\"\"\ndef lcs(X, Y"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t\treturn n//m\n\nprint(find(10,3))\nprint(find(10,2))\nprint(find(10,5))\nprint(find(10,1))\nprint(find(10,0))\nprint(find(10,-3))\nprint(find(10,-2))\nprint(find(10,-5))\nprint(find(10,-1))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(10,0))\nprint(find(1"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t\treturn (w**2 + h**2)**0.5\n\nprint(otherside_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a right angled triangle.\n\"\"\"\ndef area_rightangle(w,h):\n\t\treturn (w*h)/2\n\nprint(area_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the perimeter of a right angled triangle.\n\"\"\"\ndef perimeter_rightangle(w,h):\n\t\treturn w+h+otherside_rightangle(w,h)\n\nprint(perimeter_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the hypotenuse of a right angled triangle.\n\"\"\"\ndef hypotenuse_rightangle(w,h):\n\t\treturn (w**2 + h**2)**0.5\n\nprint(hypotenuse_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the height of a right angled triangle.\n\"\"\"\ndef height_rightangle(w,h):\n\t\treturn (w**2 + h**2)**0.5\n\nprint(height_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(w):\n\t\treturn w**2\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(w):\n\t\treturn 4*w\n\nprint(perimeter_square(3))\n\n\"\"\"\nWrite a function to find the diagonal of a square.\n\"\"\"\ndef diagonal_square(w):\n\t\treturn w*2**0.5\n\nprint(diagonal_square(3))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(w,h):\n\t\treturn w*h\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(w,h):\n\t\treturn 2*(w+h)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the diagonal of"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t\tmax_val = listval[0]\n\t\tfor i in listval:\n\t\t\tif i > max_val:\n\t\t\t\tmax_val = i\n\t\treturn max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the following pattern:\n"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t\tsum = 0\n\t\tfor i in range(1, number):\n\t\t\tif number % i == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_div(10))\n<file_sep>/python/python_basics/01_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python/python_basics/03_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers 1 to 100 to the screen.\n\"\"\"\nfor i in range(1, 101):\n\tprint(i)\n<file_sep>/python/python_basics/02_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100 to the screen.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2!= 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/04_print_a_square.py\n\"\"\"\nWrite a program that prints a 5x5 square of * characters.\n\"\"\"\nfor i in range(1, 6):\n\tprint(\"*\" * 5)\n<file_sep>/python/python_basics/05_print_a_triangle.py\n\"\"\"\nWrite a program that prints a triangle made of * characters.\n\"\"\"\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/python/python_basics/06_print_a_square_of_stars.py\n\"\"\"\nWrite a program that prints a square of 5x5 stars.\n\"\"\"\nfor i in range(1, 6):\n\tprint(\"*\" * 5)\n<file_sep>/python/python_basics/07_print_a_triangle_of_stars.py\n\"\"\"\nWrite a program that prints a triangle made of stars.\n\"\"\"\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/python/python_basics/08_print_a_square_of_stars_with_a_border.py\n\"\"\"\nWrite a program that prints a square of 5x5 stars with a border.\n\"\"\"\nfor i in range(1"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n  \n# Driver Code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint (\"Number of inversions are\", \n       get_Inv_Count(arr, n)) \n<file_sep>/Python/Algorithms/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\"\"\"\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i])\n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search is a fast search algorithm with run-time complexity of Ο(log n).\nThis search algorithm works on the principle of divide and conquer. For this algorithm to work properly, the data collection should be in the sorted form.\n\"\"\"\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binarySearch(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t\tif not list1:\n\t\t\treturn []\n\t\tif isinstance(list1[0], list):\n\t\t\treturn flatten_list(list1[0]) + flatten_list(list1[1:])\n\t\treturn list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for _ in range"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t\treturn [x for x in l1 if x in l2]\n\nl1 = [1, 2, [3, 4], [5, 6]]\nl2 = [4, 5]\nprint(intersection_nested_lists(l1, l2))\n<file_sep>/python/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 0 to 9\neven_numbers = [x for x in range(10) if x % 2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of tuples of two integers\ntuples = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x!= y]\nprint(tuples)\n\n# Example 4\n# Flatten a list of lists\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [x for y in list_of_lists for x in y]\nprint(flattened)\n\n# Example 5\n# Create a list of strings\nstrings = ['foo', 'bar', 'baz']\nstrings = [x.upper() for x in strings]\nprint(strings)\n\n# Example 6\n# Create a list of integers\nintegers = [1, 2, 3]\nintegers = [x + 1 for x in integers]\nprint(integers)\n\n# Example 7\n# Create a list of tuples of two integers\ntuples = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x!= y]\nprint(tuples)\n\n# Example 8\n# Flatten a list of lists\nlist_of_lists = [[1, 2, 3"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t\tmax_agg = 0\n\t\tfor i in stdata:\n\t\t\tmax_agg = max_agg + i[1]\n\t\treturn max_agg\n\n\"\"\"\nWrite a function to calculate the minimum aggregate from the list of tuples.\n\"\"\"\ndef min_aggregate(stdata):\n\t\tmin_agg = 0\n\t\tfor i in stdata:\n\t\t\tmin_agg = min_agg + i[1]\n\t\treturn min_agg\n\n\"\"\"\nWrite a function to calculate the average aggregate from the list of tuples.\n\"\"\"\ndef avg_aggregate(stdata):\n\t\tavg_agg = 0\n\t\tfor i in stdata:\n\t\t\tavg_agg = avg_agg + i[1]\n\t\treturn avg_agg/len(stdata)\n\n\"\"\"\nWrite a function to calculate the median aggregate from the list of tuples.\n\"\"\"\ndef median_aggregate(stdata):\n\t\tmedian_agg = 0\n\t\tfor i in stdata:\n\t\t\tmedian_agg = median_agg + i[1]\n\t\treturn median_agg/len(stdata)\n\n\"\"\"\nWrite a function to calculate the mode aggregate from the list of tuples.\n\"\"\"\ndef mode_aggregate(stdata):\n\t\tmode_agg = 0\n\t\tfor i in stdata:\n\t\t\tmode_agg = mode_agg + i[1]\n\t\treturn mode_agg/len(stdata)\n\n\"\"\"\nWrite a function to calculate the standard deviation aggregate from the list of tuples.\n\"\"\"\ndef std_aggregate(stdata):\n\t\tstd_agg = 0\n\t\tfor i in stdata:\n\t\t\tstd_agg = std_agg + i[1]\n\t\treturn std_agg/len(stdata)\n\n\"\"\"\nWrite a function to calculate the variance aggregate from the list of tuples.\n\"\"\"\ndef var_aggregate(stdata):\n\t\tvar_agg = 0\n\t\tfor i in stdata:\n\t\t\tvar_agg = var_agg + i[1]\n\t\treturn var_agg/len(stdata)\n\n\"\"\"\nWrite a function to calculate the coefficient of variation aggregate from the list of tuples.\n\"\"\"\ndef cv_aggregate(stdata):\n\t\tcv_agg = 0\n\t\tfor i in stdata:\n\t\t\tcv_agg = cv_agg"}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 2\n\t\treturn count_binary_seq(n - 1) * 2 + count_binary_seq(n - 2) \n\n# Driver code \nn = 3\nprint(count_binary_seq(n)) \n\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 2\n\t\treturn count_binary_seq(n - 1) * 2 + count_binary_seq(n - 2) \n\n# Driver code \nn = 3\nprint(count_binary_seq(n)) \n\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 2\n\t\treturn count_binary_seq(n - 1) * 2 + count_binary_seq(n - 2) \n\n# Driver code \nn = 3\nprint(count_binary_seq(n)) \n\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 2\n\t\treturn count_binary_seq(n - 1) * 2 + count_binary_seq(n - 2) \n\n# Driver code \nn = 3\nprint(count_binary_seq(n)) \n\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\tif n == 0: \n\t\t\treturn 0"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t\tif not isinstance(d, dict):\n\t\t\treturn 0\n\t\treturn 1 + max(dict_depth(v) for v in d.values())\n\n\"\"\"\nWrite a function to flatten a list.\n\"\"\"\ndef flatten(l):\n\t\treturn [item for sublist in l for item in sublist]\n\n\"\"\"\nWrite a function to compute the factorial of a number.\n\"\"\"\ndef factorial(n):\n\t\tif n == 0:\n\t\t\treturn 1\n\t\treturn n * factorial(n-1)\n\n\"\"\"\nWrite a function to compute the list of the first 100 Fibonacci numbers.\n\"\"\"\ndef fibonacci(n):\n\t\tif n == 0:\n\t\t\treturn []\n\t\tif n == 1:\n\t\t\treturn [0]\n\t\tif n == 2:\n\t\t\treturn [0, 1]\n\t\tfib = fibonacci(n-1)\n\t\tfib.append(fib[-1] + fib[-2])\n\t\treturn fib\n\n\"\"\"\nWrite a function to compute the sum of the first n prime numbers.\n\"\"\"\ndef prime_sum(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\tif n == 1:\n\t\t\treturn 2\n\t\treturn prime_sum(n-1) + next_prime(prime_sum(n-1))\n\n\"\"\"\nWrite a function to compute the nth prime number.\n\"\"\"\ndef next_prime(n):\n\t\tif n == 2:\n\t\t\treturn 3\n\t\tif n % 2 == 0:\n\t\t\tn += 1\n\t\twhile not is_prime(n):\n\t\t\tn += 2\n\t\treturn n\n\n\"\"\"\nWrite a function to check whether a number is prime.\n\"\"\"\ndef is_prime(n):\n\t\tif n == 2:\n\t\t\treturn True\n\t\tif n % 2 == 0:\n\t\t\treturn False\n\t\tfor i in range(3, int(n**0.5) + 1, 2):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to compute the GCD of two numbers.\n\"\"\"\ndef gcd(a, b):\n\t\tif b == 0:\n\t\t\treturn a\n\t\t"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t\treturn int(math.log(n, 2)) + 1\n\nprint(set_Bit_Number(10))\nprint(set_Bit_Number(12))\nprint(set_Bit_Number(16))\nprint(set_Bit_Number(17))\nprint(set_Bit_Number(18))\nprint(set_Bit_Number(19))\nprint(set_Bit_Number(20))\nprint(set_Bit_Number(21))\nprint(set_Bit_Number(22))\nprint(set_Bit_Number(23))\nprint(set_Bit_Number(24))\nprint(set_Bit_Number(25))\nprint(set_Bit_Number(26))\nprint(set_Bit_Number(27))\nprint(set_Bit_Number(28))\nprint(set_Bit_Number(29))\nprint(set_Bit_Number(30))\nprint(set_Bit_Number(31))\nprint(set_Bit_Number(32))\nprint(set_Bit_Number(33))\nprint(set_Bit_Number(34))\nprint(set_Bit_Number(35))\nprint(set_Bit_Number(36))\nprint(set_Bit_Number(37))\nprint(set_Bit_Number(38))\nprint(set_Bit_Number(39))\nprint(set_Bit_Number(40))\nprint(set_Bit_Number(41))\nprint(set_Bit_Number(42))\nprint(set_Bit_Number(43))\nprint(set_Bit_Number(44))\nprint(set_Bit_Number(45))\nprint(set_Bit_Number(46))\nprint(set_Bit_Number(47))\nprint(set_Bit_Number(48))\nprint(set_Bit_Number(49))\nprint(set_Bit_Number(50))\nprint(set_Bit_Number(51))\nprint(set_Bit_Number(52))\nprint(set_Bit_Number(53))\nprint(set_Bit_Number(54))\nprint("}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif a[i] > a[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef solve2(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve3(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve4(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve5(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve6(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve7(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve8(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount += 1\n\treturn count\n\ndef solve9(a,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a["}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t\t# Find the element at given index after rotations\n\t\t# arr[] = {1, 2, 3, 4, 5, 6, 7}\n\t\t# ranges = {1, 3, 2, 1, 2, 3, 4}\n\t\t# rotations = 2\n\t\t# index = 4\n\t\t# Output: 6\n\t\t# Explanation: After 2 rotations, the array becomes\n\t\t# {3, 4, 5, 6, 7, 1, 2} and the element at index 4 is 6.\n\t\t# arr[] = {1, 2, 3, 4, 5, 6, 7}\n\t\t# ranges = {1, 3, 2, 1, 2, 3, 4}\n\t\t# rotations = 2\n\t\t# index = 5\n\t\t# Output: 1\n\t\t# Explanation: After 2 rotations, the array becomes\n\t\t# {3, 4, 5, 6, 7, 1, 2} and the element at index 5 is 1.\n\t\t# arr[] = {1, 2, 3, 4, 5, 6, 7}\n\t\t# ranges = {1, 3, 2, 1, 2, 3, 4}\n\t\t# rotations = 2\n\t\t# index = 6\n\t\t# Output: 2\n\t\t# Explanation: After 2 rotations, the array becomes\n\t\t# {3, 4, 5, 6, 7, 1, 2} and the element at index 6 is 2.\n\t\t# arr[] = {1, 2, 3, 4, 5, 6, 7}\n\t\t# ranges = {1, 3, 2, 1, 2, 3, 4}\n\t\t# rotations = 2\n\t\t# index = 7\n\t\t# Output: 3\n\t\t# Explanation: After 2 rotations, the array becomes\n\t\t# {3, 4, 5, 6, 7, 1, 2} and the element at index 7 is 3.\n\t"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t\treturn [word for word in words if word[0] == 'p']\n\nprint(start_withp(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words ending with letter 'p'.\n\"\"\"\ndef end_withp(words):\n\t\treturn [word for word in words if word[-1] == 'p']\n\nprint(end_withp(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'p'.\n\"\"\"\ndef contain_p(words):\n\t\treturn [word for word in words if 'p' in word]\n\nprint(contain_p(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'p' and 'a'.\n\"\"\"\ndef contain_pa(words):\n\t\treturn [word for word in words if 'p' in word and 'a' in word]\n\nprint(contain_pa(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'p' and 'a' and 'e'.\n\"\"\"\ndef contain_pae(words):\n\t\treturn [word for word in words if 'p' in word and 'a' in word and 'e' in word]\n\nprint(contain_pae(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'p' and 'a' and 'e' and 'r'.\n\"\"\"\ndef contain_paer(words):\n\t\treturn [word for word in words if 'p' in word and 'a' in word and 'e' in word and 'r' in word]\n\nprint(contain_paer(['apple', 'pear', 'banana', 'peach']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'p' and 'a' and 'e' and 'r' and 'i'.\n\"\"\"\ndef contain_paeri(words):\n\t\treturn [word for word in words if 'p' in word and"}
{"ID": 669, "source": "MBPP:306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\tdp = [0 for i in range(n)]\n\t\tdp[0] = a[0]\n\t\tfor i in range(1, n):\n\t\t\tdp[i] = max(dp[i-1], a[i])\n\t\tans = dp[n-1]\n\t\tfor i in range(index, n):\n\t\t\tans = max(ans, dp[i] + a[k])\n\t\treturn ans\n\na = [1, 101, 2, 3, 100, 4, 5]\nn = len(a)\nindex = 3\nk = 4\nprint(max_sum_increasing_subseq(a, n, index, k))\n<file_sep>/DP/longest_common_subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.\n\"\"\"\ndef longest_common_subsequence(a, b, n, m):\n\tdp = [[0 for i in range(m+1)] for j in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, m+1):\n\t\t\tif a[i-1] == b[j-1]:\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1]\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\treturn dp[n][m]\n\na = \"AGGTAB\"\nb = \"GXTXAYB\"\nn = len(a)\nm = len(b)\nprint(longest_common_subsequence(a, b, n, m))\n<file_sep>/DP/longest_palindromic_subsequence.py\n\"\"\"\nGiven a sequence, find the length of the longest palindromic subsequence in it.\n\"\"\"\ndef longest_palindromic_subsequence(a, n):\n\tdp = [[0 for i in range(n)] for j in range(n)]\n\tfor i in range(n):\n\t\tdp[i][i] = 1\n\tfor i in range(n-1, -1, -1):"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\treturn tuplex[m:n]\n\ntuplex = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\nprint(colon_tuplex(tuplex, 2, 8))\nprint(colon_tuplex(tuplex, 4, 10))\nprint(colon_tuplex(tuplex, 1, 10))\nprint(colon_tuplex(tuplex, 0, 11))\nprint(colon_tuplex(tuplex, 1, 11))\nprint(colon_tuplex(tuplex, 0, 12))\nprint(colon_tuplex(tuplex, 1, 12))\nprint(colon_tuplex(tuplex, 0, 13))\nprint(colon_tuplex(tuplex, 1, 13))\nprint(colon_tuplex(tuplex, 0, 14))\nprint(colon_tuplex(tuplex, 1, 14))\nprint(colon_tuplex(tuplex, 0, 15))\nprint(colon_tuplex(tuplex, 1, 15))\nprint(colon_tuplex(tuplex, 0, 16))\nprint(colon_tuplex(tuplex, 1, 16))\nprint(colon_tuplex(tuplex, 0, 17))\nprint(colon_tuplex(tuplex, 1, 17))\nprint(colon_tuplex(tuplex, 0, 18))\nprint(colon_tuplex(tuplex, 1, 18))\nprint(colon_tuplex(tuplex, 0, 19))\nprint(colon_tuplex(tuplex, 1, 19))\nprint(colon_tuplex(tuplex, 0, 20))\nprint(colon_tuplex(tuplex, 1, 20))\nprint(colon_tuplex(tuplex, 0, 21))\nprint(colon_tuplex(tuplex, 1, 21))\nprint(colon_tuplex(tuplex, 0"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t\t\"\"\"\n\t\t:type nums1: List[int]\n\t\t:type nums2: List[int]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif N > len(nums1) * len(nums2):\n\t\t\treturn []\n\t\tnums1.sort(reverse=True)\n\t\tnums2.sort(reverse=True)\n\t\tres = []\n\t\tfor i in range(N):\n\t\t\tres.append(nums1[i] * nums2[i])\n\t\treturn res\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [5, 4, 3, 2, 1]\nN = 3\nprint(large_product(nums1, nums2, N))\n<file_sep>/leetcode/1001-1100/1009. Complement of Base 10 Integer.py\n\"\"\"\nEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \"101\" in binary, 11 as \"1011\" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \"101\" in binary is \"010\" in binary.\n\nFor a given number N in base-10, return the complement of it's binary representation as a base-10 integer.\n\n \n\nExample 1:\n\nInput: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\nExample 2:\n\nInput: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\nExample 3:\n\nInput: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\tif a>b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(maximum(10,20))\nprint(maximum(100,200))\nprint(maximum(1000,2000))\nprint(maximum(10000,20000))\nprint(maximum(100000,200000))\nprint(maximum(1000000,2000000))\nprint(maximum(10000000,20000000))\nprint(maximum(100000000,200000000))\nprint(maximum(1000000000,2000000000))\nprint(maximum(10000000000,20000000000))\nprint(maximum(100000000000,200000000000))\nprint(maximum(1000000000000,2000000000000))\nprint(maximum(10000000000000,20000000000000))\nprint(maximum(100000000000000,200000000000000))\nprint(maximum(1000000000000000,2000000000000000))\nprint(maximum(10000000000000000,20000000000000000))\nprint(maximum(100000000000000000,200000000000000000))\nprint(maximum(1000000000000000000,200000000"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t\treturn tuple(str1)\n\nprint(string_to_tuple(\"Hello\"))\nprint(string_to_tuple(\"World\"))\nprint(string_to_tuple(\"Python\"))\nprint(string_to_tuple(\"Java\"))\nprint(string_to_tuple(\"C++\"))\nprint(string_to_tuple(\"C\"))\nprint(string_to_tuple(\"C#\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\"Cobol\"))\nprint(string_to_tuple(\""}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_right_most_set_bit(n): \n\t\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to set the left most set bit.\n\"\"\"\ndef set_left_most_set_bit(n): \n\t\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_right_most_set_bit(n): \n\t\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to set the left most set bit.\n\"\"\"\ndef set_left_most_set_bit(n): \n\t\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_right_most_set_bit"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn (1/3)*3.14*r*r*h\n\nprint(volume_cone(2,3))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint(area_circle(2))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\t\treturn (1/2)*b*h\n\nprint(area_triangle(2,3))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\t\treturn l*b\n\nprint(area_rectangle(2,3))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(s):\n\t\treturn s*s\n\nprint(area_square(2))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\t\treturn b*h\n\nprint(area_parallelogram(2,3))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b1,b2,h):\n\t\treturn (1/2)*(b1+b2)*h\n\nprint(area_trapezoid(2,3,4))\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,ap):\n\t\treturn (5/2)*s*ap\n\nprint(area_pentagon(2,3))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,ap):\n\t\treturn (6/2)*s*ap\n\nprint(area_hexagon(2,3))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(s,ap):\n\t\treturn (7/2)*s*ap\n\nprint(area_heptagon(2,3))\n\n\"\"\"\nWrite a function to find the area of an octagon."}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t\tfor i in list1:\n\t\t\tif i>0:\n\t\t\t\tprint(i)\n\nlist1=[1,2,-3,4,-5,6,-7,8,-9,10]\npos_nos(list1)\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1]\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_2.py\n\"\"\"\nWrite a python program to print the cube of each number in a list using list comprehension.\n\"\"\"\ndef cube(list1):\n\treturn [i**3 for i in list1]\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nprint(cube(list1))\n<file_sep>/python_basics/list_comprehension_3.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2==0]\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_4.py\n\"\"\"\nWrite a python program to print the cube of each number in a list using list comprehension.\n\"\"\"\ndef cube(list1):\n\treturn [i**3 for i in list1 if i%2!=0]\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nprint(cube(list1))\n<file_sep>/python_basics/list_comprehension_5.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2==0 and i>5]\n\n"}
{"ID": 677, "source": "MBPP:314", "prompt": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t", "predict": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\n    # Initialize result \n    res = 0; \n  \n    # Compute sum of all rows \n    for i in range(n) : \n        curr_sum = 0; \n        for j in range(n) : \n            curr_sum += grid[i][j]; \n        res = max(res, curr_sum); \n  \n    # Compute sum of all columns \n    for i in range(n) : \n        curr_sum = 0; \n        for j in range(n) : \n            curr_sum += grid[j][i]; \n        res = max(res, curr_sum); \n  \n    # Compute sum of all diagonals \n    for i in range(n) : \n        curr_sum = 0; \n        for j in range(n) : \n            curr_sum += grid[i][j]; \n        res = max(res, curr_sum); \n  \n    # Compute sum of all anti-diagonals \n    for i in range(n) : \n        curr_sum = 0; \n        for j in range(n) : \n            curr_sum += grid[i][j]; \n        res = max(res, curr_sum); \n  \n    return res; \n\n# Driver code \nif __name__ == \"__main__\" : \n    grid = [[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]]; \n    n = len(grid); \n    print(max_sum_rectangular_grid(grid, n)); \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary_Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n       "}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\n    # split the string into words \n    words = str.split() \n  \n    # find the length of the longest word \n    max_len = 0\n    for word in words: \n        if len(word) > max_len and len(word) % 2 == 0: \n            max_len = len(word) \n  \n    return max_len \n  \n# Driver code \nstr = \"Geeks for Geeks\"\nprint(find_Max_Len_Even(str)) \n\n# +\n\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\n    # split the string into words \n    words = str.split() \n  \n    # find the length of the longest word \n    max_len = 0\n    for word in words: \n        if len(word) > max_len and len(word) % 2 == 0: \n            max_len = len(word) \n  \n    return max_len \n  \n# Driver code \nstr = \"Geeks for Geeks\"\nprint(find_Max_Len_Even(str)) \n\n# +\n\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\n    # split the string into words \n    words = str.split() \n  \n    # find the length of the longest word \n    max_len = 0\n    for word in words: \n        if len(word) > max_len and len(word) % 2 == 0: \n            max_len = len(word) \n  \n    return max_len \n  \n# Driver code \nstr = \"Geeks for Geeks\"\nprint(find_Max_Len_Even(str)) \n\n# +\n\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\n    # split the string into words \n    words = str.split() \n  \n    # find the length of the longest word \n    max_len = 0\n    for word in words: \n        if len(word) > max_len and len(word) % 2 == 0: \n            max_len = len(word) \n  \n    return max_len \n  \n# Driver code \nstr = \"Geeks for G"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t\t\"\"\"\n\t\t:type alist: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tif not alist:\n\t\t\treturn []\n\t\tresult = []\n\t\tcount = 1\n\t\tfor i in range(1, len(alist)):\n\t\t\tif alist[i] == alist[i-1]:\n\t\t\t\tcount += 1\n\t\t\telse:\n\t\t\t\tresult.append(count)\n\t\t\t\tresult.append(alist[i-1])\n\t\t\t\tcount = 1\n\t\tresult.append(count)\n\t\tresult.append(alist[-1])\n\t\treturn result\n\ndef modified_decode(alist):\n\t\t\"\"\"\n\t\t:type alist: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\tif not alist:\n\t\t\treturn []\n\t\tresult = []\n\t\tfor i in range(0, len(alist), 2):\n\t\t\tresult.extend([alist[i+1]] * alist[i])\n\t\treturn result\n\ndef main():\n\talist = [1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, "}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t\n    # Initialize result \n    res = 0; \n\t\n    # Consider all possible lengths \n    for i in range(1, s + 1): \n        for j in range(1, s + 1): \n            for k in range(1, s + 1): \n\t\n                # If current volume is more than \n                # previous one, update it \n                if (i * j * k > res): \n                    res = i * j * k; \n\t\n    return res; \n\t\n# Driver Code \ns = 100; \nprint(max_volume(s)); \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/Python_Basic_Programs/"}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the name of the machine on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the name of the current module.\n\"\"\"\nimport sys\nprint(sys.modules[__name__])\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the site directory of the interpreter.\n\"\"\"\nimport sys\nprint(sys.prefix)\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the source code of a Python object.\n\"\"\"\nimport sys\nprint(sys.getsourcefile(sys))\n<file_sep>/python_basics/python_basics_18.py\n\"\"\"\nWrite a Python program to get the source code of a Python object.\n\"\"\"\nimport sys\nprint(sys.getsourcefile(sys))\n<file_sep>/python_basics/python_basics_19.py\n\"\"\"\nWrite a Python program"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t\tsum_of_squares = 0\n\t\tsum_of_numbers = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum_of_squares += i**2\n\t\t\tsum_of_numbers += i\n\t\treturn sum_of_numbers**2 - sum_of_squares\n\nprint(sum_difference(10))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t\tif s == 1: \n\t\t\treturn 1\n\t\tif s == 2: \n\t\t\treturn 2\n\t\tif s == 3: \n\t\t\treturn 3\n\t\tif s == 4: \n\t\t\treturn 4\n\t\tif s == 5: \n\t\t\treturn 5\n\t\tif s == 6: \n\t\t\treturn 6\n\t\tif s == 7: \n\t\t\treturn 7\n\t\tif s == 8: \n\t\t\treturn 8\n\t\tif s == 9: \n\t\t\treturn 9\n\t\tif s == 10: \n\t\t\treturn 10\n\t\tif s == 11: \n\t\t\treturn 11\n\t\tif s == 12: \n\t\t\treturn 12\n\t\tif s == 13: \n\t\t\treturn 13\n\t\tif s == 14: \n\t\t\treturn 14\n\t\tif s == 15: \n\t\t\treturn 15\n\t\tif s == 16: \n\t\t\treturn 16\n\t\tif s == 17: \n\t\t\treturn 17\n\t\tif s == 18: \n\t\t\treturn 18\n\t\tif s == 19: \n\t\t\treturn 19\n\t\tif s == 20: \n\t\t\treturn 20\n\t\tif s == 21: \n\t\t\treturn 21\n\t\tif s == 22: \n\t\t\treturn 22\n\t\tif s == 23: \n\t\t\treturn 23\n\t\tif s == 24: \n\t\t\treturn 24\n\t\tif s == 25: \n\t\t\treturn 25\n\t\tif s == 26: \n\t\t\treturn 26\n\t\tif s == 27: \n\t\t\treturn 27\n\t\tif s == 28: \n\t\t\treturn 28\n\t\tif s == 29: \n\t\t\treturn 29\n\t\tif s == 30: \n\t\t\treturn 30\n\t\tif s == 31: \n\t\t\treturn 31\n\t\tif s == 32: \n\t\t\treturn 32\n\t\tif s == 33: \n\t\t\treturn 33\n\t\tif s == 34: \n\t\t\treturn 34\n\t\tif s == 35: \n\t\t\treturn 35\n\t\tif s == "}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t\tmin_value = min(list1)\n\t\tmin_index = []\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] == min_value:\n\t\t\t\tmin_index.append(i)\n\t\treturn min_index\n\nprint(position_min([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nBasic - Print all the multiples of 5 from 5 to 1,000\n\nBasic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nBasic - Print the sum of all numbers from 5 to 5000000.\n\nBasic - Print positive numbers starting at 2018, counting down by fours.\n\nBasic - Print the sum of all the values in the list: a = [1, 2, 5, 10, 255, 3]\n\nBasic - List of all the multiples of 5 from 5 to 50000000\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(151):\n\tprint(i)\n\n# Basic - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5,1001,5):\n\tprint(i)\n\n# Basic - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1,101):\n\tif i % 5 == 0 and i % 10!= 0:\n\t\tprint(\"Coding\")\n\telif i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telse:\n\t\tprint(i)\n\n# Basic - Print the sum of all numbers from 5 to 5000000.\nsum = 0"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t\n\n\nif __name__ == \"__main__\":\n\tarr = [1, 2, 3, -4, -1, 4]\n\tn = len(arr)\n\tre_arrange(arr, n)\n\tprint(arr)<file_sep>/Arrays/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space.\nIn other words, find the lowest positive integer that does not exist in the array.\nThe array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\"\"\"\ndef first_missing_positive(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tif arr[i] <= 0:\n\t\t\tarr[i] = n + 1\n\tfor i in range(n):\n\t\ta = abs(arr[i])\n\t\tif a <= n:\n\t\t\tarr[a - 1] = -abs(arr[a - 1])\n\tfor i in range(n):\n\t\tif arr[i] > 0:\n\t\t\treturn i + 1\n\treturn n + 1\n\nif __name__ == \"__main__\":\n\tarr = [3, 4, -1, 1]\n\tprint(first_missing_positive(arr))<file_sep>/Arrays/10.py\n\"\"\"\nGiven an array of integers, find the first repeating element in it. We need to find the element that occurs more than once and whose index of first occurrence is smallest.\n\"\"\"\ndef first_repeating(arr, n):\n\tfor i in range(n):\n\t\tif arr[abs(arr[i]) - 1] > 0:\n\t\t\tarr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n\t\telse:\n\t\t\treturn abs(arr[i])\n\treturn -1\n\nif __name__ == \"__main__\":\n\tarr = [10, 5, 3, 4, 3, 5, 6]\n\tn = len(arr)\n\tprint(first_repeating(arr,"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t\tsum = 0\n\t\tfor i in range(0, len(test_tuple), 2):\n\t\t\tsum += test_tuple[i]\n\t\treturn sum\n\nprint(sum_of_alternates((1,2,3,4,5,6,7,8,9,10)))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\nPrint and Count - Print the numbers 1 to 1000. \nFor multiples of 5, print \"Coding\" instead of the number. \nFor multiples of 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(0, 151):\n\tprint(i)\n\n# Multiples of Five - Print all the multiples of 5 from"}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t\tif n < 0:\n\t\t\treturn 0\n\t\tif n == 0:\n\t\t\treturn 0\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 3\n\t\tif n == 4:\n\t\t\treturn 4\n\t\tif n == 5:\n\t\t\treturn 5\n\t\tif n == 6:\n\t\t\treturn 6\n\t\tif n == 7:\n\t\t\treturn 7\n\t\tif n == 8:\n\t\t\treturn 8\n\t\tif n == 9:\n\t\t\treturn 9\n\t\tif n == 10:\n\t\t\treturn 10\n\t\tif n == 11:\n\t\t\treturn 11\n\t\tif n == 12:\n\t\t\treturn 12\n\t\tif n == 13:\n\t\t\treturn 13\n\t\tif n == 14:\n\t\t\treturn 14\n\t\tif n == 15:\n\t\t\treturn 15\n\t\tif n == 16:\n\t\t\treturn 16\n\t\tif n == 17:\n\t\t\treturn 17\n\t\tif n == 18:\n\t\t\treturn 18\n\t\tif n == 19:\n\t\t\treturn 19\n\t\tif n == 20:\n\t\t\treturn 20\n\t\tif n == 21:\n\t\t\treturn 21\n\t\tif n == 22:\n\t\t\treturn 22\n\t\tif n == 23:\n\t\t\treturn 23\n\t\tif n == 24:\n\t\t\treturn 24\n\t\tif n == 25:\n\t\t\treturn 25\n\t\tif n == 26:\n\t\t\treturn 26\n\t\tif n == 27:\n\t\t\treturn 27\n\t\tif n == 28:\n\t\t\treturn 28\n\t\tif n == 29:\n\t\t\treturn 29\n\t\tif n == 30:\n\t\t\treturn 30\n\t\tif n == 31:\n\t\t\treturn 31\n\t\tif n == 32:\n\t\t\treturn 32\n\t\tif n == 33:\n\t\t\treturn 33\n\t\tif n == 34:\n\t\t"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t\t\"\"\"\n\t\t:type test_list: list\n\t\t:rtype: str\n\t\t\"\"\"\n\t\tword_dict = {}\n\t\tfor word in test_list:\n\t\t\tif word in word_dict:\n\t\t\t\tword_dict[word] += 1\n\t\t\telse:\n\t\t\t\tword_dict[word] = 1\n\t\treturn max(word_dict, key=word_dict.get)\n\nif __name__ == '__main__':\n\ttest_list = ['a', 'b', 'a', 'c', 'c', 'c', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',"}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\tif x==y or y==z or x==z:\n\t\t\tprint(\"Isosceles\")\n\t\telse:\n\t\t\tprint(\"Not Isosceles\")\n\ncheck_isosceles(1,2,3)\ncheck_isosceles(1,1,3)\ncheck_isosceles(1,2,1)\ncheck_isosceles(1,1,1)\ncheck_isosceles(1,2,2)\ncheck_isosceles(2,2,2)\ncheck_isosceles(2,2,3)\ncheck_isosceles(2,3,3)\ncheck_isosceles(3,3,3)\ncheck_isosceles(3,3,4)\ncheck_isosceles(3,4,4)\ncheck_isosceles(4,4,4)\ncheck_isosceles(4,4,5)\ncheck_isosceles(4,5,5)\ncheck_isosceles(5,5,5)\ncheck_isosceles(5,5,6)\ncheck_isosceles(5,6,6)\ncheck_isosceles(6,6,6)\ncheck_isosceles(6,6,7)\ncheck_isosceles(6,7,7)\ncheck_isosceles(7,7,7)\ncheck_isosceles(7,7,8)\ncheck_isosceles(7,8,8)\ncheck_isosceles(8,8,8)\ncheck_isosceles(8,8,9)\ncheck_isosceles(8,9,9)\ncheck_isosceles(9,9,9)\ncheck_isosceles(9,9,10)\ncheck_isosceles(9,10,10)\ncheck_isosceles(10,10,10)\ncheck_isosceles(10,10,11)\ncheck_isosceles(10,11,11)\ncheck_isosceles(11,11,"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t\tfor i in range(n):\n\t\t\tlist1.append(list1.pop(0))\n\t\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nm=3\nn=4\nprint(rotate_left(list1,m,n))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 692, "source": "MBPP:329", "prompt": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t\tcount = 0\n\t\tfor i in list:\n\t\t\tif i < 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(neg_count([1,2,-3,4,-5]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a,b,c):\n\tif a == b == c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\n\ndef add_is(string):\n\tif string[:2] == \"Is\":\n\t\treturn string\n\telse:\n\t\treturn \"Is\" + string\n\nprint(add_is(\"Is\"))\nprint(add_is(\"Hello\"))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\n\ndef string_copies(string,n):\n\treturn string*n\n\nprint(string_copies(\"Hello\",3))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to find whether a given number (accept from the user)"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t\tpattern = r'\\w{3,5}'\n\t\treturn re.findall(pattern, text)\n\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the current value of the"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t\tcount = 0\n\t\twhile n: \n\t\t\tn &= (n-1) \n\t\t\tcount += 1\n\t\treturn count \n\nprint(count_unset_bits(10))\nprint(count_unset_bits(15))\nprint(count_unset_bits(100))\nprint(count_unset_bits(1000))\nprint(count_unset_bits(10000))\nprint(count_unset_bits(100000))\nprint(count_unset_bits(1000000))\nprint(count_unset_bits(10000000))\nprint(count_unset_bits(100000000))\nprint(count_unset_bits(1000000000))\nprint(count_unset_bits(10000000000))\nprint(count_unset_bits(100000000000))\nprint(count_unset_bits(1000000000000))\nprint(count_unset_bits(10000000000000))\nprint(count_unset_bits(100000000000000))\nprint(count_unset_bits(1000000000000000))\nprint(count_unset_bits(10000000000000000))\nprint(count_unset_bits(100000000000000000))\nprint(count_unset_bits(1000000000000000000))\nprint(count_unset_bits(10000000000000000000))\nprint(count_unset_bits(100000000000000000000))\nprint(count_unset_bits(1000000000000000000000))\nprint(count_unset_bits"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t\tdict = {}\n\t\tfor n in str1:\n\t\t\tkeys = dict.keys()\n\t\t\tif n in keys:\n\t\t\t\tdict[n] += 1\n\t\t\telse:\n\t\t\t\tdict[n] = 1\n\t\treturn dict\n\nprint(char_frequency('google.com'))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\n\ndef add_is(str1):\n\tif str1[:2] == 'Is':\n\t\treturn str1\n\telse:\n\t\treturn 'Is' + str1\n\nprint(add_is('Is'))\nprint(add_is('Isn\\'t'))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\n\ndef string_copies(str1, n):\n\treturn str1 * n\n\nprint(string_copies('abc', 2))\n<file_sep>/python"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\n    # reverse = None (Sorts in Ascending order) \n    # key is set to sort using second element of  \n    # sublist lambda has been used \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li \n\n# Driver Code \nsub_li = [[1, 2], [3, 4], [4, 1], [9, 10]] \nprint(Sort(sub_li)) \n\n# +\n\"\"\"\nWrite a python function to find the maximum and minimum number from a given list.\n\"\"\"\ndef max_min(li):\n    return max(li), min(li)\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_min(li))\n\n# +\n\"\"\"\nWrite a python function to find the maximum and minimum number from a given list using reduce().\n\"\"\"\nfrom functools import reduce\n\ndef max_min(li):\n    return reduce(lambda a,b: a if a > b else b, li), reduce(lambda a,b: a if a < b else b, li)\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_min(li))\n\n# +\n\"\"\"\nWrite a python function to find the maximum and minimum number from a given list using reduce().\n\"\"\"\nfrom functools import reduce\n\ndef max_min(li):\n    return reduce(lambda a,b: a if a > b else b, li), reduce(lambda a,b: a if a < b else b, li)\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_min(li))\n\n# +\n\"\"\"\nWrite a python function to find the maximum and minimum number from a given list using reduce().\n\"\"\"\nfrom functools import reduce\n\ndef max_min(li):\n    return reduce(lambda a,b: a if a > b else b, li), reduce(lambda a,b: a if a < b else b, li)\n\nli = [1,"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t\tif a+b>c and b+c>a and c+a>b:  \n\t\t\treturn True  \n\t\telse:  \n\t\t\treturn False  \na=int(input(\"Enter the first side of triangle: \"))  \nb=int(input(\"Enter the second side of triangle: \"))  \nc=int(input(\"Enter the third side of triangle: \"))  \nif check_Validity(a,b,c):  \n\tprint(\"The triangle is valid\")  \nelse:  \n\tprint(\"The triangle is not valid\")  <file_sep>/Python/Python_Assignment_1/Python_Assignment_1_1.py\n\"\"\"\nWrite a python program to find the area of triangle.\n\"\"\"\ndef area(a,b,c):\n\ts=(a+b+c)/2\n\tarea=(s*(s-a)*(s-b)*(s-c))**0.5\n\treturn area\na=int(input(\"Enter the first side of triangle: \"))\nb=int(input(\"Enter the second side of triangle: \"))\nc=int(input(\"Enter the third side of triangle: \"))\nprint(\"The area of triangle is: \",area(a,b,c))<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_2.py\n\"\"\"\nWrite a python program to find the area of circle.\n\"\"\"\ndef area(r):\n\tarea=3.14*r*r\n\treturn area\nr=int(input(\"Enter the radius of circle: \"))\nprint(\"The area of circle is: \",area(r))<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_3.py\n\"\"\"\nWrite a python program to find the area of rectangle.\n\"\"\"\ndef area(l,b):\n\tarea=l*b\n\treturn area\nl=int(input(\"Enter the length of rectangle: \"))\nb=int(input(\"Enter the breadth of rectangle: \"))\nprint(\"The area of rectangle is: \",area(l,b))<file_sep>/Python/Python_Assignment_1/Python_Assignment_1_4.py\n\"\"\"\nWrite a python program to find the area of square.\n\"\"\"\ndef area(s):\n\tarea=s*s\n\treturn area\ns=int(input(\"Enter the side of"}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t\treturn (n/2)*(2*a+(n-1)*d)\n\nprint ap_sum(1,10,2)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern.\n"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t\tif monthname1 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nmonthname1 = input(\"Enter the month name: \")\nprint(check_monthnum(monthname1))\n<file_sep>/Python_Assignment_1/Assignment_1_10.py\n\"\"\"\nWrite a function to check whether the given number is prime or not.\n\"\"\"\ndef check_prime(num1):\n\tif num1 > 1:\n\t\tfor i in range(2,num1):\n\t\t\tif (num1 % i) == 0:\n\t\t\t\tprint(num1,\"is not a prime number\")\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint(num1,\"is a prime number\")\n\telse:\n\t\tprint(num1,\"is not a prime number\")\n\nnum1 = int(input(\"Enter the number: \"))\ncheck_prime(num1)\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a function to check whether the given number is even or not.\n\"\"\"\ndef check_even(num1):\n\tif num1 % 2 == 0:\n\t\tprint(num1,\"is an even number\")\n\telse:\n\t\tprint(num1,\"is an odd number\")\n\nnum1 = int(input(\"Enter the number: \"))\ncheck_even(num1)\n<file_sep>/Python_Assignment_1/Assignment_1_11.py\n\"\"\"\nWrite a function to check whether the given number is perfect or not.\n\"\"\"\ndef check_perfect(num1):\n\tsum = 0\n\tfor i in range(1,num1):\n\t\tif num1 % i == 0:\n\t\t\tsum = sum + i\n\tif sum == num1:\n\t\tprint(num1,\"is a perfect number\")\n\telse:\n\t\tprint(num1,\"is not a perfect number\")\n\nnum1 = int(input(\"Enter the number: \"))\ncheck_perfect(num1)\n<file_sep>/Python_Assignment_1/Assignment_1_12.py\n\"\"\"\nWrite a function to check whether the given number is strong or not.\n\"\"\"\ndef check_strong(num1):\n\tsum = 0\n\ttemp = num1\n\twhile temp > 0:\n\t\tdigit"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t\treturn re.search(r'\\w+[.!?]$', text)\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_beginning(text):\n\t\treturn re.search(r'^\\w+[.!?]', text)\n\n\"\"\"\nWrite a function that matches a word within a string, with optional punctuation.\n\"\"\"\ndef text_match_word_within(text):\n\t\treturn re.search(r'\\w+[.!?]', text)\n\n\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_end(text):\n\t\treturn re.search(r'\\w+[.!?]$', text).group()\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_beginning(text):\n\t\treturn re.search(r'^\\w+[.!?]', text).group()\n\n\"\"\"\nWrite a function that matches a word within a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_within(text):\n\t\treturn re.search(r'\\w+[.!?]', text).group()\n\n\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_end(text):\n\t\treturn re.search(r'\\w+[.!?]$', text).group()\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_beginning(text):\n\t\treturn re.search(r'^\\w+[.!?]', text).group()\n\n\"\"\"\nWrite a function that matches a word within a string, with optional punctuation,\nand returns the word.\n\"\"\"\ndef text_match_word_within(text):\n\t\treturn re.search(r'\\w+[.!?]', text).group()\n\n\"\"\"\nWrite a function that matches a word at the end of a string,"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tn = len(s) \n\t\tres = 0\n\t\tfor i in range(n): \n\t\t\tfor j in range(i, n): \n\t\t\t\tif (s[i] == s[j]): \n\t\t\t\t\tres += 1\n\t\treturn res \n\ns = \"abc\"\nprint(count_Substring_With_Equal_Ends(s))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t\tif x > y:  \n\t\t\tsmall = y  \n\t\telse:  \n\t\t\tsmall = x  \n\t\tfor i in range(1, small+1):  \n\t\t\tif((x % i == 0) and (y % i == 0)):  \n\t\t\t\tgcd = i  \n\t\treturn gcd  \nx = int(input(\"Enter the first number: \"))  \ny = int(input(\"Enter the second number: \"))  \nprint(\"The GCD of\", x, \"and\", y, \"is\", find_Divisor(x, y))  <file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t\tlst.sort()\n\t\treturn sum(lst[:3])\n\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three_nums(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three_nums(1, 2, 3))\nprint(sum_three_nums(3, 3, 3))\nprint(sum_three_nums(1, 1, 1))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_num(lst):\n\treturn min(lst)\n\nprint(smallest_num([1, 2, 3, 4, 5]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8,"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into a frozenset.\n\"\"\"\ndef set_to_frozenset(s):\n\t\treturn frozenset(s)\n\n\"\"\"\nWrite a function to convert the given set into a list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict.fromkeys(s)\n\n\"\"\"\nWrite a function to convert the given set into a string.\n\"\"\"\ndef set_to_string(s):\n\t\treturn str(s)\n\n\"\"\"\nWrite a function to convert the given set into a tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into a frozenset.\n\"\"\"\ndef set_to_frozenset(s):\n\t\treturn frozenset(s)\n\n\"\"\"\nWrite a function to convert the given set into a list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict.fromkeys(s)\n\n\"\"\"\nWrite a function to convert the given set into a string.\n\"\"\"\ndef set_to_string(s):\n\t\treturn str(s)\n\n\"\"\"\nWrite a function to convert the given set into a tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into a frozenset.\n\"\"\"\ndef set_to_frozenset(s):\n\t\treturn frozenset(s)\n\n\"\"\"\nWrite a function to convert the given set into a list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict.fromkeys(s)\n\n\"\"\"\nWrite a function to convert the given set into a string.\n\"\"\"\ndef set_to_string(s):\n\t\treturn str("}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of integers, find the largest product you can get from three of the integers.\n\"\"\"\ndef find_largest_product(list):\n\t\n\n\n\"\"\"\nGiven a list of"}
{"ID": 706, "source": "MBPP:343", "prompt": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t", "predict": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t\td = 0\n\t\tl = 0\n\t\tfor i in s:\n\t\t\tif i.isdigit():\n\t\t\t\td += 1\n\t\t\telif i.isalpha():\n\t\t\t\tl += 1\n\t\treturn d, l\n\nprint(dig_let(\"1234567890\"))\nprint(dig_let(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(dig_let(\"1234567890abcdefghijklmnopqrstuvwxyz\"))\nprint(dig_let(\"1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz\"))\n<file_sep>/python/python_practice/python_practice_1/python_practice_1_1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest(l):\n\treturn max(l)\n\nprint(largest([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_1/python_practice_1_2.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest(l):\n\treturn min(l)\n\nprint(smallest([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_1/python_practice_1_3.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest(l):\n\tl.sort()\n\treturn l[-2]\n\nprint(second_largest([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_practice/python_practice_1/python_practice_1_4.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the second smallest number in the list.\n\"\"\"\ndef second_smallest(l):\n\tl.sort()\n\treturn l[1]\n\nprint(second_smallest([1,2,3,4,5,6,7,8,"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t\tcount = 0\n\t\tfor i in range(n,m+1):\n\t\t\tif i%2!= 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Odd_Squares(1,10))\nprint(count_Odd_Squares(1,100))\nprint(count_Odd_Squares(1,1000))\nprint(count_Odd_Squares(1,10000))\nprint(count_Odd_Squares(1,100000))\nprint(count_Odd_Squares(1,1000000))\nprint(count_Odd_Squares(1,10000000))\nprint(count_Odd_Squares(1,100000000))\nprint(count_Odd_Squares(1,1000000000))\nprint(count_Odd_Squares(1,10000000000))\nprint(count_Odd_Squares(1,100000000000))\nprint(count_Odd_Squares(1,1000000000000))\nprint(count_Odd_Squares(1,10000000000000))\nprint(count_Odd_Squares(1,100000000000000))\nprint(count_Odd_Squares(1,1000000000000000))\nprint(count_Odd_Squares(1,10000000000000000))\nprint(count_Odd_Squares(1,100000000000000000))\nprint(count_Odd_Squares(1,1000000000000000000))\nprint(count_Odd_Squares(1,10000000000000000000))\nprint(count_Odd_Squares(1,10000"}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t\treturn [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n\nprint(diff_consecutivenums([1,2,3,4,6]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\treturn 2*sum(set(nums))-sum(nums)\n\nprint(single_number([4,1,2,1,2]))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_2.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            result.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return result[::-1]\n<file_sep>/python/leetcode/easy/100_"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif k == 1: \n\t\t\treturn n \n\t\tif k == n: \n\t\t\treturn 1\n\t\tif k > n: \n\t\t\treturn 0\n\t\treturn zigzag(n - 1, k - 1) + zigzag(n - 1, k) \n\nn = 4\nk = 2\nprint(zigzag(n, k))\n<file_sep>/Python/LeetCode/100. Same Tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/Python/LeetCode/101. Symmetric Tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\treturn (m * (m + 1) * (2 * n + 1) * (2 * n + 2)) // 8\n\nm = 4\nn = 5\nprint(count_Squares(m, n))\n<file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t\tn = len(M) \n\t\tdp = [[0 for i in range(n)] for j in range(n)] \n\t\tfor i in range(n): \n\t\t\tdp[i][i] = 1\n\t\tfor i in range(n): \n\t\t\tfor j in range(i+1, n): \n\t\t\t\tdp[i][j] = dp[i][j-1] \n\t\t\t\tif M[j] >= 0: \n\t\t\t\t\tdp[i][j] += dp[i][j-1] \n\t\t\t\tif M[j-1] >= 0: \n\t\t\t\t\tdp[i][j] += dp[i][j-1] \n\t\treturn dp[0][n-1] \n\nM = [1, 2, 3, 4, 5] \nprint(find_ways(M)) \n\nM = [1, 2, 3, 4, -5] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, 5] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, 6] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6, 7] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6, -7] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6, -7, 8] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6, -7, -8] \nprint(find_ways(M)) \n\nM = [1, 2, 3, -4, -5, -6, -7, -8, 9]"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t\tfor i in string :\n\t\t\tif i!= '0' and i!= '1' :\n\t\t\t\treturn False\n\t\treturn True\n\nstring = input(\"Enter the string : \")\nif check(string) :\n\tprint(\"The given string is a binary string\")\nelse :\n\tprint(\"The given string is not a binary string\")\n<file_sep>/Python/10.py\n\"\"\"\nWrite a python function to check whether the given string is a palindrome or not.\n\"\"\"\ndef check(string) :\n\tif string == string[::-1] :\n\t\treturn True\n\treturn False\n\nstring = input(\"Enter the string : \")\nif check(string) :\n\tprint(\"The given string is a palindrome\")\nelse :\n\tprint(\"The given string is not a palindrome\")\n<file_sep>/Python/11.py\n\"\"\"\nWrite a python function to check whether the given string is a pangram or not.\n\"\"\"\ndef check(string) :\n\tfor i in range(97,123) :\n\t\tif chr(i) not in string :\n\t\t\treturn False\n\treturn True\n\nstring = input(\"Enter the string : \")\nif check(string) :\n\tprint(\"The given string is a pangram\")\nelse :\n\tprint(\"The given string is not a pangram\")\n<file_sep>/Python/12.py\n\"\"\"\nWrite a python function to check whether the given string is a pangram or not.\n\"\"\"\ndef check(string) :\n\tfor i in range(97,123) :\n\t\tif chr(i) not in string :\n\t\t\treturn False\n\treturn True\n\nstring = input(\"Enter the string : \")\nif check(string) :\n\tprint(\"The given string is a pangram\")\nelse :\n\tprint(\"The given string is not a pangram\")\n<file_sep>/Python/13.py\n\"\"\"\nWrite a python function to check whether the given string is a pangram or not.\n\"\"\"\ndef check(string) :\n\tfor i in range(97,123) :\n\t\tif chr(i) not in string :\n\t\t\treturn False\n\treturn True\n\nstring = input(\"Enter the string : \")\nif check(string) :\n"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\tn = len(s) \n\t\tif n == 0 or n == 1: \n\t\t\treturn n \n\t\tmin_len = n \n\t\tfor i in range(n): \n\t\t\tleft = s[0:i] \n\t\t\tright = s[i+1:] \n\t\t\tmin_len = min(min_len, len(left) + len(right)) \n\t\treturn min_len \n\ns = \"abc\"\nprint(minimum_Length(s))\n<file_sep>/Python/Array/13_Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\n\ndef findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow!= fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow!= fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow\n\nnums = [1,3,4,2,2]\nprint(findDuplicate(nums))\n<file_sep>/Python/Array/12_Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\"\"\"\n\ndef findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow!= fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow!= fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow\n\nnums = [1,3,4,2,2]\nprint(findDuplicate(nums))\n<file_sep>/Python/Array/11_Find_the_duplicate_number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number."}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t\t# Initialize result \n\t\tres = -1\n\t\t# Initialize count of 0s \n\t\tcount = 0\n\t\t# Traverse array \n\t\tfor i in range(n): \n\t\t\t# If element is 0 \n\t\t\tif (arr[i] == 0): \n\t\t\t\t# Increment count of 0s \n\t\t\t\tcount += 1\n\t\t\t# If count becomes k \n\t\t\tif (count == k): \n\t\t\t\t# Update result \n\t\t\t\tres = i \n\t\t\t\tbreak\n\t\treturn res \n\n# Driver code \narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] \nn = len(arr) \nk = 3\nprint(first_Element(arr, n, k)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/1.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1\n\nprint(firstMissingPositive([3, 4, -1, 1]))\nprint(firstMissingPositive([1, 2, 0]))\n<file_sep>/Python/Array/2.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t\tif len(str) > 256:\n\t\t\treturn False\n\t\tchar_set = [False for _ in range(256)]\n\t\tfor char in str:\n\t\t\tval = ord(char)\n\t\t\tif char_set[val]:\n\t\t\t\treturn False\n\t\t\tchar_set[val] = True\n\t\treturn True\n\nprint(unique_Characters(\"abc\"))\nprint(unique_Characters(\"abca\"))\n<file_sep>/Arrays/1.1.py\n\"\"\"\nImplement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?\n\"\"\"\ndef unique_Characters(str):\n\tif len(str) > 256:\n\t\treturn False\n\tchar_set = [False for _ in range(256)]\n\tfor char in str:\n\t\tval = ord(char)\n\t\tif char_set[val]:\n\t\t\treturn False\n\t\tchar_set[val] = True\n\treturn True\n\nprint(unique_Characters(\"abc\"))\nprint(unique_Characters(\"abca\"))\n<file_sep>/Arrays/1.2.py\n\"\"\"\nWrite code to reverse a C-Style String. (C-String means that “abcd” is represented as five characters, including the null character.)\n\"\"\"\ndef reverse_String(str):\n\tstr_list = list(str)\n\tstart = 0\n\tend = len(str_list) - 1\n\twhile start < end:\n\t\tstr_list[start], str_list[end] = str_list[end], str_list[start]\n\t\tstart += 1\n\t\tend -= 1\n\treturn \"\".join(str_list)\n\nprint(reverse_String(\"abcd\"))\n<file_sep>/Arrays/1.4.py\n\"\"\"\nWrite a method to decide if two strings are anagrams or not.\n\"\"\"\ndef anagram(str1, str2):\n\tif len(str1)!= len(str2):\n\t\treturn False\n\tchar_set = [0 for _ in range(256)]\n\tfor char in str1:\n\t\tchar_set[ord(char)] += 1\n\tfor char in str2:\n\t\tchar_set[ord(char)] -= 1\n\tfor val in char_set:\n\t\t"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i][n]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove a specified row from a given nested list.\n\"\"\"\ndef remove_row(list1, n):\n\t\tdel list1[n]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(list1, n):\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1[i])):\n\t\t\t\tif list1[i][j] == n:\n\t\t\t\t\tdel list1[i][j]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tdel list1[i]\n\t\treturn list1\n\n\"\"\"\nWrite a function to remove all the elements from a given nested list.\n\"\"\"\ndef remove_all(list1):\n\t\tfor"}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t\treturn a+(n-1)*d\n\nprint(tn_ap(2,4,3))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t\t# Calculate the number of rectangles in a circle of radius r.  \n\t\t# The area of a rectangle is equal to the area of a square  \n\t\t# with side length equal to the radius of the circle.  \n\t\t# The number of rectangles in a circle is equal to the  \n\t\t# number of squares in a circle.  \n\t\t# The number of squares in a circle is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the circle.  \n\t\t# The number of squares in a square is equal to the  \n\t\t# number of squares in a square with side length equal to  \n\t\t# the radius of the"}
{"ID": 719, "source": "MBPP:356", "prompt": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t", "predict": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t\treturn 180 - (a + b)\n\nprint(find_angle(30,60))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n1"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t\tmax_value = test_list[0][0]\n\t\tfor record in test_list:\n\t\t\tif record[0] > max_value:\n\t\t\t\tmax_value = record[0]\n\t\treturn max_value\n\ntest_list = [(1, 2), (4, 1), (9, 10), (13, -3)]\nprint(find_max(test_list))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the name of the machine on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the name of the current module.\n\"\"\"\nimport sys\nprint(sys.modules[__name__])\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the site directory of the installed modules.\n\"\"\"\nimport sys\nprint(sys.path)\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the size of an object in bytes.\n\"\"\"\nimport sys\nprint(sys.getsizeof(1))\n<file_sep>/python_basics/python_basics_1"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x%y,nums1,nums2))\n\nprint(moddiv_list([10,20,30],[2,3,4]))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\nSample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output :\n\nTwinkle, twinkle, little star,\n\tHow I wonder what you are! \n\t\tUp above the world so high,   \t\t\n\t\tLike a diamond in the sky. \nTwinkle, twinkle, little star, \n\tHow I wonder what you are\n\"\"\"\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to display the examination schedule. (extract the date from exam_st_date).\nexam_st_date = (11, 12, 2014)\nSample Output : The examination will start from : 11 / 12 / 2014\n\"\"\"\nexam_st_date = (11, 12, 2014)\nprint(\"The examination will start from : %i / %i / %i\"%exam_st_date)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to print the calendar of a given month and year.\nNote : Use 'calendar' module.\n\"\"\"\nimport calendar\nprint(calendar.month(2019,1))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to print the following here document.\nSample string :\na string"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (b**2 - 4*a*c) == 0: \n\t\t\tprint(\"Roots are real and equal.\") \n\t\telif (b**2 - 4*a*c) > 0: \n\t\t\tprint(\"Roots are real and distinct.\") \n\t\telse: \n\t\t\tprint(\"Roots are complex and distinct.\") \n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nCheck_Solution(a,b,c)\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the area of a triangle.\n\"\"\"\ndef Area_Triangle(a,b,c):\n\ts = (a+b+c)/2\n\tarea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\treturn area\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\nprint(\"Area of the triangle is: \",Area_Triangle(a,b,c))\n<file_sep>/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the area of a circle.\n\"\"\"\ndef Area_Circle(r):\n\tarea = 3.14 * r * r\n\treturn area\n\nr = int(input(\"Enter the value of radius: \"))\nprint(\"Area of the circle is: \",Area_Circle(r))\n<file_sep>/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the area of a rectangle.\n\"\"\"\ndef Area_Rectangle(l,b):\n\tarea = l * b\n\treturn area\n\nl = int(input(\"Enter the value of length: \"))\nb = int(input(\"Enter the value of breadth: \"))\nprint(\"Area of the rectangle is: \",Area_Rectangle(l,b))\n<file_sep>/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the area of a square.\n\"\"\"\ndef Area_Square(a):\n\tarea = a *"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn n * get_carol(n - 1) \n\n# Driver code \nn = 5\nprint(get_carol(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n\n# Driver code \nn = 12345\nprint(sum_of_digits(n)) \n\n\"\"\"\nWrite a function to find the sum of digits of a given number.\n\"\"\"\ndef sum_of_digits(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn (n % 10 + sum_of_digits(int(n / 10))) \n"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t\tlist1 = [x for x in list1 if x!= []]\n\t\treturn list1\n\n\"\"\"\nWrite a function to find the list of words that are longer than n from a given list of words.\n\"\"\"\ndef longer_words(list1, n):\n\t\tlist1 = [x for x in list1 if len(x) > n]\n\t\treturn list1\n\n\"\"\"\nWrite a function to print a specified list after removing the 0th, 4th and 5th elements.\n\"\"\"\ndef remove_elements(list1):\n\t\tlist1 = [x for (i,x) in enumerate(list1) if i not in (0,4,5)]\n\t\treturn list1\n\n\"\"\"\nWrite a function to compute the product of a list of integers.\n\"\"\"\ndef product(list1):\n\t\tproduct = 1\n\t\tfor x in list1:\n\t\t\t\tproduct *= x\n\t\treturn product\n\n\"\"\"\nWrite a function to compute the square of a number.\n\"\"\"\ndef square(n):\n\t\treturn n**2\n\n\"\"\"\nWrite a function to compute the sum of the squares of a list of integers.\n\"\"\"\ndef sum_of_squares(list1):\n\t\tsum = 0\n\t\tfor x in list1:\n\t\t\t\tsum += square(x)\n\t\treturn sum\n\n\"\"\"\nWrite a function to compute the hypotenuse of a right angled triangle.\n\"\"\"\ndef hypotenuse(a, b):\n\t\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list1):\n\t\treturn max(list1), min(list1)\n\n\"\"\"\nWrite a function to find the second largest number in a list.\n\"\"\"\ndef second_largest(list1):\n\t\treturn sorted(list1)[-2]\n\n\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(list1):\n\t\treturn sorted(list1)[1]\n\n\"\"\"\nWrite a function to find the sum of the elements in a list.\n\"\"\"\ndef sum_list(list1):\n\t\treturn sum(list1)\n\n\"\"\"\nWrite a function to find the product"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tmax_count = 0\n\t\tmax_num = None\n\t\tfor num in nums:\n\t\t\tcount = nums.count(num)\n\t\t\tif count > max_count:\n\t\t\t\tmax_count = count\n\t\t\t\tmax_num = num\n\t\treturn max_num\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7,"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t\treturn tuple(map(lambda x: x + K, test_list))\n\nprint(add_K_element((1,2,3,4,5), 10))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the maximum and minimum value in a tuple.\n\"\"\"\ndef max_min_tuple(test_list):\n\t\treturn (max(test_list), min(test_list))\n\nprint(max_min_tuple((1,2,3"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t\n    # Initialize count of flips required \n    count = 0; \n  \n    # Traverse the string \n    for i in range(len(str)): \n  \n        # If current character is '0' and next character is '1' \n        if (i < len(str) - 1 and str[i] == '0' and str[i + 1] == '1'): \n            count += 1; \n  \n        # If current character is '1' and next character is '0' \n        elif (i < len(str) - 1 and str[i] == '1' and str[i + 1] == '0'): \n            count += 1; \n  \n    return count; \n  \n# Driver code \nif __name__ == \"__main__\": \n    str = \"010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t\tcount = 0\n\t\twhile n > 0:\n\t\t\tn = n//10\n\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Digit(12345))\nprint(count_Digit(123456789))\nprint(count_Digit(1234567890))\nprint(count_Digit(12345678901234567890))\nprint(count_Digit(123456789012345678901234567890))\nprint(count_Digit(1234567890123456789012345678901234567890))\nprint(count_Digit(12345678901234567890123456789012345678901234567890))\nprint(count_Digit(123456789012345678901234567890123456789012345678901234567890))\nprint(count_Digit(1234567890123456789012345678901234567890123456789012345678901234567890))\nprint(count_Digit(12345678901234567890123456789012345678901234567890123456789012345678901234567890))\nprint(count_Digit(1234567890123456789"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t\t\"\"\"\n\t\t:type list_nums: list\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif len(list_nums) < 2:\n\t\t\treturn None\n\t\tmax_product = list_nums[0] * list_nums[1]\n\t\tfor i in range(len(list_nums) - 1):\n\t\t\tproduct = list_nums[i] * list_nums[i + 1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\t\treturn max_product\n\nif __name__ == '__main__':\n\tlist_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(adjacent_num_product(list_nums))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums[0]\n\tnums.sort()\n\tfor i in range(len(nums) - 1):\n\t\tif nums[i]!= nums[i + 1]:\n\t\t\treturn nums[i]\n\treturn nums[-1]\n\nif __name__ == '__main__':\n\tnums = [4, 1, 2, 1, 2]\n\tprint(single_number(nums))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,"}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\tif root is None: \n\t\t\treturn True\n\t\tif abs(height(root.left) - height(root.right)) > 1: \n\t\t\treturn False\n\t\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right) \n\ndef height(node): \n\tif node is None: \n\t\treturn 0\n\treturn 1 + max(height(node.left), height(node.right)) \n\n\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\tif root is None: \n\t\t\treturn True\n\t\tif abs(height(root.left) - height(root.right)) > 1: \n\t\t\treturn False\n\t\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right) \n\ndef height(node): \n\tif node is None: \n\t\treturn 0\n\treturn 1 + max(height(node.left), height(node.right)) \n\n\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\tif root is None: \n\t\t\treturn True\n\t\tif abs(height(root.left) - height(root.right)) > 1: \n\t\t\treturn False\n\t\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right) \n\ndef height(node): \n\tif node is None: \n\t\treturn 0\n\treturn 1 + max(height(node.left), height(node.right)) \n\n\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\tif root is None: \n\t\t\treturn True\n\t\tif abs(height(root.left) - height(root.right)) > 1: \n\t\t\treturn False\n\t\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right) \n\ndef height(node): \n\tif node is None: \n\t\treturn 0\n\treturn 1 + max(height(node.left), height(node.right)) \n\n\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t\treturn test_tup * N\n\nprint(repeat_tuples((1,2,3), 3))\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min_tuple(test_tup):\n\t\treturn max(test_tup), min(test_tup)\n\nprint(max_min_tuple((1,2,3,4,5,6,7,8,9,10)))\n\n\"\"\"\nWrite a function to find the index of the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min_index_tuple(test_tup):\n\t\treturn test_tup.index(max(test_tup)), test_tup.index(min(test_tup))\n\nprint(max_min_index_tuple((1,2,3,4,5,6,7,8,9,10)))\n\n\"\"\"\nWrite a function to find the index of the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min_index_tuple(test_tup):\n\t\treturn test_tup.index(max(test_tup)), test_tup.index(min(test_tup))\n\nprint(max_min_index_tuple((1,2,3,4,5,6,7,8,9,10)))\n\n\"\"\"\nWrite a function to find the index of the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min_index_tuple(test_tup):\n\t\treturn test_tup.index(max(test_tup)), test_tup.index(min(test_tup))\n\nprint(max_min_index_tuple((1,2,3,4,5,6,7,8,9,10)))\n\n\"\"\"\nWrite a function to find the index of the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min_index_tuple(test_tup):\n\t\treturn test_tup.index(max(test_tup)), test_tup.index(min(test_tup))\n\nprint(max_min_index_tuple((1,2,3,4,5,6,7,8,9,10)))\n\n\"\"\"\nWrite a function to find the index of the maximum and minimum values in a tuple.\n"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t\treturn 2*(l*w+w*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\n\"\"\"\nWrite a function to find the diagonal of cuboid\n\"\"\"\ndef diagonal_cuboid(l,w,h):\n\t\treturn math.sqrt(l**2+w**2+h**2)\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t\treturn 2*(l*w+w*h+h*l+l*h+w*h)\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\n\"\"\"\nWrite a function to find the diagonal of cuboid\n\"\"\"\ndef diagonal_cuboid(l,w,h):\n\t\treturn math.sqrt(l**2+w**2+h**2)\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t\treturn 2*(l*w+w*h+h*l+l*h+w*h)\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\n\"\"\"\nWrite a function to find the diagonal of cuboid\n\"\"\"\ndef diagonal_cuboid(l,w,h):\n\t\treturn math.sqrt(l**2+w**2+h**2)\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t\treturn 2*(l*w+w*h+h*l+l*h+w*h)\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\n\"\"\"\nWrite a function to find the diagonal of cuboid\n\"\"\"\ndef diagonal_cuboid(l,w,h):\n\t\treturn"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t\treturn price[1]\n\ndef main():\n\tprices = [(1, 2.95), (2, 4.50), (3, 6.75)]\n\tprint(sorted(prices, key=float_sort))\n\nif __name__ == '__main__':\n\tmain()\n<file_sep>/ch04/4-1.py\n\"\"\"\nWrite a function that takes a list of numbers and returns the cumulative sum; that is, a new list where the ith element is the sum of the first i + 1 elements from the original list. For example, the cumulative sum of [1, 2, 3] is [1, 3, 6].\n\"\"\"\ndef cumulative_sum(numbers):\n\tsum = 0\n\tfor number in numbers:\n\t\tsum += number\n\t\tyield sum\n\ndef main():\n\tnumbers = [1, 2, 3]\n\tfor number in cumulative_sum(numbers):\n\t\tprint(number)\n\nif __name__ == '__main__':\n\tmain()\n<file_sep>/ch04/4-10.py\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\"\"\"\ndef reverse(string):\n\treturn string[::-1]\n\ndef main():\n\tprint(reverse('abcd'))\n\nif __name__ == '__main__':\n\tmain()\n<file_sep>/ch04/4-11.py\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed, with the first character unchanged.\n\"\"\"\ndef reverse(string):\n\treturn string[1:] + string[0]\n\ndef main():\n\tprint(reverse('abcd'))\n\nif __name__ == '__main__':\n\tmain()\n<file_sep>/ch04/4-12.py\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed, with the first and last characters unchanged.\n\"\"\"\ndef reverse(string):\n\treturn string[1:-1] + string[-1] + string[0]\n\ndef main():\n\tprint(reverse('abcd'))\n\nif __name__ == '__main__':\n\tmain()\n<file_sep>/ch04/4-13.py\n\"\"\"\nWrite a function that takes a string as input and returns"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t\tif len(A) == 0:\n\t\t\treturn left_element\n\t\tif len(A) == 1:\n\t\t\tif A[0] == left_element:\n\t\t\t\treturn right_element\n\t\t\telse:\n\t\t\t\treturn left_element\n\t\tif A[0]!= left_element:\n\t\t\treturn left_element\n\t\tif A[-1]!= right_element:\n\t\t\treturn right_element\n\t\tif A[0] == left_element and A[-1] == right_element:\n\t\t\treturn smallest_missing(A[1:-1], left_element, right_element)\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,"}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t\theapq.heapify(nums)\n\t\treturn nums\n\nnums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nprint(heap_assending(nums))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    "}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\nprint(volume_cuboid(1,2,3))\n\n\"\"\"\nWrite a function to find the area of a cylinder with the given radius and height.\n\"\"\"\ndef area_cylinder(r,h):\n\t\treturn 2*3.14*r*h+2*3.14*r*r\n\nprint(area_cylinder(1,2))\n\n\"\"\"\nWrite a function to find the circumference of a circle with the given radius.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\nprint(circumference_circle(1))\n\n\"\"\"\nWrite a function to find the area of a circle with the given radius.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint(area_circle(1))\n\n\"\"\"\nWrite a function to find the area of a square with the given side.\n\"\"\"\ndef area_square(s):\n\t\treturn s*s\n\nprint(area_square(1))\n\n\"\"\"\nWrite a function to find the area of a rectangle with the given length and width.\n\"\"\"\ndef area_rectangle(l,w):\n\t\treturn l*w\n\nprint(area_rectangle(1,2))\n\n\"\"\"\nWrite a function to find the area of a triangle with the given base and height.\n\"\"\"\ndef area_triangle(b,h):\n\t\treturn 0.5*b*h\n\nprint(area_triangle(1,2))\n\n\"\"\"\nWrite a function to find the area of a trapezoid with the given height, base 1, and base 2.\n\"\"\"\ndef area_trapezoid(h,b1,b2):\n\t\treturn 0.5*h*(b1+b2)\n\nprint(area_trapezoid(1,2,3))\n\n\"\"\"\nWrite a function to find the area of a parallelogram with the given height and base.\n\"\"\"\ndef area_parallelogram(h,b):\n\t\treturn h*b\n\nprint(area_parallelogram(1,2))\n\n\"\"\"\nWrite a function to find the area of a sector with the given"}
{"ID": 737, "source": "MBPP:374", "prompt": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t", "predict": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t\n\n\nif __name__ == '__main__':\n\tstr = 'abc'\n\tpermute_string(str)<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nclass Solution(object):\n    def isSameTree(self, p,"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t\treturn m * round(n/m)\n\nprint(round_num(10,5))\nprint(round_num(10,3))\nprint(round_num(10,2))\nprint(round_num(10,1))\nprint(round_num(10,0.5))\nprint(round_num(10,0.3))\nprint(round_num(10,0.2))\nprint(round_num(10,0.1))\nprint(round_num(10,0.05))\nprint(round_num(10,0.03))\nprint(round_num(10,0.02))\nprint(round_num(10,0.01))\nprint(round_num(10,0.005))\nprint(round_num(10,0.003))\nprint(round_num(10,0.002))\nprint(round_num(10,0.001))\nprint(round_num(10,0.0005))\nprint(round_num(10,0.0003))\nprint(round_num(10,0.0002))\nprint(round_num(10,0.0001))\nprint(round_num(10,0.00005))\nprint(round_num(10,0.00003))\nprint(round_num(10,0.00002))\nprint(round_num(10,0.00001))\nprint(round_num(10,0.000005))\nprint(round_num(10,0.000003))\nprint(round_num(10,0.000002))\nprint(round_num(10,0.000001))\nprint(round_num(10,0.0000005))\nprint(round_num(10,0.0000003))\nprint(round_num(10,0.00000"}
{"ID": 739, "source": "MBPP:376", "prompt": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t\treturn tuple(set(test_tup))\n\nprint(remove_replica((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9)))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n<file_sep>/python_practice/python_practice_2.py\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)):\n\t\twhile strs[i].find(prefix)!= 0:\n\t\t\tprefix = prefix[:-1]\n\treturn prefix\n\nprint(longest_common_"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t\treturn s.replace(c, \"\")\n\nprint(remove_Char(\"Hello World\", \"l\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a python program to display the current date and time.\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\n\nimport math\n\nr = float(input(\"Enter the radius of the circle : \"))\n\nprint(\"Area of the circle is : \", math.pi * r * r)\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfirst_name = input(\"Enter your first name : \")\nlast_name = input(\"Enter your last name : \")\n\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a python program which accepts the base and height of a triangle and compute the area.\n\"\"\"\n\nbase = float(input(\"Enter the base of the triangle : \"))\nheight = float(input(\"Enter the height of the triangle : \"))\n\nprint(\"Area of the triangle is : \", 0.5 * base * height)\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\n\nfirst_name = input(\"Enter your first name : \")\nlast_name"}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t\ttest_list.insert(0, test_list.pop())\n\t\treturn test_list\n\nprint(move_first([1,2,3,4,5]))\nprint(move_first([1,2,3,4,5,6]))\nprint(move_first([1,2,3,4,5,6,7]))\nprint(move_first([1,2,3,4,5,6,7,8]))\nprint(move_first([1,2,3,4,5,6,7,8,9]))\nprint(move_first([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i, end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n11\n111\n1111\n11111\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i, end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j, end=\"\")\n\tprint()\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\n"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t\treturn 2*(l*w+l*h+w*h)\n\nprint(surfacearea_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\nprint(volume_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*3.14*r*r\n\nprint(surfacearea_sphere(2))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*3.14*r*r*r\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*3.14*r*(r+h)\n\nprint(surfacearea_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint(volume_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 3.14*r*(r+((r*r)+(h*h))**0.5)\n\nprint(surfacearea_cone(2,3))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 3.14*r*r*h/3\n\nprint(volume_cone(2,3))\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\ndef surfacearea_hemisphere(r):\n\t\treturn 3*3.14*r*r\n\nprint(surfacearea_hemisphere(2))\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(multi_list(3,4))\n<file_sep>/python_basic/python_basic_10.py\n\"\"\"\nWrite a function to find the maximum and minimum values in a tuple.\n\"\"\"\ndef max_min(tup):\n\treturn max(tup),min(tup)\n\nprint(max_min((1,2,3,4,5,6,7,8,9,10)))\n<file_sep>/python_basic/python_basic_1.py\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef factorial(num):\n\tif num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num-1)\n\nprint(factorial(5))\n<file_sep>/python_basic/python_basic_12.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3 + 1/4 +... + 1/n.\n\"\"\"\ndef sum_series(num):\n\treturn sum([1/i for i in range(1,num+1)])\n\nprint(sum_series(5))\n<file_sep>/python_basic/python_basic_11.py\n\"\"\"\nWrite a function to find the sum of the series 1 + x + x^2 + x^3 +... + x^n.\n\"\"\"\ndef sum_series(num,x):\n\treturn sum([x**i for i in range(num+1)])\n\nprint(sum_series(5,2))\n<file_sep>/python_basic/python_basic_13.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2^2 + 1/3^2 + 1/4^2 +... + 1/n^2.\n\"\"\"\ndef sum_series(num):\n\treturn sum([1/(i**2) for i in range(1,num+1)])\n\nprint(sum_series(5))\n<file_sep>/python_basic/python_basic_2.py\n\"\"\"\nWrite a function to find the sum of the series 1 + 1/2 + 1/3"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n# Test\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n# Test\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n# Test\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n# Test\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n# Test\nlist_data = [[1, 2, 3], [4, 5, 6], [7"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t\t\"\"\"\n\t\t:type A: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif not A:\n\t\t\treturn 0\n\t\tstart = 0\n\t\tend = len(A) - 1\n\t\twhile start <= end:\n\t\t\tmid = (start + end) // 2\n\t\t\tif A[mid] > A[mid + 1]:\n\t\t\t\treturn mid + 1\n\t\t\tif A[mid] < A[start]:\n\t\t\t\tend = mid - 1\n\t\t\telse:\n\t\t\t\tstart = mid + 1\n\t\treturn 0\n\nif __name__ == '__main__':\n\tA = [15, 18, 2, 3, 6, 12]\n\tprint(find_rotation_count(A))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution(object):\n\tdef isSameTree(self, p, q):\n\t\t\"\"\"\n\t\t:type p: TreeNode\n\t\t:type q: TreeNode\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not p and not q:\n\t\t\treturn True\n\t\tif not p or not q:\n\t\t\treturn False\n\t\tif p.val!= q.val:\n\t\t\treturn False\n\t\treturn self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\nif __name__ == '__main__':\n\tp = TreeNode(1)\n\tp.left = TreeNode(2)\n\tp.right = TreeNode(3)\n\tq = TreeNode(1)\n\tq.left = TreeNode(2)\n\tq.right = TreeNode(3)\n\tprint(Solution().isSameTree(p, q))\n<file_sep>/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself ("}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\treturn n ^ 0x55555555\n\nprint even_bit_toggle_number(10)\nprint even_bit_toggle_number(11)\nprint even_bit_toggle_number(12)\nprint even_bit_toggle_number(13)\nprint even_bit_toggle_number(14)\nprint even_bit_toggle_number(15)\nprint even_bit_toggle_number(16)\nprint even_bit_toggle_number(17)\nprint even_bit_toggle_number(18)\nprint even_bit_toggle_number(19)\nprint even_bit_toggle_number(20)\nprint even_bit_toggle_number(21)\nprint even_bit_toggle_number(22)\nprint even_bit_toggle_number(23)\nprint even_bit_toggle_number(24)\nprint even_bit_toggle_number(25)\nprint even_bit_toggle_number(26)\nprint even_bit_toggle_number(27)\nprint even_bit_toggle_number(28)\nprint even_bit_toggle_number(29)\nprint even_bit_toggle_number(30)\nprint even_bit_toggle_number(31)\nprint even_bit_toggle_number(32)\nprint even_bit_toggle_number(33)\nprint even_bit_toggle_number(34)\nprint even_bit_toggle_number(35)\nprint even_bit_toggle_number(36)\nprint even_bit_toggle_number(37)\nprint even_bit_toggle_number(38)\nprint even_bit_toggle_number(39)\nprint even_bit_toggle_number(40)\nprint even_bit_toggle_number(41)\nprint even_bit_toggle_number(42)\nprint even_bit_toggle_number(43)\nprint even_bit_toggle_number(44)\nprint even_bit_toggle_number(45)\nprint even_bit_toggle_number(46)\nprint even_bit_toggle_number(47)\nprint"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t\tmin_value = min(arr) \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tif arr[i] == min_value: \n\t\t\t\tcount += 1\n\t\treturn count\n\nn = int(input(\"Enter the size of array: \"))\narr = []\nfor i in range(n):\n\tarr.append(int(input(\"Enter the element: \")))\n\nprint(\"Frequency of smallest value in the array is: \",frequency_Of_Smallest(n,arr))\n<file_sep>/Python/Array/Find_the_smallest_and_largest_element_in_an_array.py\n\"\"\"\nWrite a python function to find the smallest and largest element in an array.\n\"\"\"\ndef smallest_largest(n,arr):\n\tmin_value = min(arr)\n\tmax_value = max(arr)\n\treturn min_value,max_value\n\nn = int(input(\"Enter the size of array: \"))\narr = []\nfor i in range(n):\n\tarr.append(int(input(\"Enter the element: \")))\n\nprint(\"Smallest and largest element in the array is: \",smallest_largest(n,arr))\n<file_sep>/Python/Array/Find_the_second_largest_element_in_an_array.py\n\"\"\"\nWrite a python function to find the second largest element in an array.\n\"\"\"\ndef second_largest(n,arr):\n\tmax_value = max(arr)\n\tarr.remove(max_value)\n\tsecond_max_value = max(arr)\n\treturn second_max_value\n\nn = int(input(\"Enter the size of array: \"))\narr = []\nfor i in range(n):\n\tarr.append(int(input(\"Enter the element: \")))\n\nprint(\"Second largest element in the array is: \",second_largest(n,arr))\n<file_sep>/Python/Array/Find_the_second_smallest_element_in_an_array.py\n\"\"\"\nWrite a python function to find the second smallest element in an array.\n\"\"\"\ndef second_smallest(n,arr):\n\tmin_value = min(arr)\n\tarr.remove(min_value)\n\tsecond_min_value = min(arr)"}
{"ID": 748, "source": "MBPP:385", "prompt": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t", "predict": "\"\"\"\nWrite a function to find then'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telif n == 2:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n\nprint get_perrin(10)\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n   "}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t\tstack = []\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i == '{':\n\t\t\t\tstack.append(i)\n\t\t\telse:\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\tcount += 1\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\treturn count + len(stack)\n\ns = input()\nprint(swap_count(s))\n<file_sep>/Codechef/Beginner/Chef and Remissness.py\n\"\"\"\nChef has a remisness. He has to go to the market to buy some vegetables.\n\nThe market is located at a distance of X kilometers from his house.\n\nChef can walk at a speed of Y kilometers per hour.\n\nChef can walk at a speed of Z kilometers per hour.\n\nChef has to buy exactly K kilograms of vegetables.\n\nFind the minimum time required to buy exactly K kilograms of vegetables.\n\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains four space-separated integers X, Y, Z and K.\nOutput\nFor each test case, print a single line containing one integer ― the minimum time required to buy exactly K kilograms of vegetables.\n\nConstraints\n1≤T≤100\n1≤X,Y,Z≤100\n1≤K≤100\nSubtasks\nSubtask #1 (100 points): original constraints\n\nExample Input\n2\n10 10 10 10\n10 10 10 11\nExample Output\n1\n2\nExplanation\nExample case 1: Chef can buy the vegetables in 1 hour.\n\nExample case 2: Chef can buy the vegetables in 2 hours.\n\"\"\"\n\nfor _ in range(int(input())):\n\tx, y, z, k = map(int, input().split())\n\tif k <= x:\n\t\tprint(k//y)\n\telse:\n\t\tprint(x//y + (k-x)//z)\n<file_sep>/Codechef/Beginner/Chef and Operators.py"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t\tif N % 2 == 0: \n\t\t\tprint(\"Even\") \n\t\telse: \n\t\t\tprint(\"Odd\") \n\nN = int(input(\"Enter a number: \"))\neven_or_odd(N)\n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python function to check whether the number is prime or not.\n\"\"\"\ndef prime_or_not(N):\n\tif N > 1:\n\t\tfor i in range(2, N):\n\t\t\tif (N % i) == 0:\n\t\t\t\tprint(\"Not Prime\")\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint(\"Prime\")\n\telse:\n\t\tprint(\"Not Prime\")\n\nN = int(input(\"Enter a number: \"))\nprime_or_not(N)\n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python function to check whether the number is even or odd.\n\"\"\"\ndef even_or_odd(N):\n\tif N % 2 == 0:\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")\n\nN = int(input(\"Enter a number: \"))\neven_or_odd(N)\n<file_sep>/Python/Python_Assignment_1/Q11.py\n\"\"\"\nWrite a python function to check whether the number is palindrome or not.\n\"\"\"\ndef palindrome(N):\n\trev = 0\n\ttemp = N\n\twhile temp > 0:\n\t\trev = rev * 10 + temp % 10\n\t\ttemp = temp // 10\n\tif rev == N:\n\t\tprint(\"Palindrome\")\n\telse:\n\t\tprint(\"Not Palindrome\")\n\nN = int(input(\"Enter a number: \"))\npalindrome(N)\n<file_sep>/Python/Python_Assignment_1/Q12.py\n\"\"\"\nWrite a python function to check whether the number is armstrong or not.\n\"\"\"\ndef armstrong(N):\n\tsum = 0\n\ttemp = N\n\twhile temp > 0:\n\t\tdigit = temp % 10\n\t\tsum += digit ** 3\n\t\ttemp //= 10\n\tif sum == N:\n\t\tprint(\"Armstrong\")\n\telse:\n\t\tprint(\"Not Arm"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn n & ~(n-1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(45))\nprint(highest_Power_of_2(4"}
{"ID": 752, "source": "MBPP:389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t\tif n == 0: \n\t\t\treturn 2\n\t\telif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn find_lucas(n-1) + find_lucas(n-2) \n\nprint(find_lucas(10))\n<file_sep>/python/recursion/fibonacci.py\n\"\"\"\nWrite a function to find then'th fibonacci number.\n\"\"\"\ndef find_fibonacci(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn find_fibonacci(n-1) + find_fibonacci(n-2) \n\nprint(find_fibonacci(10))\n<file_sep>/python/recursion/factorial.py\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef find_factorial(n): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn n * find_factorial(n-1) \n\nprint(find_factorial(10))\n<file_sep>/python/recursion/sum_of_digits.py\n\"\"\"\nWrite a function to find the sum of digits of a number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10) + sum_of_digits(int(n / 10)) \n\nprint(sum_of_digits(1234))\n<file_sep>/python/recursion/sum_of_digits_2.py\n\"\"\"\nWrite a function to find the sum of digits of a number.\n\"\"\"\ndef sum_of_digits(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10) + sum_of_digits(int(n / 10)) \n\nprint(sum_of_digits(1234))\n\ndef sum_of_digits_2(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telse: \n\t\t\treturn (n % 10) + sum_of_digits_2(int(n / 10)) \n\nprint(sum_of_digits_"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t\treturn [string+item for item in list]\n\nprint(add_string([\"a\",\"b\",\"c\"],\"**\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current date.\n\"\"\"\nimport datetime\nprint(datetime.date.today())\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get OS name, platform and release information.\n\"\"\"\nimport os\nprint(os.name)\nprint(os.uname())\nprint(os.getlogin())\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to convert seconds to day, hour, minutes and seconds.\n\"\"\"\nimport datetime\nprint(datetime.timedelta(seconds=1000000000))\n<file_sep>/python/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the identity of an object.\n\"\"\"\nimport sys\nprint(sys.getrefcount(1))\n<file_sep>/python/python_basics/python_basics_18.py\n\"\"\"\nWrite a Python program to convert a byte string to a string.\n\"\"\"\nprint(str(b'"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t\t\"\"\"\n\t\tConvert list to nested dictionary.\n\t\t\"\"\"\n\t\treturn {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n\nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = [10, 20, 30]\nprint(convert_list_dictionary(l1, l2, l3))\n<file_sep>/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python_code/python"}
{"ID": 755, "source": "MBPP:392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 3\n\t\tif n == 4:\n\t\t\treturn 4\n\t\tif n == 5:\n\t\t\treturn 5\n\t\tif n == 6:\n\t\t\treturn 6\n\t\tif n == 7:\n\t\t\treturn 7\n\t\tif n == 8:\n\t\t\treturn 8\n\t\tif n == 9:\n\t\t\treturn 9\n\t\tif n == 10:\n\t\t\treturn 10\n\t\tif n == 11:\n\t\t\treturn 11\n\t\tif n == 12:\n\t\t\treturn 12\n\t\tif n == 13:\n\t\t\treturn 13\n\t\tif n == 14:\n\t\t\treturn 14\n\t\tif n == 15:\n\t\t\treturn 15\n\t\tif n == 16:\n\t\t\treturn 16\n\t\tif n == 17:\n\t\t\treturn 17\n\t\tif n == 18:\n\t\t\treturn 18\n\t\tif n == 19:\n\t\t\treturn 19\n\t\tif n == 20:\n\t\t\treturn 20\n\t\tif n == 21:\n\t\t\treturn 21\n\t\tif n == 22:\n\t\t\treturn 22\n\t\tif n == 23:\n\t\t\treturn 23\n\t\tif n == 24:\n\t\t\treturn 24\n\t\tif n == 25:\n\t\t\treturn 25\n\t\tif n == 26:\n\t\t\treturn 26\n\t\tif n == 27:\n\t\t\treturn 27\n\t\tif n == 28:\n\t\t\treturn 28\n\t\tif n == 29:\n\t\t\treturn 29\n\t\tif n == 30:\n\t\t\treturn 30\n\t\tif n == 31:\n\t\t\treturn 31\n\t\tif n == 32:\n\t\t\treturn 32\n\t\tif n == 33:\n\t\t\treturn 33\n\t\tif n == 34:\n\t\t\treturn 34\n\t\tif n == 35"}
{"ID": 756, "source": "MBPP:393", "prompt": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t\treturn max(input_list, key=lambda x: len(x))\n\ninput_list = ['abc', 'xyz', 'lmn', 'pqr']\nprint(max_length_list(input_list))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i+1):\n\t\tprint(j, end=\" \")\n\tprint()\n\nfor i in range(4, 0, -1):\n\tfor j in range("}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t\tif len(test_tup) == len(set(test_tup)):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_distinct((1,2,3,4,5)))\nprint(check_distinct((1,2,3,4,5,5)))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the name of the user on which the routine is running.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit and set the new value.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit and set the new value.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the reference count of an object.\n\"\"\"\nimport sys\na = [1,2,3]\nprint(sys.getrefcount(a))\n<file_sep>/python_basics/python_basics_17.py\n"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t\t\"\"\"\n\t\t:type str1: str\n\t\t:rtype: str\n\t\t\"\"\"\n\t\t# Your code goes here\n\t\tstr1 = str1.lower()\n\t\tfor i in str1:\n\t\t\tif str1.count(i) == 1:\n\t\t\t\treturn i\n\t\treturn None\n\nif __name__ == '__main__':\n\tstr1 = input(\"Enter the string: \")\n\tprint(first_non_repeating_character(str1))\n<file_sep>/python/hackerrank/python/itertools/itertools_combinations_with_replacement.py\n\"\"\"\nitertools.combinations_with_replacement(iterable, r)\nThis tool returns r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.\n\ncombinations_with_replacement(ABC, 2) --> AB AB AC AC BC BC BC CC\n\nIf the input iterable is sorted, the combination tuples will be produced in sorted order.\n\n>>> from itertools import combinations_with_replacement\n>>>\n>>> print list(combinations_with_replacement('12345',2))\n[('1', '1'), ('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '2'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '3'), ('3', '4'), ('3', '5'), ('4', '4'), ('4', '5'), ('5', '5')]\n\"\"\"\n\nfrom itertools import combinations_with_replacement\n\nif __name__ == '__main__':\n\ts, n = input().split()\n\ts = sorted(s)\n\tfor i in combinations_with_replacement(s, int(n)):\n\t\tprint(''.join(i))\n<file_sep>/python/hackerrank/python/strings/string_validators.py\n\"\"\"\nPython has built-in string validation methods for basic data. It can check if a string is composed of alphabetical characters, alphanumeric characters, digits, etc.\n\nstr.isalnum()\nThis method checks if all the characters of a string are alphanumeric (a-z, A-Z and 0-9).\n\n>>> print 'ab123'.isalnum()\nTrue\n>>> print"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t\tif re.match(r\"^(.).*\\1$\", string): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(check_char(\"abc\"))\nprint(check_char(\"abba\"))\nprint(check_char(\"abcde\"))\nprint(check_char(\"abcba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check_char(\"abccba\"))\nprint(check"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t\tif a>b:\n\t\t\tif a<c:\n\t\t\t\treturn a\n\t\t\telif b>c:\n\t\t\t\treturn b\n\t\t\telse:\n\t\t\t\treturn c\n\t\telse:\n\t\t\tif a>c:\n\t\t\t\treturn a\n\t\t\telif b<c:\n\t\t\t\treturn b\n\t\t\telse:\n\t\t\t\treturn c\n\nprint(median_numbers(1,2,3))\nprint(median_numbers(3,2,1))\nprint(median_numbers(1,3,2))\nprint(median_numbers(2,3,1))\nprint(median_numbers(2,1,3))\nprint(median_numbers(3,1,2))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t\treturn [sum(int(x) for x in str(num)) for num in nums]\n\nprint(sum_of_digits([12, 92]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            result.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return result[::-1]\n<file_sep>/python/leetcode/easy/100_same_"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t\treturn (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n\nprint(bitwise_xor((1, 2), (3, 4)))\nprint(bitwise_xor((1, 2), (1, 2)))\nprint(bitwise_xor((1, 2), (2, 1)))\nprint(bitwise_xor((1, 2), (1, 1)))\nprint(bitwise_xor((1, 2), (2, 2)))\nprint(bitwise_xor((1, 2), (3, 3)))\nprint(bitwise_xor((1, 2), (4, 4)))\nprint(bitwise_xor((1, 2), (5, 5)))\nprint(bitwise_xor((1, 2), (6, 6)))\nprint(bitwise_xor((1, 2), (7, 7)))\nprint(bitwise_xor((1, 2), (8, 8)))\nprint(bitwise_xor((1, 2), (9, 9)))\nprint(bitwise_xor((1, 2), (10, 10)))\nprint(bitwise_xor((1, 2), (11, 11)))\nprint(bitwise_xor((1, 2), (12, 12)))\nprint(bitwise_xor((1, 2), (13, 13)))\nprint(bitwise_xor((1, 2), (14, 14)))\nprint(bitwise_xor((1, 2), (15, 15)))\nprint(bitwise_xor((1, 2), (16, 16)))\nprint(bitwise_xor((1, 2), (17, 17)))\nprint(bitwise_xor((1, 2), (18, 18)))\nprint(bitwise_xor((1, 2), (19, 19)))\nprint(bitwise_xor((1, 2), (20, 20)))\nprint(bitwise_xor((1, 2), (21, 2"}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\ntest_list = [(1, 2), (4, 5), (3, 1), (1, 2), (5, 6), (7, 8), (1, 2), (3, 1)]\nprint(extract_freq(test_list))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_string(test_string):\n\tif test_string[:2] == \"Is\":\n\t\treturn test_string\n\telse:\n\t\treturn \"Is\" + test_string\n\nprint(add_string(\"Array\"))\nprint(add_string(\"IsArray\"))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to get"}
{"ID": 764, "source": "MBPP:401", "prompt": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (1, 2, 3, 4, 5)\n\tprint(add_nested_tuples(test_tup1, test_tup2))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\n\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\n\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\n\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\n\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current date and time in different formats.\n\"\"\"\nimport datetime\n\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S %p\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S %p %A\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S %p %A %B\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S %p %A %B %d\"))\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S %p %A %B %d %m\"))\n"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\n    # If n<r, then nCr should return 0 \n    if (n < r) : \n        return 0\n    # If r is 0, then nCr is 1 \n    if (r == 0) : \n        return 1\n      \n    # If r is n, then nCr is n! \n    # which is fibonacci number \n    if (r == n) : \n        return fib(n) \n      \n    # Initialize result \n    res = 1\n      \n    # Calculate value of  \n    # [n * (n-1) *---* (n-r+1)] % p \n    for i in range(r) : \n        res = (res * (n - i)) % p\n          \n    # Return result \n    return res \n      \n# Driver Code \nn = 10\nr = 2\np = 13\nprint(ncr_modp(n, r, p)) \n\n# This code is contributed by <NAME> \n\n# +\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\n    # If n<r, then nCr should return 0 \n    if (n < r) : \n        return 0\n    # If r is 0, then nCr is 1 \n    if (r == 0) : \n        return 1\n      \n    # If r is n, then nCr is n! \n    # which is fibonacci number \n    if (r == n) : \n        return fib(n) \n      \n    # Initialize result \n    res = 1\n      \n    # Calculate value of  \n    # [n * (n-1) *---* (n-r+1)] % p \n    for i in range(r) : \n        res = (res * (n - i)) % p\n          \n    # Return result \n    return res \n      \n# Driver Code \nn = 10\nr = 2\np = 13\nprint(ncr_modp(n, r, p)) \n\n# This code is contributed by <NAME> \n\n# +\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\n    # If n<r, then nCr should return 0 \n    if (n < r) : \n        return 0\n    # If r is 0,"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t\tregex = re.compile(r'^(?:http|ftp)s?://' # http:// or https://\n\t\tr'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n\t\tr'localhost|' #localhost...\n\t\tr'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n\t\tr'(?::\\d+)?' # optional port\n\t\tr'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\t\treturn re.match(regex, str) is not None\n\nprint(is_valid_URL(\"http://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"http://www.google.com/\"))\nprint(is_valid_URL(\"http://www.google.com/index.html\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2&c=3\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2&c=3&d=4\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2&c=3&d=4&e=5\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2&c=3&d=4&e=5&f=6\"))\nprint(is_valid_URL(\"http://www.google.com/index.html?a=1&b=2&c=3&d=4&e=5&"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\tif a<b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint minimum(10,20)\nprint minimum(20,10)\nprint minimum(10,10)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint \"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\"\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint \"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\"\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint \"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\"\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\nprint \"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\""}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t\tif tuple1 in tuplex: \n\t\t\tprint(tuple1, \"is in the tuple\") \n\t\telse: \n\t\t\tprint(tuple1, \"is not in the tuple\") \n\ntuplex = (\"tuple\", \"example\", \"tuple\") \ntuple1 = \"tuple\"\ncheck_tuplex(tuplex,tuple1) \n\ntuple1 = \"example\"\ncheck_tuplex(tuplex,tuple1) \n\ntuple1 = \"example1\"\ncheck_tuplex(tuplex,tuple1) \n\n\"\"\"\nWrite a function to find the index of an item of tuple.\n\"\"\"\ndef find_index(tuplex,tuple1): \n\t\tif tuple1 in tuplex: \n\t\t\tprint(\"Index of\", tuple1, \"is\", tuplex.index(tuple1)) \n\t\telse: \n\t\t\tprint(tuple1, \"is not in the tuple\") \n\ntuplex = (\"tuple\", \"example\", \"tuple\") \ntuple1 = \"tuple\"\nfind_index(tuplex,tuple1) \n\ntuple1 = \"example\"\nfind_index(tuplex,tuple1) \n\ntuple1 = \"example1\"\nfind_index(tuplex,tuple1) \n\n\"\"\"\nWrite a function to find the number of times an item occurs in a tuple.\n\"\"\"\ndef count_tuple(tuplex,tuple1): \n\t\tif tuple1 in tuplex: \n\t\t\tprint(\"Index of\", tuple1, \"is\", tuplex.count(tuple1)) \n\t\telse: \n\t\t\tprint(tuple1, \"is not in the tuple\") \n\ntuplex = (\"tuple\", \"example\", \"tuple\") \ntuple1 = \"tuple\"\ncount_tuple(tuplex,tuple1) \n\ntuple1 = \"example\"\ncount_tuple(tuplex,tuple1) \n\ntuple1 = \"example1\"\ncount_tuple(tuplex,tuple1) \n\n\"\"\"\nWrite a function to convert a tuple into a string.\n\"\"\"\ndef convert_tuple(tuplex): \n\t\tstr = ''.join(tuplex) \n\t\tprint(str) \n\ntuplex = (\"tuple\", \"example\", \"tuple\") \nconvert_tuple(tuplex) \n\n\"\"\"\nWrite a function to slice a tuple.\n\"\"\"\ndef slice_tuple(tuplex,tuple1,tuple2"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t\treturn x % 2\n\nprint(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint(find_Parity(54))\nprint(find_Parity(55"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t\tn = str(n)\n\t\tn = list(n)\n\t\tn.sort()\n\t\tn = ''.join(n)\n\t\tn = int(n)\n\t\treturn n\n\nprint(rearrange_bigger(123456789))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\"\"\"\ndef single_number(nums):\n\t\tnums.sort()\n\t\tfor i in range(len(nums)):\n\t\t\t\tif i == len(nums) - 1:\n\t\t\t\t\t\treturn nums[i]\n\t\t\t\tif nums[i]!= nums[i + 1]:\n\t\t\t\t\t\treturn nums[i]\n\nprint(single_number([4,1,2,1,2]))\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\"\"\"\ndef valid_palindrome(s):\n\t\ts = s.lower()\n\t\ts = s.replace(' ', '')\n\t\ts = s.replace('.', '')\n\t\ts = s.replace(',', '')\n\t\ts = s.replace('!', '')\n\t\ts = s.replace('?', '')\n\t\ts = s.replace(':', '')\n\t\ts = s.replace(';', '')\n\t\ts = s.replace('(', '')\n\t\ts = s.replace(')', '')\n\t\ts = s.replace('-', '')\n\t\ts = s.replace('_', '')\n\t\ts = s.replace('=', '')\n\t\ts = s.replace('\"', '')\n\t\ts = s.replace(\"'\", '')\n\t\ts = s.replace('/', '')\n\t\ts = s.replace('\\\\', '')\n\t\ts = s.replace('[', '')\n\t\ts = s.replace(']', '')\n\t\ts = s.replace('{', '')\n\t\ts = s.replace('}', '')\n\t\ts = s.replace('@', '')\n\t\ts = s.replace('#', '')\n\t\ts = s.replace('$', '')\n\t\ts = s.replace('%', '')\n\t\ts = s.replace('^', '')\n\t\ts = s.replace('&', '')"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\t\"\"\"\n\t\t:type nums1: List[int]\n\t\t:type nums2: List[int]\n\t\t:type k: int\n\t\t:rtype: List[List[int]]\n\t\t\"\"\"\n\t\tif not nums1 or not nums2:\n\t\t\treturn []\n\t\tif k <= 0:\n\t\t\treturn []\n\t\tif k > len(nums1) * len(nums2):\n\t\t\tk = len(nums1) * len(nums2)\n\t\tres = []\n\t\theap = []\n\t\tfor i in range(len(nums1)):\n\t\t\theapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n\t\twhile k > 0:\n\t\t\tk -= 1\n\t\t\tsmallest = heapq.heappop(heap)\n\t\t\tres.append([nums1[smallest[1]], nums2[smallest[2]]])\n\t\t\tif smallest[2] + 1 < len(nums2):\n\t\t\t\theapq.heappush(heap, (nums1[smallest[1]] + nums2[smallest[2] + 1], smallest[1], smallest[2] + 1))\n\t\treturn res\n\n\"\"\"\nGiven a list of words and two words word1 and word2, return the shortest distance between these two words in the list.\n\nFor example,\nAssume that words = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"].\n\nGiven word1 = “coding”, word2 = “practice”, return 3.\nGiven word1 = \"makes\", word2 = \"coding\", return 1.\n\nNote:\nYou may assume that word1 does not equal to word2, and word1 and word2 are both in the list.\n\"\"\"\ndef shortest_word_distance(words, word1, word2):\n\t\t\"\"\"\n\t\t:type words: List[str]\n\t\t:type word1: str\n\t\t:type word2: str\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif word1 == word2:\n\t\t\treturn 0\n\t\tres = len(words)\n\t\ti = 0\n\t\tj = len(words) - 1\n\t\twhile i < j:\n\t\t\tif words[i] == word1:\n\t\t\t\ti +="}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t\tmin_product = 1\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1)):\n\t\t\t\tif i!= j:\n\t\t\t\t\tif list1[i][0] * list1[j][0] < min_product:\n\t\t\t\t\t\tmin_product = list1[i][0] * list1[j][0]\n\t\treturn min_product\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t\tmax_product = 1\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1)):\n\t\t\t\tif i!= j:\n\t\t\t\t\tif list1[i][0] * list1[j][0] > max_product:\n\t\t\t\t\t\tmax_product = list1[i][0] * list1[j][0]\n\t\treturn max_product\n\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t\tmin_product = 1\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1)):\n\t\t\t\tif i!= j:\n\t\t\t\t\tif list1[i][0] * list1[j][0] < min_product:\n\t\t\t\t\t\tmin_product = list1[i][0] * list1[j][0]\n\t\treturn min_product\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t\tmax_product = 1\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1)):\n\t\t\t\tif i!= j:\n\t\t\t\t\tif list1[i][0] * list1[j][0] > max_product:\n\t\t\t\t\t\tmax_product = list1[i][0] * list1[j][0]\n\t\treturn max_product\n\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t\tmin_product = 1\n\t\tfor i in range(len("}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t\tmin_val = listval[0]\n\t\tfor i in listval:\n\t\t\tif i < min_val:\n\t\t\t\tmin_val = i\n\t\treturn min_val\n\nprint(min_val([1,2,3,4,5]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t\treturn re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), word)\n\nprint(snake_to_camel('hello_world'))\nprint(snake_to_camel('hello_world_python'))\nprint(snake_to_camel('hello_world_python_java'))\nprint(snake_to_camel('hello_world_python_java_javascript'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script_go'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script_go_swift'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script_go_swift_kotlin'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script_go_swift_kotlin_scala'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_php_c_c_plus_plus_c_sharp_java_script_go_swift_kotlin_scala_rust'))\nprint(snake_to_camel('hello_world_python_java_javascript_ruby_"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t\treturn [i for i in l if i%2==0]\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/list_comprehension/list_comprehension_1.py\n\"\"\"\nWrite a python program to create a list of all even numbers between 1 and 100.\n\"\"\"\n\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n<file_sep>/python/list_comprehension/list_comprehension_2.py\n\"\"\"\nWrite a python program to create a list of all even numbers between 1 and 100.\n\"\"\"\n\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n# using list comprehension\nl = [i for i in range(1,101) if i%2==0]\nprint(l)\n\n#"}
{"ID": 776, "source": "MBPP:413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t\treturn [i[n] for i in list1]\n\nprint(extract_nth_element([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)], 1))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef get_largest_number(list1):\n\t\treturn max(list1)\n\nprint(get_largest_number([1, 2, 3, 4, 5]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef get_smallest_number(list1):\n\t\treturn min(list1)\n\nprint(get_smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_strings(list1):\n\t\tcount = 0\n\t\tfor i in list1:\n\t\t\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_strings(['abc', 'xyz', 'aba', '1221']))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list(list1):\n\t\treturn sorted(list1, key=lambda x: x[-1])\n\nprint(sort_list([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t\tfor i in list1:  \n\t\t\tfor j in list2:  \n\t\t\t\tif i==j:  \n\t\t\t\t\treturn True  \n\t\treturn False  \nlist1=[1,2,3,4,5]  \nlist2=[5,6,7,8,9]  \nif overlapping(list1,list2):  \n\tprint(\"Yes\")  \nelse:  \n\tprint(\"No\")  <file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\nn=int(input(\"Enter the number:\"))\nprint(\"Factorial of\",n,\"is\",factorial(n))<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers.\n\"\"\"\ndef sum(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum(n-1)\nn=int(input(\"Enter the number:\"))\nprint(\"Sum of first\",n,\"natural numbers is\",sum(n))<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using recursion.\n\"\"\"\ndef sum(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum(n-1)\nn=int(input(\"Enter the number:\"))\nprint(\"Sum of first\",n,\"natural numbers is\",sum(n))<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of the first n natural numbers using recursion.\n\"\"\"\ndef sum(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum(n-1)\nn=int(input(\"Enter the number:\"))\nprint(\"Sum of first\",n,\"natural numbers is\",sum(n))<file_sep>/Python/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t\n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Initialize the product \n    product = 1\n  \n    # Find the product of the last two elements \n    for i in range(len(arr)-1, len(arr)-3, -1): \n        product = product * arr[i] \n  \n    return product \n  \n# Driver code \narr = [10, 3, 5, 6, 20] \nprint(max_Product(arr)) <file_sep>/Python/Python_Basics/Python_Basics_1.py\n# Python Basics\n\n# 1. Write a Python program to print the following string in a specific format (see the output).\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\n# 2. Write a Python program to get the Python version you are using.\n\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n\n# 3. Write a Python program to display the current date and time.\n\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n# 4. Write a Python program which accepts the radius of a circle from the user and compute the area.\n\nfrom math import pi\nr = float(input (\"Input the radius of the circle : \"))\nprint (\"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * r**2))\n\n# 5. Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\nfname = input(\"Input your First Name : \")\nlname = input(\"Input your Last Name : \")\nprint (lname + \" \" + fname)\n\n# 6. Write a python program which takes two inputs from user and print them addition.\n\nnum1 = input('Enter first number: ')\nnum2"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 2\n\t\tif n == 3: \n\t\t\treturn 4\n\t\treturn max(n, breakSum(n - 1) + 1, breakSum(n - 2) + 2, breakSum(n - 3) + 4) \n\nprint(breakSum(10))\n<file_sep>/Python/Algorithms/Sorting/mergeSort.py\n\"\"\"\nMerge Sort\n\"\"\"\ndef mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        mergeSort(left)\n        mergeSort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\narr = [12, 11, 13, 5, 6, 7]\nmergeSort(arr)\nprint(arr)\n<file_sep>/Python/Algorithms/Sorting/bubbleSort.py\n\"\"\"\nBubble Sort\n\"\"\"\ndef bubbleSort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [12, 11, 13, 5, 6, 7]\nbubbleSort(arr)\nprint(arr)\n<file_sep>/Python/Algorithms/Sorting/insertionSort.py\n\"\"\"\nInsertion Sort\n\"\"\"\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - "}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t\n    # Create an empty dictionary \n    dict = {} \n\t\n    # Traverse through the list \n    for i in Input: \n\t\n        # If the first element is not present in dictionary \n        # add it with value 1 \n        if i[0] not in dict: \n            dict[i[0]] = 1\n\t\n        # If the first element is present in dictionary \n        # increment its value by 1 \n        else: \n            dict[i[0]] += 1 \n\t\n    # Traverse through the dictionary \n    for i in dict: \n\t\n        # If the value is greater than 1 \n        # return the first element \n        if dict[i] > 1: \n            return i \n\t\n    # If no common element is found \n    # return -1 \n    return -1\n\n# Driver Code \nInput = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4)] \nprint(group_tuples(Input)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Program_to_find_the_largest_number_in_a_list.py\n\"\"\"\nPython Program to find the largest number in a list\n\"\"\"\n\n# Python program to find largest number in a list\n\n# list of numbers\nlist1 = [10, 20, 4, 45, 99]\n\n# sorting the list\nlist1.sort()\n\n# printing the last element\nprint(\"Largest element is:\", list1[-1])\n<file_sep>/Python/Python_Programs/Python_Program_to_find_the_sum_of_all_items_in_a_dictionary.py\n\"\"\"\nPython Program to find the sum of all items in a dictionary\n\"\"\"\n\n# Python program to find sum of all items in a dictionary\n\n# Creating a dictionary\ndict = {'a': 100, 'b':200, 'c':300}\n\n# Initializing sum\nsum = 0\n\n# using for loop to iterate over dictionary dict\nfor i in dict:\n    sum = sum + dict[i]\n\nprint(\"Sum :\", sum)\n<file_sep>/Python/Python_Programs/Python_Program_to_find_"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = 0\n\t\tfor i in range(len(lst)): \n\t\t\tfor j in range(i, len(lst)): \n\t\t\t\tif len(lst[i:j+1]) > max_len: \n\t\t\t\t\tmax_len = len(lst[i:j+1]) \n\t\treturn max_len\n\nlst = [1, 5, 3, 2, 4, 6, 8, 7, 9, 10, 11, 12] \nprint(Find_Max(lst)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 782, "source": "MBPP:419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t", "predict": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t\tsum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tlist1[i] = round(list1[i])\n\t\t\tsum += list1[i]\n\t\tprint(sum)\n\nround_and_sum([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.10])\n<file_sep>/Python/Python_Fundamentals/Functions_Intermediate_I/functions_intermediate_i.py\n\"\"\"\nFunctions Intermediate I\n\"\"\"\n\n\"\"\"\n1. Update Values in Dictionaries and Lists\n\"\"\"\nx = [ [5,2,3], [10,8,9] ] \nstudents = [\n     {'first_name':  'Michael', 'last_name' : 'Jordan'},\n     {'first_name' : 'John', 'last_name' : 'Rosales'}\n]\nsports_directory = {\n    'basketball' : ['Kobe', 'Jordan', 'James', 'Curry'],\n   'soccer' : ['Messi', 'Ronaldo', 'Rooney']\n}\nz = [ {'x': 10, 'y': 20} ]\n\n# Change the value 10 in x to 15. Once you're done, x should now be [ [5,2,3], [15,8,9] ].\nx[1][0] = 15\nprint(x)\n\n# Change the last_name of the first student from 'Jordan' to 'Bryant'\nstudents[0]['last_name'] = 'Bryant'\nprint(students)\n\n# In the sports_directory, change 'Messi' to 'Andres'\nsports_directory['soccer'][0] = 'Andres'\nprint(sports_directory)\n\n# Change the value 20 in z to 30\nz[0]['y'] = 30\nprint(z)\n\n\"\"\"\n2. Iterate Through a List of Dictionaries\n\"\"\"\ndef iterateDictionary(list):\n    for i in range(len(list)):\n        print(f\"first_name - {list[i]['first_name']}, last_name"}
{"ID": 783, "source": "MBPP:420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i*i*i \n\t\treturn sum \nn = 5\nprint(cube_Sum(n)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = 5\nprint(factorial(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers.\n\"\"\"\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\nn = 5\nprint(sum_of_n(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of first n even natural numbers.\n\"\"\"\ndef sum_of_even(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\nn = 5\nprint(sum_of_even(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of first n odd natural numbers.\n\"\"\"\ndef sum_of_odd(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\nn = 5\nprint(sum_of_odd(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers using recursion.\n\"\"\"\ndef sum_of_n(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_of_n(n-1)\nn = 5\nprint(sum_of_n(n))\n<file_sep>/Python/Python_Assignment_"}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t\treturn \"-\".join(test_tup)\n\nprint(concatenate_tuple(('a', 'b', 'c')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')))\nprint(concatenate_tuple(('a', 'b', 'c', 'd',"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum = sum + i*i*i\n\t\treturn sum/n\n\nprint(find_Average_Of_Cube(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Natural_Numbers(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + i\n\treturn sum\n\nprint(find_Sum_Of_Natural_Numbers(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum = sum + i*i*i\n\t\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to find the average of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Natural_Numbers(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + i\n\treturn sum/n\n\nprint(find_Average_Of_Natural_Numbers(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum = sum + i*i*i\n\t\treturn sum/n\n\nprint(find_Average_Of_Cube(5))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a python program to find the average of cubes of first n"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t\n    # Create a table to store maximum gold \n    # collected in gold[i][j] \n    maxgold = [[0 for x in range(n)] for x in range(m)] \n  \n    # Initialize the first column as value of first row \n    for i in range(m): \n        maxgold[i][0] = gold[i][0] \n  \n    # Initialize the first row as value of first column \n    for j in range(n): \n        maxgold[0][j] = gold[0][j] \n  \n    # Fill the table \n    for i in range(1, m): \n        for j in range(1, n): \n            maxgold[i][j] = max(gold[i][j] + maxgold[i-1][j-1], \n                                 gold[i][j] + maxgold[i-1][j], \n                                 gold[i][j] + maxgold[i-1][j+1]) \n  \n    # Initialize result \n    result = maxgold[0][0] \n  \n    # Traverse the table and find maximum value \n    for i in range(m): \n        for j in range(n): \n            if (maxgold[i][j] > result): \n                result = maxgold[i][j] \n  \n    return result \n\n# Driver Code \ngold = [[1, 3, 1, 5], \n        [2, 2, 4, 1], \n        [5, 0, 2, 3], \n        [0, 6, 1, 2]] \nm = 4\nn = 4\nprint(get_maxgold(gold, m, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\"\"\"\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid+1, r, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary"}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t\treturn tuple(map(lambda x: x[-1], test_tuple))\n\nprint(extract_rear(('abc', 'def', 'ghi')))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\n\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\n\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\n\nradius = float(input(\"Enter radius: \"))\narea = math.pi * radius ** 2\nprint(area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnumbers = input(\"Enter numbers: \")\nnumbers_list = numbers.split(\",\")\nnumbers_tuple = tuple(numbers_list)\nprint(numbers_list)\nprint(numbers_tuple)\n<file_sep>/python_basics/python_basics_1/python_basics"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t\n    count = 0\n    for i in range(len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 1\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 10\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 11\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 12\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 13\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 14\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 15\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nx = 16\nprint(count_element_in_list(list1, x)) \n\nlist1 = [1"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t\treturn list(filter(lambda x: x%2!=0, nums))\n\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern.\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the following pattern.\n1\n12\n123\n1234\n12345\n\"\"\"\n"}
{"ID": 790, "source": "MBPP:427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t\treturn re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n\nprint(change_date_format('2019-01-01'))\nprint(change_date_format('2019-01-02'))\nprint(change_date_format('2019-01-03'))\nprint(change_date_format('2019-01-04'))\nprint(change_date_format('2019-01-05'))\nprint(change_date_format('2019-01-06'))\nprint(change_date_format('2019-01-07'))\nprint(change_date_format('2019-01-08'))\nprint(change_date_format('2019-01-09'))\nprint(change_date_format('2019-01-10'))\nprint(change_date_format('2019-01-11'))\nprint(change_date_format('2019-01-12'))\nprint(change_date_format('2019-01-13'))\nprint(change_date_format('2019-01-14'))\nprint(change_date_format('2019-01-15'))\nprint(change_date_format('2019-01-16'))\nprint(change_date_format('2019-01-17'))\nprint(change_date_format('2019-01-18'))\nprint(change_date_format('2019-01-19'))\nprint(change_date_format('2019-01-20'))\nprint(change_date_format('2019-01-21'))\nprint(change_date_format('2019-01-22'))\nprint(change_date_format('2019-01-23'))\nprint(change_date_format('2019-0"}
{"ID": 791, "source": "MBPP:428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t\n\n\treturn my_list\n\nif __name__ == '__main__':\n\tmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(shell_sort(my_list))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t\treturn (test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1])\n\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(and_tuples((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint("}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\n    # If a is zero, then the parabola is a straight line \n    if a == 0: \n        print(\"The parabola is a straight line\") \n        return\n  \n    # Find the directrix of the parabola \n    d = (b * b) - (4 * a * c) \n  \n    # If d is less than zero, then the parabola does not exist \n    if d < 0: \n        print(\"The parabola does not exist\") \n        return\n  \n    # Find the directrix of the parabola \n    d = (b * b) - (4 * a * c) \n    d = math.sqrt(d) \n    d = d / (2 * a) \n  \n    # Print the directrix of the parabola \n    print(\"The directrix of the parabola is x = \", d) \n  \n# Driver Code \na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c) \n\na = 1\nb = 6\nc = 1\nparabola_directrix(a, b, c)"}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t\tfor i in list1:\n\t\t\tif i in list2:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(common_element([1,2,3,4,5], [5,6,7,8,9]))\nprint(common_element([1,2,3,4,5], [6,7,8,9]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Based on earlier \"Countdown by Fours\", given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\nThe Final Countdown - Based on earlier \"Countdown by Fours\", given lowNum, highNum, mult, print the final number counted, and how many times this was counted. For (2,9,3), print \"Final count: 9, 3 times\"\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(151):\n\tprint(i)\n\n# Multiples of Five - Print all the multiples of 5 from 5 to 1,000\nfor i in range(5, 1001, 5):\n\tprint(i)\n\n# Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1, 1"}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t\treturn (base1+base2)/2*height\n\nprint(median_trapezium(10,20,30))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/python/python_basics/python_basics_15.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str"}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t\tfor i in arr:\n\t\t\tif i > number:\n\t\t\t\treturn True\n\t\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 10\nprint(check_greater(arr, number))\n<file_sep>/python/array/find_missing_number.py\n\"\"\"\nGiven an array of integers, find the missing number in the array.\n\"\"\"\ndef find_missing_number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) / 2\n\tfor i in arr:\n\t\ttotal -= i\n\treturn total\n\narr = [1, 2, 3, 4, 6, 7, 8]\nprint(find_missing_number(arr))\n<file_sep>/python/array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the duplicate number in the array.\n\"\"\"\ndef find_duplicate_number(arr):\n\tfor i in arr:\n\t\tif arr.count(i) > 1:\n\t\t\treturn i\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_duplicate_number(arr))\n<file_sep>/python/array/find_missing_number_2.py\n\"\"\"\nGiven an array of integers, find the missing number in the array.\n\"\"\"\ndef find_missing_number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) / 2\n\tfor i in arr:\n\t\ttotal -= i\n\treturn total\n\narr = [1, 2, 3, 4, 6, 7, 8]\nprint(find_missing_number(arr))\n\n\"\"\"\nGiven an array of integers, find the missing number in the array.\n\"\"\"\ndef find_missing_number(arr):\n\tn = len(arr)\n\ttotal = (n + 1) * (n + 2) / 2\n\tfor i in arr:\n\t\ttotal -= i\n"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t\tif re.search(r'ab+', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero(text):\n\t\tif re.search(r'ab*', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one b's.\n\"\"\"\ndef text_match_zero_one(text):\n\t\tif re.search(r'ab?', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three b's.\n\"\"\"\ndef text_match_three(text):\n\t\tif re.search(r'ab{3}', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three b's.\n\"\"\"\ndef text_match_two_three(text):\n\t\tif re.search(r'ab{2,3}', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero to three b's.\n\"\"\"\ndef text_match_zero_three(text):\n\t\tif re.search(r'ab{0,3}', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one to three b's.\n\"\"\"\ndef text_match_one_three(text):\n\t\tif re.search(r'ab{1,3}', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero to five b's.\n\"\"\"\ndef text_match_zero_five(text):\n\t\tif re.search(r'ab{0,5}', text):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one to five b's.\n\"\"\"\ndef text_match_one_five(text):\n\t\tif re."}
{"ID": 798, "source": "MBPP:435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t\treturn n%10\n\nprint(last_Digit(12345))\nprint(last_Digit(123456789))\nprint(last_Digit(1234567890))\nprint(last_Digit(12345678901234567890))\nprint(last_Digit(123456789012345678901234567890))\nprint(last_Digit(1234567890123456789012345678901234567890))\nprint(last_Digit(12345678901234567890123456789012345678901234567890))\nprint(last_Digit(123456789012345678901234567890123456789012345678901234567890))\nprint(last_Digit(1234567890123456789012345678901234567890123456789012345678901234567890))\nprint(last_Digit(12345678901234567890123456789012345678901234567890123456789012345678901234567890))\nprint(last_Digit(12345678901234567890123456789012345678901234"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t\tfor i in list1:\n\t\t\tif i<0:\n\t\t\t\tprint(i)\n\nlist1=[1,2,-3,4,-5,6]\nneg_nos(list1)\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1]\n\nlist1=[1,2,3,4,5]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_2.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2==0]\n\nlist1=[1,2,3,4,5]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_3.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2!=0]\n\nlist1=[1,2,3,4,5]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_4.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2==0 and i>2]\n\nlist1=[1,2,3,4,5]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_5.py\n\"\"\"\nWrite a python program to print the square of each number in a list using list comprehension.\n\"\"\"\ndef square(list1):\n\treturn [i**2 for i in list1 if i%2!=0 and i<4]\n\nlist1=[1,2,3,4,5]\nprint(square(list1))\n<file_sep>/python_basics/list_comprehension_6.py\n\"\"\"\nWrite a python"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t\treturn ''.join(str1[i] for i in range(len(str1)) if i%2==0)\n\nprint(remove_odd('hello'))\n<file_sep>/python/string/reverse_string.py\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\ndef reverse_string(str1):\n\t\treturn str1[::-1]\n\nprint(reverse_string('hello'))\n<file_sep>/python/string/remove_duplicate_characters.py\n\"\"\"\nWrite a function to remove duplicate characters in a string.\n\"\"\"\ndef remove_duplicate_characters(str1):\n\t\treturn ''.join(set(str1))\n\nprint(remove_duplicate_characters('hello'))\n<file_sep>/python/string/remove_vowels.py\n\"\"\"\nWrite a function to remove vowels from a string.\n\"\"\"\ndef remove_vowels(str1):\n\t\treturn ''.join(str1.replace('a','').replace('e','').replace('i','').replace('o','').replace('u',''))\n\nprint(remove_vowels('hello'))\n<file_sep>/python/string/remove_spaces.py\n\"\"\"\nWrite a function to remove spaces from a string.\n\"\"\"\ndef remove_spaces(str1):\n\t\treturn str1.replace(' ','')\n\nprint(remove_spaces('hello world'))\n<file_sep>/python/string/remove_punctuation.py\n\"\"\"\nWrite a function to remove punctuation from a string.\n\"\"\"\ndef remove_punctuation(str1):\n\t\treturn str1.translate(str1.maketrans('','',string.punctuation))\n\nprint(remove_punctuation('hello, world!'))\n<file_sep>/python/string/remove_consecutive_spaces.py\n\"\"\"\nWrite a function to remove consecutive spaces from a string.\n\"\"\"\ndef remove_consecutive_spaces(str1):\n\t\treturn''.join(str1.split())\n\nprint(remove_consecutive_spaces('hello  world'))\n<file_sep>/python/string/remove_special_characters.py\n\"\"\"\nWrite a function to remove special characters from a string.\n\"\"\"\ndef remove_special_characters(str1):\n\t\treturn ''.join(i for i in str1 if i.isalnum())\n\nprint(remove_special_characters('hello"}
{"ID": 801, "source": "MBPP:438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t\t\"\"\"\n\t\tCount bidirectional tuple pairs.\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(len(test_list)):\n\t\t\t\tif test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional_2(test_list):\n\t\t\"\"\"\n\t\tCount bidirectional tuple pairs.\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(len(test_list)):\n\t\t\t\tif test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional_3(test_list):\n\t\t\"\"\"\n\t\tCount bidirectional tuple pairs.\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(len(test_list)):\n\t\t\t\tif test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional_4(test_list):\n\t\t\"\"\"\n\t\tCount bidirectional tuple pairs.\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(len(test_list)):\n\t\t\t\tif test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional_5(test_list):\n\t\t\"\"\"\n\t\tCount bidirectional tuple pairs.\n\t\t\"\"\"\n\t\tcount = 0\n\t"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn int(''.join(map(str, L)))\n\n\"\"\"\n"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\tFind all adverbs and their positions in a given sentence.\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tadverb_positions = []\n\t\tfor i, word in enumerate(text.split()):\n\t\t\tif word.endswith('ly'):\n\t\t\t\tadverbs.append(word)\n\t\t\t\tadverb_positions.append(i)\n\t\treturn adverbs, adverb_positions\n\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\tFind all adverbs and their positions in a given sentence.\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tadverb_positions = []\n\t\tfor i, word in enumerate(text.split()):\n\t\t\tif word.endswith('ly'):\n\t\t\t\tadverbs.append(word)\n\t\t\t\tadverb_positions.append(i)\n\t\treturn adverbs, adverb_positions\n\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\tFind all adverbs and their positions in a given sentence.\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tadverb_positions = []\n\t\tfor i, word in enumerate(text.split()):\n\t\t\tif word.endswith('ly'):\n\t\t\t\tadverbs.append(word)\n\t\t\t\tadverb_positions.append(i)\n\t\treturn adverbs, adverb_positions\n\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\tFind all adverbs and their positions in a given sentence.\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tadverb_positions = []\n\t\tfor i, word in enumerate(text.split()):\n\t\t\tif word.endswith('ly'):\n\t\t\t\tadverbs.append(word)\n\t\t\t\tadverb_positions.append(i)\n\t\treturn adverbs, adverb_positions\n\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\tFind all adverbs and their positions in a given sentence"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t\treturn 6*l*l\n\nprint surfacearea_cube(2)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint area_circle(2)\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*3.14*r*r*r\n\nprint volume_sphere(2)\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\nprint circumference_circle(2)\n<file_sep>/python/python_basics/python_basics_4.py\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint volume_cylinder(2,3)\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';\nimport { createStore, applyMiddleware } from'redux';\nimport ReduxThunk from'redux-thunk';\nimport reducers from '../reducers';\nimport { Router, Scene } from'react-native-router-flux';\nimport LoginForm from './LoginForm';\nimport EmployeeList from './EmployeeList';\nimport EmployeeCreate from './EmployeeCreate';\nimport EmployeeEdit from './EmployeeEdit';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={createStoreWithMiddleware(reducers)}>\n        <Router>\n          <Scene key=\"root\">\n            <Scene key=\"login\" component={LoginForm} title=\"Please Login\" initial={true} />\n            <Scene key=\"main\" hideNavBar>\n              <Scene key=\"employeeList\" component={EmployeeList"}
{"ID": 805, "source": "MBPP:442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t\tcount = 0\n\t\tfor num in nums:\n\t\t\tif num > 0:\n\t\t\t\tcount += 1\n\t\treturn count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\treturn 2 * sum(set(nums)) - sum(nums)\n\nprint(single_number([2,2,1]))\nprint(single_number([4,1,2,1,2]))\n<file_sep>/python/leetcode/easy/125_valid_palindrome.py\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExample 2:\n\nInput: \"race a car\"\nOutput: false\n\"\"\"\ndef is_palindrome(s):\n\ts = s.lower()\n\ts = ''.join(c for c in s if c.isalnum())\n\treturn s == s[::-1]\n\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))\nprint(is_palindrome(\"race a car\"))\n<file_sep>/python/leetcode/easy/104_max_depth_binary_tree.py\n\"\"\"\nGiven a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the"}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t\tmax_neg = list1[0] \n\t\tfor i in range(0, len(list1)): \n\t\t\tif list1[i] < 0 and list1[i] > max_neg: \n\t\t\t\tmax_neg = list1[i] \n\t\treturn max_neg \n\nlist1 = [-1, -2, -3, -4, -5] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12, 13] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12, 13, 14] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12, 13, 14, 15] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12, 13, 14, 15, 16] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 11, 12, 13, 14, 15, 16, 17] \nprint(largest_neg(list1)) \n\nlist1 = [-1, -2, -3, -4, -5, 10, 1"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t\treturn [tuple(i) for i in test_list if len(i) > K]\n\nif __name__ == \"__main__\":\n\ttest_list = [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20)]\n\tK = 3\n\tprint(trim_tuple(test_list, K))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2 * sum(set(nums)) - sum(nums)\n<file_sep>/python/leetcode/easy/1002_find_common_characters.py\n\"\"\"\nGiven an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.\n\n \n\nExample 1:\n\nInput: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\nExample 2:\n\nInput: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\n \n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\nA[i][j] is a lowercase letter\n\"\"\"\n\nclass Solution:\n    def commonChars(self, A: List[str]) -> List[str]:\n        return list(set.intersection(*map(set, A)))\n<file_sep>"}
{"ID": 808, "source": "MBPP:445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (1, 2, 3, 4, 5)\n\tprint(index_multiplication(test_tup1, test_tup2))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\n\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\n\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\n\nradius = float(input(\"Enter radius of circle: \"))\narea = math.pi * radius ** 2\nprint(area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter first name: \")\nlast_name = input(\"Enter last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/python_basics/python_basics_1/"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t\n    # Creating an empty dictionary  \n    # to store count of all elements  \n    count = {} \n\t\n    # Traverse through the list  \n    for ele in lst: \n\t\n        # If key is not in dictionary then  \n        # add key and initialize count as 1  \n        if ele not in count: \n            count[ele] = 1\n\t\n        # If key is already present in the dictionary  \n        # then increment count by 1  \n        else: \n            count[ele] += 1\n\t  \n    # Return the count dictionary  \n    return count \n\t\n# Driver Code \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \nprint(count_Occurrence(tup, lst)) \n\n\"\"\"\nWrite a python function to find the second largest number in a list.\n\"\"\"\ndef second_largest(lst):\n    lst.sort()\n    return lst[-2]\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(second_largest(lst))\n\n\"\"\"\nWrite a python function to find the second largest number in a list.\n\"\"\"\ndef second_largest(lst):\n    lst.sort()\n    return lst[-2]\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(second_largest(lst))\n\n\"\"\"\nWrite a python function to find the second largest number in a list.\n\"\"\"\ndef second_largest(lst):\n    lst.sort()\n    return lst[-2]\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(second_largest(lst))\n\n\"\"\"\nWrite a python function to find the second largest number in a list.\n\"\"\"\ndef second_largest(lst):\n    lst.sort()\n    return lst[-2]\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1,7):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1,8):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n123"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 2\n\t\tif n == 3: \n\t\t\treturn 4\n\t\treturn cal_sum(n - 1) + cal_sum(n - 2) + cal_sum(n - 3) \n\n# Driver code \nn = 10\nprint(cal_sum(n)) \n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 2\n\t\tif n == 3: \n\t\t\treturn 4\n\t\treturn cal_sum(n - 1) + cal_sum(n - 2) + cal_sum(n - 3) \n\n# Driver code \nn = 10\nprint(cal_sum(n)) \n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 2\n\t\tif n == 3: \n\t\t\treturn 4\n\t\treturn cal_sum(n - 1) + cal_sum(n - 2) + cal_sum(n - 3) \n\n# Driver code \nn = 10\nprint(cal_sum(n)) \n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tif n <= 0: \n\t\t\treturn 0\n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif n == 2: \n\t\t\treturn 2\n\t\tif n == 3: \n\t\t\treturn 4\n\t\treturn cal_sum(n - 1) + cal_sum(n - 2) + cal_sum(n - 3) \n\n# Driver code \nn = 10\nprint(cal_sum(n)) \n\n\"\"\"\nWrite a function to calculate the sum of"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\tif (x1 == x2 and x2 == x3 and y1 == y2 and y2 == y3): \n\t\t\treturn \"Equilateral\"\n\t\telif (x1 == x2 or x2 == x3 or x1 == x3): \n\t\t\treturn \"Isosceles\"\n\t\telse: \n\t\t\treturn \"Scalene\"\n\nx1 = int(input(\"Enter x1: \"))\ny1 = int(input(\"Enter y1: \"))\nx2 = int(input(\"Enter x2: \"))\ny2 = int(input(\"Enter y2: \"))\nx3 = int(input(\"Enter x3: \"))\ny3 = int(input(\"Enter y3: \"))\n\nprint(check_Triangle(x1,y1,x2,y2,x3,y3))\n<file_sep>/Python/Python_Assignment_1/Q10.py\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\tif (x1 == x2 and x2 == x3 and y1 == y2 and y2 == y3): \n\t\t\treturn \"Equilateral\"\n\t\telif (x1 == x2 or x2 == x3 or x1 == x3): \n\t\t\treturn \"Isosceles\"\n\t\telse: \n\t\t\treturn \"Scalene\"\n\nx1 = int(input(\"Enter x1: \"))\ny1 = int(input(\"Enter y1: \"))\nx2 = int(input(\"Enter x2: \"))\ny2 = int(input(\"Enter y2: \"))\nx3 = int(input(\"Enter x3: \"))\ny3 = int(input(\"Enter y3: \"))\n\nprint(check_Triangle(x1,y1,x2,y2,x3,y3))\n<file_sep>/Python/Python_Assignment_1/Q1.py\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\tif (x1 == x2 and x2 == x3 and y1"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t\treturn [s[0:l] for s in str]\n\nprint(extract_string(['abc', 'def', 'ghi', 'jkl'], 2))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star,\\n\\tHow I wonder what you are!\\n\\t\\tUp above the world so high,\\n\\t\\tLike a diamond in the sky.\\nTwinkle, twinkle, little star,\\n\\tHow I wonder what you are\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a, b, c):\n\t\tif a == b == c:\n\t\t\t\treturn 3 * (a + b + c)\n\t\telse:\n\t\t\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\ndef smallest_number(l):\n\t\treturn min(l)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\ndef count_string(str):\n\t\treturn len([s for s in str if len(s) >= 2 and s[0] == s[-1]])\n\nprint(count_string(['abc', 'xyz', 'aba', '1221']))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20.\n"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t\treturn re.sub(r'\\s', '', text1)\n\nprint(remove_whitespaces(\"Python Exercises\"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint(remove_whitespaces(\"Python Exercises      \"))\nprint("}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn actual_cost - sale_amount\n\t\telse:\n\t\t\treturn None\n\nprint(loss_amount(1000,1200))\nprint(loss_amount(1000,800))\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\nprint(profit_amount(1000,1200))\nprint(profit_amount(1000,800))\n\n\"\"\"\nWrite a function that gives profit percent if the given amount has profit else return none.\n\"\"\"\ndef profit_percent(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn ((sale_amount - actual_cost)/actual_cost)*100\n\t\telse:\n\t\t\treturn None\n\nprint(profit_percent(1000,1200))\nprint(profit_percent(1000,800))\n\n\"\"\"\nWrite a function that gives loss percent if the given amount has loss else return none.\n\"\"\"\ndef loss_percent(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn ((actual_cost - sale_amount)/actual_cost)*100\n\t\telse:\n\t\t\treturn None\n\nprint(loss_percent(1000,1200))\nprint(loss_percent(1000,800))\n\n\"\"\"\nWrite a function that gives profit or loss percent if the given amount has profit or loss else return none.\n\"\"\"\ndef profit_loss_percent(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn ((sale_amount - actual_cost)/actual_cost)*100\n\t\telif actual_cost > sale_amount:\n\t\t\treturn ((actual_cost - sale_amount)/actual_cost)*100\n\t\telse:\n\t\t\treturn None\n\nprint(profit_loss_percent(1000,1200))\n"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n    return sum \n\nn = 10\nprint(sumofFactors(n))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t\treturn re.search(r'\\bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the end of a word.\n\"\"\"\ndef text_match_wordz_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning of a word.\n\"\"\"\ndef text_match_wordz_start(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' at the beginning or end of a word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn re.search(r'\\Bz\\b', text)\n\n"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t\tif monthnum2 in [1,3,5,7,8,10,12]:\n\t\t\tprint(\"Month number contains 31 days\")\n\t\telif monthnum2 in [4,6,9,11]:\n\t\t\tprint(\"Month number contains 30 days\")\n\t\telif monthnum2 == 2:\n\t\t\tprint(\"Month number contains 28 days\")\n\t\telse:\n\t\t\tprint(\"Invalid month number\")\n\nmonthnum2 = int(input(\"Enter the month number: \"))\ncheck_monthnumb_number(monthnum2)\n<file_sep>/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python_Assignment_1/Assignment_1_6.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t\treturn [string[::-1] for string in stringlist]\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(stringlist):\n\t\tif len(stringlist) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(stringlist) == 1:\n\t\t\t\treturn stringlist[0]\n\t\tprefix = stringlist[0]\n\t\tfor string in stringlist[1:]:\n\t\t\t\twhile string.find(prefix)!= 0:\n\t\t\t\t\t\tprefix = prefix[:-1]\n\t\treturn prefix\n\n\"\"\"\nWrite a function to find the longest common substring amongst an array of strings.\n\"\"\"\ndef longest_common_substring(stringlist):\n\t\tif len(stringlist) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(stringlist) == 1:\n\t\t\t\treturn stringlist[0]\n\t\tsubstring = stringlist[0]\n\t\tfor string in stringlist[1:]:\n\t\t\t\twhile string.find(substring) == -1:\n\t\t\t\t\t\tsubstring = substring[:-1]\n\t\treturn substring\n\n\"\"\"\nWrite a function to find the longest common subsequence amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence(stringlist):\n\t\tif len(stringlist) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(stringlist) == 1:\n\t\t\t\treturn stringlist[0]\n\t\tsubsequence = stringlist[0]\n\t\tfor string in stringlist[1:]:\n\t\t\t\twhile string.find(subsequence) == -1:\n\t\t\t\t\t\tsubsequence = subsequence[:-1]\n\t\treturn subsequence\n\n\"\"\"\nWrite a function to find the longest palindromic substring in a given string.\n\"\"\"\ndef longest_palindromic_substring(string):\n\t\tif len(string) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(string) == 1:\n\t\t\t\treturn string\n\t\tpalindrome = \"\"\n\t\tfor i in range(len(string)):\n\t\t\t\tfor j in range(i, len(string)):\n\t\t\t\t\t\tsubstring = string[i:j+1]\n\t\t\t\t\t\tif substring == substring[::-1] and len(substring) > len(palindrome):\n\t\t\t\t\t\t\t\tpalindrome = substring\n\t\treturn palindrome\n\n\"\"\"\nWrite a function to"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_list = lst[0] \n\t\tfor i in range(len(lst)): \n\t\t\tif len(lst[i]) < min_len: \n\t\t\t\tmin_len = len(lst[i]) \n\t\t\t\tmin_list = lst[i] \n\t\treturn min_list \n\nlst = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \nprint(Find_Min(lst)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef Sum_of_n_numbers(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + i\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(Sum_of_n_numbers(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef Sum_of_n_numbers(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + i\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(Sum_of_n_numbers(n))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef Sum_of_n_numbers(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + i\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(Sum_of_n_numbers(n))\n\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\ndef Sum_of_n_numbers(n):\n\tsum = 0\n\tfor i in range("}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t\treturn l*b\n\nprint rectangle_area(2,3)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n\"\"\"\n\nfor i in range(1,5):\n\tfor j in range(i,i+3):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint j,\n\tprint\nfor i in range(6,21):\n\tfor j in range(i,i+5):\n\t\tprint j,\n\tprint\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n16 17 18 19 20"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t\treturn re.sub(r'[A-Z]+', '', str1)\n\nprint(remove_uppercase(\"This is a test string\"))\n<file_sep>/python/regex/regex_replace.py\n\"\"\"\nWrite a function to replace all the uppercase substrings from a given string by using regex.\n\"\"\"\ndef replace_uppercase(str1):\n\t\treturn re.sub(r'[A-Z]+', 'uppercase', str1)\n\nprint(replace_uppercase(\"This is a test string\"))\n<file_sep>/python/regex/regex_match.py\n\"\"\"\nWrite a function to match a given string by using regex.\n\"\"\"\ndef match_string(str1):\n\t\treturn re.match(r'This is a test string', str1)\n\nprint(match_string(\"This is a test string\"))\n<file_sep>/python/regex/regex_search.py\n\"\"\"\nWrite a function to search a given string by using regex.\n\"\"\"\ndef search_string(str1):\n\t\treturn re.search(r'This is a test string', str1)\n\nprint(search_string(\"This is a test string\"))\n<file_sep>/python/regex/regex_findall.py\n\"\"\"\nWrite a function to find all the uppercase substrings from a given string by using regex.\n\"\"\"\ndef find_uppercase(str1):\n\t\treturn re.findall(r'[A-Z]+', str1)\n\nprint(find_uppercase(\"This is a test string\"))\n<file_sep>/python/regex/regex_split.py\n\"\"\"\nWrite a function to split a given string by using regex.\n\"\"\"\ndef split_string(str1):\n\t\treturn re.split(r' ', str1)\n\nprint(split_string(\"This is a test string\"))\n<file_sep>/python/regex/regex_sub.py\n\"\"\"\nWrite a function to replace all the uppercase substrings from a given string by using regex.\n\"\"\"\ndef replace_uppercase(str1):\n\t\treturn re.sub(r'[A-Z]+', 'uppercase', str1)\n\nprint(replace_uppercase(\"This is a test string\"))\n<file_sep>/python/regex/regex_compile.py\n\"\"\"\nWrite a function to compile a given string by using regex.\n\"\"\"\ndef compile_string(str1):\n\t\treturn re.compile("}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the first elements \n    return [ele[0] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]] \nprint(Extract(lst)) \n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the last elements \n    return [ele[-1] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]] \nprint(Extract(lst)) \n\n\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the first elements \n    return [ele[0] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]] \nprint(Extract(lst)) \n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the last elements \n    return [ele[-1] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]] \nprint(Extract(lst)) \n\n\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the first elements \n    return [ele[0] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]] \nprint(Extract(lst)) \n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\n    # return list of the last elements \n    return [ele[-1] for ele in lst] \n\t\n# Driver Code \nlst = [[1, 2, 3], [4, "}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t\tcount = 0\n\t\tfor i in str:\n\t\t\tif i.isupper():\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(upper_ctr(\"Hello World\"))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_num(list):\n\treturn min(list)\n\nprint(smallest_num([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_str(list):\n\tcount = 0\n\tfor i in list:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_str([\"abc\", \"xyz\", \"aba\", \"1221\"]))\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t\tif len(list1) == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [list1[0]] + combinations_list(list1[1:])\n\nprint combinations_list([1,2,3])\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        else:\n            return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left is None and right is None:\n            return True\n        elif left is None or right is None:\n            return False\n        else:\n            return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)\n<file_sep>/python/leetcode/102"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum product subarray of the given"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t\tif len(dict) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in dict:\n\t\t\t\tif dict[i]!= n:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(check_value({1:1, 2:2, 3:3}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 2))\nprint(check_value({1:1, 2:2, 3:3}, 3))\nprint(check_value({1:1, 2:2, 3:3}, 4))\nprint(check_value({}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 2))\nprint(check_value({1:1, 2:2, 3:3}, 3))\nprint(check_value({1:1, 2:2, 3:3}, 4))\nprint(check_value({}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 2))\nprint(check_value({1:1, 2:2, 3:3}, 3))\nprint(check_value({1:1, 2:2, 3:3}, 4))\nprint(check_value({}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 2))\nprint(check_value({1:1, 2:2, 3:3}, 3))\nprint(check_value({1:1, 2:2, 3:3}, 4))\nprint(check_value({}, 1))\nprint(check_value({1:1, 2:2, 3:3}, 1))\nprint(check_value({1:1, 2:2, 3:3"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t\tdict2 = {}\n\t\tfor key, value in dict1.items():\n\t\t\tif value!= \"\":\n\t\t\t\tdict2[key] = value\n\t\treturn dict2\n\nprint(drop_empty({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\", \"d\": \"\", \"e\": \"5\"}))\nprint(drop_empty({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\", \"d\": \"4\", \"e\": \"5\"}))\n<file_sep>/python/python_basics/001_hello_world.py\n\"\"\"\nWrite a program that prints \"Hello World\" to the screen.\n\"\"\"\nprint(\"Hello World\")\n<file_sep>/python/python_basics/003_print_numbers.py\n\"\"\"\nWrite a program that prints the numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tprint(i)\n<file_sep>/python/python_basics/004_print_odd_numbers.py\n\"\"\"\nWrite a program that prints the odd numbers from 1 to 100.\n\"\"\"\nfor i in range(1, 101):\n\tif i % 2!= 0:\n\t\tprint(i)\n<file_sep>/python/python_basics/005_print_a_square.py\n\"\"\"\nWrite a program that prints a square of 5 asterisks.\n\"\"\"\nfor i in range(5):\n\tprint(\"*\" * 5)\n<file_sep>/python/python_basics/006_print_a_box.py\n\"\"\"\nWrite a program that prints a box based on a given height and width.\n\"\"\"\nheight = 5\nwidth = 10\n\nfor i in range(height):\n\tif i == 0 or i == height - 1:\n\t\tprint(\"*\" * width)\n\telse:\n\t\tprint(\"*\" + \" \" * (width - 2) + \"*\")\n<file_sep>/python/python_basics/007_print_a_triangle.py\n\"\"\"\nWrite a program that prints a triangle based on a given height.\n\"\"\"\nheight = 5\n\nfor i in range(height):\n\tprint(\"*\" * (i + 1))\n<file_sep>/python/"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t\t# Find index of middle element \n\t\tmid = low + (high - low) // 2; \n\n\t\t# Compare middle element with its neighbours (if neighbours exist) \n\t\tif (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]): \n\t\t\treturn mid \n\n\t\t# If middle element is not peak and its left neighbour is greater than it, then \n\t\t# left half must have a peak element \n\t\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\t\treturn find_peak_util(arr, low, (mid - 1), n); \n\n\t\t# If middle element is not peak and its right neighbour is greater than it, then \n\t\t# right half must have a peak element \n\t\telse: \n\t\t\treturn find_peak_util(arr, (mid + 1), high, n); \n\ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n); \n\n# Driver Code \narr = [1, 3, 20, 4, 1, 0] \nn = len(arr) \nprint(\"Index of a peak point is\", find_peak(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] =="}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t\toctalNum = 0\n\t\ti = 1\n\t\twhile deciNum!= 0:\n\t\t\toctalNum += (deciNum % 8) * i\n\t\t\tdeciNum = deciNum // 8\n\t\t\ti = i * 10\n\t\treturn octalNum\n\nprint(decimal_to_Octal(10))\nprint(decimal_to_Octal(100))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(10000))\nprint(decimal_to_Octal(100000))\nprint(decimal_to_Octal(1000000))\nprint(decimal_to_Octal(10000000))\nprint(decimal_to_Octal(100000000))\nprint(decimal_to_Octal(1000000000))\nprint(decimal_to_Octal(10000000000))\nprint(decimal_to_Octal(100000000000))\nprint(decimal_to_Octal(1000000000000))\nprint(decimal_to_Octal(10000000000000))\nprint(decimal_to_Octal(100000000000000))\nprint(decimal_to_Octal(1000000000000000))\nprint(decimal_to_Octal(10000000000000000))\nprint(decimal_to_Octal(100000000000000000))\nprint(decimal_to_Octal(1000000000000000000))\nprint(decimal_to_Octal(10000000000000000000))\nprint(decimal_to_Octal(10000000000000000"}
{"ID": 831, "source": "MBPP:468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t\n    # Initialize result \n    res = 0\n  \n    # Traverse through all \n    # possible subsequences \n    for i in range(n): \n        for j in range(i, n): \n  \n            # Multiply elements \n            # between i and j \n            prod = 1\n            for k in range(i, j + 1): \n                prod = prod * arr[k] \n  \n            # Update result if required \n            res = max(res, prod) \n  \n    return res \n  \n# Driver code \narr = [10, 3, 5, 6, 2] \nn = len(arr) \nprint(max_product(arr, n)) \n<file_sep>/Python/Array/15.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    for i in range(len(nums)):\n        if abs(nums[i]) <= len(nums):\n            nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1\n<file_sep>/Python/Array/10.py\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\""}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t\tif k == 0:\n\t\t\treturn 0\n\t\tif k > len(price) // 2:\n\t\t\treturn max_profit_inf(price)\n\t\tdp = [[0 for _ in range(k + 1)] for _ in range(len(price))]\n\t\tfor i in range(1, k + 1):\n\t\t\ttmpMax = dp[0][i - 1] - price[0]\n\t\t\tfor j in range(1, len(price)):\n\t\t\t\tdp[j][i] = max(dp[j - 1][i], price[j] + tmpMax)\n\t\t\t\ttmpMax = max(tmpMax, dp[j][i - 1] - price[j])\n\t\treturn dp[-1][-1]\n\ndef max_profit_inf(price):\n\tmax_profit = 0\n\tfor i in range(1, len(price)):\n\t\tif price[i] > price[i - 1]:\n\t\t\tmax_profit += price[i] - price[i - 1]\n\treturn max_profit\n\nif __name__ == '__main__':\n\tprice = [3, 3, 5, 0, 0, 3, 1, 4]\n\tk = 2\n\tprint(max_profit(price, k))\n<file_sep>/leetcode/1004.py\n\"\"\"\nGiven an array A of 0s and 1s, we may change up to K values from 0 to 1.\n\nReturn the length of the longest (contiguous) subarray that contains only 1s.\n\"\"\"\ndef longest_ones(A, K):\n\tleft = 0\n\tright = 0\n\tmax_len = 0\n\twhile right < len(A):\n\t\tif A[right] == 0:\n\t\t\tK -= 1\n\t\tif K < 0:\n\t\t\tif A[left] == 0:\n\t\t\t\tK += 1\n\t\t\tleft += 1\n\t\tmax_len = max(max_len, right - left + 1)\n\t\tright += 1\n\treturn max_len\n\nif __name__ == '__main__':\n\tA = [1,1,1,0,0,0,1,1,1,1,"}
{"ID": 833, "source": "MBPP:470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t\treturn tuple(map(lambda x,y: x+y, test_tup[0], test_tup[1]))\n\nprint(add_pairwise((1,2,3), (4,5,6)))\nprint(add_pairwise((1,2,3), (4,5,6,7)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13,14)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(add_pairwise((1,2,3), (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)))\nprint(add_pairwise((1,"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t\t# Initialize result \n\t\tresult = 1; \n\t\tfor i in range(0, lens): \n\t\t\tresult = (result * arr[i]) % n; \n\t\treturn result; \n\n# Driver code \narr = [100, 10, 5, 25, 35, 14]; \nn = 11; \nlens = len(arr); \nprint(find_remainder(arr, lens, n)); \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear_Search.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search, i.e\n\n"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t\tl.sort() \n\t\tfor i in range(len(l)-1): \n\t\t\tif l[i]+1!= l[i+1]: \n\t\t\t\treturn False\n\t\treturn True\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] \nprint(check_Consecutive(l)) \n\nl = [1, 2, 3, 4, 5,"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t\treturn tuple(set(test_list1) & set(test_list2))\n\n# Driver Code\ntest_list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(tuple_intersection(test_list1, test_list2))\n\n\"\"\"\nWrite a function to find the tuple union of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_union(test_list1, test_list2):\n\t\treturn tuple(set(test_list1) | set(test_list2))\n\n# Driver Code\ntest_list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(tuple_union(test_list1, test_list2))\n\n\"\"\"\nWrite a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_difference(test_list1, test_list2):\n\t\treturn tuple(set(test_list1) - set(test_list2))\n\n# Driver Code\ntest_list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(tuple_difference(test_list1, test_list2))\n\n\"\"\"\nWrite a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_symmetric_difference(test_list1, test_list2):\n\t\treturn tuple(set(test_list1) ^ set(test_list2))\n\n# Driver Code\ntest_list1"}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t\tstr2 = \"\"\n\t\tfor i in str1:\n\t\t\tif i == ch:\n\t\t\t\tstr2 += newch\n\t\t\telse:\n\t\t\t\tstr2 += i\n\t\treturn str2\n\nprint(replace_char(\"hello world\",\"l\",\"*\"))\n<file_sep>/python/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_basics/python_"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort counter by key.\n\"\"\"\ndef sort_counter_by_key(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort counter by key.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter_by_value(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t\treturn max(nums) + min(nums)\n\nprint(big_sum([1,2,3,4,5]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(big_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t\treturn string.islower()\n\nprint(is_lower(\"Hello\"))\nprint(is_lower(\"hello\"))\nprint(is_lower(\"22\"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is_lower(\" \"))\nprint(is"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t\treturn ''.join(c for c in str1 if c.isupper())\n\nprint(remove_lowercase(\"Hello World\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnumbers = input(\"Enter the numbers: \")\nlist = numbers.split(\",\")\ntuple = tuple(list)\nprint(\"List: \", list)\nprint(\"Tuple: \", tuple)\n"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t\treturn int(str(n)[0])\n\nprint(first_Digit(12345))\nprint(first_Digit(123456))\nprint(first_Digit(1234567))\nprint(first_Digit(12345678))\nprint(first_Digit(123456789))\nprint(first_Digit(1234567890))\nprint(first_Digit(12345678901))\nprint(first_Digit(123456789012))\nprint(first_Digit(1234567890123))\nprint(first_Digit(12345678901234))\nprint(first_Digit(123456789012345))\nprint(first_Digit(1234567890123456))\nprint(first_Digit(12345678901234567))\nprint(first_Digit(123456789012345678))\nprint(first_Digit(1234567890123456789))\nprint(first_Digit(12345678901234567890))\nprint(first_Digit(123456789012345678901))\nprint(first_Digit(1234567890123456789012))\nprint(first_Digit(12345678901234567890123))\nprint(first_Digit(123456789012345678901234))\nprint(first_Digit(1234567890123456789012345))\nprint(first_Digit(12345678901"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t\tmax_char = ''\n\t\tmax_count = 0\n\t\tfor char in str1:\n\t\t\tif str1.count(char) > max_count:\n\t\t\t\tmax_count = str1.count(char)\n\t\t\t\tmax_char = char\n\t\treturn max_char\n\nprint(get_max_occuring_char('abcaabca'))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(num):\n\tif num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num-1)\n\nprint(factorial(5))\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_positive_integers(n):\n\treturn (n * (n + 1)) / 2\n\nprint(sum_of_n_positive_integers(5))\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_positive_integers(n):\n\treturn n * (n + 1) / 2\n\nprint(sum_of_n_positive_integers(5))\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_positive_integers(n):\n\treturn n * (n + 1) / 2\n\nprint(sum_of_n_positive_integers(5))\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\ndef sum_of_n_positive_integers(n):\n\treturn n * (n + 1) / 2\n\nprint(sum_of_n_positive_integers(5))\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a python program to find the sum of the"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t\n\n\n\"\"\"\nWrite a function to find the longest common subsequence between two given strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function to find the longest palindromic subsequence in a given string.\n\"\"\"\ndef longest_palindromic_subsequence(str):\n\t\n\n\n\"\"\"\nWrite a function"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\nmatch(text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tregex = re.compile(r'[A-Z][a-z]+') \n\t\tprint(regex.findall(text)) \n\ntext = \"Python is fun\"\n"}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\t# Initialize result \n\t\ti = 1\n\t\twhile True: \n\t\t\t# Find factorial of i \n\t\t\tfact = 1\n\t\t\tfor j in range(1, i + 1): \n\t\t\t\tfact = fact * j \n\t\t\tif fact % x == 0: \n\t\t\t\treturn i \n\t\t\ti += 1\n\n# Driver Code \nx = 10\nprint(first_Factorial_Divisible_Number(x)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Program_to_find_the_sum_of_the_series_1_+1/Python_Program_to_find_the_sum_of_the_series_1_+1.py\n\"\"\"\nWrite a Python program to find the sum of the series 1 +1/2 + 1/3 + 1/4 +.....1/n.\n\"\"\"\ndef sum_of_series(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tsum += 1 / i \n\treturn sum \n\n# Driver Code \nn = 5\nprint(sum_of_series(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Python_Programs/Python_Program_to_find_the_sum_of_the_series_1_+1/README.md\n# Python_Program_to_find_the_sum_of_the_series_1_+1\nWrite a Python program to find the sum of the series 1 +1/2 + 1/3 + 1/4 +.....1/n.\n<file_sep>/Python/Python_Programs/Python_Program_to_find_the_sum_of_the_series_1_+1/Python_Program_to_find_the_sum_of_the_series_1_+1.c\n/*\nWrite a Python program to find the sum of the series 1 +1/2 + 1/3 + 1/4 +.....1/n.\n*/\n#include <stdio.h> \n#include <math.h> \n\n// Function to find the sum of the series \nfloat sum_of_series(int n) \n{ \n\tfloat sum"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:type test_list1: list\n\t\t:type test_list2: list\n\t\t:rtype: list\n\t\t\"\"\"\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\nif __name__ == '__main__':\n\ttest_list1 = [(1, 2), (3, 4), (5, 6)]\n\ttest_list2 = [(1, 2), (3, 4)]\n\tprint(remove_matching_tuple(test_list1, test_list2))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 2 * sum(set(nums)) - sum(nums)\n\nif __name__ == '__main__':\n\tnums = [2,2,1]\n\tprint(single_number(nums))\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self."}
{"ID": 848, "source": "MBPP:485", "prompt": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t", "predict": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t\n    # Sort the array in ascending order \n    A.sort() \n  \n    # Initialize result \n    res = 0\n  \n    # Traverse the array from right \n    for i in range(n - 1, -1, -1) : \n  \n        # If the current element is smaller \n        # than the previous element, then \n        # the previous element is the largest \n        # palindrome \n        if (A[i] < A[i - 1]) : \n            res = A[i - 1] \n            break\n  \n        # If the current element is equal to \n        # the previous element, then the \n        # previous element is the largest \n        # palindrome \n        elif (A[i] == A[i - 1]) : \n            res = A[i] \n  \n    return res \n  \n# Driver code \nA = [1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1] \nn = len(A) \nprint(largest_palindrome(A, n)) \n<file_sep>/Python/Array/14_find_missing_and_repeating.py\n\"\"\"\nGiven an unsorted array of size n. Array elements are in range from 1 to n. One number from set {1, 2, …n} is missing and one number occurs twice in array. Find these two numbers.\n\"\"\"\ndef find_two_repeating(arr, n) : \n  \n    # To store XOR of all the array \n    # elements \n    x1 = 0\n  \n    # To store XOR of all the numbers from 1 to n \n    x2 = 0\n  \n    # Traverse the array and store the XOR of all the array elements \n    for i in range(0, n) : \n        x1 = x1 ^ arr[i] \n  \n    # Traverse the array and store the XOR of all the numbers from 1 to n \n    for i in range(1, n + 1) : \n        x2 = x2 ^ i \n  \n    # XOR of missing and repeating numbers \n    y = x1 ^ x2 \n  \n    # Find the rightmost set bit in y. \n    # Rightmost set bit gives the difference \n    # between missing and repeating elements \n    set_bit_no = y & ~(y - 1) \n  \n    # Now divide the array in two sets and check \n    #"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\n    # n! \n    factorial = 1\n    for i in range(1, n+1): \n        factorial = factorial * i \n  \n    # (n-r)! \n    factorial = factorial / math.factorial(n-k) \n  \n    # r! \n    factorial = factorial / math.factorial(k) \n  \n    return factorial * p**k * (1-p)**(n-k) \n\ndef binomial_probability_2(n, k, p):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k)) * p**k * (1-p)**(n-k)\n\ndef binomial_probability_3(n, k, p):\n    return math.comb(n, k) * p**k * (1-p)**(n-k)\n\ndef binomial_probability_4(n, k, p):\n    return scipy.special.comb(n, k) * p**k * (1-p)**(n-k)\n\ndef binomial_probability_5(n, k, p):\n    return scipy.stats.binom.pmf(k, n, p)\n\ndef binomial_probability_6(n, k, p):\n    return scipy.stats.binom.cdf(k, n, p)\n\ndef binomial_probability_7(n, k, p):\n    return scipy.stats.binom.cdf(k, n, p) - scipy.stats.binom.cdf(k-1, n, p)\n\ndef binomial_probability_8(n, k, p):\n    return scipy.stats.binom.cdf(k, n, p) - scipy.stats.binom.cdf(k-1, n, p)\n\ndef binomial_probability_9(n, k, p):\n    return scipy.stats.binom.cdf(k, n, p) - scipy.stats.binom.cdf(k-1, n, p)\n\ndef binomial_probability_10(n, k, p):\n    return scipy.stats.binom.cdf(k, n, p) - scipy.stats.binom.cdf(k-1, n, p)\n\ndef bin"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # sorting the list of tuples \n    tup.sort(key = lambda x: x[2]) \n    return tup \n\n# Driver Code \ntup = [(2, 5, 4), (4, 4, 1), (1, 3, 5), (1, 2, 3)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort a list of tuples by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # sorting the list of tuples \n    tup.sort(key = lambda x: x[2]) \n    return tup \n\n# Driver Code \ntup = [(2, 5, 4), (4, 4, 1), (1, 3, 5), (1, 2, 3)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort a list of tuples by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # sorting the list of tuples \n    tup.sort(key = lambda x: x[2]) \n    return tup \n\n# Driver Code \ntup = [(2, 5, 4), (4, 4, 1), (1, 3, 5), (1, 2, 3)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort a list of tuples by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # sorting the list of tuples \n    tup.sort(key = lambda x: x[2]) \n    return tup \n\n# Driver Code \ntup = [(2, 5, 4), (4, 4, 1), (1, 3, 5), (1, 2, 3)] \nprint(sort_tuple(tup)) \n\n\"\"\"\nWrite a function to sort a list of tuples by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\n    # sorting the list of tuples \n    tup.sort(key = lambda x: x[2]) \n    return tup \n\n# Driver Code \ntup = [(2, 5, 4), (4, 4, 1), (1, 3, 5), (1, 2, 3"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t\treturn (5*a**2)/(4*tan(pi/5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\t\treturn (6*a**2)/(4*tan(pi/6))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(a):\n\t\treturn (7*a**2)/(4*tan(pi/7))\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\ndef area_octagon(a):\n\t\treturn (8*a**2)/(4*tan(pi/8))\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef area_nonagon(a):\n\t\treturn (9*a**2)/(4*tan(pi/9))\n\n\"\"\"\nWrite a function to find the area of a decagon.\n\"\"\"\ndef area_decagon(a):\n\t\treturn (10*a**2)/(4*tan(pi/10))\n\n\"\"\"\nWrite a function to find the area of a dodecagon.\n\"\"\"\ndef area_dodecagon(a):\n\t\treturn (12*a**2)/(4*tan(pi/12))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\ts = (a+b+c)/2\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(a):\n\t\treturn a**2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\t\treturn a*b\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,c,d):\n\t\treturn ((a+b)*c)/2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(a,b,c):\n\t\treturn a*b\n\n\"\"\""}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t\t# Your code here \n\t\tmax_value = max(arr) \n\t\tcount = 0\n\t\tfor i in range(0, n): \n\t\t\tif arr[i] == max_value: \n\t\t\t\tcount += 1\n\t\treturn count \n\n# Driver Code \nn = int(input())\narr = list(map(int,input().split()))\nprint(frequency_Of_Largest(n,arr))\n<file_sep>/Python/Array/1.py\n\"\"\"\nWrite a Python program to find the second largest number in a list.\n\"\"\"\ndef second_Largest(n,arr):\n\t# Your code here\n\tarr.sort()\n\treturn arr[n-2]\n\n# Driver Code \nn = int(input())\narr = list(map(int,input().split()))\nprint(second_Largest(n,arr))\n<file_sep>/Python/Array/10.py\n\"\"\"\nWrite a Python program to find the maximum and minimum value in a dictionary.\n\"\"\"\ndef max_min(n,arr):\n\t# Your code here\n\tmax_value = max(arr, key=arr.get) \n\tmin_value = min(arr, key=arr.get) \n\treturn max_value,min_value\n\n# Driver Code \nn = int(input())\narr = list(map(int,input().split()))\nprint(max_min(n,arr))\n<file_sep>/Python/Array/11.py\n\"\"\"\nWrite a Python program to find the second smallest number in a list.\n\"\"\"\ndef second_Smallest(n,arr):\n\t# Your code here\n\tarr.sort()\n\treturn arr[1]\n\n# Driver Code \nn = int(input())\narr = list(map(int,input().split()))\nprint(second_Smallest(n,arr))\n<file_sep>/Python/Array/12.py\n\"\"\"\nWrite a Python program to find the second largest number in a list of unique elements.\n\"\"\"\ndef second_Largest(n,arr):\n\t# Your code here\n\tarr.sort()\n\treturn arr[n-2]\n\n# Driver Code \nn = int(input())\narr = list(map(int,input().split()))\nprint(second"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\tsym_list = []\n\t\tfor i in test_list:\n\t\t\tif i[0] == i[1]:\n\t\t\t\tsym_list.append(i)\n\t\treturn sym_list\n\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\tsym_list = []\n\t\tfor i in test_list:\n\t\t\tif i[0] == i[1]:\n\t\t\t\tsym_list.append(i)\n\t\treturn sym_list\n\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\tsym_list = []\n\t\tfor i in test_list:\n\t\t\tif i[0] == i[1]:\n\t\t\t\tsym_list.append(i)\n\t\treturn sym_list\n\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\tsym_list = []\n\t\tfor i in test_list:\n\t\t\tif i[0] == i[1]:\n\t\t\t\tsym_list.append(i)\n\t\treturn sym_list\n\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\tsym_list = []\n\t\tfor i in test_list:\n\t\t\tif i[0] == i[1]:\n\t\t\t\tsym_list.append(i)\n\t\treturn sym_list\n\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\t\"\"\""}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t\treturn (a*(1-r**n))/(1-r)\n\nprint(sum_gp(2,3,0.5))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4\n1 2 3\n1 2\n1\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t\tfirst = 0\n\t\tlast = len(item_list)-1\n\t\tfound = False\n\t\twhile first<=last and not found:\n\t\t\tmidpoint = (first+last)//2\n\t\t\tif item_list[midpoint] == item:\n\t\t\t\tfound = True\n\t\t\telse:\n\t\t\t\tif item < item_list[midpoint]:\n\t\t\t\t\tlast = midpoint-1\n\t\t\t\telse:\n\t\t\t\t\tfirst = midpoint+1\n\t\treturn found\n\nitem_list = [1,2,3,4,5,6,7,8,9,10]\nitem = 10\nprint(binary_search(item_list,item))\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\nclass Node:\n\tdef __init__(self,data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef print_list(self):\n\t\tcurrent_node = self.head\n\t\twhile current_node:\n\t\t\tprint(current_node.data)\n\t\t\tcurrent_node = current_node.next\n\n\tdef insert_at_beginning(self,data):\n\t\tnew_node = Node(data)\n\t\tnew_node.next = self.head\n\t\tself.head = new_node\n\n\tdef insert_at_end(self,data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\tlast_node = self.head\n\t\twhile last_node.next:\n\t\t\tlast_node = last_node.next\n\t\tlast_node.next = new_node\n\n\tdef insert_after_node(self,prev_node,data):\n\t\tif not prev_node:\n\t\t\tprint(\"Previous node is not in the list\")\n\t\t\treturn\n\t\tnew_node = Node(data)\n\t\tnew_node.next = prev_node.next\n\t\tprev_node.next = new_node\n\n\tdef delete_node(self,key):\n\t\thead_node = self.head\n\t\tif head_node and head_node.data == key:\n\t\t\tself.head = head_node."}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t\t\"\"\"\n\t\tCalculate the coordinates of the hexagon.\n\t\t\"\"\"\n\t\t# Calculate the distance between the start and end points\n\t\tdistance = math.sqrt((endx - startx)**2 + (endy - starty)**2)\n\t\t# Calculate the radius of the hexagon\n\t\thex_radius = distance / 2\n\t\t# Calculate the height of the hexagon\n\t\thex_height = math.sqrt(3) * hex_radius\n\t\t# Calculate the width of the hexagon\n\t\thex_width = 2 * hex_radius\n\t\t# Calculate the number of hexagons that fit in the distance\n\t\tnum_hexagons = int(distance / hex_width)\n\t\t# Calculate the x and y coordinates of the first hexagon\n\t\tx = startx\n\t\ty = starty\n\t\t# Calculate the x and y coordinates of the last hexagon\n\t\tlast_x = startx + (num_hexagons * hex_width)\n\t\tlast_y = starty\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = startx + (num_hexagons / 2) * hex_width\n\t\tmiddle_y = starty + hex_height / 2\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = startx + (num_hexagons / 2) * hex_width\n\t\tmiddle_y = starty + hex_height / 2\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = startx + (num_hexagons / 2) * hex_width\n\t\tmiddle_y = starty + hex_height / 2\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = startx + (num_hexagons / 2) * hex_width\n\t\tmiddle_y = starty + hex_height / 2\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = startx + (num_hexagons / 2) * hex_width\n\t\tmiddle_y = starty + hex_height / 2\n\t\t# Calculate the x and y coordinates of the hexagon in the middle\n\t\tmiddle_x = start"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given binary tuple to integer.\n\t\t\"\"\"\n\t\treturn int(\"\".join(str(x) for x in test_tup), 2)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary(test_int):\n\t\t\"\"\"\n\t\tThis function converts the given integer to binary tuple.\n\t\t\"\"\"\n\t\treturn tuple(int(x) for x in bin(test_int)[2:])\n\n\"\"\"\nWrite a function to convert the given binary tuple to hexadecimal tuple.\n\"\"\"\ndef binary_to_hexadecimal(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given binary tuple to hexadecimal tuple.\n\t\t\"\"\"\n\t\treturn tuple(hex(x)[2:] for x in test_tup)\n\n\"\"\"\nWrite a function to convert the given hexadecimal tuple to binary tuple.\n\"\"\"\ndef hexadecimal_to_binary(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given hexadecimal tuple to binary tuple.\n\t\t\"\"\"\n\t\treturn tuple(int(x, 16) for x in test_tup)\n\n\"\"\"\nWrite a function to convert the given binary tuple to octal tuple.\n\"\"\"\ndef binary_to_octal(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given binary tuple to octal tuple.\n\t\t\"\"\"\n\t\treturn tuple(oct(x)[2:] for x in test_tup)\n\n\"\"\"\nWrite a function to convert the given octal tuple to binary tuple.\n\"\"\"\ndef octal_to_binary(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given octal tuple to binary tuple.\n\t\t\"\"\"\n\t\treturn tuple(int(x, 8) for x in test_tup)\n\n\"\"\"\nWrite a function to convert the given binary tuple to decimal tuple.\n\"\"\"\ndef binary_to_decimal(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given binary tuple to decimal tuple.\n\t\t\"\"\"\n\t\treturn tuple(int(x, 2) for x in test_tup)\n\n\"\"\"\nWrite a function to convert the given decimal tuple to binary tuple.\n\"\"\"\ndef decimal_to_binary(test_tup):\n\t\t\"\"\"\n\t\tThis function converts the given decimal tuple to binary tuple.\n\t\t\"\"\"\n\t\treturn tuple"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t\treturn re.sub(r'[a-z]+', '', str1)\n\nprint(remove_lowercase(\"The quick brown fox jumps over the lazy dog\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(\"Python version\")\nprint (sys.version)\nprint(\"Version info.\")\nprint (sys.version_info)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nnow = datetime.datetime.now()\nprint (\"Current date and time : \")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(\"Current date and time : \")\nprint(time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program to get the current working directory.\n\"\"\"\nimport os\nprint(os.getcwd())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_7.py\n\"\"\"\nWrite a Python program to get the current working directory.\n\"\"\"\nimport os\nprint(os.getcwd())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_8.py\n\"\"\"\nWrite a Python program to get the current working directory.\n\"\"\"\n"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t\theapq.heapify(nums)\n\t\treturn heapq.nsmallest(n,nums)\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nn = 3\nprint(heap_queue_smallest(nums,n))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn (3.14*r*(r+math.sqrt(h**2+r**2)))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn (3.14*r**2*h/3)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn (2*3.14*r*(r+h))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn (3.14*r**2*h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn (4*3.14*r**2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn (4*3.14*r**3/3)\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(a):\n\t\treturn (6*a**2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\t\treturn (a**3)\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n\t\treturn (2*(a*b+b*c+c*a))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(a,b,c):\n\t\treturn (a*b*c)\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectprism(a,b,c):\n\t\treturn (2*(a*b+b*c+c*a))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectprism(a,b,c):\n\t\treturn (a*b*c)\n\n\"\"\"\nWrite a function to find"}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t\tif x == 0:\n\t\t\treturn y\n\t\tif y == 0:\n\t\t\treturn x\n\t\tif x == y:\n\t\t\treturn x\n\t\tif x > y:\n\t\t\treturn gcd(x-y, y)\n\t\treturn gcd(x, y-x)\n\nprint gcd(12, 16)\n<file_sep>/python/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t\treturn 2*r\n\nprint(diameter_circle(5))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn 3.14*r*r\n\nprint(area_circle(5))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\nprint(circumference_circle(5))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\nprint(circumference_circle(5))\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECREMENT } from '../actions/counter';\n\nconst initialState = 0;\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n<file_sep>/src/actions/counter.js\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n\nexport const increment = () => ({"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t\treturn ''.join(list)\n\n\"\"\"\nWrite a function to find the longest word in a given list of words.\n\"\"\"\ndef longest_word(list):\n\t\treturn max(list, key=len)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(list):\n\t\treturn os.path.commonprefix(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string among"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t\tif x > y:\n\t\t\tsmaller = y\n\t\telse:\n\t\t\tsmaller = x\n\t\tfor i in range(1, smaller+1):\n\t\t\tif((x % i == 0) and (y % i == 0)):\n\t\t\t\tgcd = i\n\t\treturn gcd\n\nprint(num_comm_div(24, 36))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\" * i)\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1,7):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1,8):\n\tprint(str(i) * i)\n<file_sep>/python/python_basics/python_basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n1234"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t\treturn n%m\n\nprint(find(10,3))\n<file_sep>/python/10.py\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\n\nprint(factorial(5))\n<file_sep>/python/1.py\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(n,m):\n\treturn n+m\n\nprint(sum(10,20))\n<file_sep>/python/11.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0\n\tfor i in l:\n\t\ts+=i\n\treturn s\n\nprint(sum([1,2,3,4,5]))\n<file_sep>/python/12.py\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0\n\tfor i in l:\n\t\ts+=i\n\treturn s\n\nprint(sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0\n\tfor i in l:\n\t\ts+=i\n\treturn s\n\nprint(sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0\n\tfor i in l:\n\t\ts+=i\n\treturn s\n\nprint(sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0\n\tfor i in l:\n\t\ts+=i\n\treturn s\n\nprint(sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum(l):\n\ts=0"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn sum(nums)\n\n\"\"\"\nWrite a function to find the maximum number in a list.\n\"\"\"\ndef find_max(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn max(nums)\n\n\"\"\"\nWrite a function to find the minimum number in a list.\n\"\"\"\ndef find_min(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn min(nums)\n\n\"\"\"\nWrite a function to find the average of a list.\n\"\"\"\ndef find_average(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: float\n\t\t\"\"\"\n\t\treturn sum(nums)/len(nums)\n\n\"\"\"\nWrite a function to find the median of a list.\n\"\"\"\ndef find_median(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: float\n\t\t\"\"\"\n\t\tnums.sort()\n\t\tif len(nums)%2 == 0:\n\t\t\t\treturn (nums[len(nums)/2] + nums[len(nums)/2 - 1])/2.0\n\t\telse:\n\t\t\t\treturn nums[len(nums)/2]\n\n\"\"\"\nWrite a function to find the mode of a list.\n\"\"\"\ndef find_mode(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn max(set(nums), key=nums.count)\n\n\"\"\"\nWrite a function to find the range of a list.\n\"\"\"\ndef find_range(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn max(nums) - min(nums)\n\n\"\"\"\nWrite a function to find the variance of a list.\n\"\"\"\ndef find_variance(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: float\n\t\t\"\"\"\n\t\tmean = find_average(nums)\n\t\treturn sum([(num - mean)**2 for num in nums])/len(nums)\n\n\"\"\"\nWrite a function to find the standard deviation"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i * i * i \n\t\treturn sum \nn = 5\nprint(sum_Of_Series(n)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = 5\nprint(factorial(n))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i \n\t\treturn sum \nn = 5\nprint(sum_Of_Series(n)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers using recursion.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\telse: \n\t\t\treturn n + sum_Of_Series(n-1) \nn = 5\nprint(sum_Of_Series(n)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers using while loop.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tsum = 0\n\t\ti = 1\n\t\twhile i <= n: \n\t\t\tsum += i \n\t\t\ti += 1\n\t\treturn sum \nn = 5\nprint(sum_Of_Series(n)) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a python program to find the sum of first n natural numbers using for loop.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tsum += i \n\t\treturn sum \nn = 5\nprint(sum_Of_Series("}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\tif len(A) == 0:\n\t\t\treturn A\n\t\tif len(A) == 1:\n\t\t\treturn A\n\t\tif len(A) == 2:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 3:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 4:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 5:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 6:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 7:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 8:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 9:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 10:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 11:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 12:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 13:\n\t\t\tif A[0] == 0:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A[::-1]\n\t\tif len(A) == 14:\n\t\t\tif A[0] == 0:"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t\n    # If n is smaller than k, \n    # then return 0 \n    if (n < k): \n        return 0\n  \n    # If n is equal to k or k is 0 \n    # then return 1 \n    if (n == k or k == 0): \n        return 1\n  \n    # If n is greater than k \n    # then return n * (n - 1) * (n - 2) *... * (n - k + 1) \n    return permutation_coefficient(n - 1, k - 1) * n \n  \n# Driver program to test the above function \nn = 5\nk = 2\nprint(permutation_coefficient(n, k)) \n\"\"\"\nOutput:\n10\n\"\"\"\n\n\"\"\"\nWrite a function to calculate the combination coefficient of given n(n, k).\n\"\"\"\ndef combination_coefficient(n, k): \n  \n    # If n is smaller than k, \n    # then return 0 \n    if (n < k): \n        return 0\n  \n    # If n is equal to k or k is 0 \n    # then return 1 \n    if (n == k or k == 0): \n        return 1\n  \n    # If n is greater than k \n    # then return n * (n - 1) * (n - 2) *... * (n - k + 1) \n    return combination_coefficient(n - 1, k - 1) * n / k \n  \n# Driver program to test the above function \nn = 5\nk = 2\nprint(combination_coefficient(n, k)) \n\"\"\"\nOutput:\n10\n\"\"\"\n\n\"\"\"\nWrite a function to calculate the factorial of a given number.\n\"\"\"\ndef factorial(n): \n  \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1); \n  \n# Driver Program \nnum = 5\nprint(\"Factorial of\",num,\"is\", \nfactorial(num)) \n\"\"\"\nOutput:\nFactorial of 5 is 120\n\"\"\"\n\n\"\"\"\nWrite a function to calculate the power of a given number.\n\"\"\"\ndef power(x, y): \n  \n    # single line to calculate x^y \n    return 1 if y == 0 else x *"}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor i in removewords:\n\t\t\tif i in list1:\n\t\t\t\tlist1.remove(i)\n\t\treturn list1\n\nlist1 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nremovewords = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nprint(remove_words(list1, removewords))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three(a,b,c):\n\tif a == b == c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum_three(1,2,3))\nprint(sum_three(1,1,1))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_is(string):\n\tif string[:2] == \"Is\":\n\t\treturn string\n\telse:\n\t\treturn \"Is\" + string\n\nprint(add_is(\"Is\"))\nprint(add_is(\"Isn"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t\tif len(l1)!= len(l2):\n\t\t\treturn False\n\t\tfor i in range(len(l1)):\n\t\t\tif l1[i]!= l2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, "}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t\n    # Initialize sum and count \n    sum = 0\n    count = 0\n    i = 1\n  \n    # Iterate till the given number \n    while (i <= n): \n        sum = sum + i \n        count = count + 1\n        i = i + 2\n  \n    # Return the average \n    return (sum / count) \n  \n# Driver Code \nn = 10\nprint(average_Odd(n)) \n# -\n\n# # 10. Write a python function to find the average of even numbers till a given even number.\n\n# +\n\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\n    # Initialize sum and count \n    sum = 0\n    count = 0\n    i = 2\n  \n    # Iterate till the given number \n    while (i <= n): \n        sum = sum + i \n        count = count + 1\n        i = i + 2\n  \n    # Return the average \n    return (sum / count) \n  \n# Driver Code \nn = 10\nprint(average_Even(n)) \n# -\n\n# # 11. Write a python function to find the average of even numbers till a given even number.\n\n# +\n\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\n    # Initialize sum and count \n    sum = 0\n    count = 0\n    i = 2\n  \n    # Iterate till the given number \n    while (i <= n): \n        sum = sum + i \n        count = count + 1\n        i = i + 2\n  \n    # Return the average \n    return (sum / count) \n  \n# Driver Code \nn = 10\nprint(average_Even(n)) \n# -\n\n# # 12. Write a python function to find the average of even numbers till a given even number.\n\n# +\n\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\n    # Initialize sum and count \n    sum = 0\n    count = 0\n    i = 2\n  \n    # Iterate till the given number \n    while (i <= n): \n        sum = sum + i \n        count = count + 1\n        i = i +"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t\tn = len(arr) \n\t\tcount = 0\n\t\tfor i in range(n): \n\t\t\tprod = 1\n\t\t\tfor j in range(i, n): \n\t\t\t\tprod *= arr[j] \n\t\t\t\tif prod < k: \n\t\t\t\t\tcount += 1\n\t\treturn count \n\narr = [1, 2, 3, 4] \nk = 10\nprint(no_of_subsequences(arr, k)) \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n    if r >= l: \n        mid = l + (r - l)//2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n        else: \n            return binarySearch(arr, mid + 1, r, x) \n    else: \n        return -1\n\narr = [ 2, 3, 4, 10, 40 ] \nx = 10\nresult = binarySearch(arr, 0, len(arr)-1, x) \nif result!= -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/LinearSearch.py\n\"\"\"\nLinear Search\n\nGiven an array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search, i.e\n\"\"\"\n\ndef linearSearch(arr, x): \n    for i in range(len(arr)):"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\tif num % i == 0: \n\t\t\t\tmin_sum += i \n\t\treturn min_sum \n\n# Driver code \nnum = 12\nprint(find_Min_Sum(num)) \n\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\tif num % i == 0: \n\t\t\t\tmin_sum += i \n\t\treturn min_sum \n\n# Driver code \nnum = 12\nprint(find_Min_Sum(num)) \n\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\tif num % i == 0: \n\t\t\t\tmin_sum += i \n\t\treturn min_sum \n\n# Driver code \nnum = 12\nprint(find_Min_Sum(num)) \n\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\tif num % i == 0: \n\t\t\t\tmin_sum += i \n\t\treturn min_sum \n\n# Driver code \nnum = 12\nprint(find_Min_Sum(num)) \n\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\tif num % i == 0: \n\t\t\t\tmin_sum += i \n\t\treturn min_sum \n\n# Driver code \nnum = 12\nprint(find_Min_Sum(num)) \n\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\tmin_sum = 0\n\t\tfor i in range(1, num+1): \n\t\t\t"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t\t\"\"\"\n\t\tThis function counts the element frequency in the mixed nested tuple.\n\t\t\"\"\"\n\t\t# Create a dictionary to store the element frequency\n\t\telement_freq = {}\n\t\t# Iterate through the tuple\n\t\tfor element in test_tuple:\n\t\t\t# Check if the element is a tuple\n\t\t\tif isinstance(element, tuple):\n\t\t\t\t# Iterate through the tuple\n\t\t\t\tfor sub_element in element:\n\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\tif isinstance(sub_element, tuple):\n\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\tfor sub_sub_element in sub_element:\n\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\tif isinstance(sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\tfor sub_sub_sub_element in sub_sub_element:\n\t\t\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\t\t\tif isinstance(sub_sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\t\t\tfor sub_sub_sub_sub_element in sub_sub_sub_element:\n\t\t\t\t\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\t\t\t\t\tif isinstance(sub_sub_sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\t\t\t\t\tfor sub_sub_sub_sub_sub_element in sub_sub_sub_sub_element:\n\t\t\t\t\t\t\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\tif isinstance(sub_sub_sub_sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor sub_sub_sub_sub_sub_sub_element in sub_sub_sub_sub_sub_element:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif isinstance(sub_sub_sub_sub_sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor sub_sub_sub_sub_sub_sub_sub_element in sub_sub_sub_sub_sub_sub_element:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Check if the element is a tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif isinstance(sub_sub_sub_sub_sub_sub_sub_element, tuple):\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Iterate through the tuple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor sub_sub_sub_sub_sub_sub_sub_sub_element in sub_sub_sub_sub_sub_sub_sub_element:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# Check if the element is a tuple"}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t\treturn [str(i) + K for i in test_tup]\n\nprint(add_str((1,2,3,4,5), \"abc\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to display the current date and time.\nSample Output :\nCurrent date and time :\n2014-07-05 14:34:14\n\"\"\"\n\nimport datetime\n\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to print the calendar of a given month and year.\nNote : Use 'calendar' module.\n\"\"\"\n\nimport calendar\n\nprint(calendar.month(2019, 1))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get the volume of a sphere with radius 6.\n\"\"\"\n\nimport math\n\ndef volume(r):\n\treturn (4/3) * math.pi * r**3\n\nprint(volume(6))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to solve (x + y) * (x + y).\nTest Data : x = 4, y = 3\nExpected Output : (4 + 3) ^ 2) = 49\n\"\"\"\n\ndef solve(x, y):\n\treturn (x + y) ** 2\n\nprint(solve(4, 3))\n<file_sep>/Python/Python_Basics/Python_Basics_14.py\n\"\"\"\nWrite a Python program to compute the distance between the points (x1, y1) and (x"}
{"ID": 877, "source": "MBPP:514", "prompt": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t\tsum = 0\n\t\tfor i in test_tup:\n\t\t\tsum += i\n\t\treturn sum\n\ntest_tup = (1,2,3,4,5)\nprint(sum_elements(test_tup))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current username.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the name of the machine on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the name of the current module.\n\"\"\"\nimport sys\nprint(sys.modules[__name__])\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the site directory of the interpreter.\n\"\"\"\nimport sys\nprint(sys.prefix)\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the source code of a Python object.\n\"\"\"\nimport sys\nprint(sys.getsourcefile(sys))\n<file_sep>/python_basics/python_basics_18.py\n\"\"\"\nWrite a Python program to get the source code of a Python object.\n\"\"\"\nimport sys\nprint(sys.getsourcefile(sys))\n<file_sep>/python_basics"}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\n    # Create an array of all possible \n    # sums using first n elements \n    # of arr[] \n    sum = [0 for i in range(n + 1)] \n    sum[0] = 1\n    for i in range(1, n + 1): \n        for j in range(i, n + 1): \n            sum[j] = (sum[j] + sum[j - i]) % m \n    return sum[n] \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 11\nprint(modular_sum(arr, n, m)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/BinarySearch.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binarySearch(arr, l, r, x): \n  \n    # Check base case \n    if r >= l: \n  \n        mid = l + (r - l)//2\n  \n        # If element is present at the middle itself \n        if arr[mid] == x: \n            return mid \n          \n        # If element is smaller than mid, then it can only \n        # be present in left subarray \n        elif arr[mid] > x: \n            return binarySearch(arr, l, mid-1, x) \n  \n        # Else the element can only be present in right subarray \n        else: \n            return binarySearch(arr, mid+1, r, x) \n  \n    else: \n        # Element is not present in the array \n        return -1\n\n# Test array \narr = [ 2, 3, 4, 10, 40 ] \nx = 10\n  \n#"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t\t\"\"\"\n\t\tSorts a list of numbers using radix sort.\n\t\t\"\"\"\n\t\t# Find the maximum number to know number of digits\n\t\tmax_num = max(nums)\n\t\t# Find maximum number of digits\n\t\tmax_digits = len(str(max_num))\n\t\t# Do counting sort for every digit. Note that instead\n\t\t# of passing digit number, exp is passed. exp is 10^i\n\t\t# where i is current digit number\n\t\tfor exp in range(max_digits):\n\t\t\tnums = counting_sort(nums, exp)\n\t\treturn nums\n\ndef counting_sort(nums, exp):\n\t\t\"\"\"\n\t\tSorts a list of numbers using counting sort.\n\t\t\"\"\"\n\t\tn = len(nums)\n\t\t# The output array elements that will have sorted arr\n\t\toutput = [0] * (n)\n\t\t# initialize count array as 0\n\t\tcount = [0] * (10)\n\t\t# Store count of occurrences in count[]\n\t\tfor i in range(0, n):\n\t\t\tindex = (nums[i] // exp)\n\t\t\tcount[ (index)%10 ] += 1\n\t\t# Change count[i] so that count[i] now contains actual\n\t\t#  position of this digit in output[]\n\t\tfor i in range(1,10):\n\t\t\tcount[i] += count[i-1]\n\t\t# Build the output array\n\t\ti = n-1\n\t\twhile i>=0:\n\t\t\tindex = (nums[i] // exp)\n\t\t\toutput[ count[ (index)%10 ] - 1] =  nums[i]\n\t\t\tcount[ (index)%10 ] -= 1\n\t\t\ti -= 1\n\t\t# Copying the output array to arr[],\n\t\t# so that arr now contains sorted numbers\n\t\ti = 0\n\t\tfor i in range(0,len(nums)):\n\t\t\tnums[i] = output[i]\n\t\treturn nums\n\nif __name__ == '__main__':\n\tnums = [170, 45, 75, 90, 802, 24, 2, 66]\n\tprint(radix_sort(nums))\n<file_sep>/README.md\n# Algorithms\n\nThis repository contains the implementation of"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t\tmax = 0\n\t\tfor i in list1:\n\t\t\tif i > 0:\n\t\t\t\tif i > max:\n\t\t\t\t\tmax = i\n\t\treturn max\n\nlist1 = [1, -2, -3, 4, 5, 6, -7, 8, 9]\nprint(largest_pos(list1))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the largest number from the given list.\n\"\"\"\ndef largest(list1): \n\t\tmax = 0\n\t\tfor i in list1:\n\t\t\tif i > max:\n\t\t\t\tmax = i\n\t\treturn max\n\nlist1 = [1, -2, -3, 4, 5, 6, -7, 8, 9]\nprint(largest(list1))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to find the largest number from the given list.\n\"\"\"\ndef largest(list1): \n\t\tmax = 0\n\t\tfor i in list1:\n\t\t\tif i > max:\n\t\t\t\tmax = i\n\t\treturn max\n\nlist1 = [1, -2, -3, 4, 5, 6, -7, 8, 9]\nprint(largest(list1))\n\n\"\"\"\nWrite a python function to find the smallest number from the given list.\n\"\"\"\ndef smallest(list1): \n\t\tmin = 0\n\t\tfor i in list1:\n\t\t\tif i < min:\n\t\t\t\tmin = i\n\t\treturn min\n\nlist1 = [1, -2, -3, 4, 5, 6, -7, 8, 9]\nprint(smallest(list1))\n\n\"\"\"\nWrite a python function to find the smallest postive number from the given list.\n\"\"\"\ndef smallest_pos(list1): \n\t\tmin = 0\n\t\tfor i in list1:\n\t\t\tif i > 0:\n\t\t\t\tif i < min:\n\t\t\t\t\tmin = i\n\t\treturn min\n\nlist1 = [1, -2, -3, 4, 5, 6, -7, 8, 9]\nprint(smallest_pos(list1))\n<file_sep>/"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t\tif num < 0:\n\t\t\treturn \"Number is negative\"\n\t\telse:\n\t\t\treturn num ** 0.5\n\nprint(sqrt_root(16))\nprint(sqrt_root(25))\nprint(sqrt_root(100))\nprint(sqrt_root(1000))\nprint(sqrt_root(10000))\nprint(sqrt_root(100000))\nprint(sqrt_root(1000000))\nprint(sqrt_root(10000000))\nprint(sqrt_root(100000000))\nprint(sqrt_root(1000000000))\nprint(sqrt_root(10000000000))\nprint(sqrt_root(100000000000))\nprint(sqrt_root(1000000000000))\nprint(sqrt_root(10000000000000))\nprint(sqrt_root(100000000000000))\nprint(sqrt_root(1000000000000000))\nprint(sqrt_root(10000000000000000))\nprint(sqrt_root(100000000000000000))\nprint(sqrt_root(1000000000000000000))\nprint(sqrt_root(10000000000000000000))\nprint(sqrt_root(100000000000000000000))\nprint(sqrt_root(1000000000000000000000))\nprint(sqrt_root(10000000000000000000000))\nprint(sqrt_root(100000000000000"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t\treturn (num**3)/6\n\nprint(volume_tetrahedron(10))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(num1, num2):\n\t\treturn (num1*num2)/2\n\nprint(area_triangle(10, 20))\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(num):\n\t\treturn 3.14*num**2\n\nprint(area_circle(10))\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(num1, num2):\n\t\treturn num1*num2\n\nprint(area_rectangle(10, 20))\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(num):\n\t\treturn num**2\n\nprint(area_square(10))\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(num1, num2, num3):\n\t\treturn ((num1+num2)/2)*num3\n\nprint(area_trapezoid(10, 20, 30))\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(num1, num2):\n\t\treturn num1*num2\n\nprint(area_parallelogram(10, 20))\n<file_sep>/python_basics/python_basics_1/python_basics_1_7.py\n\"\"\"\nWrite a function to calculate the area of a"}
{"ID": 883, "source": "MBPP:520", "prompt": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t\n\n\n\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t\n\n\n\"\"\"\nWrite a function to find the sum of the given array elements.\n\"\"\"\ndef get_sum(l):\n\t\n\n\n\"\"\"\nWrite a function to find the product of the given array elements.\n\"\"\"\ndef get_product(l):\n\t\n\n\n\"\"\"\nWrite a function to find the average of the given array elements.\n\"\"\"\ndef get_average(l):\n\t\n\n\n\"\"\"\nWrite a function to find the median of the given array elements.\n\"\"\"\ndef get_median(l):\n\t\n\n\n\"\"\"\nWrite a function to find the mode of the given array elements.\n\"\"\"\ndef get_mode(l):\n\t\n\n\n\"\"\"\nWrite a function to find the standard deviation of the given array elements.\n\"\"\"\ndef get_std_deviation(l):\n\t\n\n\n\"\"\"\nWrite a function to find the variance of the given array elements.\n\"\"\"\ndef get_variance(l):\n\t\n\n\n\"\"\"\nWrite a function to find the range of the given array elements.\n\"\"\"\ndef get_range(l):\n\t\n\n\n\"\"\"\nWrite a function to find the minimum of the given array elements.\n\"\"\"\ndef get_min(l):\n\t\n\n\n\"\"\"\nWrite a function to find the maximum of the given array elements.\n\"\"\"\ndef get_max(l):\n\t\n\n\n\"\"\"\nWrite a function to find the first quartile of the given array elements.\n\"\"\"\ndef get_first_quartile(l):\n\t\n\n\n\"\"\"\nWrite a function to find the third quartile of the given array elements.\n\"\"\"\ndef get_third_quartile(l):\n\t\n\n\n\"\"\"\nWrite a function to find the interquartile range of the given array elements.\n\"\"\"\ndef get_interquartile_range(l):\n\t\n\n\n\"\"\"\nWrite a function to find the skewness of the given array elements.\n\"\"\"\ndef get_skewness(l):\n\t\n\n\n\"\"\"\nWrite a function to find the kurtosis of the given array elements.\n\"\"\"\ndef get_kurtosis(l):\n\t\n\n\n\"\"\"\nWrite a function to find the skewness of the given array elements.\n\"\"\"\ndef get_skewness(l):\n\t\n\n\n\"\"\"\nWrite"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\tif x==y==z:\n\t\t\tprint(\"The triangle is equilateral\")\n\t\telif x==y or y==z or x==z:\n\t\t\tprint(\"The triangle is isosceles\")\n\t\telse:\n\t\t\tprint(\"The triangle is scalene\")\n\ncheck_isosceles(1,2,3)\ncheck_isosceles(1,1,1)\ncheck_isosceles(1,2,1)\ncheck_isosceles(1,1,2)\ncheck_isosceles(2,1,1)\ncheck_isosceles(1,2,2)\ncheck_isosceles(2,2,1)\ncheck_isosceles(2,1,2)\ncheck_isosceles(2,2,2)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n123456\n1234567\n12345678\n123456789\n\"\"\"\nfor i in range(1,10):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n78910\n\"\"\"\nfor i in range(1,5):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n23\n456\n789"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t\n    n = len(arr) \n    lis = [1]*n \n    lds = [1]*n \n  \n    for i in range(1, n): \n        for j in range(0, i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1: \n                lis[i] = lis[j]+1\n  \n    for i in range(n-2, -1, -1): \n        for j in range(n-1, i, -1): \n            if arr[i] > arr[j] and lds[i] < lds[j] + 1: \n                lds[i] = lds[j] + 1\n  \n    max = lis[0] + lds[0] - 1\n    for i in range(1, n): \n        max = max(max, lis[i] + lds[i] - 1) \n  \n    return max \n\narr = [80, 60, 30, 40, 20, 10] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [12, 4, 78, 90, 45, 23] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [50, 3, 10, 7, 40, 80] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(\"Length of LBS is\", lbs(arr)) \n\narr = [1, 11, 2, 10, 4, 5, 2, 1] \nprint(\"Length of LBS is\", lbs"}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t\treturn len(str1) == 10 and str1.isalnum() and str1.islower() and str1.isupper() and str1.isdigit()\n\nstr1 = input(\"Enter a string: \")\nprint(check_string(str1))\n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(\"*\",end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(4,0,-1):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Assignment_1/Assignment_1_5.py\n\"\"\"\nWrite a program to print the following pattern using for loop.\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t\n    # Create a table to store results of subproblems \n    dp = [0 for i in range(n)] \n  \n    # Fill dp[] using above recursive formula \n    for i in range(n): \n        dp[i] = arr[i] \n        for j in range(i): \n            if (arr[i] > arr[j] and dp[i] < dp[j] + arr[i]): \n                dp[i] = dp[j] + arr[i] \n  \n    # Return max value of dp[] \n    return max(dp) \n\n# Driver code \narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n   "}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\tif line1[0] == line2[0]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nline1 = [1, 2, 3]\nline2 = [4, 5, 6]\nprint(parallel_lines(line1, line2))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(\"*\" * i)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n23\n456\n78910\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a python program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1, 6):\n\tprint(str(i) * i)\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a python program to print the following pattern:"}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t\tstr1 = str1.split()\n\t\tfor i in range(len(str1)):\n\t\t\tstr1[i] = str1[i].capitalize()\n\t\treturn \" \".join(str1)\n\nprint(capitalize_first_last_letters(\"hello world\"))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three(1,2,3))\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\n\nprint(factorial(5))\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_n_natural_numbers(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum_of_n_natural_numbers(n-1)\n\nprint(sum_of_n_natural_numbers(5))\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers using recursion.\n\"\"\"\ndef sum_of_n_natural_numbers(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum_of_n_natural_numbers(n-1)\n\nprint(sum_of_n_natural_numbers(5))\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers using recursion.\n\"\"\"\ndef sum_of_n_natural_numbers(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn n+sum"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_2(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_3(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_4(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_5(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_6(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_7(arr, n, sum):\n\t\tcount = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\ndef get_pairs_count_8(arr"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t\tmin_len = len(list1[0])\n\t\tmin_list = []\n\t\tfor i in list1:\n\t\t\tif len(i) < min_len:\n\t\t\t\tmin_len = len(i)\n\t\t\t\tmin_list = [i]\n\t\t\telif len(i) == min_len:\n\t\t\t\tmin_list.append(i)\n\t\treturn min_list\n\nprint(min_length([[1,2,3], [4,5], [1,2,3]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6,7]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]))\nprint(min_length([[1,2,3], [4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9"}
{"ID": 892, "source": "MBPP:529", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_lucas(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_lucas(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_lucas(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_lucas(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) \n\n# Driver code \nn = 5\nprint(jacobsthal_lucas(n)) \n\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\tif n <= 1: \n\t\t\treturn n \n\t\treturn jacobst"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t\tcount = 0\n\t\tfor num in nums:\n\t\t\tif num < 0:\n\t\t\t\tcount += 1\n\t\treturn count / len(nums)\n\nprint(negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t\n    # table[i] will be storing the minimum number of coins \n    # required for i value. So table[V] will have result \n    table = [0 for i in range(V + 1)] \n  \n    # Base case (If given value V is 0) \n    table[0] = 0\n  \n    # Initialize all table values as Infinite \n    for i in range(1, V + 1): \n        table[i] = sys.maxsize \n  \n    # Compute minimum coins required for all \n    # values from 1 to V \n    for i in range(1, V + 1): \n        # Go through all coins smaller than i \n        for j in range(m): \n            if (coins[j] <= i): \n                sub_res = table[i - coins[j]] \n                if (sub_res!= sys.maxsize and sub_res + 1 < table[i]): \n                    table[i] = sub_res + 1\n  \n    return table[V] \n  \n# Driver program to test above function \ncoins = [9, 6, 5, 1] \nm = len(coins) \nV = 11\nprint(\"Minimum coins required is \", min_coins(coins, m, V)) <file_sep>/Python/Algorithms/Dynamic Programming/Longest Common Subsequence.py\n\"\"\"\nGiven two sequences, find the length of longest subsequence present in both of them.\nA subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\nFor example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”,.. etc are subsequences of “abcdefg”.\nSo a string of length n has 2^n different possible subsequences.\n\"\"\"\n\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Length of LCS is \", lcs(X, Y, len(X), len(Y)))"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\telse:\n\t\t\tstr1 = sorted(str1)\n\t\t\tstr2 = sorted(str2)\n\t\t\treturn str1 == str2\n\nprint(check_permutation(\"abc\", \"cba\"))\nprint(check_permutation(\"abc\", \"cbad\"))\n<file_sep>/chapter_1/1_1.py\n\"\"\"\nImplement an algorithm to determine if a string has all unique characters.\n\"\"\"\ndef is_unique(str):\n\tif len(str) > 128:\n\t\treturn False\n\telse:\n\t\tchar_set = [False for _ in range(128)]\n\t\tfor char in str:\n\t\t\tval = ord(char)\n\t\t\tif char_set[val]:\n\t\t\t\treturn False\n\t\t\tchar_set[val] = True\n\t\treturn True\n\nprint(is_unique(\"abc\"))\nprint(is_unique(\"abca\"))\n<file_sep>/chapter_1/1_3.py\n\"\"\"\nGiven two strings, write a method to decide if one is a permutation of the other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\telse:\n\t\t\tstr1 = sorted(str1)\n\t\t\tstr2 = sorted(str2)\n\t\t\treturn str1 == str2\n\nprint(check_permutation(\"abc\", \"cba\"))\nprint(check_permutation(\"abc\", \"cbad\"))\n<file_sep>/chapter_1/1_2.py\n\"\"\"\nWrite code to reverse a C-Style String. (C-String means that “abcd” is represented as five characters, including the null character.)\n\"\"\"\ndef reverse_string(str):\n\treturn str[::-1]\n\nprint(reverse_string(\"abcd\"))\n<file_sep>/chapter_1/1_4.py\n\"\"\"\nWrite a method to replace all spaces in a string with ‘%20’.\n\"\"\"\ndef replace_spaces(str):\n\treturn str.replace(\" \", \"%20\")\n\nprint(replace_spaces(\"a b c d\"))\n<file_sep>/chapter_1/1_5.py\n\"\"\"\nWrite a method to replace all spaces in a string with ‘%20’.\n\"\"\"\ndef"}
{"ID": 896, "source": "MBPP:533", "prompt": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t", "predict": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t\treturn tuple(filter(lambda x: type(x)!= data_type, test_tuple))\n\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), int))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), float))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), str))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), bool))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), list))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), tuple))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), dict))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), set))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), frozenset))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), complex))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), bytes))\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), bytearray))\nprint(remove_datatype((1, 2, 3, 4, "}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\tif pattern in text:\n\t\t\tprint(\"Pattern found in text\")\n\t\t\tprint(\"Pattern found at index\",text.index(pattern))\n\t\telse:\n\t\t\tprint(\"Pattern not found in text\")\n\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\"hello world\")\nsearch_literal(\"hello\",\""}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*r\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r,h):\n\t\treturn math.pi*r*r*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateral_surfacearea(r,h):\n\t\treturn 2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):\n\t\treturn 2*math.pi*r*r+2*math.pi*r*h\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef total_surfacearea(r,h):"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t\treturn list[n-1]\n\nprint nth_items([1,2,3,4,5],3)\n<file_sep>/python/python_fundamentals/coin_tosses.py\n\"\"\"\nWrite a function that simulates tossing a coin 5,000 times. Your function should print how many times the head/tail appears.\n\"\"\"\nimport random\ndef coin_tosses():\n\thead = 0\n\ttail = 0\n\tfor i in range(1,5001):\n\t\tif random.random() < 0.5:\n\t\t\thead += 1\n\t\telse:\n\t\t\ttail += 1\n\tprint \"Heads: \" + str(head)\n\tprint \"Tails: \" + str(tail)\n\ncoin_tosses()\n<file_sep>/python/python_fundamentals/coin_tosses_2.py\n\"\"\"\nModify the previous program to that 1,000 people are tossed.\n\"\"\"\nimport random\ndef coin_tosses():\n\thead = 0\n\ttail = 0\n\tfor i in range(1,1001):\n\t\tif random.random() < 0.5:\n\t\t\thead += 1\n\t\telse:\n\t\t\ttail += 1\n\tprint \"Heads: \" + str(head)\n\tprint \"Tails: \" + str(tail)\n\ncoin_tosses()\n<file_sep>/python/python_fundamentals/coin_tosses_3.py\n\"\"\"\nModify the previous program to that 1,000 people are tossed. Have the function return a dictionary where the keys are the number of people and the values are the number of heads.\n\"\"\"\nimport random\ndef coin_tosses():\n\thead = 0\n\ttail = 0\n\tfor i in range(1,1001):\n\t\tif random.random() < 0.5:\n\t\t\thead += 1\n\t\telse:\n\t\t\ttail += 1\n\tprint \"Heads: \" + str(head)\n\tprint \"Tails: \" + str(tail)\n\treturn {\"Heads\": head, \"Tails\": tail}\n\nprint coin_tosses()\n<file_sep>/python/python_fundamentals/coin_tosses_4."}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t\tstr1 = str1.lower()\n\t\tstr1 = str1.split()\n\t\tstr1 = set(str1)\n\t\tfor i in str1:\n\t\t\tif str1.count(i) > 1:\n\t\t\t\treturn i\n\t\treturn \"No repeated word\"\n\nprint(first_repeated_word(\"This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string. This is a test string\"))\nprint(first_repeated_word(\"This is a test string. This is a test string. This is a test string. This"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t\treturn tuple(str1)\n\nprint(string_list_to_tuple([\"a\",\"b\",\"c\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"]))\nprint(string_list_to_tuple([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\""}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t\treturn list(map(lambda x:x**x,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5,6,7,8,9,10],range(1,10)))\n<file_sep>/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice/python_practice"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t\t# Finding the maximum and minimum element \n\t\tmax_ele = max(arr) \n\t\tmin_ele = min(arr) \n\t\t# Finding the maximum frequency \n\t\tmax_freq = arr.count(max_ele) \n\t\t# Finding the minimum frequency \n\t\tmin_freq = arr.count(min_ele) \n\t\t# Returning the difference \n\t\treturn max_freq - min_freq \n\n# Driver Code \narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] \nn = len(arr) \nprint(find_Diff(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing(arr,n):\n\tsum_arr = sum(arr)\n\tsum_n = (n*(n+1))//2\n\treturn sum_n - sum_arr\n\narr = [1,2,3,4,6,7,8]\nn = len(arr)\nprint(find_missing(arr,n))\n<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate(arr,n):\n\tfor i in range(n):\n\t\tif arr[abs(arr[i])-1] < 0:\n\t\t\treturn abs(arr[i])\n\t\telse:\n\t\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [1,2,3,1,3,6,6]\nn = len(arr)\nprint(find_duplicate(arr,n))\n<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing(arr,n):\n\tsum_arr = sum"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t\n    # initialize sum \n    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    if (sum > n): \n        return True\n    else: \n        return False\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if check_abundant(n): \n        print(n, \"is an abundant number\")\n    else: \n        print(n, \"is not an abundant number\")\n\nif __name__ == \"__main__\":\n    main()<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n\ndef main():\n    for i in range(1, 6):\n        for j in range(1, i+1):\n            print(j, end=\" \")\n        print()\n\nif __name__ == \"__main__\":\n    main()<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\ndef main():\n    for i in range(1, 6):\n        for j in range(i, i+5):\n            print(j, end=\" \")\n        print()\n\nif __name__ == \"__main__\":\n    main()<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\n\ndef main():\n    for i in range(1, 6):\n        for j in range(1, i+1):\n            print(i+j-1, end=\" \")\n        print()\n\nif __name__ == \"__main__\":\n    main()<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t\treturn re.sub(r'[\\s,.]', ':', text)\n\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is a test. This is only a test.\"))\nprint(fill_spaces(\"This is"}
{"ID": 906, "source": "MBPP:543", "prompt": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t\tsum = num1 + num2\n\t\tprint(len(str(sum)))\n\ncount_digits(12345,6789)\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a program to print the following pattern\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_11.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a program to print the following pattern\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(i,end=\"\")\n\tprint()\n\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\"\")\n\tprint()\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a program to print the"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n\n\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple(('a', 'b', ('c', 'd'), 'e')))\n"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t# first bit is 0 and last bit is 1\n\t\tmask1 = (1 << 0) | (1 << (len(bin(n)) - 1))\n\t\t# first bit is 1 and last bit is 0\n\t\tmask2 = (1 << (len(bin(n)) - 1)) | (1 << 0)\n\t\t# toggle first and last bits\n\t\treturn (n ^ mask1) ^ mask2\n\n# Driver code\nn = 10\nprint(toggle_F_and_L_bits(n))\n\n\"\"\"\nWrite a python function to toggle only odd bits of a given number.\n\"\"\"\ndef toggle_odd_bits(n) :  \n\t\t# toggle odd bits\n\t\treturn n ^ (1 << 0) ^ (1 << 2) ^ (1 << 4) ^ (1 << 6) ^ (1 << 8)\n\n# Driver code\nn = 10\nprint(toggle_odd_bits(n))\n\n\"\"\"\nWrite a python function to toggle only even bits of a given number.\n\"\"\"\ndef toggle_even_bits(n) :  \n\t\t# toggle even bits\n\t\treturn n ^ (1 << 1) ^ (1 << 3) ^ (1 << 5) ^ (1 << 7) ^ (1 << 9)\n\n# Driver code\nn = 10\nprint(toggle_even_bits(n))\n\n\"\"\"\nWrite a python function to toggle only odd bits of a given number.\n\"\"\"\ndef toggle_odd_bits(n) :  \n\t\t# toggle odd bits\n\t\treturn n ^ (1 << 0) ^ (1 << 2) ^ (1 << 4) ^ (1 << 6) ^ (1 << 8)\n\n# Driver code\nn = 10\nprint(toggle_odd_bits(n))\n\n\"\"\"\nWrite a python function to toggle only even bits of a given number.\n\"\"\"\ndef toggle_even_bits(n) :  \n\t\t# toggle even bits\n\t\treturn n ^ (1 << 1) ^ (1 << 3) ^ (1 << 5) ^ (1 << 7) ^ (1 << 9)\n\n# Driver code\nn = 10\nprint(toggle_even"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t\tfor i in range(len(string)-1,-1,-1):\n\t\t\tif string[i] == char:\n\t\t\t\treturn i\n\t\treturn -1\n\nprint(last_occurence_char(\"hello\",\"l\"))\nprint(last_occurence_char(\"hello\",\"o\"))\nprint(last_occurence_char(\"hello\",\"z\"))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return 2*sum(set(nums))-sum(nums)\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if"}
{"ID": 910, "source": "MBPP:547", "prompt": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t\t# Initialize result \n\t\tresult = 0\n\t\t# Traverse through all bits \n\t\tfor i in range(0, 32): \n\t\t\t# Count number of bits \n\t\t\tcount = 0\n\t\t\t# Traverse through all numbers \n\t\t\tfor j in range(0, n + 1): \n\t\t\t\t# Check if jth bit in \n\t\t\t\t# binary representation \n\t\t\t\t# of i is set or not \n\t\t\t\tif (j >> i) & 1: \n\t\t\t\t\tcount += 1\n\t\t\t# Add count of set bits \n\t\t\t# to result \n\t\t\tresult += (count * (n - count)) \n\t\treturn result \n\n# Driver code \nn = 10\nprint(Total_Hamming_Distance(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/Find_the_Duplicate_Number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        slow = nums[0]\n        fast = nums[nums[0]]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n        fast = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow\n<file_sep>/Python/Array/Find_the_Duplicate_Number.py\n\"\"\"\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\"\"\"\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        slow = nums[0]\n        fast = nums[nums[0]]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n        fast = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow\n<file_sep>/Python"}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t\tn = len(arr) \n\t\tl = [1]*n \n\t\tfor i in range (1, n): \n\t\t\tfor j in range(0, i): \n\t\t\t\tif arr[i] > arr[j] and l[i]< l[j] + 1 : \n\t\t\t\t\tl[i] = l[j]+1\n\t\treturn max(l) \n\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80] \nprint (\"Length of lis is\", longest_increasing_subsequence(arr)) \n<file_sep>/README.md\n# Data-Structures-and-Algorithms\n\nThis repository contains the implementation of various data structures and algorithms in python.\n<file_sep>/Sorting/BubbleSort.py\n\"\"\"\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\"\"\"\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i])\n<file_sep>/Searching/BinarySearch.py\n\"\"\"\nBinary Search is a fast search algorithm with run-time complexity of Ο(log n).\nThis search algorithm works on the principle of divide and conquer.\nFor this algorithm to work properly, the data collection should be in the sorted form.\n\"\"\"\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid-1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2,"}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1, n+1) : \n\t\t\tif(i % 2!= 0) : \n\t\t\t\tsum = sum + i ** 5\n\t\treturn sum\n\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of fifth power of first n odd natural numbers is : \", odd_Num_Sum(n))\n<file_sep>/Python/Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python function to find the sum of first n natural numbers.\n\"\"\"\ndef sum_of_n_natural_numbers(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum = sum + i\n\treturn sum\n\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of first n natural numbers is : \", sum_of_n_natural_numbers(n))\n<file_sep>/Python/Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef sum_of_squares_of_n_natural_numbers(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum = sum + i ** 2\n\treturn sum\n\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of squares of first n natural numbers is : \", sum_of_squares_of_n_natural_numbers(n))\n<file_sep>/Python/Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef sum_of_cubes_of_n_natural_numbers(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum = sum + i ** 3\n\treturn sum\n\nn = int(input(\"Enter the value of n : \"))\nprint(\"Sum of cubes of first n natural numbers is : \", sum_of_cubes_of_n_natural_numbers(n))\n<file_sep>/Python/Assignment_1/Assignment_1_4.py\n\"\"\"\nWrite a python function to find the sum of cubes of first"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t\tif high < low: \n\t\t\treturn arr[0] \n\t\tif high == low: \n\t\t\treturn arr[low] \n\t\tmid = int((low + high)/2) \n\t\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\t\treturn arr[mid] \n\t\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\t\treturn arr[mid-1] \n\t\tif arr[high] > arr[mid]: \n\t\t\treturn find_Max(arr, low, mid-1) \n\t\treturn find_Max(arr, mid+1, high) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint (\"Maximum element is\", find_Max(arr, 0, n-1)) \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(arr,n):\n\tsum_arr = sum(arr)\n\tsum_n = (n*(n+1))/2\n\treturn sum_n - sum_arr\n\narr = [1,2,3,4,6,7,8]\nn = len(arr)\nprint(find_missing_number(arr,n))<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate_number(arr,n):\n\tfor i in range(n):\n\t\tif arr[abs(arr[i])-1] < 0:\n\t\t\treturn abs(arr[i])\n\t\tarr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n\treturn -1\n\narr = [1,2,3,1,3,6,6]\nn = len(arr)\nprint(find_duplicate_number(arr,n))<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [list1[i][n] for i in range(len(list1))]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn True\n\t\telif len(seq_nums) == 1:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(len(seq_nums)-1):\n\t\t\t\tif seq_nums[i+1] - seq_nums[i]!= 1:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(Seq_Linear([1,2,3,4,5]))\nprint(Seq_Linear([1,2,3,4,6]))\nprint(Seq_Linear([1,2,3,4,5,6]))\nprint(Seq_Linear([1,2,3,4,5,7]))\nprint(Seq_Linear([1,2,3,4,5,6,7]))\nprint(Seq_Linear([1,2,3,4,5,6,8]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8]))\nprint(Seq_Linear([1,2,3,4,5,6,7,9]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,13]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,1"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1]) / float(test_tup[2])\n\nprint(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(tuple_to_"}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\n    odd = [] \n    even = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return odd, even \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nodd, even = Split(list) \nprint(\"Odd numbers in the list: \", odd) \nprint(\"Even numbers in the list: \", even) \n<file_sep>/Python/Python_Assignment_1/Assignment_1_1.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\nn = int(input(\"Enter the value of n: \"))\nsum = 0\nfor i in range(1, n+1):\n    sum = sum + i\nprint(\"Sum of first n positive integers is: \", sum)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_2.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\nn = int(input(\"Enter the value of n: \"))\nsum = 0\nfor i in range(1, n+1):\n    sum = sum + i\nprint(\"Sum of first n positive integers is: \", sum)\n\n# Using formula\n\nn = int(input(\"Enter the value of n: \"))\nsum = (n*(n+1))/2\nprint(\"Sum of first n positive integers is: \", sum)\n<file_sep>/Python/Python_Assignment_1/Assignment_1_3.py\n\"\"\"\nWrite a python program to find the sum of the first n positive integers.\n\"\"\"\n\nn = int(input(\"Enter the value of n: \"))\nsum = 0\nfor i in range(1, n+1):\n    sum = sum + i\nprint(\"Sum of first n positive integers is: \", sum)\n\n# Using formula\n\nn = int(input(\"Enter the value of n: \"))\nsum = (n*(n+1))/2\nprint(\"Sum of first n positive integers is: \", sum)\n\n# Using formula\n\nn = int(input(\"Enter the value of n: \"))\nsum = (n*(n+1))/2\nprint(\"Sum"}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t\tsum_of_cubes = 0\n\t\tsum_of_n = 0\n\t\tfor i in range(1, n+1) :\n\t\t\tsum_of_cubes += i*i*i\n\t\t\tsum_of_n += i\n\t\treturn sum_of_cubes - sum_of_n\n\nprint(difference(10))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(1, 6) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n\nfor i in range(4, 0, -1) :\n\tfor j in range(1, i+1) :\n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics"}
{"ID": 919, "source": "MBPP:556", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t\tcount = 0\n\t\tfor i in range(N) : \n\t\t\tfor j in range(i+1,N) : \n\t\t\t\tif (A[i] ^ A[j]) & 1 : \n\t\t\t\t\tcount += 1\n\t\treturn count \n\nA = [1,2,3,4,5]\nN = len(A)\nprint(find_Odd_Pair(A,N))\n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(A,N) : \n\tsum_of_n = (N*(N+1))//2\n\tsum_of_A = sum(A)\n\treturn sum_of_n - sum_of_A\n\nA = [1,2,3,4,6,7,8]\nN = len(A)\nprint(find_missing_number(A,N))\n<file_sep>/Python/Array/find_duplicate_number.py\n\"\"\"\nGiven an array of integers, find the first repeated number in that array.\n\"\"\"\ndef find_duplicate_number(A,N) : \n\tfor i in range(N) : \n\t\tif A[abs(A[i])-1] < 0 : \n\t\t\treturn abs(A[i])\n\t\tA[abs(A[i])-1] = -A[abs(A[i])-1]\n\treturn -1\n\nA = [1,2,3,1,3,6,6]\nN = len(A)\nprint(find_duplicate_number(A,N))\n<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(A,N) : \n\tsum_of_n = (N*(N+1))//2\n\tsum_of_A = sum(A)\n\treturn sum_of_n - sum_of_A\n\nA = [1,2,3,4,6"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t\treturn string.swapcase()\n\nprint(toggle_string(\"Hello World\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnumbers = input(\"Enter the numbers: \")\nlist = numbers.split(\",\")\ntuple = tuple(list)\nprint(\"List: \", list)\nprint(\"Tuple: \", tuple)\n<file_sep>/Python/Python_Basics/Python_"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\t\"\"\"\n\t\t:type n1: int\n\t\t:type n2: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tn1 = str(n1)\n\t\tn2 = str(n2)\n\t\tif len(n1) > len(n2):\n\t\t\tn1, n2 = n2, n1\n\t\tn1 = n1.zfill(len(n2))\n\t\treturn sum([int(n1[i]) * 10 ** (len(n2) - i - 1) for i in range(len(n1))])\n\n\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\t\"\"\"\n\t\t:type n1: int\n\t\t:type n2: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tn1 = str(n1)\n\t\tn2 = str(n2)\n\t\tif len(n1) > len(n2):\n\t\t\tn1, n2 = n2, n1\n\t\tn1 = n1.zfill(len(n2))\n\t\treturn sum([int(n1[i]) * 10 ** (len(n2) - i - 1) for i in range(len(n1))])\n\n\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\t\"\"\"\n\t\t:type n1: int\n\t\t:type n2: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tn1 = str(n1)\n\t\tn2 = str(n2)\n\t\tif len(n1) > len(n2):\n\t\t\tn1, n2 = n2, n1\n\t\tn1 = n1.zfill(len(n2))\n\t\treturn sum([int(n1[i]) * 10 ** (len(n2) - i - 1) for i in range(len(n1))])\n\n\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\t\"\"\"\n\t\t:type n1: int\n\t\t:type n2: int\n\t\t"}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t\n#\tif size == 0:\n#\t\treturn 0\n#\tif size == 1:\n#\t\treturn a[0]\n#\tif size == 2:\n#\t\treturn max(a[0], a[1])\n#\tif size == 3:\n#\t\treturn max(a[0], a[1], a[2])\n#\tif size == 4:\n#\t\treturn max(a[0], a[1], a[2], a[3])\n#\tif size == 5:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4])\n#\tif size == 6:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5])\n#\tif size == 7:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n#\tif size == 8:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n#\tif size == 9:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n#\tif size == 10:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n#\tif size == 11:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n#\tif size == 12:\n#\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a["}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t\treturn set(test_tup1).union(set(test_tup2))\n\nprint(union_elements(test_tup1, test_tup2))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\""}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t\tresult = []\n\t\tfor i in range(len(test_list)):\n\t\t\tif i % 2 == 0:\n\t\t\t\tresult.append(test_list[i])\n\t\t\telse:\n\t\t\t\tresult.append(test_list[i-1])\n\t\treturn result\n\nprint(assign_elements((1,2,3,4,5,6,7,8,9,10)))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a Python program to get the largest number from a list.\n\"\"\"\ndef largest_number(test_list):\n\treturn max(test_list)\n\nprint(largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_10.py\n\"\"\"\nWrite a Python program to find the second smallest number in a list.\n\"\"\"\ndef second_smallest_number(test_list):\n\treturn sorted(test_list)[1]\n\nprint(second_smallest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_11.py\n\"\"\"\nWrite a Python program to find the second largest number in a list.\n\"\"\"\ndef second_largest_number(test_list):\n\treturn sorted(test_list)[-2]\n\nprint(second_largest_number([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_practice/python_practice_12.py\n\"\"\"\nWrite a Python program to find the N largest elements from a list.\n\"\"\"\ndef n_largest_elements(test_list, n):\n\treturn sorted(test_list, reverse=True)[:n]\n\nprint(n_largest_elements([1,2,3,4,5,6,7,8,9,10], 3))\n<file_sep>/python_practice/python_practice_13.py\n\"\"\"\nWrite a Python program to find the N smallest elements from a list.\n\"\"\"\ndef n_smallest_elements(test_list, n):\n\treturn sorted(test_list)[:n]\n\nprint"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t\tmax_length = 0\n\t\tfor i in range(len(lst)):\n\t\t\tfor j in range(i,len(lst)):\n\t\t\t\tif len(lst[i:j+1]) > max_length:\n\t\t\t\t\tmax_length = len(lst[i:j+1])\n\t\treturn max_length\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(Find_Max_Length(lst))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs"}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t\treturn re.findall(r'\"([^\"]*)\"', text)\n\nprint(extract_values('abc \"data here\" 123'))\nprint(extract_values('abc \"data here\" 123 \"abc\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\" \"123\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\" \"123\" \"456\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\" \"123\" \"456\" \"789\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\" \"123\" \"456\" \"789\" \"abc\"'))\nprint(extract_values('abc \"data here\" 123 \"abc\" \"def\" \"xyz\" \"pqr\" \"stu\" \"vwx\" \"yz\" \"123\" \"456\" \"789\" \"abc\" \"def\"'))\nprint"}
{"ID": 927, "source": "MBPP:564", "prompt": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\tcount = 0\n\t\tfor i in range(0, n): \n\t\t\tfor j in range(i + 1, n): \n\t\t\t\tif (arr[i]!= arr[j]): \n\t\t\t\t\tcount += 1\n\t\treturn count \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Count of pairs is\", count_Pairs(arr, n)) \n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t\treturn [char for char in word] \n\nprint(split(\"Hello\"))\n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/Python/Python_Basics/Python_Basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum(a,b,c):\n\tif a==b==c:\n\t\treturn 3*(a+b+c)\n\telse:\n\t\treturn a+b+c\n\nprint(sum(1,2,3))\nprint(sum(3,3,3))\n<file_sep>/Python/Python_Basics/Python_Basics_11.py\n\"\"\"\nWrite a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged.\n\"\"\"\ndef add_string(word):\n\tif word[:2] == \"Is\":\n\t\treturn word\n\telse:\n\t\treturn \"Is\"+word\n\nprint(add_string(\"Is\"))\nprint(add_string(\"Hello\"))\n<file_sep>/Python/Python_Basics/Python_Basics_12.py\n\"\"\"\nWrite a Python program to get a string which is n (non-negative integer) copies of a given string.\n\"\"\"\ndef string_copies(word,n):\n\treturn word*n\n\nprint(string_copies(\"Hello\",3))\n<file_sep>/Python/Python_Basics/Python_Basics_13.py\n\"\"\"\nWrite a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.\n\"\"\"\ndef even_odd(n):\n\tif n%2==0:\n\t\treturn \"Even\"\n\telse"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t\tif n == 0:\n\t\t\t\treturn 0\n\t\telse:\n\t\t\t\treturn n % 10 + sum_digits(n // 10)\n\nprint(sum_digits(12345))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if root is None:\n            return True\n        else:\n            return self.isMirror(root.left, root.right)\n\n    def isMirror(self, left, right):\n        if left"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t\tif list1 == sorted(list1):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_2(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_3(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_4(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_5(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_6(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries with the keys 'name', 'age', 'job' and 'wage'.\n\"\"\"\ndef dict_list_7(length):\n\t\treturn [{'name': '', 'age': 0, 'job': '', 'wage': 0"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tlist1[i].sort()\n\t\treturn list1\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n<file_sep>/python/python_fundamentals/for_loop_basic2.py\n\"\"\"\nBasic - Print all integers from 0 to 150.\n\nMultiples of Five - Print all the multiples of 5 from 5 to 1,000,000.\n\nCounting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\n\nWhoa. That Sucker's Huge - Add odd integers from 0 to 500,000, and print the final sum.\n\nCountdown by Fours - Print positive numbers starting at 2018, counting down by fours.\n\nFlexible Countdown - Given lowNum, highNum, mult, print multiples of mult from lowNum to highNum, using a FOR loop. For (2,9,3), print 3 6 9 (on successive lines)\n\n\"\"\"\n\n# Basic - Print all integers from 0 to 150.\nfor i in range(151):\n\tprint(i)\n\n# Multiples of Five - Print all the multiples of 5 from 5 to 1,000,000.\nfor i in range(5, 1000001, 5):\n\tprint(i)\n\n# Counting, the Dojo Way - Print integers 1 to 100. If divisible by 5, print \"Coding\" instead. If divisible by 10, print \"Coding Dojo\".\nfor i in range(1, 101):\n\tif i % 10 == 0:\n\t\tprint(\"Coding Dojo\")\n\telif i % 5 == 0:\n\t\tprint(\"Coding\")\n\telse:\n\t\tprint(i)\n\n# Whoa. That Sucker's Huge - Add odd integers from 0 to 5"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t\tfor i in list1:\n\t\t\tfor j in charlist:\n\t\t\t\tif j in i:\n\t\t\t\t\tlist1.remove(i)\n\t\treturn list1\n\nprint(remove_words([\"abc\", \"xyz\", \"aba\", \"1221\"], [\"abc\", \"xyz\"]))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\n\nprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\n\ndef sum_three(a, b, c):\n\tif a == b == c:\n\t\treturn 3 * (a + b + c)\n\telse:\n\t\treturn a + b + c\n\nprint(sum_three(1, 2, 3))\nprint(sum_three(3, 3, 3))\n<file_sep>/python/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the smallest number from a list.\n\"\"\"\n\ndef smallest_number(list1):\n\treturn min(list1)\n\nprint(smallest_number([1, 2, 3, 4, 5]))\n<file_sep>/python/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n\"\"\"\n\ndef count_strings(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif len(i) >= 2 and i[0] == i[-1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_strings([\"abc\", \"xyz\", \"aba\", \"122"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t\n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Initialize result \n    res = 0\n  \n    # Traverse the array \n    for i in range(N): \n  \n        # Find the maximum sum of disjoint pairs \n        # with the current element as the first element \n        # of the pair \n        max_sum = arr[i] * K \n  \n        # Find the maximum sum of disjoint pairs \n        # with the current element as the second element \n        # of the pair \n        for j in range(i + 1, N): \n            if (arr[j] * K) > max_sum: \n                max_sum = arr[j] * K \n  \n        # Update the result \n        res += max_sum \n  \n    # Return the result \n    return res \n  \n# Driver Code \nif __name__ == \"__main__\": \n    arr = [1, 2, 3, 4, 5] \n    N = len(arr) \n    K = 2\n    print(max_sum_pair_diff_lessthan_K(arr, N, K)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/15.py\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef max_product_triplet(arr, n): \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Initialize result \n    res = 0\n  \n    # Find the maximum product of a triplet \n    res = arr[n - 1] * arr[n - 2] * arr[n - 3] \n  \n    # Return the result \n    return res \n  \n# Driver Code \nif __name__ == \"__main__\": \n    arr = [10, 3, 5, 6, 20] \n    n = len(arr) \n    print(max_product_triplet(arr, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/10.py\n\"\"\"\nGiven an array of integers, find the maximum product of a triplet in the array.\n\"\"\"\ndef max_product_triplet(arr, n): \n  \n    # Sort the array in ascending order \n    arr.sort() \n  \n    # Initialize result \n    res = 0\n  \n    # Find the maximum product of a triplet \n    res = arr[n - 1] *"}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tnums = list(set(nums))\n\t\tif len(nums) < 2:\n\t\t\treturn nums\n\t\telse:\n\t\t\treturn nums[:2]\n\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\n<file_sep>/python/leetcode/easy/136_single_number.py\n\"\"\"\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\"\"\"\ndef single_number(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn "}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t\treturn reduce(lambda x,y: x*y, set(list_data))\n\nprint unique_product([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a python function to calculate the sum of the unique numbers of a given list.\n\"\"\"\ndef unique_sum(list_data):\n\t\treturn sum(set(list_data))\n\nprint unique_sum([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python/python_basics/python_basics_3.py\n\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t\treturn reduce(lambda x,y: x*y, set(list_data))\n\nprint unique_product([1,2,3,4,5,6,7,8,9,10])\n<file_sep>/python/python_basics/python_basics_2.py\n\"\"\"\nWrite a python function to calculate the sum of the unique numbers of a given list.\n\"\"\"\ndef unique_sum(list_data):\n\t\treturn sum(set(list_data))\n\nprint unique_sum([1,2,3,4,5,6,7,8,9,10])\n<|endoftext|><repo_name>joseph-m-martin/react-redux-boilerplate<file_sep>/src/components/App.js\nimport React from'react';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { increment, decrement } from '../actions/counter';\n\nconst App = ({ counter, increment, decrement }) => (\n  <div>\n    <h1>Counter: {counter}</h1>\n    <button onClick={increment}>+</button>\n    <button onClick={decrement}>-</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  increment,\n  decrement\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n<file_sep>/src/reducers/counter.js\nimport { INCREMENT, DECREMENT"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*3.14*r*h+2*3.14*r*r\n\nprint surfacearea_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 3.14*r*r*h\n\nprint volume_cylinder(2,3)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*3.14*r*r\n\nprint surfacearea_sphere(2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*3.14*r*r*r\n\nprint volume_sphere(2)\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 3.14*r*r+3.14*r*h\n\nprint surfacearea_cone(2,3)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 1/3*3.14*r*r*h\n\nprint volume_cone(2,3)\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(a):\n\t\treturn 6*a*a\n\nprint surfacearea_cube(2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\t\treturn a*a*a\n\nprint volume_cube(2)\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n\t\treturn 2*(a*b+b*c+c*a)\n\nprint surfacearea_cuboid(2,3,4)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(a,b,c):\n\t\treturn a*b*c\n\nprint volume"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t\tif (N <= 0): \n\t\t\treturn 0\n\t\tif (N > R): \n\t\t\treturn R - L + 1\n\t\tif (N <= (R - L + 1)/2): \n\t\t\treturn count_no(A, N, L, L + N - 1) \n\t\telse: \n\t\t\treturn count_no(A, N - (R - L + 1)/2, L + (R - L + 1)/2, R) \n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nN = 3\nL = 0\nR = len(A) - 1\nprint(count_no(A, N, L, R)) \n<file_sep>/Python/Array/find_missing_number.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(A):\n\tn = len(A)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_A = sum(A)\n\treturn total - sum_of_A\n\nA = [1,2,3,4,6,7,8]\nprint(find_missing_number(A))<file_sep>/Python/Array/find_missing_number_2.py\n\"\"\"\nGiven an array of size n-1 and given that there are numbers from 1 to n with one missing, the missing number is to be found.\n\"\"\"\ndef find_missing_number(A):\n\tn = len(A)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_A = sum(A)\n\treturn total - sum_of_A\n\nA = [1,2,3,4,6,7,8]\nprint(find_missing_number(A))\n\n#Method 2\ndef find_missing_number(A):\n\tn = len(A)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_A = sum(A)\n\treturn total - sum_of_A\n\nA = [1,"}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t\ti = 0\n\t\tj = 0\n\t\twhile i < n and j < m: \n\t\t\tif A[i] == B[j]: \n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\t\telse: \n\t\t\t\ti = i - j + 1\n\t\t\t\tj = 0\n\t\tif j == m: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nA = [1,2,3,4,5,6,7,8,9,10]\nB = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)\nm = len(B)\nprint(is_Sub_Array(A,B,n,m))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate_array(A,n):\n\ttemp = A[n-1]\n\tfor i in range(n-1,0,-1):\n\t\tA[i] = A[i-1]\n\tA[0] = temp\n\treturn A\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)\nprint(rotate_array(A,n))\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate_array(A,n):\n\ttemp = A[0]\n\tfor i in range(0,n-1):\n\t\tA[i] = A[i+1]\n\tA[n-1] = temp\n\treturn A\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)\nprint(rotate_array(A,n))\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate_array(A,n):\n\ttemp = A[n-1]\n\tfor i in range(n-1,0,-1"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t\tif (n == 0): \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn (n * last_Digit_Factorial(n - 1)) % 10\n\nn = 100\nprint(last_Digit_Factorial(n))\n<file_sep>/Python/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/Python_Programs/"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t\t\"\"\"\n\t\tInterleaves the lists.\n\t\t\"\"\"\n\t\tif len(list1)!= len(list2)!= len(list3):\n\t\t\treturn \"Lists are not of the same length.\"\n\t\telse:\n\t\t\tinterleaved_list = []\n\t\t\tfor i in range(len(list1)):\n\t\t\t\tinterleaved_list.append(list1[i])\n\t\t\t\tinterleaved_list.append(list2[i])\n\t\t\t\tinterleaved_list.append(list3[i])\n\t\t\treturn interleaved_list\n\n\"\"\"\nWrite a function to interleave lists of different lengths.\n\"\"\"\ndef interleave_lists_diff_len(list1,list2,list3):\n\t\t\"\"\"\n\t\tInterleaves the lists.\n\t\t\"\"\"\n\t\tif len(list1)!= len(list2)!= len(list3):\n\t\t\treturn \"Lists are not of the same length.\"\n\t\telse:\n\t\t\tinterleaved_list = []\n\t\t\tfor i in range(len(list1)):\n\t\t\t\tinterleaved_list.append(list1[i])\n\t\t\t\tinterleaved_list.append(list2[i])\n\t\t\t\tinterleaved_list.append(list3[i])\n\t\t\treturn interleaved_list\n\n\"\"\"\nWrite a function to interleave lists of different lengths.\n\"\"\"\ndef interleave_lists_diff_len(list1,list2,list3):\n\t\t\"\"\"\n\t\tInterleaves the lists.\n\t\t\"\"\"\n\t\tif len(list1)!= len(list2)!= len(list3):\n\t\t\treturn \"Lists are not of the same length.\"\n\t\telse:\n\t\t\tinterleaved_list = []\n\t\t\tfor i in range(len(list1)):\n\t\t\t\tinterleaved_list.append(list1[i])\n\t\t\t\tinterleaved_list.append(list2[i])\n\t\t\t\tinterleaved_list.append(list3[i])\n\t\t\treturn interleaved_list\n\n\"\"\"\nWrite a function to interleave lists of different lengths.\n\"\"\"\ndef interleave_lists_diff_len(list1,list2,list3):\n\t\t\"\"\"\n\t\tInterleaves the lists.\n\t\t\"\"\"\n\t\tif len(list1)!= len(list2)!= len(list3):\n\t\t\treturn \"Lists are not of the same length.\"\n\t\telse"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\tFind the dissimilar elements in the given two tuples.\n\t\t\"\"\"\n\t\treturn tuple(set(test_tup1) ^ set(test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ttest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\tprint(find_dissimilar(test_tup1, test_tup2))\n<file_sep>/python/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to print the following string in a specific format (see the output).\n\"\"\"\ndef print_string():\n\t\"\"\"\n\tPrint the following string in a specific format.\n\t\"\"\"\n\tprint(\"Twinkle, twinkle, little star, \\n\\tHow I wonder what you are! \\n\\t\\tUp above the world so high, \\n\\t\\tLike a diamond in the sky. \\nTwinkle, twinkle, little star, \\n\\tHow I wonder what you are!\")\n\nif __name__ == '__main__':\n\tprint_string()\n<file_sep>/python/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\"\"\"\ndef sum_three_numbers(num1, num2, num3):\n\t\"\"\"\n\tCalculate the sum of three given numbers, if the values are equal then return three times of their sum.\n\t\"\"\"\n\tif num1 == num2 == num3:\n\t\treturn 3 * (num1 + num2 + num3)\n\telse:\n\t\treturn num1 + num2 + num3\n\nif __name__ == '__main__':\n\tnum1 = 10\n\tnum2 = 20\n\tnum3 = 30\n\tprint(sum_three_numbers(num1, num2, num3))\n<file_sep>/python"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t\teven_list = []\n\t\tfor i in test_tuple:\n\t\t\tif type(i) == tuple:\n\t\t\t\teven_list.append(extract_even(i))\n\t\t\telif type(i) == int and i % 2 == 0:\n\t\t\t\teven_list.append(i)\n\t\treturn tuple(even_list)\n\nprint(extract_even(test_tuple))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a function to find the maximum and minimum number from a given list.\n\"\"\"\ndef max_min(test_list):\n\tmax_num = test_list[0]\n\tmin_num = test_list[0]\n\tfor i in test_list:\n\t\tif i > max_num:\n\t\t\tmax_num = i\n\t\telif i < min_num:\n\t\t\tmin_num = i\n\treturn max_num, min_num\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_min(test_list))\n<file_sep>/python_basics/python_basics_2.py\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef factorial(num):\n\tif num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num - 1)\n\nprint(factorial(5))\n<file_sep>/python_basics/python_basics_3.py\n\"\"\"\nWrite a function to find the sum of all the elements in a given list.\n\"\"\"\ndef sum_list(test_list):\n\tsum_num = 0\n\tfor i in test_list:\n\t\tsum_num += i\n\treturn sum_num\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_list(test_list))\n<file_sep>/python_basics/python_basics_4.py\n\"\"\"\nWrite a function to find the sum of all the elements in a given list.\n\"\"\"\ndef sum_list(test_list):\n\tsum_num = 0\n\tfor i"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t\treturn (b*s) + (b*s*sqrt(2))\n\nprint(surface_Area(4,5))\n\n\"\"\"\nWrite a python function to find the volume of the square pyramid.\n\"\"\"\ndef volume_of_square_pyramid(b,s): \n\t\treturn (b*s*s)/3\n\nprint(volume_of_square_pyramid(4,5))\n\n\"\"\"\nWrite a python function to find the surface area of the cube.\n\"\"\"\ndef surface_area_of_cube(s): \n\t\treturn 6*(s*s)\n\nprint(surface_area_of_cube(4))\n\n\"\"\"\nWrite a python function to find the volume of the cube.\n\"\"\"\ndef volume_of_cube(s): \n\t\treturn s*s*s\n\nprint(volume_of_cube(4))\n\n\"\"\"\nWrite a python function to find the surface area of the cylinder.\n\"\"\"\ndef surface_area_of_cylinder(r,h): \n\t\treturn 2*pi*r*(r+h)\n\nprint(surface_area_of_cylinder(4,5))\n\n\"\"\"\nWrite a python function to find the volume of the cylinder.\n\"\"\"\ndef volume_of_cylinder(r,h): \n\t\treturn pi*r*r*h\n\nprint(volume_of_cylinder(4,5))\n\n\"\"\"\nWrite a python function to find the surface area of the cone.\n\"\"\"\ndef surface_area_of_cone(r,h): \n\t\treturn pi*r*(r+sqrt(r*r+h*h))\n\nprint(surface_area_of_cone(4,5))\n\n\"\"\"\nWrite a python function to find the volume of the cone.\n\"\"\"\ndef volume_of_cone(r,h): \n\t\treturn (pi*r*r*h)/3\n\nprint(volume_of_cone(4,5))\n\n\"\"\"\nWrite a python function to find the surface area of the sphere.\n\"\"\"\ndef surface_area_of_sphere(r): \n\t\treturn 4*pi*r*r\n\nprint(surface_area_of_sphere(4))\n\n\"\"\"\nWrite a python function to find the"}
{"ID": 945, "source": "MBPP:582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t\tif len(dict1) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(my_dict({}))\nprint(my_dict({1:2}))\n<file_sep>/python_basics/python_basics_1/python_basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_1/python_basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/python_basics/python_basics_1/python_basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/python_basics/python_basics_1/python_basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/python_basics/python_basics_1/python_basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/python_basics/python_basics_1/python_basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nnumbers = input(\"Enter the numbers: \")\nlist1 = numbers.split(\",\")\ntuple1 = tuple(list1)\nprint(\"List: \", list1)\nprint"}
{"ID": 946, "source": "MBPP:583", "prompt": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t", "predict": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t\tif num <= 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn catalan_number(num-1) * (2*num-1) / num\n\nprint catalan_number(5)\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are equal or not.\n\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        else:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\nNote:\nBonus points if you could solve it both recursively and iteratively.\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        else:"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\w+ly\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b[aeiou]\\w+[^aeiou]\\b\", text)\n\n\"\"\"\nWrite a function to find all the words that start with a vowel and end with a consonant.\n\"\"\"\ndef find_vowel_consonant(text):\n\t\t# Write your code here\n\t\treturn re.findall(r\"\\b["}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t\theap = []\n\t\tfor item in items:\n\t\t\theapq.heappush(heap,item)\n\t\treturn [heapq.heappop(heap) for i in range(n)]\n\nitems = [1,2,3,4,5,6,7,8,9,10]\nprint(expensive_items(items,3))\n<file_sep>/python/data_structures/linked_list/linked_list.py\n\"\"\"\nLinked List\n\"\"\"\nclass Node:\n\tdef __init__(self,data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass LinkedList:\n\tdef __init__(self):\n\t\tself.head = None\n\n\tdef insert(self,data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\n\tdef print_list(self):\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t\tprint(temp.data)\n\t\t\ttemp = temp.next\n\n\tdef delete(self,data):\n\t\ttemp = self.head\n\t\tif temp is not None:\n\t\t\tif temp.data == data:\n\t\t\t\tself.head = temp.next\n\t\t\t\ttemp = None\n\t\t\t\treturn\n\t\twhile temp is not None:\n\t\t\tif temp.data == data:\n\t\t\t\tbreak\n\t\t\tprev = temp\n\t\t\ttemp = temp.next\n\t\tif temp is None:\n\t\t\treturn\n\t\tprev.next = temp.next\n\t\ttemp = None\n\n\tdef reverse(self):\n\t\tprev = None\n\t\tcurrent = self.head\n\t\twhile current is not None:\n\t\t\tnext = current.next\n\t\t\tcurrent.next = prev\n\t\t\tprev = current\n\t\t\tcurrent = next\n\t\tself.head = prev\n\n\tdef get_length(self):\n\t\tcount = 0\n\t\ttemp = self.head\n\t\twhile temp:\n\t\t\tcount += 1\n\t\t\ttemp = temp.next\n\t\treturn count\n\n\tdef insert_at_end(self,data):\n\t\tnew_node = Node(data)\n\t\tif self.head is None:\n\t\t\tself.head = new_node\n\t\t\treturn\n\t\ttemp = self.head\n\t"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t\n    for i in range(0, k):  \n        x = a[0]  \n        for j in range(0, n-1):  \n            a[j] = a[j + 1]  \n        a[n-1] = x  \na = [1, 2, 3, 4, 5, 6, 7]  \nn = len(a)  \nposition = 3\nsplit_Arr(a, n, position)  \nprint(a)  <file_sep>/Python/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/Python_Practice/"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t\treturn tuple(listx)\n\nprint(list_tuple([1,2,3,4,5]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a Python program to display the current date and time.\n\"\"\"\nimport datetime\nprint(datetime.datetime.now())\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a Python program which accepts the radius of a circle from the user and compute the area.\n\"\"\"\nimport math\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius * radius\nprint(\"Area of the circle is: \", area)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name + \" \" + first_name)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a Python program which accepts the user's first and last name and print them in reverse order with a space between them.\n\"\"\"\nfirst_name = input(\"Enter your first name: \")\nlast_name = input(\"Enter your last name: \")\nprint(last_name[::-1] + \" \" + first_name[::-1])\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a Python program which accepts a sequence of comma-separated numbers from user and generate a list and a tuple with those numbers.\n\"\"\"\nlistx = []\ntuplex = ()\nlistx = input(\"Enter the numbers: \").split(\",\")\ntuplex = tuple(listx)\nprint(listx)\nprint(tuplex)"}
{"ID": 951, "source": "MBPP:588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t\treturn max(nums) - min(nums)\n\nprint(big_diff([10, 3, 5, 6]))\nprint(big_diff([7, 2, 10, 9]))\nprint(big_diff([2, 10, 7, 2]))\nprint(big_diff([2, 10, 7, 2, 10, 7, 2, 10, 7, 2]))\nprint(big_diff([2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, 7, 2, 10, "}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t\n\n\nif __name__ == '__main__':\n\tprint(perfect_squares(1, 100))\n<file_sep>/python/leetcode/easy/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<file_sep>/python/leetcode/easy/107_binary_tree_level_order_traversal_ii.py\n\"\"\"\nGiven a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its bottom-up level order traversal as:\n[\n  [15,7],\n  [9,20],\n  [3]\n]"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t\treturn x*cos(y),x*sin(y)\n\nprint polar_rect(1,pi/2)\nprint polar_rect(1,pi)\nprint polar_rect(1,3*pi/2)\nprint polar_rect(1,2*pi)\nprint polar_rect(1,5*pi/2)\nprint polar_rect(1,3*pi)\nprint polar_rect(1,7*pi/2)\nprint polar_rect(1,4*pi)\nprint polar_rect(1,9*pi/2)\nprint polar_rect(1,6*pi)\nprint polar_rect(1,11*pi/2)\nprint polar_rect(1,8*pi)\nprint polar_rect(1,13*pi/2)\nprint polar_rect(1,10*pi)\nprint polar_rect(1,15*pi/2)\nprint polar_rect(1,12*pi)\nprint polar_rect(1,17*pi/2)\nprint polar_rect(1,14*pi)\nprint polar_rect(1,19*pi/2)\nprint polar_rect(1,16*pi)\nprint polar_rect(1,21*pi/2)\nprint polar_rect(1,18*pi)\nprint polar_rect(1,23*pi/2)\nprint polar_rect(1,20*pi)\nprint polar_rect(1,25*pi/2)\nprint polar_rect(1,22*pi)\nprint polar_rect(1,27*pi/2)\nprint polar_rect(1,24*pi)\nprint polar_rect(1,29*pi/2)\nprint polar_rect(1,26*pi)\nprint polar_rect(1,31*pi/2)\nprint polar_rect(1,28*pi)\nprint polar_rect(1,33*pi/2)\nprint polar_rect(1,30*pi)\nprint polar_rect(1,35*pi/2)\nprint polar_rect(1,32*pi)\nprint polar_rect(1,"}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList \n\n# Driver Code \nnewList = [12, 35, 9, 56, 24] \nprint(swap_List(newList)) \n\n\"\"\"\nWrite a python function to remove the kth element from a list.\n\"\"\"\ndef remove_kth_element(list, k):\n    list.pop(k)\n    return list\n\n# Driver Code\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nprint(remove_kth_element(list, k))\n\n\"\"\"\nWrite a python function to remove the kth element from a list.\n\"\"\"\ndef remove_kth_element(list, k):\n    list.pop(k)\n    return list\n\n# Driver Code\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nprint(remove_kth_element(list, k))\n\n\"\"\"\nWrite a python function to remove the kth element from a list.\n\"\"\"\ndef remove_kth_element(list, k):\n    list.pop(k)\n    return list\n\n# Driver Code\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nprint(remove_kth_element(list, k))\n\n\"\"\"\nWrite a python function to remove the kth element from a list.\n\"\"\"\ndef remove_kth_element(list, k):\n    list.pop(k)\n    return list\n\n# Driver Code\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nprint(remove_kth_element(list, k))\n\n\"\"\"\nWrite a python function to remove the kth element from a list.\n\"\"\"\ndef remove_kth_element(list, k):\n    list.pop(k)\n   "}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t\tsum = 0\n\t\tfor i in range(0, n + 1): \n\t\t\tsum += (binomialCoeff(n, i) * i) \n\t\treturn sum \n\n# Driver Code \nn = 5\nprint(sum_Of_product(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary_Search.py\n\"\"\"\nBinary Search\n\nBinary Search is a search algorithm that finds the position of a target value within a sorted array.\nBinary search compares the target value to the middle element of the array.\nIf they are not equal, the half in which the target cannot lie is eliminated and the search continues on the remaining half,\nagain taking the middle element to compare to the target value, and repeating this until the target value is found.\nIf the search ends with the remaining half being empty, the target is not in the array.\n\nTime Complexity: O(log n)\nSpace Complexity: O(1)\n\"\"\"\n\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 10\nprint(binary_search(arr, target))\n<file_sep>/Python/Algorithms/Sorting/Bubble_Sort.py\n\"\"\"\nBubble Sort\n\nBubble sort is a simple sorting algorithm that repeatedly steps through the list,\ncompares adjacent elements and swaps them if they are in the wrong order.\nThe pass through the list is repeated until the list is sorted.\nThe algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list.\n\nTime Complexity: O(n^2)\nSpace Complexity: O(1)\n\"\"\"\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr["}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\tif ip[i] == '0':\n\t\t\t\tip[i] = ''\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn '.'.join(ip)\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\tip = ip.split('.')\n\t\tfor i in range(len(ip)):\n\t\t\t"}
{"ID": 957, "source": "MBPP:594", "prompt": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t\teven_sum = 0\n\t\todd_sum = 0\n\t\tfor i in list1:\n\t\t\tif i%2 == 0:\n\t\t\t\teven_sum += i\n\t\t\telse:\n\t\t\t\todd_sum += i\n\t\treturn even_sum - odd_sum\n\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))\n<file_sep>/python_basics/list_comprehension.py\n\"\"\"\nList comprehension is an elegant way to define and create lists based on existing lists.\n\"\"\"\n\n# List comprehension\n# Syntax: [expression for item in list]\n\n# Example 1\n# Create a list of squares of numbers from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n\n# Example 2\n# Create a list of even numbers from 0 to 9\neven_numbers = [x for x in range(10) if x % 2 == 0]\nprint(even_numbers)\n\n# Example 3\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 4\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 5\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 6\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4] if x!= y]\nprint(multiples)\n\n# Example 7\n# Create a list of tuples of two multiples\nmultiples = [(x, y) for x in [1,2,3] for y in [3,1,4]"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\tcount = 0\n\t\tfor i in range(len(str1)) : \n\t\t\tif str1[i]!= str2[i] : \n\t\t\t\tcount += 1\n\t\treturn count \n\nstr1 = \"1100\"\nstr2 = \"0011\"\nprint(min_Swaps(str1,str2))\n<file_sep>/Python/Array/Array_Rotation.py\n\"\"\"\nGiven an array, rotate the array by one position in clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[n-1]\n\tfor i in range(n-1,0,-1) : \n\t\tarr[i] = arr[i-1]\n\tarr[0] = temp\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nrotate(arr,n)\nprint(arr)\n<file_sep>/Python/Array/Array_Rotation_2.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[0]\n\tfor i in range(n-1) : \n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nrotate(arr,n)\nprint(arr)\n<file_sep>/Python/Array/Array_Rotation_3.py\n\"\"\"\nGiven an array, rotate the array by one position in anti-clock-wise direction.\n\"\"\"\ndef rotate(arr,n) : \n\ttemp = arr[0]\n\tfor i in range(n-1) : \n\t\tarr[i] = arr[i+1]\n\tarr[n-1] = temp\n\ndef reverse(arr,start,end) : \n\twhile start < end : \n\t\ttemp = arr[start]\n\t\tarr[start] = arr[end]\n\t\tarr[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\ndef rotate_2(arr,n) : \n\treverse(arr,0,n-1)\n\treverse(arr,0,n"}
{"ID": 959, "source": "MBPP:596", "prompt": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t", "predict": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t\treturn len(tuple_list)\n\n\"\"\"\nWrite a function to find the maximum value in the given tuple.\n\"\"\"\ndef tuple_max(tuple_list):\n\t\treturn max(tuple_list)\n\n\"\"\"\nWrite a function to find the minimum value in the given tuple.\n\"\"\"\ndef tuple_min(tuple_list):\n\t\treturn min(tuple_list)\n\n\"\"\"\nWrite a function to find the sum of all the elements in the given tuple.\n\"\"\"\ndef tuple_sum(tuple_list):\n\t\treturn sum(tuple_list)\n\n\"\"\"\nWrite a function to find the average of all the elements in the given tuple.\n\"\"\"\ndef tuple_avg(tuple_list):\n\t\treturn sum(tuple_list)/len(tuple_list)\n\n\"\"\"\nWrite a function to find the median of all the elements in the given tuple.\n\"\"\"\ndef tuple_median(tuple_list):\n\t\treturn sorted(tuple_list)[len(tuple_list)//2]\n\n\"\"\"\nWrite a function to find the mode of all the elements in the given tuple.\n\"\"\"\ndef tuple_mode(tuple_list):\n\t\treturn max(set(tuple_list), key=tuple_list.count)\n\n\"\"\"\nWrite a function to find the variance of all the elements in the given tuple.\n\"\"\"\ndef tuple_variance(tuple_list):\n\t\treturn sum((x - tuple_avg(tuple_list))**2 for x in tuple_list) / len(tuple_list)\n\n\"\"\"\nWrite a function to find the standard deviation of all the elements in the given tuple.\n\"\"\"\ndef tuple_std_dev(tuple_list):\n\t\treturn tuple_variance(tuple_list)**0.5\n\n\"\"\"\nWrite a function to find the range of all the elements in the given tuple.\n\"\"\"\ndef tuple_range(tuple_list):\n\t\treturn tuple_max(tuple_list) - tuple_min(tuple_list)\n\n\"\"\"\nWrite a function to find the skewness of all the elements in the given tuple.\n\"\"\"\ndef tuple_skewness(tuple_list):\n\t\treturn sum((x - tuple_avg(tuple_list))**3 for x in tuple_list) / (len(tuple_list) * tuple_variance(tuple_list)**1"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t\n#\tif m == 0:\n#\t\treturn arr2[k-1]\n#\tif n == 0:\n#\t\treturn arr1[k-1]\n#\tif k == 1:\n#\t\treturn min(arr1[0], arr2[0])\n#\t\n#\ti = min(m, k//2)\n#\tj = min(n, k//2)\n#\t\n#\tif arr1[i-1] > arr2[j-1]:\n#\t\treturn find_kth(arr1, arr2[j:], m, n-j, k-j)\n#\telse:\n#\t\treturn find_kth(arr1[i:], arr2, m-i, n, k-i)\n#\t\n#\treturn find_kth(arr1, arr2, m, n, k)\n\ndef find_kth(arr1, arr2, m, n, k):\n\tif m > n:\n\t\treturn find_kth(arr2, arr1, n, m, k)\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\t\n\ti = min(m, k//2)\n\tj = min(n, k//2)\n\t\n\tif arr1[i-1] > arr2[j-1]:\n\t\treturn find_kth(arr1, arr2[j:], m, n-j, k-j)\n\telse:\n\t\treturn find_kth(arr1[i:], arr2, m-i, n, k-i)\n\t\n\treturn find_kth(arr1, arr2, m, n, k)\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\n\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 10))\n<file_sep>/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t\t\"\"\"\n\t\tThis function checks whether the given number is armstrong or not.\n\t\t\"\"\"\n\t\tsum = 0\n\t\ttemp = number\n\t\twhile temp > 0:\n\t\t\tdigit = temp % 10\n\t\t\tsum += digit ** 3\n\t\t\ttemp //= 10\n\t\tif number == sum:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(armstrong_number(153))\nprint(armstrong_number(123))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, i + 1):\n\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j <= i:\n\t\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j >= i:\n\t\t\tprint(j, end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\tif j >= i:\n\t\t\tprint(j, end = \" \")\n\t\telse:\n\t\t\tprint(\" \", end = \" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern.\n\"\"\"\n\nfor i in range(1, 6):\n\tfor j in range(1, 6):\n\t\t"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t\tsum = 0\n\t\tfor i in range(1,number+1):\n\t\t\tsum = sum + i\n\t\tprint(\"Sum of first\",number,\"natural numbers is\",sum)\n\t\tprint(\"Average of first\",number,\"natural numbers is\",sum/number)\n\nsum_average(10)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(1,i+1):\n\t\tprint(j,end=\" \")\n\tprint()\nfor i in range(1,6):\n\tfor j in range(i,i+5):\n\t\tprint(j,end=\" \")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern\n1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\"\"\"\nfor i in range(1,6):\n\tfor j in range(i,i"}
{"ID": 963, "source": "MBPP:600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t\tif n & 1 == 0 : \n\t\t\treturn True\n\t\telse : \n\t\t\treturn False\n\nn = int(input(\"Enter a number : \"))\nif is_Even(n) : \n\tprint(\"Even\")\nelse : \n\tprint(\"Odd\")\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(5,0,-1) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\nfor i in range(4,0,-1) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a python program to print the following pattern.\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*\n\"\"\"\n\nfor i in range(1,6) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\nfor i in range(4,0,-1) : \n\tfor j in range(1,i+1) : \n\t\tprint(\"*\",end=\"\")\n\tprint()\n\n# Another way to do this is to use"}
{"ID": 964, "source": "MBPP:1", "prompt": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t\n    # Create a 2D table to store solutions of subproblems \n    dp = [[0 for x in range(n)] for x in range(m)] \n  \n    # Fill the entries for 0th row \n    for i in range(n): \n        dp[0][i] = cost[0][i] \n  \n    # Fill the entries for 0th column \n    for i in range(m): \n        dp[i][0] = cost[i][0] \n  \n    # Fill rest of the entries in dp[][] \n    for i in range(1, m): \n        for j in range(1, n): \n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1]) \n  \n    # Return minimum cost for (m-1, n-1) \n    return dp[m-1][n-1] \n  \n# Driver Code \ncost = [[1, 2, 3], \n        [4, 8, 2], \n        [1, 5, 3]] \nm = len(cost) \nn = len(cost[0]) \nprint(\"Minimum cost is\", min_cost(cost, m, n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Array/15_find_missing_and_repeating.py\n\"\"\"\nGiven an unsorted array of size n. Array elements are in range from 1 to n. One number from set {1, 2, …n} is missing and one number occurs twice in array. Find these two numbers.\n\"\"\"\ndef find_two_repeating(arr, n): \n    # To store index of missing \n    # and repeating elements \n    missing = 0\n    repeating = 0\n  \n    # XOR all the array elements, \n    # where each pair will cancel each other \n    for i in range(n): \n        missing ^= i + 1\n        repeating ^= arr[i] \n  \n    # XOR the missing and repeating \n    # elements with each other \n    missing ^= repeating \n  \n    # The two elements are the two \n    # missing numbers \n    print(missing, repeating) \n  \n# Driver code \narr = [1, 3, 3] \nn = len(arr) \nfind_two_repeating(arr, n) \n\n# This code is contributed"}
{"ID": 965, "source": "MBPP:2", "prompt": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ttest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\tprint(similar_elements(test_tup1, test_tup2))\n<file_sep>/python_practice/python_practice_10.py\n\"\"\"\nWrite a function to find the missing numbers from the given tuple.\n\"\"\"\ndef missing_numbers(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn tuple(set(range(min(test_tup), max(test_tup) + 1)) - set(test_tup))\n\nif __name__ == '__main__':\n\ttest_tup = (1, 2, 3, 4, 6, 7, 8, 9, 10)\n\tprint(missing_numbers(test_tup))\n<file_sep>/python_practice/python_practice_1.py\n\"\"\"\nWrite a function to find the common elements from the given two tuple lists.\n\"\"\"\ndef common_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: tuple\n\t\t\"\"\"\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ttest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, "}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\tfor i in range(2,n):\n\t\t\tif n%i == 0:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38))\nprint(is_not_prime(39))\nprint(is_not_prime(40))\nprint(is_not_prime(41))\nprint(is_not_prime(42))\nprint(is_not_prime(43))\nprint(is_not_prime(44))\nprint(is_not_prime(45))\nprint(is_not_prime(46))\nprint(is_not_prime(47))\nprint(is_not_prime(48))\nprint(is_not_prime(49))\nprint("}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t\theapq.heapify(nums)\n\t\treturn heapq.nlargest(n,nums)\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nn = 3\nprint(heap_queue_largest(nums,n))\n<file_sep>/python/leetcode/100_same_tree.py\n\"\"\"\nGiven two binary trees, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\n\nExample 1:\n\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\nExample 2:\n\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\nExample 3:\n\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n<file_sep>/python/leetcode/101_symmetric_tree.py\n\"\"\"\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\nBut the following [1,2,2,null,3"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t\n    # If n is odd, then there is no way to fill the board \n    if (n % 2!= 0): \n        return 0\n  \n    # If n is even, then there are two ways to fill the board \n    if (n == 0): \n        return 2\n  \n    # If n is even and greater than 2, then there are three ways to fill the board \n    if (n > 2): \n        return 3\n  \n    # If n is 2, then there are three ways to fill the board \n    return 3\n\n# Driver Code \nn = 3\nprint(count_ways(n)) \n\n# This code is contributed by <NAME> \n<file_sep>/Python/Algorithms/Searching/Binary Search/binary_search.py\n\"\"\"\nBinary Search\n\nGiven a sorted array arr[] of n elements, write a function to search a given element x in arr[].\n\nA simple approach is to do linear search.The time complexity of above algorithm is O(n).\nAnother approach to perform the same task is using Binary Search.\n\nBinary Search: Search a sorted array by repeatedly dividing the search interval in half.\nBegin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.\n\n\"\"\"\n\ndef binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, l, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, r, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\n\nif result!= -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n<file_sep>/Python/Algorithms/Searching/Linear Search/linear_search.py\n\"\"\"\nLinear Search\n\n"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t\treturn bin(a^b).count('1') == 1\n\nprint(differ_At_One_Bit_Pos(1,2))\nprint(differ_At_One_Bit_Pos(1,3))\nprint(differ_At_One_Bit_Pos(1,4))\nprint(differ_At_One_Bit_Pos(1,5))\nprint(differ_At_One_Bit_Pos(1,6))\nprint(differ_At_One_Bit_Pos(1,7))\nprint(differ_At_One_Bit_Pos(1,8))\nprint(differ_At_One_Bit_Pos(1,9))\nprint(differ_At_One_Bit_Pos(1,10))\nprint(differ_At_One_Bit_Pos(1,11))\nprint(differ_At_One_Bit_Pos(1,12))\nprint(differ_At_One_Bit_Pos(1,13))\nprint(differ_At_One_Bit_Pos(1,14))\nprint(differ_At_One_Bit_Pos(1,15))\nprint(differ_At_One_Bit_Pos(1,16))\nprint(differ_At_One_Bit_Pos(1,17))\nprint(differ_At_One_Bit_Pos(1,18))\nprint(differ_At_One_Bit_Pos(1,19))\nprint(differ_At_One_Bit_Pos(1,20))\nprint(differ_At_One_Bit_Pos(1,21))\nprint(differ_At_One_Bit_Pos(1,22))\nprint(differ_At_One_Bit_Pos(1,23))\nprint(differ_At_One_Bit_Pos(1,24))\nprint(differ_At_One_Bit_Pos(1,25))\nprint(differ_At_One_Bit_Pos(1,26))\nprint(differ_At_One_Bit_Pos(1,27))\nprint(differ_At_One_Bit_Pos(1,28))\nprint(differ_At_One_Bit_Pos(1,29))"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t\treturn re.findall(r'\\w{4,}', text)\n\nprint(find_char_long(\"I am a good boy\"))\n<file_sep>/python_basics/python_basics_1.py\n\"\"\"\nWrite a Python program to get the Python version you are using.\n\"\"\"\nimport sys\nprint(sys.version)\n<file_sep>/python_basics/python_basics_10.py\n\"\"\"\nWrite a Python program to get the system time.\n\"\"\"\nimport time\nprint(time.ctime())\n<file_sep>/python_basics/python_basics_11.py\n\"\"\"\nWrite a Python program to get the name of the host on which the routine is running.\n\"\"\"\nimport socket\nprint(socket.gethostname())\n<file_sep>/python_basics/python_basics_12.py\n\"\"\"\nWrite a Python program to get the name of the user on which the routine is running.\n\"\"\"\nimport getpass\nprint(getpass.getuser())\n<file_sep>/python_basics/python_basics_13.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_14.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit and set the new value.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_15.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit and set the new value.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_16.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_17.py\n\"\"\"\nWrite a Python program to get the current value of the recursion limit.\n\"\"\"\nimport sys\nprint(sys.getrecursionlimit())\n<file_sep>/python_basics/python_basics_18.py\n"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn list(map(lambda x: x**2, nums))\n\nprint(square_nums([1,2,3,4,5]))\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_1.py\n\"\"\"\nWrite a program to print the following pattern:\n*\n**\n***\n****\n*****\n\"\"\"\n\nfor i in range(1,6):\n\tprint(\"*\"*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_2.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n22\n333\n4444\n55555\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_3.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n\"\"\"\n\nfor i in range(1,6):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_4.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n\"\"\"\n\nfor i in range(1,7):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_5.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n\"\"\"\n\nfor i in range(1,8):\n\tprint(str(i)*i)\n<file_sep>/Python/Python_Basics/Python_Basics_1/Python_Basics_1_6.py\n\"\"\"\nWrite a program to print the following pattern:\n1\n12\n123\n1234\n12345\n123456\n1234567\n123"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t\n    # Find length of given string \n    n = len(str) \n  \n    # Initialize result \n    res = 0\n  \n    # Find the point where Object is rotated to it's \n    # original position (equilibrium point). \n    for i in range(n): \n        if str[i - 1] > str[i]: \n            res = i \n            break\n  \n    # If equilibrium point is not found \n    if res == 0: \n        return res \n  \n    # To store rotated string \n    str1 = \"\" \n  \n    # Store all characters from str[res] to \n    # str[n-1]. \n    for i in range(res, n): \n        str1 += str[i] \n  \n    # Store all characters from str[0] to \n    # str[res-1]. \n    for i in range(res): \n        str1 += str[i] \n  \n    # If given string is equal to rotated string. \n    if str == str1: \n        return res \n  \n    # If given string is not equal to rotated \n    # string, then it is sure that the given \n    # string cannot be obtained by rotating. \n    return -1\n  \n# Driver code \nstr = \"GEEKSFORGEEKS\"\nprint(find_Rotations(str)) \n<file_sep>/Python/Python_Basics/Python_Basics_1.py\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Aug 26 11:20:34 2020\n\n@author: <NAME>\n\"\"\"\n\n# Python program to print Hello World!\n\nprint(\"Hello World!\")\n\n# Python program to add two numbers\n\nnum1 = 1.5\nnum2 = 6.3\n\n# Add two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n\n# Python program to check if the input number is odd or even\n\nnum = int(input(\"Enter a number: \"))\n\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n# Python program to check if the input number is prime or not\n\nnum = int(input(\"Enter a number: \"))\n"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[:n]\n\nprint small_nnum([1,2,3,4,5,6,7,8,9,10],3)\n<file_sep>/python/python_basic/python_basic_1.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[:n]\n\nprint small_nnum([1,2,3,4,5,6,7,8,9,10],3)\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[-n:]\n\nprint large_nnum([1,2,3,4,5,6,7,8,9,10],3)\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[:n]\n\nprint small_nnum([1,2,3,4,5,6,7,8,9,10],3)\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[-n:]\n\nprint large_nnum([1,2,3,4,5,6,7,8,9,10],3)\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[:n]\n\nprint small_nnum([1,2,3,4,5,6,7,8,9,10],3)\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum(list1,n):\n\t\tlist1.sort()\n\t\treturn list1[-n:]\n\nprint large_"}
