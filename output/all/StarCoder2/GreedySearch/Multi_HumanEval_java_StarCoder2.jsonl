{"ID": 0, "source": "Multi_HumanEval_java:HumanEval_java/0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t\t// TODO: implement\n\t\treturn null;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名。\n     *\n     * <p>例如，给定的类是：\n     *\n     * <pre>\n     * public class User {\n     *     private String name;\n     *     private int age;\n     *     private char gender;\n     * }\n     * </pre>\n     *\n     * <p>返回的结果应该是：\n     *\n     * <pre>\n     * [\"name\", \"age\", \"gender\"]\n     * </pre>\n     *\n     * @param clazz 给定的类\n     * @return 字段名数组\n     */\n    public static String[] getFieldNames(Class<?> clazz) {\n        // 请实现\n        return null;\n    }\n\n    /**\n     * 给定一个类，返回它的所有字段名和字段类型。\n     *\n     * <p>例如，给定的类是：\n     *\n     * <pre>\n     * public class User {\n     *     private String name;\n     *     private int age;\n     *     private char gender;\n     * }\n     * </pre>\n     *\n     * <p>返回的结果应该是：\n     *\n     * <pre>\n     * [\n     *     [\"name\", \"java.lang.String\"],\n     *     [\"age\", \"int\"],\n     *     [\"gender\", \"char\"]\n     * ]\n     * </pre>\n     *\n     * @param clazz 给定的类\n     * @return 字段名和字段类型的二维数组\n     */\n    public static List<Object[]> getFieldNamesAndTypes(Class<?> clazz) {\n        // 请实现\n        return null;\n    }\n\n    /**\n     * 给定一个类，返回它的所有字段名和字段值。\n     *\n     * <p>例如，给定的类是：\n     *\n     * <pre>\n     * public class User {\n     *     private String name;\n     *     private int age;\n     *     private char gender;\n     * }\n     * </pre>\n     *\n     * <p>返回的结果应该是：\n    "}
{"ID": 1, "source": "Multi_HumanEval_java:HumanEval_java/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tint start = 0;\n\t\tfor (int i = 0; i < parenString.length(); i++) {\n\t\t\tif (parenString.charAt(i) == '(') {\n\t\t\t\tstack.push(i);\n\t\t\t} else if (parenString.charAt(i) == ')') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\tresult.add(parenString.substring(start, i + 1));\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\t\tresult.add(parenString.substring(start, i + 1));\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestSubstringWithoutRepeatingCharacters.java\npackage com.leetcode.medium;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Given a string, find the length of the longest substring without repeating characters.\n *\n * Example 1:\n *\n * Input: \"abcabcbb\"\n * Output: 3\n * Explanation: The answer is \"abc\", with the length of 3.\n * Example 2:\n *\n * Input: \"bbbbb\"\n * Output: 1\n * Explanation: The answer is \"b\", with the length of 1.\n * Example 3:\n *\n * Input: \"pwwkew\"\n * Output: 3\n * Explanation: The answer is \"wke\", with the length of 3.\n *              Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n */\npublic class LongestSubstringWithoutRepeatingCharacters {\n    public static void main(String[] args) {\n        System.out.println(lengthOfLongestSubstring(\"abcabcbb\"));\n        System.out.println(lengthOfLongestSubstring(\"bbbbb\"));\n        System.out.println(lengthOfLongestSubstring(\"pwwkew\"));\n    }\n\n    public static int lengthOfLongestSubstring(String s) {\n       "}
{"ID": 2, "source": "Multi_HumanEval_java:HumanEval_java/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t\t// Write your code here\n        if(number == null) return null;\n        if(number == 0) return 0.0;\n        if(number < 0) return -1 * truncateNumber(-1 * number);\n        String str = number.toString();\n        int index = str.indexOf(\".\");\n        if(index == -1) return 0.0;\n        return Double.parseDouble(str.substring(index));\n    }\n}\n<file_sep>/src/main/java/com/practice/leetcode/medium/LongestSubstringWithoutRepeatingCharacters.java\npackage com.practice.leetcode.medium;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class LongestSubstringWithoutRepeatingCharacters {\n    /**\n     * Given a string, find the length of the longest substring without repeating characters.\n     *\n     * Examples:\n     *\n     * Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n     *\n     * Given \"bbbbb\", the answer is \"b\", with the length of 1.\n     *\n     * Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n     *\n     * @param s\n     * @return\n     */\n    public int lengthOfLongestSubstring(String s) {\n        if(s == null || s.length() == 0) return 0;\n        int max = 0;\n        Map<Character, Integer> map = new HashMap<>();\n        int start = 0;\n        for(int i = 0; i < s.length(); i++){\n            char c = s.charAt(i);\n            if(map.containsKey(c)){\n                start = Math.max(start, map.get(c) + 1);\n            }\n            map.put(c, i);\n            max = Math.max(max, i - start + 1);\n        }\n        return max;\n    }\n}\n<file_sep>/src/main/java/com/practice/leetcode/medium/LongestPalindromicSubstring.java\npackage com.practice.leetcode.medium;\n\n/**\n * Created by <NAME> on 1"}
{"ID": 3, "source": "Multi_HumanEval_java:HumanEval_java/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t\t// your code here\n        int balance = 0;\n        for (Object o : operations) {\n            if (o instanceof Integer) {\n                balance += (Integer) o;\n            } else if (o instanceof Double) {\n                balance += (Double) o;\n            }\n        }\n        return balance < 0;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n        System.out.println(add(1, 2, 3, 4, 5));\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的奇数。\n     *\n     * <p>例如，给定的整数数组为{9, 3, 1, 10}，返回10。\n     *\n     * <p>如果数组中不存在奇数，请返回-1。\n     *\n     * @param nums 给定的整数数组\n     * @return 数组中最大的奇数\n     */\n    public static int maxOddNumberInArray(int[] nums) {\n        int max = -1;\n        for (int num : nums) {\n            if (num % 2 == 1 && num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的奇数。\n     *\n     * <p>例如，给定的整数数组为{9, 3, 1, 10}，返回10。\n     *\n     * <p>如果数组中不存在奇数，请返回-1。\n     *\n     * @param nums 给定的整数数组\n     * @return 数组中最大的奇数\n     */\n    public static int maxOddNumberInArray2(int[] nums) {\n        int max = -1;\n        for (int num : nums) {\n            if (num % 2 == 1) {\n                max = Math.max(max, num);\n            }\n        }\n        return max;\n    }"}
{"ID": 4, "source": "Multi_HumanEval_java:HumanEval_java/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t\tDouble sum = 0.0;\n\t\tDouble mean = 0.0;\n\t\tDouble mad = 0.0;\n\t\tDouble temp = 0.0;\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tsum += numbers.get(i);\n\t\t}\n\t\tmean = sum / numbers.size();\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\ttemp = numbers.get(i) - mean;\n\t\t\tmad += Math.abs(temp);\n\t\t}\n\t\tmad = mad / numbers.size();\n\t\treturn mad;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/calculation/Main.java\npackage com.github.hcsp.calculation;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(calculate(1, 2, 3));\n        System.out.println(calculate(2, 3, 4));\n        System.out.println(calculate(3, 4, 5));\n    }\n\n    /**\n     * 计算一个三角形的面积。\n     *\n     * <p>三角形的面积计算公式为：\n     *\n     * <p>area = sqrt(p * (p - a) * (p - b) * (p - c))\n     *\n     * <p>其中p=(a+b+c)/2\n     *\n     * @param a 三角形的边长\n     * @param b 三角形的边长\n     * @param c 三角形的边长\n     * @return 三角形的面积\n     */\n    public static double calculate(int a, int b, int c) {\n        double p = (a + b + c) / 2;\n        double area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return area;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(19"}
{"ID": 5, "source": "Multi_HumanEval_java:HumanEval_java/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tresult.add(numbers.get(i));\n\t\t\tif (i < numbers.size() - 1) {\n\t\t\t\tresult.add(delimeter);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n        System.out.println(add(1, 2, 3, 4, 5));\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的奇数和最小的偶数的乘积。\n     *\n     * <p>例如，给定[1, 5, 4, 3]，返回1*3=3；给定[1, 2, 3, 4]，返回5*1=5。\n     *\n     * <p>注意，空数组或数组中没有奇数或偶数时，返回-1。\n     *\n     * @param numbers 给定的整数数组\n     * @return 最大的奇数和最小的偶数的乘积\n     */\n    public static int maxProduct(int[] numbers) {\n        int maxOdd = Integer.MIN_VALUE;\n        int minEven = Integer.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i++) {\n            if (numbers[i] % 2 == 0) {\n                minEven = Math.min(minEven, numbers[i]);\n            } else {\n                maxOdd = Math.max(maxOdd, numbers[i]);\n            }\n        }\n        return maxOdd * minEven;\n    }\n\n    /**\n     * 给定一个整数数组，返回其中最大的奇数和最小的偶数的乘积。\n     *\n     * <p>例如，给定[1, 5, 4,"}
{"ID": 6, "source": "Multi_HumanEval_java:HumanEval_java/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tString[] groups = parenString.split(\" \");\n\t\tfor (String group : groups) {\n\t\t\tint max = 0;\n\t\t\tint count = 0;\n\t\t\tfor (int i = 0; i < group.length(); i++) {\n\t\t\t\tif (group.charAt(i) == '(') {\n\t\t\t\t\tcount++;\n\t\t\t\t} else if (group.charAt(i) == ')') {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tif (count > max) {\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(max);\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestSubstringWithoutRepeatingCharacters.java\npackage com.leetcode.medium;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Given a string, find the length of the longest substring without repeating characters.\n *\n * Example 1:\n *\n * Input: \"abcabcbb\"\n * Output: 3\n * Explanation: The answer is \"abc\", with the length of 3.\n * Example 2:\n *\n * Input: \"bbbbb\"\n * Output: 1\n * Explanation: The answer is \"b\", with the length of 1.\n * Example 3:\n *\n * Input: \"pwwkew\"\n * Output: 3\n * Explanation: The answer is \"wke\", with the length of 3.\n *              Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n */\npublic class LongestSubstringWithoutRepeatingCharacters {\n    public static void main(String[] args) {\n        System.out.println(lengthOfLongestSubstring(\"abcabcbb\"));\n        System.out.println(lengthOfLongestSubstring(\"bbbbb\"));\n        System.out.println(lengthOfLongestSubstring(\"pwwkew\"));\n    }\n\n    public static int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int ans = 0;\n        Map<Character, Integer> map = new HashMap<>();\n        for (int j = 0, i = 0; j < n; j++)"}
{"ID": 7, "source": "Multi_HumanEval_java:HumanEval_java/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().contains(substring)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名\n     *\n     * <p>例如，对于class Foo { int a, int b; }，返回[\"a\", \"b\"]\n     *\n     * @param clazz 给定的类\n     * @return 字段名数组\n     */\n    public static String[] getFieldNames(Class<?> clazz) {\n        Field[] fields = clazz.getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            fieldNames[i] = fields[i].getName();\n        }\n        return fieldNames;\n    }\n\n    /**\n     * 给定一个类，返回它的所有父类名\n     *\n     * <p>例如，对于class Foo extends Bar.Baz，返回[\"Bar.Baz\", \"java.lang.Object\"]\n     *\n     * @param clazz 给定的类\n     * @return 父类名数组\n     */\n    public static String[] getParentClassNames(Class<?> clazz) {\n        List<String> result = Arrays.asList(clazz.getSuperclass().getName());\n        while (clazz.getSuperclass()!= null) {\n            clazz = clazz.getSuperclass();\n            result.add(clazz.getName());\n        }\n        return result.toArray(new String[0]);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/io/FileAccessor.java\npackage com.github.hcsp.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\n"}
{"ID": 8, "source": "Multi_HumanEval_java:HumanEval_java/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t\tint sum = 0;\n\t\tint product = 1;\n\t\tfor (Object number : numbers) {\n\t\t\tif (number instanceof Integer) {\n\t\t\t\tsum += (Integer) number;\n\t\t\t\tproduct *= (Integer) number;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.asList(sum, product);\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/SumOfDigits.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SumOfDigits {\n    /**\n     * Write a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n     * For example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.\n     * [10, 343445353, 3453445, 3453545353453] should return 3453455.\n     */\n    public static int sumTwoSmallestNumbers(int[] numbers) {\n        List<Integer> list = Arrays.asList(numbers);\n        list.sort(Integer::compareTo);\n        return list.get(0) + list.get(1);\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/SumOfOddNumbers.java\npackage com.codewars.kyu6;\n\npublic class SumOfOddNumbers {\n    /**\n     * Given the triangle of consecutive odd numbers:\n     *              1\n     *           3     5\n     *        7     9    11\n     *    13    15    17    19\n     * 21    23    25    27    29\n     *...\n     * Calculate the row sums of this triangle from the row index (starting at index 1) e.g.:\n     * rowSumOddNumbers(1); // 1\n     * rowSumOddNumbers(2); // 3 + 5 = 8\n     */\n    public static int rowSumOddNumbers(int n) {\n        return (n * n) * n + (n * n"}
{"ID": 9, "source": "Multi_HumanEval_java:HumanEval_java/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (numbers.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tObject max = numbers.get(0);\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tif (numbers.get(i).equals(max)) {\n\t\t\t\tresult.add(max);\n\t\t\t} else if (numbers.get(i).compareTo(max) > 0) {\n\t\t\t\tmax = numbers.get(i);\n\t\t\t\tresult.add(max);\n\t\t\t} else {\n\t\t\t\tresult.add(max);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名。\n     *\n     * <p>例如，返回值应该是：[\"name\", \"age\"]\n     *\n     * @param clazz 给定的类\n     * @return 字段名列表\n     */\n    public static List<String> getFieldNames(Class<?> clazz) {\n        Field[] fields = clazz.getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            fieldNames[i] = fields[i].getName();\n        }\n        return Arrays.asList(fieldNames);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class MyClassLoader extends ClassLoader {\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        try {\n            File file = new File(name + \".class\");\n            InputStream is = new FileInputStream(file);\n            byte[] bytes = new byte[(int) file.length()];\n            is.read(bytes);\n            return defineClass(name, bytes, 0, bytes.length);"}
{"ID": 10, "source": "Multi_HumanEval_java:HumanEval_java/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t\tString result = \"\";\n\t\tint len = string.length();\n\t\tint i = 0;\n\t\tint j = len - 1;\n\t\twhile (i < j) {\n\t\t\tif (string.charAt(i) == string.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (i == j) {\n\t\t\tresult = string + string.substring(0, i);\n\t\t} else {\n\t\t\tresult = string + string.substring(0, i).reverse();\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2"}
{"ID": 11, "source": "Multi_HumanEval_java:HumanEval_java/11", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < a.length(); i++) {\n\t\t\tif (a.charAt(i) == b.charAt(i)) {\n\t\t\t\tresult += \"0\";\n\t\t\t} else {\n\t\t\t\tresult += \"1\";\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b的和。\n     *\n     * <p>例如，给定a = 1和b = 2，返回3。\n     *\n     * @param a 数字一\n     * @param b 数字二\n     * @return a和b的和\n     */\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2022));\n        System.out.println(isLeapYear(2023));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2027));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2029));\n        System.out."}
{"ID": 12, "source": "Multi_HumanEval_java:HumanEval_java/12", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t\tif (strings.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString longest = (String) strings.get(0);\n\t\tfor (int i = 1; i < strings.size(); i++) {\n\t\t\tString current = (String) strings.get(i);\n\t\t\tif (current.length() > longest.length()) {\n\t\t\t\tlongest = current;\n\t\t\t}\n\t\t}\n\t\treturn longest;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个由若干个空格分隔的字符串，返回一个二维数组。 例如，给定的字符串是\"1 2 3\"，那么返回的二维数组是\n     *\n     * [[1], [2], [3]]\n     *\n     * @param str 给定的字符串\n     * @return 对应的二维数组\n     */\n    public static int[][] convert(String str) {\n        String[] split = str.split(\" \");\n        int[][] result = new int[split.length][1];\n        for (int i = 0; i < split.length; i++) {\n            result[i][0] = Integer.parseInt(split[i]);\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个二维数组，返回一个由每一行中的所有元素拼接起来组成的字符串数组。 例如，给定的二维数组是\n     *\n     * [[1, 2], [3, 4]]\n     *\n     * 返回的字符串数组是[\"12\", \"34\"]\n     *\n     * @param array 给定的二维数组\n     * @return 由每一行中的所有元素拼接起来组成的字符串数组\n     */\n    public static String[] convert(int[][] array) {\n        String[] result = new String[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = Arrays.toString(array[i]);\n        }\n        return result;\n    }\n\n    /**\n     * 给定一个二维数组，返回"}
{"ID": 13, "source": "Multi_HumanEval_java:HumanEval_java/13", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t\tint gcd = 0;\n\t\tint min = Math.min(a, b);\n\t\tfor (int i = 1; i <= min; i++) {\n\t\t\tif (a % i == 0 && b % i == 0) {\n\t\t\t\tgcd = i;\n\t\t\t}\n\t\t}\n\t\treturn gcd;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println"}
{"ID": 14, "source": "Multi_HumanEval_java:HumanEval_java/14", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t\tList<Object> list = new ArrayList<Object>();\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tlist.add(string.substring(0, i + 1));\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClassLoader extends URLClassLoader {\n    public MyClassLoader(URL[] urls) {\n        super(urls);\n    }\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        File file = new File(\"src/main/resources/com/github/hcsp/reflection/MyClassLoader.java\");\n        URL url = file.toURI().toURL();\n        MyClassLoader myClassLoader = new MyClassLoader(new URL[]{url});\n        Class<?> clazz = myClassLoader.loadClass(\"com.github.hcsp.reflection.MyClassLoader\");\n        Method method = clazz.getMethod(\"main\", String[].class);\n        method.invoke(null, (Object) new String[]{});\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyInvocationHandler.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\n\npublic class MyInvocationHandler implements InvocationHandler {\n    private Object target;\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"before\");\n        Object result = method.invoke(target, args);\n        System.out.println(\"after\");\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyProxy"}
{"ID": 15, "source": "Multi_HumanEval_java:HumanEval_java/15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t\tString s = \"\";\n\t\tfor(int i = 0; i <= n; i++) {\n\t\t\ts += i + \" \";\n\t\t}\n\t\treturn s.substring(0, s.length() - 1);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n        System.out.println(add(1, 2, 3, 4, 5));\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的数和最小的数，如果数组为空，那么返回null\n     *\n     * <p>例如，给定数组[1, 2, 3]，返回最大的数3，最小的数1\n     *\n     * <p>给定数组[-1, -2, -3]，返回最大的数-1，最小的数-3\n     *\n     * @param nums 给定的数组\n     * @return 最大最小数的数组\n     */\n    public static int[] maxAndMin(int[] nums) {\n        if (nums.length == 0) {\n            return null;\n        }\n        int max = nums[0];\n        int min = nums[0];\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n        return new int[]{max, min};\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的数和最小的数，如果数组为空，那么返回null\n     *\n     * <p>例如，给定数组[1, 2, 3]，返回最大的数3，最小的数1\n     *\n     * <p>给定数组[-1, -2, -3]，返回最大的数-1，最小的数-3\n     *\n     * @param"}
{"ID": 16, "source": "Multi_HumanEval_java:HumanEval_java/16", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t\t// TODO: Write your code here\n        int count = 0;\n        HashSet<Character> set = new HashSet<>();\n        for(int i = 0; i < string.length(); i++){\n            if(!set.contains(string.charAt(i))){\n                set.add(string.charAt(i));\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string s, return the longest palindromic substring in s.\n     *\n     * Example 1:\n     * Input: s = \"babad\"\n     * Output: \"bab\"\n     * Note: \"aba\" is also a valid answer.\n     *\n     * Example 2:\n     * Input: s = \"cbbd\"\n     * Output: \"bb\"\n     *\n     * Example 3:\n     * Input: s = \"a\"\n     * Output: \"a\"\n     *\n     * Example 4:\n     * Input: s = \"ac\"\n     * Output: \"a\"\n     *\n     * Constraints:\n     * 1 <= s.length <= 1000\n     * s consist of only digits and English letters (lower-case and/or upper-case),\n     */\n    public static String longestPalindrome(String s) {\n        if(s == null || s.length() == 0){\n            return \"\";\n        }\n        int start = 0;\n        int end = 0;\n        for(int i = 0; i < s.length(); i++){\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if(len > end - start){\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right){\n        int L = left;\n        int R = right;\n        while(L >= 0 && R < s.length() && s.charAt("}
{"ID": 17, "source": "Multi_HumanEval_java:HumanEval_java/17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tString[] notes = musicString.split(\" \");\n\t\tfor (String note : notes) {\n\t\t\tif (note.equals(\"o\")) {\n\t\t\t\tresult.add(4);\n\t\t\t} else if (note.equals(\"o|\")) {\n\t\t\t\tresult.add(2);\n\t\t\t} else if (note.equals(\".|\")) {\n\t\t\t\tresult.add(1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int result = seq[0];\n        int count = 1;\n        for (int i = 1; i < seq.length; i++) {\n            if (seq[i] == seq[i - 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    result = seq[i];\n                }\n                count = 1;\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] seq) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < seq.length; i++) {\n            if (map.containsKey(seq[i])) {\n                map.put(seq[i], map.get(seq[i]) + 1);\n            } else {\n                map.put(seq"}
{"ID": 18, "source": "Multi_HumanEval_java:HumanEval_java/18", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t\tint count = 0;\n\t\tint index = 0;\n\t\twhile (index < string.length()) {\n\t\t\tindex = string.indexOf(substring, index);\n\t\t\tif (index == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tindex += substring.length();\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 4));\n        System.out.println(add(5, 6));\n    }\n\n    // 请在这里编写一个add方法，满足上述要求\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLe"}
{"ID": 19, "source": "Multi_HumanEval_java:HumanEval_java/19", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t\tString[] num = numbers.split(\" \");\n\t\tArrays.sort(num);\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < num.length; i++){\n\t\t\tresult += num[i] + \" \";\n\t\t}\n\t\treturn result.trim();\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * >>> find_it([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5])\n     * 5\n     *\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for(int i = 0; i < seq.length - 1; i++){\n            if(seq[i] == seq[i + 1]){\n                count++;\n            }else{\n                if(count % 2!= 0){\n                    return seq[i];\n                }\n                count = 1;\n            }\n        }\n        return seq[seq.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * >>> find_it([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5])\n     * 5\n     *\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for(int i = 0; i < seq.length - 1; i++){\n            if("}
{"ID": 20, "source": "Multi_HumanEval_java:HumanEval_java/20", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t\t// TODO: implement\n\t\treturn null;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2041));\n        System.out.println(isLeapYear(2044));\n        System.out.println(isLeapYear(2045));\n       "}
{"ID": 21, "source": "Multi_HumanEval_java:HumanEval_java/21", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t\t// TODO: implement this method\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for(int i = 0; i < numbers.size(); i++){\n            if(numbers.get(i) < min){\n                min = numbers.get(i);\n            }\n            if(numbers.get(i) > max){\n                max = numbers.get(i);\n            }\n        }\n        for(int i = 0; i < numbers.size(); i++){\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/user\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/all\")\n    public List<User> getAllUsers() {\n        return userService.getAllUsers();\n    }\n\n    @GetMapping(\"/{id}\")\n    public User getUserById(@PathVariable Long id) {\n        return userService.getUserById(id);\n    }\n\n    @PostMapping(\"/add\")\n    public User addUser(@RequestBody User user) {\n        return userService.addUser(user);\n    }\n\n    @PutMapping(\"/update\")\n    public User updateUser(@RequestBody User user) {\n        return userService.updateUser(user);\n    }\n\n    @DeleteMapping(\"/delete/{id}\")\n    public void deleteUser(@PathVariable Long id) {\n        userService.deleteUser(id);\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/UserService.java\npackage com.example.demo.service;\n\nimport com.example.demo.model.User;\nimport com.example.demo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    public List<"}
{"ID": 22, "source": "Multi_HumanEval_java:HumanEval_java/22", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object value : values) {\n\t\t\tif (value instanceof Integer) {\n\t\t\t\tresult.add(value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名\n     *\n     * @param clazz 给定的类\n     * @return 字段名列表\n     */\n    public static List<String> getFieldNames(Class<?> clazz) {\n        Field[] fields = clazz.getDeclaredFields();\n        return Arrays.asList(fields).stream().map(Field::getName).toList();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/io/FileSearch.java\npackage com.github.hcsp.io;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FileSearch {\n    // 找到第一个包含text的行的行号，行号从1开始计算。若没找到，则返回-1。\n    // 如果指定的文件不存在或者无法被读取，抛出一个FileNotFoundException。\n    // 请不要让这个方法抛出IOException，要么处理要么声明抛出FileNotFoundException。\n    // Duplicate code! 请重复使用代码，不要直接拷贝。\n    public static int search(File projectDir, String fileName, String text) throws FileNotFoundException {\n        List<String> lines = new ArrayList<>();\n        try {\n            lines = FileSearch.readLines(new File(projectDir, fileName));\n        } catch (IOException e) {\n            throw new FileNotFoundException();\n        }\n        for (int i = 0; i < lines.size(); i++) {\n            if (lines.get(i).contains(text)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }\n\n    public static List<String> readLines(File projectDir) throws IOException {\n        List<String> lines = new ArrayList<>();\n        try ("}
{"ID": 23, "source": "Multi_HumanEval_java:HumanEval_java/23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t\treturn string.length();\n    }\n}\n<file_sep>/src/main/java/com/github/jlangch/venice/impl/types/VList.java\n/*   __    __         _\n *   \\ \\  / /__ _ __ (_) ___ ___\n *    \\ \\/ / _ \\ '_ \\| |/ __/ _ \\\n *     \\  /  __/ | | | | (_|  __/\n *      \\/ \\___|_| |_|_|\\___\\___|\n *\n *\n * Copyright 2017-2023 Venice\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.github.jlangch.venice.impl.types;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder;\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder.VListBuilderItem;\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder.VListBuilderItem.VListBuilderItemBuilder;\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder.VListBuilderItem.VListBuilderItemBuilder.VListBuilderItemBuilderItem;\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder.VListBuilderItem.VListBuilderItemBuilder.VListBuilderItemBuilderItem.VListBuilderItemBuilderItemBuilder;\nimport com.github.jlangch.venice.impl.types.VList.VListBuilder."}
{"ID": 24, "source": "Multi_HumanEval_java:HumanEval_java/24", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t\tint i = 1;\n\t\twhile (i <= n) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2"}
{"ID": 25, "source": "Multi_HumanEval_java:HumanEval_java/25", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tint i = 2;\n\t\twhile(n > 1){\n\t\t\tif(n % i == 0){\n\t\t\t\tlist.add(i);\n\t\t\t\tn = n / i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * >>> findOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5])\n     * 5\n     * >>> findOdd([1,1,2,-2,5,2,4,4,-1,-2,5])\n     * -1\n     * >>> findOdd([20,1,1,2,2,3,3,5,5,4,20,4,5])\n     * 5\n     * >>> findOdd([10])\n     * 10\n     * >>> findOdd([1,1,1,1,1,1,10,1,1,1,1])\n     * 10\n     * >>> findOdd([5,4,3,2,1,5,4,3,2,10,10])\n     * 1\n     *\n     */\n    public static int findOdd(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for(int i = 0; i < a.length - 1; i++){\n            if(a[i] == a[i + 1]){\n                count++;\n            }\n            else{\n                if(count % 2!= 0){\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt."}
{"ID": 26, "source": "Multi_HumanEval_java:HumanEval_java/26", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t\t// TODO: Implement this method.\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor(int i = 0; i < numbers.size(); i++){\n\t\t\tif(!result.contains(numbers.get(i))){\n\t\t\t\tresult.add(numbers.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/UserServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.UserDao;\nimport com.example.demo.entity.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public List<User> findAll() {\n        return userDao.findAll();\n    }\n\n    @Override\n    public User findById(Long id) {\n        return userDao.findById(id);\n    }\n\n    @Override\n    public User save(User user) {\n        return userDao.save(user);\n    }\n\n    @Override\n    public void remove(Long id) {\n        userDao.remove(id);\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/ProductServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.ProductDao;\nimport com.example.demo.entity.Product;\nimport com.example.demo.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class ProductServiceImpl implements ProductService {\n\n    @Autowired\n    private ProductDao productDao;\n\n    @Override\n    public List<Product> findAll() {\n        return productDao.findAll();\n    }\n\n    @Override\n    public Product findById(Long id) {\n        return productDao.findById(id);\n    }\n\n    @Override\n    public Product save(Product product) {\n        return productDao.save(product);\n    }\n\n    @Override\n    public void remove(Long id) {\n       "}
{"ID": 27, "source": "Multi_HumanEval_java:HumanEval_java/27", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tif (Character.isUpperCase(string.charAt(i))) {\n\t\t\t\tresult += Character.toLowerCase(string.charAt(i));\n\t\t\t} else {\n\t\t\t\tresult += Character.toUpperCase(string.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    // 给出两个数字a和b，返回a和b的值之和\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(20"}
{"ID": 28, "source": "Multi_HumanEval_java:HumanEval_java/28", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t\tString result = \"\";\n\t\tfor (Object s : strings) {\n\t\t\tresult += s.toString();\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n    }\n\n    /**\n     * 给定一个整数a，一个整数b，一个整数c，返回a+b+c的和\n     *\n     * @param a 整数a\n     * @param b 整数b\n     * @param c 整数c\n     * @return a+b+c的和\n     */\n    public static int add(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main2.java\npackage com.github.hcsp.datatype;\n\npublic class Main2 {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n    }\n\n    /**\n     * 给定一个整数a，一个整数b，一个整数c，返回a+b+c的和\n     *\n     * @param a 整数a\n     * @param b 整数b\n     * @param c 整数c\n     * @return a+b+c的和\n     */\n    public static int add(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    /**\n     * 给定一个整数a，一个整数b，一个整数c，返回a+b+c的和\n     *\n     * @param a 整数a\n     * @param b 整数b\n     * @param c 整数c\n     * @return a+b+c的和\n     */\n    public static int add(int a, int b, int c, int d) {"}
{"ID": 29, "source": "Multi_HumanEval_java:HumanEval_java/29", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().startsWith(prefix)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名。\n     *\n     * <p>例如，给定的{@link FieldName}类，返回[\"name\",\"age\",\"gender\"]。\n     *\n     * <p>注意，返回的顺序并不重要。\n     */\n    public static List<String> getFieldNames(Class<?> cl) {\n        return Arrays.asList(cl.getDeclaredFields()).stream().map(Field::getName).toList();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/User.java\npackage com.github.hcsp.reflection;\n\npublic class User {\n    public String name;\n    public int age;\n    public String gender;\n\n    public User(String name, int age, String gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    }\n\n    public User() {\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Main.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Reflection.getFieldNames(User.class));\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/UserBuilder.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class UserBuilder {\n    /**\n     * 根据一个类的字段，生成一个构造函数，并返回。\n     *\n     * <p>例如，"}
{"ID": 30, "source": "Multi_HumanEval_java:HumanEval_java/30", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object o : l) {\n\t\t\tif (o instanceof Integer) {\n\t\t\t\tif (((Integer) o) > 0) {\n\t\t\t\t\tresult.add(o);\n\t\t\t\t}\n\t\t\t} else if (o instanceof Double) {\n\t\t\t\tif (((Double) o) > 0) {\n\t\t\t\t\tresult.add(o);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名。\n     *\n     * <p>例如，返回值应该是：[\"name\", \"age\"]\n     *\n     * @param clazz 给定的类\n     * @return 字段名数组\n     */\n    public static String[] getFieldNames(Class<?> clazz) {\n        Field[] fields = clazz.getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            fieldNames[i] = fields[i].getName();\n        }\n        return fieldNames;\n    }\n\n    /**\n     * 给定一个类，返回它的所有父类名。\n     *\n     * <p>例如，返回值应该是：[\"java.lang.Object\", \"java.util.Arrays\", \"java.util.List\"]\n     *\n     * @param clazz 给定的类\n     * @return 父类名数组\n     */\n    public static String[] getParentClassNames(Class<?> clazz) {\n        List<String> result = Arrays.asList(clazz.getSuperclass().getName());\n        while (clazz.getSuperclass()!= null) {\n            clazz = clazz.getSuperclass();\n            result.add(clazz.getName());\n        }\n        return result.toArray(new String[0]);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java."}
{"ID": 31, "source": "Multi_HumanEval_java:HumanEval_java/31", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2010));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2014));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2030));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2034));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2"}
{"ID": 32, "source": "Multi_HumanEval_java:HumanEval_java/33", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t\tList<Integer> l2 = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 3 == 0) {\n\t\t\t\tl2.add(i, l.get(i));\n\t\t\t} else {\n\t\t\t\tl2.add(i, l.get(i));\n\t\t\t\tCollections.sort(l2);\n\t\t\t}\n\t\t}\n\t\treturn l2;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear("}
{"ID": 33, "source": "Multi_HumanEval_java:HumanEval_java/34", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t\t// TODO: implement this method\n\t\tList<Integer> uniqueList = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < l.size(); i++){\n\t\t\tif(!uniqueList.contains(l.get(i))){\n\t\t\t\tuniqueList.add(l.get(i));\n\t\t\t}\n\t\t}\n\t\tCollections.sort(uniqueList);\n\t\treturn uniqueList;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/UserServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.UserDao;\nimport com.example.demo.entity.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public List<User> findAll() {\n        return userDao.findAll();\n    }\n\n    @Override\n    public User findById(Integer id) {\n        return userDao.findById(id);\n    }\n\n    @Override\n    public void save(User user) {\n        userDao.save(user);\n    }\n\n    @Override\n    public void deleteById(Integer id) {\n        userDao.deleteById(id);\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/UserServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.UserDao;\nimport com.example.demo.entity.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public List<User> findAll() {\n        return userDao.findAll();\n    }\n\n    @Override\n    public User findById(Integer id) {\n        return userDao.findById(id);\n    }\n\n    @Override\n    public void save(User user) {\n        userDao.save(user);\n    }\n\n    @Override"}
{"ID": 34, "source": "Multi_HumanEval_java:HumanEval_java/35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t\tint max = l.get(0);\n\t\tfor(int i = 1; i < l.size(); i++) {\n\t\t\tif(l.get(i) > max) {\n\t\t\t\tmax = l.get(i);\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(204"}
{"ID": 35, "source": "Multi_HumanEval_java:HumanEval_java/36", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t\tif (String.valueOf(i).contains(\"7\")) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039"}
{"ID": 36, "source": "Multi_HumanEval_java:HumanEval_java/37", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t\tList<Integer> l2 = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tl2.add(l.get(i));\n\t\t\t} else {\n\t\t\t\tList<Integer> l3 = new ArrayList<Integer>();\n\t\t\t\tfor (int j = 0; j < l.size(); j++) {\n\t\t\t\t\tif (j % 2 == 0) {\n\t\t\t\t\t\tl3.add(l.get(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(l3);\n\t\t\t\tl2.add(l3.get(i));\n\t\t\t}\n\t\t}\n\t\treturn l2;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n       "}
{"ID": 37, "source": "Multi_HumanEval_java:HumanEval_java/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tint c = 0;\n\t\tint count = 0;\n\t\twhile(count < n){\n\t\t\tc = a + b;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tif(isPrime(c)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn c;\n    }\n\n    public static boolean isPrime(int n){\n\t\tif(n == 1){\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(n % i == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/python/00001_05000/04001_04500/04401_04450/04428_04430/04429_04430/04429_04430.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport re\nimport math\nimport collections\nimport bisect\nimport itertools\nimport fractions\n\nclass Solution:\n    def solve(self, n):\n        return n * (n + 1) // 2\n\ndef main():\n    solution = Solution()\n    print(solution.solve(10))\n\nif __name__ == '__main__':\n    main()\n<file_sep>/python/00001_05000/04001_04500/04401_04450/04428_04430/04429_04430/04429_04430.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport re\nimport math\nimport collections\nimport bisect\nimport itertools\nimport fractions\n\nclass Solution:\n    def solve(self, n):\n        return n * (n + 1) // 2\n\ndef main():\n    solution = Solution()\n    print(solution.solve(10))\n\nif __name__ == '__main__':\n    main()\n<file_sep>/python/00"}
{"ID": 38, "source": "Multi_HumanEval_java:HumanEval_java/40", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t\t// TODO: implement me\n\t\treturn null;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2041));\n        System.out.println(isLeapYear(2044));\n        System.out.println(isLeapYear(2045));"}
{"ID": 39, "source": "Multi_HumanEval_java:HumanEval_java/41", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t\t// TODO: Write your code here\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for(int i = 0; i < n; i++){\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(left[i] == right[j]){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class LongestPalindromicSubstring {\n    public static void main(String[] args) {\n        System.out.println(longestPalindrome(\"babad\"));\n    }\n\n    public static String longestPalindrome(String s) {\n        if(s == null || s.length() == 0){\n            return \"\";\n        }\n        int start = 0;\n        int end = 0;\n        for(int i = 0; i < s.length(); i++){\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if(len > end - start){\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right){\n        int L = left;\n        int R = right;\n        while(L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)){\n            L--;\n            R++;\n        }\n        return R - L - 1;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestSubstringWithoutRepeatingCharacters.java\npackage com.leetcode.medium;\n\nimport java.util.HashMap;\nimport java"}
{"ID": 40, "source": "Multi_HumanEval_java:HumanEval_java/42", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t\tList<Object> newList = new ArrayList<Object>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tnewList.add(l.get(i));\n\t\t}\n\t\tfor (int i = 0; i < newList.size(); i++) {\n\t\t\tnewList.set(i, (Integer) newList.get(i) + 1);\n\t\t}\n\t\treturn newList;\n    }\n}\n<file_sep>/src/main/java/com/codegym/task/task08/task0818/Solution.java\npackage com.codegym.task.task08.task0818;\n\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/* \nMap of cities\n\n*/\n\npublic class Solution {\n    public static HashMap<String, String> createMap() {\n        HashMap<String, String> map = new HashMap<String, String>();\n        map.put(\"Kiev\", \"Ukraine\");\n        map.put(\"London\", \"England\");\n        map.put(\"Paris\", \"France\");\n        map.put(\"Berlin\", \"Germany\");\n        map.put(\"Madrid\", \"Spain\");\n        map.put(\"Rome\", \"Italy\");\n        map.put(\"Moscow\", \"Russia\");\n        map.put(\"Warsaw\", \"Poland\");\n        map.put(\"Bucharest\", \"Romania\");\n        map.put(\"Budapest\", \"Hungary\");\n        return map;\n    }\n\n    public static void removeItemFromMap(HashMap<String, String> map) {\n        Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<String, String> pair = iterator.next();\n            if (pair.getValue().equals(\"Italy\")) {\n                iterator.remove();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        HashMap<String, String> map = createMap();\n        removeItemFromMap(map);\n        System.out.println(map);\n    }\n}\n<file_sep>/src/main/java/com/codegym/task/task08/task0817/"}
{"ID": 41, "source": "Multi_HumanEval_java:HumanEval_java/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t\t// TODO: implement this method\n        if(l.size() == 0) return false;\n        if(l.size() == 1) return false;\n        if(l.size() == 2) return false;\n        if(l.size() == 3) return false;\n        if(l.size() == 4) return false;\n        if(l.size() == 5) return false;\n        if(l.size() == 6) return false;\n        if(l.size() == 7) return false;\n        if(l.size() == 8) return false;\n        if(l.size() == 9) return false;\n        if(l.size() == 10) return false;\n        if(l.size() == 11) return false;\n        if(l.size() == 12) return false;\n        if(l.size() == 13) return false;\n        if(l.size() == 14) return false;\n        if(l.size() == 15) return false;\n        if(l.size() == 16) return false;\n        if(l.size() == 17) return false;\n        if(l.size() == 18) return false;\n        if(l.size() == 19) return false;\n        if(l.size() == 20) return false;\n        if(l.size() == 21) return false;\n        if(l.size() == 22) return false;\n        if(l.size() == 23) return false;\n        if(l.size() == 24) return false;\n        if(l.size() == 25) return false;\n        if(l.size() == 26) return false;\n        if(l.size() == 27) return false;\n        if(l.size() == 28) return false;\n        if(l.size() == 29) return false;\n        if(l.size() == 30) return false;\n        if(l.size() == 31) return false;\n        if(l.size() == 32) return false;\n        if(l.size() == 33) return false;\n        if(l."}
{"ID": 42, "source": "Multi_HumanEval_java:HumanEval_java/44", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t\tString result = \"\";\n\t\twhile (x > 0) {\n\t\t\tresult = x % base + result;\n\t\t\tx = x / base;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b之和。\n     *\n     * <p>例如，给定a = 1和b = 2，返回3。\n     *\n     * <p>注意：a和b可能是负数或较大的整数。\n     *\n     * @param a 数字一\n     * @param b 数字二\n     * @return a和b之和\n     */\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 年份是4的倍数而不是100的倍数，或是400的倍数。\n     *\n     * <p>2. 年份是100的倍数但不是400的倍数。\n     *\n     * <p>例如，1992年就是闰年，199"}
{"ID": 43, "source": "Multi_HumanEval_java:HumanEval_java/45", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t\treturn (double) (a * h) / 2;\n    }\n}\n<file_sep>/7kyu/FindTheOddInt/FindTheOddInt.java\nimport java.util.*;\n\nclass FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     *\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * >>> find_it([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5])\n     * 5\n     *\n     */\n    public static int findIt(int[] seq) {\n\t\tint result = 0;\n\t\tfor (int i = 0; i < seq.length; i++) {\n\t\t\tresult ^= seq[i];\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/7kyu/FindTheOddInt/FindTheOddIntTest.java\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class FindTheOddIntTest {\n    @Test\n    public void test1() {\n        assertEquals(5, FindTheOddInt.findIt(new int[] {20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5}));\n    }\n\n    @Test\n    public void test2() {\n        assertEquals(1, FindTheOddInt.findIt(new int[] {1,1,2,-2,5,2,4,4,-1,-2,5}));\n    }\n\n    @Test\n    public void test3() {\n        assertEquals(-1, FindTheOddInt.findIt(new int[] {20,1,1,2,2,3,3,5,5,4,20,4,5}));\n    }\n\n    @Test\n    public void test4() {\n        assertEquals(10, FindTheOddInt.findIt(new int[] {10}));\n    }\n\n    @Test\n    public void test5() {\n        assertEquals(1, FindTheOddInt.findIt(new int[] {1,1,1,1,1,1,10,1,1,1,1}));\n    }\n}\n<file_sep>/7"}
{"ID": 44, "source": "Multi_HumanEval_java:HumanEval_java/46", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t\t// Write your code here\n        if(n == 0 || n == 1 || n == 2) return 0;\n        if(n == 3) return 2;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n        for(int i = 4; i <= n; i++){\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n        return dp[n];\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n     *\n     * Example:\n     *\n     * Input: \"babad\"\n     *\n     * Output: \"bab\"\n     *\n     * Note: \"aba\" is also a valid answer.\n     * Example:\n     *\n     * Input: \"cbbd\"\n     *\n     * Output: \"bb\"\n     */\n    public static String longestPalindrome(String s) {\n        if(s == null || s.length() == 0) return \"\";\n        int start = 0;\n        int end = 0;\n        for(int i = 0; i < s.length(); i++){\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i+1);\n            int len = Math.max(len1, len2);\n            if(len > end - start){\n                start = i - (len - 1)/2;\n                end = i + len/2;\n            }\n        }\n        return s.substring(start, end+1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right){\n        int L = left;\n        int R = right;\n        while(L >= 0 && R < s.length"}
{"ID": 45, "source": "Multi_HumanEval_java:HumanEval_java/47", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t\tint size = l.size();\n\t\tif (size == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (size % 2 == 0) {\n\t\t\treturn (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n\t\t} else {\n\t\t\treturn l.get(size / 2);\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    public static void main(String[] args) {\n        System.out.println(getPrivateField(User.class, \"id\"));\n        System.out.println(getPrivateField(User.class, \"name\"));\n        System.out.println(getPrivateField(User.class, \"age\"));\n    }\n\n    public static Object getPrivateField(Class<?> clazz, String fieldName) {\n        try {\n            Field field = clazz.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/User.java\npackage com.github.hcsp.reflection;\n\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public User(Integer id, String name, Integer age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age"}
{"ID": 46, "source": "Multi_HumanEval_java:HumanEval_java/48", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t\tif (text.length() == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (text.length() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (text.charAt(0) == text.charAt(text.length() - 1)) {\n\t\t\treturn isPalindrome(text.substring(1, text.length() - 1));\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System"}
{"ID": 47, "source": "Multi_HumanEval_java:HumanEval_java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tBigInteger b = BigInteger.valueOf(n);\n\t\tBigInteger c = BigInteger.valueOf(p);\n\t\treturn b.mod(c).intValue();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2"}
{"ID": 48, "source": "Multi_HumanEval_java:HumanEval_java/51", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\tif (!vowels.contains(text.substring(i, i + 1))) {\n\t\t\t\tresult += text.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b之间的全部数字的和，例如，给定a=3和b=5，返回12（3+4+5）\n     *\n     * @param a 数字a\n     * @param b 数字b\n     * @return a和b之间的全部数字的和\n     */\n    public static int add(int a, int b) {\n        int sum = 0;\n        for (int i = a; i <= b; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main2.java\npackage com.github.hcsp.datatype;\n\npublic class Main2 {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(1904));\n        System.out.println(isLeapYear(1905));\n        System.out.println(isLeapYear(1906));\n        System.out.println(isLeapYear(1907));\n        System.out.println(isLeapYear(1908));\n        System.out.println(isLeapYear(1909));\n        System.out.println(isLeapYear(1910));\n        System.out.println(isLeapYear(191"}
{"ID": 49, "source": "Multi_HumanEval_java:HumanEval_java/52", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (l.get(i) > t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    public static void main(String[] args) throws Exception {\n        Class<?> clazz = Class.forName(\"com.github.hcsp.reflection.User\");\n        Field[] fields = clazz.getDeclaredFields();\n        List<Field> fieldList = Arrays.asList(fields);\n        for (Field field : fieldList) {\n            System.out.println(field.getName());\n        }\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/User.java\npackage com.github.hcsp.reflection;\n\npublic class User {\n    public String name;\n    public int age;\n    public String email;\n    public String password;\n    public String phone;\n    public String address;\n    public String[] hobbies;\n    public String[] friends;\n    public String[] family;\n    public String[] enemies;\n    public String[] enemies2;\n    public String[] enemies3;\n    public String[] enemies4;\n    public String[] enemies5;\n    public String[] enemies6;\n    public String[] enemies7;\n    public String[] enemies8;\n    public String[] enemies9;\n    public String[] enemies10;\n    public String[] enemies11;\n    public String[] enemies12;\n    public String[] enemies13;\n    public String[] enemies14;\n    public String[] enemies15;\n    public String[] enemies16;\n    public String[] enemies17;\n    public String[] enemies18;\n    public String[] enemies19;\n    public String[] enemies20;\n    public String[] enemies21;\n    public String[] enemies22;\n    public String[] enemies23;\n    public String[] enemies24;\n    public String[] enemies25;\n    public String[] enemies26;\n    public String[] enemies27;\n    public String[] enemies28;\n    public String[] enemies29;\n   "}
{"ID": 50, "source": "Multi_HumanEval_java:HumanEval_java/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t\treturn x + y;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClassLoader extends URLClassLoader {\n    public MyClassLoader(URL[] urls) {\n        super(urls);\n    }\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n        File testDir = new File(\"src/test/resources\");\n        List<File> files = new ArrayList<>();\n        for (File file : testDir.listFiles()) {\n            if (file.getName().endsWith(\".class\")) {\n                files.add(file);\n            }\n        }\n        URL[] urls = new URL[files.size()];\n        for (int i = 0; i < files.size(); i++) {\n            urls[i] = files.get(i).toURI().toURL();\n        }\n        MyClassLoader myClassLoader = new MyClassLoader(urls);\n        Class<?> clazz = myClassLoader.loadClass(\"com.github.hcsp.reflection.Add\");\n        Method method = clazz.getMethod(\"add\", int.class, int.class);\n        System.out.println(method.invoke(clazz.newInstance(), 2, 3));\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public static void main(String[] args) throws Exception {\n        Class<?> clazz = Class.forName(\"com.github.hcsp.reflection.Add\");\n        System.out.println(clazz.getName());\n    }\n}\n<|endoftext|><repo_name>joseph-m-martin/react-native-redux-boilerplate<file_sep>/src/components/App.js\nimport React, { Component } from'react';\nimport { Provider } from'react-redux';"}
{"ID": 51, "source": "Multi_HumanEval_java:HumanEval_java/54", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t\t// TODO: Implement this method\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n        System.out.println(add(1, 2, 3, 4, 5));\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的数和最小的数，如果数组为空，那么返回null\n     *\n     * <p>例如，给定数组[1, 2, 3]，返回最大的数3，最小的数1\n     *\n     * <p>给定数组[-1, -2, -3]，返回最大的数-1，最小的数-3\n     *\n     * @param nums 给定的数组\n     * @return 最大最小值组成的数组\n     */\n    public static int[] maxAndMin(int[] nums) {\n        // 请在这里编写代码\n        return null;\n    }\n\n    /**\n     * 给定两个整数a和b，返回它们的和。\n     *\n     * <p>例如，给定a = 1和b = 2，返回3\n     *\n     * @param a 整数a\n     * @param b 整数b\n     * @return a + b\n     */\n    public static int add(int a, int b) {\n        // 请在这里编写代码\n        return 0;\n    }\n\n    /**\n     * 给定三个整数a、b、c，返回它们三个数之和。\n     *\n     * <p>例如，给定a = 1、b = 2和c = 3，返回6\n     *\n     * @param a 整数a\n     * @param b 整数b\n     * @param c 整数c\n     * @return a + b + c\n     */\n    public static int add(int a, int b, int c) {\n        // 请在这里编写代码\n        return 0;\n    }\n\n    /**\n     * 给定四个整数a、"}
{"ID": 52, "source": "Multi_HumanEval_java:HumanEval_java/55", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (n == 1) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn fib(n - 1) + fib(n - 2);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println("}
{"ID": 53, "source": "Multi_HumanEval_java:HumanEval_java/56", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor(int i = 0; i < brackets.length(); i++) {\n\t\t\tif(brackets.charAt(i) == '<') {\n\t\t\t\tstack.push(brackets.charAt(i));\n\t\t\t} else {\n\t\t\t\tif(stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1990));\n        System.out.println(isLeapYear(1991));\n        System.out.println(isLeapYear(1992));\n        System.out.println(isLeapYear(1993));\n        System.out.println(isLeapYear(1994));\n        System.out.println(isLeapYear(1995));\n        System.out.println(isLeapYear(1996));\n        System.out.println(isLeapYear(1997));\n        System.out.println(isLeapYear(1998));\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2002));\n        System.out.println(isLeapYear(2003));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2007));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2009));\n        System.out.println(isLeapYear(2"}
{"ID": 54, "source": "Multi_HumanEval_java:HumanEval_java/57", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t\tif (l.size() == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tint prev = l.get(0);\n\t\tfor (int i = 1; i < l.size(); i++) {\n\t\t\tif (l.get(i) < prev) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tprev = l.get(i);\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    public static void main(String[] args) throws Exception {\n        Class<?> clazz = Class.forName(\"com.github.hcsp.reflection.User\");\n        Field[] fields = clazz.getDeclaredFields();\n        List<Field> fieldList = Arrays.asList(fields);\n        fieldList.forEach(field -> {\n            System.out.println(field.getName());\n        });\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/User.java\npackage com.github.hcsp.reflection;\n\npublic class User {\n    public String name;\n    public int age;\n    public String address;\n\n    public User(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n\n    public User() {\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public static void main(String[] args) {\n        System.out.println(MyClass.class.getName());\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class MyClassLoader extends ClassLoader {\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        try {\n            File file = new File("}
{"ID": 55, "source": "Multi_HumanEval_java:HumanEval_java/58", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object o : l1) {\n\t\t\tif (l2.contains(o)) {\n\t\t\t\tresult.add(o);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    /**\n     * Return the first element of a list that is not in the second list.\n     * >>> first_not_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * 4\n     * >>> first_not_common([5, 3, 2, 8], [3, 2])\n     * 8\n     *\n     */\n    public static Object first_not_common(List<Integer> l1, List<Object> l2) {\n\t\tfor (Object o : l1) {\n\t\t\tif (!l2.contains(o)) {\n\t\t\t\treturn o;\n\t\t\t}\n\t\t}\n\t\treturn null;\n    }\n\n    /**\n     * Return the last element of a list that is not in the second list.\n     * >>> last_not_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * 121\n     * >>> last_not_common([5, 3, 2, 8], [3, 2])\n     * 8\n     *\n     */\n    public static Object last_not_common(List<Integer> l1, List<Object> l2) {\n\t\tfor (int i = l1.size() - 1; i >= 0; i--) {\n\t\t\tif (!l2.contains(l1.get(i))) {\n\t\t\t\treturn l1.get(i);\n\t\t\t}\n\t\t}\n\t\treturn null;\n    }\n\n    /**\n     * Return the first element of a list that is in the second list.\n     * >>> first_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 12"}
{"ID": 56, "source": "Multi_HumanEval_java:HumanEval_java/59", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t\tint largestPrime = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tlargestPrime = i;\n\t\t\t}\n\t\t}\n\t\treturn largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(largestPrimeFactor(n));\n    }\n}\n<file_sep>/src/main/java/com/github/joshua/algorithms/hackerrank/algorithms/implementation/DivisibleSumPairs.java\npackage com.github.joshua.algorithms.hackerrank.algorithms.implementation;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class DivisibleSumPairs {\n\n    static int divisibleSumPairs(int n, int k, int[] ar) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((ar[i] + ar[j]) % k == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int[] ar = new int[n];\n        for(int ar_i = 0; ar_i < n; ar_i++){\n            ar[ar_i] = in.nextInt();\n        }\n        int result = divisibleSumPairs(n, k, ar);\n        System.out.println(result);\n        in.close();\n    }\n}\n<file_sep>/src/main/java/com/github/joshua/algorithms/hackerrank/algorithms/implementation/CutTheSticks.java\npackage com.github.joshua.algorithms.hackerrank.algorithms.implementation;\n\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class CutTheSticks {\n\n    static int[] cutTheSt"}
{"ID": 57, "source": "Multi_HumanEval_java:HumanEval_java/60", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2041));\n        System.out.println("}
{"ID": 58, "source": "Multi_HumanEval_java:HumanEval_java/61", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor(int i = 0; i < brackets.length(); i++) {\n\t\t\tif(brackets.charAt(i) == '(') {\n\t\t\t\tstack.push(brackets.charAt(i));\n\t\t\t} else {\n\t\t\t\tif(stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2"}
{"ID": 59, "source": "Multi_HumanEval_java:HumanEval_java/62", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 +....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t\tList<Object> derivative = new ArrayList<Object>();\n\t\tfor(int i = 1; i < xs.size(); i++) {\n\t\t\tderivative.add(xs.get(i) * i);\n\t\t}\n\t\treturn derivative;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClassLoader extends URLClassLoader {\n    public MyClassLoader(URL[] urls) {\n        super(urls);\n    }\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        File testDir = new File(\"src/test/resources\");\n        File[] files = testDir.listFiles();\n        List<URL> urls = new ArrayList<>();\n        for (File file : files) {\n            urls.add(file.toURI().toURL());\n        }\n        MyClassLoader myClassLoader = new MyClassLoader(urls.toArray(new URL[0]));\n        Class<?> clazz = myClassLoader.loadClass(\"com.github.hcsp.reflection.MyClass\");\n        Method method = clazz.getMethod(\"main\", String[].class);\n        method.invoke(null, (Object) new String[]{});\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world.\");\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass2.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass2 {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world.\");\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp"}
{"ID": 60, "source": "Multi_HumanEval_java:HumanEval_java/63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t\t// write your code here\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int i = 3; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseInteger.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 11/12/16.\n */\npublic class ReverseInteger {\n    /**\n     * Reverse digits of an integer.\n     * Example1: x = 123, return 321\n     * Example2: x = -123, return -321\n     *\n     * @param x\n     * @return\n     */\n    public static int reverse(int x) {\n        int result = 0;\n        while (x!= 0) {\n            int tail = x % 10;\n            int newResult = result * 10 + tail;\n            if ((newResult - tail) / 10!= result) {\n                return 0;\n            }\n            result = newResult;\n            x = x / 10;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverse(123));\n        System.out.println(reverse(-123));\n        System.out.println(reverse(1534236469));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 11/12/16.\n */\npublic class ReverseString {\n    /**\n     * Write a function that takes a string as input and returns the string reversed.\n     * Example:\n     * Given s = \"hello\", return \"olleh\".\n     *\n     * @param s\n     * @return\n     */\n    public static String reverse"}
{"ID": 61, "source": "Multi_HumanEval_java:HumanEval_java/64", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++) {\n\t\t\tif(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        System.out.println(vowelsCount(s));\n    }\n}\n<file_sep>/src/com/company/Array/ArrayRotation.java\npackage com.company.Array;\n\nimport java.util.Scanner;\n\npublic class ArrayRotation {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int d = sc.nextInt();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr[(i+d)%n];\n        }\n        for(int i = 0; i < n; i++) {\n            System.out.print(arr1[i] + \" \");\n        }\n    }\n}\n<file_sep>/src/com/company/Array/ArrayRotation2.java\npackage com.company.Array;\n\nimport java.util.Scanner;\n\npublic class ArrayRotation2 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int d = sc.nextInt();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr[(i+d)%n];\n        }\n        for(int i"}
{"ID": 62, "source": "Multi_HumanEval_java:HumanEval_java/65", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t\tString s = Integer.toString(x);\n\t\tint len = s.length();\n\t\tif (shift > len) {\n\t\t\treturn new StringBuilder(s).reverse().toString();\n\t\t}\n\t\treturn s.substring(shift) + s.substring(0, shift);\n    }\n}\n<file_sep>/python/0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 63, "source": "Multi_HumanEval_java:HumanEval_java/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (Character.isDigit(s.charAt(i))) {\n\t\t\t\tsum += s.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b的和。\n     *\n     * <p>例如，给定a = 1和b = 2，返回3。\n     *\n     * @param a 数字一\n     * @param b 数字二\n     * @return a和b的和\n     */\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(20"}
{"ID": 64, "source": "Multi_HumanEval_java:HumanEval_java/67", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t\t// your code here\n\t\tString[] arr = s.split(\" \");\n\t\tint apples = Integer.parseInt(arr[0]);\n\t\tint oranges = Integer.parseInt(arr[3]);\n\t\tint mango = n - apples - oranges;\n\t\treturn mango;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/ReverseInteger.java\npackage com.example.demo.leetcode.easy;\n\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     *\n     * Example 1:\n     *\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     *\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     *\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n     */\n    public static int reverse(int x) {\n        int rev = 0;\n        while (x!= 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\n            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;\n            rev = rev * 10 + pop;\n        }\n        return rev;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/ReverseString.java\npackage com.example.demo.leetcode.easy;\n\npublic class ReverseString {\n    /**\n     * Write a function that reverses a string. The input string is given as an array of characters char[].\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     * You may assume all"}
{"ID": 65, "source": "Multi_HumanEval_java:HumanEval_java/68", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tif (arr.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tint min = (int) arr.get(0);\n\t\tint minIndex = 0;\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tif ((int) arr.get(i) < min && (int) arr.get(i) % 2 == 0) {\n\t\t\t\tmin = (int) arr.get(i);\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tresult.add(min);\n\t\tresult.add(minIndex);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/problems/easy/ReverseString.java\npackage com.leetcode.problems.easy;\n\nimport java.util.Arrays;\n\npublic class ReverseString {\n    /**\n     * Write a function that reverses a string. The input string is given as an array of characters char[].\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     * You may assume all the characters consist of printable ascii characters.\n     *\n     * Example 1:\n     * Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\n     * Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n     *\n     * Example 2:\n     * Input: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n     * Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n     */\n    public static void reverseString(char[] s) {\n        int left = 0;\n        int right = s.length - 1;\n        while (left < right) {\n            char temp = s[left];\n            s[left] = s[right];\n            s[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] s = new char[]{'h','e','l','l','o'};\n        reverseString(s);\n        System.out.println(Arrays.toString(s));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/problems/easy/FindNumbersWithEvenNumberOfDigits.java\npackage"}
{"ID": 66, "source": "Multi_HumanEval_java:HumanEval_java/69", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t\tint max = 0;\n\t\tint max_freq = 0;\n\t\tint freq = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (lst.get(i) > max) {\n\t\t\t\tmax = lst.get(i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (lst.get(i) == max) {\n\t\t\t\tfreq++;\n\t\t\t}\n\t\t}\n\t\tif (freq >= max) {\n\t\t\treturn -1;\n\t\t}\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tfreq = 0;\n\t\t\tfor (int j = 0; j < lst.size(); j++) {\n\t\t\t\tif (lst.get(i) == lst.get(j)) {\n\t\t\t\t\tfreq++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (freq > max_freq) {\n\t\t\t\tmax_freq = freq;\n\t\t\t}\n\t\t}\n\t\treturn max_freq;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPrime(1));\n        System.out.println(isPrime(2));\n        System.out.println(isPrime(3));\n        System.out.println(isPrime(4));\n        System.out.println(isPrime(5));\n        System.out.println(isPrime(6));\n        System.out.println(isPrime(7));\n        System.out.println(isPrime(8));\n        System.out.println(isPrime(9));\n        System.out.println(isPrime(10));\n        System.out.println(isPrime(11));\n        System.out.println(isPrime(12));\n        System.out.println(isPrime(13));\n        System.out.println(isPrime(14));\n        System.out.println(isPrime(15));\n        System.out.println(isPrime(16));\n        System.out.println(isPrime(17));\n       "}
{"ID": 67, "source": "Multi_HumanEval_java:HumanEval_java/70", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (lst.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tint min = (int) lst.get(0);\n\t\tint max = (int) lst.get(0);\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif ((int) lst.get(i) < min) {\n\t\t\t\tmin = (int) lst.get(i);\n\t\t\t}\n\t\t\tif ((int) lst.get(i) > max) {\n\t\t\t\tmax = (int) lst.get(i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif ((int) lst.get(i) == min) {\n\t\t\t\tresult.add(lst.get(i));\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif ((int) lst.get(i) == max) {\n\t\t\t\tresult.add(lst.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 能被4整除，不能被100整除； 2. 能被400整除；\n     *\n     * @param year 给定的年份数字\n     * @return 如果该年份是闰年，返回true，否则返回false\n     */\n    public static boolean isLeapYear(int"}
{"ID": 68, "source": "Multi_HumanEval_java:HumanEval_java/71", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t\t// your code here\n\t\tif(a+b>c && a+c>b && b+c>a){\n\t\t\tdouble s = (a+b+c)/2;\n\t\t\tdouble area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t\treturn area;\n\t\t}\n\t\telse{\n\t\t\treturn -1;\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * @param a\n     * @return\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for (int i = 0; i < a.length - 1; i++) {\n            if (a[i] == a[i + 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * @param a\n     * @return\n     */\n    public static int findIt"}
{"ID": 69, "source": "Multi_HumanEval_java:HumanEval_java/72", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\tsum += q.get(i);\n\t\t}\n\t\tif (sum <= w && isPalindrome(q)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static Boolean isPalindrome(List<Integer> q) {\n\t\tfor (int i = 0; i < q.size() / 2; i++) {\n\t\t\tif (q.get(i)!= q.get(q.size() - 1 - i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tList<Integer> q = new ArrayList<Integer>();\n\t\tq.add(1);\n\t\tq.add(2);\n\t\tSystem.out.println(willItFly(q, 5));\n\t}\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\nimport java.util.Arrays;\n\npublic class ReverseString {\n    /**\n     * Write a function that reverses a string. The input string is given as an array of characters char[].\n\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\n     * You may assume all the characters consist of printable ascii characters.\n\n     * Example 1:\n\n     * Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\n     * Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n     * Example 2:\n\n     * Input: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n     * Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n     */\n    public static void reverseString(char[] s) {\n        int i = 0;\n        int j = s.length - 1;\n        while (i < j) {\n            char temp = s[i];\n            s[i] = s[j];\n            s[j] = temp;\n            i++;\n            j--;\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] s = new char[]{'h', 'e', 'l',"}
{"ID": 70, "source": "Multi_HumanEval_java:HumanEval_java/73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = arr.size() - 1;\n\t\twhile (i < j) {\n\t\t\tif (arr.get(i) == arr.get(j)) {\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tif (arr.get(i) < arr.get(j)) {\n\t\t\t\t\tarr.set(i, arr.get(j));\n\t\t\t\t\tcount++;\n\t\t\t\t} else {\n\t\t\t\t\tarr.set(j, arr.get(i));\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n     *\n     * Example 1:\n     *\n     * Input: \"babad\"\n     * Output: \"bab\"\n     * Note: \"aba\" is also a valid answer.\n     * Example 2:\n     *\n     * Input: \"cbbd\"\n     * Output: \"bb\"\n     */\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right) {\n       "}
{"ID": 71, "source": "Multi_HumanEval_java:HumanEval_java/74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t\tint sum1 = 0;\n\t\tint sum2 = 0;\n\t\tfor(Object s : lst1) {\n\t\t\tsum1 += s.toString().length();\n\t\t}\n\t\tfor(Object s : lst2) {\n\t\t\tsum2 += s.toString().length();\n\t\t}\n\t\tif(sum1 < sum2) {\n\t\t\treturn lst1;\n\t\t} else if(sum1 > sum2) {\n\t\t\treturn lst2;\n\t\t} else {\n\t\t\treturn lst1;\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/ReverseString.java\npackage com.interview.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Write a function that reverses a string. The input string is given as an array of characters char[].\n * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n * You may assume all the characters consist of printable ascii characters.\n *\n * Example 1:\n * Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\n * Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n *\n * Example 2:\n * Input: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n * Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n */\npublic class ReverseString {\n    public static void main(String[] args) {\n        char[] s = new char[]{'h','e','l','l','o'};\n        reverseString(s);\n        System.out.println(Arrays.toString(s));\n    }\n\n    public static void reverseString(char[] s) {\n        int i = 0;\n        int j = s.length - 1;\n        while(i < j) {\n            char temp = s[i];\n            s[i] = s[j];\n            s[j] = temp;\n            i++;\n            j--;\n        }\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/ReverseInteger.java\npackage com.interview.leetcode.easy;\n\n/**\n * Given a 32-bit signed integer, reverse digits of an integer.\n *\n * Example 1"}
{"ID": 72, "source": "Multi_HumanEval_java:HumanEval_java/75", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t\t// your code here\n\t\treturn null;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040));\n        System.out.println(isLeapYear(2041));\n        System.out.println(isLeapYear(2044));\n        System.out.println(isLeapYear(2045));\n       "}
{"ID": 73, "source": "Multi_HumanEval_java:HumanEval_java/76", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t\tif(x==1) return true;\n\t\tif(x==0) return false;\n\t\tif(n==1) return false;\n\t\tif(n==0) return false;\n\t\tif(x==n) return true;\n\t\tif(x<n) return false;\n\t\tif(x%n!=0) return false;\n\t\treturn isSimplePower(x/n,n);\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/FindTheDifference.java\npackage com.leetcode.easy;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     *\n     * String t is generated by random shuffling string s and then add one more letter at a random position.\n     *\n     * Find the letter that was added in t.\n     *\n     * Example:\n     *\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public char findTheDifference(String s, String t) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < t.length(); i++) {\n            char c = t.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n            } else {\n                return c;\n            }\n        }\n        return'';\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/FindTheDifference.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic"}
{"ID": 74, "source": "Multi_HumanEval_java:HumanEval_java/77", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t\t// your code here\n\t\tint i = 1;\n\t\twhile(i*i*i < a){\n\t\t\ti++;\n\t\t}\n\t\tif(i*i*i == a){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 能被4整除，不能被100整除； 2. 能被400整除；\n     *\n     * @param year 给定的年份数字\n     * @return 如果该年份是闰年，返回true，否则返回false\n     */\n    public static boolean isLeapYear(int year) {\n        // 实现判断代码\n        if (year % 4 == 0 && year % 100!= 0 || year % 400 == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPrime(1));\n        System.out.println(isPrime(2));\n        System.out.println(isPrime(3));\n        System.out.println(isPrime(4));\n        System.out.println(isPrime(5));\n        System.out.println(isPrime(6));\n        System.out.println(isPrime(7));\n        System.out.println("}
{"ID": 75, "source": "Multi_HumanEval_java:HumanEval_java/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t\tint count = 0;\n\t\tString hex = num.toString();\n\t\tfor (int i = 0; i < hex.length(); i++) {\n\t\t\tif (hex.charAt(i) == '2' || hex.charAt(i) == '3' || hex.charAt(i) == '5' || hex.charAt(i) == '7' || hex.charAt(i) == 'B' || hex.charAt(i) == 'D') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b的和。\n     *\n     * @param a 数字一\n     * @param b 数字二\n     * @return a+b\n     */\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(1988));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));"}
{"ID": 76, "source": "Multi_HumanEval_java:HumanEval_java/79", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t\tString binary = \"\";\n\t\twhile (decimal > 0) {\n\t\t\tbinary = (decimal % 2) + binary;\n\t\t\tdecimal /= 2;\n\t\t}\n\t\treturn \"db\" + binary + \"db\";\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int i = 0;\n        while (i < a.length - 1) {\n            if (a[i] == a[i + 1]) {\n                i += 2;\n            } else {\n                return a[i];\n            }\n        }\n        return a[i];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int i = 0;\n        while (i < a.length - 1) {\n            if (a[i] == a[i + 1]) {\n                i += 2;\n            } else {\n                return a[i];\n            }\n        }\n        return a[i];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int"}
{"ID": 77, "source": "Multi_HumanEval_java:HumanEval_java/80", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t\t// your code here\n        if(s.length()<3) return false;\n        for(int i=0;i<s.length()-2;i++){\n            if(s.charAt(i)==s.charAt(i+1) && s.charAt(i+1)==s.charAt(i+2)) return false;\n        }\n        return true;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class ReverseString {\n    /**\n     * Write a function that takes a string as input and returns the string reversed.\n     * Example:\n     * Given s = \"hello\", return \"olleh\".\n     */\n    public static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (i < j) {\n            char temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverseString(\"hello\"));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseInteger.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     * Example 1:\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows."}
{"ID": 78, "source": "Multi_HumanEval_java:HumanEval_java/81", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tfor(Number grade : grades){\n\t\t\tif(grade.doubleValue() >= 4.0){\n\t\t\t\tresult.add(\"A+\");\n\t\t\t}else if(grade.doubleValue() >= 3.7){\n\t\t\t\tresult.add(\"A\");\n\t\t\t}else if(grade.doubleValue() >= 3.3){\n\t\t\t\tresult.add(\"A-\");\n\t\t\t}else if(grade.doubleValue() >= 3.0){\n\t\t\t\tresult.add(\"B+\");\n\t\t\t}else if(grade.doubleValue() >= 2.7){\n\t\t\t\tresult.add(\"B\");\n\t\t\t}else if(grade.doubleValue() >= 2.3){\n\t\t\t\tresult.add(\"B-\");\n\t\t\t}else if(grade.doubleValue() >= 2.0){\n\t\t\t\tresult.add(\"C+\");\n\t\t\t}else if(grade.doubleValue() >= 1.7){\n\t\t\t\tresult.add(\"C\");\n\t\t\t}else if(grade.doubleValue() >= 1.3){\n\t\t\t\tresult.add(\"C-\");\n\t\t\t}else if(grade.doubleValue() >= 1.0){\n\t\t\t\tresult.add(\"D+\");\n\t\t\t}else if(grade.doubleValue() >= 0.7){\n\t\t\t\tresult.add(\"D\");\n\t\t\t}else if(grade.doubleValue() >= 0.0){\n\t\t\t\tresult.add(\"D-\");\n\t\t\t}else{\n\t\t\t\tresult.add(\"E\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear"}
{"ID": 79, "source": "Multi_HumanEval_java:HumanEval_java/82", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t\tint length = string.length();\n\t\tif (length == 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < length; i++) {\n\t\t\tif (length % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * should return -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * should return 5\n     *\n     * [10]\n     * should return 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * should return 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * should return 1\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1,1,1,1]\n     * should return 10\n     *\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for (int i = 1; i < seq.length; i++) {\n            if (seq[i] == seq[i - 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return seq[i - 1];\n                }\n                count = 1;"}
{"ID": 80, "source": "Multi_HumanEval_java:HumanEval_java/83", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t\t// Write your code here\n\t\tint count = 0;\n\t\tint start = 1;\n\t\tint end = 1;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tstart *= 10;\n\t\t\tend *= 10;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcount += end - start;\n\t\t\tstart++;\n\t\t\tend++;\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LongestPalindromicSubstring {\n    public static void main(String[] args) {\n        System.out.println(longestPalindrome(\"babad\"));\n    }\n\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int maxLen = 0;\n        String maxPalindrome = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            String palindrome = getPalindrome(s, i, i);\n            if (palindrome.length() > maxLen) {\n                maxLen = palindrome.length();\n                maxPalindrome = palindrome;\n            }\n            palindrome = getPalindrome(s, i, i + 1);\n            if (palindrome.length() > maxLen) {\n                maxLen = palindrome.length();\n                maxPalindrome = palindrome;\n            }\n        }\n        return maxPalindrome;\n    }\n\n    private static String getPalindrome(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n        return s.substring(left + 1, right);\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindKClosestElements.java\npackage com.leetcode.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindKClosestElements {\n    public static void main(String[] args)"}
{"ID": 81, "source": "Multi_HumanEval_java:HumanEval_java/84", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t\tString binary = Integer.toBinaryString(n);\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < binary.length(); i++) {\n\t\t\tsum += Integer.parseInt(binary.substring(i, i + 1));\n\t\t}\n\t\treturn Integer.toString(sum);\n    }\n}\n<file_sep>/src/main/java/com/codefight/arcade/intro/level04/lineup.java\npackage com.codefight.arcade.intro.level04;\n\nimport java.util.*;\n\nclass lineup {\n    /**\n     * Given the positions of a white bishop and a black pawn on the standard chess board,\n     * determine whether the bishop can capture the pawn in one move.\n     * \n     * The bishop has no restrictions in distance for each move, but is limited to diagonal movement.\n     * \n     * Example\n     *     For bishop = \"a1\" and pawn = \"c3\", the output should be true.\n     *     For bishop = \"h1\" and pawn = \"h3\", the output should be false.\n     * \n     * Variables:\n     *     @bishop string\n     *          The position of the white bishop on the standard chess board.\n     *          The coordinate will be written as a string of two characters.\n     *          The first character is the column, and the second character is the row.\n     *          The column is represented by letters from \"a\" to \"h\", and the row is represented by numbers from \"1\" to \"8\".\n     *     @pawn string\n     *          The position of the black pawn on the standard chess board.\n     *          The coordinate will be written as a string of two characters.\n     *          The first character is the column, and the second character is the row.\n     *          The column is represented by letters from \"a\" to \"h\", and the row is represented by numbers from \"1\" to \"8\".\n     * Output:\n     *      a boolean\n     *\n     */\n    public static boolean lineup(String bishop, String pawn) {\n\t\tint bishopX = bishop.charAt(0) - 'a';\n\t\tint bishopY = bishop.charAt(1) - '1';\n\t\tint p"}
{"ID": 82, "source": "Multi_HumanEval_java:HumanEval_java/85", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < lst.size(); i++) {\n\t\t\tif(i % 2 == 0) {\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples:\n     *     [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     *     should return 5\n     *\n     *     [1,1,2,-2,5,2,4,4,-1,-2,5]\n     *     should return -1\n     *\n     *     [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     *     should return 5\n     *\n     *     [10]\n     *     should return 10\n     *\n     *     [1,1,1,1,1,1,10,1,1,1,1]\n     *     should return 10\n     *\n     *     [5,4,3,2,1,5,4,3,2,10,10]\n     *     should return 1\n     *\n     *     [1,1,1,1,1,1,10,1,1,1,1,1,1,1]\n     *     should return 10\n     *\n     *     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"ID": 83, "source": "Multi_HumanEval_java:HumanEval_java/86", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t\t// Write your code here\n        String[] words = s.split(\" \");\n        String result = \"\";\n        for(String word : words){\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result += new String(chars);\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/ReverseInteger.java\npackage com.interview.leetcode.easy;\n\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     *\n     * Example 1:\n     *\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     *\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     *\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n     */\n    public static int reverse(int x) {\n        int result = 0;\n        while (x!= 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (result > Integer.MAX_VALUE/10 || (result == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\n            if (result < Integer.MIN_VALUE/10 || (result == Integer.MIN_VALUE / 10 && pop < -8)) return 0;\n            result = result * 10 + pop;\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/ReverseString.java\npackage com.interview.leetcode.easy;\n\npublic class ReverseString {\n    /**\n     * Write a function that takes a string as input and returns the string reversed.\n     *\n     * Example:\n     * Given s = \"hello\", return \"olleh\".\n     */\n    public static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j ="}
{"ID": 84, "source": "Multi_HumanEval_java:HumanEval_java/87", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2)...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t\t// your code here\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = (List<Object>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (x == (Integer) row.get(j)) {\n                    result.add(new int[]{i, j});\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                int[] a = (int[]) o1;\n                int[] b = (int[]) o2;\n                if (a[0] == b[0]) {\n                    return b[1] - a[1];\n                }\n                return a[0] - b[0];\n            }\n        });\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 能被4整除，不能被100整除； 2. 能被400整除；\n     *\n     * @param year 给定的年份数字\n     * @return 如果该年份是闰年，返回true，否则返回false\n     */\n    public static boolean isLeapYear(int year) {\n        if (year % 4 == 0 && year % 100!= 0 || year % 400 == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n<file_sep>/src/main/java/com"}
{"ID": 85, "source": "Multi_HumanEval_java:HumanEval_java/88", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t\t// Write your code here\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += (int) array.get(i);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * @author <NAME>\n * @date 2019/11/20\n */\npublic class ReverseString {\n    /**\n     * Write a function that reverses a string. The input string is given as an array of characters char[].\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     * You may assume all the characters consist of printable ascii characters.\n     *\n     * Example 1:\n     * Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\n     * Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n     *\n     * Example 2:\n     * Input: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n     * Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n     */\n    public static void reverseString(char[] s) {\n        if (s == null || s.length == 0) {\n            return;\n        }\n        int left = 0;\n        int right = s.length - 1;\n        while (left < right) {\n            char temp = s[left];\n            s[left] = s[right];\n            s[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] s = new char[]{'h','e','l','l','o'};\n        reverseString(s);\n        System.out.println(Arrays.toString(s));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/FindNumbersWithEvenNumberOfDigits.java\npackage com.leetcode.easy;"}
{"ID": 86, "source": "Multi_HumanEval_java:HumanEval_java/89", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tc += 2;\n\t\t\t\tif (c > 'z') {\n\t\t\t\t\tc -= 26;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult += c;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1990));\n        System.out.println(isLeapYear(1991));\n        System.out.println(isLeapYear(1992));\n        System.out.println(isLeapYear(1993));\n        System.out.println(isLeapYear(1994));\n        System.out.println(isLeapYear(1995));\n        System.out.println(isLeapYear(1996));\n        System.out.println(isLeapYear(1997));\n        System.out.println(isLeapYear(1998));\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2002));\n        System.out.println(isLeapYear(2003));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2007));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2009));\n        System.out.println(isLeapYear(2010));"}
{"ID": 87, "source": "Multi_HumanEval_java:HumanEval_java/90", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t\tif (lst.size() < 2) {\n\t\t\treturn null;\n\t\t}\n\t\tInteger min = (Integer) lst.get(0);\n\t\tInteger secMin = (Integer) lst.get(1);\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (lst.get(i) instanceof Integer) {\n\t\t\t\tif ((Integer) lst.get(i) < min) {\n\t\t\t\t\tsecMin = min;\n\t\t\t\t\tmin = (Integer) lst.get(i);\n\t\t\t\t} else if ((Integer) lst.get(i) < secMin) {\n\t\t\t\t\tsecMin = (Integer) lst.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn secMin;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPrime(1));\n        System.out.println(isPrime(2));\n        System.out.println(isPrime(3));\n        System.out.println(isPrime(4));\n        System.out.println(isPrime(5));\n        System.out.println(isPrime(6));\n        System.out.println(isPrime(7));\n        System.out.println(isPrime(8));\n        System.out.println(isPrime(9));\n        System.out.println(isPrime(10));\n        System.out.println(isPrime(11));\n        System.out.println(isPrime(12));\n        System.out.println(isPrime(13));\n        System.out.println(isPrime(14));\n        System.out.println(isPrime(15));\n        System.out.println(isPrime(16));\n        System.out.println(isPrime(17));\n        System.out.println(isPrime(18));\n        System.out.println(isPrime(19));\n        System.out.println(isPrime(20));\n        System.out.println(isPrime(21));\n        System.out.println(isPrime(22));\n        System.out.println(isPrime("}
{"ID": 88, "source": "Multi_HumanEval_java:HumanEval_java/91", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t\tint count = 0;\n\t\tString[] words = s.split(\" \");\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].equals(\"I\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * 5\n     *\n     * [10]\n     * 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * 1\n     *\n     * Best Practices\n     *\n     * This is a classic problem that can be solved in a number of ways.\n     *\n     * The most obvious solution is to sort the array and then iterate through it,\n     * counting the number of times each element appears.\n     *\n     * This is a good solution, but it's not the most efficient.\n     *\n     * A more efficient solution is to use a hash table.\n     *\n     * The idea is to create a hash table that maps each element to the number of times it appears.\n     *\n     * Then, iterate through the array and decrement the count of each element in the hash table.\n     *\n     * Finally, iterate through the hash table and return the element whose count is odd.\n     *\n     *"}
{"ID": 89, "source": "Multi_HumanEval_java:HumanEval_java/92", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t\treturn (x.intValue() == y.intValue() + z.intValue() || x.intValue() == y.intValue() - z.intValue() || x.intValue() == z.intValue() - y.intValue() || y.intValue() == x.intValue() + z.intValue() || y.intValue() == x.intValue() - z.intValue() || y.intValue() == z.intValue() - x.intValue() || z.intValue() == x.intValue() + y.intValue() || z.intValue() == x.intValue() - y.intValue() || z.intValue() == y.intValue() - x.intValue());\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(1904));\n        System.out.println(isLeapYear(1905));\n        System.out.println(isLeapYear(1906));\n        System.out.println(isLeapYear(1907));\n        System.out.println(isLeapYear(1908));\n        System.out.println(isLeapYear(1909));\n        System.out.println(isLeapYear(1910));\n        System.out.println(isLeapYear(1911));\n        System.out.println(isLeapYear(1912));\n        System.out.println(isLeapYear(1913));\n        System.out.println(isLeapYear(1914));\n        System.out.println(isLeapYear(1915));\n        System.out.println(isLeapYear(1916));\n        System.out.println(isLeapYear(1917));\n        System.out.println(isLeapYear(1918));\n        System.out.println(isLeapYear(1919));\n        System.out.println(isLeapYear(1920));\n        System.out.println(isLe"}
{"ID": 90, "source": "Multi_HumanEval_java:HumanEval_java/93", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t\tString encoded = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar letter = message.charAt(i);\n\t\t\tif (Character.isUpperCase(letter)) {\n\t\t\t\tletter = Character.toLowerCase(letter);\n\t\t\t} else if (Character.isLowerCase(letter)) {\n\t\t\t\tletter = Character.toUpperCase(letter);\n\t\t\t}\n\t\t\tif (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n\t\t\t\tletter = (char) (letter + 2);\n\t\t\t}\n\t\t\tencoded += letter;\n\t\t}\n\t\treturn encoded;\n    }\n}\n<file_sep>/python/00001_reverse_string/reverse_string.py\ndef reverse_string(string):\n    \"\"\"\n    Write a function that takes a string as input and returns the string reversed.\n\n    >>> reverse_string('abcd')\n    'dcba'\n    >>> reverse_string('a')\n    'a'\n    \"\"\"\n    return string[::-1]\n<file_sep>/python/00002_reverse_int/reverse_int.py\ndef reverse_int(n):\n    \"\"\"\n    Write a function that takes an integer as input and returns the integer reversed.\n\n    >>> reverse_int(123)\n    321\n    >>> reverse_int(456)\n    654\n    >>> reverse_int(120)\n    21\n    \"\"\"\n    return int(str(n)[::-1])\n<file_sep>/python/00003_is_palindrome/is_palindrome.py\ndef is_palindrome(string):\n    \"\"\"\n    Write a function that takes a string as input and returns whether the string is a palindrome or not.\n\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n    return string == string[::-1]\n<file_sep>/python/00004_is_anagram/is_anagram.py\ndef is_anagram(string_a, string_b):\n    \"\"\"\n    Write a function that takes two strings as input and returns whether they are anagrams or not.\n\n    >>> is_anagram('abcd', 'dbca')\n    True\n    >>> is_anagram('hello', 'goodbye')\n    False\n    \"\"\""}
{"ID": 91, "source": "Multi_HumanEval_java:HumanEval_java/94", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (isPrime(lst.get(i)) && lst.get(i) > max) {\n\t\t\t\tmax = lst.get(i);\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\twhile (max > 0) {\n\t\t\tsum += max % 10;\n\t\t\tmax /= 10;\n\t\t}\n\t\treturn sum;\n    }\n\n    public static boolean isPrime(int n) {\n\t\tif (n < 2) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(is"}
{"ID": 92, "source": "Multi_HumanEval_java:HumanEval_java/95", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t\t// your code here\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个由若干个空格分隔的字符串，返回一个由若干个单词组成的列表。\n     * 例如，给定\"hello world\"，返回[\"hello\",\"world\"]。\n     *\n     * @param str 由若干个空格分隔的字符串\n     * @return 由若干个单词组成的列表\n     */\n    public static List<String> splitString(String str) {\n        // 请实现这里\n        return null;\n    }\n\n    /**\n     * 给定一个由若干个单词组成的列表，返回一个由若干个单词组成的字符串，每个单词之间用空格分隔。\n     * 例如，给定[\"hello\",\"world\"],返回\"hello world\"。\n     *\n     * @param words 由若干个单词组成的列表\n     * @return 由若干个单词组成的字符串\n     */\n    public static String joinString(List<String> words) {\n        // 请实现这里\n        return null;\n    }\n\n    /**\n     * 给定一个由若干个单词组成的列表，返回一个由若干个单词组成的字符串，每个单词之间用逗号分隔，并在字符串的末尾添加一个句号。\n     * 例如，给定[\"hello\",\"world\"],返回\"hello,world.\"。\n     *\n     * @param words 由若干个单词组成的列表\n     * @return 由若干个单词组成的字符串\n     */\n    public static String joinStringWithComma(List<String> words) {\n        // 请实现这里\n        return null;\n    }\n\n    /**\n     * 给定一个由若干个单词组成的列表，返回一个由若干个单词组成的字符串，每个单词之间用逗号分隔，并在字符串的末尾添加一个句号。\n     * 例如，给定[\"hello\",\""}
{"ID": 93, "source": "Multi_HumanEval_java:HumanEval_java/96", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t\tList<Object> list = new ArrayList<Object>();\n\t\tif(n == 0) return list;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(isPrime(i)) list.add(i);\n\t\t}\n\t\treturn list;\n    }\n\t\n\tpublic static boolean isPrime(int n){\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(n % i == 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for(int i = 0; i < a.length - 1; i++){\n            if(a[i] == a[i + 1]){\n                count++;\n            }else{\n                if(count % 2!= 0){\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for(int i = 0; i < a.length - 1; i++){\n            if(a[i] == a[i + 1]){\n                count++;\n            }else{\n                if(count % 2!= 0){\n                    return a[i];\n                }\n                count = 1;\n            }"}
{"ID": 94, "source": "Multi_HumanEval_java:HumanEval_java/97", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t\t// your code here\n\t\tint result = 0;\n\t\tint a1 = a % 10;\n\t\tint b1 = b % 10;\n\t\tresult = a1 * b1;\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/RemoveElement.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.Arrays;\n\npublic class RemoveElement {\n    /**\n     * Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     * The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n     * Example 1:\n     * Given nums = [3,2,2,3], val = 3,\n     * Your function should return length = 2, with the first two elements of nums being 2.\n     * It doesn't matter what you leave beyond the returned length.\n     * Example 2:\n     * Given nums = [0,1,2,2,3,0,4,2], val = 2,\n     * Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n     * Note that the order of those five elements can be arbitrary.\n     * It doesn't matter what values are set beyond the returned length.\n     * Clarification:\n     * Confused why the returned value is an integer but your answer is an array?\n     * Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n     * Internally you can think of this:\n     * // nums is passed in by reference. (i.e., without making a copy)\n     * int len = removeElement(nums, val);\n     * // any modification to nums in your function would be known by the caller.\n     * // using the length returned by your function, it prints the first len elements.\n     * for (int i = 0; i < len; i++) {\n     * print(nums[i]);\n     * }\n     */\n    public static int removeElement"}
{"ID": 95, "source": "Multi_HumanEval_java:HumanEval_java/98", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++) {\n\t\t\tif(i % 2 == 0) {\n\t\t\t\tif(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/CountAndSay.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CountAndSay {\n    /**\n     * The count-and-say sequence is the sequence of integers with the first five terms as following:\n     * 1.     1\n     * 2.     11\n     * 3.     21\n     * 4.     1211\n     * 5.     111221\n     * 1 is read off as \"one 1\" or 11.\n     * 11 is read off as \"two 1s\" or 21.\n     * 21 is read off as \"one 2, then one 1\" or 1211.\n     * Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.\n     * Note: Each term of the sequence of integers will be represented as a string.\n     *\n     * Example 1:\n     * Input: 1\n     * Output: \"1\"\n     *\n     * Example 2:\n     * Input: 4\n     * Output: \"1211\"\n     */\n    public static String countAndSay(int n) {\n        if(n == 1) {\n            return \"1\";\n        }\n        String result = \"1\";\n        for(int i = 1; i < n; i++) {\n            result = countAndSay(result);\n        }\n        return result;\n    }\n\n    public static String countAndSay(String s) {\n        List<Character> list = new ArrayList<>();\n        int count = 1;\n        for(int i"}
{"ID": 96, "source": "Multi_HumanEval_java:HumanEval_java/99", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t\t// your code here\n\t\tdouble num = Double.parseDouble(value);\n\t\tint num1 = (int) num;\n\t\tint num2 = num1 + 1;\n\t\tint num3 = num1 - 1;\n\t\tdouble num4 = num - num1;\n\t\tdouble num5 = num2 - num;\n\t\tdouble num6 = num - num3;\n\t\tif (num4 < num5 && num4 < num6) {\n\t\t\treturn num1;\n\t\t} else if (num5 < num4 && num5 < num6) {\n\t\t\treturn num2;\n\t\t} else {\n\t\t\treturn num3;\n\t\t}\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * 5\n     *\n     * [10]\n     * 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * 1\n     *\n     * Notes\n     * It may help to think about the problem in terms of sets and set operations.\n     *\n     *\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for (int i = 0; i < a.length - 1; i++)"}
{"ID": 97, "source": "Multi_HumanEval_java:HumanEval_java/100", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t\tList<Integer> pile = new ArrayList<Integer>();\n\t\tint level = n;\n\t\twhile (level > 0) {\n\t\t\tpile.add(level);\n\t\t\tlevel = (level % 2 == 0)? level + 2 : level + 1;\n\t\t}\n\t\treturn pile;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLe"}
{"ID": 98, "source": "Multi_HumanEval_java:HumanEval_java/101", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t\t// your code here\n\t\tString[] words = s.split(\",|\\\\s\");\n\t\tList<Object> list = new ArrayList<Object>();\n\t\tfor(String word : words) {\n\t\t\tlist.add(word);\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * should return -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * should return 5\n     *\n     * [10]\n     * should return 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * should return 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * should return 1\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1,1,1,10,1]\n     * should return 1\n     *\n     * Good luck!\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for (int i = 0; i < seq.length - 1; i++) {\n            if (seq[i] == seq[i + 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return seq[i];\n                }\n                count = 1;\n            }\n        }"}
{"ID": 99, "source": "Multi_HumanEval_java:HumanEval_java/102", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t\t// TODO: implement this function\n\t\tint max = -1;\n\t\tfor(int i = x; i <= y; i++){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/UserServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.UserDao;\nimport com.example.demo.entity.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public List<User> findAll() {\n        return userDao.findAll();\n    }\n\n    @Override\n    public User findById(int id) {\n        return userDao.findById(id);\n    }\n\n    @Override\n    public void save(User user) {\n        userDao.save(user);\n    }\n\n    @Override\n    public void remove(int id) {\n        userDao.remove(id);\n    }\n}\n<file_sep>/src/main/java/com/example/demo/service/impl/ProductServiceImpl.java\npackage com.example.demo.service.impl;\n\nimport com.example.demo.dao.ProductDao;\nimport com.example.demo.entity.Product;\nimport com.example.demo.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class ProductServiceImpl implements ProductService {\n\n    @Autowired\n    private ProductDao productDao;\n\n    @Override\n    public List<Product> findAll() {\n        return productDao.findAll();\n    }\n\n    @Override\n    public Product findById(int id) {\n        return productDao.findById(id);\n    }\n\n    @Override\n    public void save(Product product) {\n        productDao.save(product);\n    }\n\n    @Override\n    public void remove(int id) {\n        productDao.remove(id);\n    }\n}\n<file_sep>/src/main/java/"}
{"ID": 100, "source": "Multi_HumanEval_java:HumanEval_java/103", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t\tif (n > m) return -1;\n\t\tint sum = 0;\n\t\tfor (int i = n; i <= m; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn Integer.toBinaryString(sum / (m - n + 1));\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLeapYear(2040"}
{"ID": 101, "source": "Multi_HumanEval_java:HumanEval_java/104", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t\t// your code here\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor(int i = 0; i < x.size(); i++){\n\t\t\tint num = x.get(i);\n\t\t\tint temp = num;\n\t\t\tint count = 0;\n\t\t\twhile(temp > 0){\n\t\t\t\tint digit = temp % 10;\n\t\t\t\tif(digit % 2 == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tif(count == 0){\n\t\t\t\tresult.add(num);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\n/**\n * Created by <NAME> on 11/12/16.\n */\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string S, find the longest palindromic substring in S.\n     * You may assume that the maximum length of S is 1000, and there\n     * exists one unique longest palindromic substring.\n     *\n     * Example:\n     * Input: \"babad\"\n     * Output: \"bab\"\n     * Note: \"aba\" is also a valid answer.\n     *\n     * Input: \"cbbd\"\n     * Output: \"bb\"\n     */\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right) {\n        int L = left"}
{"ID": 102, "source": "Multi_HumanEval_java:HumanEval_java/105", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1, 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (arr.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tCollections.sort(arr);\n\t\tCollections.reverse(arr);\n\t\tfor (Object i : arr) {\n\t\t\tif (i instanceof Integer) {\n\t\t\t\tint num = (int) i;\n\t\t\t\tif (num >= 1 && num <= 9) {\n\t\t\t\t\tresult.add(numToName(num));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static String numToName(int num) {\n\t\tString[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\t\treturn names[num - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int result = seq[0];\n        int count = 1;\n        for (int i = 1; i < seq.length; i++) {\n            if (seq[i] == result) {\n                count++;\n            } else {\n                if (count % 2 == 1) {\n                    return result;\n                }\n                result = seq[i];\n                count = 1;\n            }\n        }\n        if (count % 2 == 1) {\n            return result;\n        }\n        return 0;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] seq)"}
{"ID": 103, "source": "Multi_HumanEval_java:HumanEval_java/106", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t\tList<Integer> list = new ArrayList<>();\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tif(i % 2 == 0) {\n\t\t\t\tlist.add(factorial(i));\n\t\t\t} else {\n\t\t\t\tlist.add(sum(i));\n\t\t\t}\n\t\t}\n\t\treturn list;\n    }\n\t\n\tpublic static int factorial(int n) {\n\t\tint result = 1;\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tresult *= i;\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic static int sum(int n) {\n\t\tint result = 0;\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tresult += i;\n\t\t}\n\t\treturn result;\n\t}\n}\n<file_sep>/src/main/java/com/leetcode/easy/FizzBuzz.java\npackage com.leetcode.easy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by <NAME> on 2019-07-16.\n */\npublic class FizzBuzz {\n    /**\n     * Write a program that outputs the string representation of numbers from 1 to n.\n     * But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”.\n     * For numbers which are multiples of both three and five output “FizzBuzz”.\n     *\n     * Example:\n     * n = 15,\n     * Return:\n     * [\n     *     \"1\",\n     *     \"2\",\n     *     \"Fizz\",\n     *     \"4\",\n     *     \"Buzz\",\n     *     \"Fizz\",\n     *     \"7\",\n     *     \"8\",\n     *     \"Fizz\",\n     *     \"Buzz\",\n     *     \"11\",\n     *     \"Fizz\",\n     *     \"13\",\n     *     \"14\",\n     *     \"FizzBuzz\"\n     * ]\n     */\n    public static List<String> fizzBuzz(int n) {\n        List<String> list = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i %"}
{"ID": 104, "source": "Multi_HumanEval_java:HumanEval_java/107", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tint even = 0;\n\t\tint odd = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (isPalindrome(i)) {\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\teven++;\n\t\t\t\t} else {\n\t\t\t\t\todd++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult.add(even);\n\t\tresult.add(odd);\n\t\treturn result;\n    }\n\n    public static boolean isPalindrome(int n) {\n\t\tString s = String.valueOf(n);\n\t\tint i = 0;\n\t\tint j = s.length() - 1;\n\t\twhile (i < j) {\n\t\t\tif (s.charAt(i)!= s.charAt(j)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n    }\n\n    public static void main(String[] args) {\n\t\tint n = 12;\n\t\tList<Integer> result = evenOddPalindrome(n);\n\t\tSystem.out.println(result);\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LongestPalindromicSubstring {\n    /**\n     * * Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n     * Example 1:\n\n     *     Input: \"babad\"\n     *     Output: \"bab\"\n     *     Note: \"aba\" is also a valid answer.\n\n     * Example 2:\n\n     *     Input: \"cbbd\"\n     *     Output: \"bb\"\n\n     *\n     */\n    public static String longestPalindrome(String s) {\n\t\tif (s == null || s.length() == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tint maxLen = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tint len"}
{"ID": 105, "source": "Multi_HumanEval_java:HumanEval_java/108", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t\tint count = 0;\n\t\tfor (Object o : arr) {\n\t\t\tif (o instanceof Integer) {\n\t\t\t\tint num = (Integer) o;\n\t\t\t\tif (num > 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 能被4整除，不能被100整除； 2. 能被400整除；\n     *\n     * @param year 给定的年份数字\n     * @return 如果该年份是闰年，返回true，否则返回false\n     */\n    public static boolean isLeapYear(int year) {\n        if (year % 4 == 0 && year % 100!= 0) {\n            return true;\n        } else if (year % 400 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPrime(1));\n        System.out.println(isPrime(2));\n        System.out.println(isPrime(3));\n        System.out.println(isPrime(4));\n        System.out.println(isPrime(5));\n        System.out.println(isPrime(6));\n        System.out"}
{"ID": 106, "source": "Multi_HumanEval_java:HumanEval_java/109", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t\t// Write your code here\n        if(arr.size() == 0) return true;\n        int count = 0;\n        for(int i = 0; i < arr.size() - 1; i++){\n            if((int)arr.get(i) > (int)arr.get(i+1)){\n                count++;\n            }\n        }\n        if(count == 1) return true;\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/MoveZeroes.java\npackage com.interview.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Given an array nums, write a function to move all 0's to the end of it while\n * maintaining the relative order of the non-zero elements.\n *\n * Example:\n *\n * Input: [0,1,0,3,12]\n * Output: [1,3,12,0,0]\n * Note:\n *\n * You must do this in-place without making a copy of the array.\n * Minimize the total number of operations.\n */\npublic class MoveZeroes {\n    public static void main(String[] args) {\n        int[] nums = {0,1,0,3,12};\n        moveZeroes(nums);\n        System.out.println(Arrays.toString(nums));\n    }\n\n    public static void moveZeroes(int[] nums) {\n        int count = 0;\n        for(int i = 0; i < nums.length; i++){\n            if(nums[i]!= 0){\n                nums[count++] = nums[i];\n            }\n        }\n        while(count < nums.length){\n            nums[count++] = 0;\n        }\n    }\n}\n<file_sep>/src/main/java/com/interview/leetcode/easy/ReverseString.java\npackage com.interview.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Write a function that reverses a string. The input string is given as an array of characters char[].\n *\n * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n *\n * You may assume all the characters consist of printable"}
{"ID": 107, "source": "Multi_HumanEval_java:HumanEval_java/110", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t\t// Write your code here\n        int count = 0;\n        for(int i = 0; i < lst1.size(); i++){\n            if(lst1.get(i) % 2!= 0){\n                count++;\n            }\n        }\n        for(int i = 0; i < lst2.size(); i++){\n            if(lst2.get(i) % 2!= 0){\n                count++;\n            }\n        }\n        if(count % 2 == 0){\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/ReverseString.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.Arrays;\n\npublic class ReverseString {\n    /**\n     * Write a function that reverses a string. The input string is given as an array of characters char[].\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     * You may assume all the characters consist of printable ascii characters.\n     *\n     * Example 1:\n     * Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\n     * Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n     *\n     * Example 2:\n     * Input: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n     * Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n     */\n    public static void reverseString(char[] s) {\n        int left = 0;\n        int right = s.length - 1;\n        while(left < right){\n            char temp = s[left];\n            s[left] = s[right];\n            s[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] s = new char[]{'h','e','l','l','o'};\n        reverseString(s);\n        System.out.println(Arrays.toString(s));\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/ReverseInteger.java\npackage com.example.demo.leetcode.easy;\n\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse"}
{"ID": 108, "source": "Multi_HumanEval_java:HumanEval_java/111", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t\t// your code here\n\t\tMap<Character, Integer> map = new HashMap<Character, Integer>();\n\t\tchar[] arr = test.toCharArray();\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(map.containsKey(arr[i])){\n\t\t\t\tmap.put(arr[i], map.get(arr[i]) + 1);\n\t\t\t}else{\n\t\t\t\tmap.put(arr[i], 1);\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(Map.Entry<Character, Integer> entry : map.entrySet()){\n\t\t\tif(entry.getValue() > max){\n\t\t\t\tmax = entry.getValue();\n\t\t\t}\n\t\t}\n\t\tList<Character> list = new ArrayList<Character>();\n\t\tfor(Map.Entry<Character, Integer> entry : map.entrySet()){\n\t\t\tif(entry.getValue() == max){\n\t\t\t\tlist.add(entry.getKey());\n\t\t\t}\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 2017/1/17.\n */\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Example:\n     * findIt({20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5}) == 5\n     * findIt({1,1,2,-2,5,2,4,4,-1,-2,5}) == -1\n     * findIt({20,1,1,2,2,3,3,5,5,4,20,4,5}) == 5\n     * findIt({10}) == 10\n     * findIt({1,1,1,1,1,1,10,1,1,1,1}) == 10\n     * findIt({5,4,3,2"}
{"ID": 109, "source": "Multi_HumanEval_java:HumanEval_java/112", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tString res = \"\";\n\t\tboolean isPalindrome = true;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (!c.contains(s.charAt(i) + \"\")) {\n\t\t\t\tres += s.charAt(i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < res.length() / 2; i++) {\n\t\t\tif (res.charAt(i)!= res.charAt(res.length() - 1 - i)) {\n\t\t\t\tisPalindrome = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult.add(res);\n\t\tresult.add(isPalindrome);\n\t\treturn result;\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear"}
{"ID": 110, "source": "Multi_HumanEval_java:HumanEval_java/113", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tint count = 0;\n\t\t\tfor (int j = 0; j < lst.get(i).length(); j++) {\n\t\t\t\tif (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2!= 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    /**\n     * 给定两个数字a和b，返回a和b之间的数字之和。\n     *\n     * <p>例如，给定a = 1和b = 4，返回1 + 2 + 3 + 4 = 10。\n     *\n     * @param a 数字a\n     * @param b 数字b\n     * @return a和b之间的数字之和\n     */\n    public static int add(int a, int b) {\n        int sum = 0;\n        for (int i = a; i <= b; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main2.java\npackage com.github.hcsp.datatype;\n\npublic class Main2 {\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"1234321\"));\n        System.out.println(isPalindrome(\"12343211\"));\n        System.out.println(isPalindrome(\"12343212\"));\n    }\n\n    /**\n     * 判断一个字符串是否是回文字符串"}
{"ID": 111, "source": "Multi_HumanEval_java:HumanEval_java/114", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t\tlong min = 0;\n\t\tlong sum = 0;\n\t\tfor (Object num : nums) {\n\t\t\tsum += (long) num;\n\t\t\tif (sum < min) {\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseInteger.java\npackage com.leetcode.easy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by <NAME> on 10/12/16.\n */\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     * Example 1:\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n     */\n    public static int reverse(int x) {\n        List<Integer> list = new ArrayList<>();\n        int result = 0;\n        while (x!= 0) {\n            list.add(x % 10);\n            x = x / 10;\n        }\n        for (int i = 0; i < list.size(); i++) {\n            result += list.get(i) * Math.pow(10, list.size() - i - 1);\n        }\n        if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\n            return 0;\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 10/12/16.\n */\npublic class ReverseString {\n    /**\n     * Write a function that takes a string as input and returns the string reversed.\n     * Example:\n     * Given s ="}
{"ID": 112, "source": "Multi_HumanEval_java:HumanEval_java/115", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t\tint n = grid.size();\n\t\tint m = grid.get(0).size();\n\t\tint[][] dp = new int[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tdp[i][j] = grid.get(i).get(j);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (dp[i][j] == 1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tint left = 0;\n\t\t\t\tint right = 0;\n\t\t\t\tint up = 0;\n\t\t\t\tint down = 0;\n\t\t\t\tif (j > 0) {\n\t\t\t\t\tleft = dp[i][j - 1];\n\t\t\t\t}\n\t\t\t\tif (j < m - 1) {\n\t\t\t\t\tright = dp[i][j + 1];\n\t\t\t\t}\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tup = dp[i - 1][j];\n\t\t\t\t}\n\t\t\t\tif (i < n - 1) {\n\t\t\t\t\tdown = dp[i + 1][j];\n\t\t\t\t}\n\t\t\t\tint min = Math.min(left, Math.min(right, Math.min(up, down)));\n\t\t\t\tdp[i][j] = min + 1;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tres += dp[i][j];\n\t\t\t}\n\t\t}\n\t\treturn res;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by xiao on 2017/11/29.\n */\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string s, find the longest palindromic substring in s. You may assume that the maximum"}
{"ID": 113, "source": "Multi_HumanEval_java:HumanEval_java/116", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t\treturn arr.stream().sorted(Comparator.comparing(o -> {\n\t\t\tint count = 0;\n\t\t\tint num = (int) o;\n\t\t\twhile (num > 0) {\n\t\t\t\tif ((num & 1) == 1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tnum = num >> 1;\n\t\t\t}\n\t\t\treturn new int[]{count, (int) o};\n\t\t})).collect(Collectors.toList());\n\t}\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * 5\n     *\n     * [10]\n     * 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * 1\n     *\n     * Note:\n     * All tests will be given positive integers.\n     * Don't worry about time/space complexity.\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *"}
{"ID": 114, "source": "Multi_HumanEval_java:HumanEval_java/117", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t\t// your code here\n\t\tList<Object> list = new ArrayList<Object>();\n\t\tString[] words = s.split(\" \");\n\t\tfor(String word : words){\n\t\t\tif(word.length() == n){\n\t\t\t\tlist.add(word);\n\t\t\t}\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu6/FindTheOddInt.java\npackage com.codewars.kyu6;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * should return -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * should return 5\n     *\n     * [10]\n     * should return 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * should return 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * should return 1\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1,1,1,1]\n     * should return 10\n     *\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for(int i = 0; i < seq.length - 1; i++){\n            if(seq[i] == seq[i+1]){\n                count++;\n            }else{\n                if(count % 2!= 0){\n                    return seq[i];\n                }\n                count = 1;\n            }\n        }\n        return seq"}
{"ID": 115, "source": "Multi_HumanEval_java:HumanEval_java/118", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t\t// your code here\n\t\tString vowels = \"aeiou\";\n\t\tString result = \"\";\n\t\tint index = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tif (vowels.indexOf(word.charAt(i))!= -1) {\n\t\t\t\tif (i > index) {\n\t\t\t\t\tif (i - index < min) {\n\t\t\t\t\t\tmin = i - index;\n\t\t\t\t\t\tresult = word.charAt(i) + \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\n/**\n * Created by <NAME> on 11/12/16.\n */\npublic class LongestPalindromicSubstring {\n    /**\n     * Given a string S, find the longest palindromic substring in S.\n     * You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.\n     *\n     * Example:\n     * Input: \"babad\"\n     * Output: \"bab\"\n     * Note: \"aba\" is also a valid answer.\n     *\n     * Input: \"cbbd\"\n     * Output: \"bb\"\n     */\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    private static int expandAroundCenter(String s, int left, int right) {\n        int L = left;\n        int R = right"}
{"ID": 116, "source": "Multi_HumanEval_java:HumanEval_java/119", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t\t// your code here\n\t\tStack<String> stack = new Stack<String>();\n\t\tfor(String s : lst) {\n\t\t\tif(s.equals(\"(\")) {\n\t\t\t\tstack.push(s);\n\t\t\t} else {\n\t\t\t\tif(stack.isEmpty()) {\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\tif(stack.isEmpty()) {\n\t\t\treturn \"Yes\";\n\t\t} else {\n\t\t\treturn \"No\";\n\t\t}\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class ReverseString {\n    /**\n     * Write a function that takes a string as input and returns the string reversed.\n     *\n     * Example:\n     * Given s = \"hello\", return \"olleh\".\n     */\n    public static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while(i < j) {\n            char temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverseString(\"hello\"));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseInteger.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     *\n     * Example 1:\n     *\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     *\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     *\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range"}
{"ID": 117, "source": "Multi_HumanEval_java:HumanEval_java/120", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t\tPriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tif (pq.size() < k) {\n\t\t\t\tpq.add(arr.get(i));\n\t\t\t} else if (pq.peek() < arr.get(i)) {\n\t\t\t\tpq.poll();\n\t\t\t\tpq.add(arr.get(i));\n\t\t\t}\n\t\t}\n\t\tList<Object> result = new ArrayList<Object>();\n\t\twhile (!pq.isEmpty()) {\n\t\t\tresult.add(pq.poll());\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/MinimumWindowSubstring.java\npackage com.leetcode.medium;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n *\n * Example:\n *\n * Input: S = \"ADOBECODEBANC\", T = \"ABC\"\n * Output: \"BANC\"\n * Note:\n *\n * If there is no such window in S that covers all characters in T, return the empty string \"\".\n * If there is such window, you are guaranteed that there will always be only one unique minimum window in S.\n */\npublic class MinimumWindowSubstring {\n    public static String minWindow(String s, String t) {\n        if (s == null || t == null || s.length() == 0 || t.length() == 0) {\n            return \"\";\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < t.length(); i++) {\n            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) + 1);\n        }\n        int left = 0, right = 0, count = 0, min = Integer.MAX_VALUE, start = 0;\n        while (right < s.length()) {\n            char c = s.charAt(right);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n                if"}
{"ID": 118, "source": "Multi_HumanEval_java:HumanEval_java/121", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < lst.size(); i++){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codeeval/easy/ReverseWords.java\npackage com.codeeval.easy;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Write a program to reverse the words of an input sentence.\n     * \n     * Input sample:\n     * \n     * The first argument is a file that contains multiple sentences, one per line. Empty lines are also possible.\n     * \n     * Output sample:\n     * \n     * Print to stdout each sentence with the reversed words in it, one per line. Empty lines in the input should be ignored. Ensure that there are no trailing empty spaces in each line you print.\n     * \n     * For example:\n     * \n     * How are you doing today?\n     * today doing you are How?\n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     *"}
{"ID": 119, "source": "Multi_HumanEval_java:HumanEval_java/122", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tint num = arr.get(i);\n\t\t\tif (num < 100) {\n\t\t\t\tsum += num;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n\n    public static void main(String[] args) {\n\t\tList<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n\t\tint k = 4;\n\t\tSystem.out.println(addElements(arr, k));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\nimport java.util.Arrays;\n\n/**\n * Given a string s, reverse the string according to the following rules:\n *\n * All the characters that are not English letters remain in the same position.\n * All the English letters (lowercase or uppercase) should be reversed.\n * Return s after reversing it.\n *\n * Example 1:\n *\n * Input: s = \"ab-cd\"\n * Output: \"dc-ba\"\n * Example 2:\n *\n * Input: s = \"a-bC-dEf-ghIj\"\n * Output: \"j-Ih-gfE-dCba\"\n * Example 3:\n *\n * Input: s = \"Test1ng-Leet=code-Q!\"\n * Output: \"Qedo1ct-eeLg=ntse-T!\"\n *\n * Constraints:\n *\n * 1 <= s.length <= 100\n * s consists of characters with ASCII values in the range [33, 122].\n * s does not contain '\\\"' or '\\\\'.\n */\npublic class ReverseString {\n    public static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (i < j) {\n            if (!Character.isLetter(chars[i])) {\n                i++;\n            } else if (!Character.isLetter(chars[j])) {\n                j--;\n            } else {\n                char temp = chars[i];\n                chars[i"}
{"ID": 120, "source": "Multi_HumanEval_java:HumanEval_java/123", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tif (n <= 0) {\n\t\t\treturn list;\n\t\t}\n\t\tlist.add(1);\n\t\tint i = 1;\n\t\twhile (i < n) {\n\t\t\ti = i * 3 + 1;\n\t\t\tlist.add(i);\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindTheDifference.java\npackage com.leetcode.medium;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by yuanyuan on 11/12/16.\n */\npublic class FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     *\n     * String t is generated by random shuffling string s and then add one more letter at a random position.\n     *\n     * Find the letter that was added in t.\n     *\n     * Example:\n     *\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public char findTheDifference(String s, String t) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < t.length(); i++) {\n            char c = t.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n            } else {\n                return c;\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue()!= 0) {\n                return entry.getKey();\n            }\n        }\n        return'';\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindTheDuplicateNumber.java\n"}
{"ID": 121, "source": "Multi_HumanEval_java:HumanEval_java/124", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t\t// Write your code here\n\t\tString[] dateArray = date.split(\"-\");\n\t\tint month = Integer.parseInt(dateArray[0]);\n\t\tint day = Integer.parseInt(dateArray[1]);\n\t\tint year = Integer.parseInt(dateArray[2]);\n\t\tif(month < 1 || month > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif(day < 1 || day > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\t\t\tif(day > 31) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif(month == 4 || month == 6 || month == 9 || month == 11) {\n\t\t\tif(day > 30) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif(month == 2) {\n\t\t\tif(year % 4 == 0) {\n\t\t\t\tif(day > 29) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(day > 28) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/interview/practice/leetcode/easy/ValidParentheses.java\npackage com.interview.practice.leetcode.easy;\n\nimport java.util.Stack;\n\npublic class ValidParentheses {\n    /**\n     * Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n     *\n     * An input string is valid if:\n     *\n     * Open brackets must be closed by the same type of brackets.\n     * Open brackets must be closed in the correct order.\n     * Note that an empty string is also considered valid.\n     *\n     * Example 1:\n     *\n     * Input: \"()\"\n     * Output: true\n     * Example 2:\n     *\n     * Input: \"()[]{}\"\n     * Output: true\n     * Example 3:\n     *\n     * Input: \"(]\"\n     * Output: false\n     * Example 4:\n     *\n     * Input:"}
{"ID": 122, "source": "Multi_HumanEval_java:HumanEval_java/125", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t\tString[] words = txt.split(\" \");\n\t\tif (words.length == 1) {\n\t\t\tint count = 0;\n\t\t\tfor (int i = 0; i < txt.length(); i++) {\n\t\t\t\tif (txt.charAt(i) % 2 == 1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\t\treturn words;\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n        System.out.println(add(100, 2));\n        System.out.println(add(1000, 2));\n        System.out.println(add(10000, 2));\n        System.out.println(add(100000, 2));\n        System.out.println(add(1000000, 2));\n        System.out.println(add(10000000, 2));\n        System.out.println(add(100000000, 2));\n        System.out.println(add(1000000000, 2));\n        System.out.println(add(10000000000L, 2));\n        System.out.println(add(100000000000L, 2));\n        System.out.println(add(1000000000000L, 2));\n        System.out.println(add(10000000000000L, 2));\n        System.out.println(add(100000000000000L, 2));\n        System.out.println(add(1000000000000000L, 2));\n        System.out."}
{"ID": 123, "source": "Multi_HumanEval_java:HumanEval_java/126", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t\tif (lst.size() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst.get(i) instanceof Integer) {\n\t\t\t\tif ((Integer) lst.get(i) > (Integer) lst.get(i + 1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (lst.get(i) instanceof Double) {\n\t\t\t\tif ((Double) lst.get(i) > (Double) lst.get(i + 1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有public属性和public方法\n     *\n     * @param clazz 给定的类\n     * @return 属性和方法的字符串\n     * @throws InvocationTargetException\n     * @throws IllegalAccessException\n     */\n    public static String getPublicMembers(Class<?> clazz)\n            throws InvocationTargetException, IllegalAccessException {\n        StringBuilder sb = new StringBuilder();\n        for (Field field : clazz.getFields()) {\n            sb.append(field.getName()).append(\"\\n\");\n        }\n        for (Method method : clazz.getMethods()) {\n            sb.append(method.getName()).append(\"\\n\");\n        }\n        return sb.toString();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClassLoader.java\npackage com.github.hcsp.reflection;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class MyClassLoader extends ClassLoader {\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        try {\n            File file = new File(name + \".class\");\n            InputStream is = new FileInputStream(file);\n            byte[] bytes = new byte[(int) file.length()];\n            is"}
{"ID": 124, "source": "Multi_HumanEval_java:HumanEval_java/127", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t\t// write your code here\n\t\tint start1 = interval1.get(0);\n\t\tint end1 = interval1.get(1);\n\t\tint start2 = interval2.get(0);\n\t\tint end2 = interval2.get(1);\n\t\tint start = Math.max(start1, start2);\n\t\tint end = Math.min(end1, end2);\n\t\tif (start > end) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\tint length = end - start + 1;\n\t\tif (length == 1) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\tfor (int i = 2; i <= length / 2; i++) {\n\t\t\tif (length % i == 0) {\n\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t\treturn \"YES\";\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindTheDuplicateNumber.java\npackage com.leetcode.medium;\n\nimport java.util.Arrays;\n\n/**\n * Created by yuanyuan on 2017/11/29.\n */\npublic class FindTheDuplicateNumber {\n    /**\n     * Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive),\n     * prove that at least one duplicate number must exist. Assume that there is only one duplicate number,\n     * find the duplicate one.\n     *\n     * Example 1:\n     *\n     * Input: [1,3,4,2,2]\n     * Output: 2\n     * Example 2:\n     *\n     * Input: [3,1,3,4,2]\n     * Output: 3\n     * Note:\n     *\n     * You must not modify the array (assume the array is read only).\n     * You must use only constant, O(1) extra space.\n     * Your runtime complexity should be less than O(n2).\n     * There is only one duplicate number in the array, but it could be repeated more than once.\n     */\n    public int findDuplicate(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] == nums[i - 1]) {\n                return nums[i];\n            }\n       "}
{"ID": 125, "source": "Multi_HumanEval_java:HumanEval_java/128", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t\tif (arr == null || arr.size() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tint prod = 1;\n\t\tint sum = 0;\n\t\tfor (Object o : arr) {\n\t\t\tif (o instanceof Integer) {\n\t\t\t\tint i = (Integer) o;\n\t\t\t\tprod *= Math.signum(i);\n\t\t\t\tsum += Math.abs(i);\n\t\t\t}\n\t\t}\n\t\treturn prod * sum;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有字段名。\n     *\n     * <p>例如，返回值应该是：[\"name\", \"age\"]\n     *\n     * @param clazz 给定的类\n     * @return 字段名数组\n     */\n    public static String[] getFieldNames(Class<?> clazz) {\n        Field[] fields = clazz.getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            fieldNames[i] = fields[i].getName();\n        }\n        return fieldNames;\n    }\n\n    /**\n     * 给定一个类，返回它的所有父类名。\n     *\n     * <p>例如，返回值应该是：[\"java.lang.Object\", \"java.util.Arrays\", \"java.util.List\"]\n     *\n     * @param clazz 给定的类\n     * @return 父类名数组\n     */\n    public static String[] getParentClassNames(Class<?> clazz) {\n        List<String> parentClassNames = Arrays.asList(clazz.getSuperclass().getName());\n        while (clazz.getSuperclass()!= null) {\n            clazz = clazz.getSuperclass();\n            parentClassNames.add(clazz.getName());\n        }\n        return parentClassNames.toArray(new String[0]);\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public String name;\n    public int age"}
{"ID": 126, "source": "Multi_HumanEval_java:HumanEval_java/129", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t\tint n = grid.size();\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tdp[0][0] = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid.get(i).get(j));\n\t\t\t\t}\n\t\t\t\tif (j > 0) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + grid.get(i).get(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[][] path = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tpath[i][j] = -1;\n\t\t\t}\n\t\t}\n\t\tpath[0][0] = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (i > 0 && dp[i - 1][j] + grid.get(i).get(j) == dp[i][j]) {\n\t\t\t\t\tpath[i][j] = 1;\n\t\t\t\t}\n\t\t\t\tif (j > 0 && dp[i][j - 1] + grid.get(i).get(j) == dp[i][j]) {\n\t\t\t\t\tpath[i][j] = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<Integer> res = new ArrayList<>();\n\t\tint i = n - 1, j = n - 1;\n\t\twhile (k > 0) {\n\t\t\tres.add(grid.get(i).get(j));\n\t\t\tif (path"}
{"ID": 127, "source": "Multi_HumanEval_java:HumanEval_java/130", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t\t// write your code here\n        List<Number> res = new ArrayList<Number>();\n        if (n == 0) {\n            return res;\n        }\n        res.add(1);\n        if (n == 1) {\n            return res;\n        }\n        res.add(3);\n        if (n == 2) {\n            return res;\n        }\n        int i = 2;\n        while (i < n) {\n            if (i % 2 == 0) {\n                res.add(1 + i / 2);\n            } else {\n                res.add(res.get(i - 1) + res.get(i - 2) + res.get(i + 1));\n            }\n            i++;\n        }\n        return res;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindrome.java\npackage com.leetcode.medium;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by yuanyuan on 10/12/16.\n */\npublic class LongestPalindrome {\n    /**\n     * Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n     *\n     * Example:\n     *\n     * Input: \"babad\"\n     *\n     * Output: \"bab\"\n     *\n     * Note: \"aba\" is also a valid answer.\n     * Example:\n     *\n     * Input: \"cbbd\"\n     *\n     * Output: \"bb\"\n     */\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int len = s.length();\n        int maxLen = 1;\n        int start = 0;\n        boolean[][] dp = new boolean[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = true;\n        }\n        for (int i = 0; i < len - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                dp[i][i + 1] = true;\n                start = i;\n                maxLen = 2;\n            }\n       "}
{"ID": 128, "source": "Multi_HumanEval_java:HumanEval_java/131", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t\t// your code here\n\t\tint product = 1;\n\t\twhile (n > 0) {\n\t\t\tint digit = n % 10;\n\t\t\tif (digit % 2 == 1) {\n\t\t\t\tproduct *= digit;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\treturn product;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println("}
{"ID": 129, "source": "Multi_HumanEval_java:HumanEval_java/132", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tchar c = string.charAt(i);\n\t\t\tif (c == '[') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ']') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2026));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println"}
{"ID": 130, "source": "Multi_HumanEval_java:HumanEval_java/133", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t\tint sum = 0;\n\t\tfor(Number n : lst){\n\t\t\tsum += Math.ceil(n.doubleValue()) * Math.ceil(n.doubleValue());\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codefights/arcade/intro/level02/centuryFromYear.java\npackage com.codefights.arcade.intro.level02;\n\nimport java.util.Scanner;\n\npublic class centuryFromYear {\n    /**\n     * Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100,\n     * the second - from the year 101 up to and including the year 200, etc.\n     *\n     * Example\n     *\n     * For year = 1905, the output should be\n     * centuryFromYear(year) = 20;\n     * For year = 1700, the output should be\n     * centuryFromYear(year) = 17.\n     *\n     * Input/Output\n     *\n     * [execution time limit] 3 seconds (java)\n     *\n     * [input] integer year\n     *\n     * A positive integer, designating the year.\n     *\n     * Guaranteed constraints:\n     * 1 ≤ year ≤ 2005.\n     *\n     * [output] integer\n     *\n     * The number of the century the year is in.\n     */\n    public static int centuryFromYear(int year) {\n        return (year + 99) / 100;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int year = in.nextInt();\n        int result = centuryFromYear(year);\n        System.out.println(result);\n    }\n}\n<file_sep>/src/main/java/com/codefights/arcade/intro/level02/adjacentElementsProduct.java\npackage com.codefights.arcade.intro.level02;\n\nimport java.util.Scanner;\n\npublic class adjacentElementsProduct {\n    /**\n     * Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.\n     *\n     * Example"}
{"ID": 131, "source": "Multi_HumanEval_java:HumanEval_java/134", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t\tif (txt.length() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tchar lastChar = txt.charAt(txt.length() - 1);\n\t\treturn Character.isLetter(lastChar);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(checkIfLastCharIsALetter(\"apple pie\"));\n\t\tSystem.out.println(checkIfLastCharIsALetter(\"apple pi e\"));\n\t\tSystem.out.println(checkIfLastCharIsALetter(\"apple pi e \"));\n\t\tSystem.out.println(checkIfLastCharIsALetter(\"\"));\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(3, 2));\n        System.out.println(add(5, 2));\n    }\n\n    // 请在这里编写一个add方法，满足上述要求\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println("}
{"ID": 132, "source": "Multi_HumanEval_java:HumanEval_java/135", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t\tint n = arr.size();\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcount[i] = 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (arr.get(i) instanceof Integer) {\n\t\t\t\t\tif (((Integer) arr.get(i)).intValue() > ((Integer) arr.get(j)).intValue()) {\n\t\t\t\t\t\tcount[i]++;\n\t\t\t\t\t}\n\t\t\t\t} else if (arr.get(i) instanceof String) {\n\t\t\t\t\tif (((String) arr.get(i)).compareTo((String) arr.get(j)) > 0) {\n\t\t\t\t\t\tcount[i]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] > max) {\n\t\t\t\tmax = count[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/problems/easy/FindTheDifference.java\npackage com.leetcode.problems.easy;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     *\n     * String t is generated by random shuffling string s and then add one more\n     * letter at a random position.\n     *\n     * Find the letter that was added in t.\n     *\n     * Example:\n     *\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public char findTheDifference(String s, String t) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c))"}
{"ID": 133, "source": "Multi_HumanEval_java:HumanEval_java/136", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tint max = Integer.MIN_VALUE;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (Object o : lst) {\n\t\t\tif (o instanceof Integer) {\n\t\t\t\tint i = (Integer) o;\n\t\t\t\tif (i < 0 && i > max) {\n\t\t\t\t\tmax = i;\n\t\t\t\t}\n\t\t\t\tif (i > 0 && i < min) {\n\t\t\t\t\tmin = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (max == Integer.MIN_VALUE) {\n\t\t\tmax = null;\n\t\t}\n\t\tif (min == Integer.MAX_VALUE) {\n\t\t\tmin = null;\n\t\t}\n\t\tresult.add(max);\n\t\tresult.add(min);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/Reflection.java\npackage com.github.hcsp.reflection;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class Reflection {\n    /**\n     * 给定一个类，返回它的所有public属性和public方法，并调用他们。\n     *\n     * @param clazz 给定的类\n     * @param <T>   给定的类\n     * @return 属性和方法的字符串\n     * @throws InvocationTargetException 调用方法时抛出的异常\n     * @throws IllegalAccessException    访问属性时抛出的异常\n     */\n    public static <T> String reflect(Class<T> clazz) throws InvocationTargetException, IllegalAccessException {\n        StringBuilder sb = new StringBuilder();\n        for (Field field : clazz.getFields()) {\n            sb.append(field.getName()).append(\":\").append(field.get(null)).append(\"\\n\");\n        }\n        for (Method method : clazz.getMethods()) {\n            sb.append(method.getName()).append(\":\").append(method.invoke(null)).append(\"\\n\");\n        }\n        return sb.toString();\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/reflection/MyClass.java\npackage com.github.hcsp.reflection;\n\npublic class MyClass {\n    public static final String NAME = \"MyClass\";\n    public static final int NUMBER = "}
{"ID": 134, "source": "Multi_HumanEval_java:HumanEval_java/137", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be. or,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t\tif (a instanceof Integer && b instanceof Integer) {\n\t\t\treturn (Integer) a > (Integer) b? a : b;\n\t\t} else if (a instanceof Float && b instanceof Float) {\n\t\t\treturn (Float) a > (Float) b? a : b;\n\t\t} else if (a instanceof String && b instanceof String) {\n\t\t\treturn ((String) a).compareTo((String) b) > 0? a : b;\n\t\t} else if (a instanceof Integer && b instanceof Float) {\n\t\t\treturn (Integer) a > (Float) b? a : b;\n\t\t} else if (a instanceof Integer && b instanceof String) {\n\t\t\treturn (Integer) a > Float.parseFloat((String) b)? a : b;\n\t\t} else if (a instanceof Float && b instanceof Integer) {\n\t\t\treturn (Float) a > (Integer) b? a : b;\n\t\t} else if (a instanceof Float && b instanceof String) {\n\t\t\treturn (Float) a > Float.parseFloat((String) b)? a : b;\n\t\t} else if (a instanceof String && b instanceof Integer) {\n\t\t\treturn Float.parseFloat((String) a) > (Integer) b? a : b;\n\t\t} else if (a instanceof String && b instanceof Float) {\n\t\t\treturn Float.parseFloat((String) a) > (Float) b? a : b;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(compareOne(1, 2.5));\n\t\tSystem.out.println(compareOne(1, \"2,3\"));\n\t\tSystem.out.println(compareOne(\"5,1\", \"6\"));\n\t\tSystem.out.println(compareOne(\"1\", 1));\n\t}\n}\n<file_sep>/src/main/java/com/java/practice/codewars/kyu7/FindTheOddInt.java\npackage com.java.practice.codewars.kyu7;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 10/12/2017.\n */\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of"}
{"ID": 135, "source": "Multi_HumanEval_java:HumanEval_java/138", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t\t// your code here\n        if(n%2!=0) return false;\n        int a=n/2;\n        int b=n/2;\n        int c=n/2;\n        int d=n/2;\n        if(a+b+c+d==n) return true;\n        else return false;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/IsomorphicStrings.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class IsomorphicStrings {\n    /**\n     * Given two strings s and t, determine if they are isomorphic.\n     * Two strings are isomorphic if the characters in s can be replaced to get t.\n     * All occurrences of a character must be replaced with another character while preserving the order of characters.\n     * No two characters may map to the same character but a character may map to itself.\n     *\n     * Example 1:\n     * Input: s = \"egg\", t = \"add\"\n     * Output: true\n     *\n     * Example 2:\n     * Input: s = \"foo\", t = \"bar\"\n     * Output: false\n     *\n     * Example 3:\n     * Input: s = \"paper\", t = \"title\"\n     * Output: true\n     *\n     * Note:\n     * You may assume both s and t have the same length.\n     */\n    public static boolean isIsomorphic(String s, String t) {\n        if(s.length()!=t.length()) return false;\n        Map<Character,Character> map = new HashMap<>();\n        for(int i=0;i<s.length();i++){\n            if(map.containsKey(s.charAt(i))){\n                if(map.get(s.charAt(i))!=t.charAt(i)) return false;\n            }else{\n                if(map.containsValue(t.charAt(i))) return false;\n                map.put(s.charAt(i),t.charAt(i));\n            }\n        }\n        return true;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/FindTheDifference.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.HashMap;\nimport java.util.Map;"}
{"ID": 136, "source": "Multi_HumanEval_java:HumanEval_java/139", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t\tlong result = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tresult *= i;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int result = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (i == 0) {\n                result = a[i];\n            } else {\n                if (a[i] == a[i - 1]) {\n                    continue;\n                } else {\n                    result = a[i];\n                }\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int result = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (i == 0) {\n                result = a[i];\n            } else {\n                if (a[i] == a[i - 1]) {\n                    continue;\n                } else {\n                    result = a[i];\n                }\n            }\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears"}
{"ID": 137, "source": "Multi_HumanEval_java:HumanEval_java/140", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t\t// your code here\n\t\tString result = \"\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < text.length(); i++){\n\t\t\tif(text.charAt(i) ==''){\n\t\t\t\tcount++;\n\t\t\t\tif(count == 1){\n\t\t\t\t\tresult += \"_\";\n\t\t\t\t}\n\t\t\t\telse if(count == 2){\n\t\t\t\t\tresult += \"-\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult += text.charAt(i);\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/example/demo/leetcode/easy/RemoveDuplicatesFromSortedArray.java\npackage com.example.demo.leetcode.easy;\n\nimport java.util.Arrays;\n\npublic class RemoveDuplicatesFromSortedArray {\n    /**\n     * Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n     * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n     *\n     * Example 1:\n     * Given nums = [1,1,2],\n     * Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\n     * It doesn't matter what you leave beyond the returned length.\n     *\n     * Example 2:\n     * Given nums = [0,0,1,1,1,2,2,3,3,4],\n     * Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\n     * It doesn't matter what values are set beyond the returned length.\n     *\n     * Clarification:\n     * Confused why the returned value is an integer but your answer is an array?\n     * Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n     * Internally you can think of this:\n     *\n     * // nums is passed in by reference. (i.e., without making a copy)\n     * int len = removeDuplicates(nums);\n     *\n     * // any modification to nums in your function would be known by the caller.\n    "}
{"ID": 138, "source": "Multi_HumanEval_java:HumanEval_java/141", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t\t// Write your code here\n\t\tString[] split = fileName.split(\"\\\\.\");\n\t\tif(split.length!= 2) return \"No\";\n\t\tif(split[0].length() == 0) return \"No\";\n\t\tif(split[0].matches(\"[a-zA-Z]+\")) {\n\t\t\tif(split[1].matches(\"txt|exe|dll\")) return \"Yes\";\n\t\t}\n\t\treturn \"No\";\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/datatype/Main.java\npackage com.github.hcsp.datatype;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(add(1, 2));\n        System.out.println(add(1, 2, 3));\n        System.out.println(add(1, 2, 3, 4));\n        System.out.println(add(1, 2, 3, 4, 5));\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的奇数。\n     *\n     * <p>例如，给定的整数数组为{9, 3, 1, 10}，返回10。\n     *\n     * <p>如果数组中不包含任何奇数，返回-1。\n     *\n     * @param nums 给定的整数数组\n     * @return 数组中最大的奇数\n     */\n    public static int maxOddNumberInArray(int[] nums) {\n        int max = -1;\n        for (int num : nums) {\n            if (num % 2 == 1 && num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    /**\n     * 给定一个整数数组，返回数组中最大的奇数。\n     *\n     * <p>例如，给定的整数数组为{9, 3, 1, 10}，返回10。\n     *\n     * <p>如果数组中不包含任何奇数，返回-1。\n     *\n     * @param nums 给定的整数数组\n     * @return 数组中最大的奇数\n     */\n    public static int maxOddNumberInArray2(int[] nums) {\n        int max = -1;\n        for (int num : nums) {"}
{"ID": 139, "source": "Multi_HumanEval_java:HumanEval_java/142", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < lst.size(); i++){\n\t\t\tif(i % 3 == 0){\n\t\t\t\tsum += Math.pow((int)lst.get(i), 2);\n\t\t\t}\n\t\t\telse if(i % 4 == 0){\n\t\t\t\tsum += Math.pow((int)lst.get(i), 3);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum += (int)lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codefights/arcade/intro/level01/AddTwoDigits.java\npackage com.codefights.arcade.intro.level01;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddTwoDigits {\n    /**\n     * \"\n     * Given a two-digit integer n, return the sum of its digits.\n     * \n     * Example:\n     * For n = 29, the output should be 11\n     * \n     * Explanation: 2 + 9 = 11.\n     *\n     */\n    public static int addTwoDigits(int n) {\n\t\tint sum = 0;\n\t\tString num = Integer.toString(n);\n\t\tfor(int i = 0; i < num.length(); i++){\n\t\t\tsum += Integer.parseInt(num.substring(i, i+1));\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codefights/arcade/intro/level01/Candies.java\npackage com.codefights.arcade.intro.level01;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Candies {\n    /**\n     * \"\n     * n children have got m pieces of candy. They want to eat as much candy as they can, but each child must eat exactly the same amount of candy as any other child. Determine how many pieces of candy will be eaten by all the children together. Individual pieces of candy cannot be split.\n     * \n     * Example:\n     * For n = 3 and"}
{"ID": 140, "source": "Multi_HumanEval_java:HumanEval_java/143", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t\tString[] words = sentence.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (String word : words) {\n\t\t\tif (isPrime(word.length())) {\n\t\t\t\tsb.append(word).append(\" \");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString().trim();\n    }\n\n    public static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n\n    public static void main(String[] args) {\n\t\tSystem.out.println(wordsInSentence(\"This is a test\"));\n\t\tSystem.out.println(wordsInSentence(\"lets go for swimming\"));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LongestPalindromicSubstring {\n    /**\n     * Given a string s, return the longest palindromic substring in s.\n\n     * Example 1:\n     *     Input: s = \"babad\"\n     *     Output: \"bab\"\n     *     Note: \"aba\" is also a valid answer.\n\n     * Example 2:\n     *     Input: s = \"cbbd\"\n     *     Output: \"bb\"\n\n     * Constraints:\n     *     * 1 <= s.length <= 1000\n     *     * s consist of only digits and English letters.\n     *\n     */\n    public static String longestPalindrome(String s) {\n\t\tint n = s.length();\n\t\tint maxLen = 0;\n\t\tint start = 0;\n\t\tboolean[][] dp = new boolean[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = true;\n\t\t}\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tif (s.charAt(i) == s.charAt(i + 1)) {"}
{"ID": 141, "source": "Multi_HumanEval_java:HumanEval_java/144", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t\t// Write your code here\n        int x_numerator = Integer.parseInt(x.split(\"/\")[0]);\n        int x_denominator = Integer.parseInt(x.split(\"/\")[1]);\n        int n_numerator = Integer.parseInt(n.split(\"/\")[0]);\n        int n_denominator = Integer.parseInt(n.split(\"/\")[1]);\n        int x_n_numerator = x_numerator * n_numerator;\n        int x_n_denominator = x_denominator * n_denominator;\n        if (x_n_numerator % x_n_denominator == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestPalindromicSubstring.java\npackage com.leetcode.medium;\n\n/**\n * Created by <NAME> on 10/12/17.\n */\npublic class LongestPalindromicSubstring {\n    public static void main(String[] args) {\n        System.out.println(longestPalindrome(\"babad\"));\n    }\n\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int maxLen = 0;\n        String maxPalindrome = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            String palindrome = expandAroundCenter(s, i, i);\n            if (palindrome.length() > maxLen) {\n                maxLen = palindrome.length();\n                maxPalindrome = palindrome;\n            }\n            palindrome = expandAroundCenter(s, i, i + 1);\n            if (palindrome.length() > maxLen) {\n                maxLen = palindrome.length();\n                maxPalindrome = palindrome;\n            }\n        }\n        return maxPalindrome;\n    }\n\n    private static String expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n        return s.substring(left + 1, right);\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/LongestSubstringWithoutRepeatingCharacters.java"}
{"ID": 142, "source": "Multi_HumanEval_java:HumanEval_java/145", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tif (nums.size() == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tList<Object> temp = new ArrayList<Object>();\n\t\tfor (Object num : nums) {\n\t\t\ttemp.add(num);\n\t\t}\n\t\tCollections.sort(temp, new Comparator<Object>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\tint sum1 = 0;\n\t\t\t\tint sum2 = 0;\n\t\t\t\tif (o1 instanceof Integer) {\n\t\t\t\t\tsum1 = sumOfDigits((Integer) o1);\n\t\t\t\t} else if (o1 instanceof String) {\n\t\t\t\t\tsum1 = sumOfDigits(Integer.parseInt((String) o1));\n\t\t\t\t}\n\t\t\t\tif (o2 instanceof Integer) {\n\t\t\t\t\tsum2 = sumOfDigits((Integer) o2);\n\t\t\t\t} else if (o2 instanceof String) {\n\t\t\t\t\tsum2 = sumOfDigits(Integer.parseInt((String) o2));\n\t\t\t\t}\n\t\t\t\tif (sum1 == sum2) {\n\t\t\t\t\treturn temp.indexOf(o1) - temp.indexOf(o2);\n\t\t\t\t}\n\t\t\t\treturn sum1 - sum2;\n\t\t\t}\n\t\t});\n\t\tfor (Object num : temp) {\n\t\t\tresult.add(num);\n\t\t}\n\t\treturn result;\n    }\n\n\tpublic static int sumOfDigits(int num) {\n\t\tint sum = 0;\n\t\twhile (num > 0) {\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tList<Object> nums = new ArrayList<Object>();\n\t\tnums.add(1);\n\t\tnums.add(11);\n\t\tnums.add(-1);\n\t\tnums.add(-11);\n\t\tnums.add(-12);\n\t\tSystem.out.println(orderByPoints(nums));\n\t}\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out"}
{"ID": 143, "source": "Multi_HumanEval_java:HumanEval_java/146", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.size(); i++) {\n\t\t\tif(nums.get(i) instanceof Integer) {\n\t\t\t\tint num = (int) nums.get(i);\n\t\t\t\tif(num > 10 && num % 10 % 2 == 1 && num / 10 % 2 == 1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println"}
{"ID": 144, "source": "Multi_HumanEval_java:HumanEval_java/147", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tfor (int k = j + 1; k <= n; k++) {\n\t\t\t\t\tif (i + j + k % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(getMaxTriples(5));\n\t}\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindTheDuplicateNumber.java\npackage com.leetcode.medium;\n\nimport java.util.Arrays;\n\n/**\n * Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n *\n * Example 1:\n *\n * Input: [1,3,4,2,2]\n * Output: 2\n * Example 2:\n *\n * Input: [3,1,3,4,2]\n * Output: 3\n * Note:\n *\n * You must not modify the array (assume the array is read only).\n * You must use only constant, O(1) extra space.\n * Your runtime complexity should be less than O(n2).\n * There is only one duplicate number in the array, but it could be repeated more than once.\n */\npublic class FindTheDuplicateNumber {\n    public static int findDuplicate(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 1; i++) {\n            if (nums[i] == nums[i + 1]) {\n                return nums[i];\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 3, 4, 2, 2};\n        System.out.println(findDuplicate(nums));\n    }\n}\n<file_sep>/src/main/java/com/leetcode/medium/FindTheDuplicateNumber.java\npackage com.leetcode."}
{"ID": 145, "source": "Multi_HumanEval_java:HumanEval_java/148", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t\tList<Object> planets = new ArrayList<Object>();\n\t\tif (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n\t\t\tplanets.add(\"Venus\");\n\t\t\tplanets.add(\"Earth\");\n\t\t\tplanets.add(\"Mars\");\n\t\t\tplanets.add(\"Jupiter\");\n\t\t\tplanets.add(\"Saturn\");\n\t\t\treturn planets;\n\t\t}\n\t\treturn planets;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1900));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n    }\n\n    /**\n     * 判断一个给定的年份数字是不是闰年。一个年份是闰年的条件是：\n     *\n     * <p>1. 能被4整除，不能被100整除； 2. 能被400整除；\n     *\n     * @param year 给定的年份数字\n     * @return 如果该年份是闰年，返回true，否则返回false\n     */\n    public static boolean isLeapYear(int year) {\n        if (year % 4 == 0 && year % 100!= 0) {\n            return true;\n        } else if (year % 400 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isPrime(1));\n        System.out.println(isPrime(2));\n        System.out.println(isPrime(3));\n        System."}
{"ID": 146, "source": "Multi_HumanEval_java:HumanEval_java/149", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t\t// your code here\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor(String s : lst){\n\t\t\tif(s.length() % 2 == 0){\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result);\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * For example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * @param arr\n     * @return\n     */\n    public static int findIt(int[] arr) {\n        Arrays.sort(arr);\n        int count = 1;\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] == arr[i + 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return arr[i];\n                }\n                count = 1;\n            }\n        }\n        return arr[arr.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * For example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * @param arr\n     * @return\n     */\n    public static int findIt(int[] arr) {\n        Arrays.sort"}
{"ID": 147, "source": "Multi_HumanEval_java:HumanEval_java/150", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t\tif(isPrime(n))\n\t\t\treturn x;\n\t\telse\n\t\t\treturn y;\n    }\n\n    public static boolean isPrime(int n) {\n\t\tif(n == 1)\n\t\t\treturn false;\n\t\tfor(int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif(n % i == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Examples:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * 5\n     *\n     * [10]\n     * 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * 1\n     *\n     *\n     */\n    public static int findIt(int[] seq) {\n        Arrays.sort(seq);\n        int count = 1;\n        for(int i = 0; i < seq.length - 1; i++) {\n            if(seq[i] == seq[i + 1]) {\n                count++;\n            } else {\n                if(count % 2!= 0) {\n                    return seq[i];\n                }\n                count = 1;\n            }\n        }\n        return seq[seq.length - 1];\n    }\n}\n<file_sep>/src/main/"}
{"ID": 148, "source": "Multi_HumanEval_java:HumanEval_java/151", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor(Object i : lst){\n\t\t\tif(i instanceof Integer){\n\t\t\t\tif((Integer)i % 2!= 0){\n\t\t\t\t\tsum += (Integer)i * (Integer)i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * find_it([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) == 5\n     * find_it([1,1,2,-2,5,2,4,4,-1,-2,5]) == -1\n     * find_it([20,1,1,2,2,3,3,5,5,4,20,4,5]) == 5\n     * find_it([10]) == 10\n     * find_it([1,1,1,1,1,1,10,1,1,1,1]) == 10\n     * find_it([5,4,3,2,1,5,4,3,2,10,10]) == 1\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for (int i = 0; i < a.length - 1; i++) {\n            if (a[i] == a[i + 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport"}
{"ID": 149, "source": "Multi_HumanEval_java:HumanEval_java/152", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < game.size(); i++) {\n\t\t\tresult.add(Math.abs(game.get(i) - guess.get(i)));\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1990));\n        System.out.println(isLeapYear(1991));\n        System.out.println(isLeapYear(1992));\n        System.out.println(isLeapYear(1993));\n        System.out.println(isLeapYear(1994));\n        System.out.println(isLeapYear(1995));\n        System.out.println(isLeapYear(1996));\n        System.out.println(isLeapYear(1997));\n        System.out.println(isLeapYear(1998));\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2002));\n        System.out.println(isLeapYear(2003));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2007));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2009));\n        System.out.println(isLeapYear(2010));\n        System.out.println(isLeapYear(2011));\n        System.out.println(isLeapYear(2012));"}
{"ID": 150, "source": "Multi_HumanEval_java:HumanEval_java/153", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t\tString str = \"\";\n\t\tint max = 0;\n\t\tfor(String s : extensions){\n\t\t\tint cap = 0;\n\t\t\tint sm = 0;\n\t\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\t\tif(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\t\t\t\t\tcap++;\n\t\t\t\t}else if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\t\t\t\t\tsm++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cap - sm > max){\n\t\t\t\tmax = cap - sm;\n\t\t\t\tstr = s;\n\t\t\t}\n\t\t}\n\t\treturn className + \".\" + str;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/RemoveElement.java\npackage com.leetcode.easy;\n\n/**\n * Given an array and a value, remove all instances of that value in place and return the new length.\n *\n * Do not allocate extra space for another array, you must do this in place with constant memory.\n *\n * The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n *\n * Example:\n * Given input array nums = [3,2,2,3], val = 3\n *\n * Your function should return length = 2, with the first two elements of nums being 2.\n *\n * @author <NAME>\n * @date 2018/10/15\n */\npublic class RemoveElement {\n    public static void main(String[] args) {\n        int[] nums = {3,2,2,3};\n        int val = 3;\n        System.out.println(removeElement(nums, val));\n    }\n\n    public static int removeElement(int[] nums, int val) {\n        int i = 0;\n        for (int j = 0; j < nums.length; j++) {\n            if (nums[j]!= val) {\n                nums[i] = nums[j];\n                i++;\n            }\n        }\n        return i;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseString.java\npackage com.leetcode.easy;\n\n/**\n * Write a function that takes a string as input and"}
{"ID": 151, "source": "Multi_HumanEval_java:HumanEval_java/154", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t\t// Write your code here\n        String s = a + a;\n        return s.contains(b);\n    }\n}\n<file_sep>/src/main/java/com/cyclops/java/interview/code/challenges/codesignal/arcade/intro/level1/arrayChange.java\npackage com.cyclops.java.interview.code.challenges.codesignal.arcade.intro.level1;\n\nimport java.util.Arrays;\n\npublic class arrayChange {\n    /**\n     * You are given an array of integers. On each move you are allowed to increase exactly one of its element by one.\n     * Find the minimal number of moves required to obtain a strictly increasing sequence from the input.\n     *\n     * Example\n     *\n     * For inputArray = [1, 1, 1], the output should be\n     * arrayChange(inputArray) = 3.\n     *\n     * Input/Output\n     *\n     * [execution time limit] 3 seconds (java)\n     *\n     * [input] array.integer inputArray\n     *\n     * Guaranteed constraints:\n     * 3 ≤ inputArray.length ≤ 105,\n     * -105 ≤ inputArray[i] ≤ 105.\n     *\n     * [output] integer\n     *\n     * The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.\n     * It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *\n     *"}
{"ID": 152, "source": "Multi_HumanEval_java:HumanEval_java/155", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t\t// your code here\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tint even = 0;\n\t\tint odd = 0;\n\t\twhile(num!= 0){\n\t\t\tint digit = num % 10;\n\t\t\tif(digit % 2 == 0){\n\t\t\t\teven++;\n\t\t\t}else{\n\t\t\t\todd++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tlist.add(even);\n\t\tlist.add(odd);\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     *\n     * Example:\n     *     [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     *     should return 5\n     *\n     *     [1,1,2,-2,5,2,4,4,-1,-2,5]\n     *     should return -1\n     *\n     *     [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     *     should return 5\n     *\n     *     [10]\n     *     should return 10\n     *\n     *     [1,1,1,1,1,1,10,1,1,1,1]\n     *     should return 10\n     *\n     *     [5,4,3,2,1,5,4,3,2,10,10]\n     *     should return 1\n     *\n     *     [1,1,1,1,1,1,10,1,1,1,1,1,1,1]\n     *     should return 10\n     *\n     *     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"ID": 153, "source": "Multi_HumanEval_java:HumanEval_java/156", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t\tString roman = \"\";\n\t\tint[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\t\tString[] letters = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\twhile (number >= values[i]) {\n\t\t\t\troman += letters[i];\n\t\t\t\tnumber -= values[i];\n\t\t\t}\n\t\t}\n\t\treturn roman;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear("}
{"ID": 154, "source": "Multi_HumanEval_java:HumanEval_java/157", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t\tif(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n\t\t\treturn true;\n\t\treturn false;\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kata/kyu7/FindTheOddInt.java\npackage com.codewars.java.kata.kyu7;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 10/10/2016.\n */\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for (int i = 0; i < a.length - 1; i++) {\n            if (a[i] == a[i + 1]) {\n                count++;\n            } else {\n                if (count % 2!= 0) {\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/java/kata/kyu7/FindTheOddInt.java\npackage com.codewars.java.kata.kyu7;\n\nimport java.util.Arrays;\n\n/**\n * Created by <NAME> on 10/10/2016.\n */\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Example:\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * 5"}
{"ID": 155, "source": "Multi_HumanEval_java:HumanEval_java/158", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t\tString max = \"\";\n\t\tint max_len = 0;\n\t\tfor (String word : words) {\n\t\t\tint len = word.length();\n\t\t\tif (len > max_len) {\n\t\t\t\tmax_len = len;\n\t\t\t\tmax = word;\n\t\t\t}\n\t\t}\n\t\treturn max;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLe"}
{"ID": 156, "source": "Multi_HumanEval_java:HumanEval_java/159", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t\t// your code here\n        List<Integer> result = new ArrayList<>();\n        int total = number + remaining;\n        if(total >= need){\n            result.add(need);\n            result.add(total - need);\n        }else{\n            result.add(total);\n            result.add(0);\n        }\n        return result;\n    }\n}\n<file_sep>/src/main/java/com/github/hcsp/controlflow/Main.java\npackage com.github.hcsp.controlflow;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(isLeapYear(1999));\n        System.out.println(isLeapYear(2000));\n        System.out.println(isLeapYear(2001));\n        System.out.println(isLeapYear(2004));\n        System.out.println(isLeapYear(2005));\n        System.out.println(isLeapYear(2006));\n        System.out.println(isLeapYear(2008));\n        System.out.println(isLeapYear(2012));\n        System.out.println(isLeapYear(2016));\n        System.out.println(isLeapYear(2017));\n        System.out.println(isLeapYear(2018));\n        System.out.println(isLeapYear(2019));\n        System.out.println(isLeapYear(2020));\n        System.out.println(isLeapYear(2021));\n        System.out.println(isLeapYear(2024));\n        System.out.println(isLeapYear(2025));\n        System.out.println(isLeapYear(2028));\n        System.out.println(isLeapYear(2032));\n        System.out.println(isLeapYear(2036));\n        System.out.println(isLeapYear(2037));\n        System.out.println(isLeapYear(2038));\n        System.out.println(isLeapYear(2039));\n        System.out.println(isLe"}
{"ID": 157, "source": "Multi_HumanEval_java:HumanEval_java/160", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t\t// Write your code here\n\t\tint result = 0;\n\t\tint i = 0;\n\t\tfor (String op : operator) {\n\t\t\tif (op.equals(\"+\")) {\n\t\t\t\tresult += operand.get(i);\n\t\t\t} else if (op.equals(\"-\")) {\n\t\t\t\tresult -= operand.get(i);\n\t\t\t} else if (op.equals(\"*\")) {\n\t\t\t\tresult *= operand.get(i);\n\t\t\t} else if (op.equals(\"//\")) {\n\t\t\t\tresult /= operand.get(i);\n\t\t\t} else if (op.equals(\"**\")) {\n\t\t\t\tresult = (int) Math.pow(result, operand.get(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn result;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/FindTheDifference.java\npackage com.leetcode.easy;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by <NAME> on 2017/11/21.\n */\npublic class FindTheDifference {\n    /**\n     * Given two strings s and t which consist of only lowercase letters.\n     *\n     * String t is generated by random shuffling string s and then add one more letter at a random position.\n     *\n     * Find the letter that was added in t.\n     *\n     * Example:\n     *\n     * Input:\n     * s = \"abcd\"\n     * t = \"abcde\"\n     *\n     * Output:\n     * e\n     *\n     * Explanation:\n     * 'e' is the letter that was added.\n     */\n    public char findTheDifference(String s, String t) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < t.length(); i++) {\n            char c = t.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);"}
{"ID": 158, "source": "Multi_HumanEval_java:HumanEval_java/161", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < s.length(); i++) {\n\t\t\tif(Character.isLetter(s.charAt(i))) {\n\t\t\t\tif(Character.isUpperCase(s.charAt(i))) {\n\t\t\t\t\tresult += Character.toLowerCase(s.charAt(i));\n\t\t\t\t} else {\n\t\t\t\t\tresult += Character.toUpperCase(s.charAt(i));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult += s.charAt(i);\n\t\t\t}\n\t\t}\n\t\tif(result.length() == 0) {\n\t\t\treturn s;\n\t\t}\n\t\treturn result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.nextLine();\n        String res = Solve.solve(s);\n        System.out.println(res);\n    }\n}\n<file_sep>/CodeWars/7kyu/FindTheOddInt.java\nimport java.util.*;\n\nclass FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     * Examples\n     * [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]\n     * should return 5\n     *\n     * [1,1,2,-2,5,2,4,4,-1,-2,5]\n     * should return -1\n     *\n     * [20,1,1,2,2,3,3,5,5,4,20,4,5]\n     * should return 5\n     *\n     * [10]\n     * should return 10\n     *\n     * [1,1,1,1,1,1,10,1,1,1,1]\n     * should return 10\n     *\n     * [5,4,3,2,1,5,4,3,2,10,10]\n     * should return 1\n     *\n     */\n    public static int findIt(int[] seq) {\n        int result = 0;\n        for(int i = 0; i < seq.length; i"}
{"ID": 159, "source": "Multi_HumanEval_java:HumanEval_java/162", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t\tif (text == null || text.length() == 0) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tbyte[] bytes = md.digest(text.getBytes());\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (byte b : bytes) {\n\t\t\t\tsb.append(String.format(\"%02x\", b));\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n    }\n}\n<file_sep>/src/main/java/com/leetcode/easy/ReverseInteger.java\npackage com.leetcode.easy;\n\n/**\n * Created by <NAME> on 2017/1/17.\n */\npublic class ReverseInteger {\n    /**\n     * Given a 32-bit signed integer, reverse digits of an integer.\n     *\n     * Example 1:\n     *\n     * Input: 123\n     * Output: 321\n     * Example 2:\n     *\n     * Input: -123\n     * Output: -321\n     * Example 3:\n     *\n     * Input: 120\n     * Output: 21\n     * Note:\n     * Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n     */\n    public static int reverse(int x) {\n        int result = 0;\n        while (x!= 0) {\n            int pop = x % 10;\n            x /= 10;\n            if (result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\n            if (result < Integer.MIN_VALUE / 10 || (result == Integer.MIN_VALUE / 10 && pop < -8)) return 0;\n            result = result * 10 + pop;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(reverse(123));\n        System.out.println("}
{"ID": 160, "source": "Multi_HumanEval_java:HumanEval_java/163", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t\tList<Object> list = new ArrayList<Object>();\n\t\tif(a > b) {\n\t\t\tint temp = a;\n\t\t\ta = b;\n\t\t\tb = temp;\n\t\t}\n\t\tfor(int i = a; i <= b; i++) {\n\t\t\tif(i % 2 == 0) {\n\t\t\t\tlist.add(i);\n\t\t\t}\n\t\t}\n\t\treturn list;\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for(int i = 0; i < a.length - 1; i++) {\n            if(a[i] == a[i + 1]) {\n                count++;\n            } else {\n                if(count % 2!= 0) {\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n<file_sep>/src/main/java/com/codewars/kyu7/FindTheOddInt.java\npackage com.codewars.kyu7;\n\nimport java.util.Arrays;\n\npublic class FindTheOddInt {\n    /**\n     * Given an array, find the int that appears an odd number of times.\n     * There will always be only one integer that appears an odd number of times.\n     */\n    public static int findIt(int[] a) {\n        Arrays.sort(a);\n        int count = 1;\n        for(int i = 0; i < a.length - 1; i++) {\n            if(a[i] == a[i + 1]) {\n                count++;\n            } else {\n                if(count % 2!= 0) {\n                    return a[i];\n                }\n                count = 1;\n            }\n        }\n        return a[a.length - 1];\n    }\n}\n"}
