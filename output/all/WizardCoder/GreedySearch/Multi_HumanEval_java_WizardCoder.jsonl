{"ID": 0, "source": "Multi_HumanEval_java:HumanEval_java/0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     *\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\t\tif (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n}<|endoftext|>"}
{"ID": 1, "source": "Multi_HumanEval_java:HumanEval_java/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n\t\tList<String> result = new ArrayList<>();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint openCount = 0;\n\t\tfor (int i = 0; i < parenString.length(); i++) {\n\t\t\tchar c = parenString.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\topenCount++;\n\t\t\t\tsb.append(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\topenCount--;\n\t\t\t\tsb.append(c);\n\t\t\t\tif (openCount == 0) {\n\t\t\t\t\tresult.add(sb.toString());\n\t\t\t\t\tsb = new StringBuilder();\n\t\t\t\t}\n\t\t\t} else if (Character.isWhitespace(c)) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tsb.append(c);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 2, "source": "Multi_HumanEval_java:HumanEval_java/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {\n\t\tint integerPart = (int) number;\n\t\tdouble decimalPart = number - integerPart;\n\t\treturn decimalPart;\n\t}\n}<|endoftext|>"}
{"ID": 3, "source": "Multi_HumanEval_java:HumanEval_java/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n\t\tint balance = 0;\n\t\tfor (Object operation : operations) {\n\t\t\tif (operation instanceof Integer) {\n\t\t\t\tbalance += (int) operation;\n\t\t\t} else if (operation instanceof String && ((String) operation).equals(\"WITHDRAW\")) {\n\t\t\t\tbalance -= 100;\n\t\t\t}\n\t\t\tif (balance < 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n    public static void main(String[] args) {\n        List<Object> operations = Arrays.asList(1, 2, -4, 5);\n        System.out.println(belowZero(operations)); // True\n    }\n}<|endoftext|>"}
{"ID": 4, "source": "Multi_HumanEval_java:HumanEval_java/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n\t\tDouble mean = mean(numbers);\n\t\tDouble deviationSum = 0.0;\n\t\tfor (Double number : numbers) {\n\t\t\tdeviationSum += Math.abs(number - mean);\n\t\t}\n\t\treturn deviationSum / numbers.size();\n\t}\n\n    /**\n     * Calculate the mean of a list of numbers.\n     */\n    public static Double mean(List<Double> numbers) {\n\t\tDouble sum = 0.0;\n\t\tfor (Double number : numbers) {\n\t\t\tsum += number;\n\t\t}\n\t\treturn sum / numbers.size();\n\t}\n\n    public static void main(String[] args) {\n\t\tList<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n\t\tDouble mad = meanAbsoluteDeviation(numbers);\n\t\tSystem.out.println(mad); // Output: 1.0\n\t}\n}<|endoftext|>"}
{"ID": 5, "source": "Multi_HumanEval_java:HumanEval_java/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tresult.add(numbers.get(i));\n\t\t\tif (i < numbers.size() - 1) {\n\t\t\t\tresult.add(delimeter);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3);\n        int delimeter = 4;\n        List<Object> result = intersperse(numbers, delimeter);\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 6, "source": "Multi_HumanEval_java:HumanEval_java/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\t\tList<Integer> levels = new ArrayList<>();\n\t\tStack<Character> stack = new Stack<>();\n\t\tfor (int i = 0; i < parenString.length(); i++) {\n\t\t\tchar c = parenString.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tif (!stack.isEmpty()) {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\tstack.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\tlevels.add(0);\n\t\t\t} else {\n\t\t\t\tlevels.add(stack.size());\n\t\t\t}\n\t\t}\n\t\treturn levels;\n\t}\n\n    public static void main(String[] args) {\n        String parenString = \"(()()) ((())) () ((())()())\";\n        List<Integer> levels = parseNestedParens(parenString);\n        System.out.println(levels);\n    }\n}<|endoftext|>"}
{"ID": 7, "source": "Multi_HumanEval_java:HumanEval_java/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().contains(substring)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> strings = new ArrayList<Object>();\n        strings.add(\"abc\");\n        strings.add(\"bacd\");\n        strings.add(\"cde\");\n        strings.add(\"array\");\n        List<Object> result = filterBySubstring(strings, \"a\");\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 8, "source": "Multi_HumanEval_java:HumanEval_java/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n\t\tint sum = 0;\n\t\tint product = 1;\n\t\tfor (Object number : numbers) {\n\t\t\tif (number instanceof Integer) {\n\t\t\t\tsum += (Integer) number;\n\t\t\t\tproduct *= (Integer) number;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3, 4);\n        List<Integer> result = sumProduct(numbers);\n        System.out.println(result.get(0)); // 10\n        System.out.println(result.get(1)); // 24\n    }\n}<|endoftext|>"}
{"ID": 9, "source": "Multi_HumanEval_java:HumanEval_java/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tint max = (int) numbers.get(0);\n\t\tresult.add(max);\n\t\tfor (int i = 1; i < numbers.size(); i++) {\n\t\t\tint num = (int) numbers.get(i);\n\t\t\tif (num > max) {\n\t\t\t\tmax = num;\n\t\t\t}\n\t\t\tresult.add(max);\n\t\t}\n\t\treturn result;\n\t}\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Object> result = rollingMax(numbers);\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 10, "source": "Multi_HumanEval_java:HumanEval_java/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t\tif (string == null || string.length() == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tint n = string.length();\n\t\tint i = n - 1;\n\t\twhile (i >= 0 && string.charAt(i) == string.charAt(n - 1)) {\n\t\t\ti--;\n\t\t}\n\t\tif (i == -1) {\n\t\t\treturn string;\n\t\t}\n\t\tString prefix = string.substring(0, i + 1);\n\t\tString suffix = string.substring(i + 1);\n\t\tString reversePrefix = new StringBuilder(prefix).reverse().toString();\n\t\treturn prefix + reversePrefix + suffix;\n    }\n\n    public static void main(String[] args) {\n        String[] testCases = {\"\", \"cat\", \"cata\", \"racecar\", \"abccba\", \"abba\", \"abcba\"};\n        for (String testCase : testCases) {\n            System.out.println(testCase + \" -> \" + makePalindrome(testCase));\n        }\n    }\n}<|endoftext|>"}
{"ID": 11, "source": "Multi_HumanEval_java:HumanEval_java/11", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\t\t// Convert strings to binary arrays\n\t\tchar[] aArr = a.toCharArray();\n\t\tchar[] bArr = b.toCharArray();\n\t\tint n = aArr.length;\n\n\t\t// Perform XOR operation on binary arrays\n\t\tchar[] resultArr = new char[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresultArr[i] = (char) (aArr[i] ^ bArr[i]);\n\t\t}\n\n\t\t// Convert binary array to string\n\t\tString result = new String(resultArr);\n\t\treturn result;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tString a = \"010\";\n\t\tString b = \"110\";\n\t\tString result = stringXor(a, b);\n\t\tSystem.out.println(result);\n\t}\n}<|endoftext|>"}
{"ID": 12, "source": "Multi_HumanEval_java:HumanEval_java/12", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n\t\tif (strings.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tString longest = (String) strings.get(0);\n\t\tfor (Object s : strings) {\n\t\t\tif (s instanceof String && ((String) s).length() > longest.length()) {\n\t\t\t\tlongest = (String) s;\n\t\t\t}\n\t\t}\n\t\treturn longest;\n\t}\n}<|endoftext|>"}
{"ID": 13, "source": "Multi_HumanEval_java:HumanEval_java/13", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n\t\tif (b == 0) {\n\t\t\treturn a;\n\t\t}\n\t\treturn greatestCommonDivisor(b, a % b);\n\t}\n}<|endoftext|>"}
{"ID": 14, "source": "Multi_HumanEval_java:HumanEval_java/14", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (int i = 1; i <= string.length(); i++) {\n\t\t\tresult.add(string.substring(0, i));\n\t\t}\n\t\treturn result;\n\t}\n\n    public static void main(String[] args) {\n        System.out.println(allPrefixes(\"abc\"));\n    }\n}<|endoftext|>"}
{"ID": 15, "source": "Multi_HumanEval_java:HumanEval_java/15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tresult += i + \" \";\n\t\t}\n\t\treturn result.trim();\n\t}\n}<|endoftext|>"}
{"ID": 16, "source": "Multi_HumanEval_java:HumanEval_java/16", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n\t\tSet<Character> set = new HashSet<>();\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tset.add(Character.toLowerCase(string.charAt(i)));\n\t\t}\n\t\treturn set.size();\n\t}\n\n    public static void main(String[] args) {\n        String string = \"xyzXYZ\";\n        int count = countDistinctCharacters(string);\n        System.out.println(count); // Output: 3\n\n        string = \"Jerry\";\n        count = countDistinctCharacters(string);\n        System.out.println(count); // Output: 4\n    }\n}<|endoftext|>"}
{"ID": 17, "source": "Multi_HumanEval_java:HumanEval_java/17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\n     */\n    public static List<Object> parseMusic(String musicString) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tint i = 0;\n\t\twhile (i < musicString.length()) {\n\t\t\tchar c = musicString.charAt(i);\n\t\t\tif (c == 'o') {\n\t\t\t\tresult.add(4);\n\t\t\t\ti++;\n\t\t\t} else if (c == 'o' || c == '|') {\n\t\t\t\tresult.add(2);\n\t\t\t\ti++;\n\t\t\t} else if (c == '.') {\n\t\t\t\tresult.add(1);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid character: \" + c);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 18, "source": "Multi_HumanEval_java:HumanEval_java/18", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     *\n     */\n    public static int howManyTimes(String string, String substring) {\n\t\tint count = 0;\n\t\tint index = 0;\n\t\twhile ((index = string.indexOf(substring, index))!= -1) {\n\t\t\tcount++;\n\t\t\tindex += substring.length();\n\t\t}\n\t\treturn count;\n\t}\n}<|endoftext|>"}
{"ID": 19, "source": "Multi_HumanEval_java:HumanEval_java/19", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n\t\tString[] arr = numbers.split(\" \");\n\t\tArrays.sort(arr, new Comparator<String>() {\n\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\treturn Integer.parseInt(s1) - Integer.parseInt(s2);\n\t\t\t}\n\t\t});\n\t\treturn String.join(\" \", arr);\n    }\n\n    public static void main(String[] args) {\n        String numbers = \"three one five\";\n        System.out.println(sortNumbers(numbers));\n    }\n}<|endoftext|>"}
{"ID": 20, "source": "Multi_HumanEval_java:HumanEval_java/20", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n\t\tdouble minDiff = Double.MAX_VALUE;\n\t\tdouble first = 0.0;\n\t\tdouble second = 0.0;\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\t\tdouble diff = Math.abs(numbers.get(i) - numbers.get(j));\n\t\t\t\tif (diff < minDiff) {\n\t\t\t\t\tminDiff = diff;\n\t\t\t\t\tfirst = numbers.get(i);\n\t\t\t\t\tsecond = numbers.get(j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<Double> result = new ArrayList<>();\n\t\tresult.add(first);\n\t\tresult.add(second);\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n        numbers.add(2.2);\n        System.out.println(findClosestElements(numbers));\n    }\n}<|endoftext|>"}
{"ID": 21, "source": "Multi_HumanEval_java:HumanEval_java/21", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n\t\tdouble min = Double.MAX_VALUE;\n\t\tdouble max = Double.MIN_VALUE;\n\t\tfor (double num : numbers) {\n\t\t\tif (num < min) {\n\t\t\t\tmin = num;\n\t\t\t}\n\t\t\tif (num > max) {\n\t\t\t\tmax = num;\n\t\t\t}\n\t\t}\n\t\tdouble range = max - min;\n\t\tList<Double> result = new ArrayList<Double>();\n\t\tfor (double num : numbers) {\n\t\t\tresult.add((num - min) / range);\n\t\t}\n\t\treturn result;\n    }\n}<|endoftext|>"}
{"ID": 22, "source": "Multi_HumanEval_java:HumanEval_java/22", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object value : values) {\n\t\t\tif (value instanceof Integer) {\n\t\t\t\tresult.add(value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 23, "source": "Multi_HumanEval_java:HumanEval_java/23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n\t\tif(string == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn string.length();\n\t}\n}<|endoftext|>"}
{"ID": 24, "source": "Multi_HumanEval_java:HumanEval_java/24", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n\t\tint largest = 1;\n\t\tfor (int i = 2; i <= n/2; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tlargest = i;\n\t\t\t}\n\t\t}\n\t\treturn largest;\n\t}\n}<|endoftext|>"}
{"ID": 25, "source": "Multi_HumanEval_java:HumanEval_java/25", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     *\n     */\n    public static List<Integer> factorize(int n) {\n\t\tList<Integer> factors = new ArrayList<>();\n\t\tint i = 2;\n\t\twhile (i * i <= n) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tfactors.add(i);\n\t\t\t\tn /= i;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif (n > 1) {\n\t\t\tfactors.add(n);\n\t\t}\n\t\treturn factors;\n\t}\n}<|endoftext|>"}
{"ID": 26, "source": "Multi_HumanEval_java:HumanEval_java/26", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n\t\tSet<Object> set = new HashSet<>();\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (Object number : numbers) {\n\t\t\tif (!set.contains(number)) {\n\t\t\t\tset.add(number);\n\t\t\t\tresult.add(number);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Object> result = removeDuplicates(numbers);\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 27, "source": "Multi_HumanEval_java:HumanEval_java/27", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n\t\tString result = \"\";\n\t\tfor(int i=0; i<string.length(); i++) {\n\t\t\tchar c = string.charAt(i);\n\t\t\tif(Character.isLowerCase(c)) {\n\t\t\t\tresult += Character.toUpperCase(c);\n\t\t\t} else if(Character.isUpperCase(c)) {\n\t\t\t\tresult += Character.toLowerCase(c);\n\t\t\t} else {\n\t\t\t\tresult += c;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 28, "source": "Multi_HumanEval_java:HumanEval_java/28", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<Object> strings) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (Object s : strings) {\n\t\t\tsb.append(s);\n\t\t}\n\t\treturn sb.toString();\n    }\n\n    public static void main(String[] args) {\n        List<Object> strings = new ArrayList<Object>();\n        strings.add(\"a\");\n        strings.add(\"b\");\n        strings.add(\"c\");\n        System.out.println(concatenate(strings));\n    }\n}<|endoftext|>"}
{"ID": 29, "source": "Multi_HumanEval_java:HumanEval_java/29", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object s : strings) {\n\t\t\tif (s.toString().startsWith(prefix)) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> strings = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        List<Object> result = filterByPrefix(strings, \"a\");\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 30, "source": "Multi_HumanEval_java:HumanEval_java/30", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object num : l) {\n\t\t\tif (num instanceof Integer && (Integer) num > 0) {\n\t\t\t\tresult.add(num);\n\t\t\t} else if (num instanceof Double && (Double) num > 0) {\n\t\t\t\tresult.add(num);\n\t\t\t} else if (num instanceof Float && (Float) num > 0) {\n\t\t\t\tresult.add(num);\n\t\t\t} else if (num instanceof Long && (Long) num > 0) {\n\t\t\t\tresult.add(num);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> l1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Object> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(getPositive(l1));\n        System.out.println(getPositive(l2));\n    }\n}<|endoftext|>"}
{"ID": 31, "source": "Multi_HumanEval_java:HumanEval_java/31", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 32, "source": "Multi_HumanEval_java:HumanEval_java/33", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n\t\tList<Integer> l1 = new ArrayList<Integer>();\n\t\tList<Integer> l2 = new ArrayList<Integer>();\n\t\tfor(int i=0;i<l.size();i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\tl1.add(l.get(i));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl2.add(l.get(i));\n\t\t\t}\n\t\t}\n\t\tCollections.sort(l2);\n\t\tl1.addAll(l2);\n\t\treturn l1;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(1, 2, 3);\n        System.out.println(sortThird(l)); // [1, 2, 3]\n\n        l = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        System.out.println(sortThird(l)); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}<|endoftext|>"}
{"ID": 33, "source": "Multi_HumanEval_java:HumanEval_java/34", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i : l) {\n\t\t\tif (!set.contains(i)) {\n\t\t\t\tset.add(i);\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result);\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 34, "source": "Multi_HumanEval_java:HumanEval_java/35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     *\n     */\n    public static int maxElement(List<Integer> l) {\n\t\tint max = l.get(0);\n\t\tfor (int i = 1; i < l.size(); i++) {\n\t\t\tif (l.get(i) > max) {\n\t\t\t\tmax = l.get(i);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}<|endoftext|>"}
{"ID": 35, "source": "Multi_HumanEval_java:HumanEval_java/36", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t\tString s = Integer.toString(i);\n\t\t\t\tif (s.contains(\"7\")) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}<|endoftext|>"}
{"ID": 36, "source": "Multi_HumanEval_java:HumanEval_java/37", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(l.get(i));\n\t\t\t} else {\n\t\t\t\tresult.add(null);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tif (i % 2 == 1) {\n\t\t\t\tresult.set(i, l.get(i));\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tif (result.get(i)!= null) {\n\t\t\t\tList<Integer> subList = new ArrayList<Integer>();\n\t\t\t\tfor (int j = i; j < result.size(); j++) {\n\t\t\t\t\tif (result.get(j)!= null) {\n\t\t\t\t\t\tsubList.add(result.get(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(subList);\n\t\t\t\tfor (int j = i; j < result.size(); j++) {\n\t\t\t\t\tif (result.get(j)!= null) {\n\t\t\t\t\t\tresult.set(j, subList.get(j - i));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        System.out.println(sortEven(l)); // [1, 2, 3]\n\n        l.clear();\n        l.add(5);\n        l.add(6);\n        l.add(3);\n        l.add(4);\n        System.out.println(sortEven(l)); // [3, 6, 5, 4]\n    }\n}<|endoftext|>"}
{"ID": 37, "source": "Multi_HumanEval_java:HumanEval_java/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t\tint a = 1, b = 2, c = 3;\n\t\tint count = 2;\n\t\twhile (count < n) {\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = a + b;\n\t\t\tif (isPrime(c)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tSystem.out.println(primeFib(n));\n\t\tsc.close();\n\t}\n}<|endoftext|>"}
{"ID": 38, "source": "Multi_HumanEval_java:HumanEval_java/40", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i=0;i<l.size();i++){\n\t\t\tint complement = -l.get(i);\n\t\t\tif(set.contains(complement)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tset.add(l.get(i));\n\t\t}\n\t\treturn false;\n\t}\n\n    public static void main(String[] args) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        l1.add(1);\n        l1.add(3);\n        l1.add(5);\n        l1.add(0);\n        System.out.println(triplesSumToZero(l1)); // False\n\n        List<Integer> l2 = new ArrayList<Integer>();\n        l2.add(1);\n        l2.add(3);\n        l2.add(-2);\n        l2.add(1);\n        System.out.println(triplesSumToZero(l2)); // True\n\n        List<Integer> l3 = new ArrayList<Integer>();\n        l3.add(1);\n        l3.add(2);\n        l3.add(3);\n        l3.add(7);\n        System.out.println(triplesSumToZero(l3)); // False\n\n        List<Integer> l4 = new ArrayList<Integer>();\n        l4.add(2);\n        l4.add(4);\n        l4.add(-5);\n        l4.add(3);\n        l4.add(9);\n        l4.add(7);\n        System.out.println(triplesSumToZero(l4)); // True\n\n        List<Integer> l5 = new ArrayList<Integer>();\n        l5.add(1);\n        System.out.println(triplesSumToZero(l5)); // False\n    }\n}<|endoftext|>"}
{"ID": 39, "source": "Multi_HumanEval_java:HumanEval_java/41", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i % 2 == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tSystem.out.println(carRaceCollision(n));\n\t\tsc.close();\n\t}\n}<|endoftext|>"}
{"ID": 40, "source": "Multi_HumanEval_java:HumanEval_java/42", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor (Object o : l) {\n\t\t\tif (o instanceof Integer) {\n\t\t\t\tresult.add((Integer) o + 1);\n\t\t\t} else if (o instanceof Double) {\n\t\t\t\tresult.add((Double) o + 1.0);\n\t\t\t} else if (o instanceof String) {\n\t\t\t\tresult.add((String) o + \"1\");\n\t\t\t} else {\n\t\t\t\tresult.add(o);\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> l1 = Arrays.asList(1, 2, 3);\n        List<Object> l2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(incrList(l1));\n        System.out.println(incrList(l2));\n    }\n}<|endoftext|>"}
{"ID": 41, "source": "Multi_HumanEval_java:HumanEval_java/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i=0; i<l.size(); i++) {\n\t\t\tif(set.contains(-l.get(i))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tset.add(l.get(i));\n\t\t}\n\t\treturn false;\n\t}\n}<|endoftext|>"}
{"ID": 42, "source": "Multi_HumanEval_java:HumanEval_java/44", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n\t\tif (x == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tString result = \"\";\n\t\twhile (x > 0) {\n\t\t\tint remainder = x % base;\n\t\t\tif (remainder < 10) {\n\t\t\t\tresult = remainder + result;\n\t\t\t} else {\n\t\t\t\tresult = (char) (remainder - 10 + 'a') + result;\n\t\t\t}\n\t\t\tx /= base;\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 43, "source": "Multi_HumanEval_java:HumanEval_java/45", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n\t\treturn (double) (0.5 * a * h);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int h = scanner.nextInt();\n        System.out.println(triangleArea(a, h));\n    }\n}<|endoftext|>"}
{"ID": 44, "source": "Multi_HumanEval_java:HumanEval_java/46", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (n == 1) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (n == 2) {\n\t\t\treturn 2;\n\t\t}\n\t\tint[] fib = new int[n+1];\n\t\tfib[0] = 0;\n\t\tfib[1] = 0;\n\t\tfib[2] = 2;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\t\t}\n\t\treturn fib[n];\n\t}\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(fib4(n));\n    }\n}<|endoftext|>"}
{"ID": 45, "source": "Multi_HumanEval_java:HumanEval_java/47", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n\t\tCollections.sort(l);\n\t\tint n = l.size();\n\t\tif (n % 2 == 0) {\n\t\t\treturn (l.get(n/2) + l.get(n/2 - 1)) / 2.0;\n\t\t} else {\n\t\t\treturn l.get(n/2);\n\t\t}\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(l)); // 3\n\n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(l2)); // 15.0\n    }\n}<|endoftext|>"}
{"ID": 46, "source": "Multi_HumanEval_java:HumanEval_java/48", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n\t\tif (text == null) {\n\t\t\treturn false;\n\t\t}\n\t\tint left = 0;\n\t\tint right = text.length() - 1;\n\t\twhile (left < right) {\n\t\t\tif (text.charAt(left)!= text.charAt(right)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 47, "source": "Multi_HumanEval_java:HumanEval_java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint res = 1;\n\t\twhile (n > 0) {\n\t\t\tif ((n & 1) == 1) {\n\t\t\t\tres = (res * n) % p;\n\t\t\t}\n\t\t\tn >>= 1;\n\t\t\tn %= p;\n\t\t}\n\t\treturn res;\n\t}\n}<|endoftext|>"}
{"ID": 48, "source": "Multi_HumanEval_java:HumanEval_java/51", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\tif (!vowels.contains(text.charAt(i) + \"\")) {\n\t\t\t\tresult.append(text.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn result.toString();\n\t}\n}<|endoftext|>"}
{"ID": 49, "source": "Multi_HumanEval_java:HumanEval_java/52", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n\t\tfor(int i=0;i<l.size();i++){\n\t\t\tif(l.get(i)>=t){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 50, "source": "Multi_HumanEval_java:HumanEval_java/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t\treturn x + y;\n    }\n}<|endoftext|>"}
{"ID": 51, "source": "Multi_HumanEval_java:HumanEval_java/54", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n\t\tif (s0.length()!= s1.length()) {\n\t\t\treturn false;\n\t\t}\n\t\tchar[] chars0 = s0.toCharArray();\n\t\tchar[] chars1 = s1.toCharArray();\n\t\tArrays.sort(chars0);\n\t\tArrays.sort(chars1);\n\t\treturn Arrays.equals(chars0, chars1);\n\t}\n}<|endoftext|>"}
{"ID": 52, "source": "Multi_HumanEval_java:HumanEval_java/55", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn n;\n\t\t}\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}<|endoftext|>"}
{"ID": 53, "source": "Multi_HumanEval_java:HumanEval_java/56", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tchar c = brackets.charAt(i);\n\t\t\tif (c == '<') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == '>') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}<|endoftext|>"}
{"ID": 54, "source": "Multi_HumanEval_java:HumanEval_java/57", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n\t\tint n = l.size();\n\t\tif (n < 2) {\n\t\t\treturn true;\n\t\t}\n\t\tint sign = Math.signum(l.get(1) - l.get(0));\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (Math.signum(l.get(i) - l.get(i-1))!= sign) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 55, "source": "Multi_HumanEval_java:HumanEval_java/58", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tSet<Object> set = new HashSet<>(l2);\n\t\tfor (Object obj : l1) {\n\t\t\tif (set.contains(obj)) {\n\t\t\t\tresult.add(obj);\n\t\t\t}\n\t\t}\n\t\tresult.sort(null);\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 56, "source": "Multi_HumanEval_java:HumanEval_java/59", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n\t\tint i = 2;\n\t\twhile (i <= n/i) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n    public static void main(String[] args) {\n        int n = 13195;\n        int largest = largestPrimeFactor(n);\n        System.out.println(largest);\n    }\n}<|endoftext|>"}
{"ID": 57, "source": "Multi_HumanEval_java:HumanEval_java/60", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 58, "source": "Multi_HumanEval_java:HumanEval_java/61", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n\t\tStack<Character> stack = new Stack<Character>();\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tchar c = brackets.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}<|endoftext|>"}
{"ID": 59, "source": "Multi_HumanEval_java:HumanEval_java/62", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 +....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\tresult.add(i * xs.get(i));\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> xs = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(derivative(xs)); // [1, 4, 12, 20]\n\n        xs = Arrays.asList(1, 2, 3);\n        System.out.println(derivative(xs)); // [2, 6]\n    }\n}<|endoftext|>"}
{"ID": 60, "source": "Multi_HumanEval_java:HumanEval_java/63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t} else if (n == 1) {\n\t\t\treturn 0;\n\t\t} else if (n == 2) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tint prevPrev = 0;\n\t\t\tint prev = 0;\n\t\t\tint curr = 1;\n\t\t\tfor (int i = 3; i <= n; i++) {\n\t\t\t\tint next = prevPrev + prev + curr;\n\t\t\t\tprevPrev = prev;\n\t\t\t\tprev = curr;\n\t\t\t\tcurr = next;\n\t\t\t}\n\t\t\treturn curr;\n\t\t}\n\t}\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // 0\n        System.out.println(fibfib(5)); // 4\n        System.out.println(fibfib(8)); // 24\n    }\n}<|endoftext|>"}
{"ID": 61, "source": "Multi_HumanEval_java:HumanEval_java/64", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\t\tint count = 0;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tchar ch = s.charAt(i);\n\t\t\tif(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u' || (ch=='y' && i==s.length()-1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n    public static void main(String[] args) {\n        String s = \"abcde\";\n        System.out.println(vowelsCount(s)); // Output: 2\n\n        s = \"ACEDY\";\n        System.out.println(vowelsCount(s)); // Output: 3\n    }\n}<|endoftext|>"}
{"ID": 62, "source": "Multi_HumanEval_java:HumanEval_java/65", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n\t\tString str = String.valueOf(x);\n\t\tint n = str.length();\n\t\tif (shift >= n) {\n\t\t\treturn new StringBuilder(str).reverse().toString();\n\t\t}\n\t\tchar[] arr = str.toCharArray();\n\t\tfor (int i = 0; i < shift; i++) {\n\t\t\tchar temp = arr[n - 1];\n\t\t\tfor (int j = n - 1; j > 0; j--) {\n\t\t\t\tarr[j] = arr[j - 1];\n\t\t\t}\n\t\t\tarr[0] = temp;\n\t\t}\n\t\treturn new String(arr);\n\t}\n}<|endoftext|>"}
{"ID": 63, "source": "Multi_HumanEval_java:HumanEval_java/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {\n\t\tint sum = 0;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(Character.isUpperCase(c)){\n\t\t\t\tsum += (int)c;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 64, "source": "Multi_HumanEval_java:HumanEval_java/67", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n\t\tString[] arr = s.split(\" \");\n\t\tint apples = Integer.parseInt(arr[0].split(\"apples\")[0]);\n\t\tint oranges = Integer.parseInt(arr[2].split(\"oranges\")[0]);\n\t\tint mangoes = n - apples - oranges;\n\t\treturn mangoes;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tString s = \"5 apples and 6 oranges\";\n\t\tint n = 19;\n\t\tSystem.out.println(fruitDistribution(s, n));\n\t}\n}<|endoftext|>"}
{"ID": 65, "source": "Multi_HumanEval_java:HumanEval_java/68", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Object> arr) {\n\t\tif (arr.isEmpty()) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t\tint smallestEven = Integer.MAX_VALUE;\n\t\tint smallestIndex = -1;\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tint value = (int) arr.get(i);\n\t\t\tif (value % 2 == 0 && value < smallestEven) {\n\t\t\t\tsmallestEven = value;\n\t\t\t\tsmallestIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (smallestIndex == -1) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t\treturn Arrays.asList(smallestEven, smallestIndex);\n    }\n}<|endoftext|>"}
{"ID": 66, "source": "Multi_HumanEval_java:HumanEval_java/69", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n\t\tint max = -1;\n\t\tint maxFreq = -1;\n\t\tMap<Integer, Integer> freqMap = new HashMap<>();\n\t\tfor (int num : lst) {\n\t\t\tif (num > 0) {\n\t\t\t\tfreqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n\t\t\t\tif (freqMap.get(num) > maxFreq) {\n\t\t\t\t\tmaxFreq = freqMap.get(num);\n\t\t\t\t\tmax = num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}<|endoftext|>"}
{"ID": 67, "source": "Multi_HumanEval_java:HumanEval_java/70", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n\t\tif (lst.size() <= 1) {\n\t\t\treturn lst;\n\t\t}\n\n\t\tint minIndex = 0;\n\t\tfor (int i = 1; i < lst.size(); i++) {\n\t\t\tif ((int) lst.get(i) < (int) lst.get(minIndex)) {\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\n\t\tList<Object> result = new ArrayList<>();\n\t\tresult.add(lst.get(minIndex));\n\n\t\tList<Object> remaining = new ArrayList<>();\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tif (i!= minIndex) {\n\t\t\t\tremaining.add(lst.get(i));\n\t\t\t}\n\t\t}\n\n\t\tresult.addAll(strangeSortList(remaining));\n\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n        System.out.println(strangeSortList(lst)); // [1, 4, 2, 3]\n\n        lst = new ArrayList<>();\n        lst.add(5);\n        lst.add(5);\n        lst.add(5);\n        lst.add(5);\n        System.out.println(strangeSortList(lst)); // [5, 5, 5, 5]\n\n        lst = new ArrayList<>();\n        System.out.println(strangeSortList(lst)); // []\n    }\n}<|endoftext|>"}
{"ID": 68, "source": "Multi_HumanEval_java:HumanEval_java/71", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n\t\tif (a + b <= c || a + c <= b || b + c <= a) {\n\t\t\treturn -1;\n\t\t}\n\t\tdouble s = (a + b + c) / 2.0;\n\t\tdouble area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\t\treturn new BigDecimal(area).setScale(2, BigDecimal.ROUND_HALF_UP);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // 6.00\n        System.out.println(triangleArea(1, 2, 10)); // -1\n    }\n}<|endoftext|>"}
{"ID": 69, "source": "Multi_HumanEval_java:HumanEval_java/72", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) ➞ False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\tsum += q.get(i);\n\t\t}\n\t\tif (sum > w) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isPalindrome(q)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isPalindrome(List<Integer> q) {\n\t\tint left = 0;\n\t\tint right = q.size() - 1;\n\t\twhile (left < right) {\n\t\t\tif (q.get(left)!= q.get(right)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 70, "source": "Multi_HumanEval_java:HumanEval_java/73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n\t\tint n = arr.size();\n\t\tint count = 0;\n\t\tfor (int i = 0; i < n / 2; i++) {\n\t\t\tif (arr.get(i)!= arr.get(n - i - 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tList<Integer> arr = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n\t\tSystem.out.println(smallestChange(arr)); // Output: 4\n\n\t\tarr = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n\t\tSystem.out.println(smallestChange(arr)); // Output: 1\n\n\t\tarr = Arrays.asList(1, 2, 3, 2, 1);\n\t\tSystem.out.println(smallestChange(arr)); // Output: 0\n\t}\n}<|endoftext|>"}
{"ID": 71, "source": "Multi_HumanEval_java:HumanEval_java/74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n\t\tint count1 = 0;\n\t\tint count2 = 0;\n\t\tfor (Object obj : lst1) {\n\t\t\tcount1 += obj.toString().length();\n\t\t}\n\t\tfor (Object obj : lst2) {\n\t\t\tcount2 += obj.toString().length();\n\t\t}\n\t\tif (count1 < count2) {\n\t\t\treturn lst1;\n\t\t} else if (count1 > count2) {\n\t\t\treturn lst2;\n\t\t} else {\n\t\t\treturn lst1;\n\t\t}\n\t}\n}<|endoftext|>"}
{"ID": 72, "source": "Multi_HumanEval_java:HumanEval_java/75", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n\t\tif (a < 100) {\n\t\t\tint count = 0;\n\t\t\tfor (int i = 2; i <= Math.sqrt(a); i++) {\n\t\t\t\tif (a % i == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == 0) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // True\n        System.out.println(isMultiplyPrime(12)); // False\n        System.out.println(isMultiplyPrime(100)); // False\n    }\n}<|endoftext|>"}
{"ID": 73, "source": "Multi_HumanEval_java:HumanEval_java/76", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n\t\tif (n == 1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (x == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint power = 0;\n\t\twhile (x > 0) {\n\t\t\tx /= n;\n\t\t\tpower++;\n\t\t}\n\t\treturn power > 0 && x == 1;\n\t}\n}<|endoftext|>"}
{"ID": 74, "source": "Multi_HumanEval_java:HumanEval_java/77", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n\t\tint root = (int) Math.pow(a, 1.0/3);\n\t\treturn root*root*root == a;\n    }\n}<|endoftext|>"}
{"ID": 75, "source": "Multi_HumanEval_java:HumanEval_java/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t\tif (num == null || num.equals(\"\")) {\n\t\t\treturn 0;\n\t\t}\n\t\tString hex = (String) num;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < hex.length(); i++) {\n\t\t\tchar c = hex.charAt(i);\n\t\t\tif (c >= '0' && c <= '9') {\n\t\t\t\tint digit = c - '0';\n\t\t\t\tif (isPrime(digit)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (c >= 'A' && c <= 'F') {\n\t\t\t\tint digit = c - 'A' + 10;\n\t\t\t\tif (isPrime(digit)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tprivate static boolean isPrime(int num) {\n\t\tif (num <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(num); i++) {\n\t\t\tif (num % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 76, "source": "Multi_HumanEval_java:HumanEval_java/79", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n\t\t// Convert decimal to binary\n\t\tString binary = Integer.toBinaryString(decimal);\n\n\t\t// Add 'db' at the beginning and at the end of the string\n\t\tbinary = \"db\" + binary + \"db\";\n\n\t\treturn binary;\n\t}\n}<|endoftext|>"}
{"ID": 77, "source": "Multi_HumanEval_java:HumanEval_java/80", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n\t\tif(s.length() < 3) {\n\t\t\treturn false;\n\t\t}\n\t\tSet<Character> set = new HashSet<>();\n\t\tfor(int i = 0; i < s.length(); i++) {\n\t\t\tif(set.contains(s.charAt(i))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tset.add(s.charAt(i));\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 78, "source": "Multi_HumanEval_java:HumanEval_java/81", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t\tList<String> letterGrades = new ArrayList<>();\n\t\tfor (Number grade : grades) {\n\t\t\tif (grade.doubleValue() >= 4.0) {\n\t\t\t\tletterGrades.add(\"A+\");\n\t\t\t} else if (grade.doubleValue() >= 3.7) {\n\t\t\t\tletterGrades.add(\"A\");\n\t\t\t} else if (grade.doubleValue() >= 3.3) {\n\t\t\t\tletterGrades.add(\"A-\");\n\t\t\t} else if (grade.doubleValue() >= 3.0) {\n\t\t\t\tletterGrades.add(\"B+\");\n\t\t\t} else if (grade.doubleValue() >= 2.7) {\n\t\t\t\tletterGrades.add(\"B\");\n\t\t\t} else if (grade.doubleValue() >= 2.3) {\n\t\t\t\tletterGrades.add(\"B-\");\n\t\t\t} else if (grade.doubleValue() >= 2.0) {\n\t\t\t\tletterGrades.add(\"C+\");\n\t\t\t} else if (grade.doubleValue() >= 1.7) {\n\t\t\t\tletterGrades.add(\"C\");\n\t\t\t} else if (grade.doubleValue() >= 1.3) {\n\t\t\t\tletterGrades.add(\"C-\");\n\t\t\t} else if (grade.doubleValue() >= 1.0) {\n\t\t\t\tletterGrades.add(\"D+\");\n\t\t\t} else if (grade.doubleValue() >= 0.7) {\n\t\t\t\tletterGrades.add(\"D\");\n\t\t\t} else if (grade.doubleValue() >= 0.0) {\n\t\t\t\tletterGrades.add(\"D-\");\n\t\t\t} else {\n\t\t\t\tletterGrades.add(\"E\");\n\t\t\t}\n\t\t}\n\t\treturn letterGrades;\n\t}\n}<|endoftext|>"}
{"ID": 79, "source": "Multi_HumanEval_java:HumanEval_java/82", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t\tint length = string.length();\n\t\tif (length < 2) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(length); i++) {\n\t\t\tif (length % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 80, "source": "Multi_HumanEval_java:HumanEval_java/83", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 1; i <= Math.pow(10, n); i++) {\n\t\t\tString num = String.valueOf(i);\n\t\t\tif (num.startsWith(\"1\") || num.endsWith(\"1\")) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint n = 2;\n\t\tSystem.out.println(startsOneEnds(n));\n\t}\n}<|endoftext|>"}
{"ID": 81, "source": "Multi_HumanEval_java:HumanEval_java/84", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n\t\tString binary = Integer.toBinaryString(n);\n\t\tint sum = 0;\n\t\tfor(int i=0;i<binary.length();i++){\n\t\t\tsum += Integer.parseInt(binary.charAt(i)+\"\");\n\t\t}\n\t\treturn Integer.toString(sum);\n    }\n}<|endoftext|>"}
{"ID": 82, "source": "Multi_HumanEval_java:HumanEval_java/85", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor(int i=1; i<lst.size(); i+=2) {\n\t\t\tif(lst.get(i) % 2 == 0) {\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}<|endoftext|>"}
{"ID": 83, "source": "Multi_HumanEval_java:HumanEval_java/86", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (String word : words) {\n\t\t\tchar[] chars = word.toCharArray();\n\t\t\tArrays.sort(chars);\n\t\t\tsb.append(new String(chars));\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n\n    public static void main(String[] args) {\n        String s = \"Hello World!!!\";\n        System.out.println(antiShuffle(s));\n    }\n}<|endoftext|>"}
{"ID": 84, "source": "Multi_HumanEval_java:HumanEval_java/87", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2)...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\tList<Object> row = (List<Object>) lst.get(i);\n\t\t\tfor (int j = 0; j < row.size(); j++) {\n\t\t\t\tif (row.get(j).equals(x)) {\n\t\t\t\t\tresult.add(new Object[] {i, j});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult.sort((a, b) -> {\n\t\t\tint rowA = (int) a[0];\n\t\t\tint rowB = (int) b[0];\n\t\t\tif (rowA!= rowB) {\n\t\t\t\treturn rowA - rowB;\n\t\t\t}\n\t\t\tint colA = (int) a[1];\n\t\t\tint colB = (int) b[1];\n\t\t\treturn colB - colA;\n\t\t});\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 85, "source": "Multi_HumanEval_java:HumanEval_java/88", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n\t\tif (array == null || array.size() == 0) {\n\t\t\treturn array;\n\t\t}\n\n\t\tint sum = (int) array.get(0) + (int) array.get(array.size() - 1);\n\t\tif (sum % 2 == 0) {\n\t\t\tCollections.sort(array, Collections.reverseOrder());\n\t\t} else {\n\t\t\tCollections.sort(array);\n\t\t}\n\n\t\treturn array;\n    }\n}<|endoftext|>"}
{"ID": 86, "source": "Multi_HumanEval_java:HumanEval_java/89", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tc = (char) ((c - 'a' + 2) % 26 + 'a');\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tc = (char) ((c - 'A' + 2) % 26 + 'A');\n\t\t\t}\n\t\t\tresult += c;\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 87, "source": "Multi_HumanEval_java:HumanEval_java/90", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n\t\tif (lst == null || lst.size() < 2) {\n\t\t\treturn null;\n\t\t}\n\t\tint smallest = Integer.MAX_VALUE;\n\t\tint secondSmallest = Integer.MAX_VALUE;\n\t\tfor (Object obj : lst) {\n\t\t\tint num = (int) obj;\n\t\t\tif (num < smallest) {\n\t\t\t\tsecondSmallest = smallest;\n\t\t\t\tsmallest = num;\n\t\t\t} else if (num < secondSmallest && num!= smallest) {\n\t\t\t\tsecondSmallest = num;\n\t\t\t}\n\t\t}\n\t\tif (secondSmallest == Integer.MAX_VALUE) {\n\t\t\treturn null;\n\t\t}\n\t\treturn secondSmallest;\n\t}\n}<|endoftext|>"}
{"ID": 88, "source": "Multi_HumanEval_java:HumanEval_java/91", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n\t\tint count = 0;\n\t\tString[] words = s.split(\"[.?!]\");\n\t\tfor (String word : words) {\n\t\t\tif (word.startsWith(\"I\")) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}<|endoftext|>"}
{"ID": 89, "source": "Multi_HumanEval_java:HumanEval_java/92", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * any_int(5, 2, 7) ➞ True\n     * \n     * any_int(3, 2, 2) ➞ False\n\n     * any_int(3, -2, 1) ➞ True\n     * \n     * any_int(3.6, -2.2, 2) ➞ False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n\t\tif (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n\t\t\tint sum = (int) x + (int) y + (int) z;\n\t\t\tif (x.equals(sum) || y.equals(sum) || z.equals(sum)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}<|endoftext|>"}
{"ID": 90, "source": "Multi_HumanEval_java:HumanEval_java/93", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t\tString encodedMessage = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar c = message.charAt(i);\n\t\t\tif (Character.isLetter(c)) {\n\t\t\t\tif (Character.isUpperCase(c)) {\n\t\t\t\t\tencodedMessage += Character.toLowerCase(c);\n\t\t\t\t} else {\n\t\t\t\t\tencodedMessage += Character.toUpperCase(c);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tencodedMessage += c;\n\t\t\t}\n\t\t}\n\t\treturn encodedMessage;\n\t}\n}<|endoftext|>"}
{"ID": 91, "source": "Multi_HumanEval_java:HumanEval_java/94", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n\t\tint maxPrime = 0;\n\t\tfor(int i=0;i<lst.size();i++){\n\t\t\tif(lst.get(i)>maxPrime && isPrime(lst.get(i))){\n\t\t\t\tmaxPrime = lst.get(i);\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\twhile(maxPrime>0){\n\t\t\tsum += maxPrime%10;\n\t\t\tmaxPrime /= 10;\n\t\t}\n\t\treturn sum;\n    }\n    \n    public static boolean isPrime(int num){\n        if(num<=1) return false;\n        for(int i=2;i<=Math.sqrt(num);i++){\n            if(num%i==0) return false;\n        }\n        return true;\n    }\n}<|endoftext|>"}
{"ID": 92, "source": "Multi_HumanEval_java:HumanEval_java/95", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n\t\tif (dict == null || ((Map)dict).isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tboolean isLowerCase = true;\n\t\tboolean isUpperCase = true;\n\t\tfor (Object key : ((Map)dict).keySet()) {\n\t\t\tif (!(key instanceof String)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!((String)key).equals(((String)key).toLowerCase())) {\n\t\t\t\tisLowerCase = false;\n\t\t\t}\n\t\t\tif (!((String)key).equals(((String)key).toUpperCase())) {\n\t\t\t\tisUpperCase = false;\n\t\t\t}\n\t\t}\n\t\treturn isLowerCase || isUpperCase;\n    }\n}<|endoftext|>"}
{"ID": 93, "source": "Multi_HumanEval_java:HumanEval_java/96", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Object> countUpTo(int n) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tif (n <= 1) {\n\t\t\treturn result;\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tboolean isPrime = true;\n\t\t\tfor (int j = 2; j < i; j++) {\n\t\t\t\tif (i % j == 0) {\n\t\t\t\t\tisPrime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isPrime) {\n\t\t\t\tresult.add(i);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count == n - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countUpTo(5));\n        System.out.println(countUpTo(11));\n        System.out.println(countUpTo(0));\n        System.out.println(countUpTo(20));\n        System.out.println(countUpTo(1));\n        System.out.println(countUpTo(18));\n    }\n}<|endoftext|>"}
{"ID": 94, "source": "Multi_HumanEval_java:HumanEval_java/97", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n\t\tint product = 0;\n\t\tint temp = 0;\n\t\tint carry = 0;\n\t\tint digitA = 0;\n\t\tint digitB = 0;\n\t\t\n\t\t// Extracting the last digit of a and b\n\t\tdigitA = a % 10;\n\t\tdigitB = b % 10;\n\t\t\n\t\t// Multiplying the last digit of a and b\n\t\ttemp = digitA * digitB;\n\t\t\n\t\t// Adding the result to the product\n\t\tproduct = product + temp;\n\t\t\n\t\t// Extracting the second last digit of a and b\n\t\ta = a / 10;\n\t\tb = b / 10;\n\t\t\n\t\t// Multiplying the second last digit of a and b\n\t\ttemp = a % 10 * b % 10;\n\t\t\n\t\t// Adding the result to the product\n\t\tproduct = product + temp;\n\t\t\n\t\t// Extracting the third last digit of a and b\n\t\ta = a / 10;\n\t\tb = b / 10;\n\t\t\n\t\t// Multiplying the third last digit of a and b\n\t\ttemp = a % 10 * b % 10;\n\t\t\n\t\t// Adding the result to the product\n\t\tproduct = product + temp;\n\t\t\n\t\t// Extracting the fourth last digit of a and b\n\t\ta = a / 10;\n\t\tb = b / 10;\n\t\t\n\t\t// Multiplying the fourth last digit of a and b\n\t\ttemp = a % 10 * b % 10;\n\t\t\n\t\t// Adding the result to the product\n\t\tproduct = product + temp;\n\t\t\n\t\t// Returning the product\n\t\treturn product;\n    }\n}<|endoftext|>"}
{"ID": 95, "source": "Multi_HumanEval_java:HumanEval_java/98", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i += 2) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c >= 'A' && c <= 'Z') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}<|endoftext|>"}
{"ID": 96, "source": "Multi_HumanEval_java:HumanEval_java/99", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\t\tdouble num = Double.parseDouble(value);\n\t\tint integerPart = (int) num;\n\t\tdouble decimalPart = num - integerPart;\n\n\t\tif (decimalPart >= 0.5) {\n\t\t\treturn integerPart + 1;\n\t\t} else if (decimalPart < 0.5 && decimalPart > 0) {\n\t\t\treturn integerPart;\n\t\t} else {\n\t\t\treturn integerPart - 1;\n\t\t}\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));\n        System.out.println(closestInteger(\"15.3\"));\n        System.out.println(closestInteger(\"-15.3\"));\n        System.out.println(closestInteger(\"14.5\"));\n        System.out.println(closestInteger(\"-14.5\"));\n    }\n}<|endoftext|>"}
{"ID": 97, "source": "Multi_HumanEval_java:HumanEval_java/100", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tresult.add(n);\n\t\tint next = n;\n\t\twhile (next > 1) {\n\t\t\tif (next % 2 == 0) {\n\t\t\t\tnext = next / 2;\n\t\t\t} else {\n\t\t\t\tnext = next + 1;\n\t\t\t}\n\t\t\tresult.add(next);\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 98, "source": "Multi_HumanEval_java:HumanEval_java/101", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n\t\tList<Object> words = new ArrayList<Object>();\n\t\tString[] arr = s.split(\"[,]+\");\n\t\tfor(String word : arr) {\n\t\t\twords.add(word);\n\t\t}\n\t\treturn words;\n    }\n}<|endoftext|>"}
{"ID": 99, "source": "Multi_HumanEval_java:HumanEval_java/102", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n\t\tint ans = -1;\n\t\tfor (int i = y; i >= x; i--) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tans = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n    }\n\n    public static void main(String[] args) {\n        int x = 12, y = 15;\n        int ans = chooseNum(x, y);\n        System.out.println(\"The biggest even integer number in the range [\" + x + \", \" + y + \"] inclusive is \" + ans);\n    }\n}<|endoftext|>"}
{"ID": 100, "source": "Multi_HumanEval_java:HumanEval_java/103", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n\t\tif (n > m) {\n\t\t\treturn -1;\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int i = n; i <= m; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\tdouble avg = (double) sum / (m - n + 1);\n\t\tint roundedAvg = (int) Math.round(avg);\n\t\treturn Integer.toBinaryString(roundedAvg);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        Object result = roundedAvg(n, m);\n        if (result == -1) {\n            System.out.println(\"-1\");\n        } else {\n            System.out.println(result);\n        }\n    }\n}<|endoftext|>"}
{"ID": 101, "source": "Multi_HumanEval_java:HumanEval_java/104", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (int i = 0; i < x.size(); i++) {\n\t\t\tint num = x.get(i);\n\t\t\tboolean hasEvenDigit = false;\n\t\t\twhile (num > 0) {\n\t\t\t\tint digit = num % 10;\n\t\t\t\tif (digit % 2 == 0) {\n\t\t\t\t\thasEvenDigit = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t\tif (!hasEvenDigit) {\n\t\t\t\tresult.add(num);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result);\n\t\treturn result;\n\t}\n\n    public static void main(String[] args) {\n        List<Integer> x = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(uniqueDigits(x)); // [1, 15, 33]\n\n        x = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(uniqueDigits(x)); // []\n    }\n}<|endoftext|>"}
{"ID": 102, "source": "Multi_HumanEval_java:HumanEval_java/105", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1, 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tList<Integer> nums = new ArrayList<>();\n\t\tfor (Object obj : arr) {\n\t\t\tif (obj instanceof Integer && (int) obj >= 1 && (int) obj <= 9) {\n\t\t\t\tnums.add((int) obj);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(nums);\n\t\tCollections.reverse(nums);\n\t\tfor (int num : nums) {\n\t\t\tswitch (num) {\n\t\t\t\tcase 1:\n\t\t\t\t\tresult.add(\"One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tresult.add(\"Two\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tresult.add(\"Three\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tresult.add(\"Four\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tresult.add(\"Five\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tresult.add(\"Six\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tresult.add(\"Seven\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tresult.add(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tresult.add(\"Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}<|endoftext|>"}
{"ID": 103, "source": "Multi_HumanEval_java:HumanEval_java/106", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n\t\tList<Integer> res = new ArrayList<Integer>();\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tif(i%2 == 0){\n\t\t\t\tres.add(factorial(i));\n\t\t\t}else{\n\t\t\t\tres.add(sum(i));\n\t\t\t}\n\t\t}\n\t\treturn res;\n    }\n    \n    public static int factorial(int n){\n        int res = 1;\n        for(int i=1; i<=n; i++){\n            res *= i;\n        }\n        return res;\n    }\n    \n    public static int sum(int n){\n        int res = 0;\n        for(int i=1; i<=n; i++){\n            res += i;\n        }\n        return res;\n    }\n    \n    public static void main(String[] args) {\n        int n = 5;\n        List<Integer> res = f(n);\n        System.out.println(res);\n    }\n}<|endoftext|>"}
{"ID": 104, "source": "Multi_HumanEval_java:HumanEval_java/107", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n\t\tint even = 0, odd = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tString str = Integer.toString(i);\n\t\t\tif (str.equals(new StringBuilder(str).reverse().toString())) {\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\teven++;\n\t\t\t\t} else {\n\t\t\t\t\todd++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Arrays.asList(even, odd);\n\t}\n\n    public static void main(String[] args) {\n        int n = 3;\n        List<Integer> result = evenOddPalindrome(n);\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 105, "source": "Multi_HumanEval_java:HumanEval_java/108", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {\n\t\tint count = 0;\n\t\tfor (Object num : arr) {\n\t\t\tif (num instanceof Integer) {\n\t\t\t\tint n = (int) num;\n\t\t\t\tint sum = 0;\n\t\t\t\twhile (n!= 0) {\n\t\t\t\t\tsum += n % 10;\n\t\t\t\t\tn /= 10;\n\t\t\t\t}\n\t\t\t\tif (sum > 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n    public static void main(String[] args) {\n        List<Object> arr1 = new ArrayList<>();\n        arr1.add(-1);\n        arr1.add(11);\n        arr1.add(-11);\n        System.out.println(countNums(arr1)); // Output: 1\n\n        List<Object> arr2 = new ArrayList<>();\n        arr2.add(1);\n        arr2.add(1);\n        arr2.add(2);\n        System.out.println(countNums(arr2)); // Output: 3\n    }\n}<|endoftext|>"}
{"ID": 106, "source": "Multi_HumanEval_java:HumanEval_java/109", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n\t\tint n = arr.size();\n\t\tif (n == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tint i = 0;\n\t\twhile (i < n - 1 && ((Integer) arr.get(i)).compareTo((Integer) arr.get(i + 1)) <= 0) {\n\t\t\ti++;\n\t\t}\n\t\tif (i == n - 1) {\n\t\t\treturn true;\n\t\t}\n\t\tint j = i + 1;\n\t\twhile (j < n && ((Integer) arr.get(j)).compareTo((Integer) arr.get(j - 1)) >= 0) {\n\t\t\tj++;\n\t\t}\n\t\tif (j == n) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tList<Object> arr = new ArrayList<Object>();\n\t\tarr.add(3);\n\t\tarr.add(4);\n\t\tarr.add(5);\n\t\tarr.add(1);\n\t\tarr.add(2);\n\t\tSystem.out.println(moveOneBall(arr)); // True\n\n\t\tarr = new ArrayList<Object>();\n\t\tarr.add(3);\n\t\tarr.add(5);\n\t\tarr.add(4);\n\t\tarr.add(1);\n\t\tarr.add(2);\n\t\tSystem.out.println(moveOneBall(arr)); // False\n\n\t\tarr = new ArrayList<Object>();\n\t\tSystem.out.println(moveOneBall(arr)); // True\n\n\t\tarr = new ArrayList<Object>();\n\t\tarr.add(1);\n\t\tarr.add(2);\n\t\tarr.add(3);\n\t\tarr.add(4);\n\t\tarr.add(5);\n\t\tSystem.out.println(moveOneBall(arr)); // True\n\n\t\tarr = new ArrayList<Object>();\n\t\tarr.add(5);\n\t\tarr.add(4);\n\t\tarr.add(3);\n\t\tarr.add(2);\n\t\tarr.add(1);\n\t\tSystem.out.println(moveOneBall(arr)); // True\n\n\t\tarr = new ArrayList<Object>();\n\t\tarr.add(1);\n\t\tarr.add(1);\n\t\tarr.add(1);\n\t\t"}
{"ID": 107, "source": "Multi_HumanEval_java:HumanEval_java/110", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n\t\t// Create a set of even numbers from lst1\n\t\tSet<Integer> evenSet = new HashSet<>();\n\t\tfor (int num : lst1) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tevenSet.add(num);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Check if all even numbers in lst1 are present in lst2\n\t\tfor (int num : evenSet) {\n\t\t\tif (!lst2.contains(num)) {\n\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"YES\";\n    }\n}<|endoftext|>"}
{"ID": 108, "source": "Multi_HumanEval_java:HumanEval_java/111", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n\t\tHashMap<Character, Integer> map = new HashMap<Character, Integer>();\n\t\tString[] arr = test.split(\" \");\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tchar c = arr[i].charAt(0);\n\t\t\tif(map.containsKey(c)){\n\t\t\t\tmap.put(c, map.get(c)+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(c, 1);\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tArrayList<Character> list = new ArrayList<Character>();\n\t\tfor(Map.Entry<Character, Integer> entry : map.entrySet()){\n\t\t\tif(entry.getValue() > max){\n\t\t\t\tmax = entry.getValue();\n\t\t\t\tlist.clear();\n\t\t\t\tlist.add(entry.getKey());\n\t\t\t}\n\t\t\telse if(entry.getValue() == max){\n\t\t\t\tlist.add(entry.getKey());\n\t\t\t}\n\t\t}\n\t\tHashMap<Character, Integer> result = new HashMap<Character, Integer>();\n\t\tfor(char c : list){\n\t\t\tresult.put(c, max);\n\t\t}\n\t\treturn result;\n    }\n}<|endoftext|>"}
{"ID": 109, "source": "Multi_HumanEval_java:HumanEval_java/112", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n\t\t// Step 1: Remove all characters in s that are in c\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (!c.contains(s.charAt(i) + \"\")) {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t}\n\t\tString result = sb.toString();\n\t\t\n\t\t// Step 2: Check if the result string is palindrome\n\t\tboolean isPalindrome = true;\n\t\tfor (int i = 0; i < result.length() / 2; i++) {\n\t\t\tif (result.charAt(i)!= result.charAt(result.length() - 1 - i)) {\n\t\t\t\tisPalindrome = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Step 3: Return the result and the palindrome check\n\t\tList<Object> resultList = new ArrayList<>();\n\t\tresultList.add(result);\n\t\tresultList.add(isPalindrome);\n\t\treturn resultList;\n\t}\n}<|endoftext|>"}
{"ID": 110, "source": "Multi_HumanEval_java:HumanEval_java/113", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n\t\tList<String> res = new ArrayList<>();\n\t\tfor(String s : lst) {\n\t\t\tint count = 0;\n\t\t\tfor(char c : s.toCharArray()) {\n\t\t\t\tif(Character.isDigit(c) && (c-'0')%2!=0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.add(\"the number of odd elements \"+count+\"n the str\"+s.length()+\"ng \"+s.length()+\" of the \"+lst.indexOf(s)+\"nput.\");\n\t\t}\n\t\treturn res;\n    }\n\n    public static void main(String[] args) {\n        List<String> lst = new ArrayList<>();\n        lst.add(\"1234567\");\n        lst.add(\"3\");\n        lst.add(\"11111111\");\n        System.out.println(oddCount(lst));\n    }\n}<|endoftext|>"}
{"ID": 111, "source": "Multi_HumanEval_java:HumanEval_java/114", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n\t\tlong sum = 0;\n\t\tlong minSum = Long.MAX_VALUE;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint n = nums.size();\n\t\twhile (end < n) {\n\t\t\tsum += (long) nums.get(end);\n\t\t\tend++;\n\t\t\twhile (sum >= 0) {\n\t\t\t\tminSum = Math.min(minSum, sum);\n\t\t\t\tsum -= (long) nums.get(start);\n\t\t\t\tstart++;\n\t\t\t}\n\t\t}\n\t\treturn minSum;\n\t}\n}<|endoftext|>"}
{"ID": 112, "source": "Multi_HumanEval_java:HumanEval_java/115", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n\t\tint rows = grid.size();\n\t\tint cols = grid.get(0).size();\n\t\tint[][] dp = new int[rows][cols];\n\t\tint[][] prev = new int[rows][cols];\n\t\tfor(int i=0;i<rows;i++){\n\t\t\tfor(int j=0;j<cols;j++){\n\t\t\t\tif(grid.get(i).get(j)==1){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tprev[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0;i<rows;i++){\n\t\t\tfor(int j=0;j<cols;j++){\n\t\t\t\tif(dp[i][j]==1){\n\t\t\t\t\tans++;\n\t\t\t\t\tint left = j-1;\n\t\t\t\t\tint right = j+1;\n\t\t\t\t\tint top = i-1;\n\t\t\t\t\tint bottom = i+1;\n\t\t\t\t\twhile(left>=0 && dp[i][left]==1){\n\t\t\t\t\t\tleft--;\n\t\t\t\t\t}\n\t\t\t\t\twhile(right<cols && dp[i][right]==1){\n\t\t\t\t\t\tright++;\n\t\t\t\t\t}\n\t\t\t\t\twhile(top>=0 && dp[top][j]==1){\n\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t\twhile(bottom<rows && dp[bottom][j]==1){\n\t\t\t\t\t\tbottom++;\n\t\t\t\t\t}\n\t\t\t\t\tint min_capacity = Math.min(capacity, right-left+1);\n\t\t\t\t\tmin_capacity = Math.min(min_capacity, bottom-top+1);\n\t\t\t\t\tfor(int k=top;k<=bottom;k++){\n\t\t\t\t\t\tfor(int l=left;l<=right;l++){\n\t\t\t\t\t\t\tif(dp[k][l]==1){\n\t\t\t\t\t\t\t\tdp[k][l] = min_capacity;\n\t\t\t\t\t\t\t\tprev[k][l] = i*cols+j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(ans==0){\n\t\t\treturn 0;\n\t\t}\n\t\tint[][] visited = new int[rows][cols];\n\t\tQueue<Integer> q = new LinkedList<>();\n\t\tq.add(0);\n\t\tvisited[0][0] = 1;\n\t\tint count = 0;\n\t\twhile(!q.isEmpty()){"}
{"ID": 113, "source": "Multi_HumanEval_java:HumanEval_java/116", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n\t\tarr.sort(new Comparator<Object>() {\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\tint count1 = countOnes(o1);\n\t\t\t\tint count2 = countOnes(o2);\n\t\t\t\tif (count1!= count2) {\n\t\t\t\t\treturn count1 - count2;\n\t\t\t\t} else {\n\t\t\t\t\treturn ((Integer) o1).compareTo((Integer) o2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate int countOnes(Object num) {\n\t\t\t\tint count = 0;\n\t\t\t\twhile (num!= 0) {\n\t\t\t\t\tcount += num & 1;\n\t\t\t\t\tnum >>= 1;\n\t\t\t\t}\n\t\t\t\treturn count;\n\t\t\t}\n\t\t});\n\t\treturn arr;\n\t}\n}<|endoftext|>"}
{"ID": 114, "source": "Multi_HumanEval_java:HumanEval_java/117", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tif (s.isEmpty()) {\n\t\t\treturn result;\n\t\t}\n\t\tString[] words = s.split(\" \");\n\t\tfor (String word : words) {\n\t\t\tint count = 0;\n\t\t\tfor (char c : word.toCharArray()) {\n\t\t\t\tif (Character.isLetter(c) &&!Character.isVowel(c)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == n) {\n\t\t\t\tresult.add(word);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 115, "source": "Multi_HumanEval_java:HumanEval_java/118", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tint n = word.length();\n\t\tfor(int i=n-1; i>=1; i--) {\n\t\t\tif(vowels.indexOf(word.charAt(i))!= -1) {\n\t\t\t\tfor(int j=i-1; j>=0; j--) {\n\t\t\t\t\tif(vowels.indexOf(word.charAt(j)) == -1) {\n\t\t\t\t\t\treturn word.charAt(i)+\"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n    }\n}<|endoftext|>"}
{"ID": 116, "source": "Multi_HumanEval_java:HumanEval_java/119", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\t\tStack<Character> stack = new Stack<>();\n\t\tfor (String s : lst) {\n\t\t\tfor (char c : s.toCharArray()) {\n\t\t\t\tif (c == '(') {\n\t\t\t\t\tstack.push(c);\n\t\t\t\t} else if (c == ')') {\n\t\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack.isEmpty()? \"Yes\" : \"No\";\n\t}\n}<|endoftext|>"}
{"ID": 117, "source": "Multi_HumanEval_java:HumanEval_java/120", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n\t\t// Sort the array in descending order\n\t\tCollections.sort(arr, Collections.reverseOrder());\n\t\t\n\t\t// Return the first k elements of the sorted array\n\t\treturn arr.subList(0, k);\n    }\n}<|endoftext|>"}
{"ID": 118, "source": "Multi_HumanEval_java:HumanEval_java/121", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {\n\t\tint sum = 0;\n\t\tfor(int i=0; i<lst.size(); i+=2) {\n\t\t\tif(lst.get(i) % 2!= 0) {\n\t\t\t\tsum += lst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 119, "source": "Multi_HumanEval_java:HumanEval_java/122", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n\t\tint sum = 0;\n\t\tfor(int i=0; i<k; i++) {\n\t\t\tif(arr.get(i) < 100) {\n\t\t\t\tsum += arr.get(i);\n\t\t\t}\n\t\t}\n\t\treturn sum;\n    }\n}<|endoftext|>"}
{"ID": 120, "source": "Multi_HumanEval_java:HumanEval_java/123", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\twhile (n > 1) {\n\t\t\tif (n % 2 == 1) {\n\t\t\t\tresult.add(n);\n\t\t\t}\n\t\t\tif (n % 2 == 0) {\n\t\t\t\tn = n / 2;\n\t\t\t} else {\n\t\t\t\tn = 3 * n + 1;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 121, "source": "Multi_HumanEval_java:HumanEval_java/124", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {\n\t\tif(date.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tString[] dateArr = date.split(\"-\");\n\t\tif(dateArr.length!= 3) {\n\t\t\treturn false;\n\t\t}\n\t\tint month = Integer.parseInt(dateArr[0]);\n\t\tint day = Integer.parseInt(dateArr[1]);\n\t\tint year = Integer.parseInt(dateArr[2]);\n\t\tif(month < 1 || month > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif(day < 1 || day > 31) {\n\t\t\tif(month == 2) {\n\t\t\t\tif(year % 4 == 0 && (year % 100!= 0 || year % 400 == 0)) {\n\t\t\t\t\treturn day <= 29;\n\t\t\t\t} else {\n\t\t\t\t\treturn day <= 28;\n\t\t\t\t}\n\t\t\t} else if(month == 4 || month == 6 || month == 9 || month == 11) {\n\t\t\t\treturn day <= 30;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 122, "source": "Multi_HumanEval_java:HumanEval_java/125", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     *\n     */\n    public static Object splitWords(String txt) {\n\t\tif (txt.contains(\" \")) {\n\t\t\treturn Arrays.asList(txt.split(\"\\\\s+\"));\n\t\t} else if (txt.contains(\",\")) {\n\t\t\treturn Arrays.asList(txt.split(\",\"));\n\t\t} else {\n\t\t\tint count = 0;\n\t\t\tfor (int i = 0; i < txt.length(); i++) {\n\t\t\t\tchar c = txt.charAt(i);\n\t\t\t\tif (Character.isLowerCase(c) && (i % 2 == 1)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\t}\n}<|endoftext|>"}
{"ID": 123, "source": "Multi_HumanEval_java:HumanEval_java/126", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5]) ➞ False\n     * is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n\t\tif (lst.size() == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif ((int) lst.get(i) > (int) lst.get(i + 1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 124, "source": "Multi_HumanEval_java:HumanEval_java/127", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n\t\tint start1 = interval1.get(0);\n\t\tint end1 = interval1.get(1);\n\t\tint start2 = interval2.get(0);\n\t\tint end2 = interval2.get(1);\n\t\t\n\t\tif (end1 < start2 || end2 < start1) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\t\n\t\tint intersectionStart = Math.max(start1, start2);\n\t\tint intersectionEnd = Math.min(end1, end2);\n\t\t\n\t\tint intersectionLength = intersectionEnd - intersectionStart + 1;\n\t\t\n\t\tif (isPrime(intersectionLength)) {\n\t\t\treturn \"YES\";\n\t\t} else {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n}<|endoftext|>"}
{"ID": 125, "source": "Multi_HumanEval_java:HumanEval_java/128", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n\t\tif (arr.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tint sum = 0;\n\t\tint product = 1;\n\t\tfor (Object num : arr) {\n\t\t\tint n = (int) num;\n\t\t\tif (n == 0) {\n\t\t\t\tproduct = 0;\n\t\t\t} else if (n > 0) {\n\t\t\t\tsum += n;\n\t\t\t} else {\n\t\t\t\tsum -= n;\n\t\t\t}\n\t\t}\n\t\treturn product * sum;\n\t}\n}<|endoftext|>"}
{"ID": 126, "source": "Multi_HumanEval_java:HumanEval_java/129", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t\tint n = grid.size();\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tArrays.fill(dp[i], Integer.MAX_VALUE);\n\t\t}\n\t\tdp[0][0] = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i-1][j] + grid[i][j]);\n\t\t\t\t}\n\t\t\t\tif (j > 0) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][j-1] + grid[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<Integer> res = new ArrayList<>();\n\t\tint i = n-1, j = n-1;\n\t\tfor (int l = 0; l < k; l++) {\n\t\t\tres.add(grid[i][j]);\n\t\t\tif (i > 0 && dp[i-1][j] + grid[i][j] < dp[i][j]) {\n\t\t\t\ti--;\n\t\t\t} else if (j > 0 && dp[i][j-1] + grid[i][j] < dp[i][j]) {\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tres.add(grid[i][j]);\n\t\tCollections.reverse(res);\n\t\treturn res;\n    }\n}<|endoftext|>"}
{"ID": 127, "source": "Multi_HumanEval_java:HumanEval_java/130", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n\t\tList<Number> result = new ArrayList<>();\n\t\tresult.add(1);\n\t\tif (n == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(3);\n\t\tif (n == 1) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(2);\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(1 + i / 2);\n\t\t\t} else {\n\t\t\t\tresult.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 128, "source": "Multi_HumanEval_java:HumanEval_java/131", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n\t\tint product = 1;\n\t\twhile (n > 0) {\n\t\t\tint digit = n % 10;\n\t\t\tif (digit % 2!= 0) {\n\t\t\t\tproduct *= digit;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\treturn product;\n\t}\n}<|endoftext|>"}
{"ID": 129, "source": "Multi_HumanEval_java:HumanEval_java/132", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n\t\tStack<Character> stack = new Stack<>();\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tchar c = string.charAt(i);\n\t\t\tif (c == '[') {\n\t\t\t\tstack.push(c);\n\t\t\t} else if (c == ']') {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\treturn!stack.isEmpty();\n\t}\n}<|endoftext|>"}
{"ID": 130, "source": "Multi_HumanEval_java:HumanEval_java/133", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n\t\tint sum = 0;\n\t\tfor(Number num : lst) {\n\t\t\tint rounded = (int) Math.ceil(num.doubleValue());\n\t\t\tsum += rounded*rounded;\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 131, "source": "Multi_HumanEval_java:HumanEval_java/134", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n\t\tif(txt.length() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tchar lastChar = txt.charAt(txt.length()-1);\n\t\tif(Character.isLetter(lastChar) &&!Character.isLetterOrDigit(lastChar)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}<|endoftext|>"}
{"ID": 132, "source": "Multi_HumanEval_java:HumanEval_java/135", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n\t\tint n = arr.size();\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcount[i] = (int) arr.get(i);\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tcount[i] = (count[i] + count[i-1]) % n;\n\t\t}\n\t\tfor (int i = n-1; i >= 0; i--) {\n\t\t\tif (count[i] == 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr = new ArrayList<Object>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(4);\n        arr.add(3);\n        arr.add(5);\n        System.out.println(canArrange(arr)); // Output: 3\n\n        arr = new ArrayList<Object>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        System.out.println(canArrange(arr)); // Output: -1\n    }\n}<|endoftext|>"}
{"ID": 133, "source": "Multi_HumanEval_java:HumanEval_java/136", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n\t\tint maxNeg = Integer.MIN_VALUE;\n\t\tint minPos = Integer.MAX_VALUE;\n\t\tfor (Object obj : lst) {\n\t\t\tif (obj instanceof Integer) {\n\t\t\t\tint num = (int) obj;\n\t\t\t\tif (num < 0) {\n\t\t\t\t\tmaxNeg = Math.max(maxNeg, num);\n\t\t\t\t} else if (num > 0) {\n\t\t\t\t\tminPos = Math.min(minPos, num);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (maxNeg == Integer.MIN_VALUE) {\n\t\t\tmaxNeg = null;\n\t\t}\n\t\tif (minPos == Integer.MAX_VALUE) {\n\t\t\tminPos = null;\n\t\t}\n\t\treturn Arrays.asList(maxNeg, minPos);\n\t}\n}<|endoftext|>"}
{"ID": 134, "source": "Multi_HumanEval_java:HumanEval_java/137", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be. or,\n\n     * compare_one(1, 2.5) ➞ 2.5\n     * compare_one(1, \"2,3\") ➞ \"2,3\"\n     * compare_one(\"5,1\", \"6\") ➞ \"6\"\n     * compare_one(\"1\", 1) ➞ None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {\n\t\tif (a instanceof Integer && b instanceof Integer) {\n\t\t\treturn (int) Math.max((int) a, (int) b);\n\t\t} else if (a instanceof Float && b instanceof Float) {\n\t\t\treturn Math.max((float) a, (float) b);\n\t\t} else if (a instanceof String && b instanceof String) {\n\t\t\tString[] aArr = a.toString().split(\"[.,]\");\n\t\t\tString[] bArr = b.toString().split(\"[.,]\");\n\t\t\tif (aArr.length == 1 && bArr.length == 1) {\n\t\t\t\treturn aArr[0].compareTo(bArr[0]) > 0? a : b;\n\t\t\t} else if (aArr.length == 2 && bArr.length == 2) {\n\t\t\t\tfloat aFloat = Float.parseFloat(aArr[0] + \".\" + aArr[1]);\n\t\t\t\tfloat bFloat = Float.parseFloat(bArr[0] + \".\" + bArr[1]);\n\t\t\t\treturn Math.max(aFloat, bFloat);\n\t\t\t} else {\n\t\t\t\treturn a.toString().compareTo(b.toString()) > 0? a : b;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}<|endoftext|>"}
{"ID": 135, "source": "Multi_HumanEval_java:HumanEval_java/138", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 2; i <= n; i += 2) {\n\t\t\tsum += i;\n\t\t\tif (sum > n) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn sum == n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isEqualToSumEven(4)); // False\n        System.out.println(isEqualToSumEven(6)); // False\n        System.out.println(isEqualToSumEven(8)); // True\n    }\n}<|endoftext|>"}
{"ID": 136, "source": "Multi_HumanEval_java:HumanEval_java/139", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n\t\tlong result = 1;\n\t\tfor (int i = n; i >= 1; i--) {\n\t\t\tresult *= i;\n\t\t}\n\t\treturn result;\n\t}\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        long result = specialFactorial(n);\n        System.out.println(result);\n    }\n}<|endoftext|>"}
{"ID": 137, "source": "Multi_HumanEval_java:HumanEval_java/140", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n\t\tString[] words = text.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (String word : words) {\n\t\t\tif (word.length() > 0) {\n\t\t\t\tif (word.length() == 1) {\n\t\t\t\t\tsb.append(word);\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(word.charAt(0));\n\t\t\t\t\tfor (int i = 1; i < word.length(); i++) {\n\t\t\t\t\t\tif (word.charAt(i) =='') {\n\t\t\t\t\t\t\tif (i < word.length() - 1 && word.charAt(i+1) =='') {\n\t\t\t\t\t\t\t\tsb.append(\"-\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsb.append(\"_\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsb.append(word.charAt(i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n    }\n}<|endoftext|>"}
{"ID": 138, "source": "Multi_HumanEval_java:HumanEval_java/141", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     *\n     */\n    public static String fileNameCheck(String fileName) {\n\t\tString[] parts = fileName.split(\"\\\\.\");\n\t\tif (parts.length!= 2) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tString extension = parts[1];\n\t\tif (!extension.equals(\"txt\") &&!extension.equals(\"exe\") &&!extension.equals(\"dll\")) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tString name = parts[0];\n\t\tif (name.length() > 3) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (!Character.isLetter(name.charAt(0))) {\n\t\t\treturn \"No\";\n\t\t}\n\t\treturn \"Yes\";\n    }\n}<|endoftext|>"}
{"ID": 139, "source": "Multi_HumanEval_java:HumanEval_java/142", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor(int i=0; i<lst.size(); i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\tsum += Math.pow(Integer.parseInt(lst.get(i).toString()), 2);\n\t\t\t}\n\t\t\telse if(i%4==0 && i%3!=0) {\n\t\t\t\tsum += Math.pow(Integer.parseInt(lst.get(i).toString()), 3);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsum += Integer.parseInt(lst.get(i).toString());\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 140, "source": "Multi_HumanEval_java:HumanEval_java/143", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n\t\tString[] words = sentence.split(\" \");\n\t\tList<String> primeWords = new ArrayList<>();\n\t\tfor (String word : words) {\n\t\t\tif (isPrime(word.length())) {\n\t\t\t\tprimeWords.add(word);\n\t\t\t}\n\t\t}\n\t\treturn String.join(\" \", primeWords);\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"This is a test\";\n        System.out.println(wordsInSentence(sentence)); // Output: \"is\"\n\n        sentence = \"lets go for swimming\";\n        System.out.println(wordsInSentence(sentence)); // Output: \"go for\"\n    }\n}<|endoftext|>"}
{"ID": 141, "source": "Multi_HumanEval_java:HumanEval_java/144", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\t\t//convert the strings to fractions\n\t\tFraction xFraction = new Fraction(x);\n\t\tFraction nFraction = new Fraction(n);\n\t\t\n\t\t//multiply the fractions\n\t\tFraction product = xFraction.multiply(nFraction);\n\t\t\n\t\t//check if the product is a whole number\n\t\tif(product.getNumerator() % product.getDenominator() == 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n    }\n}\n\nclass Fraction {\n    private int numerator;\n    private int denominator;\n\n    public Fraction(String fraction) {\n        String[] parts = fraction.split(\"/\");\n        numerator = Integer.parseInt(parts[0]);\n        denominator = Integer.parseInt(parts[1]);\n    }\n\n    public Fraction multiply(Fraction other) {\n        int newNumerator = numerator * other.numerator;\n        int newDenominator = denominator * other.denominator;\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n}<|endoftext|>"}
{"ID": 142, "source": "Multi_HumanEval_java:HumanEval_java/145", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\t\tif (nums.isEmpty()) {\n\t\t\treturn nums;\n\t\t}\n\t\tMap<Integer, List<Object>> map = new HashMap<>();\n\t\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\tint sum = sumOfDigits(nums.get(i));\n\t\t\tif (!map.containsKey(sum)) {\n\t\t\t\tmap.put(sum, new ArrayList<>());\n\t\t\t}\n\t\t\tmap.get(sum).add(nums.get(i));\n\t\t}\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (int sum : map.keySet()) {\n\t\t\tList<Object> list = map.get(sum);\n\t\t\tlist.sort(new Comparator<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\t\tint index1 = nums.indexOf(o1);\n\t\t\t\t\tint index2 = nums.indexOf(o2);\n\t\t\t\t\tif (index1 < index2) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else if (index1 > index2) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tresult.addAll(list);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static int sumOfDigits(Object num) {\n\t\tif (num instanceof Integer) {\n\t\t\tint n = (int) num;\n\t\t\tint sum = 0;\n\t\t\twhile (n!= 0) {\n\t\t\t\tsum += n % 10;\n\t\t\t\tn /= 10;\n\t\t\t}\n\t\t\treturn sum;\n\t\t} else if (num instanceof Long) {\n\t\t\tlong n = (long) num;\n\t\t\tlong sum = 0;\n\t\t\twhile (n!= 0) {\n\t\t\t\tsum += n % 10;\n\t\t\t\tn /= 10;\n\t\t\t}\n\t\t\treturn (int) sum;\n\t\t} else if (num instanceof BigInteger) {\n\t\t\tBigInteger n = (BigInteger) num;\n\t\t\tBigInteger sum = BigInteger.ZERO;\n\t\t\twhile (n.compareTo(BigInteger.ZERO)!= 0) {\n\t\t\t\tsum = sum.add(n.mod(BigInteger.valueOf(10)));\n\t\t\t\tn = n.divide(BigInteger.valueOf(10));\n\t\t\t}\n\t\t\treturn sum."}
{"ID": 143, "source": "Multi_HumanEval_java:HumanEval_java/146", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n\t\tint count = 0;\n\t\tfor(Object num : nums) {\n\t\t\tif(num instanceof Integer) {\n\t\t\t\tint n = (int)num;\n\t\t\t\tif(n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}<|endoftext|>"}
{"ID": 144, "source": "Multi_HumanEval_java:HumanEval_java/147", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n\t\tint count = 0;\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = i*i - i + 1;\n\t\t}\n\t\tfor(int i=0;i<n-2;i++){\n\t\t\tfor(int j=i+1;j<n-1;j++){\n\t\t\t\tfor(int k=j+1;k<n;k++){\n\t\t\t\t\tif((a[i]+a[j]+a[k])%3==0){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static void main(String[] args) {\n\t\tint n = 5;\n\t\tSystem.out.println(getMaxTriples(n));\n\t}\n}<|endoftext|>"}
{"ID": 145, "source": "Multi_HumanEval_java:HumanEval_java/148", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tList<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\tint index1 = planets.indexOf(planet1);\n\t\tint index2 = planets.indexOf(planet2);\n\t\tif (index1 == -1 || index2 == -1) {\n\t\t\treturn result;\n\t\t}\n\t\tint start = Math.min(index1, index2);\n\t\tint end = Math.max(index1, index2);\n\t\tfor (int i = start + 1; i < end; i++) {\n\t\t\tresult.add(planets.get(i));\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 146, "source": "Multi_HumanEval_java:HumanEval_java/149", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tfor(String s : lst) {\n\t\t\tif(s.length() % 2 == 0) {\n\t\t\t\tresult.add(s);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(result, new Comparator<Object>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\tif(o1 instanceof String && o2 instanceof String) {\n\t\t\t\t\tString s1 = (String) o1;\n\t\t\t\t\tString s2 = (String) o2;\n\t\t\t\t\tif(s1.length() == s2.length()) {\n\t\t\t\t\t\treturn s1.compareTo(s2);\n\t\t\t\t\t}\n\t\t\t\t\treturn s1.length() - s2.length();\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\treturn result;\n    }\n}<|endoftext|>"}
{"ID": 147, "source": "Multi_HumanEval_java:HumanEval_java/150", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n\t\tif(isPrime(n)) {\n\t\t\treturn x;\n\t\t} else {\n\t\t\treturn y;\n\t\t}\n    }\n\n    public static boolean isPrime(int n) {\n\t\tif(n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif(n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n\n    public static void main(String[] args) {\n\t\tint n = 7;\n\t\tint x = 34;\n\t\tint y = 12;\n\t\tSystem.out.println(xOrY(n, x, y));\n    }\n}<|endoftext|>"}
{"ID": 148, "source": "Multi_HumanEval_java:HumanEval_java/151", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n\t\tint sum = 0;\n\t\tfor (Object obj : lst) {\n\t\t\tif (obj instanceof Integer && (int) obj % 2!= 0) {\n\t\t\t\tsum += (int) obj * (int) obj;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}<|endoftext|>"}
{"ID": 149, "source": "Multi_HumanEval_java:HumanEval_java/152", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int i=0;i<game.size();i++){\n\t\t\tif(game.get(i)==guess.get(i)){\n\t\t\t\tresult.add(0);\n\t\t\t}else{\n\t\t\t\tresult.add(Math.abs(game.get(i)-guess.get(i)));\n\t\t\t}\n\t\t}\n\t\treturn result;\n    }\n}<|endoftext|>"}
{"ID": 150, "source": "Multi_HumanEval_java:HumanEval_java/153", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n\t\tint maxStrength = -1;\n\t\tString maxExtension = \"\";\n\t\tfor (String extension : extensions) {\n\t\t\tint cap = 0;\n\t\t\tint sm = 0;\n\t\t\tfor (char c : extension.toCharArray()) {\n\t\t\t\tif (Character.isUpperCase(c)) {\n\t\t\t\t\tcap++;\n\t\t\t\t} else if (Character.isLowerCase(c)) {\n\t\t\t\t\tsm++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint strength = cap - sm;\n\t\t\tif (strength > maxStrength) {\n\t\t\t\tmaxStrength = strength;\n\t\t\t\tmaxExtension = extension;\n\t\t\t} else if (strength == maxStrength) {\n\t\t\t\tif (extension.compareTo(maxExtension) < 0) {\n\t\t\t\t\tmaxExtension = extension;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn className + \".\" + maxExtension;\n\t}\n}<|endoftext|>"}
{"ID": 151, "source": "Multi_HumanEval_java:HumanEval_java/154", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n\t\tint n = a.length();\n\t\tint m = b.length();\n\t\tif(m>n) return false;\n\t\tfor(int i=0;i<n-m+1;i++){\n\t\t\tif(a.substring(i,i+m).equals(b)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}<|endoftext|>"}
{"ID": 152, "source": "Multi_HumanEval_java:HumanEval_java/155", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tint evenCount = 0;\n\t\tint oddCount = 0;\n\t\twhile (num!= 0) {\n\t\t\tint digit = num % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\tevenCount++;\n\t\t\t} else {\n\t\t\t\toddCount++;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tresult.add(evenCount);\n\t\tresult.add(oddCount);\n\t\treturn result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12));\n        System.out.println(evenOddCount(123));\n    }\n}<|endoftext|>"}
{"ID": 153, "source": "Multi_HumanEval_java:HumanEval_java/156", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n\t\t// Define the roman numerals and their corresponding values\n\t\tMap<Integer, String> romanNumerals = new HashMap<>();\n\t\tromanNumerals.put(1000, \"m\");\n\t\tromanNumerals.put(900, \"cm\");\n\t\tromanNumerals.put(500, \"d\");\n\t\tromanNumerals.put(400, \"cd\");\n\t\tromanNumerals.put(100, \"c\");\n\t\tromanNumerals.put(90, \"xc\");\n\t\tromanNumerals.put(50, \"l\");\n\t\tromanNumerals.put(40, \"xl\");\n\t\tromanNumerals.put(10, \"x\");\n\t\tromanNumerals.put(9, \"ix\");\n\t\tromanNumerals.put(5, \"v\");\n\t\tromanNumerals.put(4, \"iv\");\n\t\tromanNumerals.put(1, \"i\");\n\n\t\t// Initialize the result string\n\t\tString result = \"\";\n\n\t\t// Iterate over the roman numerals in descending order of value\n\t\tfor (int value : romanNumerals.keySet()) {\n\t\t\t// Calculate the number of times the current value can be subtracted from the number\n\t\t\tint count = number / value;\n\n\t\t\t// Add the corresponding roman numeral to the result string\n\t\t\tresult += romanNumerals.get(value) + (count > 0? count : \"\");\n\n\t\t\t// Subtract the current value from the number\n\t\t\tnumber -= value * count;\n\t\t}\n\n\t\treturn result.toLowerCase();\n\t}\n}<|endoftext|>"}
{"ID": 154, "source": "Multi_HumanEval_java:HumanEval_java/157", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n\t\t// Check if the sum of any two sides is greater than the third side\n\t\tif (a + b > c && a + c > b && b + c > a) {\n\t\t\t// Check if the product of any two sides is equal to the third side\n\t\t\tif (a * b == c || a * c == b || b * c == a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}<|endoftext|>"}
{"ID": 155, "source": "Multi_HumanEval_java:HumanEval_java/158", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n\t\tString maxWord = \"\";\n\t\tint maxUniqueChars = 0;\n\t\tfor (String word : words) {\n\t\t\tint uniqueChars = new HashSet<Character>(word.toCharArray()).size();\n\t\t\tif (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n\t\t\t\tmaxWord = word;\n\t\t\t\tmaxUniqueChars = uniqueChars;\n\t\t\t}\n\t\t}\n\t\treturn maxWord;\n\t}\n}<|endoftext|>"}
{"ID": 156, "source": "Multi_HumanEval_java:HumanEval_java/159", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n\t\tint total = number + need;\n\t\tif (remaining < need) {\n\t\t\ttotal = remaining;\n\t\t}\n\t\treturn Arrays.asList(total, remaining - total);\n    }\n}<|endoftext|>"}
{"ID": 157, "source": "Multi_HumanEval_java:HumanEval_java/160", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n\t\tint result = operand.get(0);\n\t\tint i = 0;\n\t\twhile (i < operator.size()) {\n\t\t\tString op = operator.get(i);\n\t\t\tint op1 = operand.get(i + 1);\n\t\t\tif (op.equals(\"+\")) {\n\t\t\t\tresult += op1;\n\t\t\t} else if (op.equals(\"-\")) {\n\t\t\t\tresult -= op1;\n\t\t\t} else if (op.equals(\"*\")) {\n\t\t\t\tresult *= op1;\n\t\t\t} else if (op.equals(\"//\")) {\n\t\t\t\tresult = result / op1;\n\t\t\t} else if (op.equals(\"**\")) {\n\t\t\t\tresult = (int) Math.pow(result, op1);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
{"ID": 158, "source": "Multi_HumanEval_java:HumanEval_java/161", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(Character.isLetter(c)){\n\t\t\t\tif(Character.isUpperCase(c)){\n\t\t\t\t\tsb.append(Character.toLowerCase(c));\n\t\t\t\t}else{\n\t\t\t\t\tsb.append(Character.toUpperCase(c));\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsb.append(c);\n\t\t\t}\n\t\t}\n\t\tif(sb.length() == 0){\n\t\t\treturn s;\n\t\t}\n\t\treturn sb.reverse().toString();\n    }\n}<|endoftext|>"}
{"ID": 159, "source": "Multi_HumanEval_java:HumanEval_java/162", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n\t\tif (text == null || text.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tmd.update(text.getBytes());\n\t\t\tbyte[] digest = md.digest();\n\t\t\tBigInteger bigInt = new BigInteger(1,digest);\n\t\t\tString hashtext = bigInt.toString(16);\n\t\t\twhile (hashtext.length() < 32) {\n\t\t\t\thashtext = \"0\" + hashtext;\n\t\t\t}\n\t\t\treturn hashtext;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n}<|endoftext|>"}
{"ID": 160, "source": "Multi_HumanEval_java:HumanEval_java/163", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t", "predict": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n\t\tList<Object> result = new ArrayList<>();\n\t\tfor (int i = a; i <= b; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tresult.add(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}<|endoftext|>"}
