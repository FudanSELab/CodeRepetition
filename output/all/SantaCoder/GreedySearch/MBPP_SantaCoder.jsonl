{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t\t# Write your code here\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 3\n\t\tif n == 4:\n\t\t\treturn 4\n\t\tif n == 5:\n\t\t\treturn 5\n\t\tif n == 6:\n\t\t\treturn 6\n\t\tif n == 7:\n\t\t\treturn 7\n\t\tif n == 8:\n\t\t\treturn 8\n\t\tif n == 9:\n\t\t\treturn 9\n\t\tif n == 10:\n\t\t\treturn 10\n\t\tif n == 11:\n\t\t\treturn 11\n\t\tif n == 12:\n\t\t\treturn 12\n\t\tif n == 13:\n\t\t\treturn 13\n\t\tif n == 14:\n\t\t\treturn 14\n\t\tif n == 15:\n\t\t\treturn 15\n\t\tif n == 16:\n\t\t\treturn 16\n\t\tif n == 17:\n\t\t\treturn 17\n\t\tif n == 18:\n\t\t\treturn 18\n\t\tif n == 19:\n\t\t\treturn 19\n\t\tif n == 20:\n\t\t\treturn 20\n\t\tif n == 21:\n\t\t\treturn 21\n\t\tif n == 22:\n\t\t\treturn 22\n\t\tif n == 23:\n\t\t\treturn 23\n\t\tif n == 24:\n\t\t\treturn 24\n\t\tif n == 25:\n\t\t\treturn 25\n\t\tif n == 26:\n\t\t\treturn 26\n\t\tif n == 27:\n\t\t\treturn 27\n\t\tif n == 28:\n\t\t\treturn 28\n\t\tif n == 29:\n\t\t\treturn 29\n\t\tif n == 30:\n\t\t\treturn 30\n\t\tif n == 31:\n\t\t\treturn 31\n\t\tif n == 32:\n\t\t\treturn 32\n\t\tif n == 33:\n\t\t\treturn 33\n\t\tif n == 34:\n\t\t\treturn 34\n\t\tif n == 35:\n\t\t\treturn 3"}
{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t\t# Your code here\n\t\t# str1 = \"abcde\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t# str1 = \"abccba\"\n\t\t"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * get_ludic(n-1)\n\nprint(get_ludic(10))\n<|endoftext|>"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t\treturn s.split()[::-1]\n\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint(reverse_words(\"hello world\"))\nprint"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t\tif num == 1:\n\t\t\treturn False\n\t\telif num == 2:\n\t\t\treturn True\n\t\telif num % 2 == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(3, int(num ** 0.5) + 1, 2):\n\t\t\t\tif num % i == 0:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\nprint(prime_num(47))\nprint(prime_num(48))\nprint(prime_num(49))\nprint(prime_num(50))\nprint(prime_num(51))\nprint(prime_num"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t\treturn degree * (math.pi / 180)\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t\treturn radian * (180 / math.pi)\n\n\"\"\"\nWrite a function to convert a number to a string with a specified number of decimal places.\n\"\"\"\ndef number_to_string(number, places):\n\t\treturn \"{0:.{1}f}\".format(number, places)\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number(string, places):\n\t\treturn float(string)\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number_with_default(string, places, default):\n\t\ttry:\n\t\t\t\treturn float(string)\n\t\texcept ValueError:\n\t\t\t\treturn default\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number_with_default_and_min(string, places, default, min):\n\t\ttry:\n\t\t\t\treturn float(string)\n\t\texcept ValueError:\n\t\t\t\treturn default if float(string) < min else min\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number_with_default_and_max(string, places, default, max):\n\t\ttry:\n\t\t\t\treturn float(string)\n\t\texcept ValueError:\n\t\t\t\treturn default if float(string) > max else max\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number_with_default_and_min_and_max(string, places, default, min, max):\n\t\ttry:\n\t\t\t\treturn float(string)\n\t\texcept ValueError:\n\t\t\t\treturn default if float(string) < min or float(string) > max else min\n\n\"\"\"\nWrite a function to convert a string to a number with a specified number of decimal places.\n\"\"\"\ndef string_to_number_with_default_and_min_and_max_and_step(string, places, default, min,"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t\t# Create a regular expression object\n\t\tregex = re.compile(pattern)\n\t\t# Find all occurrences of the pattern in the text\n\t\tmatches = regex.findall(text)\n\t\t# Return the location of the first match\n\t\treturn matches[0][0]\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(text1, text2):\n\t\t# Create a dictionary to store the longest common substring\n\t\tlongest_common_substring = {}\n\t\t# Iterate through the first string\n\t\tfor i in range(len(text1)):\n\t\t\t\t# Iterate through the second string\n\t\t\t\tfor j in range(len(text2)):\n\t\t\t\t\t\t# If the characters match, increment the count\n\t\t\t\t\t\tif text1[i] == text2[j]:\n\t\t\t\t\t\t\t\t# If the character is not in the dictionary, add it\n\t\t\t\t\t\t\t\tif text1[i] not in longest_common_substring:\n\t\t\t\t\t\t\t\t\t\tlongest_common_substring[text1[i]] = 1\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t# Otherwise, add the count to the existing count\n\t\t\t\t\t\t\t\t\t\tlongest_common_substring[text1[i]] += 1\n\t\t# Return the longest common substring\n\t\treturn longest_common_substring\n\n\"\"\"\nWrite a function to find the longest common substring in a list of strings.\n\"\"\"\ndef longest_common_substring_list(text_list):\n\t\t# Create a dictionary to store the longest common substring\n\t\tlongest_common_substring = {}\n\t\t# Iterate through the first string\n\t\tfor i in range(len(text_list[0])):\n\t\t\t\t# Iterate through the second string\n\t\t\t\tfor j in range(len(text_list[1])):\n\t\t\t\t\t\t# If the characters match, increment the count\n\t\t\t\t\t\tif text_list[0][i] == text_list[1][j]:\n\t\t\t\t\t\t\t\t# If the character is not in the dictionary, add it\n\t\t\t\t\t\t\t\tif text_list[0][i] not in longest_common_substring:\n\t\t\t\t\t\t\t\t\t\tlongest_common_substring[text_list[0][i]] = 1\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\t# Otherwise, add the count to the existing count\n\t\t\t\t\t\t\t\t\t\tlongest_common_substring[text_list[0][i]] += 1\n\t\t# Return the longest common substring\n\t\treturn longest_common_substring\n\n\"\"\"\nWrite"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t\t\"\"\"\n\t\tFunction to find nth bell number.\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn bell_Number(n-1) + bell_Number(n-2)\n\nprint(bell_Number(10))\n<|endoftext|>"}
{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn min(A,B)\n\t\telse:\n\t\t\treturn min(floor_Min(A,B,N-1),floor_Min(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef ceil_Max(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn max(A,B)\n\t\telse:\n\t\t\treturn max(ceil_Max(A,B,N-1),ceil_Max(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find the value of the minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min_2(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn min(A,B)\n\t\telse:\n\t\t\treturn min(floor_Min_2(A,B,N-1),floor_Min_2(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find the value of the maximum possible value for the given periodic function.\n\"\"\"\ndef ceil_Max_2(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn max(A,B)\n\t\telse:\n\t\t\treturn max(ceil_Max_2(A,B,N-1),ceil_Max_2(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find the value of the minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min_3(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn min"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t\tif len(list1) == 0:\n\t\t\treturn None\n\t\tif len(list1) == 1:\n\t\t\treturn list1[0]\n\t\tif len(list1) == 2:\n\t\t\tif list1[0] == list1[1]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 3:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 4:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2] and list1[2] == list1[3]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 5:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2] and list1[2] == list1[3] and list1[3] == list1[4]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 6:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2] and list1[2] == list1[3] and list1[3] == list1[4] and list1[4] == list1[5]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 7:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2] and list1[2] == list1[3] and list1[3] == list1[4] and list1[4] == list1[5] and list1[5] == list1[6]:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn list1[0]\n\t\tif len(list1) == 8:\n\t\t\tif list1[0] == list1[1] and list1[1] == list1[2] and list1[2] =="}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t\treturn max(test_list[i:i+N] for i in range(0, len(test_list), N))\n\nprint(max_of_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n<|endoftext|>"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\tif len(lst) == 0:\n\t\t\treturn lst\n\t\tif len(lst) == 1:\n\t\t\treturn lst\n\t\tif len(lst) == 2:\n\t\t\treturn lst[0] + lst[1]\n\t\tif len(lst) == 3:\n\t\t\treturn lst[0] + lst[1] + lst[2]\n\t\tif len(lst) == 4:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3]\n\t\tif len(lst) == 5:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n\t\tif len(lst) == 6:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n\t\tif len(lst) == 7:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6]\n\t\tif len(lst) == 8:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n\t\tif len(lst) == 9:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\n\t\tif len(lst) == 10:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9]\n\t\tif len(lst) == 11:\n\t\t\treturn lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10]\n\t\tif len(lst) == 12:\n\t\t\treturn lst[0] + lst[1] +"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t\tmax_value = test_list[0]\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i] > max_value:\n\t\t\t\tmax_value = test_list[i]\n\t\treturn max_value\n\n\"\"\"\nWrite a function to find the minimum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef minimum_value(test_list):\n\t\tmin_value = test_list[0]\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i] < min_value:\n\t\t\t\tmin_value = test_list[i]\n\t\treturn min_value\n\n\"\"\"\nWrite a function to find the average value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef average_value(test_list):\n\t\tsum = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum += test_list[i]\n\t\treturn sum / len(test_list)\n\n\"\"\"\nWrite a function to find the sum of all values in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef sum_value(test_list):\n\t\tsum = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum += test_list[i]\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the product of all values in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef product_value(test_list):\n\t\tproduct = 1\n\t\tfor i in range(len(test_list)):\n\t\t\tproduct *= test_list[i]\n\t\treturn product\n\n\"\"\"\nWrite a function to find the sum of all values in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef sum_of_squares(test_list):\n\t\tsum = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum += test_list[i] ** 2\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the square root of all values in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef square_root(test_list):\n\t\tsquare_root = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsquare_root"}
{"ID": 13, "source": "MBPP:614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:\n\t\t\ttotal += i\n\t\treturn total\n\nprint(cummulative_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t\ttotal = 0\n\t\tfor i in test_list:"}
{"ID": 14, "source": "MBPP:615", "prompt": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t\tsum = 0\n\t\tfor i in nums:\n\t\t\tsum += i[0]\n\t\treturn sum/len(nums)\n\nprint(average_tuple((1,2,3,4,5)))\nprint(average_tuple((1,2,3,4,5,6)))\nprint(average_tuple((1,2,3,4,5,6,7)))\nprint(average_tuple((1,2,3,4,5,6,7,8)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(average_tuple((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)))\nprint(average_tuple((1,2,3,4,5,"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t\treturn tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n\"\"\"\nWrite a function to find the sum of the elements in the given tuple.\n\"\"\"\ndef tuple_sum(test_tup):\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of the elements in the given tuple.\n\"\"\"\ndef tuple_product(test_tup):\n\t\treturn prod(test_tup)\n\n\"\"\"\nWrite a function to find the quotient of the elements in the given tuple.\n\"\"\"\ndef tuple_quotient(test_tup):\n\t\treturn tuple([x / y for x, y in zip(test_tup, test_tup)])\n\n\"\"\"\nWrite a function to find the remainder of the elements in the given tuple.\n\"\"\"\ndef tuple_remainder(test_tup):\n\t\treturn tuple([x % y for x, y in zip(test_tup, test_tup)])\n\n\"\"\"\nWrite a function to find the absolute value of the elements in the given tuple.\n\"\"\"\ndef tuple_abs(test_tup):\n\t\treturn tuple([abs(x) for x in test_tup])\n\n\"\"\"\nWrite a function to find the square root of the elements in the given tuple.\n\"\"\"\ndef tuple_sqrt(test_tup):\n\t\treturn tuple([sqrt(x) for x in test_tup])\n\n\"\"\"\nWrite a function to find the cube root of the elements in the given tuple.\n\"\"\"\ndef tuple_cbrt(test_tup):\n\t\treturn tuple([cbrt(x) for x in test_tup])\n\n\"\"\"\nWrite a function to find the factorial of the elements in the given tuple.\n\"\"\"\ndef tuple_factorial(test_tup):\n\t\treturn tuple([factorial(x) for x in test_tup])\n\n\"\"\"\nWrite a function to find the sum of the squares of the elements in the given tuple.\n\"\"\"\ndef tuple_sum_squares(test_tup):\n\t\treturn tuple([x**2 for x in test_tup])\n\n\"\"\"\nWrite a function to find the difference of the squares of the elements in the given tuple.\n\"\"\"\ndef tuple_difference_squares(test_tup):\n\t\treturn tuple([x**2 for x in test_tup])\n"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\t# Write your code here\n\t\tif a == 0 and b == 0:\n\t\t\treturn 0\n\t\tif a == 0:\n\t\t\treturn min_Jumps(b, d, d+b)\n\t\tif b == 0:\n\t\t\treturn min_Jumps(a, d, d+a)\n\t\tif a == b:\n\t\t\treturn 0\n\t\tif a > b:\n\t\t\treturn min_Jumps(b, d, d+b)\n\t\tif a < b:\n\t\t\treturn min_Jumps(a, d, d+a)\n\nprint(min_Jumps(1, 1, 1))\nprint(min_Jumps(1, 2, 1))\nprint(min_Jumps(2, 1, 1))\nprint(min_Jumps(2, 2, 1))\nprint(min_Jumps(3, 1, 1))\nprint(min_Jumps(3, 2, 1))\nprint(min_Jumps(3, 3, 1))\nprint(min_Jumps(4, 1, 1))\nprint(min_Jumps(4, 2, 1))\nprint(min_Jumps(4, 3, 1))\nprint(min_Jumps(4, 4, 1))\nprint(min_Jumps(5, 1, 1))\nprint(min_Jumps(5, 2, 1))\nprint(min_Jumps(5, 3, 1))\nprint(min_Jumps(5, 4, 1))\nprint(min_Jumps(5, 5, 1))\nprint(min_Jumps(6, 1, 1))\nprint(min_Jumps(6, 2, 1))\nprint(min_Jumps(6, 3, 1))\nprint(min_Jumps(6, 4, 1))\nprint(min_Jumps(6, 5, 1))\nprint(min_Jumps(6, 6, 1))\nprint(min_Jumps(7, 1, 1))\nprint(min_Jumps(7, 2,"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t\treturn list(map(lambda x,y: x/y,nums1,nums2))\n\nprint(div_list([1,2,3,4,5], [2,3,4,5,6]))\n<|endoftext|>"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t\ttest_str = test_str.replace('0','')\n\t\ttest_str = test_str.replace('1','')\n\t\ttest_str = test_str.replace('2','')\n\t\ttest_str = test_str.replace('3','')\n\t\ttest_str = test_str.replace('4','')\n\t\ttest_str = test_str.replace('5','')\n\t\ttest_str = test_str.replace('6','')\n\t\ttest_str = test_str.replace('7','')\n\t\ttest_str = test_str.replace('8','')\n\t\ttest_str = test_str.replace('9','')\n\t\treturn test_str\n\nprint(move_num('123456789'))\n<|endoftext|>"}
{"ID": 19, "source": "MBPP:620", "prompt": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t\t# Write your code here\n\t\tif n == 1:\n\t\t\treturn [a]\n\t\telse:\n\t\t\tresult = []\n\t\t\tfor i in range(n):\n\t\t\t\tfor j in range(i+1, n):\n\t\t\t\t\tif a[i] % a[j] == 0:\n\t\t\t\t\t\tresult.append([a[i], a[j]])\n\t\t\treturn largest_subset(result, n-1)\n\nprint(largest_subset([1, 2, 3, 4, 5], 5))\n<|endoftext|>"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = str(int(test_list[i]) + K)\n\t\treturn test_list\n\nprint(increment_numerics([\"10\", \"20\", \"30\"], 10))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 100))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 10000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 100000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 10000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 100000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 10000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 100000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1000000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 10000000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 100000000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1000000000000000))\nprint(increment_numerics([\"10\", \"20\", \"30\"], 1"}
{"ID": 21, "source": "MBPP:622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t", "predict": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t\tif n % 2 == 0:\n\t\t\treturn (arr1[n/2] + arr2[n/2]) / 2\n\t\telse:\n\t\t\treturn arr1[n/2]\n\ndef main():\n\tarr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tarr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr1)\n\tprint(get_median(arr1, arr2, n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda2(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda2([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda3(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda3([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda4(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda4([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda5(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda5([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums_lambda6(nums,n):\n\t\treturn [lambda x: x**n for x in nums]\n\nprint(nth_nums_lambda6([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in"}
{"ID": 23, "source": "MBPP:624", "prompt": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t\treturn string.isupper()\n\nprint(is_upper(\"hello\"))\nprint(is_upper(\"HELLO\"))\nprint(is_upper(\"HELLO world\"))\nprint(is_upper(\"HELLO WORLD\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WORLD!\"))\nprint(is_upper(\"HELLO WOR"}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t\tif len(newList) == 0:\n\t\t\treturn\n\t\telse:\n\t\t\tnewList[0], newList[-1] = newList[-1], newList[0]\n\t\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\nprint(swap_List([1,2,3,4,5,6]))\nprint(swap_List([1,2,3,4,5,6,7]))\nprint(swap_List([1,2,3,4,5,6,7,8]))\nprint(swap_List([1,2,3,4,5,6,7,8,9]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(swap"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t\treturn 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\ndef inscribed_circle(r) :\n\treturn 2*r*r*math.pi\n\ndef largest_triangle(r) :\n\tarea = triangle_area(r)\n\tcirc = inscribed_circle(r)\n\treturn area/circ\n\nprint(largest_triangle(1))\nprint(largest_triangle(2))\nprint(largest_triangle(3))\nprint(largest_triangle(4))\nprint(largest_triangle(5))\nprint(largest_triangle(6))\nprint(largest_triangle(7))\nprint(largest_triangle(8))\nprint(largest_triangle(9))\nprint(largest_triangle(10))\nprint(largest_triangle(11))\nprint(largest_triangle(12))\nprint(largest_triangle(13))\nprint(largest_triangle(14))\nprint(largest_triangle(15))\nprint(largest_triangle(16))\nprint(largest_triangle(17))\nprint(largest_triangle(18))\nprint(largest_triangle(19))\nprint(largest_triangle(20))\nprint(largest_triangle(21))\nprint(largest_triangle(22))\nprint(largest_triangle(23))\nprint(largest_triangle(24))\nprint(largest_triangle(25))\nprint(largest_triangle(26))\nprint(largest_triangle(27))\nprint(largest_triangle(28))\nprint(largest_triangle(29))\nprint(largest_triangle(30))\nprint(largest_triangle(31))\nprint(largest_triangle(32))\nprint(largest_triangle(33))\nprint(largest_triangle(34))\nprint(largest_triangle(35))\nprint(largest"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t\tif start>end: \n\t\t\treturn start\n\t\tmid = (start+end)//2\n\t\tif array[mid]==mid: \n\t\t\treturn find_First_Missing(array,mid+1,end)\n\t\telif array[mid]>mid: \n\t\t\treturn find_First_Missing(array,start,mid-1)\n\t\telse: \n\t\t\treturn find_First_Missing(array,mid+1,end)\n\ndef find_First_Missing_2(array,start,end): \n\t\tif start>end: \n\t\t\treturn start\n\t\tmid = (start+end)//2\n\t\tif array[mid]==mid: \n\t\t\treturn find_First_Missing_2(array,mid+1,end)\n\t\telif array[mid]>mid: \n\t\t\treturn find_First_Missing_2(array,start,mid-1)\n\t\telse: \n\t\t\treturn find_First_Missing_2(array,mid+1,end)\n\ndef find_First_Missing_3(array,start,end): \n\t\tif start>end: \n\t\t\treturn start\n\t\tmid = (start+end)//2\n\t\tif array[mid]==mid: \n\t\t\treturn find_First_Missing_3(array,mid+1,end)\n\t\telif array[mid]>mid: \n\t\t\treturn find_First_Missing_3(array,start,mid-1)\n\t\telse: \n\t\t\treturn find_First_Missing_3(array,mid+1,end)\n\ndef find_First_Missing_4(array,start,end): \n\t\tif start>end: \n\t\t\treturn start\n\t\tmid = (start+end)//2\n\t\tif array[mid]==mid: \n\t\t\treturn find_First_Missing_4(array,mid+1,end)\n\t\telif array[mid]>mid: \n\t\t\treturn find_First_Missing_4(array,start,mid-1)\n\t\telse: \n\t\t\treturn find_First_Missing_4(array,mid+1,end)\n\ndef find_First_Missing_5(array,start,end): \n\t\tif start>end: \n\t\t\treturn start\n\t\tmid = (start+end)//2\n\t\tif array[mid]==mid: \n\t\t\treturn find_First_Missing_5(array,mid+1,end)\n\t\t"}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t\treturn string.replace(\" \", \"*\")\n\nprint(replace_spaces(\"This is a test string\"))\n<|endoftext|>"}
{"ID": 28, "source": "MBPP:629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\teven = []\n\t\todd = []\n\t\tfor i in list:\n\t\t\tif i % 2 == 0:\n\t\t\t\teven.append(i)\n\t\t\telse:\n\t\t\t\todd.append(i)\n\t\treturn even, odd\n\ndef EvenOdd(list):\n\teven, odd = Split(list)\n\tprint(even)\n\tprint(odd)\n\nEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n<|endoftext|>"}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t\treturn test_tup[0], test_tup[1], test_tup[2]\n\ndef get_adjacent_coordinates(test_tup):\n\t\treturn test_tup[0] + 1, test_tup[1], test_tup[2]\n\ndef get_adjacent_coordinates_2(test_tup):\n\t\treturn test_tup[0] - 1, test_tup[1], test_tup[2]\n\ndef get_adjacent_coordinates_3(test_tup):\n\t\treturn test_tup[0], test_tup[1] + 1, test_tup[2]\n\ndef get_adjacent_coordinates_4(test_tup):\n\t\treturn test_tup[0], test_tup[1] - 1, test_tup[2]\n\ndef get_adjacent_coordinates_5(test_tup):\n\t\treturn test_tup[0], test_tup[1], test_tup[2] + 1\n\ndef get_adjacent_coordinates_6(test_tup):\n\t\treturn test_tup[0], test_tup[1], test_tup[2] - 1\n\ndef get_adjacent_coordinates_7(test_tup):\n\t\treturn test_tup[0] + 1, test_tup[1] + 1, test_tup[2]\n\ndef get_adjacent_coordinates_8(test_tup):\n\t\treturn test_tup[0] - 1, test_tup[1] + 1, test_tup[2]\n\ndef get_adjacent_coordinates_9(test_tup):\n\t\treturn test_tup[0] + 1, test_tup[1] - 1, test_tup[2]\n\ndef get_adjacent_coordinates_10(test_tup):\n\t\treturn test_tup[0] - 1, test_tup[1] - 1, test_tup[2]\n\ndef get_adjacent_coordinates_11(test_tup):\n\t\treturn test_tup[0] + 1, test_tup[1], test_tup[2] + 1\n\ndef get_adjacent_coordinates_12(test_tup):\n\t\treturn test_tup[0] - 1, test_tup[1],"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t\treturn re.sub(r'\\s+', '_', text)\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_space(text, char):\n\t\treturn text.replace(char,'')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_dash(text, char):\n\t\treturn text.replace(char, '-')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore_and_dash(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore_and_dash_and_space(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore_and_dash_and_space_and_space(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore_and_dash_and_space_and_space_and_space(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char_with_underscore_and_dash_and_space_and_space_and_space_and_space(text, char):\n\t\treturn text.replace(char, '_')\n\n\"\"\"\nWrite a function to replace all the characters in a string with a given character.\n\"\"\"\ndef replace_char"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t\tfor i in range(len(num_list)):\n\t\t\tif num_list[i] == 0:\n\t\t\t\tnum_list.pop(i)\n\t\t\t\tnum_list.append(0)\n\t\t\t\tbreak\n\t\treturn num_list\n\nprint(move_zero([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t\t# Your code here\n\t\txor = 0\n\t\tfor i in range(n) :\n\t\t\tfor j in range(i+1,n) :\n\t\t\t\txor = xor ^ arr[i] ^ arr[j]\n\t\treturn xor\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(pair_OR_Sum(arr,n))\n<|endoftext|>"}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(even_Power_Sum(10))\n<|endoftext|>"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t\theap = []\n\t\tfor item in iterable:\n\t\t\theap.append(item)\n\t\tfor i in range(len(heap)-1, 0, -1):\n\t\t\theap[0], heap[i] = heap[i], heap[0]\n\t\t\theapify(heap, i, 0)\n\t\treturn heap\n\ndef heapify(heap, i, start):\n\tleft = 2*i + 1\n\tright = 2*i + 2\n\tlargest = i\n\tif left < len(heap) and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < len(heap) and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest!= i:\n\t\theap[0], heap[largest] = heap[largest], heap[0]\n\t\theapify(heap, largest, 0)\n\ndef main():\n\tprint(heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (b**2 - 4*a*c) < 0: \n\t\t\treturn False\n\t\telse: \n\t\t\treturn True\n\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint(Check_Solution(1,2,32))\nprint(Check_Solution(1,2,33))\nprint(Check_Solution(1,2,34))\nprint(Check_Solution(1,2,35))\nprint(Check_Solution(1,2,36))\nprint(Check_Solution(1,2,3"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t\tif sale_amount > actual_cost: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,10))\nprint(noprofit_noloss(100,1))\nprint(noprofit_noloss(100,0))\nprint(noprofit_noloss(100,-1))\nprint(noprofit_noloss(100,-100))\nprint(noprofit_noloss(100,-10))\nprint(noprofit_noloss(100,-1))\nprint(noprofit_noloss(100,-1000))\nprint(noprofit_noloss(100,-10000))\nprint(noprofit_noloss(100,-100000))\nprint(noprofit_noloss(100,-1000000))\nprint(noprofit_noloss(100,-10000000))\nprint(noprofit_noloss(100,-100000000))\nprint(noprofit_noloss(100,-1000000000))\nprint(noprofit_noloss(100,-10000000000))\nprint(noprofit_noloss(100,-100000000000))\nprint(noprofit_noloss(100,-1000000000000))\nprint(noprofit_noloss(100,-10000000000000))\nprint(noprofit_noloss(100,-100000000000000))\nprint(noprofit_noloss(100,-1000000000000000))\nprint(noprofit_noloss(100,-10000000000000000))\nprint(noprofit_noloss(100,-1000000"}
{"ID": 37, "source": "MBPP:638", "prompt": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t", "predict": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\t\"\"\"\n\t\t:param v: wind speed in m/s\n\t\t:param t: temperature in C\n\t\t:return: wind chill index in C\n\t\t\"\"\"\n\t\treturn (v * 1.8) + 32\n\n\"\"\"\nWrite a function to calculate dew point.\n\"\"\"\ndef dew_point(t):\n\t\t\"\"\"\n\t\t:param t: temperature in C\n\t\t:return: dew point in C\n\t\t\"\"\"\n\t\treturn (t - 32) * 5 / 9\n\n\"\"\"\nWrite a function to calculate relative humidity.\n\"\"\"\ndef relative_humidity(t):\n\t\t\"\"\"\n\t\t:param t: temperature in C\n\t\t:return: relative humidity in %\n\t\t\"\"\"\n\t\treturn t * 100 / 25\n\n\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\t\"\"\"\n\t\t:param v: wind speed in m/s\n\t\t:param t: temperature in C\n\t\t:return: wind chill index in C\n\t\t\"\"\"\n\t\treturn (v * 1.8) + 32\n\n\"\"\"\nWrite a function to calculate dew point.\n\"\"\"\ndef dew_point(t):\n\t\t\"\"\"\n\t\t:param t: temperature in C\n\t\t:return: dew point in C\n\t\t\"\"\"\n\t\treturn (t - 32) * 5 / 9\n\n\"\"\"\nWrite a function to calculate relative humidity.\n\"\"\"\ndef relative_humidity(t):\n\t\t\"\"\"\n\t\t:param t: temperature in C\n\t\t:return: relative humidity in %\n\t\t\"\"\"\n\t\treturn t * 100 / 25\n\n\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t\t\"\"\"\n\t\t:param v: wind speed in m/s\n\t\t:param t: temperature in C\n\t\t:return: wind chill index in C\n\t\t\"\"\"\n\t\treturn (v * 1.8) + 32\n\n\"\"\"\nWrite a function to calculate dew point.\n\"\"\"\ndef dew_point(t):\n\t\t\"\"\"\n\t\t:param t: temperature in C\n\t\t:return: dew point in C\n\t\t\"\"\"\n\t\treturn"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t\treturn sum([len(name) for name in sample_names if name[0].islower()])\n\nprint(sample_nam([\"John\", \"Jane\", \"Jim\", \"Jill\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jimmy\", \"Jim"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\treturn items.replace('(', '').replace(')', '')\n\nprint(remove_parenthesis}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\tif n == 1:\n\t\t\treturn True\n\t\telif n == 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn is_nonagonal(n-1) or is_nonagonal(n-2)\n\nprint(is_nonagonal(10))\n<|endoftext|>"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t\t# Create a dictionary to store the row values\n\t\trow_dict = {}\n\t\t# Iterate through the list\n\t\tfor row in test_list:\n\t\t\t# Iterate through the columns\n\t\t\tfor col in range(len(row)):\n\t\t\t\t# If the value is not in the dictionary\n\t\t\t\tif row[col] not in row_dict:\n\t\t\t\t\t# Add the value to the dictionary\n\t\t\t\t\trow_dict[row[col]] = 1\n\t\t\t\t# If the value is in the dictionary\n\t\t\t\telse:\n\t\t\t\t\t# Increment the value\n\t\t\t\t\trow_dict[row[col]] += 1\n\t\t# Create a list to store the values\n\t\trow_list = []\n\t\t# Iterate through the dictionary\n\t\tfor key, value in row_dict.items():\n\t\t\t# If the value is greater than 1\n\t\t\tif value > 1:\n\t\t\t\t# Add the value to the list\n\t\t\t\trow_list.append(key)\n\t\t# Return the list\n\t\treturn row_list\n\n\"\"\"\nWrite a function to remove similar columns from the given tuple matrix.\n\"\"\"\ndef remove_similar_column(test_list):\n\t\t# Create a dictionary to store the column values\n\t\tcol_dict = {}\n\t\t# Iterate through the list\n\t\tfor col in range(len(test_list[0])):\n\t\t\t# Iterate through the rows\n\t\t\tfor row in range(len(test_list)):\n\t\t\t\t# If the value is not in the dictionary\n\t\t\t\tif test_list[row][col] not in col_dict:\n\t\t\t\t\t# Add the value to the dictionary\n\t\t\t\t\tcol_dict[test_list[row][col]] = 1\n\t\t\t\t# If the value is in the dictionary\n\t\t\t\telse:\n\t\t\t\t\t# Increment the value\n\t\t\t\t\tcol_dict[test_list[row][col]] += 1\n\t\t# Create a list to store the values\n\t\tcol_list = []\n\t\t# Iterate through the dictionary\n\t\tfor key, value in col_dict.items():\n\t\t\t# If the value is greater than 1\n\t\t\tif value > 1:\n\t\t\t\t# Add the value to the list\n\t\t\t\tcol_list.append(key)\n\t\t# Return the list\n\t\treturn col_list\n\n\"\"\"\nWrite a function to remove similar values from the given tuple matrix.\n\"\"\"\ndef remove_similar_value"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t\treturn text.find('z')!= 0 and text.find('z')!= len(text) - 1\n\n\"\"\"\nWrite a function that matches a word containing 'z', at the start or end of the word.\n\"\"\"\ndef text_match_wordz_start(text):\n\t\treturn text.find('z') == 0\n\n\"\"\"\nWrite a function that matches a word containing 'z', at the end of the word.\n\"\"\"\ndef text_match_wordz_end(text):\n\t\treturn text.find('z') == len(text) - 1\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_start(text):\n\t\treturn text.find('z')!= 0\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_end(text):\n\t\treturn text.find('z')!= len(text) - 1\n\n\"\"\"\nWrite a function that matches a word containing 'z', at the start or end of the word.\n\"\"\"\ndef text_match_wordz_start_end(text):\n\t\treturn text.find('z') == 0 or text.find('z') == len(text) - 1\n\n\"\"\"\nWrite a function that matches a word containing 'z', at the end of the word.\n\"\"\"\ndef text_match_wordz_end_start(text):\n\t\treturn text.find('z') == len(text) - 1 or text.find('z')!= 0\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle_start_end(text):\n\t\treturn text.find('z')!= 0 or text.find('z')!= len(text) - 1\n\n\"\"\"\nWrite a function that matches a word containing 'z', at the start or end of the word.\n\"\"\"\ndef text_match_wordz_start_middle_end(text):\n\t\treturn text.find('z') == 0 or text.find('z') =="}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t\t# Your code here\n\t\t# reverse the array from 0 to k-1\n\t\t# reverse the array from k to n-1\n\t\t# reverse the array from n to 0\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t# return the reversed array\n\t\t"}
{"ID": 44, "source": "MBPP:645", "prompt": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t\t# Your code here\n\t\tproduct = 1\n\t\tfor i in range(K):\n\t\t\tproduct *= test_list[i]\n\t\treturn product\n\nprint(find_k_product([1,2,3,4,5], 3))\nprint(find_k_product([1,2,3,4,5], 4))\nprint(find_k_product([1,2,3,4,5], 5))\nprint(find_k_product([1,2,3,4,5], 6))\nprint(find_k_product([1,2,3,4,5], 7))\nprint(find_k_product([1,2,3,4,5], 8))\nprint(find_k_product([1,2,3,4,5], 9))\nprint(find_k_product([1,2,3,4,5], 10))\nprint(find_k_product([1,2,3,4,5], 11))\nprint(find_k_product([1,2,3,4,5], 12))\nprint(find_k_product([1,2,3,4,5], 13))\nprint(find_k_product([1,2,3,4,5], 14))\nprint(find_k_product([1,2,3,4,5], 15))\nprint(find_k_product([1,2,3,4,5], 16))\nprint(find_k_product([1,2,3,4,5], 17))\nprint(find_k_product([1,2,3,4,5], 18))\nprint(find_k_product([1,2,3,4,5], 19))\nprint(find_k_product([1,2,3,4,5], 20))\nprint(find_k_product([1,2,3,4,5], 21))\nprint(find_k_product([1,2,3,4,5], 22))\nprint(find_k_product([1,2,3,4,5], 23))\n"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t\tif N%K==0:\n\t\t\treturn N/K\n\t\telse:\n\t\t\treturn N/K+1\n\nprint(No_of_cubes(5,3))\n<|endoftext|>"}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at digits.\n\"\"\"\ndef split_digitstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at punctuation.\n\"\"\"\ndef split_punctuationstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at whitespace.\n\"\"\"\ndef split_whitespacestring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index(text, char):\n\t\treturn text.split(char, 1)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index_and_count(text, char):\n\t\treturn text.split(char, 1)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index_and_count_and_separator(text, char, separator):\n\t\treturn text.split(char, 1)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index_and_count_and_separator_and_count(text, char, separator, count):\n\t\treturn text.split(char, 1)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index_and_count_and_separator_and_count_and_separator(text, char, separator, count, separator):\n\t\treturn text.split(char, 1)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_string_with_index_and_count_and_separator_and_count_and_separator_and_count(text, char, separator, count, separator, count):\n\t\treturn text.split(char"}
{"ID": 47, "source": "MBPP:648", "prompt": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t", "predict": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t\tfor i in range(len(lst)):\n\t\t\tif i % 2 == 0:\n\t\t\t\tlst[i], lst[i+1] = lst[i+1], lst[i]\n\t\treturn lst\n\nprint(exchange_elements([1, 2, 3, 4, 5]))\nprint(exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 1"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t\tsum = 0\n\t\tfor i in range(m, n+1):\n\t\t\tsum += nums[i]\n\t\treturn sum\n\nprint(sum_Range_list([1,2,3,4,5], 1, 4))\nprint(sum_Range_list([1,2,3,4,5], 0, 4))\nprint(sum_Range_list([1,2,3,4,5], 1, 5))\nprint(sum_Range_list([1,2,3,4,5], 0, 5))\nprint(sum_Range_list([1,2,3,4,5], 1, 6))\nprint(sum_Range_list([1,2,3,4,5], 0, 6))\nprint(sum_Range_list([1,2,3,4,5], 1, 7))\nprint(sum_Range_list([1,2,3,4,5], 0, 7))\nprint(sum_Range_list([1,2,3,4,5], 1, 8))\nprint(sum_Range_list([1,2,3,4,5], 0, 8))\nprint(sum_Range_list([1,2,3,4,5], 1, 9))\nprint(sum_Range_list([1,2,3,4,5], 0, 9))\nprint(sum_Range_list([1,2,3,4,5], 1, 10))\nprint(sum_Range_list([1,2,3,4,5], 0, 10))\nprint(sum_Range_list([1,2,3,4,5], 1, 11))\nprint(sum_Range_list([1,2,3,4,5], 0, 11))\nprint(sum_Range_list([1,2,3,4,5], 1, 12))\nprint(sum_Range_list([1,2,3,4,5], 0, 12))\nprint(sum_Range_list([1,2,3,4,5], 1, 13"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t\tif(n!=m):\n\t\t\treturn False\n\t\tfor i in range(n):\n\t\t\tif(arr1[i]!=arr2[i]):\n\t\t\t\treturn False\n\t\treturn True\n\narr1=[1,2,3,4,5]\narr2=[1,2,3,4,5]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n<|endoftext|>"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\tif len(test_tup1)!= len(test_tup2):\n\t\t\treturn False\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i]!= test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if one tuple is a superset of another tuple.\n\"\"\"\ndef check_superset(test_tup1, test_tup2):\n\t\tif len(test_tup1)!= len(test_tup2):\n\t\t\treturn False\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] not in test_tup2:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if one tuple is a superset of another tuple.\n\"\"\"\ndef check_superset_2(test_tup1, test_tup2):\n\t\tif len(test_tup1)!= len(test_tup2):\n\t\t\treturn False\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] not in test_tup2:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if one tuple is a superset of another tuple.\n\"\"\"\ndef check_superset_3(test_tup1, test_tup2):\n\t\tif len(test_tup1)!= len(test_tup2):\n\t\t\treturn False\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] not in test_tup2:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if one tuple is a superset of another tuple.\n\"\"\"\ndef check_superset_4(test_tup1, test_tup2):\n\t\tif len(test_tup1)!= len(test_tup2):\n\t\t\treturn False\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] not in test_tup2:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if one tuple is a superset of another tuple.\n\"\"\"\ndef check_superset_5(test_tup1, test_tup2):\n\t\tif len"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_2(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_3(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_4(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_5(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_6(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_7(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_8(test_list):\n\t\treturn [list(x) for x in zip(*test_list)]\n\n\"\"\"\nWrite a function to flatten the given list matrix into the list list with each list representing each row.\n\"\"\"\ndef list_to_matrix_9(test_list):\n\t\t"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t\td = {}\n\t\tfor i in l:\n\t\t\t\td.setdefault(i[0],[]).append(i[1])\n\t\treturn d\n\nprint(grouping_dictionary([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5)]))\n<|endoftext|>"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t\treturn 2*(l+b)\n\nprint(rectangle_perimeter(10,20))\n<|endoftext|>"}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tsum += i**5\n\t\treturn sum\n\nprint(fifth_Power_Sum(10))\n<|endoftext|>"}
{"ID": 55, "source": "MBPP:656", "prompt": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t\t# Your code here\n\t\tsum1 = 0\n\t\tsum2 = 0\n\t\tfor i in range(n):\n\t\t\tsum1 += abs(a[i]-b[i])\n\t\tfor i in range(n):\n\t\t\tsum2 += abs(a[i]-b[i])\n\t\treturn min(sum1,sum2)\n\na = [1,2,3,4,5]\nb = [1,2,3,4,5]\nn = len(a)\nprint(find_Min_Sum(a,b,n))\n<|endoftext|>"}
{"ID": 56, "source": "MBPP:657", "prompt": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t\treturn n//10\n\nprint(first_Digit(100))\n<|endoftext|>"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t\tmax_occur = 0\n\t\tmax_item = 0\n\t\tfor i in list1:\n\t\t\tif list1.count(i) > max_occur:\n\t\t\t\tmax_occur = list1.count(i)\n\t\t\t\tmax_item = i\n\t\treturn max_item\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t\tif x in duplicants: \n\t\t\tprint(x)\n\t\telse: \n\t\t\tduplicants.append(x)\n\nduplicants = []\n\nfor i in range(1, 1000): \n\tRepeat(i)\n\nprint(duplicants)<|endoftext|>"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t\t# Your code here\n\t\tif l1 <= l2 and r1 >= r2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(find_Points(1,2,3,4))\nprint(find_Points(1,2,3,5))\nprint(find_Points(1,2,3,6))\nprint(find_Points(1,2,3,7))\nprint(find_Points(1,2,3,8))\nprint(find_Points(1,2,3,9))\nprint(find_Points(1,2,3,10))\nprint(find_Points(1,2,3,11))\nprint(find_Points(1,2,3,12))\nprint(find_Points(1,2,3,13))\nprint(find_Points(1,2,3,14))\nprint(find_Points(1,2,3,15))\nprint(find_Points(1,2,3,16))\nprint(find_Points(1,2,3,17))\nprint(find_Points(1,2,3,18))\nprint(find_Points(1,2,3,19))\nprint(find_Points(1,2,3,20))\nprint(find_Points(1,2,3,21))\nprint(find_Points(1,2,3,22))\nprint(find_Points(1,2,3,23))\nprint(find_Points(1,2,3,24))\nprint(find_Points(1,2,3,25))\nprint(find_Points(1,2,3,26))\nprint(find_Points(1,2,3,27))\nprint(find_Points(1,2,3,28))\nprint(find_Points(1,2,3,29))\nprint(find_Points(1,2,3,30))\nprint(find_Points(1,2,3,31))\nprint(find_Points(1,2,3,32))\nprint(find_Points(1,2,3,33))\nprint(find_"}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t\t# Write your code here\n\t\tmax_sum = 0\n\t\tfor i in range(n-2):\n\t\t\tfor j in range(i+1, n-1):\n\t\t\t\tfor k in range(j+1, n):\n\t\t\t\t\tif arr[i] + arr[j] + arr[k] == 0:\n\t\t\t\t\t\tmax_sum = max(max_sum, arr[i] + arr[j] + arr[k])\n\t\treturn max_sum\n\nprint(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\n<|endoftext|>"}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_2(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_3(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_4(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_5(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_6(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_7(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_8(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict_reverse_9(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list in a dictionary."}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t\t# Write your code here\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n % 2 == 0:\n\t\t\treturn find_max_val(n/2, x, y)\n\t\telse:\n\t\t\treturn find_max_val(n/2, x, y) % x\n\nprint(find_max_val(10, 10, 10))\nprint(find_max_val(10, 10, 11))\nprint(find_max_val(10, 10, 12))\nprint(find_max_val(10, 10, 13))\nprint(find_max_val(10, 10, 14))\nprint(find_max_val(10, 10, 15))\nprint(find_max_val(10, 10, 16))\nprint(find_max_val(10, 10, 17))\nprint(find_max_val(10, 10, 18))\nprint(find_max_val(10, 10, 19))\nprint(find_max_val(10, 10, 20))\nprint(find_max_val(10, 10, 21))\nprint(find_max_val(10, 10, 22))\nprint(find_max_val(10, 10, 23))\nprint(find_max_val(10, 10, 24))\nprint(find_max_val(10, 10, 25))\nprint(find_max_val(10, 10, 26))\nprint(find_max_val(10, 10, 27))\nprint(find_max_val(10, 10, 28))\nprint(find_max_val(10, 10, 29))\nprint(find_max_val(10, 10, 30))\nprint(find_max_val"}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tif i % 2 == 0 : \n\t\t\t\tsum = sum + i\n\t\treturn sum / 2\n\nprint(average_Even(10))\n<|endoftext|>"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t\tnum_list.append(num_list.pop(0))\n\t\treturn num_list\n\nprint(move_last([1,2,3,4,5]))\n<|endoftext|>"}
{"ID": 65, "source": "MBPP:666", "prompt": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t\tcount = 0\n\t\tfor i in range(len(string)):\n\t\t\tif string[i] == char:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_char(\"Hello World\", \"l\"))\nprint(count_char(\"Hello World\", \"o\"))\nprint(count_char(\"Hello World\", \"e\"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count_char(\"Hello World\", \" \"))\nprint(count"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t\tcount = 0\n\t\tfor i in string:\n\t\t\tif i in vowels:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\treturn string.replace(char, char * 2)\n\nprint(replace(\"Hello World\", \"o\"))\n<|endoftext|>"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t\tregex = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\t\tif re.match(regex,Ip):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP_v6(Ip): \n\t\tregex = r\"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}["}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t\tif len(nums) < 2:\n\t\t\treturn False\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i] < nums[i-1]:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(decreasing_trend([1, 2, 3, 4, 5]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9,"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\t# Your code here\n\t\t# n}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t\tif num1 > num2 and num1 > num3:\n\t\t\treturn num1\n\t\telif num2 > num1 and num2 > num3:\n\t\t\treturn num2\n\t\telse:\n\t\t\treturn num3\n\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,2,"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t\treturn sum(list)\n\nprint(convert([1,2,3,4,5]))\nprint(convert([1,2,3,4,5,6]))\nprint(convert([1,2,3,4,5,6,7]))\nprint(convert([1,2,3,4,5,6,7,8]))\nprint(convert([1,2,3,4,5,6,7,8,9]))\nprint(convert([1,2,3,4,5,6,7,8,9,10]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(convert([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(convert([1,2,3,4,5,"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t\tstring = string.split()\n\t\tstring = list(dict.fromkeys(string))\n\t\tstring =''.join(string)\n\t\treturn string\n\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is a test string\"))\nprint(remove_duplicate(\"This is"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t\tif x+y>m and x+y<n:\n\t\t\treturn 20\n\t\telse:\n\t\t\treturn x+y\n\nprint(sum_nums(1,2,3,4))\nprint(sum_nums(1,2,3,5))\nprint(sum_nums(1,2,3,6))\nprint(sum_nums(1,2,3,7))\nprint(sum_nums(1,2,3,8))\nprint(sum_nums(1,2,3,9))\nprint(sum_nums(1,2,3,10))\nprint(sum_nums(1,2,3,11))\nprint(sum_nums(1,2,3,12))\nprint(sum_nums(1,2,3,13))\nprint(sum_nums(1,2,3,14))\nprint(sum_nums(1,2,3,15))\nprint(sum_nums(1,2,3,16))\nprint(sum_nums(1,2,3,17))\nprint(sum_nums(1,2,3,18))\nprint(sum_nums(1,2,3,19))\nprint(sum_nums(1,2,3,20))\nprint(sum_nums(1,2,3,21))\nprint(sum_nums(1,2,3,22))\nprint(sum_nums(1,2,3,23))\nprint(sum_nums(1,2,3,24))\nprint(sum_nums(1,2,3,25))\nprint(sum_nums(1,2,3,26))\nprint(sum_nums(1,2,3,27))\nprint(sum_nums(1,2,3,28))\nprint(sum_nums(1,2,3,29))\nprint(sum_nums(1,2,3,30))\nprint(sum_nums(1,2,3,31))\nprint(sum_nums(1,2,3,32))\nprint(sum_nums(1,2,3,33))\nprint(sum_nums("}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t\treturn re.sub('[^a-zA-Z0-9]+', '', text1)\n\nprint(remove_extra_char(\"Hello World!\"))\nprint(remove_extra_char(\"Hello World!123\"))\nprint(remove_extra_char(\"Hello World!1234567890\"))\nprint(remove_extra_char(\"Hello World!123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t\tif a+b>c and a+c>b and b+c>a:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(validity_triangle(1,2,3))\nprint(validity_triangle(1,2,4))\nprint(validity_triangle(1,2,5))\nprint(validity_triangle(1,2,6))\nprint(validity_triangle(1,2,7))\nprint(validity_triangle(1,2,8))\nprint(validity_triangle(1,2,9))\nprint(validity_triangle(1,2,10))\nprint(validity_triangle(1,2,11))\nprint(validity_triangle(1,2,12))\nprint(validity_triangle(1,2,13))\nprint(validity_triangle(1,2,14))\nprint(validity_triangle(1,2,15))\nprint(validity_triangle(1,2,16))\nprint(validity_triangle(1,2,17))\nprint(validity_triangle(1,2,18))\nprint(validity_triangle(1,2,19))\nprint(validity_triangle(1,2,20))\nprint(validity_triangle(1,2,21))\nprint(validity_triangle(1,2,22))\nprint(validity_triangle(1,2,23))\nprint(validity_triangle(1,2,24))\nprint(validity_triangle(1,2,25))\nprint(validity_triangle(1,2,26))\nprint(validity_triangle(1,2,27))\nprint(validity_triangle(1,2,28))\nprint(validity_triangle(1,2,29))\nprint(validity_triangle(1,2,30))\nprint(validity_triangle(1,2,31))\nprint(validity_triangle(1,2,32))\nprint(validity_triangle(1,2,33))\nprint(validity_triangle(1,2,34))\nprint(validity_triangle(1,2,35))\nprint(validity_triangle(1,2,36))\nprint(validity_triangle(1,2"}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t\treturn str1.replace(\" \",\"\")\n\nprint(remove_spaces(\"  hello world  \"))\nprint(remove_spaces(\"hello world\"))\nprint(remove_spaces(\"hello world \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t\treturn ditionary[key]\n\n\"\"\"\nWrite a function to access dictionary key’s element by value.\n\"\"\"\ndef access_value(ditionary,value):\n\t\treturn ditionary[value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_2(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_3(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_4(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_5(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_6(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_7(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_8(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key and value.\n\"\"\"\ndef access_key_value_9(ditionary,key,value):\n\t\treturn ditionary[key][value]\n\n\"\"\"\nWrite a function to access dictionary key’s element by key"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t\tif len(nums) < 2:\n\t\t\treturn False\n\t\tfor i in range(1, len(nums)):\n\t\t\tif nums[i] > nums[i-1]:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(increasing_trend([1, 2, 3, 4, 5]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9,"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\telif n == 2: \n\t\t\treturn 2\n\t\telse: \n\t\t\tfor i in range(2, n): \n\t\t\t\tif n % i == 0: \n\t\t\t\t\treturn i\n\nprint(smallest_Divisor(100))\n<|endoftext|>"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using zip and lambda function.\n\"\"\"\ndef mul_list_zip(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,zip(nums1,nums2)))\n\nprint(mul_list_zip([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using zip_longest and lambda function.\n\"\"\"\ndef mul_list_zip_longest(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,zip_longest(nums1,nums2)))\n\nprint(mul_list_zip_longest([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using zip_longest_longest and lambda function.\n\"\"\"\ndef mul_list_zip_longest_longest(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,zip_longest_longest(nums1,nums2)))\n\nprint(mul_list_zip_longest_longest([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using zip_with_index and lambda function.\n\"\"\"\ndef mul_list_zip_with_index(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,zip_with_index(nums1,nums2)))\n\nprint(mul_list_zip_with_index([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using zip_longest_with_index and lambda function.\n\"\"\"\ndef mul_list_zip_longest_with_index(nums1,nums2):\n\t\treturn list(map(lambda x,y:x*y,zip_longest_with_index(nums1,nums2)))\n\nprint(mul_list_zip_longest_with_index([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_2(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_3(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_4(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_5(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_6(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_7(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_8(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_9(n) : \n\t\tif n == 0 : \n\t\t\treturn 0 \n\t\telif n == 1 : \n\t\t\treturn 1 \n\t\telse : \n\t\t\treturn n * (n + 1) / 2 \n\ndef sum_Square_10(n) : \n\t\tif n == 0 :"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t\tcount = 0\n\t\tfor i in range(len(str)):\n\t\t\tif str[i] == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\"Hello World\", \"l\"))\nprint(count_Char(\"Hello World\", \"o\"))\nprint(count_Char(\""}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t\tsum = 0\n\t\tfor i in range(2,n+1):\n\t\t\tif is_prime(i):\n\t\t\t\tsum += i\n\t\treturn sum\n\ndef is_prime(n):\n\tif n == 2:\n\t\treturn True\n\tif n == 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\tfor i in range(5,int(n**0.5)+1,6):\n\t\tif n % i == 0 or n % (i+2) == 0:\n\t\t\treturn False\n\treturn True\n\nprint(sum_Of_Primes(100))\n<|endoftext|>"}
{"ID": 85, "source": "MBPP:686", "prompt": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t\tfreq_dict = {}\n\t\tfor i in test_tup:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\nprint(freq_element((1,2,3,4,5,6,7,8,9,10)))\n<|endoftext|>"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t\tif b == 0:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn recur_gcd(b, a % b)\n\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)\n\ndef main():\n\tprint(recur_gcd(10, 20))\n\tprint(gcd(10, 20))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\treturn math.sqrt(a**2 + b**2)\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\t# write your code here\n\t\tif n == 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\tmin_jumps = 1000000000\n\t\t\tfor i in range(n-1):\n\t\t\t\tif arr[i] + arr[i+1] < min_jumps:\n\t\t\t\t\tmin_jumps = arr[i] + arr[i+1]\n\t\t\treturn min_jumps\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\t# write your code here\n\t\tif n == 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\tmin_jumps = 1000000000\n\t\t\tfor i in range(n-1):\n\t\t\t\tif arr[i] + arr[i+1] < min_jumps:\n\t\t\t\t\tmin_jumps = arr[i] + arr[i+1]\n\t\t\treturn min_jumps\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\t# write your code here\n\t\tif n == 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\tmin_jumps = 1000000000\n\t\t\tfor i in range(n-1):\n\t\t\t\tif arr[i] + arr[i+1] < min_jumps:\n\t\t\t\t\tmin_jumps = arr[i] + arr[i+1]\n\t\t\treturn min_jumps\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t\t# write your code here\n\t\tif n == 1:\n\t\t\treturn 0\n\t\telse:"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t\t# Write your code here\n\t\tif len(nums) == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn nums[0] * mul_consecutive_nums(nums[1:])\n\nprint(mul_consecutive_nums([1,2,3,4,5]))\nprint(mul_consecutive_nums([1,2,3,4,5,6]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(mul_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(mul_consecutive_nums([1,2,"}
{"ID": 90, "source": "MBPP:691", "prompt": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t", "predict": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t\t# Create a dictionary to store the group\n\t\tgroup = {}\n\t\t# Create a list to store the group elements\n\t\tgroup_elements = []\n\t\t# Iterate through the test list\n\t\tfor i in range(len(test_list)):\n\t\t\t# If the element is not in the dictionary, add it to the dictionary\n\t\t\tif test_list[i] not in group:\n\t\t\t\tgroup[test_list[i]] = 1\n\t\t\t# If the element is in the dictionary, add 1 to the value of the element\n\t\t\telse:\n\t\t\t\tgroup[test_list[i]] += 1\n\t\t# Iterate through the dictionary\n\t\tfor key, value in group.items():\n\t\t\t# If the value is 1, add the element to the list\n\t\t\tif value == 1:\n\t\t\t\tgroup_elements.append(key)\n\t\t# Return the list of group elements\n\t\treturn group_elements\n\n\"\"\"\nWrite a function to find the longest common prefix of two strings.\n\"\"\"\ndef longest_common_prefix(str1, str2):\n\t# Create a list to store the longest common prefix\n\tlongest_common_prefix = []\n\t# Iterate through the strings\n\tfor i in range(min(len(str1), len(str2))):\n\t\t# If the characters are not the same, break the loop\n\t\tif str1[i]!= str2[i]:\n\t\t\tbreak\n\t\t# If the characters are the same, add the character to the list\n\t\telse:\n\t\t\tlongest_common_prefix.append(str1[i])\n\t# Return the longest common prefix\n\treturn longest_common_prefix\n\n\"\"\"\nWrite a function to find the longest common suffix of two strings.\n\"\"\"\ndef longest_common_suffix(str1, str2):\n\t# Create a list to store the longest common suffix\n\tlongest_common_suffix = []\n\t# Iterate through the strings\n\tfor i in range(min(len(str1), len(str2))):\n\t\t# If the characters are not the same, break the loop\n\t\tif str1[i]!= str2[i]:\n\t\t\tbreak\n\t\t# If the characters are the same, add the character to the list\n\t\telse:\n\t\t\tlongest_common_suffix.append(str2[i])\n\t# Return"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t\treturn str(N)[-2:]\n\nprint(last_Two_Digits(123456789))\n<|endoftext|>"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t\treturn re.sub(r'\\s+','', text1)\n\nprint(remove_multiple_spaces(\"This is a test\"))\nprint(remove_multiple_spaces(\"This is a test \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint(remove_multiple_spaces(\"This is a test  \"))\nprint("}
{"ID": 93, "source": "MBPP:694", "prompt": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t\tunique_values = []\n\t\tfor key, value in test_dict.items():\n\t\t\tif value not in unique_values:\n\t\t\t\tunique_values.append(value)\n\t\treturn unique_values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values(test_dict):\n\t\tkeys = []\n\t\tvalues = []\n\t\tfor key, value in test_dict.items():\n\t\t\tkeys.append(key)\n\t\t\tvalues.append(value)\n\t\treturn keys, values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values_from_list(test_list):\n\t\tkeys = []\n\t\tvalues = []\n\t\tfor key, value in test_list.items():\n\t\t\tkeys.append(key)\n\t\t\tvalues.append(value)\n\t\treturn keys, values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values_from_dict(test_dict):\n\t\tkeys = []\n\t\tvalues = []\n\t\tfor key, value in test_dict.items():\n\t\t\tkeys.append(key)\n\t\t\tvalues.append(value)\n\t\treturn keys, values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values_from_list_of_dicts(test_list):\n\t\tkeys = []\n\t\tvalues = []\n\t\tfor key, value in test_list.items():\n\t\t\tkeys.append(key)\n\t\t\tvalues.append(value)\n\t\treturn keys, values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values_from_dict_of_dicts(test_dict):\n\t\tkeys = []\n\t\tvalues = []\n\t\tfor key, value in test_dict.items():\n\t\t\tkeys.append(key)\n\t\t\tvalues.append(value)\n\t\treturn keys, values\n\n\"\"\"\nWrite a function to extract the keys and values from a given dictionary.\n\"\"\"\ndef extract_keys_and_values_from_list_of_dicts_of_dicts(test_list):\n\t\t"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i] > test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is less than its corresponding index in the first tuple.\n\"\"\"\ndef check_less(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i] < test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is equal to its corresponding index in the first tuple.\n\"\"\"\ndef check_equal(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i]!= test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is not equal to its corresponding index in the first tuple.\n\"\"\"\ndef check_not_equal(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i] == test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is greater than or equal to its corresponding index in the first tuple.\n\"\"\"\ndef check_greater_equal(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i] >= test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is less than or equal to its corresponding index in the first tuple.\n\"\"\"\ndef check_less_equal(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup2[i] <= test_tup1[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of the second tuple is not greater than or equal to its corresponding index in the first tuple.\n\"\"\"\ndef"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\nprint(zip_list([1,2,3],[4,5,6]))\n<|endoftext|>"}
{"ID": 96, "source": "MBPP:697", "prompt": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t\treturn sum(1 for num in array_nums if num % 2 == 0)\n\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_2(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_3(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_4(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_5(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_6(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_7(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item_8(test_dict):\n\t\treturn sorted(test_dict.items(), key=lambda x: tuple(x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\t# Your code here\n\t\t#print(str1)\n\t\t#print(str2)\n\t\t#print(len(str1))\n\t\t#print(len(str2))\n\t\t#print(str1[0])\n\t\t#print(str2[0])\n\t\t#print(str1[1])\n\t\t#print(str2[1])\n\t\t#print(str1[2])\n\t\t#print(str2[2])\n\t\t#print(str1[3])\n\t\t#print(str2[3])\n\t\t#print(str1[4])\n\t\t#print(str2[4])\n\t\t#print(str1[5])\n\t\t#print(str2[5])\n\t\t#print(str1[6])\n\t\t#print(str2[6])\n\t\t#print(str1[7])\n\t\t#print(str2[7])\n\t\t#print(str1[8])\n\t\t#print(str2[8])\n\t\t#print(str1[9])\n\t\t#print(str2[9])\n\t\t#print(str1[10])\n\t\t#print(str2[10])\n\t\t#print(str1[11])\n\t\t#print(str2[11])\n\t\t#print(str1[12])\n\t\t#print(str2[12])\n\t\t#print(str1[13])\n\t\t#print(str2[13])\n\t\t#print(str1[14])\n\t\t#print(str2[14])\n\t\t#print(str1[15])\n\t\t#print(str2[15])\n\t\t#print(str1[16])\n\t\t#print(str2[16])\n\t\t#print(str1[17])\n\t\t#print(str2[17])\n\t\t#print(str1[18])\n\t\t#print(str2[18])\n\t\t#print(str1[19])\n\t\t#print(str2[19])\n\t\t#print(str1[20])\n\t\t#print(str2[20])\n\t\t#print(str1[21])\n\t\t#print(str2[21])\n\t\t#print(str1"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t\tcount = 0\n\t\tfor i in li:\n\t\t\tif i >= min and i <= max:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 10))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 11))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 12))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 13))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 14))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 15))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 16))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 17))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 18))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 1"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\t# Write your code here\n\t\tarr.sort()\n\t\tfor i in range(len(arr)-1):\n\t\t\tif arr[i+1] - arr[i] == 1:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the first missing positive integer in a given\narray. The array can contain duplicates and negative numbers as well.\n\"\"\"\ndef first_missing_positive(arr):\n\t\t# Write your code here\n\t\tarr.sort()\n\t\tfor i in range(len(arr)):\n\t\t\tif arr[i] > 0 and arr[i] <= len(arr) and arr[i]!= i:\n\t\t\t\treturn arr[i]\n\t\treturn len(arr) + 1\n\n\"\"\"\nWrite a function to find the largest prime factor of a given number.\n\"\"\"\ndef largest_prime_factor(num):\n\t\t# Write your code here\n\t\tfor i in range(2, int(num**0.5)+1):\n\t\t\tif num % i == 0:\n\t\t\t\treturn i\n\t\treturn num\n\n\"\"\"\nWrite a function to find the smallest prime factor of a given number.\n\"\"\"\ndef smallest_prime_factor(num):\n\t\t# Write your code here\n\t\tfor i in range(2, int(num**0.5)+1):\n\t\t\tif num % i == 0:\n\t\t\t\treturn i\n\t\treturn num\n\n\"\"\"\nWrite a function to find the largest palindrome made from the product of two \ngiven numbers.\n\"\"\"\ndef largest_palindrome(num1, num2):\n\t\t# Write your code here\n\t\tnum1 = str(num1)\n\t\tnum2 = str(num2)\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\twhile num1!= num2:\n\t\t\tnum1 = num1[:-1]\n\t\t\tnum2 = num2[:-1]\n\t\treturn num1\n\n\"\"\"\nWrite a function to find the smallest palindrome made from the product of two \ngiven numbers.\n\"\"\"\ndef smallest_palindrome(num1, num2):\n\t\t# Write your code here\n\t\tnum1 = str(num1)\n\t\tnum2 = str(num2)\n\t\tnum1 = num1[::-1]\n\t\tnum2"}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t\t# Write your code here\n\t\tif n==0:\n\t\t\treturn 0\n\t\tif k==0:\n\t\t\treturn n\n\t\tif k>arr[n-1]:\n\t\t\treturn removals(arr, n-1, k)\n\t\telse:\n\t\t\treturn removals(arr, n-1, k-arr[n-1])\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 10\nprint(removals(arr, n, k))\n<|endoftext|>"}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_2(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_3(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_4(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_5(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_6(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_7(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_8(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_9(d,x):\n\t\tif x in d:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present_10(d,x):\n\t\tif x in d:\n\t\t"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\treturn n*(n+1)/2\n\nprint(harmonic_sum(5))\n<|endoftext|>"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_2(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_3(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_4(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_5(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_6(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists_7(list1):\n\t\tlist1.sort(key=lambda x: len(x), reverse=True)\n\t\tlist1.sort(key=lambda x: x[1], reverse=True)\n\t\treturn list1\n\n\"\"\"\nWrite a"}
{"ID": 105, "source": "MBPP:706", "prompt": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t", "predict": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn True\n\t\tif m == 0:\n\t\t\treturn False\n\t\tif arr1[m-1] > arr2[n-1]:\n\t\t\treturn is_subset(arr1, m-1, arr2, n)\n\t\telse:\n\t\t\treturn is_subset(arr1, m, arr2, n-1)\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\nprint(is_subset(arr1, len(arr1), arr2, len(arr2)))\n<|endoftext|>"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t\tcount = 0\n\t\twhile n > 0 :\n\t\t\tcount += n & 1\n\t\t\tn = n >> 1\n\t\treturn count\n\nprint(count_Set_Bits(10))\n<|endoftext|>"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn string.split()\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\t\treturn \" \".join(list)\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t\tunique_list = []\n\t\tfor i in test_list:\n\t\t\tif i not in unique_list:\n\t\t\t\tunique_list.append(i)\n\t\treturn unique_list\n\nprint(get_unique((1,2,3,4,5,6,7,8,9,10)))\n<|endoftext|>"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_2(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_3(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_4(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_5(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_6(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_7(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_8(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_9(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_10(test_tup):\n\t\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function to access the first and last data of the given tuple record.\n\"\"\"\ndef front_and_rear_11(test_tup):\n\t"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telif n == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\treturn n * product_Equal(n-1)\n\nprint(product_Equal(10))\n<|endoftext|>"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t\t# Your code here\n\t\tlist1.sort()\n\t\tfor i in range(len(list1)-1):\n\t\t\tif list1[i] == list1[i+1]:\n\t\t\t\tlist1.pop(i)\n\t\treturn list1\n\nprint(remove_duplicate([[1,2,3],[1,2,3],[1,2,3]]))\n<|endoftext|>"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif test_tup[0] >= 0 and test_tup[0] <= 100 and test_tup[1] >= 0 and test_tup[1] <= 100 and test_tup[2] >= 0 and test_tup[2] <= 100:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid_2(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif test_tup[0] >= 0 and test_tup[0] <= 100 and test_tup[1] >= 0 and test_tup[1] <= 100 and test_tup[2] >= 0 and test_tup[2] <= 100:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid_3(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif test_tup[0] >= 0 and test_tup[0] <= 100 and test_tup[1] >= 0 and test_tup[1] <= 100 and test_tup[2] >= 0 and test_tup[2] <= 100:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid_4(test_tup):\n\t\tif len(test_tup) == 3:\n\t\t\tif test_tup[0] >= 0 and test_tup[0] <= 100 and test_tup[1] >= 0 and test_tup[1] <= 100 and test_tup[2] >= 0 and test_tup[2] <= 100:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\""}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t\tif n==1:\n\t\t\treturn 0\n\t\telif n==2:\n\t\t\treturn 1\n\t\telse:\n\t\t\tcount=0\n\t\t\tfor i in range(2,n):\n\t\t\t\tif n%i==0:\n\t\t\t\t\tcount+=1\n\t\t\treturn count\n\nprint(count_Fac(100))\n<|endoftext|>"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t\treturn tuple(map(int, test_str.split()))\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\t\treturn list(map(int, test_str.split()))\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\t\treturn dict(map(lambda x: x.split(':'), test_str.split()))\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\t\treturn set(map(int, test_str.split()))\n\n\"\"\"\nWrite a function to convert the given string of integers into a frozenset.\n\"\"\"\ndef str_to_frozenset(test_str):\n\t\treturn frozenset(map(int, test_str.split()))\n\n\"\"\"\nWrite a function to convert the given string of integers into a range.\n\"\"\"\ndef str_to_range(test_str):\n\t\treturn range(int(test_str.split('-')[0]), int(test_str.split('-')[1])+1)\n\n\"\"\"\nWrite a function to convert the given string of integers into a range.\n\"\"\"\ndef str_to_range_2(test_str):\n\t\treturn range(int(test_str.split('-')[0]), int(test_str.split('-')[1])+1)\n\n\"\"\"\nWrite a function to convert the given string of integers into a range.\n\"\"\"\ndef str_to_range_3(test_str):\n\t\treturn range(int(test_str.split('-')[0]), int(test_str.split('-')[1])+1)\n\n\"\"\"\nWrite a function to convert the given string of integers into a range.\n\"\"\"\ndef str_to_range_4(test_str):\n\t\treturn range(int(test_str.split('-')[0]), int(test_str.split('-')[1])+1)\n\n\"\"\"\nWrite a function to convert the given string of integers into a range.\n\"\"\"\ndef str_to_range_5(test_str):\n\t\treturn range(int(test_str.split('-')[0]), int(test_str.split('-')[1])+1)\n"}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t\t\"\"\"\n\t\ta: a list of integers\n\t\treturn: the perimeter of the rombus\n\t\t\"\"\"\n\t\tif len(a) == 1:\n\t\t\treturn a[0]\n\t\telse:\n\t\t\treturn a[0] + rombus_perimeter(a[1:])\n\nprint(rombus_perimeter([1, 2, 3, 4, 5]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(rombus_perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(rombus_perimeter"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: standard deviation\n\t\t\"\"\"\n\t\treturn math.sqrt(sum([(x - mean(data)) ** 2 for x in data]) / len(data))\n\n\"\"\"\nWrite a function to calculate the mean.\n\"\"\"\ndef mean(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: mean\n\t\t\"\"\"\n\t\treturn sum(data) / len(data)\n\n\"\"\"\nWrite a function to calculate the median.\n\"\"\"\ndef median(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: median\n\t\t\"\"\"\n\t\tdata.sort()\n\t\tif len(data) % 2 == 0:\n\t\t\t\treturn (data[len(data) // 2 - 1] + data[len(data) // 2]) / 2\n\t\telse:\n\t\t\t\treturn data[len(data) // 2]\n\n\"\"\"\nWrite a function to calculate the mode.\n\"\"\"\ndef mode(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: mode\n\t\t\"\"\"\n\t\tcounts = {}\n\t\tfor x in data:\n\t\t\t\tcounts[x] = counts.get(x, 0) + 1\n\t\treturn max(counts, key=counts.get)\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef variance(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: variance\n\t\t\"\"\"\n\t\tmean_x = mean(data)\n\t\treturn sum([(x - mean_x) ** 2 for x in data]) / len(data)\n\n\"\"\"\nWrite a function to calculate the standard error of the mean.\n\"\"\"\ndef se_mean(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: standard error of the mean\n\t\t\"\"\"\n\t\treturn sd_calc(data) / math.sqrt(len(data))\n\n\"\"\"\nWrite a function to calculate the standard error of the variance.\n\"\"\"\ndef se_variance(data):\n\t\t\"\"\"\n\t\t:param data: list of numbers\n\t\t:return: standard error of the variance\n\t\t\"\"\"\n\t\treturn sd_calc(data) / math.sqrt(len(data))\n\n\"\"\""}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1[i])\n\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1[i])\n\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1[i])\n\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1[i])\n\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1[i])\n\t\t\tlist2.append(list1[i+1])\n\t\treturn list2\n\nprint(alternate_elements([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tlist2.append(list1["}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b\\b\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\n"}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t\ttest_tup = test_tup + (test_dict,)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_2(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_3(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_4(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_5(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_6(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_7(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index(test_dict)]\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove a dictionary from the tuple.\n\"\"\"\ndef remove_dict_from_tuple_8(test_tup, test_dict):\n\t\ttest_tup = test_tup[:test_tup.index("}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t\t# Write your code here\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 3\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 4\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 5\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 6\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 7\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 8\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 9\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 10\n\t\t# print(maxAverageOfPath(cost, N))\n\t\t# return\n\t\t# cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\t\t# N = 11\n\t\t# print(maxAverageOfPath"}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t\tfiltered_students = {}\n\t\tfor key,value in students.items():\n\t\t\tif value[0] >= h and value[1] >= w:\n\t\t\t\tfiltered_students[key] = value\n\t\treturn filtered_students\n\nstudents = {\n\t'A': [1, 1],\n\t'B': [1, 2],\n\t'C': [2, 2],\n\t'D': [3, 3],\n\t'E': [4, 4],\n\t'F': [5, 5],\n\t'G': [6, 6],\n\t'H': [7, 7],\n\t'I': [8, 8],\n\t'J': [9, 9],\n\t'K': [10, 10],\n\t'L': [11, 11],\n\t'M': [12, 12],\n\t'N': [13, 13],\n\t'O': [14, 14],\n\t'P': [15, 15],\n\t'Q': [16, 16],\n\t'R': [17, 17],\n\t'S': [18, 18],\n\t'T': [19, 19],\n\t'U': [20, 20],\n\t'V': [21, 21],\n\t'W': [22, 22],\n\t'X': [23, 23],\n\t'Y': [24, 24],\n\t'Z': [25, 25],\n}\n\nprint(filter_data(students, 1, 1))\nprint(filter_data(students, 2, 2))\nprint(filter_data(students, 3, 3))\nprint(filter_data(students, 4, 4))\nprint(filter_data(students, 5, 5))\nprint(filter_data(students, 6, 6))\nprint(filter_data(students, 7, 7))\nprint(filter_data(students, 8, 8))\nprint(filter_data(students, 9, 9))\n"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t\treturn len(list(filter(lambda x: x[0] == x[1], zip(nums1, nums2))))\n\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 10]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9,"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\tsum = 0\n\t\twhile power > 0:\n\t\t\tif power % 2 == 1:\n\t\t\t\tsum += base\n\t\t\tbase *= base\n\t\t\tpower //= 2\n\t\treturn sum\n\nprint(power_base_sum(2, 10))\n<|endoftext|>"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_2(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_3(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_4(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_5(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_6(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_7(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_8(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_9(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_10(text1):\n\t\treturn re.findall(r'\"(.*?)\"', text1)\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation_11(text1):\n\t"}
{"ID": 125, "source": "MBPP:726", "prompt": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t\treturn tuple(map(lambda x: x*2, test_tup))\n\nprint(multiply_elements((1,2,3)))\n\n\"\"\"\nWrite a function to find the largest element in a tuple.\n\"\"\"\ndef find_largest_element(test_tup):\n\t\treturn max(test_tup)\n\nprint(find_largest_element((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the smallest element in a tuple.\n\"\"\"\ndef find_smallest_element(test_tup):\n\t\treturn min(test_tup)\n\nprint(find_smallest_element((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the sum of the elements in a tuple.\n\"\"\"\ndef find_sum(test_tup):\n\t\treturn sum(test_tup)\n\nprint(find_sum((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the product of the elements in a tuple.\n\"\"\"\ndef find_product(test_tup):\n\t\treturn reduce(lambda x,y: x*y, test_tup)\n\nprint(find_product((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the average of the elements in a tuple.\n\"\"\"\ndef find_average(test_tup):\n\t\treturn find_sum(test_tup)/len(test_tup)\n\nprint(find_average((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the sum of the squares of the elements in a tuple.\n\"\"\"\ndef find_sum_of_squares(test_tup):\n\t\treturn reduce(lambda x,y: x+y, map(lambda x: x**2, test_tup))\n\nprint(find_sum_of_squares((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the square root of a number.\n\"\"\"\ndef find_square_root(test_num):\n\t\treturn math.sqrt(test_num)\n\nprint(find_square_root(16))\n\n\"\"\"\nWrite a function to find the cube root of a number.\n\"\"\"\ndef find_cube_root(test_num):\n\t\treturn math."}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\nprint(remove_char(\"Hello World!\"))\nprint(remove_char(\"Hello World!123\"))\nprint(remove_char(\"Hello World!1234567890\"))\nprint(remove_char(\"Hello World!1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t\treturn [x+y for x,y in zip(lst1,lst2)]\n\nprint(sum_list([1,2,3], [4,5,6]))\n<|endoftext|>"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,zip(nums1,nums2)))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip_longest and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,zip_longest(nums1,nums2)))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip_longest and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,zip_longest(nums1,nums2,fillvalue=0)))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip_longest and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,zip_longest(nums1,nums2,fillvalue=0,fillvalue=0)))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip_longest and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x+y,zip_longest(nums1,nums2,fillvalue=0,fillvalue=0,fillvalue=0)))\n\nprint(add_list([1,2,3], [4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using zip_longest and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t\treturn list(map(lambda x,y"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t\t# Write your code here\n\t\tif len(nums) < 2:\n\t\t\treturn nums\n\t\telse:\n\t\t\tnums.sort()\n\t\t\ti = 0\n\t\t\twhile i < len(nums) - 1:\n\t\t\t\tif nums[i] == nums[i+1]:\n\t\t\t\t\tnums.pop(i)\n\t\t\t\telse:\n\t\t\t\t\ti += 1\n\t\t\treturn nums\n\nprint(consecutive_duplicates([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 10"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t\treturn 2*r*h\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(w,h):\n\t\treturn 2*(w+h)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(w,h):\n\t\treturn w*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef perimeter_parallelogram(w,h):\n\t\treturn 2*(w+h)\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(w,h):\n\t\treturn (w*h)/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef perimeter_trapezoid(w,h):\n\t\treturn 2*(w+h)\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(w,h):\n\t\treturn (w*h)/2\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\t\treturn 2*r*pi\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(l):\n\t\treturn l*4\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(l):\n\t\treturn l*l\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn 0.5*a*b\n\n\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a,b,c,d,e):\n\t\treturn a+b+c+d+e"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_2(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_3(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_4(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_5(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_6(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_7(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_8(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_9(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar_10(text):\n\t\treturn text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\t# write your code here\n\t\tif len(A) == 0:\n\t\t\treturn -1\n\t\tif len(A) == 1:\n\t\t\tif A[0] == x:\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] > x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] < x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] > x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] < x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] < x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[len(A)-1] == x:\n\t\t\treturn len(A)-1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[len(A)-1] > x:\n\t\t\treturn len(A)-1\n\t\tif A[0] == x:\n\t\t"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t\t# Your code here\n\t\tsum=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tsum+=arr[i]*arr[j]\n\t\treturn sum\n\narr=[1,2,3,4,5]\nn=len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))\n<|endoftext|>"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_2(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_3(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_4(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_5(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_6(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_7(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_numbers_8(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i] < x:\n\t\t\ti += 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\ti = len(a) - 1\n\t\twhile i >= 0 and a[i] > x:\n\t\t\ti -= 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the index of the first occurrence of a specified value in a sorted array.\n\"\"\"\ndef first_index(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i]!= x:\n\t\t\ti += 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the index of the last occurrence of a specified value in a sorted array.\n\"\"\"\ndef last_index(a, x):\n\t\ti = len(a) - 1\n\t\twhile i >= 0 and a[i]!= x:\n\t\t\ti -= 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the index of the first occurrence of a specified value in a sorted array.\n\"\"\"\ndef first_index_recursive(a, x):\n\t\tif a[0] == x:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn 1 + first_index_recursive(a[1:], x)\n\n\"\"\"\nWrite a function to locate the index of the last occurrence of a specified value in a sorted array.\n\"\"\"\ndef last_index_recursive(a, x):\n\t\tif a[-1] == x:\n\t\t\treturn len(a) - 1\n\t\telse:\n\t\t\treturn last_index_recursive(a[:-1], x) + 1\n\n\"\"\"\nWrite a function to locate the index of the first occurrence of a specified value in a sorted array.\n\"\"\"\ndef first_index_iterative(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i]!= x:\n\t\t\ti += 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the index of the last occurrence of a specified value in a sorted array.\n\"\"\"\ndef last_index_iterative(a, x):\n\t\ti ="}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t\tif re.search(r'[aeiouAEIOU]', string):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_str('hello'))\nprint(check_str('Hello'))\nprint(check_str('Hello world'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check_str('Hello world!'))\nprint(check"}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t\treturn n*(n-1)\n\nprint(geometric_sum(5))\n<|endoftext|>"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t\t# Your code here\n\t\t# n = 10\n\t\t# n = 100\n\t\t# n = 1000\n\t\t# n = 10000\n\t\t# n = 100000\n\t\t# n = 1000000\n\t\t# n = 10000000\n\t\t# n = 100000000\n\t\t# n = 1000000000\n\t\t# n = 10000000000\n\t\t# n = 100000000000\n\t\t# n = 1000000000000\n\t\t# n = 10000000000000\n\t\t# n = 100000000000000\n\t\t# n = 1000000000000000\n\t\t# n = 10000000000000000\n\t\t# n = 100000000000000000\n\t\t# n = 1000000000000000000\n\t\t# n = 10000000000000000000\n\t\t# n = 100000000000000000000\n\t\t# n = 1000000000000000000000\n\t\t# n = 10000000000000000000000\n\t\t# n = 100000000000000000000000\n\t\t# n = 1000000000000000000000000\n\t\t# n = 10000000000000000000000000\n\t\t# n = 1"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t\treturn dict(zip(test_tup[::2], test_tup[1::2]))\n\n\"\"\"\nWrite a function to convert a dictionary to a tuple using adjacent elements.\n\"\"\"\ndef dict_to_tuple(test_dict):\n\t\treturn tuple(test_dict.values())\n\n\"\"\"\nWrite a function to convert a list to a tuple using adjacent elements.\n\"\"\"\ndef list_to_tuple(test_list):\n\t\treturn tuple(test_list)\n\n\"\"\"\nWrite a function to convert a tuple to a list using adjacent elements.\n\"\"\"\ndef tuple_to_list(test_tup):\n\t\treturn list(test_tup)\n\n\"\"\"\nWrite a function to convert a string to a list using adjacent elements.\n\"\"\"\ndef string_to_list(test_str):\n\t\treturn list(test_str)\n\n\"\"\"\nWrite a function to convert a list to a string using adjacent elements.\n\"\"\"\ndef list_to_string(test_list):\n\t\treturn ''.join(test_list)\n\n\"\"\"\nWrite a function to convert a string to a tuple using adjacent elements.\n\"\"\"\ndef string_to_tuple(test_str):\n\t\treturn tuple(test_str)\n\n\"\"\"\nWrite a function to convert a tuple to a string using adjacent elements.\n\"\"\"\ndef tuple_to_string(test_tup):\n\t\treturn ''.join(test_tup)\n\n\"\"\"\nWrite a function to convert a string to a list using adjacent elements.\n\"\"\"\ndef string_to_list_of_lists(test_str):\n\t\treturn list(list(test_str))\n\n\"\"\"\nWrite a function to convert a list to a string using adjacent elements.\n\"\"\"\ndef list_to_string_of_lists(test_list):\n\t\treturn ''.join(list(test_list))\n\n\"\"\"\nWrite a function to convert a string to a tuple using adjacent elements.\n\"\"\"\ndef string_to_tuple_of_lists(test_str):\n\t\treturn tuple(list(test_str))\n\n\"\"\"\nWrite a function to convert a tuple to a string using adjacent elements.\n\"\"\"\ndef tuple_to_string_of_lists(test_tup):\n\t\treturn ''.join(list(test_tup))\n\n\"\"\"\nWrite a function to convert a string"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t\tif len(s) == 0 :\n\t\t\treturn True\n\t\telse :\n\t\t\tfor i in range(len(s)) :\n\t\t\t\tif s[i]!= s[0] :\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(all_Characters_Same(\"abc\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_Characters_Same(\"abcde\"))\nprint(all_"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t\treturn (side * (side * side)) / 6\n\n\"\"\"\nWrite a function to caluclate the volume of a cube.\n\"\"\"\ndef volume_cube(side):\n\t\treturn side * side * side\n\n\"\"\"\nWrite a function to caluclate the surface area of a cube.\n\"\"\"\ndef surface_area_cube(side):\n\t\treturn (side * side) * side\n\n\"\"\"\nWrite a function to caluclate the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(radius):\n\t\treturn 4 * math.pi * radius * radius\n\n\"\"\"\nWrite a function to caluclate the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(radius, height):\n\t\treturn (radius * radius) * height\n\n\"\"\"\nWrite a function to caluclate the surface area of a cone.\n\"\"\"\ndef surface_area_cone(radius, height):\n\t\treturn (radius * radius) * height\n\n\"\"\"\nWrite a function to caluclate the surface area of a torus.\n\"\"\"\ndef surface_area_torus(radius, height):\n\t\treturn (radius * radius) * (height / 2)\n\n\"\"\"\nWrite a function to caluclate the surface area of a paraboloid.\n\"\"\"\ndef surface_area_paraboloid(radius):\n\t\treturn (radius * radius) * (radius / 2)\n\n\"\"\"\nWrite a function to caluclate the surface area of a hyperboloid.\n\"\"\"\ndef surface_area_hyperboloid(radius):\n\t\treturn (radius * radius) * (radius / 2)\n\n\"\"\"\nWrite a function to caluclate the surface area of a hyperboloid.\n\"\"\"\ndef surface_area_hyperboloid(radius):\n\t\treturn (radius * radius) * (radius / 2)\n\n\"\"\"\nWrite a function to caluclate the surface area of a hyperboloid.\n\"\"\"\ndef surface_area_hyperboloid(radius):\n\t\treturn (radius * radius) * (radius / 2)\n\n\"\"\"\nWrite a function to caluclate the surface area of a hyperboloid.\n\"\"\"\ndef surface_area_hyperboloid(radius):\n\t\treturn (radius"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_right(list1[m:],n,m-1) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_left(list1[m:],m-1,n) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right_2(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_right_2(list1[m:],n,m-1) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_2(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_left_2(list1[m:],m-1,n) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right_3(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_right_3(list1[m:],n,m-1) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_3(list1,m,n):\n\t\t# Your code here\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_left_3(list1[m:],m-1,n) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right_"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t\tif test_tup[0] is None or test_tup[1] is None:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty(test_tup):\n\t\tif test_tup[0] == \"\" or test_tup[1] == \"\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_list(test_tup):\n\t\tif test_tup[0] == [] or test_tup[1] == []:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_dict(test_tup):\n\t\tif test_tup[0] == {} or test_tup[1] == {}:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_set(test_tup):\n\t\tif test_tup[0] == set() or test_tup[1] == set():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_tuple(test_tup):\n\t\tif test_tup[0] == () or test_tup[1] == ():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_list_of_lists(test_tup):\n\t\tif test_tup[0] == [] or test_tup[1] == []:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple has any empty value or not.\n\"\"\"\ndef check_empty_list_of_dicts(test_tup):\n\t\tif test_tup[0] == [] or test_tup[1] == []:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t\tfor i in range(startnum, endnum+1):\n\t\t\tif i % 10 == 0:\n\t\t\t\tprint(i)\n\ndivisible_by_digits(1, 100)\n<|endoftext|>"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t\treturn (r*a)/2\n\nprint(sector_area(10,10))\n<|endoftext|>"}
{"ID": 146, "source": "MBPP:747", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t\t# Write your code here.\n\t\t# X, Y, Z are strings of length m and n\n\t\t# m, n, o are integers\n\t\t# return the length of the longest common subsequence\n\t\t# of X, Y, Z\n\t\t# if there is no common subsequence, return 0\n\t\t# if there is only one common subsequence, return 1\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence, return the length of the longest common subsequence\n\t\t# if there are more than one common subsequence"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace(\" \", \"\")\n\t\tstr1 = str1.replace"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t\tnums_str.sort()\n\t\treturn nums_str\n\ndef main():\n\tnums_str = [\"123\", \"1234\", \"12345\", \"123456\", \"1234567\", \"12345678\", \"123456789\", \"1234567890\"]\n\tprint(sort_numeric_strings(nums_str))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 149, "source": "MBPP:750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t\ttest_list.append(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the given tuple from the given list.\n\"\"\"\ndef remove_tuple(test_list, test_tup):\n\t\ttest_list.remove(test_tup)\n\t\treturn test_list\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_2(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_3(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_4(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_5(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_6(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_7(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_8(test_list, test_tup):\n\t\treturn test_list.index(test_tup)\n\n\"\"\"\nWrite a function to find the index of the given tuple in the given list.\n\"\"\"\ndef find_index_9(test_list, test_tup):"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t\tif i*2+1 < len(arr) and arr[i*2+1] < arr[i]:\n\t\t\treturn False\n\t\tif i*2+2 < len(arr) and arr[i*2+2] < arr[i]:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given array represents max heap or not.\n\"\"\"\ndef check_max_heap(arr, i):\n\t\tif i*2+1 < len(arr) and arr[i*2+1] > arr[i]:\n\t\t\treturn False\n\t\tif i*2+2 < len(arr) and arr[i*2+2] > arr[i]:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given array represents a min heap or not.\n\"\"\"\ndef check_min_heap_2(arr, i):\n\t\tif i*2+1 < len(arr) and arr[i*2+1] < arr[i]:\n\t\t\treturn False\n\t\tif i*2+2 < len(arr) and arr[i*2+2] < arr[i]:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given array represents a max heap or not.\n\"\"\"\ndef check_max_heap_2(arr, i):\n\t\tif i*2+1 < len(arr) and arr[i*2+1] > arr[i]:\n\t\t\treturn False\n\t\tif i*2+2 < len(arr) and arr[i*2+2] > arr[i]:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given array represents a min heap or not.\n\"\"\"\ndef check_min_heap_3(arr, i):\n\t\tif i*2+1 < len(arr) and arr[i*2+1] < arr[i]:\n\t\t\treturn False\n\t\tif i*2+2 < len(arr) and arr[i*2+2] < arr[i]:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given array represents a max heap or not.\n\"\"\"\ndef check_max_heap_3(arr, i):\n\t\tif i*2"}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\t\"\"\"\n\t\t:param n: the number of the jacobsthal number\n\t\t:return: the nth jacobsthal number\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * jacobsthal_num(n-1)\n\nprint(jacobsthal_num(10))\n<|endoftext|>"}
{"ID": 152, "source": "MBPP:753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:param K: number of records to return\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\treturn sorted(test_list, key=lambda x: x[1])[0:K]\n\n\"\"\"\nWrite a function to find the maximum value in a list.\n\"\"\"\ndef max_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: maximum value in list\n\t\t\"\"\"\n\t\treturn max(test_list)\n\n\"\"\"\nWrite a function to find the minimum value in a list.\n\"\"\"\ndef min_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: minimum value in list\n\t\t\"\"\"\n\t\treturn min(test_list)\n\n\"\"\"\nWrite a function to find the average value in a list.\n\"\"\"\ndef average_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: average value in list\n\t\t\"\"\"\n\t\treturn sum(test_list)/len(test_list)\n\n\"\"\"\nWrite a function to find the median value in a list.\n\"\"\"\ndef median_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: median value in list\n\t\t\"\"\"\n\t\ttest_list.sort()\n\t\tif len(test_list)%2 == 0:\n\t\t\t\treturn (test_list[len(test_list)//2-1] + test_list[len(test_list)//2])/2\n\t\telse:\n\t\t\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to find the mode value in a list.\n\"\"\"\ndef mode_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: mode value in list\n\t\t\"\"\"\n\t\ttest_list.sort()\n\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_value(test_list):\n\t\t\"\"\"\n\t\t:param test_list: list of numbers\n\t\t:return: sum of all the numbers in"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t\tl1_index = [i for i, x in enumerate(l1) if x in l2]\n\t\tl2_index = [i for i, x in enumerate(l2) if x in l3]\n\t\tl3_index = [i for i, x in enumerate(l3) if x in l1]\n\t\treturn l1_index, l2_index, l3_index\n\ndef find_common_index(l1, l2, l3):\n\t\tl1_index, l2_index, l3_index = extract_index_list(l1, l2, l3)\n\t\tcommon_index = [i for i in l1_index if i in l2_index and i in l3_index]\n\t\treturn common_index\n\ndef main():\n\t\tl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t\tl2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t\tl3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t\tprint(find_common_index(l1, l2, l3))\n\nif __name__ == '__main__':\n\t\tmain()\n<|endoftext|>"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t\tif len(numbers) == 0:\n\t\t\treturn None\n\t\telse:\n\t\t\treturn min(numbers)\n\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 6]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(second_smallest([1"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b'.\n\"\"\"\ndef text_match_zero_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_2(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_3(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_4(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_5(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_6(text):\n\t\treturn re.search(r'a\\bb\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero or more 'b'.\n\"\"\"\ndef text_match_one_zero_more_7(text):\n\t\treturn re.search(r'a\\bb\\b', text)"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_reverse_pairs([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\n<|endoftext|>"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\t# Your code here\n\t\tunique_sublists = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1,len(list1)):\n\t\t\t\tif list1[i] == list1[j]:\n\t\t\t\t\tunique_sublists.append(list1[i:j+1])\n\t\treturn len(unique_sublists)\n\nprint(unique_sublists([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t\tif num == 0:\n\t\t\treturn True\n\t\tif num < 0:\n\t\t\treturn False\n\t\tif num % 10 == 0:\n\t\t\treturn True\n\t\tif num % 10 == 1:\n\t\t\treturn False\n\t\tif num % 10 == 2:\n\t\t\treturn True\n\t\tif num % 10 == 3:\n\t\t\treturn False\n\t\tif num % 10 == 4:\n\t\t\treturn True\n\t\tif num % 10 == 5:\n\t\t\treturn False\n\t\tif num % 10 == 6:\n\t\t\treturn True\n\t\tif num % 10 == 7:\n\t\t\treturn False\n\t\tif num % 10 == 8:\n\t\t\treturn True\n\t\tif num % 10 == 9:\n\t\t\treturn False\n\t\treturn False\n\nprint(is_decimal(1234567890))\nprint(is_decimal(1234567890.1234567890))\nprint(is_decimal(1234567890.12345678901234567890))\nprint(is_decimal(1234567890.123456789012345678901234567890))\nprint(is_decimal(1234567890.1234567890123456789012345678901234567890))\nprint(is_decimal(1234567890.12345678901234567890123456789012345678901234567890))\nprint(is_decimal(1234567890.1234567890123456789012345678901234567890123"}
{"ID": 159, "source": "MBPP:760", "prompt": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t\t# code here\n\t\tif len(arr) == n:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(n):\n\t\t\t\tfor j in range(i+1,n):\n\t\t\t\t\tif arr[i] == arr[j]:\n\t\t\t\t\t\treturn False\n\t\t\treturn True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(unique_Element(arr,n))\n<|endoftext|>"}
{"ID": 160, "source": "MBPP:761", "prompt": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t", "predict": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t\treturn 2*d*a\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\t\treturn l*b\n\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,b):\n\t\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to calculate the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\t\treturn 2*pi*r\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn (a+b+c)/2\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(l):\n\t\treturn l*l\n\n\"\"\"\nWrite a function to calculate the perimeter of a square.\n\"\"\"\ndef perimeter_square(l):\n\t\treturn 4*l\n\n\"\"\"\nWrite a function to calculate the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn 3*(a+b+c)\n\n\"\"\"\nWrite a function to calculate the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a,b,c,d,e):\n\t\treturn 5*(a+b+c+d+e)\n\n\"\"\"\nWrite a function to calculate the perimeter of a hexagon.\n\"\"\"\ndef perimeter_hexagon(a,b,c,d,e,f):\n\t\treturn 6*(a+b+c+d+e+f)\n\n\"\"\"\nWrite a function to calculate the perimeter of a heptagon.\n\"\"\"\ndef perimeter_heptagon(a,b,c,d,e,f,g):\n\t\treturn 7*(a+b+c+d+e+f+g)\n\n\"\"\"\nWrite a function to calculate the perimeter of a octagon.\n\"\"\"\ndef perimeter_octagon(a,b,c,d,e,f,g,"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 % 30 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number2(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number3(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number4(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number5(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number6(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number7(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number8(monthnum3):\n\t\tif monthnum3 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number9(monthnum3):\n\t"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t\t# Your code here\n\t\tmin_diff = float('inf')\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i] - arr[j] < min_diff:\n\t\t\t\t\tmin_diff = arr[i] - arr[j]\n\t\treturn min_diff\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(find_Min_Diff(arr,n))\n<|endoftext|>"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t\treturn len(str.split())\n\nprint(number_ctr(\"1234567890\"))\nprint(number_ctr(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t\tif n % 2 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef nth_polite(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 2\n\telif n == 3:\n\t\treturn 3\n\telif n == 4:\n\t\treturn 4\n\telif n == 5:\n\t\treturn 5\n\telif n == 6:\n\t\treturn 6\n\telif n == 7:\n\t\treturn 7\n\telif n == 8:\n\t\treturn 8\n\telif n == 9:\n\t\treturn 9\n\telif n == 10:\n\t\treturn 10\n\telif n == 11:\n\t\treturn 11\n\telif n == 12:\n\t\treturn 12\n\telif n == 13:\n\t\treturn 13\n\telif n == 14:\n\t\treturn 14\n\telif n == 15:\n\t\treturn 15\n\telif n == 16:\n\t\treturn 16\n\telif n == 17:\n\t\treturn 17\n\telif n == 18:\n\t\treturn 18\n\telif n == 19:\n\t\treturn 19\n\telif n == 20:\n\t\treturn 20\n\telif n == 21:\n\t\treturn 21\n\telif n == 22:\n\t\treturn 22\n\telif n == 23:\n\t\treturn 23\n\telif n == 24:\n\t\treturn 24\n\telif n == 25:\n\t\treturn 25\n\telif n == 26:\n\t\treturn 26\n\telif n == 27:\n\t\treturn 27\n\telif n == 28:\n\t\treturn 28\n\telif n == 29:\n\t\treturn 29\n\telif n == 30:\n\t\treturn 30\n\telif n == 31:\n\t\treturn 31\n\telif n == 32:\n\t\treturn 32\n\telif n == 33:\n\t\treturn 33\n\telif"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t\tfor i in range(len(l1)-1):\n\t\t\tyield l1[i], l1[i+1]\n\nprint(list(pair_wise([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\tif len(strs) == 1:\n\t\treturn strs[0]\n\tif len(strs) == 2:\n\t\treturn strs[0] if strs[0] == strs[1] else \"\"\n\tif len(strs) == 3:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] else \"\"\n\tif len(strs) == 4:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] else \"\"\n\tif len(strs) == 5:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] else \"\"\n\tif len(strs) == 6:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] else \"\"\n\tif len(strs) == 7:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] and strs[5] == strs[6] else \"\"\n\tif len(strs) == 8:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5]"}
{"ID": 166, "source": "MBPP:767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t\tcount=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif(arr[i]+arr[j]==sum):\n\t\t\t\t\tcount+=1\n\t\treturn count\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nsum=10\nprint(get_Pairs_Count(arr,n,sum))\n<|endoftext|>"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\tif x % 2 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Odd_Parity(123))\nprint(check_Odd_Parity(12))\nprint(check_Odd_Parity(1))\nprint(check_Odd_Parity(0))\nprint(check_Odd_Parity(-1))\nprint(check_Odd_Parity(-12))\nprint(check_Odd_Parity(-123))\nprint(check_Odd_Parity(-1234))\nprint(check_Odd_Parity(-12345))\nprint(check_Odd_Parity(-123456))\nprint(check_Odd_Parity(-1234567))\nprint(check_Odd_Parity(-12345678))\nprint(check_Odd_Parity(-123456789))\nprint(check_Odd_Parity(-1234567890))\nprint(check_Odd_Parity(-12345678901))\nprint(check_Odd_Parity(-123456789012))\nprint(check_Odd_Parity(-1234567890123))\nprint(check_Odd_Parity(-12345678901234))\nprint(check_Odd_Parity(-123456789012345))\nprint(check_Odd_Parity(-1234567890123456))\nprint(check_Odd_Parity(-12345678901234567))\nprint(check_Odd_Parity(-123456789012345678))\nprint(check_Odd_Parity(-1234567890123456789))\nprint(check_Odd_Parity(-12345678901234567890))\nprint(check_Odd_Par"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t\treturn list(set(li1)-set(li2))\n\nprint(Diff([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11]))\n<|endoftext|>"}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tif i%2!= 0 : \n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(odd_Num_Sum(10))\n<|endoftext|>"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t\tstack = []\n\t\tfor i in exp:\n\t\t\tif i == '(':\n\t\t\t\tstack.append(i)\n\t\t\telif i == ')':\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\treturn False\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\tstack.append(i)\n\t\t\t\telse:\n\t\t\t\t\tif i == ')':\n\t\t\t\t\t\treturn False\n\t\t\t\t\telif i == '(':\n\t\t\t\t\t\tstack.append(i)\n\t\tif len(stack) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression_2(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\t\telse:\n\t\t\tif len(stack) == 0:\n\t\t\t\tstack.append(i)\n\t\t\telse:\n\t\t\t\tif i == ')':\n\t\t\t\t\treturn False\n\t\t\t\telif i == '(':\n\t\t\t\t\tstack.append(i)\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression_3(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\t\telse:\n\t\t\tif len(stack) == 0:\n\t\t\t\tstack.append(i)\n\t\t\telse:\n\t\t\t\tif i == ')':\n\t\t\t\t\treturn False\n\t\t\t\telif i == '(':\n\t\t\t\t\tstack.append(i)\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression_4(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i == '"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t\t# Your code here\n\t\treturn test_str.replace(K, '')\n\nprint(remove_length('This is a test string', 3))\n<|endoftext|>"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t\t# your code here\n\t\tcount = 0\n\t\tfor i in range(len(text)-len(pattern)+1):\n\t\t\tif text[i:i+len(pattern)] == pattern:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(occurance_substring(\"abcabcabc\",\"abc\"))\nprint(occurance_substring(\"abcabcabc\",\"abcabc\"))\nprint(occurance_substring(\"abcabcabc\",\"abcabcabc\"))\nprint(occurance_substring(\"abcabcabc\",\"abcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabc\",\"abcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabc\",\"abcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabc\",\"abcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(occurance_substring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\",\"abcabcabc"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t\tregex = '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n\t\treturn re.match(regex, email)\n\n\"\"\"\nWrite a function to check if the string is a valid phone number or not using regex.\n\"\"\"\ndef check_phone(phone): \n\t\tregex = '^[0-9]{10}$'\n\t\treturn re.match(regex, phone)\n\n\"\"\"\nWrite a function to check if the string is a valid URL or not using regex.\n\"\"\"\ndef check_url(url): \n\t\tregex = '^(http|https)://[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+\\.[a-zA-Z]{2,5}$'\n\t\treturn re.match(regex, url)\n\n\"\"\"\nWrite a function to check if the string is a valid IP address or not using regex.\n\"\"\"\ndef check_ip(ip): \n\t\tregex = '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n\t\treturn re.match(regex, ip)\n\n\"\"\"\nWrite a function to check if the string is a valid date or not using regex.\n\"\"\"\ndef check_date(date): \n\t\tregex = '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'\n\t\treturn re.match(regex, date)\n\n\"\"\"\nWrite a function to check if the string is a valid time or not using regex.\n\"\"\"\ndef check_time(time): \n\t\tregex = '^[0-9]{2}:[0-9]{2}$'\n\t\treturn re.match(regex, time)\n\n\"\"\"\nWrite a function to check if the string is a valid date and time or not using regex.\n\"\"\"\ndef check_datetime(datetime): \n\t\tregex = '^[0-9]{4}-[0-9]{2}-[0-9]{2"}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] % 2!= 0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t\tvowels = ['a', 'e', 'i', 'o', 'u']\n\t\tcount = 0\n\t\tfor i in range(len(test_str)):\n\t\t\tif test_str[i] in vowels:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_vowels('hello'))\nprint(count_vowels('hello there'))\nprint(count_vowels('hello there there'))\nprint(count_vowels('hello there there there'))\nprint(count_vowels('hello there there there there'))\nprint(count_vowels('hello there there there there there'))\nprint(count_vowels('hello there there there there there there'))\nprint(count_vowels('hello there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there there there there there there there there there there'))\nprint(count_vowels('hello there there there there"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\tsum=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(n):\n\t\t\t\tif i!=j and arr[i]+arr[j]==n:\n\t\t\t\t\tsum+=arr[i]+arr[j]\n\t\treturn sum\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(find_Sum(arr,n))\n<|endoftext|>"}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t\t# Write your code here\n\t\tif len(list1) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [list1[0]] + pack_consecutive_duplicates(list1[1:])\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\t\t# Write your code here\n\t\tif len(strs) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn strs[0] + longest_common_prefix(strs[1:])\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\t\t# Write your code here\n\t\tif len(strs) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn longest_common_suffix(strs[1:]) + strs[0]\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two given strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\t\t# Write your code here\n\t\tif len(str1) == 0 or len(str2) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\tif str1[0] == str2[0]:\n\t\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\t\telse:\n\t\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two given strings.\n\"\"\"\ndef longest_common_subsequence_v2(str1, str2):\n\t\t# Write your code here\n\t\tif len(str1) == 0 or len(str2) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\tif str1[0] == str2[0]:\n\t\t\t\treturn longest_common_subsequence_v2(str1[1:], str2[1:]) + str1[0]\n\t\t\telse:\n\t\t\t\treturn max(longest_common_subsequence_v2(str1[1:], str2), longest_common_subsequence_v2("}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\t# Your code here\n\t\tunique_sublists = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1,len(list1)):\n\t\t\t\tif list1[i] == list1[j]:\n\t\t\t\t\tunique_sublists.append(list1[i:j+1])\n\t\treturn len(unique_sublists)\n\nprint(unique_sublists([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 179, "source": "MBPP:780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t\t# Write your code here\n\t\treturn [sum(test_list[i:j+1]) for i in range(len(test_list)) for j in range(i+1, len(test_list))]\n\nprint(find_combinations([1,2,3,4,5]))\n<|endoftext|>"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t\tif n == 1 : \n\t\t\treturn 0\n\t\telse : \n\t\t\treturn n - sum(divisors(n))\n\ndef divisors(n) : \n\tif n == 1 : \n\t\treturn []\n\telse : \n\t\treturn [i for i in range(1, n) if n % i == 0]\n\ndef is_even(n) : \n\treturn count_Divisors(n) % 2 == 0\n\ndef is_odd(n) : \n\treturn count_Divisors(n) % 2 == 1\n\nprint(is_even(10))\nprint(is_odd(10))\n<|endoftext|>"}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t\tsum = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] % 2 == 0:\n\t\t\t\t\tsum += arr[i] + arr[j]\n\t\treturn sum\n\nprint(Odd_Length_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t\tr = r/255.0\n\t\tg = g/255.0\n\t\tb = b/255.0\n\t\tmaxc = max(r, g, b)\n\t\tminc = min(r, g, b)\n\t\tdelta = maxc - minc\n\t\th = 0\n\t\ts = 0\n\t\tv = maxc\n\t\tif maxc == minc:\n\t\t\th = 0\n\t\telif maxc == r:\n\t\t\th = (60 * ((g - b) / delta)) % 360\n\t\telif maxc == g:\n\t\t\th = (60 * ((b - r) / delta)) + 120\n\t\telif maxc == b:\n\t\t\th = (60 * ((r - g) / delta)) + 240\n\t\tif h < 0:\n\t\t\th += 360\n\t\ts = delta / maxc\n\t\treturn h, s, v\n\n\"\"\"\nWrite a function to convert hsv color to rgb color.\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n\t\th = h/360.0\n\t\ts = s/100.0\n\t\tv = v/100.0\n\t\ti = int(h * 6)\n\t\tf = (h * 6) - i\n\t\tp = v * (1 - s)\n\t\tq = v * (1 - f * s)\n\t\tt = v * (1 - (1 - f) * s)\n\t\tif i == 0:\n\t\t\tr, g, b = v, t, p\n\t\telif i == 1:\n\t\t\tr, g, b = q, v, p\n\t\telif i == 2:\n\t\t\tr, g, b = p, v, t\n\t\telif i == 3:\n\t\t\tr, g, b = p, q, v\n\t\telif i == 4:\n\t\t\tr, g, b = t, p, v\n\t\telif i == 5:\n\t\t\tr, g, b = v, p, q\n\t\treturn int(r * 255), int(g * 255), int(b * 255)\n\n\"\"\"\nWrite a function to convert"}
{"ID": 183, "source": "MBPP:784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t\teven_num = 0\n\t\todd_num = 0\n\t\tfor i in list1:\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_num += i\n\t\t\telse:\n\t\t\t\todd_num += i\n\t\treturn even_num * odd_num\n\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t\treturn tuple(map(int, test_str.split(',')))\n\n\"\"\"\nWrite a function to convert integer tuple to string tuple.\n\"\"\"\ndef int_tuple_str(test_tuple):\n\t\treturn ','.join(map(str, test_tuple))\n\n\"\"\"\nWrite a function to convert string to integer tuple.\n\"\"\"\ndef str_int_tuple(test_str):\n\t\treturn tuple(map(int, test_str.split(',')))\n\n\"\"\"\nWrite a function to convert integer tuple to string.\n\"\"\"\ndef int_tuple_str(test_tuple):\n\t\treturn ','.join(map(str, test_tuple))\n\n\"\"\"\nWrite a function to convert string to integer.\n\"\"\"\ndef str_int(test_str):\n\t\treturn int(test_str)\n\n\"\"\"\nWrite a function to convert integer to string.\n\"\"\"\ndef int_str(test_int):\n\t\treturn str(test_int)\n\n\"\"\"\nWrite a function to convert string to float.\n\"\"\"\ndef str_float(test_str):\n\t\treturn float(test_str)\n\n\"\"\"\nWrite a function to convert float to string.\n\"\"\"\ndef float_str(test_float):\n\t\treturn str(test_float)\n\n\"\"\"\nWrite a function to convert string to float.\n\"\"\"\ndef str_float_tuple(test_str):\n\t\treturn tuple(map(float, test_str.split(',')))\n\n\"\"\"\nWrite a function to convert float to string.\n\"\"\"\ndef float_tuple_str(test_tuple):\n\t\treturn ','.join(map(str, test_tuple))\n\n\"\"\"\nWrite a function to convert string to float.\n\"\"\"\ndef str_float(test_str):\n\t\treturn float(test_str)\n\n\"\"\"\nWrite a function to convert float to string.\n\"\"\"\ndef float_str(test_float):\n\t\treturn str(test_float)\n\n\"\"\"\nWrite a function to convert string to float.\n\"\"\"\ndef str_float_tuple(test_str):\n\t\treturn tuple(map(float, test_str.split(',')))\n\n\"\"\"\nWrite a function to convert float to string.\n\"\"\"\ndef float_tuple_str(test_tuple):\n\t\treturn ','.join(map(str,"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\ti = len(a)\n\t\twhile i > 0 and a[i-1] > x:\n\t\t\ta[i] = a[i-1]\n\t\t\ti -= 1\n\t\ta[i] = x\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i] < x:\n\t\t\ta[i] = a[i+1]\n\t\t\ti += 1\n\t\ta[i] = x\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the right deletion point for a specified value in sorted order.\n\"\"\"\ndef right_deletion(a, x):\n\t\ti = len(a)\n\t\twhile i > 0 and a[i-1] > x:\n\t\t\ta[i] = a[i-1]\n\t\t\ti -= 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the left deletion point for a specified value in sorted order.\n\"\"\"\ndef left_deletion(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i] < x:\n\t\t\ta[i] = a[i+1]\n\t\t\ti += 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the right sub-array deletion point for a specified value in sorted order.\n\"\"\"\ndef right_subarray_deletion(a, x):\n\t\ti = len(a)\n\t\twhile i > 0 and a[i-1] > x:\n\t\t\ta[i] = a[i-1]\n\t\t\ti -= 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the left sub-array deletion point for a specified value in sorted order.\n\"\"\"\ndef left_subarray_deletion(a, x):\n\t\ti = 0\n\t\twhile i < len(a) and a[i] < x:\n\t\t\ta[i] = a[i+1]\n\t\t\ti += 1\n\t\treturn i\n\n\"\"\"\nWrite a function to locate the right sub-array insertion point for a specified value in sorted order.\n\"\"\"\ndef right_subarray_insertion(a, x):\n\t\t"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t\treturn text.count('a') == text.count('b')\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two 'b'.\n\"\"\"\ndef text_match_two(text):\n\t\treturn text.count('a') == text.count('b')\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b'.\n\"\"\"\ndef text_match_one(text):\n\t\treturn text.count('a') == text.count('b')\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero 'b'.\n\"\"\"\ndef text_match_zero(text):\n\t\treturn text.count('a') == text.count('b')\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by zero 'b'.\n\"\"\"\ndef text_match_one_zero(text):\n\t\treturn text.count('a') == text.count('b') and text.count('b') == 0\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two 'b' followed by zero 'b'.\n\"\"\"\ndef text_match_two_zero(text):\n\t\treturn text.count('a') == text.count('b') and text.count('b') == 0\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b' followed by zero 'b'.\n\"\"\"\ndef text_match_three_zero(text):\n\t\treturn text.count('a') == text.count('b') and text.count('b') == 0\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two 'b' followed by one 'b'.\n\"\"\"\ndef text_match_two_one(text):\n\t\treturn text.count('a') == text.count('b') and text.count('b') == 1\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one 'b' followed by one 'b'.\n\"\"\"\ndef text_match_one_one(text):\n\t\treturn text.count('a') == text.count('b') and text.count('b') == 1\n\n\"\"\"\nWrite a function that matches a string that has an a"}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t\tnew_tuple = tuple(test_list)\n\t\treturn new_tuple\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list_2(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\tnew_list.append(test_str)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list_3(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list_4(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list_5(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to create a new list from the given string and list.\n\"\"\"\ndef new_list_6(test_list, test_str):\n\t\tnew_list = list(test_list)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list.append(test_str)\n\t\tnew_list"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t\treturn 2*s+l\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t\treturn s*l\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\t\treturn s*l*l\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_polygon(s,l):\n\t\treturn 2*s*l\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_triangle(s,l,h):\n\t\treturn 0.5*s*l*h\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_rectangle(s,l,h):\n\t\treturn 0.5*s*l+0.5*h*l\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_circle(r):\n\t\treturn 2*r*r\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_square(s):\n\t\treturn s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_pentagon(s):\n\t\treturn 5*s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_hexagon(s):\n\t\treturn 6*s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_heptagon(s):\n\t\treturn 7*s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_octagon(s):\n\t\treturn 8*s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_nonagon(s):\n\t\treturn 9*s*s\n\n\"\"\"\nWrite a function to calculate the surface area of a regular polygon.\n\"\"\"\ndef surface_area_decagon"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] % 2 == 0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint"}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t\tif isinstance(test_tup, tuple):\n\t\t\tif len(test_tup) == 1:\n\t\t\t\treturn test_tup[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested(test_tup[1:])\n\t\telse:\n\t\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the nested record from the given list.\n\"\"\"\ndef remove_nested_list(test_list):\n\t\tif isinstance(test_list, list):\n\t\t\tif len(test_list) == 1:\n\t\t\t\treturn test_list[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested_list(test_list[1:])\n\t\telse:\n\t\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the nested record from the given dictionary.\n\"\"\"\ndef remove_nested_dict(test_dict):\n\t\tif isinstance(test_dict, dict):\n\t\t\tif len(test_dict) == 1:\n\t\t\t\treturn test_dict[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested_dict(test_dict[1:])\n\t\telse:\n\t\t\treturn test_dict\n\n\"\"\"\nWrite a function to remove the nested record from the given string.\n\"\"\"\ndef remove_nested_str(test_str):\n\t\tif isinstance(test_str, str):\n\t\t\tif len(test_str) == 1:\n\t\t\t\treturn test_str[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested_str(test_str[1:])\n\t\telse:\n\t\t\treturn test_str\n\n\"\"\"\nWrite a function to remove the nested record from the given integer.\n\"\"\"\ndef remove_nested_int(test_int):\n\t\tif isinstance(test_int, int):\n\t\t\tif len(test_int) == 1:\n\t\t\t\treturn test_int[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested_int(test_int[1:])\n\t\telse:\n\t\t\treturn test_int\n\n\"\"\"\nWrite a function to remove the nested record from the given float.\n\"\"\"\ndef remove_nested_float(test_float):\n\t\tif isinstance(test_float, float):\n\t\t\tif len(test_float) == 1:\n\t\t\t\treturn test_float[0]\n\t\t\telse:\n\t\t\t\treturn remove_nested_float(test_float["}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_list([[1,2,3],[4,5,6]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30]]))\nprint(count_list"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t\tif n==0:\n\t\t\treturn 0\n\t\tif n==1:\n\t\t\tif arr[0]==x:\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\treturn -1\n\t\tif arr[n-1]==x:\n\t\t\treturn n-1\n\t\telse:\n\t\t\treturn last(arr,x,n-1)\n\narr=[1,2,3,4,5,6,7,8,9,10]\nx=10\nn=len(arr)\nprint(last(arr,x,n))\n<|endoftext|>"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\treturn text.find('a')!= -1 and text.find('b')!= -1\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' and followed by a 'c'.\n\"\"\"\ndef text_starta_endb_c(text):\n\t\treturn text.find('a')!= -1 and text.find('b')!= -1 and text.find('c')!= -1\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' and followed by a 'c' and followed by a 'd'.\n\"\"\"\ndef text_starta_endb_c_d(text):\n\t\treturn text.find('a')!= -1 and text.find('b')!= -1 and text.find('c')!= -1 and text.find('d')!= -1\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' and followed by a 'c' and followed by a 'd' and followed by a 'e'.\n\"\"\"\ndef text_starta_endb_c_d_e(text):\n\t\treturn text.find('a')!= -1 and text.find('b')!= -1 and text.find('c')!= -1 and text.find('d')!= -1 and text.find('e')!= -1\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' and followed by a 'c' and followed by a 'd' and followed by a 'e' and followed by a 'f'.\n\"\"\"\ndef text_starta_endb_c_d_e_f(text):\n\t\treturn text.find('a')!= -1 and text.find('b')!= -1 and text.find('c')!= -1 and text.find('d')!= -1 and text.find('e')!= -1 and text.find('f')!= -1\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' and followed by a 'c' and followed by a 'd' and followed by a 'e' and followed by a 'f"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t\theap = []\n\t\tfor i in range(n):\n\t\t\theap.append(items[i])\n\t\tfor i in range(n-1,-1,-1):\n\t\t\tif heap[0] < heap[i]:\n\t\t\t\theap[0],heap[i] = heap[i],heap[0]\n\t\t\t\theapify(heap,i,0)\n\t\treturn heap\n\ndef heapify(heap,i,pos):\n\tleft = 2*pos+1\n\tright = 2*pos+2\n\tif left < len(heap) and heap[left] < heap[i]:\n\t\tpos = left\n\tif right < len(heap) and heap[right] < heap[pos]:\n\t\tpos = right\n\tif pos!= i:\n\t\theap[pos],heap[i] = heap[i],heap[pos]\n\t\theapify(heap,pos,0)\n\ndef main():\n\titems = [10,20,30,40,50,60,70,80,90]\n\tn = len(items)\n\tprint(cheap_items(items,n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_2(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_3(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_4(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_5(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_6(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_7(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_8(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_9(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum += dict[key]\n\t\treturn sum\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum_10(dict):\n\t\tsum = 0\n\t\tfor key in dict:\n\t\t\tsum +="}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2!= 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_in_Range(1,100))\n<|endoftext|>"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t\tsum = 0\n\t\tfor i in arr:\n\t\t\tsum += i\n\t\treturn sum\n\ndef sum_array(arr):\n\treturn _sum(arr)\n\nprint(sum_array([1,2,3,4,5]))\nprint(sum_array([1,2,3,4,5,6]))\nprint(sum_array([1,2,3,4,5,6,7]))\nprint(sum_array([1,2,3,4,5,6,7,8]))\nprint(sum_array([1,2,3,4,5,6,7,8,9]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(sum_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(sum_array([1"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\treturn (n<<d) | (n>>>(32-d))\n\n\"\"\"\nWrite a python function to right rotate the bits of a given number.\n\"\"\"\ndef right_Rotate(n,d):   \n\t\treturn (n>>d) | (n<<(32-d))\n\n\"\"\"\nWrite a python function to convert a given number to binary.\n\"\"\"\ndef binary_to_decimal(n):\n\treturn int(n,2)\n\n\"\"\"\nWrite a python function to convert a given number to hexadecimal.\n\"\"\"\ndef hex_to_decimal(n):\n\treturn int(n,16)\n\n\"\"\"\nWrite a python function to convert a given number to octal.\n\"\"\"\ndef octal_to_decimal(n):\n\treturn int(n,8)\n\n\"\"\"\nWrite a python function to convert a given number to binary.\n\"\"\"\ndef binary_to_hex(n):\n\treturn int(n,2).to_bytes(length=4, byteorder='big').hex()\n\n\"\"\"\nWrite a python function to convert a given number to hexadecimal.\n\"\"\"\ndef hex_to_binary(n):\n\treturn int(n,16).to_bytes(length=4, byteorder='big').hex()\n\n\"\"\"\nWrite a python function to convert a given number to octal.\n\"\"\"\ndef octal_to_hex(n):\n\treturn int(n,8).to_bytes(length=4, byteorder='big').hex()\n\n\"\"\"\nWrite a python function to convert a given number to binary.\n\"\"\"\ndef binary_to_octal(n):\n\treturn int(n,2).to_bytes(length=4, byteorder='big').octal()\n\n\"\"\"\nWrite a python function to convert a given number to hexadecimal.\n\"\"\"\ndef hex_to_octal(n):\n\treturn int(n,16).to_bytes(length=4, byteorder='big').octal()\n\n\"\"\"\nWrite a python function to convert a given number to binary.\n\"\"\"\ndef binary_to_hex_string(n):\n\treturn int(n,2).to_bytes(length=4, byteorder='big').hex()\n\n\"\"\"\nWrite a python function to convert a given number to hexadecimal."}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t\treturn text.replace(\" \", \"\")\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_2(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_3(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_4(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_5(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_6(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_7(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_8(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_9(text):\n\t\treturn text.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a function to remove all non-alphanumeric characters from a string.\n\"\"\"\ndef remove_non_alphanumeric_10(text):\n\t\treturn"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t\tif x == y == z:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef count_equal(x,y,z):\n\tcount = 0\n\tfor i in range(x,y+1):\n\t\tfor j in range(x,y+1):\n\t\t\tfor k in range(x,y+1):\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == y:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == z:\n\t\t\t\t\tcontinue\n\t\t\t\tif i == j == k == x:\n\t\t\t\t\tcontinue"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t\t# Write your code here\n\t\tif n==1:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn count_Rotation(arr,n-1)+1\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(count_Rotation(arr,n))\n<|endoftext|>"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t\tif n < 0 :\n\t\t\treturn False\n\t\telif n == 0 :\n\t\t\treturn True\n\t\telif n == 1 :\n\t\t\treturn True\n\t\telse :\n\t\t\tfor i in range(2,int(n**0.5)+1) :\n\t\t\t\tif n % i == 0 :\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(is_Perfect_Square(16))\nprint(is_Perfect_Square(14))\nprint(is_Perfect_Square(12))\nprint(is_Perfect_Square(13))\nprint(is_Perfect_Square(15))\nprint(is_Perfect_Square(10))\nprint(is_Perfect_Square(11))\nprint(is_Perfect_Square(17))\nprint(is_Perfect_Square(18))\nprint(is_Perfect_Square(19))\nprint(is_Perfect_Square(20))\nprint(is_Perfect_Square(21))\nprint(is_Perfect_Square(22))\nprint(is_Perfect_Square(23))\nprint(is_Perfect_Square(24))\nprint(is_Perfect_Square(25))\nprint(is_Perfect_Square(26))\nprint(is_Perfect_Square(27))\nprint(is_Perfect_Square(28))\nprint(is_Perfect_Square(29))\nprint(is_Perfect_Square(30))\nprint(is_Perfect_Square(31))\nprint(is_Perfect_Square(32))\nprint(is_Perfect_Square(33))\nprint(is_Perfect_Square(34))\nprint(is_Perfect_Square(35))\nprint(is_Perfect_Square(36))\nprint(is_Perfect_Square(37))\nprint(is_Perfect_Square(38))\nprint(is_Perfect_Square(39))\nprint(is_Perfect_Square(40))\nprint(is_Perfect_Square(41))\nprint(is_Perfect_Square(42))\nprint(is_"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t\tif n==0:\n\t\t\treturn True\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n%2==0:\n\t\t\treturn is_Product_Even(arr,n/2)\n\t\telse:\n\t\t\treturn is_Product_Even(arr,n-1)\n\nprint(is_Product_Even([1,2,3,4,5,6,7,8,9,10],10))\n<|endoftext|>"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t\tmax_sum = 0\n\t\tfor i in range(len(lists)):\n\t\t\tfor j in range(len(lists[i])):\n\t\t\t\tmax_sum += lists[i][j]\n\t\treturn max_sum\n\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t\tmax_run = 0\n\t\tfor i in range(len(test_str)):\n\t\t\tif test_str[i] == test_str[i].upper():\n\t\t\t\tmax_run += 1\n\t\treturn max_run\n\nprint(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World! Hello World!\"))\nprint(max_run_uppercase(\"Hello World! Hello World! Hello World!\"))\nprint(max_run_uppercase(\"Hello World! Hello World! Hello World! Hello World!\"))\nprint(max_run_uppercase(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!\"))\nprint(max_run_uppercase(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] % 2!= 0:\n\t\t\t\treturn nums[i]\n\nprint(first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_2(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_3(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_4(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_5(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_6(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_7(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_8(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K_9(test_tup, K):\n\t\tfor i in test_tup:\n\t\t\tif i == K:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuples contain the k or"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_2(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_3(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_4(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_5(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_6(test_tup1, test_tup2):\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller_7(test_tup1, test_tup2):\n\t\tfor"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t\tfor i in range(a,b+1):\n\t\t\tfor j in range(c,d+1):\n\t\t\t\tprint(i,j)\n\ncount_variable(1,10,1,10)\n\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\tif len(test_list1)!= len(test_list2):\n\t\t\treturn False\n\t\tfor i in range(len(test_list1)):\n\t\t\tif test_list1[i]!= test_list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if a list of tuples is sorted or not.\n\"\"\"\ndef check_sorted(test_list):\n\tfor i in range(len(test_list)-1):\n\t\tif test_list[i][0] > test_list[i+1][0]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a list of tuples is sorted in ascending order or not.\n\"\"\"\ndef check_ascending(test_list):\n\tfor i in range(len(test_list)-1):\n\t\tif test_list[i][0] < test_list[i+1][0]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a list of tuples is sorted in descending order or not.\n\"\"\"\ndef check_descending(test_list):\n\tfor i in range(len(test_list)-1):\n\t\tif test_list[i][0] > test_list[i+1][0]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a list of tuples is a permutation of another list of tuples or not.\n\"\"\"\ndef check_permutation(test_list1, test_list2):\n\tif len(test_list1)!= len(test_list2):\n\t\treturn False\n\tfor i in range(len(test_list1)):\n\t\tif test_list1[i]!= test_list2[i]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a list of tuples is a permutation of another list of tuples in ascending order or not.\n\"\"\"\ndef check_permutation_ascending(test_list1, test_list2):\n\tif len(test_list1)!= len(test_list2):\n\t\treturn False\n\tfor i in range(len(test_list1)):\n\t\tif test_list1[i]!= test_list2[i]:\n\t\t\treturn False\n\treturn True\n\n"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t\treturn street.replace('road', 'rd.')\n\nprint(road_rd('road'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\nprint(road_rd('roadway'))\n"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t\treturn len(str1)\n\nprint(string_length(\"Hello\"))\nprint(string_length(\"Hello World\"))\nprint(string_length(\"Hello World!\"))\nprint(string_length(\"Hello World! Hello World!\"))\nprint(string_length(\"Hello World! Hello World! Hello World!\"))\nprint(string_length(\"Hello World! Hello World! Hello World! Hello World!\"))\nprint(string_length(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t\tarea = 0\n\t\tfor i in range(p,q+1):\n\t\t\tarea += i\n\t\treturn area\n\nprint(rombus_area(1,10))\n<|endoftext|>"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t\t# Write your code here\n\t\t# sort the array in ascending order\n\t\t# if the element is 0, then swap with the next element\n\t\t# if the element is 1, then swap with the next element\n\t\t# if the element is 2, then swap with the next element\n\t\t# if the element is not 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, 1, or 2, then swap with the next element\n\t\t# if the element is 0, "}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\ttest_tup[i] = None\n\n\"\"\"\nWrite a function to find the largest value in a list.\n\"\"\"\ndef find_largest(test_list):\n\tlargest = test_list[0]\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] > largest:\n\t\t\tlargest = test_list[i]\n\treturn largest\n\n\"\"\"\nWrite a function to find the smallest value in a list.\n\"\"\"\ndef find_smallest(test_list):\n\tsmallest = test_list[0]\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] < smallest:\n\t\t\tsmallest = test_list[i]\n\treturn smallest\n\n\"\"\"\nWrite a function to find the average of a list.\n\"\"\"\ndef find_average(test_list):\n\ttotal = 0\n\tfor i in range(len(test_list)):\n\t\ttotal += test_list[i]\n\treturn total / len(test_list)\n\n\"\"\"\nWrite a function to find the mode of a list.\n\"\"\"\ndef find_mode(test_list):\n\tcount = 0\n\tmode = test_list[0]\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] == mode:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 1\n\t\t\tmode = test_list[i]\n\treturn mode, count\n\n\"\"\"\nWrite a function to find the median of a list.\n\"\"\"\ndef find_median(test_list):\n\tif len(test_list) % 2 == 0:\n\t\treturn (find_average(test_list[len(test_list) // 2 - 1:len(test_list) // 2 + 1]) + find_average(test_list[len(test_list) // 2 - 1:len(test_list) // 2 + 1])) / 2\n\telse:\n\t\treturn find_average(test_list[len(test_list) // 2])\n\n\"\"\"\nWrite a function to find the mode of a list.\n\"\"\"\ndef find_mode(test_"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t\treturn list(filter(lambda x: x % m == 0 or x % n == 0, nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10], 3, 5))\n<|endoftext|>"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t\treturn str.lower().count('a')\n\nprint(lower_ctr('hello'))\nprint(lower_ctr('Hello'))\nprint(lower_ctr('Hello world'))\nprint(lower_ctr('Hello World'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\nprint(lower_ctr('Hello World!'))\n"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t\tcount = 0\n\t\tfor i in range(len(lists)):\n\t\t\tfor j in range(i+1,len(lists)):\n\t\t\t\tif lists[i] == lists[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_duplic([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,"}
{"ID": 219, "source": "MBPP:820", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100!= 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 29 days or not.\n\"\"\"\ndef check_monthnum_number2(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100 == 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnum_number3(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100!= 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnum_number4(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100 == 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnum_number5(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100!= 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnum_number6(monthnum1):\n\t\tif monthnum1 % 4 == 0 and monthnum1 % 100 == 0 or monthnum1 % 400 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_month"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t\treturn {**dict1, **dict2}\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\treturn strs[-1]\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\tif len(str1) == 0 or len(str2) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif str1[0] == str2[0]:\n\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif len(strs) == 1:\n\t\t\treturn strs[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence_array(strs[1:]), longest_common_subsequence_array(strs[:1]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array_2(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif len(strs) == 1:\n\t\t\treturn strs[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence_array_2(strs[1:]), longest_common_subsequence_array_2(strs[:1]))\n\n\"\"\"\nWrite a function to find the longest common sub"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif p.count('a') < 2:\n\t\t\treturn False\n\t\tif p.count('b') < 2:\n\t\t\treturn False\n\t\tif p.count('c') < 2:\n\t\t\treturn False\n\t\tif p.count('d') < 2:\n\t\t\treturn False\n\t\tif p.count('e') < 2:\n\t\t\treturn False\n\t\tif p.count('f') < 2:\n\t\t\treturn False\n\t\tif p.count('g') < 2:\n\t\t\treturn False\n\t\tif p.count('h') < 2:\n\t\t\treturn False\n\t\tif p.count('i') < 2:\n\t\t\treturn False\n\t\tif p.count('j') < 2:\n\t\t\treturn False\n\t\tif p.count('k') < 2:\n\t\t\treturn False\n\t\tif p.count('l') < 2:\n\t\t\treturn False\n\t\tif p.count('m') < 2:\n\t\t\treturn False\n\t\tif p.count('n') < 2:\n\t\t\treturn False\n\t\tif p.count('o') < 2:\n\t\t\treturn False\n\t\tif p.count('p') < 2:\n\t\t\treturn False\n\t\tif p.count('q') < 2:\n\t\t\treturn False\n\t\tif p.count('r') < 2:\n\t\t\treturn False\n\t\tif p.count('s') < 2:\n\t\t\treturn False\n\t\tif p.count('t') < 2:\n\t\t\treturn False\n\t\tif p.count('u') < 2:\n\t\t\treturn False\n\t\tif p.count('v') < 2:\n\t\t\treturn False\n\t\tif p.count('w') < 2:\n\t\t\treturn False\n\t\tif p.count('x') < 2:\n\t\t\treturn False\n\t\tif p.count('y') < 2:\n\t\t\treturn False\n\t\tif p.count('z') < 2:\n\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity_2(p):\n\t\tif len(p) < 8:\n\t\t\treturn False\n\t\tif p.count('a')"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring_end(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring_contains(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_end(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_contains(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_start(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_middle(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_middle_end(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_middle_start(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome using regex.\n\"\"\"\ndef check_palindrome_middle_start_end(string) : \n\t\treturn re.search(r'^\\w+$', string)\n\n\"\"\"\nWrite a function to check if the given string"}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t\treturn [x for x in l if x % 2 == 0]\n\nprint(remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t\treturn nums[list_index]\n\nprint(access_elements([1,2,3,4,5], 2))\nprint(access_elements([1,2,3,4,5], 3))\nprint(access_elements([1,2,3,4,5], 4))\nprint(access_elements([1,2,3,4,5], 5))\nprint(access_elements([1,2,3,4,5], 6))\nprint(access_elements([1,2,3,4,5], 7))\nprint(access_elements([1,2,3,4,5], 8))\nprint(access_elements([1,2,3,4,5], 9))\nprint(access_elements([1,2,3,4,5], 10))\nprint(access_elements([1,2,3,4,5], 11))\nprint(access_elements([1,2,3,4,5], 12))\nprint(access_elements([1,2,3,4,5], 13))\nprint(access_elements([1,2,3,4,5], 14))\nprint(access_elements([1,2,3,4,5], 15))\nprint(access_elements([1,2,3,4,5], 16))\nprint(access_elements([1,2,3,4,5], 17))\nprint(access_elements([1,2,3,4,5], 18))\nprint(access_elements([1,2,3,4,5], 19))\nprint(access_elements([1,2,3,4,5], 20))\nprint(access_elements([1,2,3,4,5], 21))\nprint(access_elements([1,2,3,4,5], 22))\nprint(access_elements([1,2,3,4,5], 23))\nprint(access_elements([1,2,3,4,5], 24))\nprint(access_elements([1,2,3,4,5], 25))\nprint(access_elements(["}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t\tif a+b > c and a+c > b and b+c > a: \n\t\t\treturn \"Equilateral\"\n\t\telif a+b > c and a+c < b and b+c < a: \n\t\t\treturn \"Isosceles\"\n\t\telif a+b < c and a+c < b and b+c < a: \n\t\t\treturn \"Scalene\"\n\t\telse: \n\t\t\treturn \"Not a triangle\"\n\nprint(check_Type_Of_Triangle(1,2,3))\nprint(check_Type_Of_Triangle(1,2,4))\nprint(check_Type_Of_Triangle(1,2,5))\nprint(check_Type_Of_Triangle(1,2,6))\nprint(check_Type_Of_Triangle(1,2,7))\nprint(check_Type_Of_Triangle(1,2,8))\nprint(check_Type_Of_Triangle(1,2,9))\nprint(check_Type_Of_Triangle(1,2,10))\nprint(check_Type_Of_Triangle(1,2,11))\nprint(check_Type_Of_Triangle(1,2,12))\nprint(check_Type_Of_Triangle(1,2,13))\nprint(check_Type_Of_Triangle(1,2,14))\nprint(check_Type_Of_Triangle(1,2,15))\nprint(check_Type_Of_Triangle(1,2,16))\nprint(check_Type_Of_Triangle(1,2,17))\nprint(check_Type_Of_Triangle(1,2,18))\nprint(check_Type_Of_Triangle(1,2,19))\nprint(check_Type_Of_Triangle(1,2,20))\nprint(check_Type_Of_Triangle(1,2,21))\nprint(check_Type_Of_Triangle(1,2,22))\nprint(check_Type_Of_Triangle(1,2,23))\nprint(check_Type_Of_Triangle(1,2,24))\nprint(check_Type_Of_Triangle(1,2,25))\nprint(check_"}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\treturn sum([row[C] for row in list1])\n\n\"\"\"\nWrite a function to find the maximum value in a list of lists.\n\"\"\"\ndef max_list(list1):\n\t\treturn max([max(row) for row in list1])\n\n\"\"\"\nWrite a function to find the minimum value in a list of lists.\n\"\"\"\ndef min_list(list1):\n\t\treturn min([min(row) for row in list1])\n\n\"\"\"\nWrite a function to find the average value in a list of lists.\n\"\"\"\ndef avg_list(list1):\n\t\treturn sum_column(list1, 0) / len(list1)\n\n\"\"\"\nWrite a function to find the median value in a list of lists.\n\"\"\"\ndef median_list(list1):\n\t\tif len(list1) % 2 == 0:\n\t\t\t\treturn (sum_column(list1, 0) + sum_column(list1, 1)) / 2\n\t\telse:\n\t\t\t\treturn sum_column(list1, 0)\n\n\"\"\"\nWrite a function to find the mode value in a list of lists.\n\"\"\"\ndef mode_list(list1):\n\t\treturn max_list(list1, key=list1.count)\n\n\"\"\"\nWrite a function to find the sum of the squares of the elements in a list.\n\"\"\"\ndef sum_squares_list(list1):\n\t\treturn sum([row**2 for row in list1])\n\n\"\"\"\nWrite a function to find the square root of a number.\n\"\"\"\ndef sqrt(x):\n\t\treturn int(round(math.sqrt(x)))\n\n\"\"\"\nWrite a function to find the cube root of a number.\n\"\"\"\ndef cube_root(x):\n\t\treturn int(round(math.cbrt(x)))\n\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef factorial(x):\n\t\treturn int(round(math.factorial(x)))\n\n\"\"\"\nWrite a function to find the sum of the squares of the first n natural numbers.\n\"\"\"\ndef sum_squares_first_n(n):\n\t\treturn sum_squares_list([i for i in range(1, n+1)])\n\n\"\"\"\nWrite a function to find"}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t\talpha_count = 0\n\t\tdigit_count = 0\n\t\tspecial_count = 0\n\t\tfor i in string:\n\t\t\tif i.isalpha():\n\t\t\t\talpha_count += 1\n\t\t\telif i.isdigit():\n\t\t\t\tdigit_count += 1\n\t\t\telif i.isspace():\n\t\t\t\tspecial_count += 1\n\t\treturn alpha_count,digit_count,special_count\n\nprint(count_alpha_dig_spl(\"Hello World\"))\nprint(count_alpha_dig_spl(\"Hello World!\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%^&*()\"))\nprint(count_alpha_dig_spl(\"Hello World!@#$%"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t\t# Your code here\n\t\tcount = {}\n\t\tfor i in input:\n\t\t\tif i in count:\n\t\t\t\tcount[i] += 1\n\t\t\telse:\n\t\t\t\tcount[i] = 1\n\t\tfor i in count:\n\t\t\tif count[i] > 1:\n\t\t\t\treturn i\n\t\treturn None\n\nprint(second_frequent([\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\","}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t\treturn round(a, digits)\n\n\"\"\"\nWrite a function to round down a number to specific digits.\n\"\"\"\ndef round_down(a, digits):\n\t\treturn round(a, -digits)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_up(a, digits):\n\t\treturn round(a, digits + 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_down(a, digits):\n\t\treturn round(a, -digits - 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_even(a, digits):\n\t\treturn round(a, digits + 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_odd(a, digits):\n\t\treturn round(a, -digits - 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_even(a, digits):\n\t\treturn round(a, digits + 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_odd(a, digits):\n\t\treturn round(a, -digits - 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_even_odd(a, digits):\n\t\treturn round(a, digits + 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_odd_even(a, digits):\n\t\treturn round(a, -digits - 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_even_odd_even(a, digits):\n\t\treturn round(a, digits + 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_odd_even_odd(a, digits):\n\t\treturn round(a, -digits - 1)\n\n\"\"\"\nWrite a function to round a number to specific digits.\n\"\"\"\ndef round_half_to_odd_"}
{"ID": 230, "source": "MBPP:831", "prompt": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\tcount=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]==arr[j]:\n\t\t\t\t\tcount+=1\n\t\treturn count\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(count_Pairs(arr,n))\n<|endoftext|>"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the minimum numeric value from a string by using regex.\n\"\"\"\ndef extract_min(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the sum of numeric values from a string by using regex.\n\"\"\"\ndef extract_sum(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the average numeric value from a string by using regex.\n\"\"\"\ndef extract_average(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the median numeric value from a string by using regex.\n\"\"\"\ndef extract_median(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the mode numeric value from a string by using regex.\n\"\"\"\ndef extract_mode(input): \n\t\treturn int(re.findall(r'\\d+', input)[0])\n\n\"\"\"\nWrite a function to extract the number of times a string occurs in a string.\n\"\"\"\ndef extract_count(input, sub): \n\t\treturn len(re.findall(sub, input))\n\n\"\"\"\nWrite a function to extract the number of times a string occurs in a string.\n\"\"\"\ndef extract_count_all(input, sub): \n\t\treturn len(re.findall(sub, input))\n\n\"\"\"\nWrite a function to extract the number of times a string occurs in a string.\n\"\"\"\ndef extract_count_all_not(input, sub): \n\t\treturn len(re.findall(sub, input))\n\n\"\"\"\nWrite a function to extract the number of times a string occurs in a string.\n\"\"\"\ndef extract_count_all_not_in(input, sub): \n\t\treturn len(re.findall(sub, input))\n\n\"\"\"\nWrite a function to extract the number of times a string occurs in a string.\n\"\"\"\ndef extract_count_all_not_in_not(input, sub): \n\t\treturn len(re.findall(sub, input))\n\n\"\"\"\nWrite a function to extract the number of times a string"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items as a list.\n\"\"\"\ndef get_items(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_key(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_key_and_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_key_and_value_and_key(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_key_and_value_and_key_and_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value_pairs_sorted_by_key_and_value_and_key_and_value_and_key(dict): \n\t\treturn list(dict.items())"}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t\tmatrix = []\n\t\tfor i in range(n):\n\t\t\tmatrix.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tmatrix[i].append(i**j)\n\t\treturn matrix\n\ndef print_matrix(matrix):\n\tfor i in range(len(matrix)):\n\t\tfor j in range(len(matrix[i])):\n\t\t\tprint(matrix[i][j], end=\" \")\n\t\tprint()\n\ndef spiral_order(matrix):\n\tn = len(matrix)\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < n and j < n and k < n:\n\t\tprint_matrix(matrix)\n\t\ti += 1\n\t\tj += 1\n\t\tk += 1\n\nif __name__ == \"__main__\":\n\tn = int(input())\n\tmatrix = generate_matrix(n)\n\tspiral_order(matrix)<|endoftext|>"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the intercept of a line.\n\"\"\"\ndef intercept(x1,y1,x2,y2): \n\t\treturn y1-slope(x1,y1,x2,y2)*x1\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance2(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance3(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance4(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance5(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance6(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance7(x1,y1,x2,y2): \n\t\treturn math.sqrt((x2-x1)**2+(y2-y1)**2)\n\n\"\"\"\nWrite a python function to find the distance between two points.\n\"\"\"\ndef distance8(x1,y1,x2,y2): \n\t"}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\tmax_sum = a[0]\n\t\tmax_sum_index = 0\n\t\tfor i in range(1,size):\n\t\t\tif a[i] > max_sum:\n\t\t\t\tmax_sum = a[i]\n\t\t\t\tmax_sum_index = i\n\t\treturn max_sum_index\n\nprint(max_sub_array_sum([1,2,3,4,5,6,7,8,9,10],10))\n<|endoftext|>"}
{"ID": 236, "source": "MBPP:837", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tsum += i**3\n\t\treturn sum\n\nprint(cube_Sum(10))\n<|endoftext|>"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t\t# Your code here\n\t\tn = len(s1)\n\t\ti = 0\n\t\tj = 0\n\t\twhile i < n and j < n :\n\t\t\tif s1[i]!= s2[j] :\n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\t\telse :\n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\treturn i\n\ns1 = \"101\"\ns2 = \"10101\"\nprint(min_Swaps(s1,s2))\n<|endoftext|>"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn tup[0]\n\n\"\"\"\nWrite a function to sort the tuples by the second item of each tuple.\n\"\"\"\ndef sort_tuple2(tup): \n\t\treturn tup[1]\n\n\"\"\"\nWrite a function to sort the tuples by the third item of each tuple.\n\"\"\"\ndef sort_tuple3(tup): \n\t\treturn tup[2]\n\n\"\"\"\nWrite a function to sort the tuples by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple4(tup): \n\t\treturn tup[3]\n\n\"\"\"\nWrite a function to sort the tuples by the fifth item of each tuple.\n\"\"\"\ndef sort_tuple5(tup): \n\t\treturn tup[4]\n\n\"\"\"\nWrite a function to sort the tuples by the sixth item of each tuple.\n\"\"\"\ndef sort_tuple6(tup): \n\t\treturn tup[5]\n\n\"\"\"\nWrite a function to sort the tuples by the seventh item of each tuple.\n\"\"\"\ndef sort_tuple7(tup): \n\t\treturn tup[6]\n\n\"\"\"\nWrite a function to sort the tuples by the eighth item of each tuple.\n\"\"\"\ndef sort_tuple8(tup): \n\t\treturn tup[7]\n\n\"\"\"\nWrite a function to sort the tuples by the ninth item of each tuple.\n\"\"\"\ndef sort_tuple9(tup): \n\t\treturn tup[8]\n\n\"\"\"\nWrite a function to sort the tuples by the tenth item of each tuple.\n\"\"\"\ndef sort_tuple10(tup): \n\t\treturn tup[9]\n\n\"\"\"\nWrite a function to sort the tuples by the eleventh item of each tuple.\n\"\"\"\ndef sort_tuple11(tup): \n\t\treturn tup[10]\n\n\"\"\"\nWrite a function to sort the tuples by the twelfth item of each tuple.\n\"\"\"\ndef sort_tuple12(tup): \n\t\treturn tup[11]\n\n\"\"\"\nWrite a function to sort the tuples by the thirteenth item of each tuple.\n\"\"\"\ndef sort_tuple13(tup): \n\t\treturn tup[12]\n\n\"\"\"\nWrite a function to sort the tuples by the fourteenth item of each tuple.\n\"\"\"\ndef sort_tuple14(tup): \n\t\treturn tup[1"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t\tif (b**2 - 4*a*c) < 0:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,-3))\nprint(Check_Solution(1,-2,3))\nprint(Check_Solution(1,-2,-3))\nprint(Check_Solution(1,2,3))"}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn get_inv_count(arr, n-1) + get_inv_count(arr, n-1, arr[n-1])\n\ndef main():\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr)\n\tprint(get_inv_count(arr, n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t\tcount = 0\n\t\tfor i in range(arr_size):\n\t\t\tif arr[i] % 2 == 1:\n\t\t\t\tcount += 1\n\t\treturn count\n\ndef main():\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tarr_size = len(arr)\n\tprint(get_odd_occurence(arr, arr_size))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\t# Create a heap queue\n\t\theap = []\n\t\t# Add all the prime numbers to the heap\n\t\tfor prime in primes:\n\t\t\theap.append(prime)\n\t\t# Create a counter to keep track of the number of elements in the heap\n\t\tcounter = 0\n\t\t# Keep adding elements to the heap until the heap is empty\n\t\twhile len(heap) > 0:\n\t\t\t# Get the top element from the heap\n\t\t\ttop = heap[0]\n\t\t\t# Remove the top element from the heap\n\t\t\theap.pop(0)\n\t\t\t# Increment the counter\n\t\t\tcounter += 1\n\t\t\t# If the top element is a multiple of all the numbers in the heap, then\n\t\t\t# add the top element to the heap\n\t\t\tif top % len(heap) == 0:\n\t\t\t\theap.append(top)\n\t\t\t# If the top element is not a multiple of all the numbers in the heap, then\n\t\t\t# remove the top element from the heap and add it to the heap\n\t\t\telse:\n\t\t\t\theap.append(top)\n\t\t\t\theap.append(top)\n\t\t# Return the nth super ugly number\n\t\treturn heap[n-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number_2(n, primes):\n\t\t# Create a heap queue\n\t\theap = []\n\t\t# Add all the prime numbers to the heap\n\t\tfor prime in primes:\n\t\t\theap.append(prime)\n\t\t# Create a counter to keep track of the number of elements in the heap\n\t\tcounter = 0\n\t\t# Keep adding elements to the heap until the heap is empty\n\t\twhile len(heap) > 0:\n\t\t\t# Get the top element from the heap\n\t\t\ttop = heap[0]\n\t\t\t# Remove the top element from the heap\n\t\t\theap.pop(0)\n\t\t\t# Increment the counter\n\t\t\tcounter += 1\n\t\t\t# If the top element is a multiple of all the numbers in the heap, then\n\t\t\t# add the top element to the heap\n\t\t\tif top % len(heap) == 0:\n\t\t\t\theap.append(top)\n\t\t\t# If the top element is not a multiple of all the numbers in the heap, then\n\t\t\t#"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\tif k == 0: \n\t\t\treturn n \n\t\telif k % 2 == 0: \n\t\t\treturn get_Number(n, k - 1) \n\t\telse: \n\t\t\treturn get_Number(n, k - 1) + n \n\ndef get_kth_element(arr, k): \n\tif k == 0: \n\t\treturn arr[0] \n\telif k % 2 == 0: \n\t\treturn get_kth_element(arr[1:], k - 1) \n\telse: \n\t\treturn get_kth_element(arr[1:], k - 1) + arr[0] \n\nif __name__ == \"__main__\": \n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n\tk = 3\n\tprint(get_kth_element(arr, k))<|endoftext|>"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn n + find_Digits(n-1)\n\nprint(find_Digits(10))\n<|endoftext|>"}
{"ID": 245, "source": "MBPP:846", "prompt": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t\t# Write your code here\n\t\tarr.sort()\n\t\ti = 0\n\t\tj = n-1\n\t\twhile i < j:\n\t\t\tif arr[i] + arr[j] == dep:\n\t\t\t\treturn j-i\n\t\t\telif arr[i] + arr[j] < dep:\n\t\t\t\ti += 1\n\t\t\telse:\n\t\t\t\tj -= 1\n\t\treturn j-i\n\nif __name__ == '__main__':\n\tprint(find_platform([1, 2, 3, 4, 5], 10, 5))\n<|endoftext|>"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy2(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy3(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy4(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy5(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy6(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy7(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy8(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy9(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy10(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy11(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy12(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy13(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy14(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy15(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy16(xs):\n  return list(xs)\n\n\"\"\"\nWrite a python function to copy a list from a tuple.\n\"\"\"\ndef lcopy17(xs"}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t\treturn (base1+base2)*height/2\n\nprint(area_trapezium(1,2,3))\n<|endoftext|>"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t\tsum = 0\n\t\tfor i in range(2,N+1):\n\t\t\tif N%i == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(Sum(1000000))\n<|endoftext|>"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and a+c>b and b+c>a: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(is_triangleexists(1,2,3))\nprint(is_triangleexists(1,2,4))\nprint(is_triangleexists(1,2,5))\nprint(is_triangleexists(1,2,6))\nprint(is_triangleexists(1,2,7))\nprint(is_triangleexists(1,2,8))\nprint(is_triangleexists(1,2,9))\nprint(is_triangleexists(1,2,10))\nprint(is_triangleexists(1,2,11))\nprint(is_triangleexists(1,2,12))\nprint(is_triangleexists(1,2,13))\nprint(is_triangleexists(1,2,14))\nprint(is_triangleexists(1,2,15))\nprint(is_triangleexists(1,2,16))\nprint(is_triangleexists(1,2,17))\nprint(is_triangleexists(1,2,18))\nprint(is_triangleexists(1,2,19))\nprint(is_triangleexists(1,2,20))\nprint(is_triangleexists(1,2,21))\nprint(is_triangleexists(1,2,22))\nprint(is_triangleexists(1,2,23))\nprint(is_triangleexists(1,2,24))\nprint(is_triangleexists(1,2,25))\nprint(is_triangleexists(1,2,26))\nprint(is_triangleexists(1,2,27))\nprint(is_triangleexists(1,2,28))\nprint(is_triangleexists(1,2,29))\nprint(is_triangleexists(1,2,30))\nprint(is_triangleexists(1,2,31))\nprint(is_triangleexists(1,2,32))\nprint(is_triangleexists(1,2,33))\nprint(is_triangleexists(1,2,34))\nprint(is_triangle"}
{"ID": 250, "source": "MBPP:851", "prompt": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t\tif N==0: \n\t\t\treturn 0 \n\t\tif N==1: \n\t\t\treturn 1 \n\t\tif N==2: \n\t\t\treturn 2 \n\t\tif N%2==0: \n\t\t\treturn Sum_of_Inverse_Divisors(N/2,Sum+N) \n\t\telse: \n\t\t\treturn Sum_of_Inverse_Divisors(N/2,Sum) \n\nprint(Sum_of_Inverse_Divisors(10,0))\n<|endoftext|>"}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t\t\"\"\"\n\t\t:param num_list: list of numbers\n\t\t:return: list of numbers without negative numbers\n\t\t\"\"\"\n\t\tnew_list = []\n\t\tfor num in num_list:\n\t\t\tif num >= 0:\n\t\t\t\tnew_list.append(num)\n\t\treturn new_list\n\nprint(remove_negs([-1, 0, 1, 2, -3, 4]))\n<|endoftext|>"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif n%i == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_of_odd_Factors(100))\n<|endoftext|>"}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t\theap = []\n\t\tfor i in rawheap:\n\t\t\theap.append(i)\n\t\tfor i in range(len(heap)-1,0,-1):\n\t\t\theapify(heap,i)\n\t\treturn heap\n\ndef heapify(heap,i):\n\tleft = 2*i+1\n\tright = 2*i+2\n\tlargest = i\n\tif left < len(heap) and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < len(heap) and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest!= i:\n\t\theap[i],heap[largest] = heap[largest],heap[i]\n\t\theapify(heap,largest)\n\ndef heap_sort(heap):\n\tfor i in range(len(heap)-1,0,-1):\n\t\theap[i],heap[0] = heap[0],heap[i]\n\t\theapify(heap,0)\n\treturn heap\n\ndef heap_sort_2(heap):\n\tfor i in range(len(heap)-1,0,-1):\n\t\theap[i],heap[0] = heap[0],heap[i]\n\t\theapify_2(heap,0)\n\treturn heap\n\ndef heapify_2(heap,i):\n\tleft = 2*i+1\n\tright = 2*i+2\n\tlargest = i\n\tif left < len(heap) and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < len(heap) and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest!= i:\n\t\theap[i],heap[largest] = heap[largest],heap[i]\n\t\theapify_2(heap,largest)\n\ndef heap_sort_3(heap):\n\tfor i in range(len(heap)-1,0,-1):\n\t\theap[i],heap[0] = heap[0],heap[i]\n\t\theapify_3(heap,0)\n\treturn heap\n\ndef heapify_3(heap,i):\n\tleft = 2*i+1\n\tright = 2*i+2\n\tlargest = i\n\tif"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\tif x % 2 == 0: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(check_Even_Parity(12))\nprint(check_Even_Parity(13))\nprint(check_Even_Parity(14))\nprint(check_Even_Parity(15))\nprint(check_Even_Parity(16))\nprint(check_Even_Parity(17))\nprint(check_Even_Parity(18))\nprint(check_Even_Parity(19))\nprint(check_Even_Parity(20))\nprint(check_Even_Parity(21))\nprint(check_Even_Parity(22))\nprint(check_Even_Parity(23))\nprint(check_Even_Parity(24))\nprint(check_Even_Parity(25))\nprint(check_Even_Parity(26))\nprint(check_Even_Parity(27))\nprint(check_Even_Parity(28))\nprint(check_Even_Parity(29))\nprint(check_Even_Parity(30))\nprint(check_Even_Parity(31))\nprint(check_Even_Parity(32))\nprint(check_Even_Parity(33))\nprint(check_Even_Parity(34))\nprint(check_Even_Parity(35))\nprint(check_Even_Parity(36))\nprint(check_Even_Parity(37))\nprint(check_Even_Parity(38))\nprint(check_Even_Parity(39))\nprint(check_Even_Parity(40))\nprint(check_Even_Parity(41))\nprint(check_Even_Parity(42))\nprint(check_Even_Parity(43))\nprint(check_Even_Parity(44))\nprint(check_Even_Parity(45))\nprint(check_Even_Parity(46))\nprint(check_Even_Parity(47))\nprint(check_Even_Parity(48))\nprint(check_Even_Par"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn list(map(str, list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using filter function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn list(filter(str.isalpha, list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using reduce function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn list(reduce(lambda x, y: x + y, list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using sorted function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn sorted(list1)\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using sorted function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn sorted(list1, key=str.lower)\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using sorted function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn sorted(list1, key=str.lower, reverse=True)\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using sorted function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn sorted(list1, key=str.lower, reverse=True, key=str.upper)\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using sorted function.\n\"\"\"\ndef listify_list(list1):\n\t\treturn sorted(list1, key=str.lower, reverse=True, key=str.upper, cmp=str.lower)\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tfor j in i:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_list([[1,2,3],[4,5,6]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(count_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30]]))\nprint(count_list([[1,"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t\t\"\"\"\n\t\t:param my_list: list\n\t\t:return: list\n\t\t\"\"\"\n\t\tif len(my_list) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [my_list[0]] + sub_lists(my_list[1:])\n\nprint(sub_lists([1,2,3,4,5]))\n<|endoftext|>"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_2(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_3(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_4(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_5(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_6(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_7(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_8(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric_9(string): \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t\treturn [text for text in texts if all(char in text for char in str)]\n\nprint(anagram_lambda(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using list comprehension.\n\"\"\"\ndef anagram_list_comp(texts,str):\n\treturn [text for text in texts if all(char in text for char in str)]\n\nprint(anagram_list_comp(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using set comprehension.\n\"\"\"\ndef anagram_set_comp(texts,str):\n\treturn {text for text in texts if all(char in text for char in str)}\n\nprint(anagram_set_comp(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using dictionary comprehension.\n\"\"\"\ndef anagram_dict_comp(texts,str):\n\treturn {text:text for text in texts if all(char in text for char in str)}\n\nprint(anagram_dict_comp(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using generator expression.\n\"\"\"\ndef anagram_gen_exp(texts,str):\n\treturn (text for text in texts if all(char in text for char in str))\n\nprint(anagram_gen_exp(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using generator expression.\n\"\"\"\ndef anagram_gen_exp_2(texts,str):\n\treturn (text for text in texts if all(char in text for char in str))\n\nprint(anagram_gen_exp_2(texts,str))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using generator expression.\n\"\"\"\ndef anagram_gen_exp_3(texts,str):\n\treturn (text for text in texts if all(char in text for char in str))\n\nprint(anagram_gen_exp_3(texts,str))\n\n\"\"\"\nWrite a function to find all an"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t\twords = text.split()\n\t\tword_count = {}\n\t\tfor word in words:\n\t\t\tif word in word_count:\n\t\t\t\tword_count[word] += 1\n\t\t\telse:\n\t\t\t\tword_count[word] = 1\n\t\treturn word_count.most_common(n)\n\nprint(n_common_words(\"The quick brown fox jumps over the lazy dog\", 3))\n<|endoftext|>"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t\t# Write your code here\n\t\tlongest_conseq_subseq = 0\n\t\tlongest_conseq_subseq_len = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif arr[i] == arr[j]:\n\t\t\t\t\tlongest_conseq_subseq = max(longest_conseq_subseq, j-i+1)\n\t\t\t\t\tlongest_conseq_subseq_len = max(longest_conseq_subseq_len, j-i)\n\t\treturn longest_conseq_subseq, longest_conseq_subseq_len\n\ndef main():\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr)\n\tprint(find_longest_conseq_subseq(arr, n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t\treturn [text for text in texts if text == text[::-1]]\n\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\"]))\nprint(palindrome_lambda([\"racecar\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\","}
{"ID": 264, "source": "MBPP:865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(map(lambda x: x*n,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using filter function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(filter(lambda x: x*n,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using reduce function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(reduce(lambda x,y: x+y,nums,0))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using enumerate function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(enumerate(nums,start=1))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using zip function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(zip(nums,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using zip_longest function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(zip_longest(nums,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using zip_longest_with_repeat function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(zip_longest_with_repeat(nums,nums))\n\nprint(ntimes_list([1,2,3,4,5],3))\n\n\"\"\"\nWrite a function to print n-times a list using zip_longest_map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t\treturn list(zip_longest_map(nums,nums))\n\nprint(ntimes_list([1,2,3,4"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"February\" or monthname2 == \"March\" or monthname2 == \"April\" or monthname2 == \"May\" or monthname2 == \"June\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"September\" or monthname2 == \"October\" or monthname2 == \"November\" or monthname2 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumb2(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"February\" or monthname2 == \"March\" or monthname2 == \"April\" or monthname2 == \"May\" or monthname2 == \"June\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"September\" or monthname2 == \"October\" or monthname2 == \"November\" or monthname2 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 29 days or not.\n\"\"\"\ndef check_monthnumb3(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"February\" or monthname2 == \"March\" or monthname2 == \"April\" or monthname2 == \"May\" or monthname2 == \"June\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"September\" or monthname2 == \"October\" or monthname2 == \"November\" or monthname2 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnumb4(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"February\" or monthname2 == \"March\" or monthname2 == \"April\" or monthname2 == \"May\" or monthname2"}
{"ID": 266, "source": "MBPP:867", "prompt": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t\tsum=0\n\t\tfor i in range(n):\n\t\t\tsum+=arr[i]\n\t\tif sum%2==0:\n\t\t\treturn sum\n\t\telse:\n\t\t\treturn sum+1\n\narr=[1,2,3,4,5]\nn=len(arr)\nprint(min_Num(arr,n))\n<|endoftext|>"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t\treturn len(a.split()[-1])\n\nprint(length_Of_Last_Word(\"Hello World\"))\nprint(length_Of_Last_Word(\"Hello World!\"))\nprint(length_Of_Last_Word(\"Hello World! Hello World!\"))\nprint(length_Of_Last_Word(\"Hello World! Hello World! Hello World!\"))\nprint(length_Of_Last_Word(\"Hello World! Hello World! Hello World! Hello World!\"))\nprint(length_Of_Last_Word(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t\tnewlist = []\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i][0] >= leftrange and list1[i][0] <= rigthrange:\n\t\t\t\tnewlist.append(list1[i])\n\t\treturn newlist\n\ndef main():\n\tlist1 = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t\treturn sum(filter(lambda x: x > 0, nums))\n\nprint(sum_positivenum([1, 2, 3, 4, 5]))\nprint(sum_positivenum([-1, 2, 3, 4, 5]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, "}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t\tif len(string1)!= len(string2): \n\t\t\treturn False\n\t\telse: \n\t\t\treturn string1 == string2[::-1]\n\nprint(are_Rotations(\"abc\",\"acb\"))\nprint(are_Rotations(\"abc\",\"bac\"))\nprint(are_Rotations(\"abc\",\"bca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bac\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\nprint(are_Rotations(\"abc\",\"bacb\"))\nprint(are_Rotations(\"abc\",\"baca\"))\n"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t\tif len(list1) == 0: \n\t\t\treturn True\n\t\tif len(list2) == 0: \n\t\t\treturn False\n\t\tif list1[0] == list2[0]: \n\t\t\treturn check_subset(list1[1:],list2[1:])\n\t\telse: \n\t\t\treturn check_subset(list1[1:],list2)\n\nprint(check_subset([1,2,3,4,5], [1,2,3,4,5]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14]))\nprint(check_subset([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15]))\nprint(check_subset([1,2,"}
{"ID": 272, "source": "MBPP:873", "prompt": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t", "predict": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n<|endoftext|>"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t\tif len(str1) == len(str2):\n\t\t\tfor i in range(len(str1)):\n\t\t\t\tif str1[i]!= str2[i]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Concat(\"abc\",\"abc\"))\nprint(check_Concat(\"abc\",\"def\"))\nprint(check_Concat(\"abc\",\"abcd\"))\nprint(check_Concat(\"abc\",\"ab\"))\nprint(check_Concat(\"abc\",\"\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat(\"abc\",\"abcde\"))\nprint(check_Concat"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t\tmin_diff}
{"ID": 275, "source": "MBPP:876", "prompt": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t\treturn x * y // gcd(x, y)\n\ndef gcd(x, y):\n\t\tif y == 0:\n\t\t\t\treturn x\n\t\telse:\n\t\t\t\treturn gcd(y, x % y)\n\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10, 20))\nprint(lcm(10"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\t# Your code here\n\t\tstr = str.split()\n\t\tstr.sort()\n\t\tstr = \" \".join(str)\n\t\treturn str\n\nprint(sort_String(\"abc\"))\nprint(sort_String(\"abc def\"))\nprint(sort_String(\"abc def ghi\"))\nprint(sort_String(\"abc def ghi jkl\"))\nprint(sort_String(\"abc def ghi jkl mno\"))\nprint(sort_String(\"abc def ghi jkl mno pqr\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl mno\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl mno pqr\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl mno pqr stu\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl mno pqr stu vwx\"))\nprint(sort_String(\"abc def ghi jkl mno pqr stu vwx yz z abc def ghi jkl mno pqr stu vwx yz\"))\nprint(sort_String(\"abc def g"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple) == K:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t\tif len(test_tuple)"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.search(r\"a\\w*b\", text)\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t\tif (a*a+b*b) == c*c : \n\t\t\treturn True\n\t\telse : \n\t\t\treturn False\n\ndef main():\n\ta = int(input(\"Enter a : \"))\n\tb = int(input(\"Enter b : \"))\n\tc = int(input(\"Enter c : \"))\n\tif Check_Solution(a,b,c) : \n\t\tprint(\"The number of solutions is : \", end=\"\")\n\t\tprint(int(a*a-4*b*c))\n\telse : \n\t\tprint(\"The number of solutions is : \", end=\"\")\n\t\tprint(int(a*a-4*b*c)+1)\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t\tsum_even = 0\n\t\tsum_odd = 0\n\t\tfor i in list1:\n\t\t\tif i % 2 == 0:\n\t\t\t\tsum_even += i\n\t\t\telse:\n\t\t\t\tsum_odd += i\n\t\treturn sum_even, sum_odd\n\nprint(sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t\treturn (2*b+h)\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(w,h):\n\t\treturn w*h\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(w,h):\n\t\treturn w*h\n\n\"\"\"\nWrite a function to calculate perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\t\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to calculate perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\t\treturn a+b+c\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to calculate perimeter of a pentagon.\n\"\"\"\ndef pentagon_perimeter(a,b,c,d,e):\n\t\treturn a+b+c+d+e\n\n\"\"\"\nWrite a function to calculate area of a pentagon.\n\"\"\"\ndef pentagon_area(a,b,c,d,e):\n\t\treturn (a*b*c)/2\n\n\"\"\"\nWrite a function to calculate perimeter of a hexagon.\n\"\"\"\ndef hexagon_perimeter(a,b,c,d,e,f,g,h):\n\t\treturn a+b+c+d+e+f+g+h\n\n\"\"\"\nWrite a function to calculate area of a hexagon.\n\"\"\"\ndef hexagon_area(a,b,c,d,e,f,g,h):\n\t\treturn (a*b*c*d)/6\n\n\"\"\"\nWrite a function to calculate perimeter of a heptagon.\n\"\"\"\ndef heptagon_perimeter(a,b,c,d,e,f"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t\treturn list(filter(lambda x: x % m == 0 and x % n == 0, nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n<|endoftext|>"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t\tif n==0: \n\t\t\treturn True \n\t\tif n==1: \n\t\t\treturn False \n\t\tif l==r: \n\t\t\treturn True \n\t\tif l>r: \n\t\t\treturn False \n\t\tif l==r: \n\t\t\treturn True \n\t\tif l<0 or r>2**31-1: \n\t\t\treturn False \n\t\tif l==0: \n\t\t\treturn False \n\t\tif l==1: \n\t\t\treturn True \n\t\tif l==2: \n\t\t\treturn False \n\t\tif l==3: \n\t\t\treturn True \n\t\tif l==4: \n\t\t\treturn False \n\t\tif l==5: \n\t\t\treturn True \n\t\tif l==6: \n\t\t\treturn False \n\t\tif l==7: \n\t\t\treturn True \n\t\tif l==8: \n\t\t\treturn False \n\t\tif l==9: \n\t\t\treturn True \n\t\tif l==10: \n\t\t\treturn False \n\t\tif l==11: \n\t\t\treturn True \n\t\tif l==12: \n\t\t\treturn False \n\t\tif l==13: \n\t\t\treturn True \n\t\tif l==14: \n\t\t\treturn False \n\t\tif l==15: \n\t\t\treturn True \n\t\tif l==16: \n\t\t\treturn False \n\t\tif l==17: \n\t\t\treturn True \n\t\tif l==18: \n\t\t\treturn False \n\t\tif l==19: \n\t\t\treturn True \n\t\tif l==20: \n\t\t\treturn False \n\t\tif l==21: \n\t\t\treturn True \n\t\tif l==22: \n\t\t\treturn False \n\t\tif l==23: \n\t\t\treturn True \n\t\tif l==24: \n\t\t\treturn False \n\t\tif l==25: \n\t\t\treturn True \n\t\tif l==26: \n\t\t\treturn False \n\t\tif l==27: \n\t\t\treturn True \n\t\tif l==28: \n\t\t\treturn False \n\t\tif l==29: \n\t\t\treturn True \n\t\tif l==30: \n\t\t\treturn False \n\t\tif l==31: \n\t\t\treturn True \n\t\tif l==32: \n\t\t\treturn False \n\t\tif l==33: \n\t\t\treturn True \n\t\tif l==34: \n\t\t\treturn False \n\t\tif l==35: \n\t\t\treturn True \n\t\tif l==36: \n\t\t\treturn False \n\t\tif l"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t\t# code here\n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\tdict1 = {}\n\t\tdict2 = {}\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] in dict1:\n\t\t\t\tif dict1[str1[i]]!= str2[i]:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tdict1[str1[i]] = str2[i]\n\t\t\tif str2[i] in dict2:\n\t\t\t\tif dict2[str2[i]]!= str1[i]:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tdict2[str2[i]] = str1[i]\n\t\treturn True\n\nprint(is_Isomorphic(\"egg\",\"add\"))\nprint(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"abba\",\"bab\"))\nprint(is_Isomorphic(\"abba\",\"aba\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb\"))\nprint(is_Isomorphic(\"abba\",\"abbb"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t\tsum = 0\n\t\tfor i in numbers:\n\t\t\tsum += i\n\t\treturn sum/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))\nprint(sum_num([1,2,3,4,5,6]))\nprint(sum_num([1,2,3,4,5,6,7]))\nprint(sum_num([1,2,3,4,5,6,7,8]))\nprint(sum_num([1,2,3,4,5,6,7,8,9]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(sum_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(sum_num([1,2,3,4,5,6,7"}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t\treturn n & 1 == 1\n\nprint(is_odd(10))\nprint(is_odd(11))\nprint(is_odd(12))\nprint(is_odd(13))\nprint(is_odd(14))\nprint(is_odd(15))\nprint(is_odd(16))\nprint(is_odd(17))\nprint(is_odd(18))\nprint(is_odd(19))\nprint(is_odd(20))\nprint(is_odd(21))\nprint(is_odd(22))\nprint(is_odd(23))\nprint(is_odd(24))\nprint(is_odd(25))\nprint(is_odd(26))\nprint(is_odd(27))\nprint(is_odd(28))\nprint(is_odd(29))\nprint(is_odd(30))\nprint(is_odd(31))\nprint(is_odd(32))\nprint(is_odd(33))\nprint(is_odd(34))\nprint(is_odd(35))\nprint(is_odd(36))\nprint(is_odd(37))\nprint(is_odd(38))\nprint(is_odd(39))\nprint(is_odd(40))\nprint(is_odd(41))\nprint(is_odd(42))\nprint(is_odd(43))\nprint(is_odd(44))\nprint(is_odd(45))\nprint(is_odd(46))\nprint(is_odd(47))\nprint(is_odd(48))\nprint(is_odd(49))\nprint(is_odd(50))\nprint(is_odd(51))\nprint(is_odd(52))\nprint(is_odd(53))\nprint(is_odd(54))\nprint(is_odd(55))\nprint(is_odd(56))\nprint(is_odd(57))\nprint(is_odd(58))\nprint(is_odd(59))\nprint"}
{"ID": 287, "source": "MBPP:888", "prompt": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to multiply the elements of the given nested tuples.\n\"\"\"\ndef multiply_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to divide the elements of the given nested tuples.\n\"\"\"\ndef divide_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the maximum of the elements of the given nested tuples.\n\"\"\"\ndef max_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: max(x, y), test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the minimum of the elements of the given nested tuples.\n\"\"\"\ndef min_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: min(x, y), test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the sum of the elements of the given nested tuples.\n\"\"\"\ndef sum_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the product of the elements of the given nested tuples.\n\"\"\"\ndef product_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the absolute value of the elements of the given nested tuples.\n\"\"\"\ndef abs_elements(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: abs(x), test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the square root of the elements of the given nested tuples.\n\"\"\"\ndef sqrt_elements(test_tup1, test_tup2):\n\t"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\tfor i in range(len(lists)):\n\t\t\tlists[i].reverse()\n\t\treturn lists\n\n\"\"\"\nWrite a function to reverse a list of integers.\n\"\"\"\ndef reverse_list_integers(integers):\n\t\tfor i in range(len(integers)):\n\t\t\tintegers[i] = integers[i] * -1\n\t\treturn integers\n\n\"\"\"\nWrite a function to reverse a list of strings.\n\"\"\"\ndef reverse_list_strings(strings):\n\t\tfor i in range(len(strings)):\n\t\t\tstrings[i] = strings[i][::-1]\n\t\treturn strings\n\n\"\"\"\nWrite a function to reverse a list of tuples.\n\"\"\"\ndef reverse_list_tuples(tuples):\n\t\tfor i in range(len(tuples)):\n\t\t\ttuples[i] = tuple(reversed(tuples[i]))\n\t\treturn tuples\n\n\"\"\"\nWrite a function to reverse a list of dictionaries.\n\"\"\"\ndef reverse_list_dicts(dicts):\n\t\tfor i in range(len(dicts)):\n\t\t\tfor key in dicts[i]:\n\t\t\t\tdicts[i][key] = dicts[i][key][::-1]\n\t\treturn dicts\n\n\"\"\"\nWrite a function to reverse a list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\tfor i in range(len(lists)):\n\t\t\tlists[i] = reverse_list_lists(lists[i])\n\t\treturn lists\n\n\"\"\"\nWrite a function to reverse a list of integers.\n\"\"\"\ndef reverse_list_integers(integers):\n\t\tfor i in range(len(integers)):\n\t\t\tintegers[i] = integers[i] * -1\n\t\treturn integers\n\n\"\"\"\nWrite a function to reverse a list of strings.\n\"\"\"\ndef reverse_list_strings(strings):\n\t\tfor i in range(len(strings)):\n\t\t\tstrings[i] = strings[i][::-1]\n\t\treturn strings\n\n\"\"\"\nWrite a function to reverse a list of tuples.\n\"\"\"\ndef reverse_list_tuples(tuples):\n\t\tfor i in range(len(tuples)):\n\t\t\ttuples[i] = tuple(reversed(tuples[i]))\n\t\treturn tuples\n\n\"\"\"\nWrite a function to reverse a list of dictionaries.\n\"\"\"\ndef reverse_list_dicts(dicts):\n\t\tfor i in range"}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\tif len(A) == len(B): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\ndef same_Digits(A,B): \n\t\tif len(A) == len(B) and len(A) == len(str(A)): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\ndef main(): \n\tA = input(\"Enter the first number: \")\n\tB = input(\"Enter the second number: \")\n\tprint(\"The first number is\", A, \"and the second number is\", B)\n\tif same_Length(A,B) and same_Digits(A,B): \n\t\tprint(\"The two numbers have same length and digits\")\n\telse: \n\t\tprint(\"The two numbers have different length or digits\")\n\nif __name__ == \"__main__\": \n\tmain()<|endoftext|>"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t\treturn text.replace(\"  \", \" \")\n\nprint(remove_spaces(\"  hello world  \"))\nprint(remove_spaces(\"hello world\"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces(\"hello world  \"))\nprint(remove_spaces"}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn lst[-1]\n\ndef ExtractLast(lst): \n\t\treturn lst[-1]\n\ndef ExtractLast2(lst): \n\t\treturn lst[-2]\n\ndef ExtractLast3(lst): \n\t\treturn lst[-3]\n\ndef ExtractLast4(lst): \n\t\treturn lst[-4]\n\ndef ExtractLast5(lst): \n\t\treturn lst[-5]\n\ndef ExtractLast6(lst): \n\t\treturn lst[-6]\n\ndef ExtractLast7(lst): \n\t\treturn lst[-7]\n\ndef ExtractLast8(lst): \n\t\treturn lst[-8]\n\ndef ExtractLast9(lst): \n\t\treturn lst[-9]\n\ndef ExtractLast10(lst): \n\t\treturn lst[-10]\n\ndef ExtractLast11(lst): \n\t\treturn lst[-11]\n\ndef ExtractLast12(lst): \n\t\treturn lst[-12]\n\ndef ExtractLast13(lst): \n\t\treturn lst[-13]\n\ndef ExtractLast14(lst): \n\t\treturn lst[-14]\n\ndef ExtractLast15(lst): \n\t\treturn lst[-15]\n\ndef ExtractLast16(lst): \n\t\treturn lst[-16]\n\ndef ExtractLast17(lst): \n\t\treturn lst[-17]\n\ndef ExtractLast18(lst): \n\t\treturn lst[-18]\n\ndef ExtractLast19(lst): \n\t\treturn lst[-19]\n\ndef ExtractLast20(lst): \n\t\treturn lst[-20]\n\ndef ExtractLast21(lst): \n\t\treturn lst[-21]\n\ndef ExtractLast22(lst): \n\t\treturn lst[-22]\n\ndef ExtractLast23(lst): \n\t\treturn lst[-23]\n\ndef ExtractLast24(lst): \n\t\treturn lst[-24]\n\ndef ExtractLast25(lst): \n\t\treturn lst[-25]\n\ndef ExtractLast26(lst): \n\t\treturn lst[-26]\n\ndef ExtractLast27(lst): \n\t\treturn lst[-27]\n\ndef ExtractLast28(lst): \n\t\treturn lst[-28]\n\ndef ExtractLast29(lst): \n\t\treturn lst[-29]\n\ndef"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of integer type into tuple.\n\"\"\"\ndef int_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of string type into tuple.\n\"\"\"\ndef string_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of boolean type into tuple.\n\"\"\"\ndef bool_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of list type into tuple.\n\"\"\"\ndef list_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of dict type into tuple.\n\"\"\"\ndef dict_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of set type into tuple.\n\"\"\"\ndef set_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of tuple type into tuple.\n\"\"\"\ndef tuple_to_tuple(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str = tuple(test_str)\n\t\treturn test_str\n\n\"\"\"\nWrite a function to convert the given string of list type into list.\n\"\"\"\ndef list_to_list(test_str):\n\t\ttest_str = test_str.split()\n\t\ttest_str"}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t\t# Write your code here\n\t\tif len(A) == 0:\n\t\t\treturn 0\n\t\tif len(A) == 1:\n\t\t\treturn A[0]\n\t\tif len(A) == 2:\n\t\t\treturn max(A[0], A[1])\n\t\tmax_sum = A[0]\n\t\tfor i in range(1, len(A)):\n\t\t\tmax_sum = max(max_sum + A[i], A[i])\n\t\treturn max_sum\n\nprint(max_sum_subseq([1, 2, 3, 4, 5]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_sum_sub"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t\ttuples.sort(key=lambda x: x[-1])\n\t\treturn tuples\n\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last_2(tuples):\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\treturn tuples\n\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last_3(tuples):\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1])\n\t\treturn tuples\n\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last_4(tuples):\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1])\n\t\treturn tuples\n\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last_5(tuples):\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1])\n\t\treturn tuples\n\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last_6(tuples):\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True)\n\t\ttuples.sort(key=lambda x: x[-1], reverse=True"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(is_Word_Present(\"I love python\", \"python\"))\nprint(is_Word_Present(\"I love python\", \"love\"))\nprint(is_Word_Present(\"I love python\", \"pythoning\"))\nprint(is_Word_Present(\"I love python\", \"pythoninging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginginginginginging\"))\nprint(is_Word_Present(\"I love python\", \"pythoninginginginginginginginginginginginginginginginginging\"))\nprint"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t\t\"\"\"\n\t\t:param numbers: list of numbers\n\t\t:param n: number of elements to extract\n\t\t:return: list of extracted elements\n\t\t\"\"\"\n\t\treturn [numbers[i] for i in range(n) if i % 2 == 0]\n\ndef test_extract_elements():\n\tassert extract_elements([1, 2, 3, 4, 5], 2) == [2, 4]\n\tassert extract_elements([1, 2, 3, 4, 5], 3) == [3, 5]\n\tassert extract_elements([1, 2, 3, 4, 5], 4) == [4, 5]\n\tassert extract_elements([1, 2, 3, 4, 5], 5) == [5]\n\tassert extract_elements([1, 2, 3, 4, 5], 6) == []\n\tassert extract_elements([1, 2, 3, 4, 5], 0) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -1) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -2) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -3) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -4) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -5) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -6) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -7) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -8) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -9) == []\n\tassert extract_elements([1, 2, 3, 4, 5], -10) == []\n\tassert extract_elements([1, 2"}
{"ID": 298, "source": "MBPP:899", "prompt": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t\tif n==1:\n\t\t\treturn True\n\t\tif arr[0]>arr[n-1]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-2]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-3]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-4]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-5]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-6]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-7]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-8]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-9]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-10]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-11]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-12]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-13]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-14]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-15]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-16]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-17]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-18]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-19]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-20]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-21]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-22]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-23]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-24]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-25]:\n\t\t\treturn False\n\t\tif arr[n-1]>arr[n-"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t\treturn string.startswith(str(num))\n\n# Test\nnum = 10\nprint(match_num(\"100\"))\nprint(match_num(\"101\"))\nprint(match_num(\"102\"))\nprint(match_num(\"103\"))\nprint(match_num(\"104\"))\nprint(match_num(\"105\"))\nprint(match_num(\"106\"))\nprint(match_num(\"107\"))\nprint(match_num(\"108\"))\nprint(match_num(\"109\"))\nprint(match_num(\"110\"))\nprint(match_num(\"111\"))\nprint(match_num(\"112\"))\nprint(match_num(\"113\"))\nprint(match_num(\"114\"))\nprint(match_num(\"115\"))\nprint(match_num(\"116\"))\nprint(match_num(\"117\"))\nprint(match_num(\"118\"))\nprint(match_num(\"119\"))\nprint(match_num(\"120\"))\nprint(match_num(\"121\"))\nprint(match_num(\"122\"))\nprint(match_num(\"123\"))\nprint(match_num(\"124\"))\nprint(match_num(\"125\"))\nprint(match_num(\"126\"))\nprint(match_num(\"127\"))\nprint(match_num(\"128\"))\nprint(match_num(\"129\"))\nprint(match_num(\"130\"))\nprint(match_num(\"131\"))\nprint(match_num(\"132\"))\nprint(match_num(\"133\"))\nprint(match_num(\"134\"))\nprint(match_num(\"135\"))\nprint(match_num(\"136\"))\nprint(match_num(\"137\"))\nprint(match_num(\"138\"))\nprint(match_num(\"139\"))\nprint(match_num(\"140\"))\nprint(match_num(\"141\"))\nprint(match_num(\"142\"))\nprint(match_num(\"143\"))\nprint(match_num(\"1"}
{"ID": 300, "source": "MBPP:901", "prompt": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t\treturn 1\n\nprint(smallest_multiple(10))\n<|endoftext|>"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t\td = {}\n\t\tfor k in d1.keys():\n\t\t\tif k in d2.keys():\n\t\t\t\td[k] = d1[k] + d2[k]\n\t\t\telse:\n\t\t\t\td[k] = d1[k]\n\t\treturn d\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\tif len(strs) == 1:\n\t\treturn strs[0]\n\tif len(strs) == 2:\n\t\treturn strs[0] if strs[0] == strs[1] else \"\"\n\tif len(strs) == 3:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] else \"\"\n\tif len(strs) == 4:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] else \"\"\n\tif len(strs) == 5:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] else \"\"\n\tif len(strs) == 6:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] else \"\"\n\tif len(strs) == 7:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] and strs[5] == strs[6] else \"\"\n\tif len(strs) == 8:\n\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] =="}
{"ID": 302, "source": "MBPP:903", "prompt": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t\tcount = 0\n\t\twhile n!= 0 :\n\t\t\tn = n & (n-1)\n\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Unset_Bits(10))\n<|endoftext|>"}
{"ID": 303, "source": "MBPP:904", "prompt": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t", "predict": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t\tif x % 2 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(even_num(10))\nprint(even_num(11))\nprint(even_num(12))\nprint(even_num(13))\nprint(even_num(14))\nprint(even_num(15))\nprint(even_num(16))\nprint(even_num(17))\nprint(even_num(18))\nprint(even_num(19))\nprint(even_num(20))\nprint(even_num(21))\nprint(even_num(22))\nprint(even_num(23))\nprint(even_num(24))\nprint(even_num(25))\nprint(even_num(26))\nprint(even_num(27))\nprint(even_num(28))\nprint(even_num(29))\nprint(even_num(30))\nprint(even_num(31))\nprint(even_num(32))\nprint(even_num(33))\nprint(even_num(34))\nprint(even_num(35))\nprint(even_num(36))\nprint(even_num(37))\nprint(even_num(38))\nprint(even_num(39))\nprint(even_num(40))\nprint(even_num(41))\nprint(even_num(42))\nprint(even_num(43))\nprint(even_num(44))\nprint(even_num(45))\nprint(even_num(46))\nprint(even_num(47))\nprint(even_num(48))\nprint(even_num(49))\nprint(even_num(50))\nprint(even_num(51))\nprint(even_num(52))\nprint(even_num(53))\nprint(even_num(54))\nprint(even_num(55))\nprint(even_num(56))\nprint(even_num(57))\nprint(even_num(58"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t\treturn n*(n+1)/2\n\ndef sum_of_squares(n): \n\t\treturn n*(n+1)\n\ndef sum_of_squares_binomial(n): \n\t\treturn n*(n+1)*(2*n+1)/6\n\ndef sum_of_squares_binomial_coeff(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)/24\n\ndef sum_of_squares_binomial_coeff_2(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)/120\n\ndef sum_of_squares_binomial_coeff_3(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)*(2*n+4)/720\n\ndef sum_of_squares_binomial_coeff_4(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)*(2*n+4)*(2*n+5)/5040\n\ndef sum_of_squares_binomial_coeff_5(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)*(2*n+4)*(2*n+5)*(2*n+6)/40320\n\ndef sum_of_squares_binomial_coeff_6(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)*(2*n+4)*(2*n+5)*(2*n+6)*(2*n+7)/362880\n\ndef sum_of_squares_binomial_coeff_7(n): \n\t\treturn n*(n+1)*(2*n+1)*(2*n+2)*(2*n+3)*(2*n+4)*(2*n+5)*(2*n+6)*(2*n+7)*(2*n+8)/3628800\n\ndef sum_of_squares_binomial_coeff_8(n): \n\t\treturn n*(n+1"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t\t\"\"\"\n\t\t:param url: url to extract date from\n\t\t:return: year, month and date\n\t\t\"\"\"\n\t\tyear = re.search(r'\\d{4}', url).group()\n\t\tmonth = re.search(r'\\d{2}', url).group()\n\t\tdate = re.search(r'\\d{2}', url).group()\n\t\treturn year, month, date\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date_from_url(url):\n\t\t\"\"\"\n\t\t:param url: url to extract date from\n\t\t:return: year, month and date\n\t\t\"\"\"\n\t\tyear = re.search(r'\\d{4}', url).group()\n\t\tmonth = re.search(r'\\d{2}', url).group()\n\t\tdate = re.search(r'\\d{2}', url).group()\n\t\treturn year, month, date\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date_from_url_with_year(url):\n\t\t\"\"\"\n\t\t:param url: url to extract date from\n\t\t:return: year, month and date\n\t\t\"\"\"\n\t\tyear = re.search(r'\\d{4}', url).group()\n\t\tmonth = re.search(r'\\d{2}', url).group()\n\t\tdate = re.search(r'\\d{2}', url).group()\n\t\treturn year, month, date\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date_from_url_with_year_and_month(url):\n\t\t\"\"\"\n\t\t:param url: url to extract date from\n\t\t:return: year, month and date\n\t\t\"\"\"\n\t\tyear = re.search(r'\\d{4}', url).group()\n\t\tmonth = re.search(r'\\d{2}', url).group()\n\t\tdate = re.search(r'\\d{2}', url).group()\n\t\treturn year, month, date\n\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date_from_url_with_year_and_month"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t\tfor i in range(n):\n\t\t\tprint(i+1)\nlucky_num(5)\n<|endoftext|>"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point_2(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point_3(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point_4(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point_5(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point_6(arr, n): \n\t\t# Write your code here\n\t\t# Find the first element that is not a multiple of 2\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2!= 0:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\tif num < 0:\n\t\t\treturn 0\n\t\telif num == 0:\n\t\t\treturn 0\n\t\telif num == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn previous_palindrome(num-1) + num\n\nprint(previous_palindrome(12345))\nprint(previous_palindrome(123456))\nprint(previous_palindrome(1234567))\nprint(previous_palindrome(12345678))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome(1234567890123456789012))\nprint(previous_palindrome(12345678901234567890123))\nprint(previous_palindrome(1234567890"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\tif m < 1 or m > 12:\n\t\t\treturn False\n\t\tif d < 1 or d > 31:\n\t\t\treturn False\n\t\tif y < 1 or y > 9999:\n\t\t\treturn False\n\t\treturn True\n\ndef main():\n\tm = int(input(\"Enter month: \"))\n\td = int(input(\"Enter day: \"))\n\ty = int(input(\"Enter year: \"))\n\tif check_date(m, d, y):\n\t\tprint(\"Date is valid\")\n\telse:\n\t\tprint(\"Date is invalid\")\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t\theap = []\n\t\tfor i in range(len(nums)):\n\t\t\theap.append(nums[i])\n\t\tmax_product = nums[0] * nums[1] * nums[2]\n\t\tfor i in range(len(nums)-2, -1, -1):\n\t\t\tif len(heap) > 0:\n\t\t\t\tif nums[i] * heap[0] > max_product:\n\t\t\t\t\tmax_product = nums[i] * heap[0]\n\t\t\t\theap[0] = heap.pop()\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn max_product\n\nprint(maximum_product([1,2,3,4,5]))\nprint(maximum_product([1,2,3,4,5,6]))\nprint(maximum_product([1,2,3,4,5,6,7]))\nprint(maximum_product([1,2,3,4,5,6,7,8]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(maximum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(maximum_product([1,2,3,4,5"}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a function to find the number of lobb numbers.\n\"\"\"\n)\n\nprint(\n\"\"\"\nWrite a"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t\tif string[-1].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the beginning of a string.\n\"\"\"\ndef start_num(string):\n\t\tif string[0].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num_2(string):\n\t\tif string[-1].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the beginning of a string.\n\"\"\"\ndef start_num_2(string):\n\t\tif string[0].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num_3(string):\n\t\tif string[-1].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the beginning of a string.\n\"\"\"\ndef start_num_3(string):\n\t\tif string[0].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num_4(string):\n\t\tif string[-1].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the beginning of a string.\n\"\"\"\ndef start_num_4(string):\n\t\tif string[0].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num_5(string):\n\t\tif string[-1].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the beginning of a string.\n\"\"\"\ndef start_num_5(string):\n\t\tif string[0].isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t\tif len(s) % 2 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(is_Two_Alter(\"ab\"))\nprint(is_Two_Alter(\"abbb\"))\nprint(is_Two_Alter(\"abbbccc\"))\nprint(is_Two_Alter(\"abbbcccdd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\nprint(is_Two_Alter(\"abbbcccddddd\"))\n"}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t\treturn [lambda x: x if x > 0 else -x for x in array_nums]\n\nprint(rearrange_numbs([-1, 2, 3, 4, 5]))\nprint(rearrange_numbs([1, 2, 3, 4, 5]))\nprint(rearrange_numbs([1, -2, 3, 4, 5]))\nprint(rearrange_numbs([1, 2, -3, 4, 5]))\nprint(rearrange_numbs([1, 2, 3, -4, 5]))\nprint(rearrange_numbs([1, 2, 3, 4, -5]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, -6]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, -7]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, -8]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, -9]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7,"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t\t# Write your code here\n\t\tfor i in range(arr_size):\n\t\t\tfor j in range(i+1, arr_size):\n\t\t\t\tfor k in range(j+1, arr_size):\n\t\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array_2(A, arr_size, sum): \n\t\t# Write your code here\n\t\tfor i in range(arr_size):\n\t\t\tfor j in range(i+1, arr_size):\n\t\t\t\tfor k in range(j+1, arr_size):\n\t\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array_3(A, arr_size, sum): \n\t\t# Write your code here\n\t\tfor i in range(arr_size):\n\t\t\tfor j in range(i+1, arr_size):\n\t\t\t\tfor k in range(j+1, arr_size):\n\t\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array_4(A, arr_size, sum): \n\t\t# Write your code here\n\t\tfor i in range(arr_size):\n\t\t\tfor j in range(i+1, arr_size):\n\t\t\t\tfor k in range(j+1, arr_size):\n\t\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array_5(A, arr_size, sum): \n\t\t# Write your code here\n\t\tfor i in range(arr_size):\n\t\t\tfor j in range("}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t\treturn [text[i:i+2] for i in range(len(text)-1) if text[i] == text[i+1] and text[i] == text[i+1].upper()]\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tfor i in range(len(strs[0])):\n\t\t\t\tfor j in range(1, len(strs)):\n\t\t\t\t\t\tif strs[j][i]!= strs[0][i]:\n\t\t\t\t\t\t\t\treturn strs[0][:i]\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tfor i in range(len(strs[0])):\n\t\t\t\tfor j in range(1, len(strs)):\n\t\t\t\t\t\tif strs[j][i]!= strs[0][i]:\n\t\t\t\t\t\t\t\treturn strs[0][i+1:]\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\t\tif len(str1) == 0 or len(str2) == 0:\n\t\t\t\treturn \"\"\n\t\tif str1[0] == str2[0]:\n\t\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\telse:\n\t\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tfor"}
{"ID": 317, "source": "MBPP:918", "prompt": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t", "predict": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\t\"\"\"\n\t\t:type S: List[int]\n\t\t:type m: int\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tcoins = [0] * (n+1)\n\t\tcoins[0] = 1\n\t\tfor i in range(1, n+1):\n\t\t\tfor j in range(m, i-1, -1):\n\t\t\t\tif S[j-1] <= i:\n\t\t\t\t\tcoins[i] += coins[j-1]\n\t\treturn coins[n] if coins[n] <= m else -1\n\n\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\t\"\"\"\n\t\t:type S: List[int]\n\t\t:type m: int\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tcoins = [0] * (n+1)\n\t\tcoins[0] = 1\n\t\tfor i in range(1, n+1):\n\t\t\tfor j in range(m, i-1, -1):\n\t\t\t\tif S[j-1] <= i:\n\t\t\t\t\tcoins[i] += coins[j-1]\n\t\treturn coins[n] if coins[n] <= m else -1\n\n\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\t\"\"\"\n\t\t:type S: List[int]\n\t\t:type m: int\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tcoins = [0] * (n+1)\n\t\tcoins[0] = 1\n\t\tfor i in range(1, n+1):\n\t\t\tfor j in range(m, i-1, -1):\n\t\t\t\tif S[j-1] <= i:\n\t\t\t\t\tcoins[i] += coins[j-1]\n\t\treturn coins[n] if coins[n] <= m else -1\n\n\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t\t\"\"\"\n\t\t:type S: List[int]\n\t\t:type m: int\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tcoins = [0] * (n+1"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t\treturn [item * 2 for item in items]\n\nprint(multiply_list([1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"ID": 319, "source": "MBPP:920", "prompt": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(len(test_list[i])):\n\t\t\t\tif test_list[i][j] == None:\n\t\t\t\t\ttest_list[i].pop(j)\n\t\treturn test_list\n\nprint(remove_tuple([[1,2,3],[4,5,6],[7,8,9]]))\n<|endoftext|>"}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:param N: int\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\treturn [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n\"\"\"\nWrite a function to find the longest common prefix of two strings.\n\"\"\"\ndef longest_common_prefix(s1, s2):\n\t\t\"\"\"\n\t\t:param s1: str\n\t\t:param s2: str\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(s1) < len(s2):\n\t\t\t\treturn longest_common_prefix(s2, s1)\n\t\tfor i in range(len(s1)):\n\t\t\t\tif s1[i]!= s2[i]:\n\t\t\t\t\t\treturn s1[:i]\n\t\treturn s1\n\n\"\"\"\nWrite a function to find the longest common suffix of two strings.\n\"\"\"\ndef longest_common_suffix(s1, s2):\n\t\t\"\"\"\n\t\t:param s1: str\n\t\t:param s2: str\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(s1) < len(s2):\n\t\t\t\treturn longest_common_suffix(s2, s1)\n\t\tfor i in range(len(s1)):\n\t\t\t\tif s1[i]!= s2[i]:\n\t\t\t\t\t\treturn s1[i+1:]\n\t\treturn s1\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence(s1, s2):\n\t\t\"\"\"\n\t\t:param s1: str\n\t\t:param s2: str\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(s1) < len(s2):\n\t\t\t\treturn longest_common_subsequence(s2, s1)\n\t\tfor i in range(len(s1)):\n\t\t\t\tif s1[i]!= s2[i]:\n\t\t\t\t\t\treturn s1[i+1:]\n\t\treturn s1\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence_v2(s1, s2):\n\t\t\"\"\"\n\t\t:param s1: str\n\t\t:param s2: str\n\t\t:"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t\tmax_product = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tproduct = arr[i] * arr[j]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t\t# Write your code here\n\t\tif m == 0 or n == 0:\n\t\t\treturn 0\n\t\tif X[m-1] == Y[n-1]:\n\t\t\treturn 1 + super_seq(X, Y, m-1, n-1)\n\t\telse:\n\t\t\treturn 1 + min(super_seq(X, Y, m-1, n), super_seq(X, Y, m, n-1))\n\ndef super_seq_2(X, Y, m, n):\n\t\t# Write your code here\n\t\tif m == 0 or n == 0:\n\t\t\treturn 0\n\t\tif X[m-1] == Y[n-1]:\n\t\t\treturn 1 + super_seq_2(X, Y, m-1, n-1)\n\t\telse:\n\t\t\treturn 1 + min(super_seq_2(X, Y, m-1, n), super_seq_2(X, Y, m, n-1))\n\ndef super_seq_3(X, Y, m, n):\n\t\t# Write your code here\n\t\tif m == 0 or n == 0:\n\t\t\treturn 0\n\t\tif X[m-1] == Y[n-1]:\n\t\t\treturn 1 + super_seq_3(X, Y, m-1, n-1)\n\t\telse:\n\t\t\treturn 1 + min(super_seq_3(X, Y, m-1, n), super_seq_3(X, Y, m, n-1))\n\ndef super_seq_4(X, Y, m, n):\n\t\t# Write your code here\n\t\tif m == 0 or n == 0:\n\t\t\treturn 0\n\t\tif X[m-1] == Y[n-1]:\n\t\t\treturn 1 + super_seq_4(X, Y, m-1, n-1)\n\t\telse:\n\t\t\treturn 1 + min(super_seq_4(X, Y, m-1, n), super_seq_4(X, Y, m, n-1))\n\ndef super_seq_5(X, Y, m, n):\n\t\t# Write your code here\n\t\tif m == 0 or"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t\treturn max( x, y )\n\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_two( 1, 2 ) )\nprint( max_of_"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t\treturn reduce(lambda x,y: x*y, nums)\n\nprint(mutiple_tuple((1,2,3,4,5)))\n<|endoftext|>"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\t\"\"\"\n\t\tWrite a function to find n-th rencontres number.\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telif n == 2:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn (n * (n + 1)) / 2\n\nprint(rencontres_number(1, 1))\nprint(rencontres_number(2, 1))\nprint(rencontres_number(3, 1))\nprint(rencontres_number(4, 1))\nprint(rencontres_number(5, 1))\nprint(rencontres_number(6, 1))\nprint(rencontres_number(7, 1))\nprint(rencontres_number(8, 1))\nprint(rencontres_number(9, 1))\nprint(rencontres_number(10, 1))\nprint(rencontres_number(11, 1))\nprint(rencontres_number(12, 1))\nprint(rencontres_number(13, 1))\nprint(rencontres_number(14, 1))\nprint(rencontres_number(15, 1))\nprint(rencontres_number(16, 1))\nprint(rencontres_number(17, 1))\nprint(rencontres_number(18, 1))\nprint(rencontres_number(19, 1))\nprint(rencontres_number(20, 1))\nprint(rencontres_number(21, 1))\nprint(rencontres_number(22, 1))\nprint(rencontres_number(23, 1))\nprint(rencontres_number(24, 1))\nprint(rencontres_number(25, 1))\nprint(rencontres_number(26, 1))\nprint(rencontres_number(27, 1))\nprint(rencontres_number(28, 1))\nprint(rencontres_number(29, 1))\nprint(rencontres_number(30, 1))\nprint(rencont"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None \n\t\tself.right = None \n\ndef height(self): \n\t\tif self.left == None and self.right == None: \n\t\t\t\treturn 0 \n\t\telif self.left == None: \n\t\t\t\treturn 1 + height(self.right) \n\t\telif self.right == None: \n\t\t\t\treturn 1 + height(self.left) \n\t\telse: \n\t\t\t\treturn 1 + max(height(self.left), height(self.right)) \n\ndef height_iterative(self): \n\t\tif self.left == None and self.right == None: \n\t\t\t\treturn 0 \n\t\telif self.left == None: \n\t\t\t\treturn 1 + height_iterative(self.right) \n\t\telif self.right == None: \n\t\t\t\treturn 1 + height_iterative(self.left) \n\t\telse: \n\t\t\t\treturn 1 + max(height_iterative(self.left), height_iterative(self.right)) \n\ndef height_recursive(self): \n\t\tif self.left == None and self.right == None: \n\t\t\t\treturn 0 \n\t\telif self.left == None: \n\t\t\t\treturn 1 + height_recursive(self.right) \n\t\telif self.right == None: \n\t\t\t\treturn 1 + height_recursive(self.left) \n\t\telse: \n\t\t\t\treturn 1 + max(height_recursive(self.left), height_recursive(self.right)) \n\ndef height_iterative_2(self): \n\t\tif self.left == None and self.right == None: \n\t\t\t\treturn 0 \n\t\telif self.left == None: \n\t\t\t\treturn 1 + height_iterative_2(self.right) \n\t\telif self.right == None: \n\t\t\t\treturn 1 + height_iterative_2(self.left) \n\t\telse: \n\t\t\t\treturn 1 + max(height_iterative_2(self.left), height_iterative_2(self.right)) \n\ndef height_recursive_2(self): \n\t\tif self.left == None and self.right == None: \n\t\t\t\treturn 0 \n\t\telif self.left == None: \n\t\t\t\treturn 1 + height_recursive_2(self.right) \n\t\telif self.right == None: \n\t\t\t\treturn 1"}
{"ID": 327, "source": "MBPP:928", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.\n\"\"\"\ndef change_date_format_reverse(dt):\n\t\treturn dt.strftime(\"%Y-%m-%d\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_2(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_3(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_4(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_5(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_6(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_7(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_8(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format_reverse_9(dt):\n\t\treturn dt.strftime(\"%d-%m-%Y\")\n\n\"\"\"\nWrite a function"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t\tcount = 0\n\t\tfor i in tuplex:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10),10))\n\n\"\"\"\nWrite a function to count the number of times a value appears in a list.\n\"\"\"\ndef count_list(listx,value):\n\t\tcount = 0\n\t\tfor i in listx:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_list([1,2,3,4,5,6,7,8,9,10],10))\n\n\"\"\"\nWrite a function to count the number of times a value appears in a dictionary.\n\"\"\"\ndef count_dict(dictx,value):\n\t\tcount = 0\n\t\tfor i in dictx:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10},10))\n\n\"\"\"\nWrite a function to count the number of times a value appears in a set.\n\"\"\"\ndef count_set(setx,value):\n\t\tcount = 0\n\t\tfor i in setx:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_set({'a','b','c','d','e','f','g','h','i','j'},10))\n\n\"\"\"\nWrite a function to count the number of times a value appears in a string.\n\"\"\"\ndef count_string(stringx,value):\n\t\tcount = 0\n\t\tfor i in stringx:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_string('abcde',10))\n\n\"\"\"\nWrite a function to count the number of times a value appears in a list.\n\"\"\"\ndef count_listx(listx,value):\n\t\tcount = 0\n\t\tfor i in listx:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t\tsum = 0\n\t\tfor i in range(1, number+1):\n\t\t\tsum += i**3\n\t\treturn sum\n\nprint(sum_series(10))\n<|endoftext|>"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t\tl = list(set(l))\n\t\treturn l\n\ndef remove_duplic_list_v2(l):\n\t\tl = list(set(l))\n\t\tl.sort()\n\t\treturn l\n\ndef remove_duplic_list_v3(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\treturn l\n\ndef remove_duplic_list_v4(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\treturn l\n\ndef remove_duplic_list_v5(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\tl.sort(key=l.index)\n\t\treturn l\n\ndef remove_duplic_list_v6(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\treturn l\n\ndef remove_duplic_list_v7(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\treturn l\n\ndef remove_duplic_list_v8(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t\treturn l\n\ndef remove_duplic_list_v9(l):\n\t\tl = list(set(l))\n\t\tl.sort(key=l.index)\n\t\tl.reverse()\n\t\tl.sort(key=l.index)\n\t\tl.sort(key=l.index)\n\t"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\"\"\"\nWrite a function to convert snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(text):\n\t\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence_with_underscores(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_dashes(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '-', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_dashes_and_underscores(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case by using regex.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_dashes_and_underscores_and_spaces(text):\n\t\treturn re.sub("}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\telif n == 2: \n\t\t\treturn 2\n\t\telse: \n\t\t\treturn (dealnnoy_num(n-1, m) + dealnnoy_num(n-2, m)) % m\n\nprint(dealnnoy_num(10, 1000000007))\n<|endoftext|>"}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t\tsum = 0\n\t\tfor i in range(1, number+1):\n\t\t\tsum += i**2\n\t\treturn sum\n\nprint(series_sum(10))\n<|endoftext|>"}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t\t\"\"\"\n\t\t:param test_list: list of tuples\n\t\t:param ord_list: list of tuples\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\treturn [test_list[i] for i in ord_list]\n\ndef test_re_arrange_tuples():\n\ttest_list = [(1,2,3),(4,5,6),(7,8,9)]\n\tord_list = [(0,1,2),(3,4,5),(6,7,8)]\n\tassert re_arrange_tuples(test_list, ord_list) == [(1,2,3),(4,5,6),(7,8,9)]\n\ndef test_re_arrange_tuples_2():\n\ttest_list = [(1,2,3),(4,5,6),(7,8,9)]\n\tord_list = [(0,1,2),(3,4,5),(6,7,8)]\n\tassert re_arrange_tuples(test_list, ord_list) == [(1,2,3),(4,5,6),(7,8,9)]\n\ndef test_re_arrange_tuples_3():\n\ttest_list = [(1,2,3),(4,5,6),(7,8,9)]\n\tord_list = [(0,1,2),(3,4,5),(6,7,8)]\n\tassert re_arrange_tuples(test_list, ord_list) == [(1,2,3),(4,5,6),(7,8,9)]\n\ndef test_re_arrange_tuples_4():\n\ttest_list = [(1,2,3),(4,5,6),(7,8,9)]\n\tord_list = [(0,1,2),(3,4,5),(6,7,8)]\n\tassert re_arrange_tuples(test_list, ord_list) == [(1,2,3),(4,5,6),(7,8,9)]\n\ndef test_re_arrange_tuples_5():\n\ttest_list = [(1,2,3),(4,5,6),(7,8,9)]\n\tord_list = [(0,1,2),(3,4,5),(6,7,8"}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t\tchar_count = {}\n\t\tfor char in str1:\n\t\t\tif char in char_count:\n\t\t\t\tchar_count[char] += 1\n\t\t\telse:\n\t\t\t\tchar_count[char] = 1\n\t\treturn max(char_count, key=char_count.get)\n\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_char(\"abccba\"))\nprint(max_"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t\t# Write your code here\n\t\tif A[p] > B[q] and A[p] > C[r]:\n\t\t\treturn A[p]\n\t\telif B[p] > A[q] and B[p] > C[r]:\n\t\t\treturn B[p]\n\t\telse:\n\t\t\treturn C[r]\n\ndef main():\n\tA = [1, 2, 3, 4, 5]\n\tB = [2, 4, 6, 8, 10]\n\tC = [3, 5, 7, 9, 11]\n\tprint(find_closet(A, B, C, 0, 1, 2))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t\treturn sorted(models, key=lambda x: x['name'])\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_2(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_3(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_4(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_5(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_6(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_7(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_8(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_9(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_10(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_11(models):\n\t\treturn sorted(models, key=lambda x: x['name'].lower())\n\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models_"}
{"ID": 339, "source": "MBPP:940", "prompt": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t\tn = len(arr)\n\t\tfor i in range(n//2, -1, -1):\n\t\t\theapify(arr, n, i)\n\t\tfor i in range(n-1, 0, -1):\n\t\t\tarr[0], arr[i] = arr[i], arr[0]\n\t\t\theapify(arr, i, 0)\n\ndef heapify(arr, n, i):\n\tlargest = i\n\tl = 2*i + 1\n\tr = 2*i + 2\n\tif l < n and arr[l] > arr[largest]:\n\t\tlargest = l\n\tif r < n and arr[r] > arr[largest]:\n\t\tlargest = r\n\tif largest!= i:\n\t\tarr[i], arr[largest] = arr[largest], arr[i]\n\t\theapify(arr, n, largest)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nheap_sort(arr)\nprint(arr)<|endoftext|>"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t\tcount = 0\n\t\tfor i in num:\n\t\t\tif type(i) == tuple:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_elim([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_2(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_3(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_4(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_5(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_6(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_7(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_8(test_tup, check_list):\n\t\tfor element in check_list:\n\t\t\tif element in test_tup:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element_9(test_tup, check_list):\n\t"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t\theapq.heapify(num1)\n\t\theapq.heapify(num2)\n\t\tresult = []\n\t\twhile num1 and num2:\n\t\t\tif num1[0] < num2[0]:\n\t\t\t\tresult.append(num1.pop(0))\n\t\t\telse:\n\t\t\t\tresult.append(num2.pop(0))\n\t\tresult.extend(num1)\n\t\tresult.extend(num2)\n\t\treturn result\n\ndef main():\n\tnum1 = [1,2,3,4,5,6,7,8,9,10]\n\tnum2 = [11,12,13,14,15,16,17,18,19,20]\n\tprint(combine_lists(num1,num2))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 343, "source": "MBPP:944", "prompt": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t", "predict": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of tuples\n\t\t\"\"\"\n\t\ttext = text.split()\n\t\treturn [(i, text.index(i)) for i in text]\n\nprint(num_position(\"The quick brown fox jumps over the lazy dog\"))\n<|endoftext|>"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t\treturn set(t)\n\n\"\"\"\nWrite a function to convert the given list into set.\n\"\"\"\ndef list_to_set(l):\n\t\treturn set(l)\n\n\"\"\"\nWrite a function to convert the given dictionary into set.\n\"\"\"\ndef dict_to_set(d):\n\t\treturn set(d.items())\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict(s)\n\n\"\"\"\nWrite a function to convert the given set into tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict(s)\n\n\"\"\"\nWrite a function to convert the given set into tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict(s)\n\n\"\"\"\nWrite a function to convert the given set into tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(s)\n\n\"\"\"\nWrite a function to convert the given set into dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict(s)\n\n\"\"\"\nWrite a function to convert the given set into tuple.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t\t# Create a dictionary to store the most common elements and their counts\n\t\tmost_common = {}\n\t\t# Create a list to store the most common elements\n\t\tmost_common_list = []\n\t\t# Create a list to store the counts of the most common elements\n\t\tmost_common_count = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict = {}\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict = {}\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict = {}\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict_list_dict = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict_list_dict_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict_list_dict_list_dict = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem_count_dict_list_dict_list_dict_list_dict_list_dict_list = []\n\t\t# Create a list to store the most common elements and their counts\n\t\tmost_common_elem"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t\treturn len(min(list1, key=len))\n\nprint(len_log(list1))\n<|endoftext|>"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\treturn tup1[index]\n\n\"\"\"\nWrite a function to get the length of a tuple.\n\"\"\"\ndef get_length(tup1):\n\t\treturn len(tup1)\n\n\"\"\"\nWrite a function to get the first element of a tuple.\n\"\"\"\ndef get_first(tup1):\n\t\treturn tup1[0]\n\n\"\"\"\nWrite a function to get the last element of a tuple.\n\"\"\"\ndef get_last(tup1):\n\t\treturn tup1[-1]\n\n\"\"\"\nWrite a function to get the middle element of a tuple.\n\"\"\"\ndef get_middle(tup1):\n\t\treturn tup1[len(tup1)//2]\n\n\"\"\"\nWrite a function to get the tuple with the largest element.\n\"\"\"\ndef get_largest(tup1):\n\t\treturn max(tup1)\n\n\"\"\"\nWrite a function to get the tuple with the smallest element.\n\"\"\"\ndef get_smallest(tup1):\n\t\treturn min(tup1)\n\n\"\"\"\nWrite a function to get the tuple with the largest element.\n\"\"\"\ndef get_largest_index(tup1):\n\t\treturn tup1.index(max(tup1))\n\n\"\"\"\nWrite a function to get the tuple with the smallest element.\n\"\"\"\ndef get_smallest_index(tup1):\n\t\treturn tup1.index(min(tup1))\n\n\"\"\"\nWrite a function to get the tuple with the largest element.\n\"\"\"\ndef get_largest_value(tup1):\n\t\treturn max(tup1)\n\n\"\"\"\nWrite a function to get the tuple with the smallest element.\n\"\"\"\ndef get_smallest_value(tup1):\n\t\treturn min(tup1)\n\n\"\"\"\nWrite a function to get the tuple with the largest element.\n\"\"\"\ndef get_largest_index_value(tup1):\n\t\treturn tup1.index(max(tup1))\n\n\"\"\"\nWrite a function to get the tuple with the smallest element.\n\"\"\"\ndef get_smallest_index_value(tup1):\n\t\treturn tup1.index(min(tup1))\n\n\"\"\"\nWrite a function to get the tuple with the largest element.\n\"\"\"\ndef get_largest_value_index(tup1):\n\t\treturn tup1.index(max(tup1))\n"}
{"ID": 348, "source": "MBPP:949", "prompt": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_2(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_3(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_4(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_5(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_6(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_7(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_8(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list_9(test_list):\n\t\ttest_list.sort(key=lambda x: len(str(x)))\n\t\treturn test_list\n\n\"\"\"\nWrite a function to sort the given tuple list basis the total"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t\tif year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n\t\t\treturn \"水瓶座\"\n\t\telif year % 100 == 0:\n\t\t\treturn \"双鱼座\"\n\t\telif year % 4 == 0:\n\t\t\treturn \"白羊座\"\n\t\telif year % 10 == 0:\n\t\t\treturn \"金牛座\"\n\t\telif year % 40 == 0:\n\t\t\treturn \"双子座\"\n\t\telif year % 100 == 0:\n\t\t\treturn \"巨蟹座\"\n\t\telif year % 400 == 0:\n\t\t\treturn \"狮子座\"\n\t\telse:\n\t\t\treturn \"天秤座\"\n\nprint(chinese_zodiac(2019))\n<|endoftext|>"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: the maximum of similar indices in two lists of tuples\n\t\t\"\"\"\n\t\tmax_index = 0\n\t\tmax_value = 0\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i] == test_list2[j]:\n\t\t\t\t\tif i > max_index:\n\t\t\t\t\t\tmax_index = i\n\t\t\t\t\t\tmax_value = test_list1[i]\n\t\treturn max_index, max_value\n\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices_2(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: the maximum of similar indices in two lists of tuples\n\t\t\"\"\"\n\t\tmax_index = 0\n\t\tmax_value = 0\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i] == test_list2[j]:\n\t\t\t\t\tif i > max_index:\n\t\t\t\t\t\tmax_index = i\n\t\t\t\t\t\tmax_value = test_list1[i]\n\t\treturn max_index, max_value\n\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices_3(test_list1, test_list2):\n\t\t\"\"\"\n\t\t:param test_list1: list of tuples\n\t\t:param test_list2: list of tuples\n\t\t:return: the maximum of similar indices in two lists of tuples\n\t\t\"\"\"\n\t\tmax_index = 0\n\t\tmax_value = 0\n\t\tfor i in range(len(test_list1)):\n\t\t\tfor j in range(len(test_list2)):\n\t\t\t\tif test_list1[i] == test_list2[j]:\n\t\t\t\t\tif i > max_index:\n\t\t\t\t\t\tmax_index = i\n\t\t\t\t\t\tmax_value = test_list1[i]\n\t"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\t# Write your code here\n\t\tif n == 0 or r == 0:\n\t\t\treturn 1\n\t\tif r > n:\n\t\t\treturn 0\n\t\tif r == n:\n\t\t\treturn 1\n\t\tif r == 1:\n\t\t\treturn nCr_mod_p(n-1, r, p)\n\t\tif r == 2:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 2\n\t\tif r == 3:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 6\n\t\tif r == 4:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 24\n\t\tif r == 5:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 120\n\t\tif r == 6:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 720\n\t\tif r == 7:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 5040\n\t\tif r == 8:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 40320\n\t\tif r == 9:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 362880\n\t\tif r == 10:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 3628800\n\t\tif r == 11:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 39916800\n\t\tif r == 12:\n\t\t\treturn nCr_mod_p(n-1, r, p) * (p-1) // 479001600\n\t\tif r == 13:\n\t\t\treturn"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [subset(ar, n-1) + [ar[n-1]]] + subset(ar, n-1)\n\nprint(subset([1,2,3], 3))\n<|endoftext|>"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn actual_cost - sale_amount\n\t\telse:\n\t\t\treturn None\n\nprint(profit_amount(100,100))\nprint(profit_amount(100,10))\nprint(profit_amount(100,1))\nprint(profit_amount(100,0))\nprint(profit_amount(100,-1))\nprint(profit_amount(100,-10))\nprint(profit_amount(100,-100))\nprint(profit_amount(100,-1000))\nprint(profit_amount(100,-10000))\nprint(profit_amount(100,-100000))\nprint(profit_amount(100,-1000000))\nprint(profit_amount(100,-10000000))\nprint(profit_amount(100,-100000000))\nprint(profit_amount(100,-1000000000))\nprint(profit_amount(100,-10000000000))\nprint(profit_amount(100,-100000000000))\nprint(profit_amount(100,-1000000000000))\nprint(profit_amount(100,-10000000000000))\nprint(profit_amount(100,-100000000000000))\nprint(profit_amount(100,-1000000000000000))\nprint(profit_amount(100,-10000000000000000))\nprint(profit_amount(100,-100000000000000000))\nprint(profit_amount(100,-1000000000000000000))\nprint(profit_amount(100"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t\tif n < 2:\n\t\t\treturn False\n\t\tfor i in range(2, n):\n\t\t\tif n % i == 0:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(is_abundant(10))\nprint(is_abundant(12))\nprint(is_abundant(15))\nprint(is_abundant(20))\nprint(is_abundant(25))\nprint(is_abundant(30))\nprint(is_abundant(35))\nprint(is_abundant(40))\nprint(is_abundant(45))\nprint(is_abundant(50))\nprint(is_abundant(55))\nprint(is_abundant(60))\nprint(is_abundant(65))\nprint(is_abundant(70))\nprint(is_abundant(75))\nprint(is_abundant(80))\nprint(is_abundant(85))\nprint(is_abundant(90))\nprint(is_abundant(95))\nprint(is_abundant(100))\nprint(is_abundant(105))\nprint(is_abundant(110))\nprint(is_abundant(115))\nprint(is_abundant(120))\nprint(is_abundant(125))\nprint(is_abundant(130))\nprint(is_abundant(135))\nprint(is_abundant(140))\nprint(is_abundant(145))\nprint(is_abundant(150))\nprint(is_abundant(155))\nprint(is_abundant(160))\nprint(is_abundant(165))\nprint(is_abundant(170))\nprint(is_abundant(175))\nprint(is_abundant(180))\nprint(is_abundant(185))\nprint(is_abundant(190))\nprint(is_abundant(195))\nprint(is_abundant(200))\nprint(is_abundant(20"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t\treturn re.split(r'[A-Z]', text)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_2(text):\n\t\treturn re.split(r'[A-Z]', text, 1)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_3(text):\n\t\treturn re.split(r'[A-Z]', text, 2)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_4(text):\n\t\treturn re.split(r'[A-Z]', text, 3)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_5(text):\n\t\treturn re.split(r'[A-Z]', text, 4)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_6(text):\n\t\treturn re.split(r'[A-Z]', text, 5)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_7(text):\n\t\treturn re.split(r'[A-Z]', text, 6)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_8(text):\n\t\treturn re.split(r'[A-Z]', text, 7)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_9(text):\n\t\treturn re.split(r'[A-Z]', text, 8)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_10(text):\n\t\treturn re.split(r'[A-Z]', text, 9)\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list_11(text):\n\t\treturn re.split(r'[A-Z]', text, 10)\n\n\"\"\"\nWrite"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t\t# Your code here\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn get_First_Set_Bit_Pos(n & (n-1))\n\nprint(get_First_Set_Bit_Pos(10))\n<|endoftext|>"}
{"ID": 357, "source": "MBPP:958", "prompt": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t", "predict": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t\troman_num = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n\t\troman_num_list = []\n\t\twhile num > 0:\n\t\t\tnum, r = divmod(num, 1000)\n\t\t\troman_num_list.append(roman_num[r])\n\t\treturn ''.join(roman_num_list[::-1])\n\nprint(int_to_roman(1994))\n<|endoftext|>"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t\treturn sum(lst) / len(lst)\n\nprint(Average([1,2,3,4,5]))\nprint(Average([1,2,3,4,5,6]))\nprint(Average([1,2,3,4,5,6,7]))\nprint(Average([1,2,3,4,5,6,7,8]))\nprint(Average([1,2,3,4,5,6,7,8,9]))\nprint(Average([1,2,3,4,5,6,7,8,9,10]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(Average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(Average([1,2,3"}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * get_noOfways(n-1)\n\ndef get_noOfways_2(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_2(n-1)\n\ndef get_noOfways_3(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_3(n-1)\n\ndef get_noOfways_4(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_4(n-1)\n\ndef get_noOfways_5(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_5(n-1)\n\ndef get_noOfways_6(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_6(n-1)\n\ndef get_noOfways_7(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_7(n-1)\n\ndef get_noOfways_8(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_8(n-1)\n\ndef get_noOfways_9(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_9(n-1)\n\ndef get_noOfways_10(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_10(n-1)\n\ndef get_noOfways_11(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_noOfways_11(n-1)\n\ndef get_noOf"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t\troman_dict = {\n\t\t\t'I': 1,\n\t\t\t'V': 5,\n\t\t\t'X': 10,\n\t\t\t'L': 50,\n\t\t\t'C': 100,\n\t\t\t'D': 500,\n\t\t\t'M': 1000\n\t\t}\n\t\troman_num = 0\n\t\tfor i in range(len(s)-1):\n\t\t\tif roman_dict[s[i]] < roman_dict[s[i+1]]:\n\t\t\t\troman_num += roman_dict[s[i]]\n\t\t\telse:\n\t\t\t\troman_num += roman_dict[s[i+1]]\n\t\treturn roman_num\n\nprint(roman_to_int('III'))\nprint(roman_to_int('IV'))\nprint(roman_to_int('IX'))\nprint(roman_to_int('LVIII'))\nprint(roman_to_int('MCMXCIV'))\n<|endoftext|>"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_Even(1,100))\n<|endoftext|>"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2) - (4*x*y) + (2*x*z) - (y**2) - (4*y*z) + (2*y*z)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root of a number.\n\"\"\"\ndef square_root(x):\n\t\treturn math.sqrt(x)\n\n\"\"\"\nWrite a function to calculate the square root"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t\treturn len(s) % 2 == 0\n\nprint(word_len(\"hello\"))\nprint(word_len(\"hello world\"))\nprint(word_len(\"hello world hello\"))\nprint(word_len(\"hello world hello world\"))\nprint(word_len(\"hello world hello world hello\"))\nprint(word_len(\"hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(text):\n\t\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores_and_spaces(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])','', text).title()\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores_and_spaces_and_underscores(text):\n\t\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).title()\n\n\"\"\"\nWrite a function"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple(t for t in tuple1 if t)\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty list from a list of lists.\n\"\"\"\ndef remove_empty(list1): #L = [[], [], ['a', 'b'], ['a', 'b', 'c'], ['d']]\n\t\treturn list(l for l in list1 if l)\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty dictionary from a dictionary.\n\"\"\"\ndef remove_empty(dict1): #D = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\t\treturn dict((k, v) for k, v in dict1.items() if v)\n\nprint(remove_empty(D))\n\n\"\"\"\nWrite a function to remove an empty set from a set.\n\"\"\"\ndef remove_empty(set1): #S = {1, 2, 3, 4}\n\t\treturn set(s for s in set1 if s)\n\nprint(remove_empty(S))\n\n\"\"\"\nWrite a function to remove an empty string from a string.\n\"\"\"\ndef remove_empty(string1): #S = 'abc'\n\t\treturn string1.strip()\n\nprint(remove_empty(S))\n\n\"\"\"\nWrite a function to remove an empty tuple from a tuple.\n\"\"\"\ndef remove_empty(tuple1): #L = ((), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d'))\n\t\treturn tuple(t for t in tuple1 if t)\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty list from a list.\n\"\"\"\ndef remove_empty(list1): #L = [[], [], ['a', 'b'], ['a', 'b', 'c'], ['d']]\n\t\treturn list(l for l in list1 if l)\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty dictionary from a dictionary.\n\"\"\"\ndef remove_empty(dict1): #D = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\t\treturn"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t\tvowels = ['a', 'e', 'i', 'o', 'u']\n\t\tfor i in vowels:\n\t\t\tif i in string:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(check('hello'))\nprint(check('hello world'))\nprint(check('hello world hello'))\nprint(check('hello world hello world'))\nprint(check('hello world hello world hello'))\nprint(check('hello world hello world hello world'))\nprint(check('hello world hello world hello world hello world'))\nprint(check('hello world hello world hello world hello world hello world'))\nprint(check('hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn max(A,B)\n\t\telse:\n\t\t\treturn max(floor_Max(A,B,N-1),floor_Max(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef ceil_Min(A,B,N):\n\t\t# Your code here\n\t\t#print(A,B,N)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\treturn min(A,B)\n\t\telse:\n\t\t\treturn min(ceil_Min(A,B,N-1),ceil_Min(A+B,B,N-2))\n\n\"\"\"\nWrite a python function to find the value of the function at the given point.\n\"\"\"\ndef value_at_point(A,B,N,x):\n\t\t# Your code here\n\t\t#print(A,B,N,x)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\tif x<A:\n\t\t\t\treturn B\n\t\t\telif x>B:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A+B\n\t\telse:\n\t\t\treturn value_at_point(A+B,B,N-1,x)\n\n\"\"\"\nWrite a python function to find the value of the function at the given point.\n\"\"\"\ndef value_at_point_2(A,B,N,x):\n\t\t# Your code here\n\t\t#print(A,B,N,x)\n\t\tif N==1:\n\t\t\treturn A\n\t\telif N==2:\n\t\t\tif x<A:\n\t\t\t\treturn B\n\t\t\telif x>B:\n\t\t\t\treturn A\n\t\t\telse:\n\t\t\t\treturn A+B\n\t\telse:\n\t\t\treturn value_at_point_2(A+B,B,N-1,x)\n\n\"\"\"\nWrite a python function to find the value of the function at the given point.\n\"\"\"\ndef value_at_point_3(A,B,N,x):\n\t\t# Your code here\n\t\t#print(A,B"}
{"ID": 368, "source": "MBPP:969", "prompt": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t", "predict": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t\t# Create a dictionary to store the initial elements\n\t\tinitial_elements = {}\n\t\t# Iterate through the list\n\t\tfor i in test_list:\n\t\t\t# If the initial element is not in the dictionary, add it\n\t\t\tif i[0] not in initial_elements:\n\t\t\t\tinitial_elements[i[0]] = 1\n\t\t\t# If the initial element is in the dictionary, increment the count\n\t\t\telse:\n\t\t\t\tinitial_elements[i[0]] += 1\n\t\t# Create a list to store the tuples\n\t\ttuples = []\n\t\t# Iterate through the dictionary\n\t\tfor i in initial_elements:\n\t\t\t# If the count is greater than 1, add the tuple\n\t\t\tif initial_elements[i] > 1:\n\t\t\t\ttuples.append((i, initial_elements[i]))\n\t\t# Sort the tuples by the second element\n\t\ttuples.sort(key=lambda x: x[1], reverse=True)\n\t\t# Return the sorted tuples\n\t\treturn tuples\n\n# Test the function\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('a', 1), ('b', 2), ('c', 3)]\nprint(join_tuples(test_list))\n\n\"\"\"\nWrite a function to find the longest common prefix of two strings.\n\"\"\"\ndef longest_common_prefix(s1, s2):\n\t# Create a list to store the longest common prefix\n\tlongest_common_prefix = []\n\t# Iterate through the strings\n\tfor i in range(min(len(s1), len(s2))):\n\t\t# If the characters are not the same, break the loop\n\t\tif s1[i]!= s2[i]:\n\t\t\tbreak\n\t\t# If the characters are the same, add the character to the list\n\t\telse:\n\t\t\tlongest_common_prefix.append(s1[i])\n\t# Return the longest common prefix\n\treturn ''.join(longest_common_prefix)\n\n# Test the function\nprint(longest_common_prefix('abc', 'ab'))\nprint(longest_common_prefix('abc', 'abz'))\nprint(longest_common_prefix('abc', 'abz'))\nprint(longest_common_prefix('abc', 'abz'))\nprint(longest"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t\treturn min( x, y )\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t\treturn max( x, y )\n\n\"\"\"\nWrite a function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two( x, y ):\n\t\treturn x + y\n\n\"\"\"\nWrite a function to find the difference of two numbers.\n\"\"\"\ndef difference_of_two( x, y ):\n\t\treturn x - y\n\n\"\"\"\nWrite a function to find the product of two numbers.\n\"\"\"\ndef product_of_two( x, y ):\n\t\treturn x * y\n\n\"\"\"\nWrite a function to find the quotient of two numbers.\n\"\"\"\ndef quotient_of_two( x, y ):\n\t\treturn x / y\n\n\"\"\"\nWrite a function to find the remainder of two numbers.\n\"\"\"\ndef remainder_of_two( x, y ):\n\t\treturn x % y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_2( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_3( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_4( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_5( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_6( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_7( x, y ):\n\t\treturn x ** y\n\n\"\"\"\nWrite a function to find the power of two numbers.\n\"\"\"\ndef power_of_two_8( x, y ):\n\t\t"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t\t# Write your code here\n\t\tif n == 1 : \n\t\t\treturn 1\n\t\telif n == 2 : \n\t\t\treturn 2\n\t\telif n == 3 : \n\t\t\treturn 3\n\t\telse : \n\t\t\treturn max(maximum_segments(n-1, a, b, c), maximum_segments(n-1, a, c, b))\n\nprint(maximum_segments(10, 1, 2, 3))\n<|endoftext|>"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t\treturn (test_tup1, test_tup2)\n\n\"\"\"\nWrite a function to find the length of a nested tuple.\n\"\"\"\ndef length_nested(test_tup):\n\t\treturn len(test_tup)\n\n\"\"\"\nWrite a function to find the sum of the values in a nested tuple.\n\"\"\"\ndef sum_nested(test_tup):\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of the values in a nested tuple.\n\"\"\"\ndef product_nested(test_tup):\n\t\treturn product(test_tup)\n\n\"\"\"\nWrite a function to find the minimum value in a nested tuple.\n\"\"\"\ndef min_nested(test_tup):\n\t\treturn min(test_tup)\n\n\"\"\"\nWrite a function to find the maximum value in a nested tuple.\n\"\"\"\ndef max_nested(test_tup):\n\t\treturn max(test_tup)\n\n\"\"\"\nWrite a function to find the average value in a nested tuple.\n\"\"\"\ndef average_nested(test_tup):\n\t\treturn sum(test_tup) / len(test_tup)\n\n\"\"\"\nWrite a function to find the median value in a nested tuple.\n\"\"\"\ndef median_nested(test_tup):\n\t\treturn sorted(test_tup)[len(test_tup) // 2]\n\n\"\"\"\nWrite a function to find the mode value in a nested tuple.\n\"\"\"\ndef mode_nested(test_tup):\n\t\treturn max(set(test_tup), key=test_tup.count)\n\n\"\"\"\nWrite a function to find the unique values in a nested tuple.\n\"\"\"\ndef unique_nested(test_tup):\n\t\treturn set(test_tup)\n\n\"\"\"\nWrite a function to find the number of unique values in a nested tuple.\n\"\"\"\ndef count_unique_nested(test_tup):\n\t\treturn len(unique_nested(test_tup))\n\n\"\"\"\nWrite a function to find the number of unique values in a nested tuple.\n\"\"\"\ndef count_unique_nested_2(test_tup):\n\t\treturn len(set(test_tup))\n\n\"\"\"\nWrite a function to find the number of unique values in a nested tuple.\n\"\"\"\ndef count_unique_nested_3(test_tup):"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t\treturn s[d:]+s[:d]\n\nprint(left_rotate(\"abc\",2))\nprint(left_rotate(\"abc\",3))\nprint(left_rotate(\"abc\",4))\nprint(left_rotate(\"abc\",5))\nprint(left_rotate(\"abc\",6))\nprint(left_rotate(\"abc\",7))\nprint(left_rotate(\"abc\",8))\nprint(left_rotate(\"abc\",9))\nprint(left_rotate(\"abc\",10))\nprint(left_rotate(\"abc\",11))\nprint(left_rotate(\"abc\",12))\nprint(left_rotate(\"abc\",13))\nprint(left_rotate(\"abc\",14))\nprint(left_rotate(\"abc\",15))\nprint(left_rotate(\"abc\",16))\nprint(left_rotate(\"abc\",17))\nprint(left_rotate(\"abc\",18))\nprint(left_rotate(\"abc\",19))\nprint(left_rotate(\"abc\",20))\nprint(left_rotate(\"abc\",21))\nprint(left_rotate(\"abc\",22))\nprint(left_rotate(\"abc\",23))\nprint(left_rotate(\"abc\",24))\nprint(left_rotate(\"abc\",25))\nprint(left_rotate(\"abc\",26))\nprint(left_rotate(\"abc\",27))\nprint(left_rotate(\"abc\",28))\nprint(left_rotate(\"abc\",29))\nprint(left_rotate(\"abc\",30))\nprint(left_rotate(\"abc\",31))\nprint(left_rotate(\"abc\",32))\nprint(left_rotate(\"abc\",33))\nprint(left_rotate(\"abc\",34))\nprint(left_rotate(\"abc\",35))\nprint(left_rotate(\"abc\",36))\nprint(left_rotate(\"abc\",37))\nprint(left_rotate(\"abc\",38))\nprint(left_rotate(\"abc\",39))\nprint(left_rotate(\"abc\",40))\nprint(left_rotate(\"abc\",41))\nprint(left_rotate(\"abc\",42))\nprint(left_rotate(\"abc\",43))\nprint(left"}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t\t# Write your code here\n\t\tn = len(A)\n\t\tdp = [[0 for i in range(n)] for j in range(n)]\n\t\tfor i in range(n):\n\t\t\tdp[i][i] = A[i][i]\n\t\tfor i in range(n-2, -1, -1):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tdp[i][j] = min(dp[i+1][j], dp[i+1][j+1]) + A[i][j]\n\t\treturn dp[0][n-1]\n\nA = [[2, 3, 4], [6, 5, 7], [4, 1, 8]]\nprint(min_sum_path(A))\n<|endoftext|>"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t\tif s.find(ch)!=-1:\n\t\t\ts=s.replace(ch, '')\n\t\treturn s\n\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove_Occ(\"Hello World\", \"o\"))\nprint(remove_Occ(\"Hello World\", \"l\"))\nprint(remove"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t\t# Your code here\n\t\tn = len(M)\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif M[i][j] > M[i][j-1]:\n\t\t\t\t\tM[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n\t\treturn M\n\n\"\"\"\nWrite a function to sort a given matrix in descending order according to the sum of its columns.\n\"\"\"\ndef sort_matrix_desc(M):\n\t\t# Your code here\n\t\tn = len(M)\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif M[i][j] > M[i-1][j]:\n\t\t\t\t\tM[i][j], M[i-1][j] = M[i-1][j], M[i][j]\n\t\treturn M\n\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its diagonals.\n\"\"\"\ndef sort_matrix_diag(M):\n\t\t# Your code here\n\t\tn = len(M)\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif M[i][j] > M[i-1][j-1]:\n\t\t\t\t\tM[i][j], M[i-1][j-1] = M[i-1][j-1], M[i][j]\n\t\treturn M\n\n\"\"\"\nWrite a function to sort a given matrix in descending order according to the sum of its diagonals.\n\"\"\"\ndef sort_matrix_diag_desc(M):\n\t\t# Your code here\n\t\tn = len(M)\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif M[i][j] > M[i-1][j]:\n\t\t\t\t\tM[i][j], M[i-1][j] = M[i-1][j], M[i][j]\n\t\treturn M\n\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its diagonals.\n\"\"\"\ndef sort_matrix_diag_asc(M):\n\t"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\t# Create a dictionary to store the most common words\n\t\tmost_common = {}\n\t\t# Iterate through the words\n\t\tfor word in words:\n\t\t\t# If the word is in the dictionary, increment the count\n\t\t\tif word in most_common:\n\t\t\t\tmost_common[word] += 1\n\t\t\telse:\n\t\t\t\tmost_common[word] = 1\n\t\t# Return the most common words\n\t\treturn most_common\n\n# Test the function\nprint(count_common([\"apple\", \"banana\", \"cherry\", \"orange\", \"pear\", \"grape\", \"apple\"]))\n<|endoftext|>"}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t\treturn (l*b*h)/6.0\n\nprint(find_Volume(10,10,10))\n<|endoftext|>"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at digits.\n\"\"\"\ndef split_digitstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at punctuation.\n\"\"\"\ndef split_punctuationstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at whitespace.\n\"\"\"\ndef split_whitespacestring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at all characters.\n\"\"\"\ndef split_allstring(text):\n\t\treturn text.split()\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_2(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_3(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_4(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_5(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_6(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_7(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_8(text, char):\n\t\treturn text.split(char)\n\n\"\"\"\nWrite a function to split a string at a given character.\n\"\"\"\ndef split_charstring_9"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t\treturn text.lower().replace(' ', '_')\n\nprint(text_lowercase_underscore('Hello World!'))\n\n\"\"\"\nWrite a function to find sequences of uppercase letters joined with an underscore.\n\"\"\"\ndef text_uppercase_underscore(text):\n\t\treturn text.upper().replace(' ', '_')\n\nprint(text_uppercase_underscore('Hello World!'))\n\n\"\"\"\nWrite a function to find sequences of digits joined with an underscore.\n\"\"\"\ndef text_digits_underscore(text):\n\t\treturn text.replace(' ', '_').replace('0', '_').replace('1', '_').replace('2', '_').replace('3', '_').replace('4', '_').replace('5', '_').replace('6', '_').replace('7', '_').replace('8', '_').replace('9', '_')\n\nprint(text_digits_underscore('Hello World!'))\n\n\"\"\"\nWrite a function to find sequences of special characters joined with an underscore.\n\"\"\"\ndef text_special_underscore(text):\n\t\treturn text.replace(' ', '_').replace('!', '_').replace('?', '_').replace('(', '_').replace(')', '_').replace('*', '_').replace('+', '_').replace(',', '_').replace('.', '_').replace('/', '_').replace('=', '_').replace(';', '_').replace('<', '_').replace('>', '_').replace('@', '_').replace('[', '_').replace(']', '_')\n\nprint(text_special_underscore('Hello World!'))\n\n\"\"\"\nWrite a function to find sequences of numbers joined with an underscore.\n\"\"\"\ndef text_numbers_underscore(text):\n\t\treturn text.replace(' ', '_').replace('0', '_').replace('1', '_').replace('2', '_').replace('3', '_').replace('4', '_').replace('5', '_').replace('6', '_').replace('7', '_').replace('8', '_').replace('9', '_')\n\nprint(text_numbers_underscore('Hello World!'))\n\n\"\"\"\nWrite a function to find sequences of punctuation joined with an underscore.\n\"\"\"\ndef text_punctuation_underscore(text):\n\t\treturn text.replace(' ', '_').replace('!', '_').replace('?', '_').replace('(', '_').replace(')', '_').replace('*', '_').replace('+', '_').replace(',', '_').replace('.', '_').replace('/', '_')."}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t\treturn a * 4\n\nprint(square_perimeter(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\t\treturn a * b\n\nprint(rectangle_area(5, 6))\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\t\treturn a + b + c\n\nprint(triangle_perimeter(5, 6, 7))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\t\treturn (a * b) / 2\n\nprint(triangle_area(5, 6, 7))\n\n\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef pentagon_perimeter(a):\n\t\treturn a * 5\n\nprint(pentagon_perimeter(5))\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(a):\n\t\treturn a * 10\n\nprint(pentagon_area(5))\n\n\"\"\"\nWrite a function to find the perimeter of a hexagon.\n\"\"\"\ndef hexagon_perimeter(a):\n\t\treturn a * 6\n\nprint(hexagon_perimeter(5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(a):\n\t\treturn a * 12\n\nprint(hexagon_area(5))\n\n\"\"\"\nWrite a function to find the perimeter of a heptagon.\n\"\"\"\ndef heptagon_perimeter(a):\n\t\treturn a * 8\n\nprint(heptagon_perimeter(5))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(a):\n\t\treturn a * 14\n\nprint(heptagon_area(5))\n\n\"\"\"\nWrite a function to find the perimeter of a octagon.\n\"\"\"\ndef octagon_perimeter(a):\n\t\treturn a * 10\n\nprint(octagon_perim"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t\tdirty_chars = []\n\t\tfor char in string:\n\t\t\tif char not in second_string:\n\t\t\t\tdirty_chars.append(char)\n\t\treturn dirty_chars\n\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello\", \"hello\"))\nprint(remove_dirty_chars(\"hello\", \"world\"))\nprint(remove_dirty_chars(\"hello"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t\tfor i in range(len(arraynums)):\n\t\t\tfor j in range(i+1, len(arraynums)):\n\t\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\t\treturn True\n\t\treturn False\n\ndef test_duplicate_2(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_3(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_4(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_5(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_6(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_7(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_8(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1, len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\ndef test_duplicate_9(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\tif x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(is_woodall(1))\nprint(is_woodall(2))\nprint(is_woodall(3))\nprint(is_woodall(4))\nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(7))\nprint(is_woodall(8))\nprint(is_woodall(9))\nprint(is_woodall(10))\nprint(is_woodall(11))\nprint(is_woodall(12))\nprint(is_woodall(13))\nprint(is_woodall(14))\nprint(is_woodall(15))\nprint(is_woodall(16))\nprint(is_woodall(17))\nprint(is_woodall(18))\nprint(is_woodall(19))\nprint(is_woodall(20))\nprint(is_woodall(21))\nprint(is_woodall(22))\nprint(is_woodall(23))\nprint(is_woodall(24))\nprint(is_woodall(25))\nprint(is_woodall(26))\nprint(is_woodall(27))\nprint(is_woodall(28))\nprint(is_woodall(29))\nprint(is_woodall(30))\nprint(is_woodall(31))\nprint(is_woodall(32))\nprint(is_woodall(33))\nprint(is_woodall(34))\nprint(is_woodall(35))\nprint(is_woodall(36))\nprint(is_woodall(37))\nprint(is_woodall(38))\nprint(is_woodall(39))\nprint(is_woodall(40))\nprint(is_woodall(41))\nprint(is_woodall(42"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t\t\"\"\"\n\t\t:param m: int\n\t\t:param n: int\n\t\t:return: list\n\t\t\"\"\"\n\t\treturn [i for i in range(m,n+1) if i % n == 0]\n\nprint(multiples_of_num(10,100))\nprint(multiples_of_num(10,1000))\nprint(multiples_of_num(10,10000))\nprint(multiples_of_num(10,100000))\nprint(multiples_of_num(10,1000000))\nprint(multiples_of_num(10,10000000))\nprint(multiples_of_num(10,100000000))\nprint(multiples_of_num(10,1000000000))\nprint(multiples_of_num(10,10000000000))\nprint(multiples_of_num(10,100000000000))\nprint(multiples_of_num(10,1000000000000))\nprint(multiples_of_num(10,10000000000000))\nprint(multiples_of_num(10,100000000000000))\nprint(multiples_of_num(10,1000000000000000))\nprint(multiples_of_num(10,10000000000000000))\nprint(multiples_of_num(10,100000000000000000))\nprint(multiples_of_num(10,1000000000000000000))\nprint(multiples_of_num(10,10000000000000000000))\nprint("}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i+1, len(nums)):\n\t\t\t\tif nums[i] == nums[j]:\n\t\t\t\t\treturn nums[i]\n\nprint(find_first_duplicate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,14"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t\t# Your code here\n\t\tmax_sum = 0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1[i])):\n\t\t\t\tmax_sum = max(max_sum, list1[i][j])\n\t\treturn max_sum\n\nlist1 = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nprint(maximum_Sum(list1))\n<|endoftext|>"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t\t# Your code here\n\t\treturn int(binary, 2)\n\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(decimal): \n\t\t# Your code here\n\t\treturn bin(decimal)[2:]\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hexadecimal(decimal): \n\t\t# Your code here\n\t\treturn hex(decimal)[2:]\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hexadecimal_to_decimal(hexadecimal): \n\t\t# Your code here\n\t\treturn int(hexadecimal, 16)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hexadecimal_to_binary(hexadecimal): \n\t\t# Your code here\n\t\treturn bin(int(hexadecimal, 16))[2:]\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its hexadecimal equivalent.\n\"\"\"\ndef hexadecimal_to_hexadecimal(hexadecimal): \n\t\t# Your code here\n\t\treturn hex(int(hexadecimal, 16))[2:]\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(binary): \n\t\t# Your code here\n\t\treturn oct(int(binary, 2))[2:]\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(octal): \n\t\t# Your code here\n\t\treturn bin(int(octal, 8))[2:]\n\n\"\"\"\nWrite a function to convert the given octal number to its hexadecimal equivalent.\n\"\"\"\ndef octal_to_hexadecimal(octal): \n\t\t# Your code here\n\t\treturn hex(int(octal, 8))[2:]\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its octal equivalent.\n\"\"\"\ndef hexadecimal_to_octal(hexadecimal): \n\t\t# Your code here\n\t\treturn oct(int(hexadecimal, 16))[2:]\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hexadecimal_to_binary(hexadecimal): \n\t\t#"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t\t# Your code here\n\t\tproduct = 1\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]*arr[j] == product:\n\t\t\t\t\tproduct = product * arr[i]*arr[j]\n\t\treturn product\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(find_Product(arr,n))\n<|endoftext|>"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_2(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_3(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_4(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_5(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_6(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_7(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_8(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements_9(test_list, K):\n\t\tif len(test_list)!= K:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n"}
{"ID": 390, "source": "MBPP:27", "prompt": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t", "predict": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t\treturn [x for x in list if x.isdigit()]\n\nprint(remove([\"123\", \"456\", \"789\", \"123456789\"]))\n<|endoftext|>"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t\t\"\"\"\n\t\tn: number of trials\n\t\tk: number of successes\n\t\t\"\"\"\n\t\tif k == 0:\n\t\t\treturn 1\n\t\tif k == n:\n\t\t\treturn 1\n\t\tif k < n:\n\t\t\treturn binomial_Coeff(n-k,k) + binomial_Coeff(n-k,n-k)\n\t\telse:\n\t\t\treturn 0\n\nprint(binomial_Coeff(10,3))\n<|endoftext|>"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t\t# Your code here\n\t\tcount=0\n\t\tfor i in range(arr_size):\n\t\t\tif arr[i]%2!=0:\n\t\t\t\tcount+=1\n\t\treturn count\n\narr=[1,2,3,4,5,6,7,8,9,10]\narr_size=len(arr)\nprint(get_Odd_Occurrence(arr,arr_size))\n<|endoftext|>"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tcount = 0\n\t\tfor i in range(len(s)):\n\t\t\tfor j in range(i+1, len(s)):\n\t\t\t\tif s[i:j+1] == s[i:j+1][::-1]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"abca\"))\nprint(count_Substring_With_Equal_Ends(\"abcba\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_Equal_Ends(\"abcbca\"))\nprint(count_Substring_With_"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t\theap = []\n\t\tfor i in nums:\n\t\t\theap.append(i)\n\t\t\tif len(heap) > k:\n\t\t\t\theap.pop(0)\n\t\treturn heap\n\ndef main():\n\tnums = [1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42"}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t\tfactors = []\n\t\tfor i in range(2, n):\n\t\t\tif n % i == 0:\n\t\t\t\tfactors.append(i)\n\t\t\t\tn //= i\n\t\tif n > 1:\n\t\t\tfactors.append(n)\n\t\treturn factors\n\nprint(max_Prime_Factors(1000))\n<|endoftext|>"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t\t# Write your code here\n\t\tif N == 0:\n\t\t\treturn \"0\"\n\t\telif N == 1:\n\t\t\treturn \"1\"\n\t\telse:\n\t\t\treturn decimal_To_Binary(N//2) + str(N%2)\n\nprint(decimal_To_Binary(10))\nprint(decimal_To_Binary(11))\nprint(decimal_To_Binary(12))\nprint(decimal_To_Binary(13))\nprint(decimal_To_Binary(14))\nprint(decimal_To_Binary(15))\nprint(decimal_To_Binary(16))\nprint(decimal_To_Binary(17))\nprint(decimal_To_Binary(18))\nprint(decimal_To_Binary(19))\nprint(decimal_To_Binary(20))\nprint(decimal_To_Binary(21))\nprint(decimal_To_Binary(22))\nprint(decimal_To_Binary(23))\nprint(decimal_To_Binary(24))\nprint(decimal_To_Binary(25))\nprint(decimal_To_Binary(26))\nprint(decimal_To_Binary(27))\nprint(decimal_To_Binary(28))\nprint(decimal_To_Binary(29))\nprint(decimal_To_Binary(30))\nprint(decimal_To_Binary(31))\nprint(decimal_To_Binary(32))\nprint(decimal_To_Binary(33))\nprint(decimal_To_Binary(34))\nprint(decimal_To_Binary(35))\nprint(decimal_To_Binary(36))\nprint(decimal_To_Binary(37))\nprint(decimal_To_Binary(38))\nprint(decimal_To_Binary(39))\nprint(decimal_To_Binary(40))\nprint(decimal_To_Binary(41))\nprint(decimal_To_Binary(42))\nprint(decimal_To_Binary(43))\nprint(decimal_To_Binary(44))\nprint(decimal_To_Binary(45))\nprint(decimal_To_Binary(46))\nprint(decimal_To_Binary("}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\t# Find the missing number in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element as the start \n\t\t# and the last element as the end \n\t\t# and the middle element as the middle \n\t\t# element \n\t\t# The missing number is the element \n\t\t# which is not present in the array \n\t\t# using the binary search algorithm \n\t\t# using the first element"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\t\"\"\"\n\t\t:param n: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * find_rect_num(n-1)\n\nprint(find_rect_num(10))\n<|endoftext|>"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\tif N == 1 :\n\t\t\treturn p\n\t\telif N == 2 :\n\t\t\treturn q\n\t\telse :\n\t\t\treturn find_Nth_Digit(p*10+q,p*10+q,N-1)\n\nprint(find_Nth_Digit(1,2,3))\nprint(find_Nth_Digit(1,2,4))\nprint(find_Nth_Digit(1,2,5))\nprint(find_Nth_Digit(1,2,6))\nprint(find_Nth_Digit(1,2,7))\nprint(find_Nth_Digit(1,2,8))\nprint(find_Nth_Digit(1,2,9))\nprint(find_Nth_Digit(1,2,10))\nprint(find_Nth_Digit(1,2,11))\nprint(find_Nth_Digit(1,2,12))\nprint(find_Nth_Digit(1,2,13))\nprint(find_Nth_Digit(1,2,14))\nprint(find_Nth_Digit(1,2,15))\nprint(find_Nth_Digit(1,2,16))\nprint(find_Nth_Digit(1,2,17))\nprint(find_Nth_Digit(1,2,18))\nprint(find_Nth_Digit(1,2,19))\nprint(find_Nth_Digit(1,2,20))\nprint(find_Nth_Digit(1,2,21))\nprint(find_Nth_Digit(1,2,22))\nprint(find_Nth_Digit(1,2,23))\nprint(find_Nth_Digit(1,2,24))\nprint(find_Nth_Digit(1,2,25))\nprint(find_Nth_Digit(1,2,26))\nprint(find_Nth_Digit(1,2,27))\nprint(find_Nth_Digit(1,2,28))\nprint(find_Nth_Digit(1,2,29))\nprint(find"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\t\"\"\"\n\t\t:param mixed_list: mixed list of integers and strings\n\t\t:return: sorted mixed list\n\t\t\"\"\"\n\t\tif isinstance(mixed_list, list):\n\t\t\tif len(mixed_list) > 1:\n\t\t\t\tif isinstance(mixed_list[0], int):\n\t\t\t\t\treturn sorted(mixed_list, key=lambda x: x[0])\n\t\t\t\telif isinstance(mixed_list[0], str):\n\t\t\t\t\treturn sorted(mixed_list, key=lambda x: x[0])\n\t\t\t\telse:\n\t\t\t\t\traise TypeError(\"mixed_list must be a list of integers or strings\")\n\t\t\telse:\n\t\t\t\treturn mixed_list\n\t\telse:\n\t\t\traise TypeError(\"mixed_list must be a list of integers or strings\")\n\ndef main():\n\tmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(sort_mixed_list(mixed_list))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 401, "source": "MBPP:38", "prompt": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t\teven_list = []\n\t\todd_list = []\n\t\tfor i in list1:\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_list.append(i)\n\t\t\telse:\n\t\t\t\todd_list.append(i)\n\t\treturn even_list, odd_list\n\nprint(div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t\t# Write your code here\n\t\tif len(S) == 0:\n\t\t\treturn True\n\t\tif len(S) == 1:\n\t\t\treturn False\n\t\tif S[0] == S[1]:\n\t\t\treturn rearange_string(S[2:])\n\t\tif S[1] == S[2]:\n\t\t\treturn rearange_string(S[1:])\n\t\tif S[0] == S[2]:\n\t\t\treturn rearange_string(S[1:])\n\t\tif S[0] == S[1] and S[1] == S[2]:\n\t\t\treturn rearange_string(S[3:])\n\t\treturn False\n\nprint(rearange_string(\"aab\"))\nprint(rearange_string(\"aabbb\"))\nprint(rearange_string(\"aabcc\"))\nprint(rearange_string(\"aabccdd\"))\nprint(rearange_string(\"aabccddde\"))\nprint(rearange_string(\"aabccdddeee\"))\nprint(rearange_string(\"aabccdddeeeff\"))\nprint(rearange_string(\"aabccdddeeeffgg\"))\nprint(rearange_string(\"aabccdddeeeffgghh\"))\nprint(rearange_string(\"aabccdddeeeffgghhii\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijj\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkkkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkkkkkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkkkkkkkkkkkk\"))\nprint(rearange_string(\"aabccdddeeeffgghhiijjkkkkkk"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t\tfreq = {}\n\t\tfor i in nums:\n\t\t\tif i in freq:\n\t\t\t\tfreq[i] += 1\n\t\t\telse:\n\t\t\t\tfreq[i] = 1\n\t\treturn freq\n\nprint(freq_element([[1,2,3],[4,5,6],[7,8,9]]))\n<|endoftext|>"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t\treturn list(filter(lambda x: x % 2 == 0, nums))\n\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t\t# Your code here\n\t\tsum=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]+arr[j]==n:\n\t\t\t\t\tsum+=arr[i]+arr[j]\n\t\treturn sum\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(find_Sum(arr,n))\n<|endoftext|>"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t\treturn re.findall(r\"(?<=[a-z])(?=[A-Z])\", text)\n\nprint(text_match(\"Hello World\"))\nprint(text_match(\"Hello_World\"))\nprint(text_match(\"Hello_World_\"))\nprint(text_match(\"Hello_World_1\"))\nprint(text_match(\"Hello_World_123\"))\nprint(text_match(\"Hello_World_123_\"))\nprint(text_match(\"Hello_World_123_456\"))\nprint(text_match(\"Hello_World_123_456_\"))\nprint(text_match(\"Hello_World_123_456_789\"))\nprint(text_match(\"Hello_World_123_456_789_\"))\nprint(text_match(\"Hello_World_123_456_789_0\"))\nprint(text_match(\"Hello_World_123_456_789_0_\"))\nprint(text_match(\"Hello_World_123_456_789_0_1\"))\nprint(text_match(\"Hello_World_123_456_789_0_12\"))\nprint(text_match(\"Hello_World_123_456_789_0_123\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_4\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_45\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_456\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_456_\"))\nprint(text_match(\"Hello_World_123_456_789_0_123_"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[-1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0:len(text)-1]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[len(text)-1:len(text)]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0:len(text)-1:2]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[len(text)-1:len(text):2]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0:len(text)-1:3]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[len(text)-1:len(text):3]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0:len(text)-1:4]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[len(text)-1:len(text):4]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[0:len(text)-1:5]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\t\treturn text[len(text)-1:len(text):5]\n\n\"\"\"\nWrite a function that matches a word at the"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t\tif len(l) == 0:\n\t\t\treturn 0\n\t\telif len(l) == 1:\n\t\t\treturn l[0]\n\t\telse:\n\t\t\treturn get_gcd(l[1:]) % l[0]\n\nprint(get_gcd([1, 2, 3, 4, 5]))\nprint(get_gcd([1, 2, 3, 4, 5, 6]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(get_gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t\tfor i in range(len(data)-1):\n\t\t\tfor j in range(i+1, len(data)):\n\t\t\t\tif data[i] == data[j]:\n\t\t\t\t\treturn False\n\t\treturn True\n\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"}
{"ID": 410, "source": "MBPP:47", "prompt": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t\tif A == 0: \n\t\t\treturn 0\n\t\telif B == 0: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn compute_Last_Digit(A-1,B) + compute_Last_Digit(A-1,B-1)\n\nprint(compute_Last_Digit(10,10))\n<|endoftext|>"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\treturn n ^ (n >> 1) ^ (n >> 2)\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number(n):\n\t\treturn n ^ (n >> 1) ^ (n >> 2) ^ (n >> 3) ^ (n >> 4) ^ (n >> 5) ^ (n >> 6) ^ (n >> 7)\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_2(n):\n\t\treturn n ^ (n >> 1) ^ (n >> 2) ^ (n >> 3) ^ (n >> 4) ^ (n >> 5) ^ (n >> 6) ^ (n >> 7) ^ (n >> 8) ^ (n >> 9) ^ (n >> 10) ^ (n >> 11) ^ (n >> 12) ^ (n >> 13) ^ (n >> 14) ^ (n >> 15) ^ (n >> 16) ^ (n >> 17) ^ (n >> 18) ^ (n >> 19) ^ (n >> 20) ^ (n >> 21) ^ (n >> 22) ^ (n >> 23) ^ (n >> 24) ^ (n >> 25) ^ (n >> 26) ^ (n >> 27) ^ (n >> 28) ^ (n >> 29) ^ (n >> 30) ^ (n >> 31) ^ (n >> 32) ^ (n >> 33) ^ (n >> 34) ^ (n >> 35) ^ (n >> 36) ^ (n >> 37) ^ (n >> 38) ^ (n >> 39) ^ (n >> 40) ^ (n >> 41) ^ (n >> 42) ^ (n >> 43)"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][0] if i < N else nums[i] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to extract every second or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element_2(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][1] if i < N else nums[i] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to extract every third or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element_3(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][2] if i < N else nums[i] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to extract every fourth or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element_4(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][3] if i < N else nums[i] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to extract every fifth or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element_5(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\treturn [nums[i][4] if i < N else nums[i] for i in range(len(nums))]\n\n\"\"\"\nWrite a function to extract every sixth or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element_6(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N:"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t\treturn min(input_list, key=len)\n\nprint(min_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t\tif x+y>z and x+z>y and y+z>x:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_equilateral(1,2,3))\nprint(check_equilateral(1,2,4))\nprint(check_equilateral(1,2,5))\nprint(check_equilateral(1,2,6))\nprint(check_equilateral(1,2,7))\nprint(check_equilateral(1,2,8))\nprint(check_equilateral(1,2,9))\nprint(check_equilateral(1,2,10))\nprint(check_equilateral(1,2,11))\nprint(check_equilateral(1,2,12))\nprint(check_equilateral(1,2,13))\nprint(check_equilateral(1,2,14))\nprint(check_equilateral(1,2,15))\nprint(check_equilateral(1,2,16))\nprint(check_equilateral(1,2,17))\nprint(check_equilateral(1,2,18))\nprint(check_equilateral(1,2,19))\nprint(check_equilateral(1,2,20))\nprint(check_equilateral(1,2,21))\nprint(check_equilateral(1,2,22))\nprint(check_equilateral(1,2,23))\nprint(check_equilateral(1,2,24))\nprint(check_equilateral(1,2,25))\nprint(check_equilateral(1,2,26))\nprint(check_equilateral(1,2,27))\nprint(check_equilateral(1,2,28))\nprint(check_equilateral(1,2,29))\nprint(check_equilateral(1,2,30))\nprint(check_equilateral(1,2,31))\nprint(check_equilateral(1,2,32))\nprint(check_equ"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t\treturn (b*h)/2\n\nprint(parallelogram_area(5,6))\n<|endoftext|>"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t\tif str[0] == str[-1]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Equality(\"abc\"))\nprint(check_Equality(\"ab\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))\nprint(check_Equality(\"abcc\"))"}
{"ID": 417, "source": "MBPP:54", "prompt": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t\t# Create a dictionary to store the frequency of each element\n\t\tcount = {}\n\t\tfor item in my_list:\n\t\t\tif item not in count:\n\t\t\t\tcount[item] = 1\n\t\t\telse:\n\t\t\t\tcount[item] += 1\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list = []\n\n\t\t# Create a variable to store the current index\n\t\tindex = 0\n\n\t\t# Iterate over the dictionary\n\t\tfor item in count:\n\t\t\t# Create a variable to store the number of occurrences of the current element\n\t\t\tnum_occurrences = count[item]\n\n\t\t\t# Iterate over the number of occurrences\n\t\t\tfor _ in range(num_occurrences):\n\t\t\t\t# Add the current element to the sorted list\n\t\t\t\tsorted_list.append(item)\n\n\t\t\t# Update the index\n\t\t\tindex += 1\n\n\t\t# Return the sorted list\n\t\treturn sorted_list\n\n# Test the function\nprint(counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 418, "source": "MBPP:55", "prompt": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t\tif n==0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn a*tn_gp(a,n-1,r)\n\nprint(tn_gp(1,10,1))\n<|endoftext|>"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t\treturn n < 2 * n\n\nprint(check(10))\nprint(check(12))\nprint(check(13))\nprint(check(14))\nprint(check(15))\nprint(check(16))\nprint(check(17))\nprint(check(18))\nprint(check(19))\nprint(check(20))\nprint(check(21))\nprint(check(22))\nprint(check(23))\nprint(check(24))\nprint(check(25))\nprint(check(26))\nprint(check(27))\nprint(check(28))\nprint(check(29))\nprint(check(30))\nprint(check(31))\nprint(check(32))\nprint(check(33))\nprint(check(34))\nprint(check(35))\nprint(check(36))\nprint(check(37))\nprint(check(38))\nprint(check(39))\nprint(check(40))\nprint(check(41))\nprint(check(42))\nprint(check(43))\nprint(check(44))\nprint(check(45))\nprint(check(46))\nprint(check(47))\nprint(check(48))\nprint(check(49))\nprint(check(50))\nprint(check(51))\nprint(check(52))\nprint(check(53))\nprint(check(54))\nprint(check(55))\nprint(check(56))\nprint(check(57))\nprint(check(58))\nprint(check(59))\nprint(check(60))\nprint(check(61))\nprint(check(62))\nprint(check(63))\nprint(check(64))\nprint(check(65))\nprint(check(66))\nprint(check(67))\nprint(check(68))\nprint(check(69))\nprint(check(70))\nprint(check(71))\nprint(check(72))\nprint(check(73"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t\tif x > 0 and y < 0:\n\t\t\treturn True\n\t\telif x < 0 and y > 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(opposite_Signs(1,2))\nprint(opposite_Signs(-1,2))\nprint(opposite_Signs(1,-2))\nprint(opposite_Signs(-1,-2))\nprint(opposite_Signs(1,0))\nprint(opposite_Signs(0,1))\nprint(opposite_Signs(0,-1))\nprint(opposite_Signs(-1,0))\nprint(opposite_Signs(0,0))\n<|endoftext|>"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\treturn n % 12 == 0\n\ndef nth_octagonal(n): \n\t\treturn 12 * n + 1\n\ndef main(): \n\tprint nth_octagonal(1)\n\tprint nth_octagonal(2)\n\tprint nth_octagonal(3)\n\tprint nth_octagonal(4)\n\tprint nth_octagonal(5)\n\tprint nth_octagonal(6)\n\tprint nth_octagonal(7)\n\tprint nth_octagonal(8)\n\tprint nth_octagonal(9)\n\tprint nth_octagonal(10)\n\tprint nth_octagonal(11)\n\tprint nth_octagonal(12)\n\tprint nth_octagonal(13)\n\tprint nth_octagonal(14)\n\tprint nth_octagonal(15)\n\tprint nth_octagonal(16)\n\tprint nth_octagonal(17)\n\tprint nth_octagonal(18)\n\tprint nth_octagonal(19)\n\tprint nth_octagonal(20)\n\tprint nth_octagonal(21)\n\tprint nth_octagonal(22)\n\tprint nth_octagonal(23)\n\tprint nth_octagonal(24)\n\tprint nth_octagonal(25)\n\tprint nth_octagonal(26)\n\tprint nth_octagonal(27)\n\tprint nth_octagonal(28)\n\tprint nth_octagonal(29)\n\tprint nth_octagonal(30)\n\tprint nth_octagonal(31)\n\tprint nth_octagonal(32)\n\tprint nth_octagonal(33)\n\tprint nth_octagonal(34)\n\tprint nth_octagonal(35)\n\tprint nth_octagonal(36)\n\tprint nth_octagonal(37)\n\tprint nth_octagonal(38)\n\tprint nth_octagonal(39)\n\tprint nth_octagonal(40)\n\tprint nth"}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\t# code here \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telif n == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\tmax_len = 0 \n\t\t\tfor i in range(n): \n\t\t\t\tmax_len = max(max_len, max_len_sub(arr, n-1) + abs(arr[i] - arr[i+1])) \n\t\t\treturn max_len \n\nprint(max_len_sub([1, 2, 3, 4, 5], 5))\nprint(max_len_sub([1, 2, 3, 4, 5], 4))\nprint(max_len_sub([1, 2, 3, 4, 5], 3))\nprint(max_len_sub([1, 2, 3, 4, 5], 2))\nprint(max_len_sub([1, 2, 3, 4, 5], 1))\nprint(max_len_sub([1, 2, 3, 4, 5], 0))\nprint(max_len_sub([1, 2, 3, 4, 5], -1))\nprint(max_len_sub([1, 2, 3, 4, 5], -2))\nprint(max_len_sub([1, 2, 3, 4, 5], -3))\nprint(max_len_sub([1, 2, 3, 4, 5], -4))\nprint(max_len_sub([1, 2, 3, 4, 5], -5))\nprint(max_len_sub([1, 2, 3, 4, 5], -6))\nprint(max_len_sub([1, 2, 3, 4, 5], -7))\nprint(max_len_sub([1, 2, 3, 4, 5], -8))\nprint(max_len_sub([1, 2, 3, 4, 5], -9))\nprint(max_len_sub([1, 2, 3, 4, 5], -10"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t\tcount=0\n\t\tfor i in range(len(s)-n+1):\n\t\t\tfor j in range(i+n,len(s)+1):\n\t\t\t\tif sum(s[i:j])==n:\n\t\t\t\t\tcount+=1\n\t\treturn count\n\nprint(count_Substrings(\"1234567890\",5))\n<|endoftext|>"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\"\"\"\nWrite a python function to find largest number in a list.\n\"\"\"\ndef largest_num(xs):\n  return max(xs)\n\n\"\"\"\nWrite a python function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_nums(xs):\n  return sum(xs)\n\n\"\"\"\nWrite a python function to find the product of all the numbers in a list.\n\"\"\"\ndef product_nums(xs):\n  return reduce(lambda x,y: x*y, xs)\n\n\"\"\"\nWrite a python function to find the average of all the numbers in a list.\n\"\"\"\ndef average_nums(xs):\n  return sum_nums(xs)/len(xs)\n\n\"\"\"\nWrite a python function to find the median of all the numbers in a list.\n\"\"\"\ndef median_nums(xs):\n  xs.sort()\n  if len(xs)%2 == 0:\n    return (xs[len(xs)//2-1] + xs[len(xs)//2])/2\n  else:\n    return xs[len(xs)//2]\n\n\"\"\"\nWrite a python function to find the mode of all the numbers in a list.\n\"\"\"\ndef mode_nums(xs):\n  counts = {}\n  for x in xs:\n    counts[x] = counts.get(x, 0) + 1\n  return max(counts.items(), key=operator.itemgetter(1))[0]\n\n\"\"\"\nWrite a python function to find the variance of all the numbers in a list.\n\"\"\"\ndef variance_nums(xs):\n  mean = average_nums(xs)\n  return sum([(x-mean)**2 for x in xs])/len(xs)\n\n\"\"\"\nWrite a python function to find the standard deviation of all the numbers in a list.\n\"\"\"\ndef standard_deviation_nums(xs):\n  return math.sqrt(variance_nums(xs))\n\n\"\"\"\nWrite a python function to find the variance of a list of numbers.\n\"\"\"\ndef variance_list(xs):\n  mean = average_nums(xs)\n  return sum([(x-mean)**2 for x in xs])/len(xs)\n\n\"\"\"\nWrite a python function to find the standard deviation of a list of numbers.\n\"\"\"\ndef standard_deviation_list(xs):\n  return math.sqrt(variance_list(xs))"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t\tmax_diff = 0\n\t\tfor i in range(len(test_list)-1):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i] + test_list[j] > max_diff:\n\t\t\t\t\tmax_diff = test_list[i] + test_list[j]\n\t\treturn max_diff\n\nprint(max_difference([1, 2, 3, 4, 5]))\nprint(max_difference([1, 2, 3, 4, 5, 6]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_difference([1,"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nprint(subject_marks([(100, 100), (90, 90), (80, 80), (70, 70), (60, 60), (50, 50)]))\n<|endoftext|>"}
{"ID": 428, "source": "MBPP:65", "prompt": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t", "predict": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_2(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_2(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_3(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_3(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_4(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_4(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_5(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_5(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_6(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_6(data_list[1:])\n\n\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum_7(data_list):\n\t\tif len(data_list) == 1:\n\t\t\treturn data_list[0]\n\t\telse:\n\t\t\treturn data_list[0] + recursive_list_sum_7(data_list"}
{"ID": 429, "source": "MBPP:66", "prompt": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t\tcount = 0\n\t\tfor i in list:\n\t\t\tif i > 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t\tif n == 0:\n\t\t\treturn 1\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn bell_number(n-1) + bell_number(n-2)\n\ndef bell_number_2(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_2(n-1) + bell_number_2(n-2)\n\ndef bell_number_3(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_3(n-1) + bell_number_3(n-2)\n\ndef bell_number_4(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_4(n-1) + bell_number_4(n-2)\n\ndef bell_number_5(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_5(n-1) + bell_number_5(n-2)\n\ndef bell_number_6(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_6(n-1) + bell_number_6(n-2)\n\ndef bell_number_7(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_7(n-1) + bell_number_7(n-2)\n\ndef bell_number_8(n):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number_8(n"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\t# Write your code here\n\t\tif len(A) == 1:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(1, len(A)):\n\t\t\t\tif A[i] > A[i-1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nA = [1, 2, 3, 4, 5]\nprint(is_Monotonic(A))\n<|endoftext|>"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t\tfor i in range(len(s)):\n\t\t\tif s[i] not in l:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15"}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t\tfor i in range(len(Input)):\n\t\t\tif len(Input[i])!= k:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(get_equal([1,2,3,4,5], 2))\nprint(get_equal([1,2,3,4,5], 3))\nprint(get_equal([1,2,3,4,5], 4))\nprint(get_equal([1,2,3,4,5], 5))\nprint(get_equal([1,2,3,4,5], 6))\nprint(get_equal([1,2,3,4,5], 7))\nprint(get_equal([1,2,3,4,5], 8))\nprint(get_equal([1,2,3,4,5], 9))\nprint(get_equal([1,2,3,4,5], 10))\nprint(get_equal([1,2,3,4,5], 11))\nprint(get_equal([1,2,3,4,5], 12))\nprint(get_equal([1,2,3,4,5], 13))\nprint(get_equal([1,2,3,4,5], 14))\nprint(get_equal([1,2,3,4,5], 15))\nprint(get_equal([1,2,3,4,5], 16))\nprint(get_equal([1,2,3,4,5], 17))\nprint(get_equal([1,2,3,4,5], 18))\nprint(get_equal([1,2,3,4,5], 19))\nprint(get_equal([1,2,3,4,5], 20))\nprint(get_equal([1,2,3,4,5], 21))\nprint(get_equal([1,2,3,4,5], 22))\nprint(get_equal([1,2,3,4,5], 23))\nprint(get_equal([1,2,3,4,5], 24))\nprint(get_equal"}
{"ID": 434, "source": "MBPP:71", "prompt": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t\tif len(nums) <= 1:\n\t\t\treturn nums\n\t\telse:\n\t\t\tmid = len(nums) // 2\n\t\t\tleft = comb_sort(nums[:mid])\n\t\t\tright = comb_sort(nums[mid:])\n\t\t\treturn merge(left, right)\n\ndef merge(left, right):\n\tresult = []\n\ti = 0\n\tj = 0\n\twhile i < len(left) and j < len(right):\n\t\tif left[i] < right[j]:\n\t\t\tresult.append(left[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tresult.append(right[j])\n\t\t\tj += 1\n\tresult += left[i:]\n\tresult += right[j:]\n\treturn result\n\ndef test_comb_sort():\n\tassert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\tassert comb_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\tassert comb_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert comb_sort([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\tassert comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tassert comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert comb_sort([1, 2, 3, 4"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t\tif n%4==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(dif_Square(10))\nprint(dif_Square(11))\nprint(dif_Square(12))\nprint(dif_Square(13))\nprint(dif_Square(14))\nprint(dif_Square(15))\nprint(dif_Square(16))\nprint(dif_Square(17))\nprint(dif_Square(18))\nprint(dif_Square(19))\nprint(dif_Square(20))\nprint(dif_Square(21))\nprint(dif_Square(22))\nprint(dif_Square(23))\nprint(dif_Square(24))\nprint(dif_Square(25))\nprint(dif_Square(26))\nprint(dif_Square(27))\nprint(dif_Square(28))\nprint(dif_Square(29))\nprint(dif_Square(30))\nprint(dif_Square(31))\nprint(dif_Square(32))\nprint(dif_Square(33))\nprint(dif_Square(34))\nprint(dif_Square(35))\nprint(dif_Square(36))\nprint(dif_Square(37))\nprint(dif_Square(38))\nprint(dif_Square(39))\nprint(dif_Square(40))\nprint(dif_Square(41))\nprint(dif_Square(42))\nprint(dif_Square(43))\nprint(dif_Square(44))\nprint(dif_Square(45))\nprint(dif_Square(46))\nprint(dif_Square(47))\nprint(dif_Square(48))\nprint(dif_Square(49))\nprint(dif_Square(50))\nprint(dif_Square(51))\nprint(dif_Square(52))\nprint(dif_Square(53))\nprint(dif_Square(54))\nprint(dif_Square(55))\nprint(dif_Square(56))\nprint(dif_Square(57))\nprint(dif_Square(58))\n"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t\treturn re.split(r'(\\w+)', text)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_2(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_3(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_4(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_5(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_6(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_7(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_8(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_9(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_10(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_11(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n\"\"\"\ndef longest_substring_12(text):\n\t\treturn max(text, key=len)\n\n\"\"\"\nWrite a function to find the longest substring in a given string.\n"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(patterns)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ncolors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\npatterns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_samepatterns(colors, patterns))\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(patterns)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ncolors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\npatterns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_samepatterns(colors, patterns))\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(patterns)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ncolors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\npatterns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_samepatterns(colors, patterns))\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(patterns)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\ncolors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\npatterns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_samepatterns"}
{"ID": 438, "source": "MBPP:75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t\treturn [x for x in test_list if all(x[i] % K == 0 for i in range(len(x)))]\n\n\"\"\"\nWrite a function to find the first element of a list which is greater than or equal to the given number.\n\"\"\"\ndef find_first_greater_than_or_equal_to(test_list, num):\n\t\treturn [x for x in test_list if x >= num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is less than or equal to the given number.\n\"\"\"\ndef find_first_less_than_or_equal_to(test_list, num):\n\t\treturn [x for x in test_list if x <= num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is greater than the given number.\n\"\"\"\ndef find_first_greater_than(test_list, num):\n\t\treturn [x for x in test_list if x > num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is less than the given number.\n\"\"\"\ndef find_first_less_than(test_list, num):\n\t\treturn [x for x in test_list if x < num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is greater than or equal to the given number.\n\"\"\"\ndef find_first_greater_than_or_equal_to(test_list, num):\n\t\treturn [x for x in test_list if x >= num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is less than or equal to the given number.\n\"\"\"\ndef find_first_less_than_or_equal_to(test_list, num):\n\t\treturn [x for x in test_list if x <= num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is greater than the given number.\n\"\"\"\ndef find_first_greater_than(test_list, num):\n\t\treturn [x for x in test_list if x > num][0]\n\n\"\"\"\nWrite a function to find the first element of a list which is less than the given number.\n\"\"\"\ndef find_first_"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t\tcount = 0\n\t\tfor i in range(m):\n\t\t\tfor j in range(n):\n\t\t\t\tif i == 0 or j == 0 or i == m-1 or j == n-1:\n\t\t\t\t\tcount += 1\n\t\t\t\telse:\n\t\t\t\t\tcount += 4\n\t\treturn count\n\nprint(count_Squares(5,5))\n<|endoftext|>"}
{"ID": 440, "source": "MBPP:77", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t\tif n%2==0:\n\t\t\treturn n\n\t\telse:\n\t\t\treturn n+1\n\ndef sum_of_even_and_odd_digits(n):\n\tsum_of_even_digits = 0\n\tsum_of_odd_digits = 0\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tsum_of_even_digits += i\n\t\telse:\n\t\t\tsum_of_odd_digits += i\n\treturn sum_of_even_digits - sum_of_odd_digits\n\nprint(sum_of_even_and_odd_digits(1000))\n<|endoftext|>"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t\tcount = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif(i & 1):\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_With_Odd_SetBits(1000000))\n<|endoftext|>"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t\treturn len(s) % 2 == 0\n\nprint(word_len(\"hello\"))\nprint(word_len(\"hello world\"))\nprint(word_len(\"hello world hello\"))\nprint(word_len(\"hello world hello world\"))\nprint(word_len(\"hello world hello world hello\"))\nprint(word_len(\"hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world hello world\"))\nprint(word_len(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\t\"\"\"\n\t\t:param n: the number of tetrahedral numbers to find\n\t\t:return: the nth tetrahedral number\n\t\t\"\"\"\n\t\treturn 12*n + 1\n\ndef test_tetrahedral_number():\n\tassert tetrahedral_number(0) == 1\n\tassert tetrahedral_number(1) == 12\n\tassert tetrahedral_number(2) == 24\n\tassert tetrahedral_number(3) == 36\n\tassert tetrahedral_number(4) == 48\n\tassert tetrahedral_number(5) == 60\n\tassert tetrahedral_number(6) == 72\n\tassert tetrahedral_number(7) == 84\n\tassert tetrahedral_number(8) == 96\n\tassert tetrahedral_number(9) == 108\n\tassert tetrahedral_number(10) == 120\n\tassert tetrahedral_number(11) == 132\n\tassert tetrahedral_number(12) == 144\n\tassert tetrahedral_number(13) == 156\n\tassert tetrahedral_number(14) == 168\n\tassert tetrahedral_number(15) == 180\n\tassert tetrahedral_number(16) == 192\n\tassert tetrahedral_number(17) == 204\n\tassert tetrahedral_number(18) == 216\n\tassert tetrahedral_number(19) == 228\n\tassert tetrahedral_number(20) == 240\n\tassert tetrahedral_number(21) == 252\n\tassert tetrahedral_number(22) == 264\n\tassert tetrahedral_number(23) == 276\n\tassert tetrahedral_number(24) == 288\n\tassert tetrahedral_number(25) == 300\n\tassert tetrahedral_number(26) == 312\n\tassert tetrahedral_number(27) == 324\n\tassert"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t\treturn zip(test_tup1, test_tup2)\n\n\"\"\"\nWrite a function to unzip the given list of tuples.\n\"\"\"\ndef unzip_tuples(test_tup_list):\n\t\treturn list(zip(*test_tup_list))\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_2(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_3(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_4(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_5(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_6(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_7(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key=len)\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring_8(test_str1, test_str2):\n\t\treturn max(test_str1, test_str2, key="}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\t\treturn 4/3*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 4/3*3.14*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\t\treturn 4/3*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 4/3*3.14*r**3*h**2\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_area_cone(r,h):\n\t\treturn 4/3*3.14*r**2*h**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_area_cube(l):\n\t\treturn l**2\n\n\"\"\"\nWrite a function to find the volume of a hexahedron.\n\"\"\"\ndef volume_hexahedron(l):\n\t\treturn 12*l**3\n\n\"\"\"\nWrite a function to find the surface area of a hexahedron.\n\"\"\"\ndef surface_area_hexahedron(l):\n\t\treturn 12*l**2\n\n\"\"\"\nWrite a function to find the volume of a octahedron.\n\"\"\"\ndef volume_octahedron(l):\n\t\treturn 12*l**4\n\n\"\"\"\nWrite a function to find the surface area of a octahedron.\n\"\"\"\ndef surface_area_octahedron(l):\n\t\treturn 12*l**3\n\n\"\"\"\nWrite a function to find the volume of a dodecahedron.\n\"\"\"\ndef volume_dodecahedron(l):\n\t\treturn 1"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t\treturn ''.join(sorted(strr))\n\nprint(get_Char(\"abc\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint(get_Char(\"abca\"))\nprint"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t\t\"\"\"\n\t\tWrite a function to find the n-th number in newman conway sequence.\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn sequence(n-1) + sequence(n-2)\n\nprint(sequence(10))\n<|endoftext|>"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4/3*pi*r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 2*pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r,h):\n\t\treturn 4*pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r,h):\n\t\treturn 4*pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a paraboloid.\n\"\"\"\ndef surfacearea_paraboloid(r):\n\t\treturn 2*pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a paraboloid.\n\"\"\"\ndef volume_paraboloid(r):\n\t\treturn 4*pi*r**2\n\n\"\"\"\nWrite a function to find the surface area of a hyperboloid.\n\"\"\"\ndef surfacearea_hyperboloid(r):\n\t\treturn 2*pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a hyperboloid.\n\"\"\"\ndef volume_hyperboloid(r):\n\t\treturn 4*pi*r**2\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4/3*pi*r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\t\"\"\"\n\t\t:param n: int\n\t\t:return: int\n\t\t\"\"\"\n\t\treturn (n*(n+1))/2\n\nprint(centered_hexagonal_number(10))\n<|endoftext|>"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t\treturn {**dict1, **dict2, **dict3}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n\t\treturn {**dict1, **dict2, **dict3, **dict4}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_eight(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_nine(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9}\n\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_ten(dict1,dict2, dict3, dict4, dict5, dict6,"}
{"ID": 451, "source": "MBPP:88", "prompt": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t", "predict": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count_2(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count_3(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count_4(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count_5(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count_6(list1):\n\t\tfreq_dict = {}\n\t\tfor i in list1:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\tif N == 0:\n\t\t\treturn 0\n\t\telif N == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn closest_num(N-1) + 1\n\nprint(closest_num(10))\nprint(closest_num(11))\nprint(closest_num(12))\nprint(closest_num(13))\nprint(closest_num(14))\nprint(closest_num(15))\nprint(closest_num(16))\nprint(closest_num(17))\nprint(closest_num(18))\nprint(closest_num(19))\nprint(closest_num(20))\nprint(closest_num(21))\nprint(closest_num(22))\nprint(closest_num(23))\nprint(closest_num(24))\nprint(closest_num(25))\nprint(closest_num(26))\nprint(closest_num(27))\nprint(closest_num(28))\nprint(closest_num(29))\nprint(closest_num(30))\nprint(closest_num(31))\nprint(closest_num(32))\nprint(closest_num(33))\nprint(closest_num(34))\nprint(closest_num(35))\nprint(closest_num(36))\nprint(closest_num(37))\nprint(closest_num(38))\nprint(closest_num(39))\nprint(closest_num(40))\nprint(closest_num(41))\nprint(closest_num(42))\nprint(closest_num(43))\nprint(closest_num(44))\nprint(closest_num(45))\nprint(closest_num(46))\nprint(closest_num(47))\nprint(closest_num(48))\nprint(closest_num(49))\nprint(closest_num(50))\nprint(closest_num(51))\nprint(closest_num(52))\nprint(closest_num(53))\nprint(closest_num(54))\nprint(closest_num(55))\nprint(closest_num(5"}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t\treturn max(len(word) for word in list1)\n\nprint(len_log(words))\n<|endoftext|>"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i:i+len(sub_str)] == sub_str:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(find_substring(\"abcde\", \"cde\"))\nprint(find_substring(\"abcde\", \"abc\"))\nprint(find_substring(\"abcde\", \"def\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abcde\"))\nprint(find_substring(\"abcde\", \"abc"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t\tif n == 1:\n\t\t\treturn True\n\t\telif n == 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn is_undulating(n-1) or is_undulating(n-2)\n\nprint(is_undulating(10))\nprint(is_undulating(20))\nprint(is_undulating(30))\nprint(is_undulating(40))\nprint(is_undulating(50))\nprint(is_undulating(60))\nprint(is_undulating(70))\nprint(is_undulating(80))\nprint(is_undulating(90))\nprint(is_undulating(100))\nprint(is_undulating(110))\nprint(is_undulating(120))\nprint(is_undulating(130))\nprint(is_undulating(140))\nprint(is_undulating(150))\nprint(is_undulating(160))\nprint(is_undulating(170))\nprint(is_undulating(180))\nprint(is_undulating(190))\nprint(is_undulating(200))\nprint(is_undulating(210))\nprint(is_undulating(220))\nprint(is_undulating(230))\nprint(is_undulating(240))\nprint(is_undulating(250))\nprint(is_undulating(260))\nprint(is_undulating(270))\nprint(is_undulating(280))\nprint(is_undulating(290))\nprint(is_undulating(300))\nprint(is_undulating(310))\nprint(is_undulating(320))\nprint(is_undulating(330))\nprint(is_undulating(340))\nprint(is_undulating(350))\nprint(is_undulating(360))\nprint(is_undulating(370))\nprint(is_undulating(380))\nprint(is_undulating(390))\nprint("}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t\treturn a**b\n\nprint(power(2,3))\nprint(power(2,4))\nprint(power(2,5))\nprint(power(2,6))\nprint(power(2,7))\nprint(power(2,8))\nprint(power(2,9))\nprint(power(2,10))\nprint(power(2,11))\nprint(power(2,12))\nprint(power(2,13))\nprint(power(2,14))\nprint(power(2,15))\nprint(power(2,16))\nprint(power(2,17))\nprint(power(2,18))\nprint(power(2,19))\nprint(power(2,20))\nprint(power(2,21))\nprint(power(2,22))\nprint(power(2,23))\nprint(power(2,24))\nprint(power(2,25))\nprint(power(2,26))\nprint(power(2,27))\nprint(power(2,28))\nprint(power(2,29))\nprint(power(2,30))\nprint(power(2,31))\nprint(power(2,32))\nprint(power(2,33))\nprint(power(2,34))\nprint(power(2,35))\nprint(power(2,36))\nprint(power(2,37))\nprint(power(2,38))\nprint(power(2,39))\nprint(power(2,40))\nprint(power(2,41))\nprint(power(2,42))\nprint(power(2,43))\nprint(power(2,44))\nprint(power(2,45))\nprint(power(2,46))\nprint(power(2,47))\nprint(power(2,48))\nprint(power(2,49))\nprint(power(2,50))\nprint(power(2,51))\nprint(power(2,52))\nprint(power(2,53))\nprint("}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t\tmin_index = 0\n\t\tmin_value = test_list[0]\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i] < min_value:\n\t\t\t\tmin_index = i\n\t\t\t\tmin_value = test_list[i]\n\t\treturn min_index\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum(test_list):\n\t\tmax_index = 0\n\t\tmax_value = test_list[0]\n\t\tfor i in range(1, len(test_list)):\n\t\t\tif test_list[i] > max_value:\n\t\t\t\tmax_index = i\n\t\t\t\tmax_value = test_list[i]\n\t\treturn max_index\n\n\"\"\"\nWrite a function to extract the index average value record from the given tuples.\n\"\"\"\ndef index_average(test_list):\n\t\tsum_value = 0\n\t\tcount = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum_value += test_list[i]\n\t\t\tcount += 1\n\t\treturn sum_value / count\n\n\"\"\"\nWrite a function to extract the index sum of squares value record from the given tuples.\n\"\"\"\ndef index_sum_of_squares(test_list):\n\t\tsum_of_squares = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum_of_squares += (test_list[i] ** 2)\n\t\treturn sum_of_squares\n\n\"\"\"\nWrite a function to extract the index sum of squares value record from the given tuples.\n\"\"\"\ndef index_sum_of_squares_of_sum(test_list):\n\t\tsum_of_squares = 0\n\t\tfor i in range(len(test_list)):\n\t\t\tsum_of_squares += (test_list[i] ** 2) + (test_list[i] ** 2)\n\t\treturn sum_of_squares\n\n\"\"\"\nWrite a function to extract the index sum of squares value record from the given tuples.\n\"\"\"\ndef index_sum_of_squares_of_sum_of_squares(test_list):\n\t\tsum_of_squares = 0\n\t\tfor i in"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t\tmin_len = len(lst)\n\t\tfor i in range(len(lst)):\n\t\t\tfor j in range(i+1, len(lst)):\n\t\t\t\tif lst[i] < lst[j]:\n\t\t\t\t\tmin_len = min(min_len, j-i)\n\t\treturn min_len\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Find_Min_Length(lst))\n<|endoftext|>"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t\tif n == 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn 1 + divisor(n-1)\n\nprint(divisor(10))\n<|endoftext|>"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\tfreq_list = []\n\t\tfor i in list1:\n\t\t\tfor j in i:\n\t\t\t\tif j not in freq_list:\n\t\t\t\t\tfreq_list.append(j)\n\t\treturn freq_list\n\nprint(frequency_lists([[1,2,3],[4,5,6],[7,8,9]]))\n<|endoftext|>"}
{"ID": 461, "source": "MBPP:98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t", "predict": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\treturn result, len(numbers)\n\ndef divide_num(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult /= i\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_2(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_3(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_4(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_5(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_6(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_7(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_8(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_9(numbers):\n\t\tresult = 1\n\t\tfor i in numbers:\n\t\t\tresult *= i\n\t\t\tresult /= len(numbers)\n\t\treturn result, len(numbers)\n\ndef multiply_num_divide_10(numbers):\n\t\tresult = 1"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn \"0\"\n\t\telif n == 1:\n\t\t\treturn \"1\"\n\t\telse:\n\t\t\treturn decimal_to_binary(n//2) + str(n%2)\n\n\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(n): \n\t\t# Write your code here\n\t\tif n == \"0\":\n\t\t\treturn 0\n\t\telif n == \"1\":\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn binary_to_decimal(n[1:]) + int(n[0])*2**len(n)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hex_to_binary(n): \n\t\t# Write your code here\n\t\tif n == \"0\":\n\t\t\treturn \"0\"\n\t\telif n == \"1\":\n\t\t\treturn \"1\"\n\t\telse:\n\t\t\treturn hex_to_binary(n[2:]) + n[1:]\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hex(n): \n\t\t# Write your code here\n\t\tif n == \"0\":\n\t\t\treturn \"0\"\n\t\telif n == \"1\":\n\t\t\treturn \"1\"\n\t\telse:\n\t\t\treturn binary_to_hex(n[2:]) + n[1:]\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hex(n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn \"0\"\n\t\telif n == 1:\n\t\t\treturn \"1\"\n\t\telse:\n\t\t\treturn decimal_to_hex(n//16) + str(n%16)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hex_to_decimal(n): \n\t\t# Write your code here\n\t\tif n == \"0\":\n\t\t\treturn 0\n\t\telif n == \"1\":\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn hex_to_decimal(n[1:]) + int(n[0])*16\n\n\"\"\"\nWrite a function"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\t# Write your code here\n\t\tif num < 10:\n\t\t\treturn num\n\t\telse:\n\t\t\treturn next_smallest_palindrome(num//10) + 10*num%10\n\nprint(next_smallest_palindrome(12345))\nprint(next_smallest_palindrome(123456))\nprint(next_smallest_palindrome(1234567))\nprint(next_smallest_palindrome(12345678))\nprint(next_smallest_palindrome(123456789))\nprint(next_smallest_palindrome(1234567890))\nprint(next_smallest_palindrome(12345678901))\nprint(next_smallest_palindrome(123456789012))\nprint(next_smallest_palindrome(1234567890123))\nprint(next_smallest_palindrome(12345678901234))\nprint(next_smallest_palindrome(123456789012345))\nprint(next_smallest_palindrome(1234567890123456))\nprint(next_smallest_palindrome(12345678901234567))\nprint(next_smallest_palindrome(123456789012345678))\nprint(next_smallest_palindrome(1234567890123456789))\nprint(next_smallest_palindrome(12345678901234567890))\nprint(next_smallest_palindrome(123456789012345678901))\nprint(next_smallest_palindrome(1234567890123456789012))\nprint(next_smallest_palindrome(1234567890123"}
{"ID": 464, "source": "MBPP:101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t\t# Write your code here\n\t\tif k == 0:\n\t\t\treturn arr[0]\n\t\telif k == n:\n\t\t\treturn arr[-1]\n\t\telse:\n\t\t\tmid = n//2\n\t\t\tif k < mid:\n\t\t\t\treturn kth_element(arr[mid:], n, k)\n\t\t\telse:\n\t\t\t\treturn kth_element(arr[:mid], n, k-mid)\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k))\n<|endoftext|>"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(word):\n\t\treturn '_'.join(x.lower() for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case(word):\n\t\treturn ''.join(x.capitalize() or '_' for x in word.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence(sentence):\n\t\treturn''.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores(sentence):\n\t\treturn '_'.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces(sentence):\n\t\treturn''.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores(sentence):\n\t\treturn '_'.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores_and_spaces(sentence):\n\t\treturn''.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores_and_spaces_and_underscores(sentence):\n\t\treturn '_'.join(x.capitalize() or '_' for x in sentence.split(' '))\n\n\"\"\"\nWrite a function to convert a string to title case.\n\"\"\"\ndef title_case_sentence_with_underscores_and_spaces_and_underscores_and_spaces_"}
{"ID": 466, "source": "MBPP:103", "prompt": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t\tif n == 1: \n\t\t\treturn m\n\t\telse: \n\t\t\treturn eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n\nprint(eulerian_num(10, 10))\n<|endoftext|>"}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t\treturn sorted(input_list, key=lambda x: x[0])\n\nprint(sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n<|endoftext|>"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t\tcount = 0\n\t\tfor i in lst:\n\t\t\tif i:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t\ttest_tup.append(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_2(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_3(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_4(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_5(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_6(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_7(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_8(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\ndef remove_lists_9(test_list, test_tup):\n\t\ttest_tup.remove(test_list)\n\t\treturn test_tup\n\n\"\"\"\nWrite a function to remove the given list from the given tuples.\n\"\"\"\n"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t\tcount = 0\n\t\tfor i in range(L,R+1) :\n\t\t\tif i > 0 and i < 10 :\n\t\t\t\tcount += 1\n\t\t\telif i > 10 and i < 16 :\n\t\t\t\tcount += 2\n\t\t\telif i > 16 and i < 256 :\n\t\t\t\tcount += 4\n\t\t\telse :\n\t\t\t\tcount += 8\n\t\treturn count\n\nprint(count_Hexadecimal(0,10))\nprint(count_Hexadecimal(10,256))\nprint(count_Hexadecimal(256,32768))\nprint(count_Hexadecimal(32768,65536))\nprint(count_Hexadecimal(65536,1048576))\nprint(count_Hexadecimal(1048576,16777216))\nprint(count_Hexadecimal(16777216,268435456))\nprint(count_Hexadecimal(268435456,4294967296))\nprint(count_Hexadecimal(4294967296,65536))\nprint(count_Hexadecimal(65536,131072))\nprint(count_Hexadecimal(131072,262144))\nprint(count_Hexadecimal(262144,524288))\nprint(count_Hexadecimal(524288,1048576))\nprint(count_Hexadecimal(1048576,2097152))\nprint(count_Hexadecimal(2097152,4194304))\nprint(count_Hexadecimal(4194304,8388608))\nprint(count_Hexadecimal(8388608,16777216))\nprint(count_Hexadecimal(16777216,33554432))\nprint(count_Hexadecimal(33"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t\t# create a heap\n\t\theap = []\n\t\theap.append(num1)\n\t\theap.append(num2)\n\t\theap.append(num3)\n\t\t# create a list to store the merged list\n\t\tmerged_list = []\n\t\t# create a counter to keep track of the number of elements in the heap\n\t\tcounter = 0\n\t\t# while the heap is not empty\n\t\twhile len(heap) > 0:\n\t\t\t# get the top element from the heap\n\t\t\ttop = heap[0]\n\t\t\t# remove the top element from the heap\n\t\t\theap.pop(0)\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top < num1:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top < num2:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top < num3:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top > num1:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top > num2:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t\t# if the top element is smaller than the current top element\n\t\t\tif top > num3:\n\t\t\t\t# add the top element to the merged list\n\t\t\t\tmerged_list.append(top)\n\t\t\t\t# increment the counter\n\t\t\t\tcounter += 1\n\t\t# return the merged list\n\t\treturn merged_list, counter\n\n# Driver code\nif __name__ == '__main__':\n\tnum1 = 10\n\tnum2 = 20\n\tnum"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tif s[i] == '1':\n\t\t\t\tcount += 1\n\t\treturn count\n\ndef main():\n\ts = input(\"Enter a binary string: \")\n\tn = len(s)\n\tprint(\"The count of rotations of the binary string with odd value is: \", odd_Equivalent(s,n))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t\tmissing_list = []\n\t\tfor i in range(strt_val, stop_val+1):\n\t\t\tif i not in test_list:\n\t\t\t\tmissing_list.append(i)\n\t\treturn missing_list\n\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 10))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 11))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 12))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 13))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 14))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 15))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 16))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 17))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 18))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 19))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 20))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 21))\nprint(extract_missing([1,2,3,4,5,6,7,8,9,10], 1, 22))\nprint(extract_missing"}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t\tif not nestedlist:\n\t\t\treturn []\n\t\tif len(nestedlist) == 1:\n\t\t\treturn nestedlist[0]\n\t\tif len(nestedlist) == 2:\n\t\t\treturn common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1])\n\t\treturn common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1]) + common_in_nested_lists(nestedlist[2:])\n\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6]]))\nprint(common_in_nested_lists([[1,2,3],[4,5]]))\nprint(common_in_nested_lists([[1,2,3]]))\nprint(common_in_nested_lists([]))\nprint(common_in_nested_lists([[]]))\nprint(common_in_nested_lists([[1]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6]]))\nprint(common_in_nested_lists([[1,2,3],[4,5]]))\nprint(common_in_nested_lists([[1,2,3],[4]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11]]))\nprint(common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint("}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t\treturn 2*diameter + 2*height\n\nprint(perimeter(10,5))\n<|endoftext|>"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t\ttry:\n\t\t\tint(text)\n\t\t\treturn True\n\t\texcept ValueError:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a float or not.\n\"\"\"\ndef check_float(text):\n\t\ttry:\n\t\t\tfloat(text)\n\t\t\treturn True\n\t\texcept ValueError:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a boolean or not.\n\"\"\"\ndef check_boolean(text):\n\t\tif text.lower() in ['true', 'false']:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a list or not.\n\"\"\"\ndef check_list(text):\n\t\tif text.startswith('[') and text.endswith(']'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a dictionary or not.\n\"\"\"\ndef check_dictionary(text):\n\t\tif text.startswith('{') and text.endswith('}'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a string or not.\n\"\"\"\ndef check_string(text):\n\t\tif text.startswith('\"') and text.endswith('\"'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a list of strings or not.\n\"\"\"\ndef check_list_of_strings(text):\n\t\tif text.startswith('[') and text.endswith(']'):\n\t\t\tif text.count('\"') == len(text):\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a list of integers or not.\n\"\"\"\ndef check_list_of_integers(text):\n\t\tif text.startswith('[') and text.endswith(']'):\n\t\t\tif text.count(',') == len(text):\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a string represents a list of floats or not.\n\"\"\"\ndef check_list_of_floats(text):\n\t\tif text.startswith('[') and text.endswith(']'):\n\t\t\tif text.count(',') == len"}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i[0] in freq_dict:\n\t\t\t\tfreq_dict[i[0]] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i[0]] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to find the frequency of each letter in the given string.\n\"\"\"\ndef find_freq(test_str):\n\t\tfreq_dict = {}\n\t\tfor i in test_str:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to find the frequency of each letter in the given string.\n\"\"\"\ndef find_freq_2(test_str):\n\t\tfreq_dict = {}\n\t\tfor i in test_str:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to find the frequency of each letter in the given string.\n\"\"\"\ndef find_freq_3(test_str):\n\t\tfreq_dict = {}\n\t\tfor i in test_str:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to find the frequency of each letter in the given string.\n\"\"\"\ndef find_freq_4(test_str):\n\t\tfreq_dict = {}\n\t\tfor i in test_str:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to find the frequency of each letter in the given string.\n\"\"\"\ndef find_freq_5(test_str):\n\t\tfreq_dict = {}\n\t\tfor i in test_str:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t\tfor i in list1:\n\t\t\tif i:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t\treturn sum(nums)\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\t\treturn tuple(num)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters.\n\"\"\"\ndef string_to_tuple(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a given tuple of characters into a string.\n\"\"\"\ndef tuple_to_string(nums):\n\t\treturn ''.join(nums)\n\n\"\"\"\nWrite a function to convert a given string into a tuple of characters."}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = float(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = 0.0\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to int.\n\"\"\"\ndef list_to_int(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = int(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = 0\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to str.\n\"\"\"\ndef list_to_str(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = str(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = \"\"\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to bool.\n\"\"\"\ndef list_to_bool(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = bool(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = False\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to list.\n\"\"\"\ndef list_to_list(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = list(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = []\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to tuple.\n\"\"\"\ndef list_to_tuple(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\ttry:\n\t\t\t\ttest_list[i] = tuple(test_list[i])\n\t\t\texcept ValueError:\n\t\t\t\ttest_list[i] = ()\n\t\treturn test_list\n\n\"\"\"\nWrite a function to convert"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_2(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_3(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_4(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_5(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_6(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_7(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_8(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_9(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list_10(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https://"}
{"ID": 482, "source": "MBPP:119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t\tmax_product = 0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tproduct = list1[i][0] * list1[j][0]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(max_product_tuple([[1,2,3],[4,5,6],[7,8,9]]))\n<|endoftext|>"}
{"ID": 484, "source": "MBPP:121", "prompt": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t", "predict": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tfor k in range(j+1, n):\n\t\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tprint(A[i], A[j], A[k])\n\t\t\t\t\t\treturn count\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(A)\nsum = 15\ncount = 0\nprint(check_triplet(A, n, sum, count))\n<|endoftext|>"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\telif n == 2: \n\t\t\treturn 2\n\t\telse: \n\t\t\treturn smartNumber(n-1) + smartNumber(n-2)\n\nprint(smartNumber(10))\n<|endoftext|>"}
{"ID": 486, "source": "MBPP:123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t", "predict": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t\tsum = 0\n\t\tfor i in range(1, limit):\n\t\t\tfor j in range(i+1, limit):\n\t\t\t\tif i*j == 1:\n\t\t\t\t\tsum += i\n\t\t\t\t\tsum += j\n\t\treturn sum\n\nprint(amicable_numbers_sum(1000))\n<|endoftext|>"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t\treturn np.arctan2(b.imag,b.real)\n\n\"\"\"\nWrite a function to get the angle of a"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\tcount = 0\n\t\tfor i in range(len(string)):\n\t\t\tif string[i] == '0':\n\t\t\t\tcount += 1\n\t\t\telse:\n\t\t\t\tcount -= 1\n\t\t\tif count == n:\n\t\t\t\treturn i\n\t\treturn -1\n\ndef find_max_diff(string, n):\n\tmax_diff = 0\n\tfor i in range(len(string)):\n\t\tif string[i] == '0':\n\t\t\tmax_diff = max(max_diff, i - find_length(string, n))\n\treturn max_diff\n\ndef main():\n\tstring = input()\n\tn = int(input())\n\tprint(find_max_diff(string, n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t\tif a == 0: \n\t\t\treturn b \n\t\tif b == 0: \n\t\t\treturn a \n\t\tif a % b == 0: \n\t\t\treturn a + b \n\t\telse: \n\t\t\treturn a + b - sum(a,b-1)\n\ndef common_divisors(a,b):\n\tif a == 0:\n\t\treturn []\n\tif b == 0:\n\t\treturn [a]\n\tif a % b == 0:\n\t\treturn [a,b]\n\telse:\n\t\treturn common_divisors(a-1,b) + common_divisors(a,b-1)\n\nprint(sum(10,10))\nprint(common_divisors(10,10))\n<|endoftext|>"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t\treturn x * y\n\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 3))\nprint"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t\treturn [word for word in str if len(word) > n]\n\nprint(long_words(3, [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(long_words(3, [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\","}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix)!= len(my_matrix[0]):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0])!= len(my_matrix):\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my_matrix[0]) == 0:\n\t\t\treturn False\n\t\t# Check if the matrix is square\n\t\tif len(my"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\t# Write your code here\n\t\tfreq = {}\n\t\tfor i in nums:\n\t\t\tif i in freq:\n\t\t\t\tfreq[i] += 1\n\t\t\telse:\n\t\t\t\tfreq[i] = 1\n\t\tmax_freq = 0\n\t\tmax_key = None\n\t\tfor key in freq:\n\t\t\tif freq[key] > max_freq:\n\t\t\t\tmax_freq = freq[key]\n\t\t\t\tmax_key = key\n\t\treturn max_key\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t\tvowels = ['a', 'e', 'i', 'o', 'u']\n\t\tnew_str = ''\n\t\tfor char in str1:\n\t\t\tif char in vowels:\n\t\t\t\tnew_str += char\n\t\treturn new_str\n\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('hello world'))\nprint(reverse_vowels('hello world!'))\nprint(reverse_vowels('hello world! hello world!'))\nprint(reverse_vowels('hello world! hello world! hello world!'))\nprint(reverse_vowels('hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello world! hello"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t\treturn str(tup1)\n\n\"\"\"\nWrite a function to convert a string to tuple.\n\"\"\"\ndef string_tup(string):\n\t\treturn tuple(string)\n\n\"\"\"\nWrite a function to convert a string to list.\n\"\"\"\ndef string_list(string):\n\t\treturn list(string)\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_set(string):\n\t\treturn set(string)\n\n\"\"\"\nWrite a function to convert a string to dict.\n\"\"\"\ndef string_dict(string):\n\t\treturn dict(string)\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_2(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_3(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_4(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_5(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_6(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_7(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_8(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_9(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to set.\n\"\"\"\ndef string_dict_set_10(string):\n\t\treturn set(string.split())\n\n\"\"\"\nWrite a function to convert a string to"}
{"ID": 496, "source": "MBPP:133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t\treturn sum(filter(lambda x: x < 0, nums))\n\nprint(sum_negativenum([-1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t\tif (p == 0):\n\t\t\treturn True\n\t\tif (p == 1):\n\t\t\treturn False\n\t\tif (p == 2):\n\t\t\treturn arr[-1] % 2 == 0\n\t\tif (p == 3):\n\t\t\treturn arr[-1] % 2 == 1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\np = 3\nprint(check_last(arr,n,p))\n<|endoftext|>"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\treturn (n*(n+1))/2\n\nprint(hexagonal_num(10))\n<|endoftext|>"}
{"ID": 499, "source": "MBPP:136", "prompt": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t", "predict": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t\treturn units * 1000000\n\nprint(cal_electbill(1000000))\n<|endoftext|>"}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t\tcount = 0\n\t\tfor i in nums:\n\t\t\tif i == 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(zero_count([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t\tif n == 0:\n\t\t\treturn True\n\t\tif n == 1:\n\t\t\treturn False\n\t\tif n % 2 == 0:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n/2)\n\t\telse:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(3*n+1)\n\nprint(is_Sum_Of_Powers_Of_Two(10))\nprint(is_Sum_Of_Powers_Of_Two(11))\nprint(is_Sum_Of_Powers_Of_Two(12))\nprint(is_Sum_Of_Powers_Of_Two(13))\nprint(is_Sum_Of_Powers_Of_Two(14))\nprint(is_Sum_Of_Powers_Of_Two(15))\nprint(is_Sum_Of_Powers_Of_Two(16))\nprint(is_Sum_Of_Powers_Of_Two(17))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(19))\nprint(is_Sum_Of_Powers_Of_Two(20))\nprint(is_Sum_Of_Powers_Of_Two(21))\nprint(is_Sum_Of_Powers_Of_Two(22))\nprint(is_Sum_Of_Powers_Of_Two(23))\nprint(is_Sum_Of_Powers_Of_Two(24))\nprint(is_Sum_Of_Powers_Of_Two(25))\nprint(is_Sum_Of_Powers_Of_Two(26))\nprint(is_Sum_Of_Powers_Of_Two(27))\nprint(is_Sum_Of_Powers_Of_Two(28))\nprint(is_Sum_Of_Powers_Of_Two(29))\nprint(is_Sum_Of_Powers_Of_Two(30))\nprint(is_Sum_Of_Powers_Of_Two(31))\nprint(is_Sum_Of_Powers_Of"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t\treturn 2 * math.pi * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\t\treturn math.pi * r * r\n\n\"\"\"\nWrite a function to find the circumference of a rectangle.\n\"\"\"\ndef rectangle_circumference(l, b):\n\t\treturn 2 * l * b\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, b):\n\t\treturn l * b\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\t\treturn a + b + c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\t\treturn (a * b) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(l):\n\t\treturn l * l\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(l):\n\t\treturn l * l\n\n\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef pentagon_perimeter(l):\n\t\treturn l * (3 * l - 1)\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(l):\n\t\treturn (l * (3 * l - 1)) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a hexagon.\n\"\"\"\ndef hexagon_perimeter(l):\n\t\treturn l * (2 * l - 1)\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(l):\n\t\treturn (l * (2 * l - 1)) / 6\n\n\"\"\"\nWrite a function to find the perimeter of a heptagon.\n\"\"\"\ndef heptagon_perimeter(l):\n\t\treturn l * (3 * l - 1)\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(l):\n\t\treturn"}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if len(x) == 1]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if x in test_list]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list_2(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if x in test_list]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list_3(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if x in test_list]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list_4(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if x in test_list]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list_5(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if x in test_list]\n\n\"\"\"\nWrite a function to extract elements that occur in the given tuple list.\n\"\"\"\ndef extract_in_list_6(test_list):\n\t\t\"\"\"\n\t\t:param test_list: a list of tuples\n\t\t:return: a list of tuples\n\t\t\"\"\"\n\t\treturn [x for x in test_list if"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tif len(nums) <= 1:\n\t\t\treturn nums\n\t\telse:\n\t\t\tpivot = nums[0]\n\t\t\tleft = []\n\t\t\tright = []\n\t\t\tfor i in nums:\n\t\t\t\tif i < pivot:\n\t\t\t\t\tleft.append(i)\n\t\t\t\telse:\n\t\t\t\t\tright.append(i)\n\t\t\treturn pancake_sort(left) + [pivot] + pancake_sort(right)\n\nprint(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 505, "source": "MBPP:142", "prompt": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t\tcount=0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list2)):\n\t\t\t\tif list1[i]==list2[j] and list1[i]!=list3[j]:\n\t\t\t\t\tcount+=1\n\t\treturn count\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nlist2=[1,2,3,4,5,6,7,8,9,10]\nlist3=[1,2,3,4,5,6,7,8,9,10]\nprint(count_samepair(list1,list2,list3))\n<|endoftext|>"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t\tcount = 0\n\t\tfor i in Input:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(find_lists((1,2,3,4,5)))\nprint(find_lists((1,2,3,4,5,6)))\nprint(find_lists((1,2,3,4,5,6,7)))\nprint(find_lists((1,2,3,4,5,6,7,8)))\nprint(find_lists((1,2,3,4,5,6,7,8,9)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)))\nprint(find_lists((1,2,3,4"}
{"ID": 507, "source": "MBPP:144", "prompt": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t\tsum=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tsum+=abs(arr[i]-arr[j])\n\t\treturn sum\n\narr=[1,2,3,4,5]\nn=len(arr)\nprint(sum_Pairs(arr,n))\n<|endoftext|>"}
{"ID": 508, "source": "MBPP:145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t\tmax_diff = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif abs(arr[i]-arr[j]) > max_diff:\n\t\t\t\t\tmax_diff = abs(arr[i]-arr[j])\n\t\treturn max_diff\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(max_Abs_Diff(arr,n))\n<|endoftext|>"}
{"ID": 509, "source": "MBPP:146", "prompt": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t\tascii_value = 0\n\t\tfor i in str1:\n\t\t\tascii_value += ord(i)\n\t\treturn ascii_value\n\nprint(ascii_value_string(\"Hello World\"))\n<|endoftext|>"}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t\t# Write your code here\n\t\tif m == 0 or n == 0:\n\t\t\treturn 0\n\t\tif m == 1 or n == 1:\n\t\t\treturn tri[m][n]\n\t\treturn max(tri[m][n], max_path_sum(tri, m-1, n-1) + tri[m][n])\n\ntri = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(max_path_sum(tri, 3, 3))\n<|endoftext|>"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t\t# Your code here\n\t\tif N == 0 : return 0\n\t\tif N == 1 : return 1\n\t\tif N == 2 : return 2\n\t\tif N == 3 : return 3\n\t\tif N == 4 : return 4\n\t\tif N == 5 : return 5\n\t\tif N == 6 : return 6\n\t\tif N == 7 : return 7\n\t\tif N == 8 : return 8\n\t\tif N == 9 : return 9\n\t\tif N == 10 : return 10\n\t\tif N == 11 : return 11\n\t\tif N == 12 : return 12\n\t\tif N == 13 : return 13\n\t\tif N == 14 : return 14\n\t\tif N == 15 : return 15\n\t\tif N == 16 : return 16\n\t\tif N == 17 : return 17\n\t\tif N == 18 : return 18\n\t\tif N == 19 : return 19\n\t\tif N == 20 : return 20\n\t\tif N == 21 : return 21\n\t\tif N == 22 : return 22\n\t\tif N == 23 : return 23\n\t\tif N == 24 : return 24\n\t\tif N == 25 : return 25\n\t\tif N == 26 : return 26\n\t\tif N == 27 : return 27\n\t\tif N == 28 : return 28\n\t\tif N == 29 : return 29\n\t\tif N == 30 : return 30\n\t\tif N == 31 : return 31\n\t\tif N == 32 : return 32\n\t\tif N == 33 : return 33\n\t\tif N == 34 : return 34\n\t\tif N == 35 : return 35\n\t\tif N == 36 : return 36\n\t\tif N == 37 : return 37\n\t\tif N == 38 : return 38\n\t\tif N == 39 : return 39\n\t\tif N == 4"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t\t# Write your code here\n\t\tif n == 1:\n\t\t\treturn arr\n\t\telse:\n\t\t\tlongest_subseq_with_diff_one(arr[1:], n-1)\n\t\t\tlongest_subseq_with_diff_one(arr[1:], n-1)\n\t\t\tlongest_subseq_with_diff_one(arr[1:], n-1)\n\t\t\treturn arr\n\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 5))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 4))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 3))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 2))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 1))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 0))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 6))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 7))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 8))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 9))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 10))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 11))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 12))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 13))\nprint(longest_subseq_with_diff_one([1,2,3,4,5], 14))\nprint(longest_subseq_with_diff_"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t\tif a == b: \n\t\t\treturn True\n\t\telif a == c: \n\t\t\treturn True\n\t\telif b == c: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\ndef main():\n\ta = int(input(\"Enter the first number: \"))\n\tb = int(input(\"Enter the second number: \"))\n\tc = int(input(\"Enter the third number: \"))\n\tif does_Contain_B(a,b,c):\n\t\tprint(\"The given number is present in the infinite sequence\")\n\telse:\n\t\tprint(\"The given number is not present in the infinite sequence\")\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t\tif x == y:\n\t\t\treturn True\n\t\tif x < y:\n\t\t\tx,y = y,x\n\t\tfor i in range(2,min(x,y)+1):\n\t\t\tif x%i == 0 and y%i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(is_coprime(12,13))\nprint(is_coprime(12,14))\nprint(is_coprime(12,15))\nprint(is_coprime(12,16))\nprint(is_coprime(12,17))\nprint(is_coprime(12,18))\nprint(is_coprime(12,19))\nprint(is_coprime(12,20))\nprint(is_coprime(12,21))\nprint(is_coprime(12,22))\nprint(is_coprime(12,23))\nprint(is_coprime(12,24))\nprint(is_coprime(12,25))\nprint(is_coprime(12,26))\nprint(is_coprime(12,27))\nprint(is_coprime(12,28))\nprint(is_coprime(12,29))\nprint(is_coprime(12,30))\nprint(is_coprime(12,31))\nprint(is_coprime(12,32))\nprint(is_coprime(12,33))\nprint(is_coprime(12,34))\nprint(is_coprime(12,35))\nprint(is_coprime(12,36))\nprint(is_coprime(12,37))\nprint(is_coprime(12,38))\nprint(is_coprime(12,39))\nprint(is_coprime(12,40))\nprint(is_coprime(12,41))\nprint(is_coprime(12,42))\nprint(is_coprime(12,43))\nprint(is_coprime(1"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t\tif len(x) <= 1:\n\t\t\treturn x\n\t\tmid = len(x) // 2\n\t\tleft = merge_sort(x[:mid])\n\t\tright = merge_sort(x[mid:])\n\t\treturn merge(left, right)\n\ndef merge(left, right):\n\tresult = []\n\ti = 0\n\tj = 0\n\twhile i < len(left) and j < len(right):\n\t\tif left[i] < right[j]:\n\t\t\tresult.append(left[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tresult.append(right[j])\n\t\t\tj += 1\n\tresult += left[i:]\n\tresult += right[j:]\n\treturn result\n\ndef merge_sort_iterative(x):\n\tif len(x) <= 1:\n\t\treturn x\n\tmid = len(x) // 2\n\tleft = merge_sort_iterative(x[:mid])\n\tright = merge_sort_iterative(x[mid:])\n\treturn merge(left, right)\n\ndef merge_sort_recursive(x):\n\tif len(x) <= 1:\n\t\treturn x\n\treturn merge(merge_sort_recursive(x[:len(x) // 2]), merge_sort_recursive(x[len(x) // 2:]))\n\ndef merge_sort_recursive_iterative(x):\n\tif len(x) <= 1:\n\t\treturn x\n\treturn merge(merge_sort_recursive_iterative(x[:len(x) // 2]), merge_sort_recursive_iterative(x[len(x) // 2:]))\n\ndef merge_sort_recursive_iterative_2(x):\n\tif len(x) <= 1:\n\t\treturn x\n\treturn merge(merge_sort_recursive_iterative_2(x[:len(x) // 2]), merge_sort_recursive_iterative_2(x[len(x) // 2:]))\n\ndef merge_sort_recursive_iterative_3(x):\n\tif len(x) <= 1:\n\t\treturn x\n\treturn merge(merge_sort_recursive_iterative_3(x[:len(x) //"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\t\"\"\"\n\t\tWrite a function to find the vertex of a parabola.\n\t\t\"\"\"\n\t\tif a == 0:\n\t\t\treturn b/2\n\t\telif b == 0:\n\t\t\treturn c/2\n\t\telse:\n\t\t\treturn (-b + (b**2 - 4*a*c))/(2*a)\n\nprint(parabola_vertex(1, 2, 3))\n<|endoftext|>"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t\t\"\"\"\n\t\t:type nums: List[List[int]]\n\t\t:type N: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\tresult = []\n\t\tfor i in range(N):\n\t\t\tfor j in range(N):\n\t\t\t\tresult.append(nums[i][j])\n\t\treturn result\n\n\"\"\"\nWrite a function to find the first missing positive integer in a given range.\n\"\"\"\ndef first_missing_positive(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[nums[i] - 1]:\n\t\t\t\tnums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i]!= i + 1:\n\t\t\t\treturn i + 1\n\t\treturn len(nums) + 1\n\n\"\"\"\nWrite a function to find the first missing positive integer in a given range.\n\"\"\"\ndef first_missing_positive_2(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[nums[i] - 1]:\n\t\t\t\tnums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i]!= i + 1:\n\t\t\t\treturn i + 1\n\t\treturn len(nums) + 1\n\n\"\"\"\nWrite a function to find the first missing positive integer in a given range.\n\"\"\"\ndef first_missing_positive_3(nums):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums["}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\treturn n ^ 0x1\n\n\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef odd_bit_toggle_number(n) : \n\t\treturn n ^ 0x2\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number(n) : \n\t\treturn n ^ 0x4\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_2(n) : \n\t\treturn n ^ 0x8\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_3(n) : \n\t\treturn n ^ 0x10\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_4(n) : \n\t\treturn n ^ 0x20\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_5(n) : \n\t\treturn n ^ 0x40\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_6(n) : \n\t\treturn n ^ 0x80\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_7(n) : \n\t\treturn n ^ 0x100\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_8(n) : \n\t\treturn n ^ 0x200\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_9(n) : \n\t\treturn n ^ 0x400\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_10(n) : \n\t\treturn n ^ 0x800\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef bit_toggle_number_11(n) : \n\t\treturn n ^ 0x"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int(tuple_int):\n\t\treturn tuple(map(str, tuple_int))\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str_2(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int_2(tuple_int):\n\t\treturn tuple(map(str, tuple_int))\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str_3(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int_3(tuple_int):\n\t\treturn tuple(map(str, tuple_int))\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str_4(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int_4(tuple_int):\n\t\treturn tuple(map(str, tuple_int))\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str_5(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int_5(tuple_int):\n\t\treturn tuple(map(str, tuple_int))\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str_6(tuple_str):\n\t\treturn tuple(map(int, tuple_str))\n\n"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t\t# Your code here\n\t\tif len(list1) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_list(list1[1:]) + str(list1[0])\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a string.\n\"\"\"\ndef encode_string(string):\n\t\t# Your code here\n\t\tif len(string) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_string(string[1:]) + string[0]\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list_2(list1):\n\t\t# Your code here\n\t\tif len(list1) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_list_2(list1[1:]) + str(list1[0])\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a string.\n\"\"\"\ndef encode_string_2(string):\n\t\t# Your code here\n\t\tif len(string) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_string_2(string[1:]) + string[0]\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list_3(list1):\n\t\t# Your code here\n\t\tif len(list1) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_list_3(list1[1:]) + str(list1[0])\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a string.\n\"\"\"\ndef encode_string_3(string):\n\t\t# Your code here\n\t\tif len(string) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_string_3(string[1:]) + string[0]\n\n\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list_4(list1):\n\t\t# Your code here\n\t\tif len(list1) == 0:\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn encode_list_4(list1[1:]) + str(list1[0])\n\n\"\"\"\nWrite a function to reflect the run-length encoding from"}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t\tif month == 1:\n\t\t\treturn \"winter\"\n\t\telif month == 2:\n\t\t\treturn \"spring\"\n\t\telif month == 3:\n\t\t\treturn \"summer\"\n\t\telif month == 4:\n\t\t\treturn \"autumn\"\n\t\telif month == 5:\n\t\t\treturn \"winter\"\n\t\telif month == 6:\n\t\t\treturn \"spring\"\n\t\telif month == 7:\n\t\t\treturn \"summer\"\n\t\telif month == 8:\n\t\t\treturn \"autumn\"\n\t\telif month == 9:\n\t\t\treturn \"winter\"\n\t\telif month == 10:\n\t\t\treturn \"spring\"\n\t\telif month == 11:\n\t\t\treturn \"summer\"\n\t\telif month == 12:\n\t\t\treturn \"autumn\"\n\nprint(month_season(12,31))\n<|endoftext|>"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t\tx = 0\n\t\ty = 0\n\t\twhile (x**2 + y**2) < n:\n\t\t\tx += 1\n\t\t\ty += 1\n\t\treturn (x, y)\n\nprint(solution(1, 1, 10))\n<|endoftext|>"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t\t# Your code here\n\t\tlist1.remove(list2)\n\t\treturn list1\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = [1,2,3,4,5,6,7,8,9,10]\nprint(remove_elements(list1, list2))\n<|endoftext|>"}
{"ID": 525, "source": "MBPP:162", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_series(10))\n<|endoftext|>"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t\treturn (s*l)/2\n\nprint(area_polygon(5,5))\n<|endoftext|>"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t\tif num1%num2==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(areEquivalent(12,12))\nprint(areEquivalent(12,13))\nprint(areEquivalent(12,14))\nprint(areEquivalent(12,15))\nprint(areEquivalent(12,16))\nprint(areEquivalent(12,17))\nprint(areEquivalent(12,18))\nprint(areEquivalent(12,19))\nprint(areEquivalent(12,20))\nprint(areEquivalent(12,21))\nprint(areEquivalent(12,22))\nprint(areEquivalent(12,23))\nprint(areEquivalent(12,24))\nprint(areEquivalent(12,25))\nprint(areEquivalent(12,26))\nprint(areEquivalent(12,27))\nprint(areEquivalent(12,28))\nprint(areEquivalent(12,29))\nprint(areEquivalent(12,30))\nprint(areEquivalent(12,31))\nprint(areEquivalent(12,32))\nprint(areEquivalent(12,33))\nprint(areEquivalent(12,34))\nprint(areEquivalent(12,35))\nprint(areEquivalent(12,36))\nprint(areEquivalent(12,37))\nprint(areEquivalent(12,38))\nprint(areEquivalent(12,39))\nprint(areEquivalent(12,40))\nprint(areEquivalent(12,41))\nprint(areEquivalent(12,42))\nprint(areEquivalent(12,43))\nprint(areEquivalent(12,44))\nprint(areEquivalent(12,45))\nprint(areEquivalent(12,46))\nprint(areEquivalent(12,47))\nprint(areEquivalent(12,48))\nprint(areEquivalent(12,49))\nprint(areEquivalent(12,50))\nprint(areEquivalent(12,51))\nprint(areEquivalent(12,"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t\tcount = 0\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] == str1[i].upper():\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_char_position(\"hello\"))\nprint(count_char_position(\"HELLO\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint(count_char_position(\"HELLOWORLD\"))\nprint"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t\tcount = 0\n\t\tfor i in range(N):\n\t\t\tfor j in range(i+1,N):\n\t\t\t\tif A[i]^A[j] == 0:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nA = [1,2,3,4,5,6,7,8,9,10]\nN = len(A)\nprint(find_even_Pair(A,N))\n<|endoftext|>"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t\tif n == 0: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn 2**(n-1).bit_length()\n\nprint(next_Power_Of_2(10))\nprint(next_Power_Of_2(100))\nprint(next_Power_Of_2(1000))\nprint(next_Power_Of_2(10000))\nprint(next_Power_Of_2(100000))\nprint(next_Power_Of_2(1000000))\nprint(next_Power_Of_2(10000000))\nprint(next_Power_Of_2(100000000))\nprint(next_Power_Of_2(1000000000))\nprint(next_Power_Of_2(10000000000))\nprint(next_Power_Of_2(100000000000))\nprint(next_Power_Of_2(1000000000000))\nprint(next_Power_Of_2(10000000000000))\nprint(next_Power_Of_2(100000000000000))\nprint(next_Power_Of_2(1000000000000000))\nprint(next_Power_Of_2(10000000000000000))\nprint(next_Power_Of_2(100000000000000000))\nprint(next_Power_Of_2(1000000000000000000))\nprint(next_Power_Of_2(10000000000000000000))\nprint(next_Power_Of_2(100000000000000000000))\nprint(next_Power_Of_2("}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t\tcount = 0\n\t\tfor i in a:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\na = [1,2,3,4,5,6,7,8,9,10]\nx = 5\nprint(frequency(a,x))\n<|endoftext|>"}
{"ID": 532, "source": "MBPP:169", "prompt": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t\t\"\"\"\n\t\t:param n: the nth pell number\n\t\t:return: the nth pell number\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telif n == 2:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn get_pell(n-1) + get_pell(n-2)\n\nprint(get_pell(10))\n<|endoftext|>"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\tsum = 0\n\t\tfor i in range(m, n+1):\n\t\t\tsum += list1[i]\n\t\treturn sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 3\nn = 6\nprint(sum_range_list(list1, m, n))\n<|endoftext|>"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t\treturn 2*a\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a,b):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a,b):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a,b):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a,b):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a,b):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a right triangle.\n\"\"\"\ndef perimeter_right_triangle(a,b):\n\t\treturn 2*a+b\n\n\"\"\"\nWrite a function to find the area of a right triangle.\n\"\"\"\ndef area_right_triangle(a"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('std'))\n\n\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('std'))\n\n\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('std'))\n\n\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('std'))\n\n\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif i =='std':\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_occurance('std'))\n\n\"\"\"\nWrite a function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t\treturn ''.join(ch for ch in text if ch.isalnum())\n\nprint(remove_splchar(\"Hello World!\"))\nprint(remove_splchar(\"Hello World!123\"))\nprint(remove_splchar(\"Hello World!1234567890\"))\nprint(remove_splchar(\"Hello World!12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"}
{"ID": 537, "source": "MBPP:174", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t", "predict": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t\td = {}\n\t\tfor k, v in l:\n\t\t\t\tif k in d:\n\t\t\t\t\t\td[k].append(v)\n\t\t\t\telse:\n\t\t\t\t\t\td[k] = [v]\n\t\treturn d\n\nprint(group_keyvalue([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5)]))\n<|endoftext|>"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t\tstack = []\n\t\tfor i in str1:\n\t\t\tif i == '(':\n\t\t\t\tstack.append(i)\n\t\t\telif i == ')':\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\treturn False\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\treturn False\n\t\tif len(stack)!= 0:\n\t\t\treturn False\n\t\treturn True\n\nprint(is_valid_parenthese(\"()\"))\nprint(is_valid_parenthese(\"()()\"))\nprint(is_valid_parenthese(\"()()()\"))\nprint(is_valid_parenthese(\"()()()()\"))\nprint(is_valid_parenthese(\"()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()()()()()()()()()()()()()()()()()()()()()()()\"))\nprint(is_valid_parenthese(\"()()()()"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn a+b+c\n\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))\nprint(perimeter_triangle(1,2,3))"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t\tif L == R: \n\t\t\treturn L\n\t\telse: \n\t\t\tLcm = (L*R)//(L+R) \n\t\t\treturn answer(Lcm,R)\n\nprint(answer(10,20))\n<|endoftext|>"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\tfor pattern in patterns:\n\t\t\tif pattern in text:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(string_literals([\"hello\",\"world\"],\"hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello world hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello world hello world hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\tif x == 1:\n\t\t\treturn True\n\t\telif x == 2:\n\t\t\treturn True\n\t\telif x == 3:\n\t\t\treturn True\n\t\telif x == 4:\n\t\t\treturn True\n\t\telif x == 5:\n\t\t\treturn True\n\t\telif x == 6:\n\t\t\treturn True\n\t\telif x == 7:\n\t\t\treturn True\n\t\telif x == 8:\n\t\t\treturn True\n\t\telif x == 9:\n\t\t\treturn True\n\t\telif x == 10:\n\t\t\treturn True\n\t\telif x == 11:\n\t\t\treturn True\n\t\telif x == 12:\n\t\t\treturn True\n\t\telif x == 13:\n\t\t\treturn True\n\t\telif x == 14:\n\t\t\treturn True\n\t\telif x == 15:\n\t\t\treturn True\n\t\telif x == 16:\n\t\t\treturn True\n\t\telif x == 17:\n\t\t\treturn True\n\t\telif x == 18:\n\t\t\treturn True\n\t\telif x == 19:\n\t\t\treturn True\n\t\telif x == 20:\n\t\t\treturn True\n\t\telif x == 21:\n\t\t\treturn True\n\t\telif x == 22:\n\t\t\treturn True\n\t\telif x == 23:\n\t\t\treturn True\n\t\telif x == 24:\n\t\t\treturn True\n\t\telif x == 25:\n\t\t\treturn True\n\t\telif x == 26:\n\t\t\treturn True\n\t\telif x == 27:\n\t\t\treturn True\n\t\telif x == 28:\n\t\t\treturn True\n\t\telif x == 29:\n\t\t\treturn True\n\t\telif x == 30:\n\t\t\treturn True\n\t\telif x == 31:\n\t\t\treturn True\n\t\telif x == 32:\n\t\t\treturn True\n\t\telif x == 33:\n\t\t\treturn True\n\t\telif x == 34:\n\t\t\treturn True\n\t\telif x == 35:\n\t\t\treturn True\n\t\telif x == 36:\n\t\t\treturn True\n\t\telif x == 37:\n\t\t\treturn True\n\t\telif x == 38:\n\t\t\treturn True\n\t\telif x == 39:\n\t\t\treturn True\n\t\telif x == 40:\n\t\t\treturn True\n\t\t"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_2(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_3(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_4(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_5(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_6(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tslat, slon, elat, elon: float\n\t\t\"\"\"\n\t\treturn math.sqrt((slat-elat)**2 + (slon-elon)**2)\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long_7(slat,"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t\tif len(str1) == 0: \n\t\t\treturn str2 \n\t\telif len(str2) == 0: \n\t\t\treturn str1 \n\t\telif str1[0] == str2[0]: \n\t\t\treturn common_prefix_util(str1[1:], str2[1:]) \n\t\telse: \n\t\t\treturn common_prefix_util(str1, str2[1:]) \n\ndef common_prefix(str1, str2): \n\treturn common_prefix_util(str1, str2) \n\nprint(common_prefix(\"abc\", \"ab\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"def\"))\nprint(common_prefix(\"abc\", \"\"))\nprint(common_prefix(\"\", \"abc\"))\nprint(common_prefix(\"\", \"\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc\", \"abc\"))\nprint(common_prefix(\"abc"}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t\tcharacter = []\n\t\tfor i in string:\n\t\t\tif i.isalpha():\n\t\t\t\tcharacter.append(i)\n\t\t\telif i.isnumeric():\n\t\t\t\tcharacter.append(i)\n\t\t\telif i.isspace():\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"-\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"_\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \".\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \" \":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"/\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"\\\\\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"*\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"?\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"+\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"{\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"}\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"[\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"]\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"^\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"$\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"|\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"~\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"!\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"#\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"%\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"&\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"*\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \":\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \";\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"'\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"\\\"\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"<\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \">\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"?\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif i == \"@\":\n\t\t\t\tcharacter.append(i)\n\t\t\telif"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t\tcount = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tif abs(arr[i] - arr[j]) == k:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the sum of all the numbers in an array that are divisible by 3 or 5.\n\"\"\"\ndef divisible_by_3_or_5(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] % 3 == 0 or arr[i] % 5 == 0:\n\t\t\tsum += arr[i]\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers in an array that are divisible by 3 and 5.\n\"\"\"\ndef divisible_by_3_and_5(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] % 3 == 0 and arr[i] % 5 == 0:\n\t\t\tsum += arr[i]\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers in an array that are divisible by 3 and 5.\n\"\"\"\ndef divisible_by_3_and_5_2(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] % 3 == 0 or arr[i] % 5 == 0:\n\t\t\tsum += arr[i]\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers in an array that are divisible by 3 or 5.\n\"\"\"\ndef divisible_by_3_or_5_2(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] % 3 == 0 or arr[i] % 5 == 0:\n\t\t\tsum += arr[i]\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers in an array that are divisible by 3 and 5.\n\"\"\"\ndef divisible_by_3_and_5_3(arr):\n\tsum = 0\n\tfor i in range(len(arr"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],10))\n<|endoftext|>"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\t\"\"\"\n\t\tWrite a function to find the focus of a parabola.\n\t\t\"\"\"\n\t\treturn (a*b*c) / (a**2 + b**2)\n\nprint(parabola_focus(1, 2, 3))\n<|endoftext|>"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t\tfor pattern in patterns:\n\t\t\tif re.search(pattern, text):\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_2(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_3(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_4(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_5(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_6(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_7(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_8(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_9(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_10(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_11(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome_12(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n"}
{"ID": 550, "source": "MBPP:187", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t\n    # Create a table to store the longest common subsequence\n    LCS = [[0 for i in range(n+1)] for j in range(m+1)]\n    \n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    return LCS[m][n]\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(longest_common_subsequence(X, Y, m, n))\n<|endoftext|>"}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * prod_Square(n-1)\n\ndef prod_Square_2(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_2(n-1)\n\ndef prod_Square_3(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_3(n-1)\n\ndef prod_Square_4(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_4(n-1)\n\ndef prod_Square_5(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_5(n-1)\n\ndef prod_Square_6(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_6(n-1)\n\ndef prod_Square_7(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_7(n-1)\n\ndef prod_Square_8(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_8(n-1)\n\ndef prod_Square_9(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * prod_Square_9(n-1)\n\ndef prod_Square_10(n):\n\tif n == 0:\n\t\t"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t\tfor i in range(n): \n\t\t\tif arr[i] > 0 and arr[i] <= n: \n\t\t\t\tarr[i] = -1\n\t\tfor i in range(n): \n\t\t\tif arr[i] == -1: \n\t\t\t\treturn i+1\n\t\treturn n+1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(first_Missing_Positive(arr,n))\n<|endoftext|>"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif i**2 + j**2 == 1:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Intgral_Points(1,1,10,10))\n<|endoftext|>"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t\tif monthname3.count('30') == 30:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_monthnumber('March'))\nprint(check_monthnumber('April'))\nprint(check_monthnumber('May'))\nprint(check_monthnumber('June'))\nprint(check_monthnumber('July'))\nprint(check_monthnumber('August'))\nprint(check_monthnumber('September'))\nprint(check_monthnumber('October'))\nprint(check_monthnumber('November'))\nprint(check_monthnumber('December'))\n<|endoftext|>"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t\tif str.count('a') >= 1 and str.count('1') >= 1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_String(\"1234567890\"))\nprint(check_String(\"12345678901234567890\"))\nprint(check_String(\"123456789012345678901234567890\"))\nprint(check_String(\"1234567890123456789012345678901234567890\"))\nprint(check_String(\"12345678901234567890123456789012345678901234567890\"))\nprint(check_String(\"123456789012345678901234567890123456789012345678901234567890\"))\nprint(check_String(\"1234567890123456789012345678901234567890123456789012345678901234567890\"))\nprint(check_String(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"))\nprint(check_String(\"1234567890123456789012345678901234567890123456"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t\tnew_tup = []\n\t\tfor i in test_tup:\n\t\t\tif i not in new_tup:\n\t\t\t\tnew_tup.append(i)\n\t\treturn new_tup\n\nprint(remove_tuple((1,2,3,4,5,6,7,8,9,10)))\n<|endoftext|>"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t\treturn int(n,8)\n\nprint(octal_To_Decimal(10))\nprint(octal_To_Decimal(100))\nprint(octal_To_Decimal(1000))\nprint(octal_To_Decimal(10000))\nprint(octal_To_Decimal(100000))\nprint(octal_To_Decimal(1000000))\nprint(octal_To_Decimal(10000000))\nprint(octal_To_Decimal(100000000))\nprint(octal_To_Decimal(1000000000))\nprint(octal_To_Decimal(10000000000))\nprint(octal_To_Decimal(100000000000))\nprint(octal_To_Decimal(1000000000000))\nprint(octal_To_Decimal(10000000000000))\nprint(octal_To_Decimal(100000000000000))\nprint(octal_To_Decimal(1000000000000000))\nprint(octal_To_Decimal(10000000000000000))\nprint(octal_To_Decimal(100000000000000000))\nprint(octal_To_Decimal(1000000000000000000))\nprint(octal_To_Decimal(10000000000000000000))\nprint(octal_To_Decimal(100000000000000000000))\nprint(octal_To_Decimal(1000000000000000000000))\nprint(octal_To_Decimal(1000000000"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\tif n == 1: \n\t\t\tif arr[0] == x: \n\t\t\t\treturn 0 \n\t\t\telse: \n\t\t\t\treturn -1 \n\t\tmid = n//2 \n\t\tif arr[mid] == x: \n\t\t\treturn mid \n\t\tif arr[mid] > x: \n\t\t\treturn first(arr,x,mid) \n\t\telse: \n\t\t\treturn first(arr,x,n-mid-1) \n\narr = [1,2,3,4,5,6,7,8,9,10] \nx = 10\nn = len(arr) \nprint(first(arr,x,n)) \n<|endoftext|>"}
{"ID": 559, "source": "MBPP:196", "prompt": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t\tnew_list = []\n\t\tfor i in test_list:\n\t\t\tif len(i) == K:\n\t\t\t\tnew_list.append(i)\n\t\treturn new_list\n\nprint(remove_tuples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143"}
{"ID": 560, "source": "MBPP:197", "prompt": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x ** y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the product of the given two tuples.\n\"\"\"\ndef find_product(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the quotient of the given two tuples.\n\"\"\"\ndef find_quotient(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the remainder of the given two tuples.\n\"\"\"\ndef find_remainder(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the sum of the given two tuples.\n\"\"\"\ndef find_sum(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the difference of the given two tuples.\n\"\"\"\ndef find_difference(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t\tif a>b:\n\t\t\treturn largest_triangle(b,a)\n\t\telif a==b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn max(a,b)\n\nprint(largest_triangle(10,10))\nprint(largest_triangle(10,100))\nprint(largest_triangle(100,100))\nprint(largest_triangle(100,10))\nprint(largest_triangle(100,1000))\nprint(largest_triangle(1000,1000))\nprint(largest_triangle(1000,100))\nprint(largest_triangle(100,10000))\nprint(largest_triangle(10000,10000))\nprint(largest_triangle(10000,1000))\nprint(largest_triangle(10000,100))\nprint(largest_triangle(10000,10))\nprint(largest_triangle(10000,1))\nprint(largest_triangle(10000,0))\nprint(largest_triangle(10000,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telif n == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\treturn highest_Power_of_2(n//2) + 1 \n\nprint(highest_Power_of_2(10))\n<|endoftext|>"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t\tmax_pos = []\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] == max(list1):\n\t\t\t\tmax_pos.append(i)\n\t\treturn max_pos\n\nprint(position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\tif len(lst) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(len(lst)):\n\t\t\t\tif lst[i]!= lst[0]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\nprint(chkList([1,2,3,4,5]))\nprint(chkList([1,2,3,4,5,6]))\nprint(chkList([]))\nprint(chkList([1,2,3,4,5,6,7]))\nprint(chkList([1,2,3,4,5,6,7,8]))\nprint(chkList([1,2,3,4,5,6,7,8,9]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(chkList([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(chk"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t\treturn str1.replace(\"even\", \"\")\n\nprint(remove_even(\"even\"))\nprint(remove_even(\"even1\"))\nprint(remove_even(\"even2\"))\nprint(remove_even(\"even3\"))\nprint(remove_even(\"even4\"))\nprint(remove_even(\"even5\"))\nprint(remove_even(\"even6\"))\nprint(remove_even(\"even7\"))\nprint(remove_even(\"even8\"))\nprint(remove_even(\"even9\"))\nprint(remove_even(\"even10\"))\nprint(remove_even(\"even11\"))\nprint(remove_even(\"even12\"))\nprint(remove_even(\"even13\"))\nprint(remove_even(\"even14\"))\nprint(remove_even(\"even15\"))\nprint(remove_even(\"even16\"))\nprint(remove_even(\"even17\"))\nprint(remove_even(\"even18\"))\nprint(remove_even(\"even19\"))\nprint(remove_even(\"even20\"))\nprint(remove_even(\"even21\"))\nprint(remove_even(\"even22\"))\nprint(remove_even(\"even23\"))\nprint(remove_even(\"even24\"))\nprint(remove_even(\"even25\"))\nprint(remove_even(\"even26\"))\nprint(remove_even(\"even27\"))\nprint(remove_even(\"even28\"))\nprint(remove_even(\"even29\"))\nprint(remove_even(\"even30\"))\nprint(remove_even(\"even31\"))\nprint(remove_even(\"even32\"))\nprint(remove_even(\"even33\"))\nprint(remove_even(\"even34\"))\nprint(remove_even(\"even35\"))\nprint(remove_even(\"even36\"))\nprint(remove_even(\"even37\"))\nprint(remove_even(\"even38\"))\nprint(remove_even(\"even39\"))\nprint(remove_even(\"even40\"))\nprint(remove_even(\"even41\"))\nprint(remove_even(\"even42\"))\nprint(remove_even(\"even43\"))\nprint(remove_even(\"even44\"))\nprint(remove_even(\"even45\"))\nprint(remove_even"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t\treturn bin(n1^n2).count('1')\n\nprint(hamming_Distance(10,11))\n<|endoftext|>"}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t\tcount = 0\n\t\tfor i in range(len(s)) : \n\t\t\tif s[i] == c : \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count(\"hello\", \"l\"))\nprint(count(\"hello\", \"o\"))\nprint(count(\"hello\", \"h\"))\nprint(count(\"hello\", \"e\"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint(count(\"hello\", \" \"))\nprint"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: list\n\t\t\"\"\"\n\t\tinversions = []\n\t\tfor i in range(len(test_tup)):\n\t\t\tfor j in range(i+1, len(test_tup)):\n\t\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\t\tinversions.append((test_tup[i], test_tup[j]))\n\t\treturn inversions\n\ndef main():\n\ttest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\tprint(inversion_elements(test_tup))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 569, "source": "MBPP:206", "prompt": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t\treturn tuple(test_tup[0] + test_tup[1])\n\nprint(concatenate_elements((1,2)))\nprint(concatenate_elements((1,2,3)))\nprint(concatenate_elements((1,2,3,4)))\nprint(concatenate_elements((1,2,3,4,5)))\nprint(concatenate_elements((1,2,3,4,5,6)))\nprint(concatenate_elements((1,2,3,4,5,6,7)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(concatenate_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t\t# Your code here\n\t\t# return the length of the longest repeating subsequence\n\t\t# return 0 if there is no repeating subsequence\n\t\t# return -1 if there is no repeating subsequence\n\t\t# return -2 if there is no repeating subsequence\n\t\t# return -3 if there is no repeating subsequence\n\t\t# return -4 if there is no repeating subsequence\n\t\t# return -5 if there is no repeating subsequence\n\t\t# return -6 if there is no repeating subsequence\n\t\t# return -7 if there is no repeating subsequence\n\t\t# return -8 if there is no repeating subsequence\n\t\t# return -9 if there is no repeating subsequence\n\t\t# return -10 if there is no repeating subsequence\n\t\t# return -11 if there is no repeating subsequence\n\t\t# return -12 if there is no repeating subsequence\n\t\t# return -13 if there is no repeating subsequence\n\t\t# return -14 if there is no repeating subsequence\n\t\t# return -15 if there is no repeating subsequence\n\t\t# return -16 if there is no repeating subsequence\n\t\t# return -17 if there is no repeating subsequence\n\t\t# return -18 if there is no repeating subsequence\n\t\t# return -19 if there is no repeating subsequence\n\t\t# return -20 if there is no repeating subsequence\n\t\t# return -21 if there is no repeating subsequence\n\t\t# return -22 if there is no repeating subsequence\n\t\t# return -23 if there is no repeating subsequence\n\t\t# return -24 if there is no repeating subsequence\n\t\t# return -25 if there is no repeating subsequence\n\t\t# return -26 if there is no repeating subsequence\n\t\t# return -27 if there is no repeating subsequence\n\t\t# return -28 if there is no repeating subsequence\n\t\t# return -29 if there is no repeating subsequence\n\t\t# return -30 if there is no repeating subsequence\n\t\t# return -31 if there is no repeating subsequence\n\t\t# return -32 if there is no repeating subsequence\n\t\t# return -33 if there"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t\treturn re.match(r'^[0-9]+\\.[0-9]+$', num)\n\nprint(is_decimal('1.234'))\nprint(is_decimal('1.2345'))\nprint(is_decimal('1.23456'))\nprint(is_decimal('1.234567'))\nprint(is_decimal('1.2345678'))\nprint(is_decimal('1.23456789'))\nprint(is_decimal('1.234567890'))\nprint(is_decimal('1.2345678901'))\nprint(is_decimal('1.23456789012'))\nprint(is_decimal('1.234567890123'))\nprint(is_decimal('1.2345678901234'))\nprint(is_decimal('1.23456789012345'))\nprint(is_decimal('1.234567890123456'))\nprint(is_decimal('1.2345678901234567'))\nprint(is_decimal('1.23456789012345678'))\nprint(is_decimal('1.234567890123456789'))\nprint(is_decimal('1.2345678901234567890'))\nprint(is_decimal('1.23456789012345678901'))\nprint(is_decimal('1.234567890123456789012'))\nprint(is_decimal('1.2345678901234567890123'))\nprint(is_decimal('1.23456789012345678901234'))\nprint(is_decimal('"}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t\theap[0],heap[a]=heap[a],heap[0]\n\t\theapify(heap,0,len(heap)-1)\n\ndef heapify(heap,start,end):\n\tleft=2*start+1\n\tright=2*start+2\n\tsmallest=start\n\tif left<=end and heap[left]<heap[smallest]:\n\t\tsmallest=left\n\tif right<=end and heap[right]<heap[smallest]:\n\t\tsmallest=right\n\tif smallest!=start:\n\t\theap_replace(heap,smallest)\n\t\theapify(heap,smallest,end)\n\ndef heap_insert(heap,a):\n\theap.append(a)\n\theapify(heap,len(heap)-1,0)\n\ndef heap_delete(heap):\n\theap_replace(heap,heap[0])\n\theap.pop(0)\n\theapify(heap,0,len(heap)-1)\n\ndef heap_sort(heap):\n\theap_delete(heap)\n\theap_insert(heap,heap[0])\n\theap_sort(heap)\n\ndef heap_sort_test():\n\theap=[1,2,3,4,5,6,7,8,9,10]\n\theap_sort(heap)\n\tprint(heap)\n\nheap_sort_test()<|endoftext|>"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_2(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_3(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_4(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_5(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_6(string):\n\t\tregex = re.compile('[a-zA-Z0-9]')\n\t\treturn regex.search(string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char_7(string):\n\t\tregex = re.compile('[a-zA-Z0-"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t\tcount = 0\n\t\tfor i in range(32):\n\t\t\tif (n & 1) == 1:\n\t\t\t\tcount += 1\n\t\t\tn = n >> 1\n\t\treturn count\n\nprint(count_Num(10))\n<|endoftext|>"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t\treturn (n**4)\n\nprint(fourth_Power_Sum(10))\n<|endoftext|>"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test"}
{"ID": 577, "source": "MBPP:214", "prompt": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t", "predict": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef degree_radian(degree):\n\t\treturn degree * math.pi / 180\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef degree_radian(degree):\n\t\treturn degree * math.pi / 180\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180 / math.pi\n\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(radian):\n\t\treturn radian * 180"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\t# Your code here\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_list(alist[1:]) + [alist[0]]\n\n\"\"\"\nWrite a function to decode a run-length encoded given string.\n\"\"\"\ndef decode_string(s):\n\t\t# Your code here\n\t\tif s == \"\":\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_string(s[1:]) + [s[0]]\n\n\"\"\"\nWrite a function to decode a run-length encoded given integer.\n\"\"\"\ndef decode_int(i):\n\t\t# Your code here\n\t\tif i == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_int(i-1) + [i]\n\n\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list_2(alist):\n\t\t# Your code here\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_list_2(alist[1:]) + [alist[0]]\n\n\"\"\"\nWrite a function to decode a run-length encoded given string.\n\"\"\"\ndef decode_string_2(s):\n\t\t# Your code here\n\t\tif s == \"\":\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_string_2(s[1:]) + [s[0]]\n\n\"\"\"\nWrite a function to decode a run-length encoded given integer.\n\"\"\"\ndef decode_int_2(i):\n\t\t# Your code here\n\t\tif i == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_int_2(i-1) + [i]\n\n\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list_3(alist):\n\t\t# Your code here\n\t\tif alist == []:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_list_3(alist[1:]) + [alist[0]]\n\n\"\"\"\nWrite a function to decode a run-length encoded given string.\n\"\"\"\ndef decode_string_3(s):\n\t\t# Your code here\n\t\tif s == \"\":\n\t\t\treturn []\n\t\telse:\n\t\t\treturn decode_string_3(s[1:]) + [s[0]]\n\n\"\"\"\nWrite"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\t# Write your code here\n\t\tif len(list1) == 0:\n\t\t\treturn True\n\t\tif len(list2) == 0:\n\t\t\treturn False\n\t\tif list1[0] == list2[0]:\n\t\t\treturn check_subset_list(list1[1:], list2[1:])\n\t\telse:\n\t\t\treturn check_subset_list(list1[1:], list2)\n\n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list_2(list1, list2): \n\t\t# Write your code here\n\t\tif len(list1) == 0:\n\t\t\treturn True\n\t\tif len(list2) == 0:\n\t\t\treturn False\n\t\tif list1[0] == list2[0]:\n\t\t\treturn check_subset_list_2(list1[1:], list2[1:])\n\t\telse:\n\t\t\treturn check_subset_list_2(list1, list2[1:])\n\n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list_3(list1, list2): \n\t\t# Write your code here\n\t\tif len(list1) == 0:\n\t\t\treturn True\n\t\tif len(list2) == 0:\n\t\t\treturn False\n\t\tif list1[0] == list2[0]:\n\t\t\treturn check_subset_list_3(list1[1:], list2[1:])\n\t\telse:\n\t\t\treturn check_subset_list_3(list1, list2[1:])\n\n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list_4(list1, list2): \n\t\t# Write your code here\n\t\tif len(list1) == 0:\n\t\t\treturn True\n\t\tif len(list2) == 0:\n\t\t\treturn False\n\t\tif list1[0] == list2[0]:\n\t\t\treturn check_subset_list_4(list1[1:], list2[1:])\n\t\telse:\n\t\t\treturn check_subset_list_4(list1, list2[1:])\n\n\"\"\"\nWrite a function to check if a nested"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\t# Your code here\n\t\t#print(str)\n\t\tfor i in range(len(str)):\n\t\t\tfor j in range(i+1,len(str)):\n\t\t\t\tif str[i] == str[j]:\n\t\t\t\t\treturn str[i]\n\t\treturn None\n\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated_Char(\"abcde\"))\nprint(first_Repeated"}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t\tif A == B:\n\t\t\treturn 0\n\t\telif A > B:\n\t\t\treturn 1 + min_Operations(A-B,B)\n\t\telse:\n\t\t\treturn 1 + min_Operations(A,B-A)\n\nprint(min_Operations(10,10))\nprint(min_Operations(10,11))\nprint(min_Operations(10,12))\nprint(min_Operations(10,13))\nprint(min_Operations(10,14))\nprint(min_Operations(10,15))\nprint(min_Operations(10,16))\nprint(min_Operations(10,17))\nprint(min_Operations(10,18))\nprint(min_Operations(10,19))\nprint(min_Operations(10,20))\nprint(min_Operations(10,21))\nprint(min_Operations(10,22))\nprint(min_Operations(10,23))\nprint(min_Operations(10,24))\nprint(min_Operations(10,25))\nprint(min_Operations(10,26))\nprint(min_Operations(10,27))\nprint(min_Operations(10,28))\nprint(min_Operations(10,29))\nprint(min_Operations(10,30))\nprint(min_Operations(10,31))\nprint(min_Operations(10,32))\nprint(min_Operations(10,33))\nprint(min_Operations(10,34))\nprint(min_Operations(10,35))\nprint(min_Operations(10,36))\nprint(min_Operations(10,37))\nprint(min_Operations(10,38))\nprint(min_Operations(10,39))\nprint(min_Operations(10,40))\nprint(min_Operations(10,41))\nprint(min_Operations(10,42))\nprint(min_Operations(10,43))\nprint(min_Operations(10,44))\nprint"}
{"ID": 582, "source": "MBPP:219", "prompt": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:param K: int\n\t\t:return: tuple\n\t\t\"\"\"\n\t\tmin_val = test_tup[0]\n\t\tmax_val = test_tup[0]\n\t\tfor i in range(1, len(test_tup)):\n\t\t\tif test_tup[i] < min_val:\n\t\t\t\tmin_val = test_tup[i]\n\t\t\tif test_tup[i] > max_val:\n\t\t\t\tmax_val = test_tup[i]\n\t\treturn min_val, max_val\n\n\"\"\"\nWrite a function to find the sum of all elements in the given tuple.\n\"\"\"\ndef sum_all_elements(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: int\n\t\t\"\"\"\n\t\tsum_val = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tsum_val += test_tup[i]\n\t\treturn sum_val\n\n\"\"\"\nWrite a function to find the product of all elements in the given tuple.\n\"\"\"\ndef product_all_elements(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: int\n\t\t\"\"\"\n\t\tprod_val = 1\n\t\tfor i in range(len(test_tup)):\n\t\t\tprod_val *= test_tup[i]\n\t\treturn prod_val\n\n\"\"\"\nWrite a function to find the sum of all elements in the given tuple.\n\"\"\"\ndef sum_all_elements_2(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: int\n\t\t\"\"\"\n\t\tsum_val = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tsum_val += test_tup[i]\n\t\treturn sum_val\n\n\"\"\"\nWrite a function to find the product of all elements in the given tuple.\n\"\"\"\ndef product_all_elements_2(test_tup):\n\t\t\"\"\"\n\t\t:param test_tup: tuple\n\t\t:return: int\n\t\t\"\"\"\n\t\tprod_val = 1\n\t\tfor i in range(len(test_tup)):\n\t\t\tprod_val *= test_tup[i]\n\t\treturn prod_val\n\n\"\"\"\nWrite a function to"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t\tif n == 0:\n\t\t\treturn text\n\t\telse:\n\t\t\treturn replace_max_specialchar(text,n-1) + text[text.rfind(' '):]\n\nprint(replace_max_specialchar(\"Hello, World!\", 3))\nprint(replace_max_specialchar(\"Hello, World!\", 2))\nprint(replace_max_specialchar(\"Hello, World!\", 1))\nprint(replace_max_specialchar(\"Hello, World!\", 0))\nprint(replace_max_specialchar(\"Hello, World!\", -1))\nprint(replace_max_specialchar(\"Hello, World!\", -2))\nprint(replace_max_specialchar(\"Hello, World!\", -3))\nprint(replace_max_specialchar(\"Hello, World!\", -4))\nprint(replace_max_specialchar(\"Hello, World!\", -5))\nprint(replace_max_specialchar(\"Hello, World!\", -6))\nprint(replace_max_specialchar(\"Hello, World!\", -7))\nprint(replace_max_specialchar(\"Hello, World!\", -8))\nprint(replace_max_specialchar(\"Hello, World!\", -9))\nprint(replace_max_specialchar(\"Hello, World!\", -10))\nprint(replace_max_specialchar(\"Hello, World!\", -11))\nprint(replace_max_specialchar(\"Hello, World!\", -12))\nprint(replace_max_specialchar(\"Hello, World!\", -13))\nprint(replace_max_specialchar(\"Hello, World!\", -14))\nprint(replace_max_specialchar(\"Hello, World!\", -15))\nprint(replace_max_specialchar(\"Hello, World!\", -16))\nprint(replace_max_specialchar(\"Hello, World!\", -17))\nprint(replace_max_specialchar(\"Hello, World!\", -18))\nprint(replace_max_specialchar(\"Hello, World!\", -19))\nprint(replace_max_specialchar(\"Hello, World!\", -20))\nprint(replace_max_specialchar(\"Hello, World!\", -21))\nprint(replace_max_specialchar(\"Hello, World!\", -22))\nprint(replace_max_specialchar(\"Hello, World!\", -2"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tif nums[i] % 2 == 0:\n\t\t\t\treturn nums[i]\n\nprint(first_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_2(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_3(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_4(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_5(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_6(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_7(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_8(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type_9(test_tuple):\n\t\tif type(test_tuple) == tuple:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check"}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t\tif n == 0:\n\t\t\treturn False\n\t\tif n == 1:\n\t\t\treturn arr[0] == x\n\t\tif n % 2 == 0:\n\t\t\treturn arr[n//2] == x\n\t\telse:\n\t\t\treturn arr[n//2] < x\n\ndef main():\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tn = len(arr)\n\tx = 5\n\tprint(is_majority(arr, n, x))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t\tcount = 0\n\t\twhile n:\n\t\t\tcount += n & 1\n\t\t\tn >>= 1\n\t\treturn count\n\nprint(count_Set_Bits(10))\n<|endoftext|>"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t\tif low > high: \n\t\t\treturn -1 \n\t\tmid = (low + high) // 2 \n\t\tif arr[mid] < arr[high]: \n\t\t\treturn mid \n\t\tif arr[low] < arr[mid]: \n\t\t\treturn find_Min(arr,low,mid-1) \n\t\treturn find_Min(arr,mid+1,high) \n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(find_Min(arr,0,len(arr)-1))\n<|endoftext|>"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t\treturn ''.join(char for char in str if char.isalpha() and not char.isdigit())\n\nprint(odd_values_string(\"Hello World!\"))\n<|endoftext|>"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t\tif a < b and a < c: \n\t\t\treturn a \n\t\telif b < a and b < c: \n\t\t\treturn b \n\t\telse: \n\t\t\treturn c \n\nprint(min_of_three(1,2,3))\nprint(min_of_three(1,2,3))\nprint(min_of_three(1,2,3))\n<|endoftext|>"}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t\tif(n==0):\n\t\t\treturn True\n\t\tif(n==1):\n\t\t\treturn False\n\t\tif(l==r):\n\t\t\treturn False\n\t\tif(l>r):\n\t\t\treturn False\n\t\tif(l==0):\n\t\t\treturn False\n\t\tif(r==0):\n\t\t\treturn False\n\t\tif(l==1):\n\t\t\treturn True\n\t\tif(r==1):\n\t\t\treturn False\n\t\tif(l==2):\n\t\t\treturn True\n\t\tif(r==2):\n\t\t\treturn False\n\t\tif(l==3):\n\t\t\treturn True\n\t\tif(r==3):\n\t\t\treturn False\n\t\tif(l==4):\n\t\t\treturn True\n\t\tif(r==4):\n\t\t\treturn False\n\t\tif(l==5):\n\t\t\treturn True\n\t\tif(r==5):\n\t\t\treturn False\n\t\tif(l==6):\n\t\t\treturn True\n\t\tif(r==6):\n\t\t\treturn False\n\t\tif(l==7):\n\t\t\treturn True\n\t\tif(r==7):\n\t\t\treturn False\n\t\tif(l==8):\n\t\t\treturn True\n\t\tif(r==8):\n\t\t\treturn False\n\t\tif(l==9):\n\t\t\treturn True\n\t\tif(r==9):\n\t\t\treturn False\n\t\tif(l==10):\n\t\t\treturn True\n\t\tif(r==10):\n\t\t\treturn False\n\t\tif(l==11):\n\t\t\treturn True\n\t\tif(r==11):\n\t\t\treturn False\n\t\tif(l==12):\n\t\t\treturn True\n\t\tif(r==12):\n\t\t\treturn False\n\t\tif(l==13):\n\t\t\treturn True\n\t\tif(r==13):\n\t\t\treturn False\n\t\tif(l==14):\n\t\t\treturn True\n\t\tif(r==14):\n\t\t\treturn False\n\t\tif(l==15):\n\t\t\treturn True\n\t\tif(r==15):\n\t\t\treturn False\n\t\tif(l==16):\n\t\t\treturn True\n\t\tif(r==16):\n\t\t\treturn False\n\t\tif(l==17):\n\t\t\treturn True\n\t\tif(r==17):\n\t\t\treturn False\n\t\tif(l==18):\n\t\t\treturn True\n\t\tif("}
{"ID": 592, "source": "MBPP:229", "prompt": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t\tfor i in range(n):\n\t\t\tif arr[i] < 0:\n\t\t\t\tarr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\t\treturn arr\n\narr = [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(re_arrange_array(arr, n))\n<|endoftext|>"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t\tstr1 = str1.replace(\" \",\"\")\n\t\tstr1 = str1.replace(\"\\n\",\"\")\n\t\tstr1 = str1.replace(\"\\t\",\"\")\n\t\tstr1 = str1.replace(\"\\r\",\"\")\n\t\tstr1 = str1.replace(\"\\f\",\"\")\n\t\tstr1 = str1.replace(\"\\v\",\"\")\n\t\tstr1 = str1.replace(\"\\0\",\"\")\n\t\tstr1 = str1.replace(\"\\x0b\",\"\")\n\t\tstr1 = str1.replace(\"\\x0c\",\"\")\n\t\tstr1 = str1.replace(\"\\x0d\",\"\")\n\t\tstr1 = str1.replace(\"\\x0e\",\"\")\n\t\tstr1 = str1.replace(\"\\x0f\",\"\")\n\t\tstr1 = str1.replace(\"\\x10\",\"\")\n\t\tstr1 = str1.replace(\"\\x11\",\"\")\n\t\tstr1 = str1.replace(\"\\x12\",\"\")\n\t\tstr1 = str1.replace(\"\\x13\",\"\")\n\t\tstr1 = str1.replace(\"\\x14\",\"\")\n\t\tstr1 = str1.replace(\"\\x15\",\"\")\n\t\tstr1 = str1.replace(\"\\x16\",\"\")\n\t\tstr1 = str1.replace(\"\\x17\",\"\")\n\t\tstr1 = str1.replace(\"\\x18\",\"\")\n\t\tstr1 = str1.replace(\"\\x19\",\"\")\n\t\tstr1 = str1.replace(\"\\x1a\",\"\")\n\t\tstr1 = str1.replace(\"\\x1b\",\"\")\n\t\tstr1 = str1.replace(\"\\x1c\",\"\")\n\t\tstr1 = str1.replace(\"\\x1d\",\"\")\n\t\tstr1 = str1.replace(\"\\x1e\",\"\")\n\t\tstr1 = str1.replace(\"\\x1f\",\"\")\n\t\tstr1 = str1.replace(\"\\x7f\",\"\")\n\t\tstr1 = str1.replace(\"\\x80\",\"\")\n\t\tstr1 = str1.replace(\"\\x81\",\"\")\n\t\tstr1 = str1.replace(\"\\x82\",\"\")\n\t\tstr1 = str1.replace(\"\\x83\",\"\")\n\t\tstr1 = str1.replace(\"\\x84\",\"\")\n\t\tstr1 = str1.replace(\"\\x85\",\"\")\n\t\tstr1 = str1.replace(\"\\x86\",\"\")\n\t\tstr1 = str1.replace(\"\\x87\",\"\")\n\t\tstr1 = str1.replace"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t\tmax_sum = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tmax_sum = max(max_sum, tri[i][j])\n\t\treturn max_sum\n\ndef main():\n\ttri = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tn = len(tri)\n\tprint(max_sum(tri, n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum(list1,n):\n\t\treturn sorted(list1)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum_2(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum_2(list1,n):\n\t\treturn sorted(list1)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum_3(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum_3(list1,n):\n\t\treturn sorted(list1)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum_4(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum_4(list1,n):\n\t\treturn sorted(list1)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum_5(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum_5(list1,n):\n\t\treturn sorted(list1)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum_6(list1,n):\n\t\treturn sorted(list1,reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef smal_nnum_6(list1,n):\n\t\treturn sorted(list1)[:n]\n\n"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t\treturn 2*pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_cone(r,h):\n\t\treturn 2*pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_sphere(r):\n\t\treturn 4*pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4*pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_cube(l,b,h):\n\t\treturn 2*l*b*h\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h**3\n\n\"\"\"\nWrite a function to find the surface area of a parallelepiped.\n\"\"\"\ndef surface_parallelepiped(l,b,h):\n\t\treturn 2*l*b*h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_parallelepiped(l,b,h):\n\t\treturn l*b*h**3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surface_pyramid(l,b,h):\n\t\treturn 2*l*b*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(l,b,h):\n\t\treturn l*b*h**3\n\n\"\"\"\nWrite a function to find the surface area of a trapezoid.\n\"\"\"\ndef surface_trapezoid(l,b,h):\n\t\treturn 2*l*b*h\n\n\"\"\"\nWrite a function to find the volume of a trapezoid"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l[0] * l[1] * l[2]\n\nprint(volume_cube([1,2,3]))\nprint(volume_cube([1,2,3,4]))\nprint(volume_cube([1,2,3,4,5]))\nprint(volume_cube([1,2,3,4,5,6]))\nprint(volume_cube([1,2,3,4,5,6,7]))\nprint(volume_cube([1,2,3,4,5,6,7,8]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(volume_cube([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t\treturn n & 1\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n): \n\t\treturn n & 2\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number(n): \n\t\treturn n & 4\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_2(n): \n\t\treturn n & 8\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_3(n): \n\t\treturn n & 16\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_4(n): \n\t\treturn n & 32\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_5(n): \n\t\treturn n & 64\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_6(n): \n\t\treturn n & 128\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_7(n): \n\t\treturn n & 256\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_8(n): \n\t\treturn n & 512\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_9(n): \n\t\treturn n & 1024\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_10(n): \n\t\treturn n & 2048\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_11(n): \n\t\treturn n & 4096\n\n\"\"\"\nWrite a python function to set all bits of a given number.\n\"\"\"\ndef bit_set_number_12(n"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t\tif N==1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn No_of_Triangle(N-1,K)+No_of_Triangle(N-1,K-1)\n\nprint(No_of_Triangle(5,3))\n<|endoftext|>"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\t# Create a dictionary to store the occurrences of each record\n\t\toccurences = {}\n\t\t# Iterate over the test list\n\t\tfor i in range(len(test_list)):\n\t\t\t# Get the record\n\t\t\trecord = test_list[i]\n\t\t\t# Get the record's timestamp\n\t\t\ttimestamp = record[0]\n\t\t\t# Get the record's value\n\t\t\tvalue = record[1]\n\t\t\t# Check if the record is already in the dictionary\n\t\t\tif timestamp in occurences:\n\t\t\t\t# Increment the count of the record\n\t\t\t\toccurences[timestamp] += 1\n\t\t\telse:\n\t\t\t\t# Add the record to the dictionary\n\t\t\t\toccurences[timestamp] = 1\n\t\t# Return the dictionary\n\t\treturn occurences\n\n\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences_2(test_list):\n\t\t# Create a dictionary to store the occurrences of each record\n\t\toccurences = {}\n\t\t# Iterate over the test list\n\t\tfor i in range(len(test_list)):\n\t\t\t# Get the record\n\t\t\trecord = test_list[i]\n\t\t\t# Get the record's timestamp\n\t\t\ttimestamp = record[0]\n\t\t\t# Get the record's value\n\t\t\tvalue = record[1]\n\t\t\t# Check if the record is already in the dictionary\n\t\t\tif timestamp in occurences:\n\t\t\t\t# Increment the count of the record\n\t\t\t\toccurences[timestamp] += 1\n\t\t\telse:\n\t\t\t\t# Add the record to the dictionary\n\t\t\t\toccurences[timestamp] = 1\n\t\t# Return the dictionary\n\t\treturn occurences\n\n\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences_3(test_list):\n\t\t# Create a dictionary to store the occurrences of each record\n\t\toccurences = {}\n\t\t# Iterate over the test list\n\t\tfor i in range(len(test_list)):\n\t\t\t# Get the record\n\t\t\trecord = test_list[i]\n\t\t\t# Get the record's timestamp\n\t\t\ttimestamp = record[0]\n\t\t\t# Get the record's value\n\t\t\tvalue = record[1]\n\t\t\t# Check if the record is already in the dictionary\n\t\t\tif timestamp"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t\tcount = 0\n\t\tfor i in range(len(str)):\n\t\t\tfor j in range(i+1, len(str)):\n\t\t\t\tif str[i:j+1]!= \"\":\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(number_of_substrings(\"abc\"))\nprint(number_of_substrings(\"aab\"))\nprint(number_of_substrings(\"abcde\"))\nprint(number_of_substrings(\"abcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde\"))\nprint(number_of_substrings(\"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telif n == 1:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n\nprint(get_total_number_of_sequences(10,3))\n<|endoftext|>"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_2(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_3(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_4(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_5(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_6(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_7(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_8(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_9(list1,list2):\n\t\tlist1.pop()\n\t\tlist1.append(list2)\n\t\treturn list1\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list_10(list1,list2"}
{"ID": 604, "source": "MBPP:241", "prompt": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t", "predict": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t\tarr = []\n\t\tfor i in range(m):\n\t\t\tarr.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tarr[i].append('*')\n\t\t\t\tfor k in range(o):\n\t\t\t\t\tarr[i][j] += '*'\n\t\treturn arr\n\n\"\"\"\nWrite a function to generate a 3d array having each element as 'O'.\n\"\"\"\ndef array_3d_o(m,n,o):\n\t\tarr = []\n\t\tfor i in range(m):\n\t\t\tarr.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tarr[i].append('O')\n\t\t\t\tfor k in range(o):\n\t\t\t\t\tarr[i][j] += 'O'\n\t\treturn arr\n\n\"\"\"\nWrite a function to generate a 3d array having each element as 'X'.\n\"\"\"\ndef array_3d_x(m,n,o):\n\t\tarr = []\n\t\tfor i in range(m):\n\t\t\tarr.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tarr[i].append('X')\n\t\t\t\tfor k in range(o):\n\t\t\t\t\tarr[i][j] += 'X'\n\t\treturn arr\n\n\"\"\"\nWrite a function to generate a 3d array having each element as 'I'.\n\"\"\"\ndef array_3d_i(m,n,o):\n\t\tarr = []\n\t\tfor i in range(m):\n\t\t\tarr.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tarr[i].append('I')\n\t\t\t\tfor k in range(o):\n\t\t\t\t\tarr[i][j] += 'I'\n\t\treturn arr\n\n\"\"\"\nWrite a function to generate a 3d array having each element as 'J'.\n\"\"\"\ndef array_3d_j(m,n,o):\n\t\tarr = []\n\t\tfor i in range(m):\n\t\t\tarr.append([])\n\t\t\tfor j in range(n):\n\t\t\t\tarr[i].append('J')\n\t\t\t\tfor k in range(o):\n\t\t\t\t\tarr[i][j] += 'J'\n\t\treturn arr\n\n\"\"\"\nWrite a function to generate a 3d array having each element as 'L'.\n\"\"\"\ndef array_3d_l(m,n,o):\n\t\tarr = []\n\t"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t\tcount = 0\n\t\tfor i in str1:\n\t\t\tcount += 1\n\t\treturn count\n\nprint(count_charac(\"Hello\"))\nprint(count_charac(\"Hello World\"))\nprint(count_charac(\"Hello World!\"))\nprint(count_charac(\"Hello World! Hello World!\"))\nprint(count_charac(\"Hello World! Hello World! Hello World!\"))\nprint(count_charac(\"Hello World! Hello World! Hello World! Hello World!\"))\nprint(count_charac(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\tlst.sort(key=lambda x: x[0])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of second element of tuples.\n\"\"\"\ndef sort_on_occurence_2(lst): \n\t\tlst.sort(key=lambda x: x[1])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of third element of tuples.\n\"\"\"\ndef sort_on_occurence_3(lst): \n\t\tlst.sort(key=lambda x: x[2])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of fourth element of tuples.\n\"\"\"\ndef sort_on_occurence_4(lst): \n\t\tlst.sort(key=lambda x: x[3])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of fifth element of tuples.\n\"\"\"\ndef sort_on_occurence_5(lst): \n\t\tlst.sort(key=lambda x: x[4])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of sixth element of tuples.\n\"\"\"\ndef sort_on_occurence_6(lst): \n\t\tlst.sort(key=lambda x: x[5])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of seventh element of tuples.\n\"\"\"\ndef sort_on_occurence_7(lst): \n\t\tlst.sort(key=lambda x: x[6])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of eighth element of tuples.\n\"\"\"\ndef sort_on_occurence_8(lst): \n\t\tlst.sort(key=lambda x: x[7])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of ninth element of tuples.\n\"\"\"\ndef sort_on_occurence_9(lst): \n\t\tlst.sort(key=lambda x: x[8])\n\t\treturn lst\n\n\"\"\"\nWrite a function to sort the given list based on the occurrence of tenth element of tuples.\n\"\"\"\ndef sort_on_occurence_10(lst):"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\t# Write your code here\n\t\tif N < 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\ti = 1\n\t\t\twhile i*i <= N:\n\t\t\t\tif N % i == 0:\n\t\t\t\t\treturn i\n\t\t\t\ti += 1\n\t\t\treturn N\n\nprint(next_Perfect_Square(10))\nprint(next_Perfect_Square(11))\nprint(next_Perfect_Square(12))\nprint(next_Perfect_Square(13))\nprint(next_Perfect_Square(14))\nprint(next_Perfect_Square(15))\nprint(next_Perfect_Square(16))\nprint(next_Perfect_Square(17))\nprint(next_Perfect_Square(18))\nprint(next_Perfect_Square(19))\nprint(next_Perfect_Square(20))\nprint(next_Perfect_Square(21))\nprint(next_Perfect_Square(22))\nprint(next_Perfect_Square(23))\nprint(next_Perfect_Square(24))\nprint(next_Perfect_Square(25))\nprint(next_Perfect_Square(26))\nprint(next_Perfect_Square(27))\nprint(next_Perfect_Square(28))\nprint(next_Perfect_Square(29))\nprint(next_Perfect_Square(30))\nprint(next_Perfect_Square(31))\nprint(next_Perfect_Square(32))\nprint(next_Perfect_Square(33))\nprint(next_Perfect_Square(34))\nprint(next_Perfect_Square(35))\nprint(next_Perfect_Square(36))\nprint(next_Perfect_Square(37))\nprint(next_Perfect_Square(38))\nprint(next_Perfect_Square(39))\nprint(next_Perfect_Square(40))\nprint(next_Perfect_Square(41))\nprint(next_Perfect_Square(42))\nprint(next_Perfect_Square(43))\nprint(next_Perfect"}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t\t# Write your code here\n\t\tdp = [[0 for i in range(n+1)] for j in range(n+1)]\n\t\tfor i in range(n+1):\n\t\t\tdp[i][0] = arr[i]\n\t\tfor i in range(1, n+1):\n\t\t\tfor j in range(1, n+1):\n\t\t\t\tif arr[j-1] > arr[j]:\n\t\t\t\t\tdp[i][j] = dp[i-1][j-1] + arr[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\t\treturn dp[n][n]\n\nprint(max_sum([1, 2, 3, 4, 5], 5))\nprint(max_sum([1, 2, 3, 4, 5], 6))\nprint(max_sum([1, 2, 3, 4, 5], 7))\nprint(max_sum([1, 2, 3, 4, 5], 8))\nprint(max_sum([1, 2, 3, 4, 5], 9))\nprint(max_sum([1, 2, 3, 4, 5], 10))\nprint(max_sum([1, 2, 3, 4, 5], 11))\nprint(max_sum([1, 2, 3, 4, 5], 12))\nprint(max_sum([1, 2, 3, 4, 5], 13))\nprint(max_sum([1, 2, 3, 4, 5], 14))\nprint(max_sum([1, 2, 3, 4, 5], 15))\nprint(max_sum([1, 2, 3, 4, 5], 16))\nprint(max_sum([1, 2, 3, 4, 5], 17))\nprint(max_sum([1, 2, 3, 4, 5], 18))\nprint(max_sum([1"}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t\t\"\"\"\n\t\tThis function computes the square root of a number using the babylonian method.\n\t\t\"\"\"\n\t\tif number == 0:\n\t\t\treturn 0\n\t\telif number == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn (number ** 0.5) + babylonian_squareroot(number ** 0.5)\n\n\"\"\"\nWrite a function for computing the sum of the squares of the first n natural numbers.\n\"\"\"\ndef sum_of_squares(n):\n\t\t\"\"\"\n\t\tThis function computes the sum of the squares of the first n natural numbers.\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor i in range(1, n + 1):\n\t\t\tsum += i ** 2\n\t\treturn sum\n\n\"\"\"\nWrite a function for computing the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\t\t\"\"\"\n\t\tThis function computes the sum of the first n natural numbers.\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor i in range(1, n + 1):\n\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function for computing the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_with_recursion(n):\n\t\t\"\"\"\n\t\tThis function computes the sum of the first n natural numbers.\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n + sum_of_first_n_natural_numbers_with_recursion(n - 1)\n\n\"\"\"\nWrite a function for computing the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_with_loop(n):\n\t\t\"\"\"\n\t\tThis function computes the sum of the first n natural numbers.\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor i in range(1, n + 1):\n\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function for computing the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_with_recursion_and_loop(n):\n\t\t\"\"\"\n\t\tThis function computes the sum of the"}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t\t# Create a dictionary to store the longest palindromic subsequence\n\t\t# and its length\n\t\tlongest_subsequence = {}\n\t\tlongest_subsequence_length = 0\n\n\t\t# Iterate through the string\n\t\tfor i in range(len(str)):\n\t\t\t# Create a dictionary to store the longest palindromic subsequence\n\t\t\t# and its length\n\t\t\tlongest_subsequence = {}\n\t\t\tlongest_subsequence_length = 0\n\n\t\t\t# Iterate through the string\n\t\t\tfor j in range(len(str)):\n\t\t\t\t# If the characters are equal, then the longest palindromic\n\t\t\t\t# subsequence is the current substring\n\t\t\t\tif str[i] == str[j]:\n\t\t\t\t\t# If the current substring is longer than the previous\n\t\t\t\t\t# longest substring, then update the longest substring\n\t\t\t\t\tif len(str[i:j+1]) > longest_subsequence_length:\n\t\t\t\t\t\tlongest_subsequence_length = len(str[i:j+1])\n\t\t\t\t\t\tlongest_subsequence[str[i:j+1]] = str[i:j+1]\n\n\t\t\t\t# If the characters are not equal, then the longest palindromic\n\t\t\t\t# subsequence is not the current substring\n\t\t\t\telse:\n\t\t\t\t\t# If the current substring is longer than the previous\n\t\t\t\t\t# longest substring, then update the longest substring\n\t\t\t\t\tif len(str[i:j+1]) > longest_subsequence_length:\n\t\t\t\t\t\tlongest_subsequence_length = len(str[i:j+1])\n\t\t\t\t\t\tlongest_subsequence[str[i:j+1]] = str[i:j+1]\n\n\t\t\t# Update the longest palindromic subsequence dictionary\n\t\t\tlongest_subsequence_dictionary = longest_subsequence\n\t\t\tlongest_subsequence_dictionary_length = len(longest_subsequence)\n\n\t\t\t# If the longest palindromic subsequence dictionary is not empty,\n\t\t\t# then update the longest palindromic subsequence length\n\t\t\tif longest_subsequence_dictionary_length > longest_subsequence_length:\n\t\t\t\tlongest_subsequence_length = longest_subsequence_dictionary_length\n\t\t\t\tlongest_subsequence = longest_subsequence_dictionary\n\n\t\t# Return the longest palindromic subsequence\n\t\treturn longest_subsequence\n\n# Test cases\nprint(lps"}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\treturn n*(n+1)/2\n\nprint(harmonic_sum(5))\n<|endoftext|>"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t\treturn list(set(array_nums1) & set(array_nums2))\n\nprint(intersection_array([1,2,3,4,5], [2,3,4,5,6]))\n<|endoftext|>"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t\tcount = 0\n\t\tfor i in tup:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(count_X(tup, 10))\n\n\"\"\"\nWrite a python function to count the occcurences of an element in a list.\n\"\"\"\ndef count_X(lst, x): \n\t\tcount = 0\n\t\tfor i in lst:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_X(lst, 10))\n\n\"\"\"\nWrite a python function to count the occcurences of an element in a dictionary.\n\"\"\"\ndef count_X(dct, x): \n\t\tcount = 0\n\t\tfor i in dct:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\ndct = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}\nprint(count_X(dct, 10))\n\n\"\"\"\nWrite a python function to count the occcurences of an element in a set.\n\"\"\"\ndef count_X(set, x): \n\t\tcount = 0\n\t\tfor i in set:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\nset = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nprint(count_X(set, 10))\n\n\"\"\"\nWrite a python function to count the occcurences of an element in a string.\n\"\"\"\ndef count_X(str, x): \n\t\tcount = 0\n\t\tfor i in str:\n\t\t\tif i == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\nstr ="}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i].insert(0,element)\n\t\treturn list\n\n\"\"\"\nWrite a function to remove an element from a list.\n\"\"\"\ndef remove_element(list,element):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i].remove(element)\n\t\treturn list\n\n\"\"\"\nWrite a function to reverse a list.\n\"\"\"\ndef reverse_list(list):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = list[i][::-1]\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list.\n\"\"\"\ndef sort_list(list):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i])\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in ascending order.\n\"\"\"\ndef sort_list_asc(list):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i],reverse=False)\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in descending order.\n\"\"\"\ndef sort_list_desc(list):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i],reverse=True)\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in ascending order.\n\"\"\"\ndef sort_list_by_key(list,key):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i],key=key)\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in descending order.\n\"\"\"\ndef sort_list_by_key_desc(list,key):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i],key=key,reverse=True)\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in ascending order.\n\"\"\"\ndef sort_list_by_key_asc(list,key):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = sorted(list[i],key=key,reverse=False)\n\t\treturn list\n\n\"\"\"\nWrite a function to sort a list in descending order"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t\tr = numbers[0]\n\t\ttheta = numbers[1]\n\t\treturn r, theta\n\n\"\"\"\nWrite a python function to convert polar coordinates to complex numbers.\n\"\"\"\ndef convert_back(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the distance between two complex numbers.\n\"\"\"\ndef distance(numbers):\n\t\tr1, theta1 = numbers\n\t\tr2, theta2 = numbers\n\t\treturn math.sqrt((r1-r2)**2 + (theta1-theta2)**2)\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle(numbers):\n\t\tr1, theta1 = numbers\n\t\tr2, theta2 = numbers\n\t\treturn math.atan2(r1-r2, theta1-theta2)\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_2(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_3(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_4(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_5(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_6(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two complex numbers.\n\"\"\"\ndef angle_back_7(r, theta):\n\t\tnumbers = [r, theta]\n\t\treturn numbers\n\n\"\"\"\nWrite a python function to find the angle between two"}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t\tcount = 0\n\t\tfor i in list1:\n\t\t\tif i % 2 == 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t\treturn [word for word in text.split() if word[0] in 'aeiou']\n\nprint(words_ae('a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a"}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors(l, n-1) for x in l]\n\ndef combinations_colors_2(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_2(l, n-1) for x in l]\n\ndef combinations_colors_3(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_3(l, n-1) for x in l]\n\ndef combinations_colors_4(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_4(l, n-1) for x in l]\n\ndef combinations_colors_5(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_5(l, n-1) for x in l]\n\ndef combinations_colors_6(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_6(l, n-1) for x in l]\n\ndef combinations_colors_7(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_7(l, n-1) for x in l]\n\ndef combinations_colors_8(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_8(l, n-1) for x in l]\n\ndef combinations_colors_9(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_9(l, n-1) for x in l]\n\ndef combinations_colors_10(l, n):\n\t\tif n == 0:\n\t\t\treturn [[]]\n\t\telse:\n\t\t\treturn [x + combinations_colors_10(l, n-1) for"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t\tcount = 0\n\t\tfor i in range(2,n):\n\t\t\tif is_Prime(i):\n\t\t\t\tcount += 1\n\t\treturn count\n\ndef is_Prime(n):\n\tif n == 2:\n\t\treturn True\n\tif n == 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\tfor i in range(5,int(n**0.5)+1,6):\n\t\tif n % i == 0 or n % (i+2) == 0:\n\t\t\treturn False\n\treturn True\n\nprint(count_Primes_nums(1000000))<|endoftext|>"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t\ta,b = b,a\n\t\treturn a,b\n\nprint(swap_numbers(1,2))\nprint(swap_numbers(2,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint(swap_numbers(1,1))\nprint"}
{"ID": 621, "source": "MBPP:258", "prompt": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t", "predict": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t\treturn sum(1 for num in array_nums if num % 2!= 0)\n\nprint(count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t\tif test_tup1[0] > test_tup2[0]:\n\t\t\treturn test_tup1\n\t\telse:\n\t\t\treturn test_tup2\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef max_two_numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef max_three_numbers(num1, num2, num3):\n\tif num1 > num2:\n\t\tif num1 > num3:\n\t\t\treturn num1\n\t\telse:\n\t\t\treturn num3\n\telse:\n\t\tif num2 > num3:\n\t\t\treturn num2\n\t\telse:\n\t\t\treturn num3\n\n\"\"\"\nWrite a function to find the maximum of four numbers.\n\"\"\"\ndef max_four_numbers(num1, num2, num3, num4):\n\tif num1 > num2:\n\t\tif num1 > num3:\n\t\t\tif num1 > num4:\n\t\t\t\treturn num1\n\t\t\telse:\n\t\t\t\treturn num4\n\t\telse:\n\t\t\tif num2 > num3:\n\t\t\t\treturn num2\n\t\t\telse:\n\t\t\t\treturn num3\n\telse:\n\t\tif num2 > num3:\n\t\t\tif num2 > num4:\n\t\t\t\treturn num2\n\t\t\telse:\n\t\t\t\treturn num4\n\t\telse:\n\t\t\tif num3 > num4:\n\t\t\t\treturn num3\n\t\t\telse:\n\t\t\t\treturn num4\n\n\"\"\"\nWrite a function to find the maximum of five numbers.\n\"\"\"\ndef max_five_numbers(num1, num2, num3, num4, num5):\n\tif num1 > num2:\n\t\tif num1 > num3:\n\t\t\tif num1 > num4:\n\t\t\t\tif num1 > num5:\n\t\t\t\t\treturn num1\n\t\t\t\telse:\n\t\t\t\t\treturn num5\n\t\t\telse:\n\t\t\t\tif num2 > num3:\n\t\t\t\t\treturn num2\n\t\t\t\telse:\n\t\t\t\t\treturn num3\n\t\telse:\n\t\t\tif num2 > num3:\n\t\t\t\tif num2 > num4:\n\t\t\t\t\treturn num2\n\t\t\t\telse:\n\t\t\t\t\treturn num4\n\t\t\telse:\n\t\t\t\tif num3"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t\t\"\"\"\n\t\t:param n: the nth prime number\n\t\t:return: the nth prime number\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 2\n\t\telif n == 2:\n\t\t\treturn 3\n\t\telif n == 3:\n\t\t\treturn 5\n\t\telse:\n\t\t\treturn newman_prime(n-1) + newman_prime(n-2) + newman_prime(n-3)\n\nprint(newman_prime(10))\n<|endoftext|>"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical multiplication operation across the given tuples.\n\"\"\"\ndef multiplication_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical subtraction operation across the given tuples.\n\"\"\"\ndef subtraction_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical addition operation across the given tuples.\n\"\"\"\ndef addition_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x+y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical power operation across the given tuples.\n\"\"\"\ndef power_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple of numbers\n\t\t:param test_tup2: tuple of numbers\n\t\t:return: tuple of numbers\n\t\t\"\"\"\n\t\treturn tuple(map(lambda x, y: x**y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform mathematical modulo operation across the given tuples.\n\"\"\"\ndef modulo_elements(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:"}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t\tif len(list1) <= L:\n\t\t\treturn [list1, []]\n\t\telse:\n\t\t\treturn [list1[:L], list1[L:]]\n\n\"\"\"\nWrite a function to find the longest common prefix of two given strings.\n\"\"\"\ndef longest_common_prefix(str1, str2):\n\tif len(str1) == 0:\n\t\treturn str2\n\telif len(str2) == 0:\n\t\treturn str1\n\telse:\n\t\tif str1[0] == str2[0]:\n\t\t\treturn longest_common_prefix(str1[1:], str2[1:])\n\t\telse:\n\t\t\treturn longest_common_prefix(str1, str2[1:])\n\n\"\"\"\nWrite a function to find the longest common suffix of two given strings.\n\"\"\"\ndef longest_common_suffix(str1, str2):\n\tif len(str1) == 0:\n\t\treturn str2\n\telif len(str2) == 0:\n\t\treturn str1\n\telse:\n\t\tif str1[-1] == str2[-1]:\n\t\t\treturn longest_common_suffix(str1[:-1], str2[:-1])\n\t\telse:\n\t\t\treturn longest_common_suffix(str1, str2[:-1])\n\n\"\"\"\nWrite a function to find the longest common subsequence of two given strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\tif len(str1) == 0:\n\t\treturn str2\n\telif len(str2) == 0:\n\t\treturn str1\n\telse:\n\t\tif str1[-1] == str2[-1]:\n\t\t\treturn longest_common_subsequence(str1[:-1], str2[:-1]) + [str1[-1]]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence(str1, str2[:-1]), longest_common_subsequence(str1[:-1], str2))\n\n\"\"\"\nWrite a function to find the longest common subsequence of two given strings.\n\"\"\"\ndef longest_common_subsequence_2(str1, str2):\n\tif len(str1) == 0:\n\t\treturn str2\n\telif len(str2) == 0:\n\t\t"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t\td = d1.copy()\n\t\td.update(d2)\n\t\treturn d\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tif len(strs) == 2:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] else \"\"\n\t\tif len(strs) == 3:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] else \"\"\n\t\tif len(strs) == 4:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] else \"\"\n\t\tif len(strs) == 5:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] else \"\"\n\t\tif len(strs) == 6:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] else \"\"\n\t\tif len(strs) == 7:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] and strs[5] == strs[6] else \"\"\n\t\tif len(strs) == 8:\n\t\t\t\treturn strs[0] if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs[4] and strs[4] == strs[5] and strs[5] == strs[6] and strs[6] == strs[7] else \"\"\n\t\tif len("}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn 2 * h_age\n\nprint(dog_age(10))\n<|endoftext|>"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t\t\"\"\"\n\t\t:param S: list\n\t\t:param step: int\n\t\t:return: list\n\t\t\"\"\"\n\t\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\t\t\"\"\"\n\t\t:param strs: list\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tfor i in range(len(strs[0])):\n\t\t\t\tfor j in range(1, len(strs)):\n\t\t\t\t\t\tif strs[j][i]!= strs[0][i]:\n\t\t\t\t\t\t\t\treturn strs[0][:i]\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\t\t\"\"\"\n\t\t:param strs: list\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tfor i in range(len(strs[0])):\n\t\t\t\tfor j in range(1, len(strs)):\n\t\t\t\t\t\tif strs[j][i]!= strs[0][i]:\n\t\t\t\t\t\t\t\treturn strs[0][i+1:]\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\t\t\"\"\"\n\t\t:param str1: str\n\t\t:param str2: str\n\t\t:return: str\n\t\t\"\"\"\n\t\tif len(str1) == 0 or len(str2) == 0:\n\t\t\t\treturn \"\"\n\t\tif str1[0] == str2[0]:\n\t\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\telse:\n\t\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t\treturn l[0] * l[1] * l[2]\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l[0] * l[1] * l[2] * l[3]\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_sphere(r):\n\t\treturn 4 * math.pi * r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4 * math.pi * r**3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_cylinder(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_cone(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surface_torus(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a paraboloid.\n\"\"\"\ndef surface_paraboloid(r):\n\t\treturn 2 * math.pi * r**2\n\n\"\"\"\nWrite a function to find the volume of a paraboloid.\n\"\"\"\ndef volume_paraboloid(r):\n\t\treturn 2 * math.pi * r**3\n\n\"\"\"\nWrite a function to find the surface area of a hyperboloid.\n\"\"\"\ndef surface_hyperboloid(r):"}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tsum += i**2\n\t\treturn sum\n\nprint(square_Sum(10))\n<|endoftext|>"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\t\"\"\"\n\t\t:param n: int\n\t\t:return: int\n\t\t\"\"\"\n\t\treturn n * (n + 1) // 2\n\nif __name__ == '__main__':\n\tprint(find_star_num(10))\n<|endoftext|>"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\treturn ord(k)\n\n\"\"\"\nWrite a function to find the ascii"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t\tsum_even = 0\n\t\tsum_even_index = 0\n\t\tfor i in range(n):\n\t\t\tif arr[i] % 2 == 0:\n\t\t\t\tsum_even += arr[i]\n\t\t\t\tsum_even_index += 1\n\t\treturn sum_even,sum_even_index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n<|endoftext|>"}
{"ID": 634, "source": "MBPP:271", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i**5\n\t\treturn sum\n\nprint(even_Power_Sum(10))\n<|endoftext|>"}
{"ID": 635, "source": "MBPP:272", "prompt": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t", "predict": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t\treturn test_list[-1]\n\n\"\"\"\nWrite a function to perfom the front element extraction from list of tuples records.\n\"\"\"\ndef front_extract(test_list):\n\t\treturn test_list[0]\n\n\"\"\"\nWrite a function to perfom the middle element extraction from list of tuples records.\n\"\"\"\ndef middle_extract(test_list):\n\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to perfom the last element extraction from list of tuples records.\n\"\"\"\ndef last_extract(test_list):\n\t\treturn test_list[-1]\n\n\"\"\"\nWrite a function to perfom the first element extraction from list of tuples records.\n\"\"\"\ndef first_extract(test_list):\n\t\treturn test_list[0]\n\n\"\"\"\nWrite a function to perfom the middle element extraction from list of tuples records.\n\"\"\"\ndef middle_extract(test_list):\n\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to perfom the last element extraction from list of tuples records.\n\"\"\"\ndef last_extract(test_list):\n\t\treturn test_list[-1]\n\n\"\"\"\nWrite a function to perfom the first element extraction from list of tuples records.\n\"\"\"\ndef first_extract(test_list):\n\t\treturn test_list[0]\n\n\"\"\"\nWrite a function to perfom the middle element extraction from list of tuples records.\n\"\"\"\ndef middle_extract(test_list):\n\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to perfom the last element extraction from list of tuples records.\n\"\"\"\ndef last_extract(test_list):\n\t\treturn test_list[-1]\n\n\"\"\"\nWrite a function to perfom the first element extraction from list of tuples records.\n\"\"\"\ndef first_extract(test_list):\n\t\treturn test_list[0]\n\n\"\"\"\nWrite a function to perfom the middle element extraction from list of tuples records.\n\"\"\"\ndef middle_extract(test_list):\n\t\treturn test_list[len(test_list)//2]\n\n\"\"\"\nWrite a function to perfom the last element extraction from list of tuples records.\n\"\"\"\ndef last_extract(test"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t\treturn tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n\n\"\"\"\nWrite a function to multiply the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef multiply_elements(test_tup1, test_tup2):\n\t\treturn tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n\n\"\"\"\nWrite a function to divide the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef divide_elements(test_tup1, test_tup2):\n\t\treturn tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n\n\"\"\"\nWrite a function to find the maximum value of a tuple.\n\"\"\"\ndef max_element(test_tup):\n\t\treturn max(test_tup)\n\n\"\"\"\nWrite a function to find the minimum value of a tuple.\n\"\"\"\ndef min_element(test_tup):\n\t\treturn min(test_tup)\n\n\"\"\"\nWrite a function to find the sum of a tuple.\n\"\"\"\ndef sum_element(test_tup):\n\t\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to find the product of a tuple.\n\"\"\"\ndef product_element(test_tup):\n\t\treturn product(test_tup)\n\n\"\"\"\nWrite a function to find the average of a tuple.\n\"\"\"\ndef average_element(test_tup):\n\t\treturn sum_element(test_tup) / len(test_tup)\n\n\"\"\"\nWrite a function to find the median of a tuple.\n\"\"\"\ndef median_element(test_tup):\n\t\tif len(test_tup) % 2 == 0:\n\t\t\t\treturn (test_tup[len(test_tup) // 2 - 1] + test_tup[len(test_tup) // 2]) / 2\n\t\telse:\n\t\t\t\treturn test_tup[len(test_tup) // 2]\n\n\"\"\"\nWrite a function to find the mode of a tuple.\n\"\"\"\ndef mode_element(test_tup):\n\t\treturn max(set(test_tup), key=test_tup.count"}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t\t\"\"\"\n\t\t:param n: number of terms\n\t\t:return: sum of even index binomial coefficients\n\t\t\"\"\"\n\t\tif n < 0:\n\t\t\treturn 0\n\t\tif n == 0:\n\t\t\treturn 1\n\t\tif n == 1:\n\t\t\treturn 1\n\t\tif n == 2:\n\t\t\treturn 2\n\t\tif n == 3:\n\t\t\treturn 6\n\t\tif n == 4:\n\t\t\treturn 24\n\t\tif n == 5:\n\t\t\treturn 120\n\t\tif n == 6:\n\t\t\treturn 720\n\t\tif n == 7:\n\t\t\treturn 5040\n\t\tif n == 8:\n\t\t\treturn 40320\n\t\tif n == 9:\n\t\t\treturn 362880\n\t\tif n == 10:\n\t\t\treturn 3628800\n\t\tif n == 11:\n\t\t\treturn 39916800\n\t\tif n == 12:\n\t\t\treturn 479001600\n\t\tif n == 13:\n\t\t\treturn 6227020800\n\t\tif n == 14:\n\t\t\treturn 87178291200\n\t\tif n == 15:\n\t\t\treturn 130767436800\n\t\tif n == 16:\n\t\t\treturn 2092278988800\n\t\tif n == 17:\n\t\t\treturn 35568742809600\n\t\tif n == 18:\n\t\t\treturn 640237370572800\n\t\tif n == 19:\n\t\t\treturn 12164510040883200\n\t\tif n == 20:\n\t\t\treturn 243290200817664000\n\t\tif n == 21:\n\t\t\treturn 4867717134320960000\n\t\tif n == 22:\n\t\t\treturn 9734"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\t# Your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t# Write your code here\n\t\t#"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 4/3*pi*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 4/3*pi*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_area_cone(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_area_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a helix.\n\"\"\"\ndef volume_helix(r,h):\n\t\treturn 4/3*pi*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a helix.\n\"\"\"\ndef surface_area_helix(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(r,h):\n\t\treturn 4/3*pi*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surface_area_pyramid(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a paraboloid.\n\"\"\"\ndef volume_paraboloid(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to find the surface area of a paraboloid.\n\"\"\"\ndef surface_"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t\treturn {k:v for k,v in dict.items() if v==n}\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word(string):\n\t\treturn max(string.split(), key=len)\n\n\"\"\"\nWrite a function to find the longest word in a string.\n\"\"\"\ndef longest_word("}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t\tcount = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i] == test_tup[0]:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs after the record in the given tuple.\n\"\"\"\ndef count_last_elements(test_tup):\n\t\tcount = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i] == test_tup[-1]:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs between the record in the given tuple.\n\"\"\"\ndef count_between_elements(test_tup):\n\t\tcount = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i] == test_tup[i+1]:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs in the given tuple.\n\"\"\"\ndef count_elements(test_tup):\n\t\tcount = 0\n\t\tfor i in range(len(test_tup)):\n\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs in the given tuple.\n\"\"\"\ndef count_elements_in_range(test_tup, start, end):\n\t\tcount = 0\n\t\tfor i in range(start, end):\n\t\t\tif test_tup[i] == test_tup[i+1]:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs in the given tuple.\n\"\"\"\ndef count_elements_in_range_2(test_tup, start, end):\n\t\tcount = 0\n\t\tfor i in range(start, end):\n\t\t\tif test_tup[i] == test_tup[i+1]:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the element count that occurs in the given tuple.\n\"\"\"\ndef count_elements_in_range_3(test_tup, start, end):\n\t\tcount = 0\n\t\tfor i in range(start, end):\n\t\t\tif test_tup[i] == test_tup[i+"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\tif n == 1:\n\t\t\treturn True\n\t\telif n == 2:\n\t\t\treturn True\n\t\telif n == 3:\n\t\t\treturn True\n\t\telif n == 4:\n\t\t\treturn True\n\t\telif n == 5:\n\t\t\treturn True\n\t\telif n == 6:\n\t\t\treturn True\n\t\telif n == 7:\n\t\t\treturn True\n\t\telif n == 8:\n\t\t\treturn True\n\t\telif n == 9:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ndef nth_decagonal(n):\n\tif is_num_decagonal(n):\n\t\treturn n\n\telse:\n\t\treturn nth_decagonal(n-1) + nth_decagonal(n-2) + nth_decagonal(n-3) + nth_decagonal(n-4) + nth_decagonal(n-5) + nth_decagonal(n-6) + nth_decagonal(n-7) + nth_decagonal(n-8) + nth_decagonal(n-9)\n\nprint(nth_decagonal(10))\n<|endoftext|>"}
{"ID": 643, "source": "MBPP:280", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t\tfor i in range(len(dlist)):\n\t\t\tif dlist[i] == item:\n\t\t\t\treturn i\n\t\treturn -1\n\n\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(dlist, item):\n\tlow = 0\n\thigh = len(dlist) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif dlist[mid] == item:\n\t\t\treturn mid\n\t\telif dlist[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to search an element in the given array by using linear search.\n\"\"\"\ndef linear_search(dlist, item):\n\tfor i in range(len(dlist)):\n\t\tif dlist[i] == item:\n\t\t\treturn i\n\treturn -1\n\n\"\"\"\nWrite a function to sort an array of integers in ascending order.\n\"\"\"\ndef sort_asc(dlist):\n\tfor i in range(len(dlist)):\n\t\tfor j in range(i+1, len(dlist)):\n\t\t\tif dlist[i] > dlist[j]:\n\t\t\t\tdlist[i], dlist[j] = dlist[j], dlist[i]\n\treturn dlist\n\n\"\"\"\nWrite a function to sort an array of integers in descending order.\n\"\"\"\ndef sort_desc(dlist):\n\tfor i in range(len(dlist)):\n\t\tfor j in range(i+1, len(dlist)):\n\t\t\tif dlist[i] < dlist[j]:\n\t\t\t\tdlist[i], dlist[j] = dlist[j], dlist[i]\n\treturn dlist\n\n\"\"\"\nWrite a function to sort an array of integers in ascending order using a custom function.\n\"\"\"\ndef sort_asc_custom(dlist, func):\n\tfor i in range(len(dlist)):\n\t\tfor j in range(i+1, len(dlist)):\n\t\t\tif func(dlist[i], dlist[j]) > 0:\n\t\t\t\tdlist[i], dlist[j] = dlist["}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t\t# check if the list is empty\n\t\tif len(test_list) == 0:\n\t\t\treturn True\n\t\t# check if the list is not empty\n\t\telse:\n\t\t\t# check if the list is sorted\n\t\t\tif sorted(test_list) == test_list:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(all_unique(test_list))\n\n# test\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nprint(all_unique(test"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t\treturn list(map(lambda x,y:x-y,nums1,nums2))\n\nprint(sub_list([1,2,3,4,5], [2,3,4,5,6]))\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef max_num(num1,num2):\n\t\treturn max(num1,num2)\n\nprint(max_num(1,2))\n\n\"\"\"\nWrite a function to find the minimum of two numbers.\n\"\"\"\ndef min_num(num1,num2):\n\t\treturn min(num1,num2)\n\nprint(min_num(1,2))\n\n\"\"\"\nWrite a function to find the sum of two numbers.\n\"\"\"\ndef sum_num(num1,num2):\n\t\treturn num1+num2\n\nprint(sum_num(1,2))\n\n\"\"\"\nWrite a function to find the product of two numbers.\n\"\"\"\ndef product_num(num1,num2):\n\t\treturn num1*num2\n\nprint(product_num(1,2))\n\n\"\"\"\nWrite a function to find the quotient of two numbers.\n\"\"\"\ndef quotient_num(num1,num2):\n\t\treturn num1/num2\n\nprint(quotient_num(1,2))\n\n\"\"\"\nWrite a function to find the remainder of two numbers.\n\"\"\"\ndef remainder_num(num1,num2):\n\t\treturn num1%num2\n\nprint(remainder_num(1,2))\n\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\ndef factorial_num(num):\n\t\tif num == 0:\n\t\t\t\treturn 1\n\t\telse:\n\t\t\t\treturn num*factorial_num(num-1)\n\nprint(factorial_num(5))\n\n\"\"\"\nWrite a function to find the sum of all the numbers from 1 to n.\n\"\"\"\ndef sum_num_from_1_to_n(n):\n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_num_from_1_to_n(10))\n\n\"\"\"\nWrite a function to"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\tif n == 0: \n\t\t\treturn True\n\t\tif n % 10 == 0: \n\t\t\treturn validate(n // 10)\n\t\telse: \n\t\t\treturn validate(n * 10)\n\nprint(validate(12345))\nprint(validate(123456))\nprint(validate(1234567))\nprint(validate(12345678))\nprint(validate(123456789))\nprint(validate(1234567890))\nprint(validate(12345678901))\nprint(validate(123456789012))\nprint(validate(1234567890123))\nprint(validate(12345678901234))\nprint(validate(123456789012345))\nprint(validate(1234567890123456))\nprint(validate(12345678901234567))\nprint(validate(123456789012345678))\nprint(validate(1234567890123456789))\nprint(validate(12345678901234567890))\nprint(validate(123456789012345678901))\nprint(validate(1234567890123456789012))\nprint(validate(12345678901234567890123))\nprint(validate(123456789012345678901234))\nprint(validate(1234567890123456789012345))\nprint(validate(1234567890123456"}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t\tfor i in list:\n\t\t\tif i!= element:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(check_element([1,2,3,4,5],5))\nprint(check_element([1,2,3,4,5],6))\nprint(check_element([1,2,3,4,5],7))\nprint(check_element([1,2,3,4,5],8))\nprint(check_element([1,2,3,4,5],9))\nprint(check_element([1,2,3,4,5],10))\nprint(check_element([1,2,3,4,5],11))\nprint(check_element([1,2,3,4,5],12))\nprint(check_element([1,2,3,4,5],13))\nprint(check_element([1,2,3,4,5],14))\nprint(check_element([1,2,3,4,5],15))\nprint(check_element([1,2,3,4,5],16))\nprint(check_element([1,2,3,4,5],17))\nprint(check_element([1,2,3,4,5],18))\nprint(check_element([1,2,3,4,5],19))\nprint(check_element([1,2,3,4,5],20))\nprint(check_element([1,2,3,4,5],21))\nprint(check_element([1,2,3,4,5],22))\nprint(check_element([1,2,3,4,5],23))\nprint(check_element([1,2,3,4,5],24))\nprint(check_element([1,2,3,4,5],25))\nprint(check_element([1,2,3,4,5],26))\nprint(check_element([1,2,3,4,5],27))\nprint(check_element([1,2,3,4,5],28))\nprint(check_element([1,2,3,4,"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t\treturn re.search(r'b\\1', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_2(text):\n\t\treturn re.search(r'b\\1', text, re.IGNORECASE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_3(text):\n\t\treturn re.search(r'b\\1', text, re.MULTILINE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_4(text):\n\t\treturn re.search(r'b\\1', text, re.DOTALL)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_5(text):\n\t\treturn re.search(r'b\\1', text, re.VERBOSE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_6(text):\n\t\treturn re.search(r'b\\1', text, re.UNICODE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_7(text):\n\t\treturn re.search(r'b\\1', text, re.LOCALE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_8(text):\n\t\treturn re.search(r'b\\1', text, re.UNICODE | re.LOCALE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three_9(text):\n\t\treturn re.search(r'b\\1', text, re.UNICODE | re.LOCALE | re.VERBOSE)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two"}
{"ID": 649, "source": "MBPP:286", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t\t# Write your code here\n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tsum += a[i]\n\t\t\tif sum < 0:\n\t\t\t\tsum = 0\n\t\t\tif sum > 0:\n\t\t\t\tsum = 0\n\t\treturn sum\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)\nk = 3\nprint(max_sub_array_sum_repeated(a, n, k))\n<|endoftext|>"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tsum += i**2\n\t\treturn sum\n\nprint(square_Sum(10))\n<|endoftext|>"}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t\t# Find the inverse of a number modulo a prime number\n\t\t# https://en.wikipedia.org/wiki/Modular_inverse_algorithm\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t\t# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\t"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\tif N%4==0:\n\t\t\treturn N/4\n\t\telse:\n\t\t\treturn N/4+1\n\nprint(odd_Days(2019))\n<|endoftext|>"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t\tmax_length = 0\n\t\tfor i in range(len(list1)):\n\t\t\tif len(list1[i]) > max_length:\n\t\t\t\tmax_length = len(list1[i])\n\t\treturn max_length\n\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_length([[1,2,3],[4"}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t\t# Write your code here\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telif n == 2:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n\nprint(count_no_of_ways(3, 2))\nprint(count_no_of_ways(3, 3))\nprint(count_no_of_ways(3, 4))\nprint(count_no_of_ways(3, 5))\nprint(count_no_of_ways(3, 6))\nprint(count_no_of_ways(3, 7))\nprint(count_no_of_ways(3, 8))\nprint(count_no_of_ways(3, 9))\nprint(count_no_of_ways(3, 10))\nprint(count_no_of_ways(3, 11))\nprint(count_no_of_ways(3, 12))\nprint(count_no_of_ways(3, 13))\nprint(count_no_of_ways(3, 14))\nprint(count_no_of_ways(3, 15))\nprint(count_no_of_ways(3, 16))\nprint(count_no_of_ways(3, 17))\nprint(count_no_of_ways(3, 18))\nprint(count_no_of_ways(3, 19))\nprint(count_no_of_ways(3, 20))\nprint(count_no_of_ways(3, 21))\nprint(count_no_of_ways(3, 22))\nprint(count_no_of_ways(3, 23))\nprint(count_no_of_ways(3, 24))\nprint(count_no_of_ways(3, 25))\nprint(count_no_of_ways(3, 26))\nprint(count_no_of_ways(3, 27))\nprint(count_no_"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t\tif n == 0:\n\t\t\treturn 0\n\t\tif m == 0:\n\t\t\treturn 1\n\t\tif n < m:\n\t\t\treturn find(n,m-1) + find(n-m,m)\n\t\telse:\n\t\t\treturn find(n,m) + find(n-m,m)\n\nprint(find(10,2))\n<|endoftext|>"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t\treturn (w*h)/2\n\nprint(otherside_rightangle(5,6))\n<|endoftext|>"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t\tmax_val = listval[0]\n\t\tfor i in range(1,len(listval)):\n\t\t\tif listval[i] > max_val:\n\t\t\t\tmax_val = listval[i]\n\t\treturn max_val\n\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t\tmin_val = listval[0]\n\t\tfor i in range(1,len(listval)):\n\t\t\tif listval[i] < min_val:\n\t\t\t\tmin_val = listval[i]\n\t\treturn min_val\n\n\"\"\"\nWrite a function to find the sum of all the values in a given heterogeneous list.\n\"\"\"\ndef sum_val(listval):\n\t\tsum_val = 0\n\t\tfor i in range(len(listval)):\n\t\t\tsum_val += listval[i]\n\t\treturn sum_val\n\n\"\"\"\nWrite a function to find the product of all the values in a given heterogeneous list.\n\"\"\"\ndef prod_val(listval):\n\t\tprod_val = 1\n\t\tfor i in range(len(listval)):\n\t\t\tprod_val *= listval[i]\n\t\treturn prod_val\n\n\"\"\"\nWrite a function to find the average of all the values in a given heterogeneous list.\n\"\"\"\ndef avg_val(listval):\n\t\tavg_val = sum_val(listval) / len(listval)\n\t\treturn avg_val\n\n\"\"\"\nWrite a function to find the median of all the values in a given heterogeneous list.\n\"\"\"\ndef median_val(listval):\n\t\tif len(listval) % 2 == 0:\n\t\t\treturn (listval[len(listval) // 2 - 1] + listval[len(listval) // 2]) / 2\n\t\telse:\n\t\t\treturn listval[len(listval) // 2]\n\n\"\"\"\nWrite a function to find the mode of all the values in a given heterogeneous list.\n\"\"\"\ndef mode_val(listval):\n\t\tmode_val = 0\n\t\tcount = 0\n\t\tfor i in range(len(listval)):\n\t\t\tif listval[i]"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t\tsum = 0\n\t\tfor i in range(1, number):\n\t\t\tif number % i == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_div(100))\n<|endoftext|>"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t\t# code here \n\t\tcount = 0 \n\t\tfor i in range(n): \n\t\t\tfor j in range(i+1,n): \n\t\t\t\tif arr[i] > arr[j]: \n\t\t\t\t\tcount += 1 \n\t\treturn count \n\narr = [1,2,3,4,5,6,7,8,9,10] \nn = len(arr) \nprint(get_Inv_Count(arr,n)) \n<|endoftext|>"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t\treturn [item for sublist in list1 for item in sublist]\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\treturn strs[-1]\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\tif len(str1) == 0 or len(str2) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif str1[0] == str2[0]:\n\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif len(strs) == 1:\n\t\t\treturn strs[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence_array(strs[1:]), longest_common_subsequence_array(strs[:1]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array_2(strs):\n\tif len(strs) == 0:\n\t\treturn \"\"\n\telse:\n\t\tif len(strs) == 1:\n\t\t\treturn strs[0]\n\t\telse:\n\t\t\treturn max(longest_common_subsequence_array_2(strs[1:]), longest_common_subsequence_array_2(strs[:1]))\n\n\"\"\"\nWrite a function to find"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t\t# Write your code here\n\t\tl1_set = set(l1)\n\t\tl2_set = set(l2)\n\t\treturn list(l1_set.intersection(l2_set))\n\nprint(intersection_nested_lists([1,2,3,4,5], [1,2,3,4,5,6]))\n<|endoftext|>"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t\tmax_val = 0\n\t\tfor i in stdata:\n\t\t\tif i[1] > max_val:\n\t\t\t\tmax_val = i[1]\n\t\treturn max_val\n\n\"\"\"\nWrite a function to calculate the minimum aggregate from the list of tuples.\n\"\"\"\ndef min_aggregate(stdata):\n\t\tmin_val = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t\t# Write your code here\n\t\tcount = 0\n\t\tfor i in range(1,n+1):\n\t\t\tfor j in range(1,n+1):\n\t\t\t\tif i+j == n:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_binary_seq(10))\n<|endoftext|>"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t\tdepth = 0\n\t\tfor key in d:\n\t\t\tif type(d[key]) == dict:\n\t\t\t\tdepth += 1 + dict_depth(d[key])\n\t\t\telse:\n\t\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a list.\n\"\"\"\ndef list_depth(l):\n\t\tdepth = 0\n\t\tfor item in l:\n\t\t\tif type(item) == list:\n\t\t\t\tdepth += 1 + list_depth(item)\n\t\t\telse:\n\t\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a tuple.\n\"\"\"\ndef tuple_depth(t):\n\t\tdepth = 0\n\t\tfor item in t:\n\t\t\tif type(item) == tuple:\n\t\t\t\tdepth += 1 + tuple_depth(item)\n\t\t\telse:\n\t\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a set.\n\"\"\"\ndef set_depth(s):\n\t\tdepth = 0\n\t\tfor item in s:\n\t\t\tif type(item) == set:\n\t\t\t\tdepth += 1 + set_depth(item)\n\t\t\telse:\n\t\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a string.\n\"\"\"\ndef string_depth(s):\n\t\tdepth = 0\n\t\tfor item in s:\n\t\t\tif type(item) == str:\n\t\t\t\tdepth += 1 + string_depth(item)\n\t\t\telse:\n\t\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a number.\n\"\"\"\ndef number_depth(n):\n\t\tdepth = 0\n\t\twhile n > 0:\n\t\t\tn = n // 10\n\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a boolean.\n\"\"\"\ndef boolean_depth(b):\n\t\tdepth = 0\n\t\twhile b:\n\t\t\tb = b // 10\n\t\t\tdepth += 1\n\t\treturn depth\n\n\"\"\"\nWrite a function to find the depth of a complex number.\n\"\"\"\ndef complex_depth(c):\n\t\tdepth = 0\n\t\twhile c:\n\t\t\tc = c // 10"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t\t# Find the most significant bit number which is also a set bit.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t# The most significant bit number is the bit number which is set to 1.\n\t\t# The most significant bit number is the bit number which is set to 0.\n\t\t#"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t\tif a == n:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(solve(1,1))\nprint(solve(1,2))\nprint(solve(1,3))\nprint(solve(1,4))\nprint(solve(1,5))\nprint(solve(1,6))\nprint(solve(1,7))\nprint(solve(1,8))\nprint(solve(1,9))\nprint(solve(1,10))\nprint(solve(1,11))\nprint(solve(1,12))\nprint(solve(1,13))\nprint(solve(1,14))\nprint(solve(1,15))\nprint(solve(1,16))\nprint(solve(1,17))\nprint(solve(1,18))\nprint(solve(1,19))\nprint(solve(1,20))\nprint(solve(1,21))\nprint(solve(1,22))\nprint(solve(1,23))\nprint(solve(1,24))\nprint(solve(1,25))\nprint(solve(1,26))\nprint(solve(1,27))\nprint(solve(1,28))\nprint(solve(1,29))\nprint(solve(1,30))\nprint(solve(1,31))\nprint(solve(1,32))\nprint(solve(1,33))\nprint(solve(1,34))\nprint(solve(1,35))\nprint(solve(1,36))\nprint(solve(1,37))\nprint(solve(1,38))\nprint(solve(1,39))\nprint(solve(1,40))\nprint(solve(1,41))\nprint(solve(1,42))\nprint(solve(1,43))\nprint(solve(1,44))\nprint(solve(1,45))\nprint(solve(1,46))\nprint(solve(1,47))\nprint(solve(1,48))\nprint(solve(1,49))\nprint(solve(1,50))\nprint"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t\tif index < 0 :\n\t\t\treturn -1\n\t\tif index >= len(arr) :\n\t\t\treturn -1\n\t\tif index == 0 :\n\t\t\treturn arr[0]\n\t\tif index == len(arr) - 1 :\n\t\t\treturn arr[len(arr) - 1]\n\t\tif index == len(arr) - 2 :\n\t\t\treturn arr[len(arr) - 2]\n\t\tif index == len(arr) - 3 :\n\t\t\treturn arr[len(arr) - 3]\n\t\tif index == len(arr) - 4 :\n\t\t\treturn arr[len(arr) - 4]\n\t\tif index == len(arr) - 5 :\n\t\t\treturn arr[len(arr) - 5]\n\t\tif index == len(arr) - 6 :\n\t\t\treturn arr[len(arr) - 6]\n\t\tif index == len(arr) - 7 :\n\t\t\treturn arr[len(arr) - 7]\n\t\tif index == len(arr) - 8 :\n\t\t\treturn arr[len(arr) - 8]\n\t\tif index == len(arr) - 9 :\n\t\t\treturn arr[len(arr) - 9]\n\t\tif index == len(arr) - 10 :\n\t\t\treturn arr[len(arr) - 10]\n\t\tif index == len(arr) - 11 :\n\t\t\treturn arr[len(arr) - 11]\n\t\tif index == len(arr) - 12 :\n\t\t\treturn arr[len(arr) - 12]\n\t\tif index == len(arr) - 13 :\n\t\t\treturn arr[len(arr) - 13]\n\t\tif index == len(arr) - 14 :\n\t\t\treturn arr[len(arr) - 14]\n\t\tif index == len(arr) - 15 :\n\t\t\treturn arr[len(arr) - 15]\n\t\tif index == len(arr) - 16 :\n\t\t\treturn arr[len(arr) - 16]\n\t\tif index == len(arr) - 17 :\n\t\t\treturn arr[len(arr) - 17]\n\t\tif index == len(arr) - 1"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t\tfor i in range(len(words)):\n\t\t\tif words[i][0] == 'p':\n\t\t\t\treturn words[i]\n\nprint(start_withp(['pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'pale', 'p"}
{"ID": 669, "source": "MBPP:306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\t# Your code here\n\t\tif index == n:\n\t\t\treturn a[index]\n\t\tif k == 0:\n\t\t\treturn max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n\t\tif k > index:\n\t\t\treturn max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index + k - 1])\n\t\telse:\n\t\t\treturn max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index + k - 1])\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)\nprint(max_sum_increasing_subseq(a, n, 0, 1))\n<|endoftext|>"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tupley(tupley,m,n):\n\t\treturn tupley[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplez(tuplez,m,n):\n\t\treturn tuplez[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplew(tuplew,m,n):\n\t\treturn tuplew[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tupley(tupley,m,n):\n\t\treturn tupley[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplez(tuplez,m,n):\n\t\treturn tuplez[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplew(tuplew,m,n):\n\t\treturn tuplew[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tupley(tupley,m,n):\n\t\treturn tupley[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplez(tuplez,m,n):\n\t\treturn tuplez[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplew(tuplew,m,n):\n\t\treturn tuplew[m:n]\n\n\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t\t# Write your code here\n\t\tnums1.sort()\n\t\tnums2.sort()\n\t\tans = []\n\t\tfor i in range(N):\n\t\t\tif nums1[i] * nums2[i] > 0:\n\t\t\t\tans.append(nums1[i] * nums2[i])\n\t\treturn ans\n\ndef main():\n\tprint(large_product([1,2,3,4,5], [1,2,3,4,5], 3))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\tif a > b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,2))\nprint(maximum(1,"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t\treturn tuple(str1.split(','))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\t\treturn list(str1.split(','))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\t\treturn set(str1.split(','))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\t\treturn dict(str1.split(','))\n\n\"\"\"\nWrite a function to convert a given string to a list of tuples.\n\"\"\"\ndef string_to_list_of_tuples(str1):\n\t\treturn list(map(string_to_tuple, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of lists.\n\"\"\"\ndef string_to_list_of_lists(str1):\n\t\treturn list(map(string_to_list, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of sets.\n\"\"\"\ndef string_to_list_of_sets(str1):\n\t\treturn list(map(string_to_set, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of dictionaries.\n\"\"\"\ndef string_to_list_of_dicts(str1):\n\t\treturn list(map(string_to_dict, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of lists of tuples.\n\"\"\"\ndef string_to_list_of_lists_of_tuples(str1):\n\t\treturn list(map(string_to_list_of_tuples, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of lists of lists.\n\"\"\"\ndef string_to_list_of_lists_of_lists(str1):\n\t\treturn list(map(string_to_list_of_lists, str1.split(',')))\n\n\"\"\"\nWrite a function to convert a given string to a list of lists of sets.\n\"\"\"\ndef string_to_list_of_lists_of_sets("}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\t# Write your code here\n\t\ti = 0\n\t\twhile i < n:\n\t\t\tif n & (1 << i) == 0:\n\t\t\t\tn = n - (1 << i)\n\t\t\telse:\n\t\t\t\ti += 1\n\t\treturn n\n\nprint(set_left_most_unset_bit(10))\nprint(set_left_most_unset_bit(11))\nprint(set_left_most_unset_bit(12))\nprint(set_left_most_unset_bit(13))\nprint(set_left_most_unset_bit(14))\nprint(set_left_most_unset_bit(15))\nprint(set_left_most_unset_bit(16))\nprint(set_left_most_unset_bit(17))\nprint(set_left_most_unset_bit(18))\nprint(set_left_most_unset_bit(19))\nprint(set_left_most_unset_bit(20))\nprint(set_left_most_unset_bit(21))\nprint(set_left_most_unset_bit(22))\nprint(set_left_most_unset_bit(23))\nprint(set_left_most_unset_bit(24))\nprint(set_left_most_unset_bit(25))\nprint(set_left_most_unset_bit(26))\nprint(set_left_most_unset_bit(27))\nprint(set_left_most_unset_bit(28))\nprint(set_left_most_unset_bit(29))\nprint(set_left_most_unset_bit(30))\nprint(set_left_most_unset_bit(31))\nprint(set_left_most_unset_bit(32))\nprint(set_left_most_unset_bit(33))\nprint(set_left_most_unset_bit(34))\nprint(set_left_most_unset_bit(35))\nprint(set_left_most_unset_bit(36))\nprint(set_left_most_unset_bit(37))\nprint(set_"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 4/3*pi*r**3*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_area_cone(r,h):\n\t\treturn 4/3*pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_area_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_parallelepiped(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a parallelepiped.\n\"\"\"\ndef surface_area_parallelepiped(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\t\treturn"}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t\tfor i in list1:\n\t\t\tif i > 0:\n\t\t\t\tprint(i)\n\npos_nos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n<|endoftext|>"}
{"ID": 677, "source": "MBPP:314", "prompt": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t", "predict": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\t# Your code here\n\t\tmax_sum = 0\n\t\tfor i in range(n) : \n\t\t\tfor j in range(n) : \n\t\t\t\tif i == 0 or j == 0 : \n\t\t\t\t\tmax_sum += grid[i][j]\n\t\t\t\telse : \n\t\t\t\t\tmax_sum = max(max_sum, grid[i][j] + grid[i-1][j] + grid[i][j-1])\n\t\treturn max_sum\n\n\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 3 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\t# Your code here\n\t\tmax_sum = 0\n\t\tfor i in range(n) : \n\t\t\tfor j in range(n) : \n\t\t\t\tfor k in range(n) : \n\t\t\t\t\tif i == 0 or j == 0 or k == 0 : \n\t\t\t\t\t\tmax_sum += grid[i][j]\n\t\t\t\t\telse : \n\t\t\t\t\t\tmax_sum = max(max_sum, grid[i][j] + grid[i-1][j] + grid[i][j-1] + grid[i][k] + grid[i][k-1])\n\t\treturn max_sum\n\n\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 4 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t\t# Your code here\n\t\tmax_sum = 0\n\t\tfor i in range(n) : \n\t\t\tfor j in range(n) : \n\t\t\t\tfor k in range(n) : \n\t\t\t\t\tfor l in range(n) : \n\t\t\t\t\t\tif i == 0 or j == 0 or k == 0 or l == 0 : \n\t\t\t\t\t\t\tmax_sum += grid[i][j]\n\t\t\t\t\t\telse : \n\t\t\t\t\t\t\tmax_sum = max(max_sum, grid[i][j] + grid[i-1][j] + grid[i][j-1] + grid[i][k] + grid[i][k-1] + grid[i][l] + grid[i][l-1])\n\t\treturn max_sum\n"}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t\t# Your code here\n\t\tstr_list = str.split()\n\t\tmax_len = 0\n\t\tfor i in str_list:\n\t\t\tif len(i)%2 == 0:\n\t\t\t\tif len(i) > max_len:\n\t\t\t\t\tmax_len = len(i)\n\t\treturn max_len\n\nprint(find_Max_Len_Even(\"This is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test this is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test this is a test this is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test this is a test this is a test this is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test this is a test this is a test this is a test this is a test\"))\nprint(find_Max_Len_Even(\"This is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\t# write your code here\n\t\tif len(A) == 0:\n\t\t\treturn -1\n\t\tif len(A) == 1:\n\t\t\tif A[0] == x:\n\t\t\t\treturn 0\n\t\t\telse:\n\t\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[-1] > x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[-1] < x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[-1] > x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[-1] < x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[-1] < x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] < x:\n\t\t\treturn -1\n\t\tif A[-1] > x:\n\t\t\treturn -1\n\t\tif A[0] == x:\n\t\t\treturn 0\n\t\tif A[-1] == x:\n\t\t\treturn len(A) - 1\n\t\tif A[0] > x:\n\t\t\treturn -1\n\t\tif A[-1] < x:\n\t\t\treturn -1"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_encode(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_decode(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_decode(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode_2(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_encode_2(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_decode_2(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_decode_2(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode_3(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_encode_3(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_decode_3(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_decode_3(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode_4(alist):\n\t\t# Your code here\n\t\tif len(alist) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [alist[0]] + modified_encode_4(alist[1:])\n\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t\treturn (s * s * s)\n\nprint(max_volume(10))\nprint(max_volume(100))\nprint(max_volume(1000))\nprint(max_volume(10000))\nprint(max_volume(100000))\nprint(max_volume(1000000))\nprint(max_volume(10000000))\nprint(max_volume(100000000))\nprint(max_volume(1000000000))\nprint(max_volume(10000000000))\nprint(max_volume(100000000000))\nprint(max_volume(1000000000000))\nprint(max_volume(10000000000000))\nprint(max_volume(100000000000000))\nprint(max_volume(1000000000000000))\nprint(max_volume(10000000000000000))\nprint(max_volume(100000000000000000))\nprint(max_volume(1000000000000000000))\nprint(max_volume(10000000000000000000))\nprint(max_volume(100000000000000000000))\nprint(max_volume(1000000000000000000000))\nprint(max_volume(10000000000000000000000))\nprint(max_volume(1000000000000000000000000))\nprint(max_volume(10000000000"}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_2(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.IGNORECASE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_3(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.UNICODE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_4(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.VERBOSE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_5(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.DOTALL)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_6(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.MULTILINE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_7(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.UNICODE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_8(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.VERBOSE)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word_9(text):\n\t\treturn re.findall(r'\\b\\w{5}\\b', text, re.DOTALL)\n\n\"\"\"\nWrite a function to find all five characters long word in the given string"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t\tsum_of_squares = 0\n\t\tsum_of_first_n_numbers = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum_of_squares += i**2\n\t\t\tsum_of_first_n_numbers += i\n\t\treturn sum_of_squares - sum_of_first_n_numbers\n\nprint(sum_difference(10))\n<|endoftext|>"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t\tif s == 0: \n\t\t\treturn 0 \n\t\telif s == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\treturn find_demlo(s-1) + find_demlo(s-2) \n\nprint(find_demlo(10))\n<|endoftext|>"}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t\tmin_pos = []\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] < min(list1):\n\t\t\t\tmin_pos.append(i)\n\t\treturn min_pos\n\nprint(position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t\t# Write your code here\n\t\tarr.sort()\n\t\tfor i in range(n):\n\t\t\tif arr[i] > 0:\n\t\t\t\tarr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\t\treturn arr\n\nprint(re_arrange([1, 2, 3, 4, 5], 5))\n<|endoftext|>"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t\t\"\"\"\n\t\t:param test_tuple: tuple of tuples\n\t\t:return: sum of alternate chains of tuples\n\t\t\"\"\"\n\t\tif len(test_tuple) == 1:\n\t\t\treturn test_tuple[0]\n\t\telse:\n\t\t\treturn sum_of_alternates(test_tuple[1:]) + test_tuple[0]\n\nprint(sum_of_alternates(test_tuple))\n<|endoftext|>"}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t\t# Your code here\n\t\tsquares = []\n\t\tfor i in range(1,n+1):\n\t\t\tsquares.append(i**2)\n\t\treturn min(squares)\n\nprint(get_Min_Squares(10))\n<|endoftext|>"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t\t# Create a dictionary to store the word and its count\n\t\tword_count = {}\n\t\t# Iterate through the list\n\t\tfor word in test_list:\n\t\t\t# If the word is in the dictionary, increase the count by 1\n\t\t\tif word in word_count:\n\t\t\t\tword_count[word] += 1\n\t\t\t# If the word is not in the dictionary, add it with 1 as its count\n\t\t\telse:\n\t\t\t\tword_count[word] = 1\n\t\t# Sort the dictionary by the value of the dictionary\n\t\tsorted_word_count = sorted(word_count.items(), key=operator.itemgetter(1), reverse=True)\n\t\t# Return the word with the most number of occurrences\n\t\treturn sorted_word_count[0][0]\n\n# Test cases\nprint(most_occurrences([\"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \"banana\", \"cherry\", \"orange\", \"apple\", \""}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\tif x == y and y == z:\n\t\t\treturn \"The triangle is isosceles\"\n\t\telif x == y or x == z or y == z:\n\t\t\treturn \"The triangle is scalene\"\n\t\telse:\n\t\t\treturn \"The triangle is not isosceles\"\n\nprint(check_isosceles(1,2,3))\nprint(check_isosceles(1,2,4))\nprint(check_isosceles(1,2,5))\nprint(check_isosceles(1,2,6))\nprint(check_isosceles(1,2,7))\nprint(check_isosceles(1,2,8))\nprint(check_isosceles(1,2,9))\nprint(check_isosceles(1,2,10))\nprint(check_isosceles(1,2,11))\nprint(check_isosceles(1,2,12))\nprint(check_isosceles(1,2,13))\nprint(check_isosceles(1,2,14))\nprint(check_isosceles(1,2,15))\nprint(check_isosceles(1,2,16))\nprint(check_isosceles(1,2,17))\nprint(check_isosceles(1,2,18))\nprint(check_isosceles(1,2,19))\nprint(check_isosceles(1,2,20))\nprint(check_isosceles(1,2,21))\nprint(check_isosceles(1,2,22))\nprint(check_isosceles(1,2,23))\nprint(check_isosceles(1,2,24))\nprint(check_isosceles(1,2,25))\nprint(check_isosceles(1,2,26))\nprint(check_isosceles(1,2,27))\nprint(check_isosceles(1,2,28))\nprint(check_isosceles(1,2,29))\nprint(check_isosceles(1,2,30))\nprint(check_"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_left(list1[m:],n,m-1) + list1[:n]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t\tif m == n:\n\t\t\treturn list1\n\t\telse:\n\t\t\treturn rotate_right(list1[m:],m,n-1) + list1[m:]\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left and right direction.\n\"\"\"\ndef rotate_left_right(list1,m,n):\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telif n == 0:\n\t\t\treturn rotate_left(list1[m:],m,n)\n\t\telse:\n\t\t\treturn rotate_left_right(list1[m:],n,m-1) + rotate_right(list1[:n],m-1,n)\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left and right direction.\n\"\"\"\ndef rotate_left_right_reverse(list1,m,n):\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telif n == 0:\n\t\t\treturn rotate_right(list1[m:],m,n)\n\t\telse:\n\t\t\treturn rotate_left_right_reverse(list1[m:],n,m-1) + rotate_right(list1[:n],m-1,n)\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left and right direction.\n\"\"\"\ndef rotate_left_right_reverse_reverse(list1,m,n):\n\t\tif m == 0:\n\t\t\treturn list1\n\t\telif n == 0:\n\t\t\treturn rotate_left(list1[m:],m,n)\n\t\telse:\n\t\t\treturn rotate_left_right_reverse_reverse(list1[m:],n,m-1) + rotate_right(list1[:n],m-1,n)\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left and right direction.\n\"\"\"\ndef rotate"}
{"ID": 692, "source": "MBPP:329", "prompt": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t", "predict": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t\tcount = 0\n\t\tfor i in list:\n\t\t\tif i < 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(neg_count([-1, 0, 1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t\treturn re.findall(r\"([a-zA-Z]{3,4})\", text)\n\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"The quick brown fox jumps over"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t\t# Write your code here\n\t\tunset_bits = 0\n\t\twhile n:\n\t\t\tn &= n - 1\n\t\t\tunset_bits += 1\n\t\treturn unset_bits\n\nprint(count_unset_bits(10))\nprint(count_unset_bits(11))\nprint(count_unset_bits(100))\nprint(count_unset_bits(101))\nprint(count_unset_bits(1000))\nprint(count_unset_bits(1001))\nprint(count_unset_bits(10000))\nprint(count_unset_bits(10001))\nprint(count_unset_bits(100000))\nprint(count_unset_bits(100001))\nprint(count_unset_bits(1000000))\nprint(count_unset_bits(1000001))\nprint(count_unset_bits(10000000))\nprint(count_unset_bits(10000001))\nprint(count_unset_bits(100000000))\nprint(count_unset_bits(1000000001))\nprint(count_unset_bits(10000000000))\nprint(count_unset_bits(100000000001))\nprint(count_unset_bits(1000000000000))\nprint(count_unset_bits(10000000000001))\nprint(count_unset_bits(100000000000000))\nprint(count_unset_bits(1000000000000001))\nprint(count_unset_bits(10000000000000000))\nprint(count_unset_bits(100000000000000001))\nprint(count_unset_bits(1000000000000000"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t\tfreq = {}\n\t\tfor c in str1:\n\t\t\tif c in freq:\n\t\t\t\tfreq[c] += 1\n\t\t\telse:\n\t\t\t\tfreq[c] = 1\n\t\treturn freq\n\nprint(char_frequency(\"Hello World\"))\n<|endoftext|>"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\tli = []\n\t\tfor i in sub_li:\n\t\t\tli.append(i[1])\n\t\tli.sort()\n\t\treturn li\n\ndef main():\n\tli = [[1,2],[3,4],[5,6],[7,8]]\n\tprint(Sort(li))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t\tif a+b>c and a+c>b and b+c>a:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Validity(1,2,3))\nprint(check_Validity(1,2,4))\nprint(check_Validity(1,2,5))\nprint(check_Validity(1,2,6))\nprint(check_Validity(1,2,7))\nprint(check_Validity(1,2,8))\nprint(check_Validity(1,2,9))\nprint(check_Validity(1,2,10))\nprint(check_Validity(1,2,11))\nprint(check_Validity(1,2,12))\nprint(check_Validity(1,2,13))\nprint(check_Validity(1,2,14))\nprint(check_Validity(1,2,15))\nprint(check_Validity(1,2,16))\nprint(check_Validity(1,2,17))\nprint(check_Validity(1,2,18))\nprint(check_Validity(1,2,19))\nprint(check_Validity(1,2,20))\nprint(check_Validity(1,2,21))\nprint(check_Validity(1,2,22))\nprint(check_Validity(1,2,23))\nprint(check_Validity(1,2,24))\nprint(check_Validity(1,2,25))\nprint(check_Validity(1,2,26))\nprint(check_Validity(1,2,27))\nprint(check_Validity(1,2,28))\nprint(check_Validity(1,2,29))\nprint(check_Validity(1,2,30))\nprint(check_Validity(1,2,31))\nprint(check_Validity(1,2,32))\nprint(check_Validity(1,2,33))\nprint(check_Validity(1,2,34))\nprint(check_Validity(1,2,35))\nprint(check_Validity(1,2,36))\nprint(check_Validity(1,2"}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t\tsum = 0\n\t\tfor i in range(a,n+1,d):\n\t\t\tsum += i\n\t\treturn sum\n\nprint(ap_sum(1,100,2))\n<|endoftext|>"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t\tif monthname1 == \"January\" or monthname1 == \"February\" or monthname1 == \"March\" or monthname1 == \"April\" or monthname1 == \"May\" or monthname1 == \"June\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"September\" or monthname1 == \"October\" or monthname1 == \"November\" or monthname1 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnum2(monthname1):\n\t\tif monthname1 == \"January\" or monthname1 == \"February\" or monthname1 == \"March\" or monthname1 == \"April\" or monthname1 == \"May\" or monthname1 == \"June\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"September\" or monthname1 == \"October\" or monthname1 == \"November\" or monthname1 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnum3(monthname1):\n\t\tif monthname1 == \"January\" or monthname1 == \"February\" or monthname1 == \"March\" or monthname1 == \"April\" or monthname1 == \"May\" or monthname1 == \"June\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"September\" or monthname1 == \"October\" or monthname1 == \"November\" or monthname1 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnum4(monthname1):\n\t\tif monthname1 == \"January\" or monthname1 == \"February\" or monthname1 == \"March\" or monthname1 == \"April\" or monthname1 == \"May\" or monthname1 == \"J"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t\t# Your code here\n\t\treturn text.split()[-1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start(text):\n\t\t# Your code here\n\t\treturn text.split()[0]\n\n\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_end(text):\n\t\t# Your code here\n\t\treturn text.split()[-1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start_end(text):\n\t\t# Your code here\n\t\treturn text.split()[0] + text.split()[-1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start_end_with_punctuation(text):\n\t\t# Your code here\n\t\treturn text.split()[0] + text.split()[-1] + text.split()[1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start_end_with_punctuation_and_space(text):\n\t\t# Your code here\n\t\treturn text.split()[0] + text.split()[-1] + text.split()[1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start_end_with_punctuation_and_space_and_punctuation(text):\n\t\t# Your code here\n\t\treturn text.split()[0] + text.split()[-1] + text.split()[1] + text.split()[2]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word_start_end_with_punctuation_and_space_and_punctuation_and_space(text):\n\t\t# Your code here\n\t\treturn text.split()[0] + text.split()[-1] + text.split()[1] + text.split()[2] + text.split()[3]\n\n\"\"\"\nWrite a function"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tcount = 0\n\t\tfor i in range(len(s)):\n\t\t\tfor j in range(i+1, len(s)):\n\t\t\t\tif s[i] == s[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"aab\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends(\"abcde\"))\nprint(count_Substring_With_Equal_Ends"}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t\tif x%y == 0:\n\t\t\treturn y\n\t\telse:\n\t\t\treturn find_Divisor(y,x%y)\n\nprint(find_Divisor(10,100))\n<|endoftext|>"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t\tlst.sort()\n\t\treturn lst[0] + lst[1] + lst[2]\n\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6,"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t\treturn tuple(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a list.\n\"\"\"\ndef set_to_list(s):\n\t\treturn list(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\t\treturn dict(sorted(s.items()))\n\n\"\"\"\nWrite a function to convert the given set into a set.\n\"\"\"\ndef set_to_set(s):\n\t\treturn set(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a frozenset.\n\"\"\"\ndef set_to_frozenset(s):\n\t\treturn frozenset(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a sorted list.\n\"\"\"\ndef set_to_sorted_list(s):\n\t\treturn sorted(s)\n\n\"\"\"\nWrite a function to convert the given set into a sorted tuple.\n\"\"\"\ndef set_to_sorted_tuple(s):\n\t\treturn tuple(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a sorted list.\n\"\"\"\ndef set_to_sorted_list(s):\n\t\treturn sorted(s)\n\n\"\"\"\nWrite a function to convert the given set into a sorted tuple.\n\"\"\"\ndef set_to_sorted_tuple(s):\n\t\treturn tuple(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a sorted list.\n\"\"\"\ndef set_to_sorted_list(s):\n\t\treturn sorted(s)\n\n\"\"\"\nWrite a function to convert the given set into a sorted tuple.\n\"\"\"\ndef set_to_sorted_tuple(s):\n\t\treturn tuple(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a sorted list.\n\"\"\"\ndef set_to_sorted_list(s):\n\t\treturn sorted(s)\n\n\"\"\"\nWrite a function to convert the given set into a sorted tuple.\n\"\"\"\ndef set_to_sorted_tuple(s):\n\t\treturn tuple(sorted(s))\n\n\"\"\"\nWrite a function to convert the given set into a sorted list.\n\"\"\"\ndef set_to_sorted_list(s):\n\t\treturn sorted(s)\n\n\"\"\"\n"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t\tmin_range = [0,0]\n\t\tfor i in range(len(list)):\n\t\t\tif list[i] < min_range[0]:\n\t\t\t\tmin_range[0] = list[i]\n\t\t\tif list[i] > min_range[1]:\n\t\t\t\tmin_range[1] = list[i]\n\t\treturn min_range\n\nprint(find_minimum_range([1,2,3,4,5]))\nprint(find_minimum_range([1,2,3,4,5,6]))\nprint(find_minimum_range([1,2,3,4,5,6,7]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(find_minimum_range([1,2,3,4,5,6,7,8,9,10,11,12,13,14,"}
{"ID": 706, "source": "MBPP:343", "prompt": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t", "predict": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t\treturn len(s), len(set(s))\n\nprint(dig_let('hello'))\nprint(dig_let('hello world'))\nprint(dig_let('hello world hello'))\nprint(dig_let('hello world hello world'))\nprint(dig_let('hello world hello world hello world'))\nprint(dig_let('hello world hello world hello world hello world'))\nprint(dig_let('hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t\tcount = 0\n\t\tfor i in range(n,m+1):\n\t\t\tif i%2==0:\n\t\t\t\tfor j in range(i,m+1):\n\t\t\t\t\tif j%2==0:\n\t\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Odd_Squares(1,100))\n<|endoftext|>"}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t\tdiff = 0\n\t\tfor i in range(len(nums)-1):\n\t\t\tif nums[i+1] - nums[i]!= 1:\n\t\t\t\tdiff += 1\n\t\treturn diff\n\nprint(diff_consecutivenums([1, 2, 3, 4, 5]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(diff"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\tif n == 1: \n\t\t\treturn 1\n\t\tif k == 1: \n\t\t\treturn 1\n\t\tif k == 2: \n\t\t\treturn 2\n\t\tif k == 3: \n\t\t\treturn 4\n\t\tif k == 4: \n\t\t\treturn 8\n\t\tif k == 5: \n\t\t\treturn 16\n\t\tif k == 6: \n\t\t\treturn 32\n\t\tif k == 7: \n\t\t\treturn 64\n\t\tif k == 8: \n\t\t\treturn 128\n\t\tif k == 9: \n\t\t\treturn 256\n\t\tif k == 10: \n\t\t\treturn 512\n\t\tif k == 11: \n\t\t\treturn 1024\n\t\tif k == 12: \n\t\t\treturn 2048\n\t\tif k == 13: \n\t\t\treturn 4096\n\t\tif k == 14: \n\t\t\treturn 8192\n\t\tif k == 15: \n\t\t\treturn 16384\n\t\tif k == 16: \n\t\t\treturn 32768\n\t\tif k == 17: \n\t\t\treturn 65536\n\t\tif k == 18: \n\t\t\treturn 131072\n\t\tif k == 19: \n\t\t\treturn 262144\n\t\tif k == 20: \n\t\t\treturn 524288\n\t\tif k == 21: \n\t\t\treturn 1048576\n\t\tif k == 22: \n\t\t\treturn 2097152\n\t\tif k == 23: \n\t\t\treturn 4194304\n\t\tif k == 24: \n\t\t\treturn 8388608\n\t\tif k == 25: \n\t\t\treturn 16777216\n\t\tif k == 26: \n\t\t\treturn 33554432\n\t\tif k == 27: \n\t\t\treturn 67108864\n\t\tif k == 28: \n\t\t\treturn 134217728\n\t\tif k == 29: \n\t\t\treturn 268"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\tcount = 0\n\t\tfor i in range(m):\n\t\t\tfor j in range(n):\n\t\t\t\tif i == 0 or j == 0 or i == m-1 or j == n-1:\n\t\t\t\t\tcount += 1\n\t\t\t\telse:\n\t\t\t\t\tcount += 4\n\t\treturn count\n\nprint(count_Squares(5,5))\n<|endoftext|>"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t\t# Write your code here\n\t\tif M == 0:\n\t\t\treturn 0\n\t\tif M == 1:\n\t\t\treturn 1\n\t\tif M == 2:\n\t\t\treturn 2\n\t\tif M == 3:\n\t\t\treturn 4\n\t\tif M == 4:\n\t\t\treturn 8\n\t\tif M == 5:\n\t\t\treturn 16\n\t\tif M == 6:\n\t\t\treturn 32\n\t\tif M == 7:\n\t\t\treturn 64\n\t\tif M == 8:\n\t\t\treturn 128\n\t\tif M == 9:\n\t\t\treturn 256\n\t\tif M == 10:\n\t\t\treturn 512\n\t\tif M == 11:\n\t\t\treturn 1024\n\t\tif M == 12:\n\t\t\treturn 2048\n\t\tif M == 13:\n\t\t\treturn 4096\n\t\tif M == 14:\n\t\t\treturn 8192\n\t\tif M == 15:\n\t\t\treturn 16384\n\t\tif M == 16:\n\t\t\treturn 32768\n\t\tif M == 17:\n\t\t\treturn 65536\n\t\tif M == 18:\n\t\t\treturn 131072\n\t\tif M == 19:\n\t\t\treturn 262144\n\t\tif M == 20:\n\t\t\treturn 524288\n\t\tif M == 21:\n\t\t\treturn 1048576\n\t\tif M == 22:\n\t\t\treturn 2097152\n\t\tif M == 23:\n\t\t\treturn 4194304\n\t\tif M == 24:\n\t\t\treturn 8388608\n\t\tif M == 25:\n\t\t\treturn 16777216\n\t\tif M == 26:\n\t\t\treturn 33554432\n\t\tif M == 27:\n\t\t\treturn 67108864\n\t\tif M == 28:\n\t\t\treturn 134217728\n\t\tif M == 29:"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t\tif string == \"\" :\n\t\t\treturn False\n\t\tif string[0] == \"0\" :\n\t\t\treturn False\n\t\tif string[0] == \"1\" :\n\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given string is a decimal string or not.\n\"\"\"\ndef check_dec(string) :\n\t\tif string == \"\" :\n\t\t\treturn False\n\t\tif string[0] == \"0\" :\n\t\t\treturn False\n\t\tif string[0] == \"1\" :\n\t\t\treturn True\n\t\tif string[0] == \"-\" :\n\t\t\treturn False\n\t\tif string[0] == \"+\" :\n\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given string is a hexadecimal string or not.\n\"\"\"\ndef check_hex(string) :\n\t\tif string == \"\" :\n\t\t\treturn False\n\t\tif string[0] == \"0\" :\n\t\t\treturn False\n\t\tif string[0] == \"1\" :\n\t\t\treturn True\n\t\tif string[0] == \"-\" :\n\t\t\treturn False\n\t\tif string[0] == \"+\" :\n\t\t\treturn True\n\t\tif string[0] == \"0\" :\n\t\t\treturn False\n\t\tif string[0] == \"1\" :\n\t\t\treturn True\n\t\tif string[0] == \"2\" :\n\t\t\treturn True\n\t\tif string[0] == \"3\" :\n\t\t\treturn True\n\t\tif string[0] == \"4\" :\n\t\t\treturn True\n\t\tif string[0] == \"5\" :\n\t\t\treturn True\n\t\tif string[0] == \"6\" :\n\t\t\treturn True\n\t\tif string[0] == \"7\" :\n\t\t\treturn True\n\t\tif string[0] == \"8\" :\n\t\t\treturn True\n\t\tif string[0] == \"9\" :\n\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given string is a octal string or not.\n\"\"\"\ndef check_oct(string) :\n\t\tif string == \"\" :\n\t\t\treturn False\n\t\tif string[0] == \"0\" :\n\t\t\treturn False\n\t\tif string[0] == \"1\" :\n\t\t\treturn True\n\t\tif string[0] == \"-\" :\n\t\t\treturn False\n\t\t"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\t# Your code here\n\t\ts = s.lower()\n\t\ts = s.replace(\" \",\"\")\n\t\ts = s.replace(\"\\n\",\"\")\n\t\ts = s.replace(\"\\t\",\"\")\n\t\ts = s.replace(\"\\r\",\"\")\n\t\ts = s.replace(\"\\'\",\"\")\n\t\ts = s.replace(\"\\\"\",\"\")\n\t\ts = s.replace(\"!\", \"\")\n\t\ts = s.replace(\"?\", \"\")\n\t\ts = s.replace(\".\", \"\")\n\t\ts = s.replace(\",\", \"\")\n\t\ts = s.replace(\":\", \"\")\n\t\ts = s.replace(\";\", \"\")\n\t\ts = s.replace(\"(\", \"\")\n\t\ts = s.replace(\")\", \"\")\n\t\ts = s.replace(\"[\", \"\")\n\t\ts = s.replace(\"]\", \"\")\n\t\ts = s.replace(\"{\", \"\")\n\t\ts = s.replace(\"}\", \"\")\n\t\ts = s.replace(\" \", \"\")\n\t\ts = s.replace(\"\\n\",\"\")\n\t\ts = s.replace(\"\\t\",\"\")\n\t\ts = s.replace(\"\\r\",\"\")\n\t\ts = s.replace(\"\\'\",\"\")\n\t\ts = s.replace(\"\\\"\",\"\")\n\t\ts = s.replace(\"!\", \"\")\n\t\ts = s.replace(\"?\", \"\")\n\t\ts = s.replace(\".\", \"\")\n\t\ts = s.replace(\",\", \"\")\n\t\ts = s.replace(\":\", \"\")\n\t\ts = s.replace(\";\", \"\")\n\t\ts = s.replace(\"(\", \"\")\n\t\ts = s.replace(\")\", \"\")\n\t\ts = s.replace(\"[\", \"\")\n\t\ts = s.replace(\"]\", \"\")\n\t\ts = s.replace(\"{\", \"\")\n\t\ts = s.replace(\"}\", \"\")\n\t\ts = s.replace(\" \", \"\")\n\t\ts = s.replace(\"\\n\",\"\")\n\t\ts = s.replace(\"\\t\",\"\")\n\t\ts = s.replace(\"\\r\",\"\")\n\t\ts = s.replace(\"\\'\",\"\")\n\t\ts = s.replace(\"\\\"\",\"\")\n\t\ts = s.replace(\"!\", \"\")\n\t\ts = s.replace(\"?\", \"\")\n\t\ts = s.replace(\".\", \"\")\n\t\ts = s.replace(\",\", \"\")\n\t\ts = s.replace(\":\", \"\")\n\t\ts = s.replace(\";\", \"\")\n\t\ts = s.replace(\"(\", \"\")\n\t\ts = s.replace(\")\", \"\")\n\t\ts = s.replace(\"["}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t# Your code here\n\t\t#"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t\t# Your code here\n\t\treturn len(set(str)) == len(str)\n\nprint(unique_Characters(\"abc\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint(unique_Characters(\"abcde\"))\nprint("}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t\t\"\"\"\n\t\t:param list1: nested list\n\t\t:param n: column number to be removed\n\t\t:return: nested list without the column\n\t\t\"\"\"\n\t\tif n < 0:\n\t\t\traise ValueError(\"Column number cannot be negative\")\n\t\tif n >= len(list1):\n\t\t\traise ValueError(\"Column number cannot be greater than the number of columns in the list\")\n\t\tif n == 0:\n\t\t\treturn list1[1:]\n\t\telse:\n\t\t\treturn [list1[0]] + remove_column(list1[1:], n - 1)\n\n\"\"\"\nWrite a function to remove a specified row from a given nested list.\n\"\"\"\ndef remove_row(list1, n):\n\t\t\"\"\"\n\t\t:param list1: nested list\n\t\t:param n: row number to be removed\n\t\t:return: nested list without the row\n\t\t\"\"\"\n\t\tif n < 0:\n\t\t\traise ValueError(\"Row number cannot be negative\")\n\t\tif n >= len(list1):\n\t\t\traise ValueError(\"Row number cannot be greater than the number of rows in the list\")\n\t\tif n == 0:\n\t\t\treturn list1[1:]\n\t\telse:\n\t\t\treturn [list1[0]] + remove_row(list1[1:], n - 1)\n\n\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column_from_row(list1, n):\n\t\t\"\"\"\n\t\t:param list1: nested list\n\t\t:param n: column number to be removed\n\t\t:return: nested list without the column\n\t\t\"\"\"\n\t\tif n < 0:\n\t\t\traise ValueError(\"Column number cannot be negative\")\n\t\tif n >= len(list1):\n\t\t\traise ValueError(\"Column number cannot be greater than the number of columns in the list\")\n\t\tif n == 0:\n\t\t\treturn list1[1:]\n\t\telse:\n\t\t\treturn [list1[0]] + remove_column_from_row(list1[1:], n - 1)\n\n\"\"\"\nWrite a function to remove a specified row from a given nested list.\n\"\"\"\ndef remove_row_from_column(list1, n):\n\t\t\"\"\"\n\t\t:param list1: nested list\n\t\t:param n: row number to be removed\n\t"}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t\tif n==0:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn tn_ap(a+d,n-1,d)\n\nprint(tn_ap(1,10,2))\n<|endoftext|>"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t\treturn int(4*3.14*radius**2)\n\nprint(count_Rectangles(1))\nprint(count_Rectangles(2))\nprint(count_Rectangles(3))\nprint(count_Rectangles(4))\nprint(count_Rectangles(5))\nprint(count_Rectangles(6))\nprint(count_Rectangles(7))\nprint(count_Rectangles(8))\nprint(count_Rectangles(9))\nprint(count_Rectangles(10))\nprint(count_Rectangles(11))\nprint(count_Rectangles(12))\nprint(count_Rectangles(13))\nprint(count_Rectangles(14))\nprint(count_Rectangles(15))\nprint(count_Rectangles(16))\nprint(count_Rectangles(17))\nprint(count_Rectangles(18))\nprint(count_Rectangles(19))\nprint(count_Rectangles(20))\nprint(count_Rectangles(21))\nprint(count_Rectangles(22))\nprint(count_Rectangles(23))\nprint(count_Rectangles(24))\nprint(count_Rectangles(25))\nprint(count_Rectangles(26))\nprint(count_Rectangles(27))\nprint(count_Rectangles(28))\nprint(count_Rectangles(29))\nprint(count_Rectangles(30))\nprint(count_Rectangles(31))\nprint(count_Rectangles(32))\nprint(count_Rectangles(33))\nprint(count_Rectangles(34))\nprint(count_Rectangles(35))\nprint(count_Rectangles(36))\nprint(count_Rectangles(37))\nprint(count_Rectangles(38))\nprint(count_Rectangles(39))\nprint(count_Rectangles(40))\nprint(count_Rectangles(41))\nprint(count_Rectangles(42))\nprint(count_Rectangles(43))\nprint(count_Rectangles(44))\nprint(count_Rectangles(45))\nprint(count_Rectangles(46"}
{"ID": 719, "source": "MBPP:356", "prompt": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t", "predict": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t\treturn (b**2 - a**2) / (2*b)\n\ndef main():\n\ta = float(input(\"Enter the first angle: \"))\n\tb = float(input(\"Enter the second angle: \"))\n\tc = float(input(\"Enter the third angle: \"))\n\tprint(\"The third angle is: \", find_angle(a,b))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t\tmax_value = test_list[0]\n\t\tfor i in test_list:\n\t\t\tif i > max_value:\n\t\t\t\tmax_value = i\n\t\treturn max_value\n\nprint(find_max((1, 2, 3, 4, 5)))\nprint(find_max((1, 2, 3, 4, 5, 6)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nprint(moddiv_list([1,2,3,4,5], [2,3,4,5,6]))\n<|endoftext|>"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\tif (b**2 - 4*a*c) < 0: \n\t\t\treturn False\n\t\telse: \n\t\t\treturn True\n\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint(Check_Solution(1,2,32))\nprint(Check_Solution(1,2,33))\nprint(Check_Solution(1,2,34))\nprint(Check_Solution(1,2,35))\nprint(Check_Solution(1,2,36))\nprint(Check_Solution(1,2,3"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t\t\"\"\"\n\t\t:param n: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn get_carol(n-1) + get_carol(n-2)\n\nprint(get_carol(10))\n<|endoftext|>"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] == []:\n\t\t\t\tdel list1[i]\n\t\treturn list1\n\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3],[]]))\nprint(remove_empty([[1,2,3"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\tmax_count = 0\n\t\tmax_item = None\n\t\tfor i in nums:\n\t\t\tif nums.count(i) > max_count:\n\t\t\t\tmax_count = nums.count(i)\n\t\t\t\tmax_item = i\n\t\treturn max_item\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = test_list[i] + K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to remove the k elements from each element in the tuple.\n\"\"\"\ndef remove_K_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = test_list[i] - K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to multiply the k elements to each element in the tuple.\n\"\"\"\ndef multiply_K_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = test_list[i] * K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to divide the k elements to each element in the tuple.\n\"\"\"\ndef divide_K_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\ttest_list[i] = test_list[i] / K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to find the kth largest element in a list.\n\"\"\"\ndef find_kth_largest_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif i == K - 1:\n\t\t\t\treturn test_list[i]\n\t\t\telse:\n\t\t\t\ttest_list[i] = test_list[i] + K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to find the kth smallest element in a list.\n\"\"\"\ndef find_kth_smallest_element(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif i == K - 1:\n\t\t\t\treturn test_list[i]\n\t\t\telse:\n\t\t\t\ttest_list[i] = test_list[i] - K\n\t\treturn test_list\n\n\"\"\"\nWrite a function to find the kth smallest element in a list.\n\"\"\"\ndef find_kth_smallest_element_2(test_list, K):\n\t\tfor i in range(len(test_list)):\n\t\t\tif i == K - 1:\n\t\t\t\treturn test_list[i]\n\t\t"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t\t# Write your code here\n\t\tcount = 0\n\t\tfor i in range(len(str)):\n\t\t\tif str[i] == str[i+1]:\n\t\t\t\tcount += 1\n\t\t\telse:\n\t\t\t\tcount = 0\n\t\treturn count\n\nprint(min_flip_to_make_string_alternate(\"101\"))\nprint(min_flip_to_make_string_alternate(\"111\"))\nprint(min_flip_to_make_string_alternate(\"1001\"))\nprint(min_flip_to_make_string_alternate(\"1101\"))\nprint(min_flip_to_make_string_alternate(\"1011\"))\nprint(min_flip_to_make_string_alternate(\"1111\"))\nprint(min_flip_to_make_string_alternate(\"10001\"))\nprint(min_flip_to_make_string_alternate(\"11001\"))\nprint(min_flip_to_make_string_alternate(\"10101\"))\nprint(min_flip_to_make_string_alternate(\"11101\"))\nprint(min_flip_to_make_string_alternate(\"10010\"))\nprint(min_flip_to_make_string_alternate(\"11010\"))\nprint(min_flip_to_make_string_alternate(\"10110\"))\nprint(min_flip_to_make_string_alternate(\"11110\"))\nprint(min_flip_to_make_string_alternate(\"100001\"))\nprint(min_flip_to_make_string_alternate(\"110001\"))\nprint(min_flip_to_make_string_alternate(\"101001\"))\nprint(min_flip_to_make_string_alternate(\"111001\"))\nprint(min_flip_to_make_string_alternate(\"100111\"))\nprint(min_flip_to_make_string_alternate(\"110111\"))\nprint(min_flip_to_make_string_alternate(\"101111\"))\nprint(min_flip_to_make_string_alternate"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t\tcount = 0\n\t\twhile n > 0:\n\t\t\tn = n // 10\n\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Digit(123456789))\n<|endoftext|>"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t\t# Write your code here\n\t\tmax_product = 0\n\t\tfor i in range(len(list_nums)-1):\n\t\t\tfor j in range(i+1, len(list_nums)):\n\t\t\t\tproduct = list_nums[i]*list_nums[j]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(adjacent_num_product([1,2,3,4,5]))\nprint(adjacent_num_product([1,2,3,4,5,6]))\nprint(adjacent_num_product([1,2,3,4,5,6,7]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(adjacent_num_product([1,2,3,4,5,6,7,8,9,10,11,12,13,"}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\t# Write your code here\n\t\tif root is None:\n\t\t\treturn True\n\t\tif abs(height(root.left) - height(root.right)) > 1:\n\t\t\treturn False\n\t\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\treturn max(height(root.left), height(root.right)) + 1\n\n\"\"\"\nWrite a function to check if a binary tree is a mirror of itself or not.\n\"\"\"\ndef is_mirror(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is None and root.right is None:\n\t\treturn True\n\tif root.left is None or root.right is None:\n\t\treturn False\n\tif root.left.val!= root.right.val:\n\t\treturn False\n\treturn is_mirror(root.left) and is_mirror(root.right)\n\n\"\"\"\nWrite a function to check if a binary tree is a binary search tree or not.\n\"\"\"\ndef is_bst(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is None or root.right is None:\n\t\treturn True\n\tif root.left.val >= root.val and root.right.val <= root.val:\n\t\treturn is_bst(root.left) and is_bst(root.right)\n\treturn False\n\n\"\"\"\nWrite a function to check if a binary tree is a binary search tree or not.\n\"\"\"\ndef is_bst_iterative(root):\n\tif root is None:\n\t\treturn True\n\tstack = []\n\tstack.append(root)\n\twhile len(stack) > 0:\n\t\tnode = stack.pop()\n\t\tif node.left is not None:\n\t\t\tstack.append(node.left)\n\t\tif node.right is not None:\n\t\t\tstack.append(node.right)\n\t\tif node.val >= root.val and node.val <= root.val:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a binary tree is a binary search tree or not.\n\"\"\"\ndef is_bst_recursive(root):\n\t"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t\tfor i in range(N):\n\t\t\tprint(test_tup)\n\nrepeat_tuples((1,2,3), 3)\n\n\"\"\"\nWrite a function to find the sum of the given list.\n\"\"\"\ndef sum_list(test_list):\n\tsum = 0\n\tfor i in test_list:\n\t\tsum += i\n\treturn sum\n\nprint(sum_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the product of the given list.\n\"\"\"\ndef product_list(test_list):\n\tproduct = 1\n\tfor i in test_list:\n\t\tproduct *= i\n\treturn product\n\nprint(product_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum of the given list.\n\"\"\"\ndef min_list(test_list):\n\tmin = test_list[0]\n\tfor i in test_list:\n\t\tif i < min:\n\t\t\tmin = i\n\treturn min\n\nprint(min_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum of the given list.\n\"\"\"\ndef max_list(test_list):\n\tmax = test_list[0]\n\tfor i in test_list:\n\t\tif i > max:\n\t\t\tmax = i\n\treturn max\n\nprint(max_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of the given list.\n\"\"\"\ndef avg_list(test_list):\n\tsum = 0\n\tfor i in test_list:\n\t\tsum += i\n\treturn sum/len(test_list)\n\nprint(avg_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the median of the given list.\n\"\"\"\ndef median_list(test_list):\n\ttest_list.sort()\n\tif len(test_list) % 2 == 0:\n\t\treturn (test_list[len(test_list)//2-1] + test_list[len(test_list)//2])/2\n\telse:\n\t\treturn test_list[len(test_list)//2"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t\treturn (l*w*h)/2\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle\n\"\"\"\ndef perimeter_rectangle(l,w):\n\t\treturn 2*l+2*w\n\n\"\"\"\nWrite a function to find the area of a rectangle\n\"\"\"\ndef area_rectangle(l,w):\n\t\treturn l*w\n\n\"\"\"\nWrite a function to find the perimeter of a circle\n\"\"\"\ndef perimeter_circle(r):\n\t\treturn 2*r*pi\n\n\"\"\"\nWrite a function to find the area of a circle\n\"\"\"\ndef area_circle(r):\n\t\treturn pi*r**2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a pentagon\n\"\"\"\ndef perimeter_pentagon(a,b,c,d,e):\n\t\treturn a+b+c+d+e\n\n\"\"\"\nWrite a function to find the area of a pentagon\n\"\"\"\ndef area_pentagon(a,b,c,d,e):\n\t\treturn (a*b*c)/2\n\n\"\"\"\nWrite a function to find the perimeter of a hexagon\n\"\"\"\ndef perimeter_hexagon(a,b,c,d,e,f,g,h):\n\t\treturn a+b+c+d+e+f+g+h\n\n\"\"\"\nWrite a function to find the area of a hexagon\n\"\"\"\ndef area_hexagon(a,b,c,d,e,f,g,h):\n\t\treturn (a*b*c*d)/6\n\n\"\"\"\nWrite a function to find the perimeter of a heptagon\n\"\"\"\ndef perimeter_heptagon(a,b,c,d,e,f,g,h,i):\n\t\treturn a+b+c+d+e+f+g+h+i\n\n\"\"\"\nWrite a function to find the area of a hept"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t\treturn price[1]\n\n\"\"\"\nWrite a function to sort a tuple by its string element.\n\"\"\"\ndef string_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its integer element.\n\"\"\"\ndef integer_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its boolean element.\n\"\"\"\ndef boolean_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its list element.\n\"\"\"\ndef list_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its tuple element.\n\"\"\"\ndef tuple_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its set element.\n\"\"\"\ndef set_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its dict element.\n\"\"\"\ndef dict_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its function element.\n\"\"\"\ndef function_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its object element.\n\"\"\"\ndef object_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its class element.\n\"\"\"\ndef class_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its instance element.\n\"\"\"\ndef instance_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its module element.\n\"\"\"\ndef module_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its global element.\n\"\"\"\ndef global_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its local element.\n\"\"\"\ndef local_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple by its builtin element.\n\"\"\"\ndef builtin_sort(price):\n\t\treturn price[0]\n\n\"\"\"\nWrite a function to sort a tuple"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t\tif left_element > right_element:\n\t\t\treturn left_element\n\t\tmid_element = (left_element + right_element) // 2\n\t\tif A[mid_element] == mid_element:\n\t\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\t\telif A[mid_element] > mid_element:\n\t\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\t\telse:\n\t\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\ndef main():\n\tA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(smallest_missing(A, 0, len(A) - 1))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_2(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_3(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_4(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_5(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_6(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_7(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in range(i, len(nums)):\n\t\t\t\tif nums[i] > nums[j]:\n\t\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\t\treturn nums\n\ndef heap_assending_8(nums):\n\t\tfor i in range(len(nums)):\n\t\t\tfor j in"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h\n\nprint(volume_cuboid(10,20,30))\n<|endoftext|>"}
{"ID": 737, "source": "MBPP:374", "prompt": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t", "predict": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t\tif len(str) == 0:\n\t\t\treturn []\n\t\telse:\n\t\t\treturn [str[0]] + permute_string(str[1:])\n\nprint(permute_string(\"abc\"))\nprint(permute_string(\"ab\"))\nprint(permute_string(\"a\"))\nprint(permute_string(\"\"))\n<|endoftext|>"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t\treturn int(n/m)*m\n\nprint(round_num(12.345,2))\nprint(round_num(12.345,3))\nprint(round_num(12.345,4))\nprint(round_num(12.345,5))\nprint(round_num(12.345,6))\nprint(round_num(12.345,7))\nprint(round_num(12.345,8))\nprint(round_num(12.345,9))\nprint(round_num(12.345,10))\nprint(round_num(12.345,11))\nprint(round_num(12.345,12))\nprint(round_num(12.345,13))\nprint(round_num(12.345,14))\nprint(round_num(12.345,15))\nprint(round_num(12.345,16))\nprint(round_num(12.345,17))\nprint(round_num(12.345,18))\nprint(round_num(12.345,19))\nprint(round_num(12.345,20))\nprint(round_num(12.345,21))\nprint(round_num(12.345,22))\nprint(round_num(12.345,23))\nprint(round_num(12.345,24))\nprint(round_num(12.345,25))\nprint(round_num(12.345,26))\nprint(round_num(12.345,27))\nprint(round_num(12.345,28))\nprint(round_num(12.345,29))\nprint(round_num(12.345,30))\nprint(round_num(12.345,31))"}
{"ID": 739, "source": "MBPP:376", "prompt": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t\tnew_tup = []\n\t\tfor i in test_tup:\n\t\t\tif i not in new_tup:\n\t\t\t\tnew_tup.append(i)\n\t\treturn new_tup\n\nprint(remove_replica((1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t\t# Your code here\n\t\ts = s.replace(c,'')\n\t\treturn s\n\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\", \"o\"))\nprint(remove_Char(\"Hello World\", \"l\"))\nprint(remove_Char(\"Hello World\","}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t\ttest_list.append(test_list.pop(0))\n\t\treturn test_list\n\nprint(move_first([1,2,3,4,5]))\n<|endoftext|>"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t\treturn l*w*h*6\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*3.14*r**3\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4*3.14*r**3*3.14\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn 2*3.14*r**2*h*3.14\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 2*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn 2*3.14*r**2*h*3.14\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r,h):\n\t\treturn 2*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r,h):\n\t\treturn 2*3.14*r**2*h*3.14\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder_2(r,h):\n\t\treturn 2*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder_2(r,h):\n\t\treturn 2*3.14*r**2*h*3.1"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t\tarr = []\n\t\tfor i in range(rownum):\n\t\t\tarr.append([])\n\t\t\tfor j in range(colnum):\n\t\t\t\tarr[i].append(i*j)\n\t\treturn arr\n\nprint(multi_list(3,4))\n\n\"\"\"\nWrite a function to generate a three-dimensional array.\n\"\"\"\ndef multi_list2(rownum,colnum,depth):\n\t\tarr = []\n\t\tfor i in range(rownum):\n\t\t\tarr.append([])\n\t\t\tfor j in range(colnum):\n\t\t\t\tarr[i].append([])\n\t\t\t\tfor k in range(depth):\n\t\t\t\t\tarr[i][j].append(i*j*k)\n\t\treturn arr\n\nprint(multi_list2(3,4,5))\n\n\"\"\"\nWrite a function to generate a four-dimensional array.\n\"\"\"\ndef multi_list3(rownum,colnum,depth,height):\n\t\tarr = []\n\t\tfor i in range(rownum):\n\t\t\tarr.append([])\n\t\t\tfor j in range(colnum):\n\t\t\t\tarr[i].append([])\n\t\t\t\tfor k in range(depth):\n\t\t\t\t\tarr[i][j].append([])\n\t\t\t\t\tfor l in range(height):\n\t\t\t\t\t\tarr[i][j][k].append(i*j*k*l)\n\t\treturn arr\n\nprint(multi_list3(3,4,5,6))\n\n\"\"\"\nWrite a function to generate a five-dimensional array.\n\"\"\"\ndef multi_list4(rownum,colnum,depth,height,width):\n\t\tarr = []\n\t\tfor i in range(rownum):\n\t\t\tarr.append([])\n\t\t\tfor j in range(colnum):\n\t\t\t\tarr[i].append([])\n\t\t\t\tfor k in range(depth):\n\t\t\t\t\tarr[i][j].append([])\n\t\t\t\t\tfor l in range(height):\n\t\t\t\t\t\tarr[i][j][k].append([])\n\t\t\t\t\t\tfor m in range(width):\n\t\t\t\t\t\t\tarr[i][j][k][l].append(i*j*k*l*m)\n\t\treturn arr\n\nprint(multi_list4(3,4,5,6,7))\n\n\"\"\"\nWrite a function to generate a six-dimensional array.\n\"\"\"\ndef multi_list5(rownum"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no])\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_2(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_3(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_4(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_5(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_6(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_7(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list_8(list_data, index_no):\n\t\treturn sorted(list_data, key=lambda x: x[index_no], reverse=False)\n\n\"\"\"\nWrite a function to sort a list of lists by a given index"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t\t\"\"\"\n\t\t:type A: List[int]\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif len(A) == 1:\n\t\t\treturn 0\n\t\tif len(A) == 2:\n\t\t\treturn 1\n\t\tif len(A) == 3:\n\t\t\treturn 2\n\t\tif len(A) == 4:\n\t\t\treturn 3\n\t\tif len(A) == 5:\n\t\t\treturn 4\n\t\tif len(A) == 6:\n\t\t\treturn 5\n\t\tif len(A) == 7:\n\t\t\treturn 6\n\t\tif len(A) == 8:\n\t\t\treturn 7\n\t\tif len(A) == 9:\n\t\t\treturn 8\n\t\tif len(A) == 10:\n\t\t\treturn 9\n\t\tif len(A) == 11:\n\t\t\treturn 10\n\t\tif len(A) == 12:\n\t\t\treturn 11\n\t\tif len(A) == 13:\n\t\t\treturn 12\n\t\tif len(A) == 14:\n\t\t\treturn 13\n\t\tif len(A) == 15:\n\t\t\treturn 14\n\t\tif len(A) == 16:\n\t\t\treturn 15\n\t\tif len(A) == 17:\n\t\t\treturn 16\n\t\tif len(A) == 18:\n\t\t\treturn 17\n\t\tif len(A) == 19:\n\t\t\treturn 18\n\t\tif len(A) == 20:\n\t\t\treturn 19\n\t\tif len(A) == 21:\n\t\t\treturn 20\n\t\tif len(A) == 22:\n\t\t\treturn 21\n\t\tif len(A) == 23:\n\t\t\treturn 22\n\t\tif len(A) == 24:\n\t\t\treturn 23\n\t\tif len(A) == 25:\n\t\t\treturn 24\n\t\tif len(A) == 26:\n\t\t\treturn 25\n\t\tif len(A) == 27:\n\t\t\treturn 26\n\t\tif len(A) == 28:\n\t\t\treturn 27\n\t\tif len(A"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to find the sum of all even numbers in a given range.\n\"\"\"\ndef even_numbers_sum(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 0 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all odd numbers in a given range.\n\"\"\"\ndef odd_numbers_sum(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 1 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all even numbers in a given range.\n\"\"\"\ndef even_numbers_sum_2(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 0 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all odd numbers in a given range.\n\"\"\"\ndef odd_numbers_sum_2(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 1 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all even numbers in a given range.\n\"\"\"\ndef even_numbers_sum_3(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 0 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all odd numbers in a given range.\n\"\"\"\ndef odd_numbers_sum_3(start, end) : \n\t\tsum = 0\n\t\tfor i in range(start, end) : \n\t\t\t\tif (i & 1) == 1 : \n\t\t\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all even numbers in a given range.\n\"\"\"\ndef even_numbers_sum_4(start, end) :"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1]\n\n\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest_2(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest_3(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest_4(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest_5(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest_and_Largest_6(n,arr): \n\t\t# Your code here\n\t\tarr.sort()\n\t\treturn arr[n-1],arr[0]\n\n\"\"\"\nWrite a python function to find the frequency of the smallest and largest value in"}
{"ID": 748, "source": "MBPP:385", "prompt": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t", "predict": "\"\"\"\nWrite a function to find then'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * get_perrin(n-1)\n\nprint(get_perrin(10))\n<|endoftext|>"}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t\tstack = []\n\t\tfor i in range(len(s)):\n\t\t\tif s[i] == '(':\n\t\t\t\tstack.append(i)\n\t\t\telif s[i] == ')':\n\t\t\t\tif len(stack) == 0:\n\t\t\t\t\treturn -1\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\tif len(stack) == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn len(stack)\n\nprint(swap_count('((()))'))\nprint(swap_count('((()))((()))'))\nprint(swap_count('((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_count('((()))((()))((()))((()))((()))((()))'))\nprint(swap_"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t\tif N % 2 == 0: \n\t\t\treturn \"Even\" \n\t\telse: \n\t\t\treturn \"Odd\" \n\nprint(even_or_odd(10))\nprint(even_or_odd(12))\nprint(even_or_odd(13))\nprint(even_or_odd(14))\nprint(even_or_odd(15))\nprint(even_or_odd(16))\nprint(even_or_odd(17))\nprint(even_or_odd(18))\nprint(even_or_odd(19))\nprint(even_or_odd(20))\nprint(even_or_odd(21))\nprint(even_or_odd(22))\nprint(even_or_odd(23))\nprint(even_or_odd(24))\nprint(even_or_odd(25))\nprint(even_or_odd(26))\nprint(even_or_odd(27))\nprint(even_or_odd(28))\nprint(even_or_odd(29))\nprint(even_or_odd(30))\nprint(even_or_odd(31))\nprint(even_or_odd(32))\nprint(even_or_odd(33))\nprint(even_or_odd(34))\nprint(even_or_odd(35))\nprint(even_or_odd(36))\nprint(even_or_odd(37))\nprint(even_or_odd(38))\nprint(even_or_odd(39))\nprint(even_or_odd(40))\nprint(even_or_odd(41))\nprint(even_or_odd(42))\nprint(even_or_odd(43))\nprint(even_or_odd(44))\nprint(even_or_odd(45))\nprint(even_or_odd(46))\nprint(even_or_odd(47))\nprint(even_or_odd(48))\nprint(even_or_odd(49))\nprint(even_or_odd(50))\nprint(even_"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telif n == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\treturn highest_Power_of_2(n//2) + 1 \n\nprint(highest_Power_of_2(10))\n<|endoftext|>"}
{"ID": 752, "source": "MBPP:389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t\t\"\"\"\n\t\t:param n: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(10))\n<|endoftext|>"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t\tfor i in range(len(list)):\n\t\t\tlist[i] = string + list[i]\n\t\treturn list\n\nprint(add_string([\"a\",\"b\",\"c\"],\"d\"))\n<|endoftext|>"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t\td = {}\n\t\tfor i in range(len(l1)):\n\t\t\td[l1[i]] = {}\n\t\t\tfor j in range(len(l2)):\n\t\t\t\td[l1[i]][l2[j]] = {}\n\t\t\t\tfor k in range(len(l3)):\n\t\t\t\t\td[l1[i]][l2[j]][l3[k]] = {}\n\t\treturn d\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\tfor j in d[i]:\n\t\t\t\tfor k in d[i][j]:\n\t\t\t\t\tl.append([i, j, k])\n\t\treturn l\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list_2(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\tfor j in d[i]:\n\t\t\t\tfor k in d[i][j]:\n\t\t\t\t\tl.append([i, j, k])\n\t\treturn l\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list_3(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\tfor j in d[i]:\n\t\t\t\tfor k in d[i][j]:\n\t\t\t\t\tl.append([i, j, k])\n\t\treturn l\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list_4(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\tfor j in d[i]:\n\t\t\t\tfor k in d[i][j]:\n\t\t\t\t\tl.append([i, j, k])\n\t\treturn l\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list_5(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\tfor j in d[i]:\n\t\t\t\tfor k in d[i][j]:\n\t\t\t\t\tl.append([i, j, k])\n\t\treturn l\n\n\"\"\"\nWrite a function to convert nested dictionary to list.\n\"\"\"\ndef convert_dictionary_list_6(d):\n\t\tl = []\n\t\tfor i in d:\n\t\t\t"}
{"ID": 755, "source": "MBPP:392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telif n == 2:\n\t\t\treturn 2\n\t\telif n == 3:\n\t\t\treturn 6\n\t\telif n == 4:\n\t\t\treturn 12\n\t\telif n == 5:\n\t\t\treturn 20\n\t\telse:\n\t\t\treturn get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n\nprint(get_max_sum(10))\n<|endoftext|>"}
{"ID": 756, "source": "MBPP:393", "prompt": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t", "predict": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t\treturn max(map(len, input_list))\n\nprint(max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t\tif len(test_tup) == len(set(test_tup)):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if given tuple is a permutation of another tuple.\n\"\"\"\ndef check_permutation(test_tup, other_tup):\n\tif len(test_tup) == len(other_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i]!= other_tup[i]:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if given tuple is a permutation of another tuple.\n\"\"\"\ndef check_permutation_2(test_tup, other_tup):\n\tif len(test_tup) == len(other_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i]!= other_tup[i]:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if given tuple is a permutation of another tuple.\n\"\"\"\ndef check_permutation_3(test_tup, other_tup):\n\tif len(test_tup) == len(other_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i]!= other_tup[i]:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if given tuple is a permutation of another tuple.\n\"\"\"\ndef check_permutation_4(test_tup, other_tup):\n\tif len(test_tup) == len(other_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i]!= other_tup[i]:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to check if given tuple is a permutation of another tuple.\n\"\"\"\ndef check_permutation_5(test_tup, other_tup):\n\tif len(test_tup) == len(other_tup):\n\t\tfor i in range(len(test_tup)):\n\t\t\tif test_tup[i]!= other_tup[i]:\n\t\t\t\treturn False\n\t\treturn True\n\telse"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t\t# Your code here\n\t\tfor i in range(len(str1)):\n\t\t\tfor j in range(i+1, len(str1)):\n\t\t\t\tif str1[i] == str1[j]:\n\t\t\t\t\treturn str1[i]\n\t\treturn None\n\nprint(first_non_repeating_character(\"abc\"))\nprint(first_non_repeating_character(\"abcc\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_repeating_character(\"abccde\"))\nprint(first_non_"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t\tif string[0] == string[-1]: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\nprint(check_char(\"hello\"))\nprint(check_char(\"hello world\"))\nprint(check_char(\"hello world hello\"))\nprint(check_char(\"hello world hello world\"))\nprint(check_char(\"hello world hello world hello\"))\nprint(check_char(\"hello world hello world hello world\"))\nprint(check_char(\"hello world hello world hello world hello world\"))\nprint(check_char(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t\tif a>b and a>c:\n\t\t\treturn a\n\t\telif b>a and b>c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\nprint(median_numbers(1,2,3))\nprint(median_numbers(1,2,4))\nprint(median_numbers(1,2,5))\nprint(median_numbers(1,2,6))\nprint(median_numbers(1,2,7))\nprint(median_numbers(1,2,8))\nprint(median_numbers(1,2,9))\nprint(median_numbers(1,2,10))\nprint(median_numbers(1,2,11))\nprint(median_numbers(1,2,12))\nprint(median_numbers(1,2,13))\nprint(median_numbers(1,2,14))\nprint(median_numbers(1,2,15))\nprint(median_numbers(1,2,16))\nprint(median_numbers(1,2,17))\nprint(median_numbers(1,2,18))\nprint(median_numbers(1,2,19))\nprint(median_numbers(1,2,20))\nprint(median_numbers(1,2,21))\nprint(median_numbers(1,2,22))\nprint(median_numbers(1,2,23))\nprint(median_numbers(1,2,24))\nprint(median_numbers(1,2,25))\nprint(median_numbers(1,2,26))\nprint(median_numbers(1,2,27))\nprint(median_numbers(1,2,28))\nprint(median_numbers(1,2,29))\nprint(median_numbers(1,2,30))\nprint(median_numbers(1,2,31))\nprint(median_numbers(1,2,32))\nprint(median_numbers(1,2,33))\nprint(median_numbers(1,2,34))\nprint(median_numbers(1,2,35))\nprint(median_numbers(1,2,36))\nprint(median_"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t\treturn sum(map(int, str(nums)))\n\nprint(sum_of_digits([1, 2, 3, 4, 5]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise and operation across the given tuples.\n\"\"\"\ndef bitwise_and(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise or operation across the given tuples.\n\"\"\"\ndef bitwise_or(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x | y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise not operation across the given tuples.\n\"\"\"\ndef bitwise_not(test_tup):\n\t\treturn tuple(map(lambda x: ~x, test_tup))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise shift left operation across the given tuples.\n\"\"\"\ndef bitwise_shift_left(test_tup, shift_amount):\n\t\treturn tuple(map(lambda x, y: x << y, test_tup, shift_amount))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise shift right operation across the given tuples.\n\"\"\"\ndef bitwise_shift_right(test_tup, shift_amount):\n\t\treturn tuple(map(lambda x, y: x >> y, test_tup, shift_amount))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise shift right operation across the given tuples.\n\"\"\"\ndef bitwise_shift_right_unsigned(test_tup, shift_amount):\n\t\treturn tuple(map(lambda x, y: x >> y, test_tup, shift_amount))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise shift right operation across the given tuples.\n\"\"\"\ndef bitwise_shift_right_signed(test_tup, shift_amount):\n\t\treturn tuple(map(lambda x, y: x >> y, test_tup, shift_amount))\n\n\"\"\"\nWrite a function to perform the mathematical bitwise shift right operation across the given tuples.\n\"\"\"\ndef bitwise_shift_right"}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq_2(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq_3(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq_4(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq_5(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq_dict[i] = 1\n\t\treturn freq_dict\n\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq_6(test_list):\n\t\tfreq_dict = {}\n\t\tfor i in test_list:\n\t\t\tif i in freq_dict:\n\t\t\t\tfreq_dict[i] += 1\n\t\t\telse:\n\t\t\t\tfreq"}
{"ID": 764, "source": "MBPP:401", "prompt": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n\"\"\"\ndef subtract_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n\"\"\"\ndef multiply_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise division of tuple elements in the given two nested tuples.\n\"\"\"\ndef divide_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise modulo of tuple elements in the given two nested tuples.\n\"\"\"\ndef modulo_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise power of tuple elements in the given two nested tuples.\n\"\"\"\ndef power_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x ** y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise bitwise and of tuple elements in the given two nested tuples.\n\"\"\"\ndef bitwise_and_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to perform index wise bitwise or of tuple elements in the given two nested tuples.\n\"\"\"\ndef bitwise_or_nested_tuples(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x | y, test_tup"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\t\"\"\"\n\t\tncr%p\n\t\t\"\"\"\n\t\treturn (n-1)*(r-1)//p + (n-r*(r-1)//p)\n\n\"\"\"\nWrite a function to compute the value of ncr%q.\n\"\"\"\ndef ncr_modq(n, r, q): \n\t\t\"\"\"\n\t\tncr%q\n\t\t\"\"\"\n\t\treturn (n-1)*(q-1)//r + (n-r*(q-1)//r)\n\n\"\"\"\nWrite a function to compute the value of ncr%r.\n\"\"\"\ndef ncr_modr(n, r, q): \n\t\t\"\"\"\n\t\tncr%r\n\t\t\"\"\"\n\t\treturn (n-1)*(r-1)//q + (n-r*(r-1)//q)\n\n\"\"\"\nWrite a function to compute the value of ncr%s.\n\"\"\"\ndef ncr_mods(n, r, s): \n\t\t\"\"\"\n\t\tncr%s\n\t\t\"\"\"\n\t\treturn (n-1)*(s-1)//r + (n-r*(s-1)//r)\n\n\"\"\"\nWrite a function to compute the value of ncr%t.\n\"\"\"\ndef ncr_modt(n, r, t): \n\t\t\"\"\"\n\t\tncr%t\n\t\t\"\"\"\n\t\treturn (n-1)*(t-1)//q + (n-r*(t-1)//q)\n\n\"\"\"\nWrite a function to compute the value of ncr%u.\n\"\"\"\ndef ncr_modu(n, r, u): \n\t\t\"\"\"\n\t\tncr%u\n\t\t\"\"\"\n\t\treturn (n-1)*(u-1)//s + (n-r*(u-1)//s)\n\n\"\"\"\nWrite a function to compute the value of ncr%v.\n\"\"\"\ndef ncr_modv(n, r, v): \n\t\t\"\"\"\n\t\tncr%v\n\t\t\"\"\"\n\t\treturn (n-1)*(v-1)//t + (n-r*(v-1)//t)\n\n\"\"\"\nWrite a function to compute the value of ncr%w.\n\"\"\"\ndef ncr_modw(n, r, w): \n\t\t\"\"\"\n\t\tncr%w\n\t\t\"\"\"\n\t\treturn (n-1)*(w-1"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t\tregex = re.compile(r'^(?:http|ftp)s?://' # http:// or https://\n\t\t\t\tr'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n\t\t\t\tr'localhost|' #localhost...\n\t\t\t\tr'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n\t\t\t\tr'(?::\\d+)?' # optional port\n\t\t\t\tr'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\t\treturn bool(regex.match(str))\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not using recursion.\n\"\"\"\ndef is_palindrome(str):\n\tif len(str) <= 1:\n\t\treturn True\n\telse:\n\t\treturn str[0] == str[-1] and is_palindrome(str[1:-1])\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not using iterative method.\n\"\"\"\ndef is_palindrome_iterative(str):\n\ti = 0\n\tj = len(str) - 1\n\twhile i < j:\n\t\tif str[i]!= str[j]:\n\t\t\treturn False\n\t\ti += 1\n\t\tj -= 1\n\treturn True\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not using recursion.\n\"\"\"\ndef is_palindrome_recursive(str):\n\tif len(str) <= 1:\n\t\treturn True\n\telse:\n\t\treturn str[0] == str[-1] and is_palindrome_recursive(str[1:-1])\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not using iterative method.\n\"\"\"\ndef is_palindrome_iterative_recursive(str):\n\ti = 0\n\tj = len(str) - 1\n\twhile i < j:\n\t\tif str[i]!= str[j]:\n\t\t\treturn False\n\t\ti += 1\n\t\tj -= 1\n\t"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\tif a < b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(minimum(1,2))\nprint(minimum(1,2.5))\nprint(minimum(1,2.55))\nprint(minimum(1,2.555))\nprint(minimum(1,2.5555))\nprint(minimum(1,2.55555))\nprint(minimum(1,2.555555))\nprint(minimum(1,2.5555555))\nprint(minimum(1,2.55555555))\nprint(minimum(1,2.555555555))\nprint(minimum(1,2.5555555555))\nprint(minimum(1,2.55555555555))\nprint(minimum(1,2.555555555555))\nprint(minimum(1,2.5555555555555))\nprint(minimum(1,2.55555555555555))\nprint(minimum(1,2.555555555555555))\nprint(minimum(1,2.5555555555555555))\nprint(minimum(1,2.55555555555555555))\nprint(minimum(1,2.555555555555555555))\nprint(minimum(1,2.5555555555555555555))\nprint(minimum(1,2.55555555555555555555))\nprint(minimum(1,2.555555555555555555555))\nprint(minimum(1,2.55555555555555555555555))\nprint(minimum(1,2.5"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t\tfor i in range(len(tuplex)):\n\t\t\tif tuplex[i] == tuple1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a list.\n\"\"\"\ndef check_listx(listx,list1): \n\t\tfor i in range(len(listx)):\n\t\t\tif listx[i] == list1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a dictionary.\n\"\"\"\ndef check_dictx(dictx,dict1): \n\t\tfor i in range(len(dictx)):\n\t\t\tif dictx[i] == dict1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a set.\n\"\"\"\ndef check_setx(setx,set1): \n\t\tfor i in range(len(setx)):\n\t\t\tif setx[i] == set1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a range.\n\"\"\"\ndef check_rangex(rangex,range1): \n\t\tfor i in range(len(rangex)):\n\t\t\tif rangex[i] == range1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_strx(strx,str1): \n\t\tfor i in range(len(strx)):\n\t\t\tif strx[i] == str1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a boolean.\n\"\"\"\ndef check_boolx(boolx,bool1): \n\t\tfor i in range(len(boolx)):\n\t\t\tif boolx[i] == bool1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a float.\n\"\"\"\ndef check_floatx(floatx,float1): \n\t\tfor i in range(len(floatx)):\n\t\t\tif floatx[i] == float1:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a complex.\n\"\"\"\ndef check_complexx(complexx,complex1): \n\t"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint(find_Parity(54))\nprint(find_Parity(55))\nprint("}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t\treturn int(''.join(sorted(str(n))))\n\nprint(rearrange_bigger(123456789))\nprint(rearrange_bigger(1234567890))\nprint(rearrange_bigger(12345678901))\nprint(rearrange_bigger(123456789012))\nprint(rearrange_bigger(1234567890123))\nprint(rearrange_bigger(12345678901234))\nprint(rearrange_bigger(123456789012345))\nprint(rearrange_bigger(1234567890123456))\nprint(rearrange_bigger(12345678901234567))\nprint(rearrange_bigger(123456789012345678))\nprint(rearrange_bigger(1234567890123456789))\nprint(rearrange_bigger(12345678901234567890))\nprint(rearrange_bigger(123456789012345678901))\nprint(rearrange_bigger(1234567890123456789012))\nprint(rearrange_bigger(12345678901234567890123))\nprint(rearrange_bigger(123456789012345678901234))\nprint(rearrange_bigger(1234567890123456789012345))\nprint(rearrange_bigger(12345678901234567890123456))\nprint(re"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\t# Write your code here\n\t\tpairs = []\n\t\tfor i in range(len(nums1)):\n\t\t\tfor j in range(len(nums2)):\n\t\t\t\tif nums1[i] == nums2[j]:\n\t\t\t\t\tpairs.append([nums1[i], nums2[j]])\n\t\t\t\t\tif len(pairs) == k:\n\t\t\t\t\t\treturn pairs\n\t\treturn pairs\n\nprint(k_smallest_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))\n<|endoftext|>"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t\tmin_product = 0\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(i+1, len(list1)):\n\t\t\t\tproduct = list1[i][0] * list1[j][0]\n\t\t\t\tif product < min_product:\n\t\t\t\t\tmin_product = product\n\t\treturn min_product\n\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]))\nprint(min_product_tuple([[1, 2], [3, 4], [5,"}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t\tmin_val = listval[0]\n\t\tfor i in range(1,len(listval)):\n\t\t\tif listval[i] < min_val:\n\t\t\t\tmin_val = listval[i]\n\t\treturn min_val\n\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t\tmax_val = listval[0]\n\t\tfor i in range(1,len(listval)):\n\t\t\tif listval[i] > max_val:\n\t\t\t\tmax_val = listval[i]\n\t\treturn max_val\n\n\"\"\"\nWrite a function to find the sum of all the values in a given heterogeneous list.\n\"\"\"\ndef sum_val(listval):\n\t\tsum_val = 0\n\t\tfor i in range(len(listval)):\n\t\t\tsum_val += listval[i]\n\t\treturn sum_val\n\n\"\"\"\nWrite a function to find the product of all the values in a given heterogeneous list.\n\"\"\"\ndef prod_val(listval):\n\t\tprod_val = 1\n\t\tfor i in range(len(listval)):\n\t\t\tprod_val *= listval[i]\n\t\treturn prod_val\n\n\"\"\"\nWrite a function to find the average of all the values in a given heterogeneous list.\n\"\"\"\ndef avg_val(listval):\n\t\tavg_val = sum_val(listval) / len(listval)\n\t\treturn avg_val\n\n\"\"\"\nWrite a function to find the median of all the values in a given heterogeneous list.\n\"\"\"\ndef median_val(listval):\n\t\tif len(listval) % 2 == 0:\n\t\t\treturn (listval[len(listval) // 2 - 1] + listval[len(listval) // 2]) / 2\n\t\telse:\n\t\t\treturn listval[len(listval) // 2]\n\n\"\"\"\nWrite a function to find the mode of all the values in a given heterogeneous list.\n\"\"\"\ndef mode_val(listval):\n\t\tmode_val = 0\n\t\tcount = 0\n\t\tfor i in range(len(listval)):\n\t\t\tif listval[i]"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n\"\"\"\nWrite a function to convert the given camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(word):\n\t\treturn re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n\n\"\"\"\nWrite a function to convert the given snake case string to pascal case string by using regex.\n\"\"\"\ndef snake_to_pascal(word):\n\t\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word).title()\n\n\"\"\"\nWrite a function to convert the given pascal case string to snake case string by using regex.\n\"\"\"\ndef pascal_to_snake(word):\n\t\treturn re.sub(r'([A-Z])([A-Z][a-z])', r'\\1_\\2', word).lower()\n\n\"\"\"\nWrite a function to convert the given pascal case string to camel case string by using regex.\n\"\"\"\ndef pascal_to_camel(word):\n\t\treturn re.sub(r'([A-Z])([A-Z][a-z])', lambda m: m.group(1).upper(), word).title()\n\n\"\"\"\nWrite a function to convert the given camel case string to pascal case string by using regex.\n\"\"\"\ndef camel_to_pascal(word):\n\t\treturn re.sub(r'([a-z0-9])([A-Z])', lambda m: m.group(1).upper(), word).title()\n\n\"\"\"\nWrite a function to convert the given camel case string to kebab case string by using regex.\n\"\"\"\ndef camel_to_kebab(word):\n\t\treturn re.sub(r'([a-z0-9])([A-Z])', lambda m: m.group(1).lower(), word).lower()\n\n\"\"\"\nWrite a function to convert the given kebab case string to camel case string by using regex.\n\"\"\"\ndef kebab_to_camel(word):\n\t\treturn re.sub(r'([a-z0-9])([A-Z])',"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t\treturn [x for x in l if x % 2!= 0]\n\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 776, "source": "MBPP:413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t\treturn list1[n]\n\n\"\"\"\nWrite a function to find the sum of the squares of the first n natural numbers.\n\"\"\"\ndef sum_of_squares(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i**2\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_2(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_3(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_4(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_5(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_6(n):\n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\t\tsum += i\n\t\treturn sum\n\n\"\"\"\nWrite a function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers_7(n):\n\t\tsum = 0\n\t\tfor i"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t\tfor i in list1:\n\t\t\tif i in list2:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(overlapping([1,2,3,4,5], [1,2,3,4,5]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15,16]))\nprint(overlapping([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t\tmax_product = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tproduct = arr[i] * arr[j]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(max_Product([1, 2, 3, 4, 5]))\nprint(max_Product([1, 2, 3, 4, 5, 6]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_Product([1, 2, 3, 4, 5, 6, 7"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telif n == 1: \n\t\t\treturn 1 \n\t\telse: \n\t\t\treturn max(breakSum(n-1), breakSum(n-2), breakSum(n-3)) + n\n\nprint(breakSum(10))\n<|endoftext|>"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t\t# Write your code here\n\t\t# sort the list\n\t\tInput.sort()\n\t\t# create a dictionary to store the count of each element\n\t\t# and the index of the first element\n\t\tdict = {}\n\t\tfor i in range(len(Input)):\n\t\t\tif Input[i][0] in dict:\n\t\t\t\tdict[Input[i][0]] += 1\n\t\t\telse:\n\t\t\t\tdict[Input[i][0]] = 1\n\t\t# find the first element\n\t\tfor key in dict:\n\t\t\tif dict[key] == 1:\n\t\t\t\treturn key\n\nif __name__ == '__main__':\n\tprint(group_tuples([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12),(12,13),(13,14),(14,15),(15,16),(16,17),(17,18),(18,19),(19,20),(20,21),(21,22),(22,23),(23,24),(24,25),(25,26),(26,27),(27,28),(28,29),(29,30),(30,31),(31,32),(32,33),(33,34),(34,35),(35,36),(36,37),(37,38),(38,39),(39,40),(40,41),(41,42),(42,43),(43,44),(44,45),(45,46),(46,47),(47,48),(48,49),(49,50),(50,51),(51,52),(52,53),(53,54),(54,55),(55,56),(56,57),(57,58),(58,59),(59,60),(60,61),(61,62),(62,63),(63,64),(64,65"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = 0\n\t\tmax_sub_list = []\n\t\tfor i in range(len(lst)):\n\t\t\tif len(lst[i]) > max_len:\n\t\t\t\tmax_len = len(lst[i])\n\t\t\t\tmax_sub_list = [lst[i]]\n\t\t\telif len(lst[i]) == max_len:\n\t\t\t\tmax_sub_list.append(lst[i])\n\t\treturn max_sub_list\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(Find_Max(lst))\n<|endoftext|>"}
{"ID": 782, "source": "MBPP:419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t", "predict": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t\tsum = 0\n\t\tfor i in list1:\n\t\t\tsum += i\n\t\treturn sum * len(list1)\n\nprint(round_and_sum([1,2,3,4,5]))\nprint(round_and_sum([1,2,3,4,5,6]))\nprint(round_and_sum([1,2,3,4,5,6,7]))\nprint(round_and_sum([1,2,3,4,5,6,7,8]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"}
{"ID": 783, "source": "MBPP:420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum += i**3\n\t\treturn sum\n\nprint(cube_Sum(10))\n<|endoftext|>"}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t\treturn ''.join(test_tup)\n\nprint(concatenate_tuple(('a','b','c')))\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(str1, str2):\n\tif len(str1) < len(str2):\n\t\tstr1, str2 = str2, str1\n\tlcs = []\n\tfor i in range(len(str1)):\n\t\tfor j in range(len(str2)):\n\t\t\tif str1[i] == str2[j]:\n\t\t\t\tlcs.append(str1[i])\n\t\t\t\tbreak\n\treturn ''.join(lcs)\n\nprint(longest_common_substring('abcde', 'ace'))\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(str1, str2):\n\tif len(str1) < len(str2):\n\t\tstr1, str2 = str2, str1\n\tlcs = []\n\tfor i in range(len(str1)):\n\t\tfor j in range(len(str2)):\n\t\t\tif str1[i] == str2[j]:\n\t\t\t\tlcs.append(str1[i])\n\t\t\t\tbreak\n\treturn ''.join(lcs)\n\nprint(longest_common_substring('abcde', 'ace'))\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(str1, str2):\n\tif len(str1) < len(str2):\n\t\tstr1, str2 = str2, str1\n\tlcs = []\n\tfor i in range(len(str1)):\n\t\tfor j in range(len(str2)):\n\t\t\tif str1[i] == str2[j]:\n\t\t\t\tlcs.append(str1[i])\n\t\t\t\tbreak\n\treturn ''.join(lcs)\n\nprint(longest_common_substring('abcde', 'ace'))\n\n\"\"\"\nWrite a function to find the longest common substring in two strings.\n\"\"\"\ndef longest_common_substring(str1, str2):\n\tif len(str1) < len(str2):\n\t\tstr1, str2 = str2"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tsum = sum + i**3\n\t\treturn sum/n\n\nprint(find_Average_Of_Cube(5))\n<|endoftext|>"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t\t\"\"\"\n\t\t:param gold: list of gold\n\t\t:param m: number of rows\n\t\t:param n: number of columns\n\t\t:return: maximum gold\n\t\t\"\"\"\n\t\tmax_gold = 0\n\t\tfor i in range(m):\n\t\t\tfor j in range(n):\n\t\t\t\tif gold[i][j] > max_gold:\n\t\t\t\t\tmax_gold = gold[i][j]\n\t\treturn max_gold\n\ndef get_mingold(gold, m, n): \n\t\t\"\"\"\n\t\t:param gold: list of gold\n\t\t:param m: number of rows\n\t\t:param n: number of columns\n\t\t:return: minimum gold\n\t\t\"\"\"\n\t\tmin_gold = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t\treturn test_tuple[1]\n\n\"\"\"\nWrite a function to extract only the front index element of each string in the given tuple.\n\"\"\"\ndef extract_front(test_tuple):\n\t\treturn test_tuple[0]\n\n\"\"\"\nWrite a function to extract only the middle index element of each string in the given tuple.\n\"\"\"\ndef extract_middle(test_tuple):\n\t\treturn test_tuple[1]\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\n\"\"\"\ndef extract_last(test_tuple):\n\t\treturn test_tuple[2]\n\n\"\"\"\nWrite a function to extract only the first index element of each string in the given tuple.\n\"\"\"\ndef extract_first(test_tuple):\n\t\treturn test_tuple[0]\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\n\"\"\"\ndef extract_last_index(test_tuple):\n\t\treturn test_tuple[2]\n\n\"\"\"\nWrite a function to extract only the first index element of each string in the given tuple.\n\"\"\"\ndef extract_first_index(test_tuple):\n\t\treturn test_tuple[0]\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\n\"\"\"\ndef extract_last_index_element(test_tuple):\n\t\treturn test_tuple[2]\n\n\"\"\"\nWrite a function to extract only the first index element of each string in the given tuple.\n\"\"\"\ndef extract_first_index_element(test_tuple):\n\t\treturn test_tuple[0]\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\n\"\"\"\ndef extract_last_index_element_2(test_tuple):\n\t\treturn test_tuple[2]\n\n\"\"\"\nWrite a function to extract only the first index element of each string in the given tuple.\n\"\"\"\ndef extract_first_index_element_2(test_tuple):\n\t\treturn test_tuple[0]\n\n\"\"\"\nWrite a function to extract only the last index element of each string in the given tuple.\n\"\"\"\ndef extract_last_index_element_3(test_tuple):\n\t\treturn test_tuple[2]\n"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t\tcount = 0\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] == x:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 10))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 11))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 12))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 13))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 14))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 15))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 16))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 17))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 18))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 19))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 20))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 21))\nprint(count_element_in_list([1,2,3,4,5,6,7,8,9,10], 22))\nprint(count_"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t\treturn list(filter(lambda x: x % 2 == 1, nums))\n\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 790, "source": "MBPP:427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t\tdt = dt.replace('-','')\n\t\tdt = dt.replace('/','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(':','')\n\t\tdt = dt.replace('T','')\n\t\tdt = dt.replace('Z','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt.replace(' ','')\n\t\tdt = dt."}
{"ID": 791, "source": "MBPP:428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t", "predict": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t\tn = len(my_list)\n\t\tgap = n // 2\n\t\twhile gap > 0:\n\t\t\tfor i in range(gap, n):\n\t\t\t\ttemp = my_list[i]\n\t\t\t\tj = i\n\t\t\t\twhile j >= gap and my_list[j - gap] > temp:\n\t\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\t\tj -= gap\n\t\t\t\tmy_list[j] = temp\n\t\t\tgap //= 2\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nshell_sort(my_list)\nprint(my_list)\n<|endoftext|>"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t\treturn test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef or_tuples(test_tup1, test_tup2):\n\t\treturn test_tup1[0] or test_tup2[0], test_tup1[1] or test_tup2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef xor_tuples(test_tup1, test_tup2):\n\t\treturn test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef not_tuples(test_tup):\n\t\treturn not test_tup[0], not test_tup[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_lists(test_list1, test_list2):\n\t\treturn test_list1[0] and test_list2[0], test_list1[1] and test_list2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef or_lists(test_list1, test_list2):\n\t\treturn test_list1[0] or test_list2[0], test_list1[1] or test_list2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef xor_lists(test_list1, test_list2):\n\t\treturn test_list1[0] ^ test_list2[0], test_list1[1] ^ test_list2[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef not_lists(test_list):\n\t\treturn not test_list[0], not test_list[1]\n\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_sets"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\treturn (b*b) - 4*a*c\n\n\"\"\"\nWrite a function to find the slope of a parabola.\n\"\"\"\ndef parabola_slope(a, b, c): \n\t\treturn (2*a*c) - (b*b)\n\n\"\"\"\nWrite a function to find the y-intercept of a parabola.\n\"\"\"\ndef parabola_y_intercept(a, b, c): \n\t\treturn (b*c) - (a*b)\n\n\"\"\"\nWrite a function to find the area of a parabola.\n\"\"\"\ndef parabola_area(a, b, c): \n\t\treturn (a*b) - (c*c)\n\n\"\"\"\nWrite a function to find the perimeter of a parabola.\n\"\"\"\ndef parabola_perimeter(a, b, c): \n\t\treturn 2*(a*b)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c): \n\t\treturn (a*b) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c): \n\t\treturn (a + b + c)\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a, b): \n\t\treturn (a*b)\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a, b): \n\t\treturn (a + b)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r): \n\t\treturn (3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709"}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t\tfor i in list1:\n\t\t\tif i in list2:\n\t\t\t\treturn True\n\t\treturn False\n\nprint(common_element([1,2,3,4,5], [1,2,3,4,5]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15]))\nprint(common_element([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15,16]))\nprint(common_element([1,2,3,4"}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t\tif height == 0:\n\t\t\treturn 0\n\t\telif height == 1:\n\t\t\treturn (base1 + base2)/2\n\t\telse:\n\t\t\treturn (base1 + base2 + (height-1)*base2)/2\n\nprint(median_trapezium(1,2,3))\nprint(median_trapezium(1,2,4))\nprint(median_trapezium(1,2,5))\nprint(median_trapezium(1,2,6))\nprint(median_trapezium(1,2,7))\nprint(median_trapezium(1,2,8))\nprint(median_trapezium(1,2,9))\nprint(median_trapezium(1,2,10))\nprint(median_trapezium(1,2,11))\nprint(median_trapezium(1,2,12))\nprint(median_trapezium(1,2,13))\nprint(median_trapezium(1,2,14))\nprint(median_trapezium(1,2,15))\nprint(median_trapezium(1,2,16))\nprint(median_trapezium(1,2,17))\nprint(median_trapezium(1,2,18))\nprint(median_trapezium(1,2,19))\nprint(median_trapezium(1,2,20))\nprint(median_trapezium(1,2,21))\nprint(median_trapezium(1,2,22))\nprint(median_trapezium(1,2,23))\nprint(median_trapezium(1,2,24))\nprint(median_trapezium(1,2,25))\nprint(median_trapezium(1,2,26))\nprint(median_trapezium(1,2,27))\nprint(median_trapezium(1,2,28))\nprint(median_trapezium(1,2,29))\nprint(median_"}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t\tfor i in range(len(arr)):\n\t\t\tif arr[i] > number:\n\t\t\t\treturn True\n\t\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 6\nprint(check_greater(arr, number))\n<|endoftext|>"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more_or_more_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more_or_more_or_more_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more_or_more_or_more_or_more_or_more(text):\n\t\treturn re.search(r'a\\b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more_or_more_or_more_or_more_or_more_or_more_or_more(text):\n\t"}
{"ID": 798, "source": "MBPP:435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t", "predict": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t\treturn n%10\n\nprint(last_Digit(12345))\nprint(last_Digit(123456))\nprint(last_Digit(1234567))\nprint(last_Digit(12345678))\nprint(last_Digit(123456789))\nprint(last_Digit(1234567890))\nprint(last_Digit(12345678901))\nprint(last_Digit(123456789012))\nprint(last_Digit(1234567890123))\nprint(last_Digit(12345678901234))\nprint(last_Digit(123456789012345))\nprint(last_Digit(1234567890123456))\nprint(last_Digit(12345678901234567))\nprint(last_Digit(123456789012345678))\nprint(last_Digit(1234567890123456789))\nprint(last_Digit(12345678901234567890))\nprint(last_Digit(123456789012345678901))\nprint(last_Digit(1234567890123456789012))\nprint(last_Digit(12345678901234567890123))\nprint(last_Digit(123456789012345678901234))\nprint(last_Digit(1234567890123456789012345))\nprint(last_Digit(123456789012345"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i] < 0:\n\t\t\t\tprint(list1[i])\n\nlist1 = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nneg_nos(list1)\n<|endoftext|>"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t\treturn str1.replace('o', '')\n\nprint(remove_odd('hello'))\nprint(remove_odd('helloo'))\nprint(remove_odd('hellooo'))\nprint(remove_odd('helloooo'))\nprint(remove_odd('hellooooo'))\nprint(remove_odd('helloooooo'))\nprint(remove_odd('hellooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('helloooooooo'))\nprint(remove_odd('hellooooo"}
{"ID": 801, "source": "MBPP:438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t", "predict": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t\tcount = 0\n\t\tfor i in range(len(test_list)-1):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_bidirectional([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\treturn sum(L)\n\nprint(multiple_to_single([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the largest of three numbers.\n\"\"\"\ndef largest_of_three(a,b,c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(largest_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find the smallest of three numbers.\n\"\"\"\ndef smallest_of_three(a,b,c):\n\tif a < b and a < c:\n\t\treturn a\n\telif b < a and b < c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(smallest_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find the greatest common divisor of two numbers.\n\"\"\"\ndef gcd(a,b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\nprint(gcd(10,20))\n\n\"\"\"\nWrite a function to find the least common multiple of two numbers.\n\"\"\"\ndef lcm(a,b):\n\treturn a*b//gcd(a,b)\n\nprint(lcm(10,20))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_multiples(n):\n\ts = 0\n\tfor i in range(1,n+1):\n\t\tif i % 3 == 0 or i % 5 == 0:\n\t\t\ts += i\n\treturn s\n\nprint(sum_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000000.\n\"\"\"\ndef sum_multiples_2(n):\n\ts = 0\n\tfor i in range(1,n+1):\n\t\tif i % 3 == 0 or i % 5 == 0:\n\t\t\ts += i\n\treturn s\n\n"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (adverb, position)\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'u':\n\t\t\t\tadverbs.append((text[i], i))\n\t\treturn adverbs\n\n\"\"\"\nWrite a function to find all nouns and their positions in a given sentence.\n\"\"\"\ndef find_noun_position(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (noun, position)\n\t\t\"\"\"\n\t\tnouns = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'n' or text[i] =='s' or text[i] == 't' or text[i] == 'v':\n\t\t\t\tnouns.append((text[i], i))\n\t\treturn nouns\n\n\"\"\"\nWrite a function to find all verbs and their positions in a given sentence.\n\"\"\"\ndef find_verb_position(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (verb, position)\n\t\t\"\"\"\n\t\tverbs = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'r' or text[i] == 'u' or text[i] == 'v':\n\t\t\t\tverbs.append((text[i], i))\n\t\treturn verbs\n\n\"\"\"\nWrite a function to find all adjectives and their positions in a given sentence.\n\"\"\"\ndef find_adjective_position(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (adjective, position)\n\t\t\"\"\"\n\t\tadjectives = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'j' or text[i] == 'k' or text[i] == 'l' or text[i] =='m' or text[i] == 'n' or text[i] == 'o' or text[i]"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t\treturn l[0] * l[1] * l[2]\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t\treturn l[0] * l[1] * l[2] * l[3]\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4 * math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4 * math.pi * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder_2(r, h):\n\t\treturn 2 * math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder_2(r, h):\n\t\treturn 2 * math.pi * r * h * r\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone_"}
{"ID": 805, "source": "MBPP:442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t\tcount = 0\n\t\tfor i in nums:\n\t\t\tif i > 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t\t# Your code here\n\t\tlargest = 0\n\t\tfor i in list1:\n\t\t\tif i < 0:\n\t\t\t\tlargest = i\n\t\treturn largest\n\nlist1 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nprint(largest_neg(list1))\n<|endoftext|>"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t\tnew_list = []\n\t\tfor i in test_list:\n\t\t\tif len(i) == K:\n\t\t\t\tnew_list.append(i)\n\t\treturn new_list\n\n\"\"\"\nWrite a function to find the longest common prefix of two strings.\n\"\"\"\ndef longest_common_prefix(s1, s2):\n\tif len(s1) < len(s2):\n\t\treturn longest_common_prefix(s2, s1)\n\telse:\n\t\tfor i in range(len(s1)):\n\t\t\tif s1[i]!= s2[i]:\n\t\t\t\treturn s1[:i]\n\n\"\"\"\nWrite a function to find the longest common suffix of two strings.\n\"\"\"\ndef longest_common_suffix(s1, s2):\n\tif len(s1) < len(s2):\n\t\treturn longest_common_suffix(s2, s1)\n\telse:\n\t\tfor i in range(len(s1)):\n\t\t\tif s1[i]!= s2[i]:\n\t\t\t\treturn s1[i:]\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence(s1, s2):\n\tif len(s1) < len(s2):\n\t\treturn longest_common_subsequence(s2, s1)\n\telse:\n\t\tfor i in range(len(s1)):\n\t\t\tif s1[i]!= s2[i]:\n\t\t\t\treturn s1[i:]\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence_2(s1, s2):\n\tif len(s1) < len(s2):\n\t\treturn longest_common_subsequence_2(s2, s1)\n\telse:\n\t\tfor i in range(len(s1)):\n\t\t\tif s1[i]!= s2[i]:\n\t\t\t\treturn s1[i:]\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence_3(s1, s2):\n\tif len(s1) < len(s2):\n\t\treturn longest_common_subsequence_"}
{"ID": 808, "source": "MBPP:445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t\treturn tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to find the largest of three numbers.\n\"\"\"\ndef largest_of_three(test_num1, test_num2, test_num3):\n\t\treturn max(test_num1, test_num2, test_num3)\n\n\"\"\"\nWrite a function to find the smallest of three numbers.\n\"\"\"\ndef smallest_of_three(test_num1, test_num2, test_num3):\n\t\treturn min(test_num1, test_num2, test_num3)\n\n\"\"\"\nWrite a function to find the average of three numbers.\n\"\"\"\ndef average_of_three(test_num1, test_num2, test_num3):\n\t\treturn (test_num1 + test_num2 + test_num3) / 3\n\n\"\"\"\nWrite a function to find the sum of three numbers.\n\"\"\"\ndef sum_of_three(test_num1, test_num2, test_num3):\n\t\treturn test_num1 + test_num2 + test_num3\n\n\"\"\"\nWrite a function to find the difference of three numbers.\n\"\"\"\ndef difference_of_three(test_num1, test_num2, test_num3):\n\t\treturn test_num1 - test_num2 - test_num3\n\n\"\"\"\nWrite a function to find the product of three numbers.\n\"\"\"\ndef product_of_three(test_num1, test_num2, test_num3):\n\t\treturn test_num1 * test_num2 * test_num3\n\n\"\"\"\nWrite a function to find the quotient of two numbers.\n\"\"\"\ndef quotient_of_two(test_num1, test_num2):\n\t\treturn test_num1 / test_num2\n\n\"\"\"\nWrite a function to find the remainder of two numbers.\n\"\"\"\ndef remainder_of_two(test_num1, test_num2):\n\t\treturn test_num1 % test_num2\n\n\"\"\"\nWrite a function to find the greatest common divisor of two numbers.\n\"\"\"\ndef gcd_of_two(test_num1, test_num2):"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t\tcount = 0\n\t\tfor i in lst:\n\t\t\tif i in tup:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t\treturn [num**3 for num in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_nums(nums):\n\t\treturn sum(nums)\n\nprint(sum_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the product of all the elements in a list using lambda function.\n\"\"\"\ndef product_nums(nums):\n\t\treturn reduce(lambda x,y: x*y, nums)\n\nprint(product_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum of all the elements in a list using lambda function.\n\"\"\"\ndef max_nums(nums):\n\t\treturn max(nums)\n\nprint(max_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum of all the elements in a list using lambda function.\n\"\"\"\ndef min_nums(nums):\n\t\treturn min(nums)\n\nprint(min_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of all the elements in a list using lambda function.\n\"\"\"\ndef avg_nums(nums):\n\t\treturn sum(nums)/len(nums)\n\nprint(avg_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the median of all the elements in a list using lambda function.\n\"\"\"\ndef median_nums(nums):\n\t\tnums.sort()\n\t\tif len(nums)%2 == 0:\n\t\t\t\treturn (nums[len(nums)//2-1] + nums[len(nums)//2])/2\n\t\telse:\n\t\t\t\treturn nums[len(nums)//2]\n\nprint(median_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the mode of all the elements in a list using lambda function.\n\"\"\"\ndef mode_nums(nums):\n\t\treturn max(set(nums), key=nums.count)\n\nprint(mode_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t\tsum = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif i % 3 == 0 or i % 5 == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(cal_sum(10))\n<|endoftext|>"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\t# Check if the points are given\n\t\tif x1 == x2 and x1 == x3:\n\t\t\treturn False\n\t\tif y1 == y2 and y1 == y3:\n\t\t\treturn False\n\t\t# Check if the points are in the triangle\n\t\tif x1 < x2 + x3 and x2 < x1 + x3 and x3 < x1 + x2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_Triangle(1,1,1,1,1,1))\nprint(check_Triangle(1,1,1,1,1,2))\nprint(check_Triangle(1,1,1,1,2,1))\nprint(check_Triangle(1,1,1,1,2,2))\nprint(check_Triangle(1,1,1,1,2,3))\nprint(check_Triangle(1,1,1,1,3,1))\nprint(check_Triangle(1,1,1,1,3,2))\nprint(check_Triangle(1,1,1,1,3,3))\nprint(check_Triangle(1,1,1,2,1,1))\nprint(check_Triangle(1,1,1,2,1,2))\nprint(check_Triangle(1,1,1,2,1,3))\nprint(check_Triangle(1,1,1,2,2,1))\nprint(check_Triangle(1,1,1,2,2,2))\nprint(check_Triangle(1,1,1,2,2,3))\nprint(check_Triangle(1,1,1,2,3,1))\nprint(check_Triangle(1,1,1,2,3,2))\nprint(check_Triangle(1,1,1,2,3,3))\nprint(check_Triangle(1,1,2,1,1,1))\nprint(check_Triangle(1,1,2,1,1,2))\nprint(check_Triangle(1,1,2,1,1,3))\nprint(check_Triangle(1,1,2,1,2,1))\nprint(check_Triangle(1,1,2,"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_2(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_3(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_4(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_5(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_6(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_7(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_8(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string_9(str, l):\n\t\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n\"\"\"\nWrite a function to"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t\treturn re.sub(r'\\s+','',text1)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_2(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.MULTILINE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_3(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.DOTALL)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_4(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.UNICODE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_5(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.VERBOSE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_6(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.IGNORECASE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_7(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.UNICODE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_8(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.VERBOSE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_9(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.LOCALE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces_10(text1):\n\t\treturn re.sub(r'\\s+','',text1,re.UNICODE)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given"}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn actual_cost - sale_amount\n\t\telse:\n\t\t\treturn None\n\nprint(loss_amount(100,100))\nprint(loss_amount(100,1000))\nprint(loss_amount(100,10000))\nprint(loss_amount(100,100000))\nprint(loss_amount(100,1000000))\nprint(loss_amount(100,10000000))\nprint(loss_amount(100,100000000))\nprint(loss_amount(100,1000000000))\nprint(loss_amount(100,10000000000))\nprint(loss_amount(100,100000000000))\nprint(loss_amount(100,1000000000000))\nprint(loss_amount(100,10000000000000))\nprint(loss_amount(100,100000000000000))\nprint(loss_amount(100,1000000000000000))\nprint(loss_amount(100,10000000000000000))\nprint(loss_amount(100,100000000000000000))\nprint(loss_amount(100,1000000000000000000))\nprint(loss_amount(100,10000000000000000000))\nprint(loss_amount(100,100000000000000000000))\nprint(loss_amount(100,1000000000000000"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tif n%i == 0 : \n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sumofFactors(100))\n<|endoftext|>"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t\treturn text.find('z')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'a'.\n\"\"\"\ndef text_match_worda(text):\n\t\treturn text.find('a')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'e'.\n\"\"\"\ndef text_match_worde(text):\n\t\treturn text.find('e')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'i'.\n\"\"\"\ndef text_match_wordi(text):\n\t\treturn text.find('i')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'o'.\n\"\"\"\ndef text_match_wordo(text):\n\t\treturn text.find('o')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'u'.\n\"\"\"\ndef text_match_wordu(text):\n\t\treturn text.find('u')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'y'.\n\"\"\"\ndef text_match_wordy(text):\n\t\treturn text.find('y')!= -1\n\n\"\"\"\nWrite a function that matches a word containing's'.\n\"\"\"\ndef text_match_words(text):\n\t\treturn text.find('s')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 't'.\n\"\"\"\ndef text_match_wordt(text):\n\t\treturn text.find('t')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'r'.\n\"\"\"\ndef text_match_wordr(text):\n\t\treturn text.find('r')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'n'.\n\"\"\"\ndef text_match_wordn(text):\n\t\treturn text.find('n')!= -1\n\n\"\"\"\nWrite a function that matches a word containing'm'.\n\"\"\"\ndef text_match_wordm(text):\n\t\treturn text.find('m')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'l'.\n\"\"\"\ndef text_match_wordl(text):\n\t\treturn text.find('l')!= -1\n\n\"\"\"\nWrite a function that matches a word containing 'd'.\n\"\"\"\ndef text_match"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t\tif monthnum2 % 31 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumb_number2(monthnum2):\n\t\tif monthnum2 % 30 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 29 days or not.\n\"\"\"\ndef check_monthnumb_number3(monthnum2):\n\t\tif monthnum2 % 29 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnumb_number4(monthnum2):\n\t\tif monthnum2 % 28 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 27 days or not.\n\"\"\"\ndef check_monthnumb_number5(monthnum2):\n\t\tif monthnum2 % 27 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 26 days or not.\n\"\"\"\ndef check_monthnumb_number6(monthnum2):\n\t\tif monthnum2 % 26 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 25 days or not.\n\"\"\"\ndef check_monthnumb_number7(monthnum2):\n\t\tif monthnum2 % 25 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 24 days or not.\n\"\"\"\ndef check_monthnumb_number8(monthnum2):\n\t\tif monthnum2 % 24 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 23 days or not.\n\"\"\"\ndef check_monthnumb_"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t\treturn [string[::-1] for string in stringlist]\n\nprint(reverse_string_list([\"hello\", \"world\"]))\n<|endoftext|>"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t\tmin_len = len(lst)\n\t\tmin_index = 0\n\t\tfor i in range(len(lst)):\n\t\t\tif len(lst[i]) < min_len:\n\t\t\t\tmin_len = len(lst[i])\n\t\t\t\tmin_index = i\n\t\treturn lst[min_index]\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(Find_Min(lst))\n<|endoftext|>"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t\treturn l*b\n\nprint(rectangle_area(10,20))\n<|endoftext|>"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t\treturn re.sub('[A-Z]+', '', str1)\n\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\nprint(remove_uppercase('Hello World!'))\n"}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn lst[0]\n\ndef Extract_2(lst): \n\t\treturn lst[0][0]\n\ndef Extract_3(lst): \n\t\treturn lst[0][0][0]\n\ndef Extract_4(lst): \n\t\treturn lst[0][0][0][0]\n\ndef Extract_5(lst): \n\t\treturn lst[0][0][0][0][0]\n\ndef Extract_6(lst): \n\t\treturn lst[0][0][0][0][0][0]\n\ndef Extract_7(lst): \n\t\treturn lst[0][0][0][0][0][0][0]\n\ndef Extract_8(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0]\n\ndef Extract_9(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0]\n\ndef Extract_10(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_11(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_12(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_13(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_14(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_15(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_16(lst): \n\t\treturn lst[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\n\ndef Extract_17(lst): \n\t\treturn lst[0][0]["}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t\treturn str.upper().count('A')\n\nprint(upper_ctr('AABCC'))\n<|endoftext|>"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t\tlist2 = []\n\t\tfor i in range(len(list1)):\n\t\t\tfor j in range(len(list1)):\n\t\t\t\tif i!= j:\n\t\t\t\t\tlist2.append(list1[i] + list1[j])\n\t\treturn list2\n\nprint(combinations_list([1,2,3]))\nprint(combinations_list([1,2,3,4]))\nprint(combinations_list([1,2,3,4,5]))\nprint(combinations_list([1,2,3,4,5,6]))\nprint(combinations_list([1,2,3,4,5,6,7]))\nprint(combinations_list([1,2,3,4,5,6,7,8]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(combinations_list([1,2,"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\tmax_product = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tproduct = arr[i] * arr[j]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\nprint(max_subarray_product([1,2,3,4,5]))\nprint(max_subarray_product([1,2,3,4,5,6]))\nprint(max_subarray_product([1,2,3,4,5,6,7]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(max_subarray_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(max"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t\tfor key in dict:\n\t\t\tif dict[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a list.\n\"\"\"\ndef check_value_list(list, n):\n\t\tfor key in list:\n\t\t\tif list[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a tuple.\n\"\"\"\ndef check_value_tuple(tuple, n):\n\t\tfor key in tuple:\n\t\t\tif tuple[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a set.\n\"\"\"\ndef check_value_set(set, n):\n\t\tfor key in set:\n\t\t\tif set[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value_dict(dict, n):\n\t\tfor key in dict:\n\t\t\tif dict[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a list.\n\"\"\"\ndef check_value_list(list, n):\n\t\tfor key in list:\n\t\t\tif list[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a tuple.\n\"\"\"\ndef check_value_tuple(tuple, n):\n\t\tfor key in tuple:\n\t\t\tif tuple[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a set.\n\"\"\"\ndef check_value_set(set, n):\n\t\tfor key in set:\n\t\t\tif set[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value_dict(dict, n):\n\t\tfor key in dict:\n\t\t\tif dict[key]!= n:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if all values are same in a list.\n\"\"\"\ndef check_value_list(list, n):"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t\tfor key, value in dict1.items():\n\t\t\tif value == None:\n\t\t\t\tdel dict1[key]\n\t\treturn dict1\n\n\"\"\"\nWrite a function to find the longest common prefix of two strings.\n\"\"\"\ndef longest_common_prefix(str1, str2):\n\tif len(str1) < len(str2):\n\t\treturn longest_common_prefix(str2, str1)\n\tfor i in range(len(str1)):\n\t\tif str1[i]!= str2[i]:\n\t\t\treturn str1[:i]\n\treturn str1\n\n\"\"\"\nWrite a function to find the longest common suffix of two strings.\n\"\"\"\ndef longest_common_suffix(str1, str2):\n\tif len(str1) < len(str2):\n\t\treturn longest_common_suffix(str2, str1)\n\tfor i in range(len(str1)):\n\t\tif str1[i]!= str2[i]:\n\t\t\treturn str1[i+1:]\n\treturn str1\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\tif len(str1) < len(str2):\n\t\treturn longest_common_subsequence(str2, str1)\n\tfor i in range(len(str1)):\n\t\tif str1[i]!= str2[i]:\n\t\t\treturn str1[i+1:]\n\treturn str1\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence_v2(str1, str2):\n\tif len(str1) < len(str2):\n\t\treturn longest_common_subsequence_v2(str2, str1)\n\tfor i in range(len(str1)):\n\t\tif str1[i]!= str2[i]:\n\t\t\treturn str1[i+1:]\n\treturn str1\n\n\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\ndef longest_common_subsequence_v3(str1, str2):\n\tif len(str1) < len(str2):\n\t\treturn longest_common_"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t\tif low == high: \n\t\t\treturn arr[low] \n\t\tmid = (low + high) // 2 \n\t\tif arr[mid] > arr[mid + 1]: \n\t\t\treturn find_peak_util(arr, mid + 1, high, n) \n\t\telse: \n\t\t\treturn find_peak_util(arr, low, mid, n) \n\ndef find_peak(arr): \n\tn = len(arr) \n\treturn find_peak_util(arr, 0, n - 1, n) \n\nprint(find_peak([1, 2, 3, 1]))\nprint(find_peak([1, 2, 3, 4]))\nprint(find_peak([1, 2, 3, 4, 5]))\nprint(find_peak([1, 2, 3, 4, 5, 6]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(find_peak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t\toctalNum = \"\"\n\t\twhile deciNum > 0:\n\t\t\toctalNum = str(oct(deciNum % 8)) + octalNum\n\t\t\tdeciNum = deciNum // 8\n\t\treturn octalNum\n\nprint(decimal_to_Octal(123))\nprint(decimal_to_Octal(1234))\nprint(decimal_to_Octal(12345))\nprint(decimal_to_Octal(123456))\nprint(decimal_to_Octal(1234567))\nprint(decimal_to_Octal(12345678))\nprint(decimal_to_Octal(123456789))\nprint(decimal_to_Octal(1234567890))\nprint(decimal_to_Octal(12345678901))\nprint(decimal_to_Octal(123456789012))\nprint(decimal_to_Octal(1234567890123))\nprint(decimal_to_Octal(12345678901234))\nprint(decimal_to_Octal(123456789012345))\nprint(decimal_to_Octal(1234567890123456))\nprint(decimal_to_Octal(12345678901234567))\nprint(decimal_to_Octal(123456789012345678))\nprint(decimal_to_Octal(1234567890123456789))\nprint(decimal_to_Octal(12345678901234567890))\nprint(decimal_to_Octal(123456789012345678901))\nprint(decimal_to_Octal(123456789"}
{"ID": 831, "source": "MBPP:468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t\t# Write your code here\n\t\tmax_product = 0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tproduct = 1\n\t\t\t\tfor k in range(i, j):\n\t\t\t\t\tproduct *= arr[k]\n\t\t\t\tif product > max_product:\n\t\t\t\t\tmax_product = product\n\t\treturn max_product\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(max_product(arr, n))\n<|endoftext|>"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_2(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_3(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_4(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_5(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_6(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_7(price, k):\n\t\tprofit = 0\n\t\tfor i in range(k):\n\t\t\tprofit = max(profit, price[i] - price[i-1])\n\t\treturn profit\n\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit_8"}
{"ID": 833, "source": "MBPP:470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t\treturn tuple(map(lambda x, y: x + y, test_tup))\n\nprint(add_pairwise((1, 2, 3, 4)))\nprint(add_pairwise((1, 2, 3, 4, 5)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t\t# Your code here\n\t\tremainder = 0\n\t\tfor i in range(len(arr)):\n\t\t\tremainder += arr[i] * lens[i]\n\t\treturn remainder % n\n\narr = [1, 2, 3, 4, 5]\nlens = [2, 3, 4, 5, 6]\nn = 10\nprint(find_remainder(arr, lens, n))\n<|endoftext|>"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t\tif len(l) == 0: \n\t\t\treturn False\n\t\telse: \n\t\t\tfor i in range(len(l)-1): \n\t\t\t\tif l[i] + 1 == l[i+1]: \n\t\t\t\t\treturn True\n\t\t\t\telse: \n\t\t\t\t\treturn False\n\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t\t# your code here\n\t\treturn list(set(test_list1).intersection(set(test_list2)))\n\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,5]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15]))\nprint(tuple_intersection([1,2,3,4,5], [1,2,3,4,6,7,8,9,10,11,12,13,14,15,16]))\nprint(tuple_intersection([1,2,"}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t\treturn str1.replace(ch,newch)\n\nprint(replace_char(\"Hello, World!\", \"H\", \"X\"))\n<|endoftext|>"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_2(list1):\n\t\treturn sorted(list1, key=len)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_3(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_4(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_5(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_6(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_7(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_8(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_9(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length_10(list1):\n\t\treturn sorted(list1, key=len, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings by length.\n\"\"\"\ndef sort_by_length"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t\tmax_num = max(nums)\n\t\tmin_num = min(nums)\n\t\treturn max_num + min_num\n\ndef small_sum(nums):\n\t\tmax_num = max(nums)\n\t\tmin_num = min(nums)\n\t\treturn min_num + max_num\n\ndef main():\n\tnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(big_sum(nums))\n\tprint(small_sum(nums))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t\treturn string.islower()\n\n\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t\treturn string.isupper()\n\n\"\"\"\nWrite a python function to convert the given string to title case.\n\"\"\"\ndef is_title(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t\treturn string.istitle()\n\n\"\"\"\nWrite a python function to convert the given string to capitalize.\n\"\"\"\ndef is_capitalize(string):\n\t"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t\treturn str1.replace(str1.lower(), '')\n\nprint(remove_lowercase('Hello World'))\nprint(remove_lowercase('Hello World!'))\nprint(remove_lowercase('Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t\treturn n // 10\n\nprint(first_Digit(12345))\nprint(first_Digit(1234))\nprint(first_Digit(123))\nprint(first_Digit(12))\nprint(first_Digit(1))\nprint(first_Digit(0))\nprint(first_Digit(-1))\nprint(first_Digit(-12345))\nprint(first_Digit(-1234))\nprint(first_Digit(-123))\nprint(first_Digit(-12))\nprint(first_Digit(-1))\nprint(first_Digit(-100))\nprint(first_Digit(-1000))\nprint(first_Digit(-10000))\nprint(first_Digit(-100000))\nprint(first_Digit(-1000000))\nprint(first_Digit(-10000000))\nprint(first_Digit(-100000000))\nprint(first_Digit(-1000000000))\nprint(first_Digit(-10000000000))\nprint(first_Digit(-100000000000))\nprint(first_Digit(-1000000000000))\nprint(first_Digit(-10000000000000))\nprint(first_Digit(-100000000000000))\nprint(first_Digit(-1000000000000000))\nprint(first_Digit(-10000000000000000))\nprint(first_Digit(-100000000000000000))\nprint(first_Digit(-1000000000000000000))\nprint(first_Digit(-10000000000000000000))\nprint(first_Digit(-100000000000000000"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t\tmax_occuring_char = 0\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] in str1[max_occuring_char:]:\n\t\t\t\tmax_occuring_char = i\n\t\treturn max_occuring_char\n\nprint(get_max_occuring_char(\"abc\"))\nprint(get_max_occuring_char(\"abca\"))\nprint(get_max_occuring_char(\"abcb\"))\nprint(get_max_occuring_char(\"abcc\"))\nprint(get_max_occuring_char(\"abccb\"))\nprint(get_max_occuring_char(\"abccbb\"))\nprint(get_max_occuring_char(\"abccbbcc\"))\nprint(get_max_occuring_char(\"abccbbccdd\"))\nprint(get_max_occuring_char(\"abccbbccddde\"))\nprint(get_max_occuring_char(\"abccbbccdddeee\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeff\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggggggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggggggggggggg\"))\nprint(get_max_occuring_char(\"abccbbccdddeeeffgggggggggggggggggggggg\"))\nprint(get"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t\t# Write your code here\n\t\tif sum == 0:\n\t\t\treturn True\n\t\tif sum < 0:\n\t\t\treturn False\n\t\tif len(set) == 0:\n\t\t\treturn False\n\t\tif sum > n:\n\t\t\treturn False\n\t\tif sum == n:\n\t\t\treturn True\n\t\tif sum < n:\n\t\t\treturn False\n\t\tif sum % 2 == 0:\n\t\t\treturn is_subset_sum(set[1:], n, sum - set[0])\n\t\telse:\n\t\t\treturn is_subset_sum(set[1:], n, sum - set[0]) or is_subset_sum(set[1:], n, sum - set[0])\n\nprint(is_subset_sum([1,2,3,4,5], 10, 15))\nprint(is_subset_sum([1,2,3,4,5], 10, 12))\nprint(is_subset_sum([1,2,3,4,5], 10, 11))\nprint(is_subset_sum([1,2,3,4,5], 10, 10))\nprint(is_subset_sum([1,2,3,4,5], 10, 9))\nprint(is_subset_sum([1,2,3,4,5], 10, 8))\nprint(is_subset_sum([1,2,3,4,5], 10, 7))\nprint(is_subset_sum([1,2,3,4,5], 10, 6))\nprint(is_subset_sum([1,2,3,4,5], 10, 5))\nprint(is_subset_sum([1,2,3,4,5], 10, 4))\nprint(is_subset_sum([1,2,3,4,5], 10, 3))\nprint(is_subset_sum([1,2,3,4,5], 10, 2))\nprint(is_subset_sum([1,2,3,4,5], 10, 1))\nprint(is_subset_sum([1,2,3,"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\treturn re.findall(r'[A-Z][a-z]+', text)\n\nprint(match('Hello World'))\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n"}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factorial_Divisible_Number(10))\n\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif i%x==0:\n\t\t\t\treturn i\n\nprint(first_Factor"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_2(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_3(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_4(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_5(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_6(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_7(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple_8(test_list1, test_list2):\n\t\t# Your code here\n\t\treturn [x for x in test_list1 if x not in test_list2]\n\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples"}
{"ID": 848, "source": "MBPP:485", "prompt": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t", "predict": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t\t# code here\n\t\tif n == 0 : \n\t\t\treturn 0\n\t\tif n == 1 : \n\t\t\treturn A[0]\n\t\tif n == 2 : \n\t\t\treturn max(A[0], A[1])\n\t\tif n == 3 : \n\t\t\treturn max(max(A[0], A[1]), A[2])\n\t\tif n == 4 : \n\t\t\treturn max(max(max(A[0], A[1]), A[2]), A[3])\n\t\tif n == 5 : \n\t\t\treturn max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4])\n\t\tif n == 6 : \n\t\t\treturn max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5])\n\t\tif n == 7 : \n\t\t\treturn max(max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5]), A[6])\n\t\tif n == 8 : \n\t\t\treturn max(max(max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5]), A[6]), A[7])\n\t\tif n == 9 : \n\t\t\treturn max(max(max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5]), A[6]), A[7]), A[8])\n\t\tif n == 10 : \n\t\t\treturn max(max(max(max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5]), A[6]), A[7]), A[8]), A[9])\n\t\tif n == 11 : \n\t\t\treturn max(max(max(max(max(max(max(max(max(A[0], A[1]), A[2]), A[3]), A[4]), A[5]), A[6]), A[7]), A[8]), A[9]), A[10])\n\t\tif"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\t\"\"\"\n\t\t:param n: number of trials\n\t\t:param k: number of successes\n\t\t:param p: probability of success\n\t\t:return: probability of success\n\t\t\"\"\"\n\t\tif k == 0:\n\t\t\treturn 0\n\t\tif k == n:\n\t\t\treturn 1\n\t\tif k < n:\n\t\t\treturn binomial_probability(n, k-1, p) * (1-p) + binomial_probability(n, k, p) * p\n\t\telse:\n\t\t\treturn 0\n\n\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability_v2(n, k, p): \n\t\t\"\"\"\n\t\t:param n: number of trials\n\t\t:param k: number of successes\n\t\t:param p: probability of success\n\t\t:return: probability of success\n\t\t\"\"\"\n\t\tif k == 0:\n\t\t\treturn 0\n\t\tif k == n:\n\t\t\treturn 1\n\t\tif k < n:\n\t\t\treturn binomial_probability_v2(n, k-1, p) * (1-p) + binomial_probability_v2(n, k, p) * p\n\t\telse:\n\t\t\treturn 0\n\n\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability_v3(n, k, p): \n\t\t\"\"\"\n\t\t:param n: number of trials\n\t\t:param k: number of successes\n\t\t:param p: probability of success\n\t\t:return: probability of success\n\t\t\"\"\"\n\t\tif k == 0:\n\t\t\treturn 0\n\t\tif k == n:\n\t\t\treturn 1\n\t\tif k < n:\n\t\t\treturn binomial_probability_v3(n, k-1, p) * (1-p) + binomial_probability_v3(n, k, p) * p\n\t\telse:\n\t\t\treturn 0\n\n\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability_v4(n, k, p): \n\t\t\"\"\"\n\t\t:param n: number of trials\n\t\t:param k: number of successes\n\t\t:param p: probability of success\n\t\t:return: probability of success"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn sorted(tup, key=lambda x: x[-1])\n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple_reverse(tup): \n\t\treturn sorted(tup, key=lambda x: x[-1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple_first(tup): \n\t\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple_first_reverse(tup): \n\t\treturn sorted(tup, key=lambda x: x[0], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_second(tup): \n\t\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_second_reverse(tup): \n\t\treturn sorted(tup, key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third(tup): \n\t\treturn sorted(tup, key=lambda x: x[2])\n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third_reverse(tup): \n\t\treturn sorted(tup, key=lambda x: x[2], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth(tup): \n\t\treturn sorted(tup, key=lambda x: x[3])\n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth_reverse(tup): \n\t\treturn sorted(tup, key=lambda x: x[3],"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t\treturn a * (3/2)\n\nprint(area_pentagon(5))\n<|endoftext|>"}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t\t# Your code here\n\t\tfreq = {}\n\t\tfor i in arr:\n\t\t\tif i in freq:\n\t\t\t\tfreq[i] += 1\n\t\t\telse:\n\t\t\t\tfreq[i] = 1\n\t\treturn max(freq, key=freq.get)\n\nprint(frequency_Of_Largest(10,[1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\tsymmetric_pairs = []\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\t\tsymmetric_pairs.append((test_list[i], test_list[j]))\n\t\treturn symmetric_pairs\n\n\"\"\"\nWrite a function to extract all the pairs which are asymmetric in the given tuple list.\n\"\"\"\ndef extract_asymmetric(test_list):\n\t\tasymmetric_pairs = []\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i]!= test_list[j]:\n\t\t\t\t\tasymmetric_pairs.append((test_list[i], test_list[j]))\n\t\treturn asymmetric_pairs\n\n\"\"\"\nWrite a function to extract all the pairs which are anti-symmetric in the given tuple list.\n\"\"\"\ndef extract_anti_symmetric(test_list):\n\t\tanti_symmetric_pairs = []\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i]!= test_list[j] and test_list[i]!= test_list[j] and test_list[i]!= test_list[j]:\n\t\t\t\t\tanti_symmetric_pairs.append((test_list[i], test_list[j]))\n\t\treturn anti_symmetric_pairs\n\n\"\"\"\nWrite a function to extract all the pairs which are anti-asymmetric in the given tuple list.\n\"\"\"\ndef extract_anti_asymmetric(test_list):\n\t\tanti_asymmetric_pairs = []\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i]!= test_list[j] and test_list[i]!= test_list[j] and test_list[i] == test_list[j]:\n\t\t\t\t\tanti_asymmetric_pairs.append((test_list[i], test_list[j]))\n\t\treturn anti_asymmetric_pairs\n\n\"\"\"\nWrite a function to extract all the pairs"}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t\tif n==0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn a*sum_gp(a,n-1,r) + r*sum_gp(a,n-1,r*a)\n\nprint(sum_gp(1,10,1))\n<|endoftext|>"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t\tlow = 0\n\t\thigh = len(item_list) - 1\n\t\twhile low <= high:\n\t\t\tmid = (low + high) // 2\n\t\t\tif item_list[mid] == item:\n\t\t\t\treturn mid\n\t\t\telif item_list[mid] < item:\n\t\t\t\tlow = mid + 1\n\t\t\telse:\n\t\t\t\thigh = mid - 1\n\t\treturn -1\n\n\"\"\"\nWrite a function to find the index of the first occurrence of an element in a sorted array.\n\"\"\"\ndef find_first_occurrence(item_list,item):\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the index of the last occurrence of an element in a sorted array.\n\"\"\"\ndef find_last_occurrence(item_list,item):\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the index of the first occurrence of an element in a sorted array.\n\"\"\"\ndef find_first_occurrence_2(item_list,item):\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid\n\treturn -1\n\n\"\"\"\nWrite a function to find the index of the last occurrence of an element in a sorted array.\n\"\"\"\ndef find_last_occurrence_"}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t\t# calculate the number of hexagons\n\t\tnum_hexagons = int(math.ceil(math.sqrt(6 * radius * radius)))\n\t\t# create a list of lists of hexagon coordinates\n\t\thexagon_coords = []\n\t\t# iterate through the number of hexagons\n\t\tfor i in range(num_hexagons):\n\t\t\t# calculate the x and y coordinates of the hexagon\n\t\t\tx = startx + (endx - startx) / num_hexagons * i\n\t\t\ty = starty + (endy - starty) / num_hexagons * i\n\t\t\t# append the hexagon coordinates to the list\n\t\t\thexagon_coords.append([x, y])\n\t\t# return the list of hexagon coordinates\n\t\treturn hexagon_coords\n\n\"\"\"\nWrite a function to calculate the area of a hexagon.\n\"\"\"\ndef calculate_hexagon_area(radius):\n\t\t# calculate the area of the hexagon\n\t\tarea = 6 * radius * radius\n\t\t# return the area of the hexagon\n\t\treturn area\n\n\"\"\"\nWrite a function to calculate the perimeter of a hexagon.\n\"\"\"\ndef calculate_hexagon_perimeter(radius):\n\t\t# calculate the perimeter of the hexagon\n\t\tperimeter = 2 * radius\n\t\t# return the perimeter of the hexagon\n\t\treturn perimeter\n\n\"\"\"\nWrite a function to calculate the volume of a hexagon.\n\"\"\"\ndef calculate_hexagon_volume(radius):\n\t\t# calculate the volume of the hexagon\n\t\tvolume = 4 * math.pi * radius ** 3\n\t\t# return the volume of the hexagon\n\t\treturn volume\n\n\"\"\"\nWrite a function to calculate the surface area of a hexagon.\n\"\"\"\ndef calculate_hexagon_surface_area(radius):\n\t\t# calculate the surface area of the hexagon\n\t\tsurface_area = 6 * math.pi * radius ** 2\n\t\t# return the surface area of the hexagon\n\t\treturn surface_area\n\n\"\"\"\nWrite a function to calculate the surface perimeter of a hexagon.\n\"\"\"\ndef calculate_hexagon_surface_perimeter(radius):\n\t\t# calculate the surface perimeter of the hexagon\n\t\tsurface_perimeter = 2 * math.pi * radius\n\t"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t\treturn int(test_tup[0], 2)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary(test_int):\n\t\treturn bin(test_int)[2:]\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_2(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_3(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_4(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_5(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_6(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_7(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_8(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the given integer to binary tuple.\n\"\"\"\ndef integer_to_binary_tuple_9(test_int):\n\t\treturn bin(test_int)[2:].zfill(32)\n\n\"\"\"\nWrite a function to convert the"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t\treturn re.sub('[a-z]', '', str1)\n\nprint(remove_lowercase('Hello World'))\nprint(remove_lowercase('Hello World!'))\nprint(remove_lowercase('Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World! Hello World!'))\nprint(remove_lowercase('Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t\t\"\"\"\n\t\t:type nums: List[int]\n\t\t:type n: int\n\t\t:rtype: List[int]\n\t\t\"\"\"\n\t\theap = []\n\t\tfor i in range(n):\n\t\t\theap.append(nums[i])\n\t\t\theapify(heap)\n\t\tfor i in range(n-1,0,-1):\n\t\t\tnums[i],nums[0] = nums[0],nums[i]\n\t\t\theapify(heap)\n\t\treturn nums\n\ndef heapify(heap):\n\t\"\"\"\n\t:type heap: List[int]\n\t:rtype: None\n\t\"\"\"\n\tn = len(heap)\n\ti = n//2\n\twhile i>=0:\n\t\theapify_left(heap,i)\n\t\theapify_right(heap,i)\n\t\ti-=1\n\ndef heapify_left(heap,i):\n\t\"\"\"\n\t:type heap: List[int]\n\t:type i: int\n\t:rtype: None\n\t\"\"\"\n\tl = 2*i+1\n\tr = 2*i+2\n\tif l<len(heap) and heap[l]<heap[i]:\n\t\ti = l\n\tif r<len(heap) and heap[r]<heap[i]:\n\t\ti = r\n\tif i!=i:\n\t\theap[i],heap[i-1] = heap[i-1],heap[i]\n\t\theapify(heap)\n\ndef heapify_right(heap,i):\n\t\"\"\"\n\t:type heap: List[int]\n\t:type i: int\n\t:rtype: None\n\t\"\"\"\n\tl = 2*i+1\n\tr = 2*i+2\n\tif l<len(heap) and heap[l]<heap[i]:\n\t\ti = l\n\tif r<len(heap) and heap[r]<heap[i]:\n\t\ti = r\n\tif i!=i:\n\t\theap[i],heap[i+1] = heap[i+1],heap[i]\n\t\theapify(heap)\n\nif __name__ == '__main__':\n\tprint(heap_queue_smallest([1,2,3,4,5,6,7,8,9,"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 2*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn r*h*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*r*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4/3*pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4/3*pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_parallelepiped(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a parallelepiped.\n\"\"\"\ndef surfacearea_parallelepiped(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a trapezoid.\n\"\"\"\ndef volume_trapezoid(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a trapezoid.\n\"\"\"\ndef surfacearea_trapezoid(l,b,h):\n\t\treturn l*b*h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_par"}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t\tif y == 0:\n\t\t\treturn x\n\t\telse:\n\t\t\treturn gcd(y, x % y)\n\nprint(gcd(10, 20))\nprint(gcd(10, 0))\nprint(gcd(0, 10))\nprint(gcd(10, 10))\nprint(gcd(10, 100))\nprint(gcd(100, 10))\nprint(gcd(100, 100))\nprint(gcd(100, 1000))\nprint(gcd(1000, 100))\nprint(gcd(1000, 1000))\nprint(gcd(1000, 10000))\nprint(gcd(10000, 1000))\nprint(gcd(10000, 10000))\nprint(gcd(10000, 100000))\nprint(gcd(100000, 10000))\nprint(gcd(100000, 100000))\nprint(gcd(100000, 1000000))\nprint(gcd(1000000, 100000))\nprint(gcd(1000000, 1000000))\nprint(gcd(1000000, 10000000))\nprint(gcd(10000000, 10000000))\nprint(gcd(10000000, 100000000))\nprint(gcd(100000000, 1000000000))\nprint(gcd(1000000000, 10000000000))\nprint(gcd(10000000000, 100000000000))\nprint(gcd(100000000000, 1"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t\treturn 2*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\t\treturn r*r*3.14\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\t\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\t\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,b):\n\t\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\t\treturn (a*b)/2 + (a*c)/2 - (b*c)/2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t\treturn 3*(a+b+c)\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(l):\n\t\treturn l*l\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(l):\n\t\treturn 4*l\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(l):\n\t\treturn l*l*5/4\n\n\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(l):\n\t\treturn 5*l\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(l):\n\t\treturn l*l*6/5\n\n\"\"\"\nWrite a function to find the perimeter of a hexagon.\n\"\"\"\ndef perimeter_hexagon(l):\n\t\treturn 6*l\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(l):\n\t\treturn l*l*7/8\n\n\"\"\"\nWrite a function to find the perimeter"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t\treturn ''.join(list)\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tlongest_prefix = strs[0]\n\t\tfor i in range(1, len(strs)):\n\t\t\t\tif strs[i] == \"\":\n\t\t\t\t\t\treturn \"\"\n\t\t\t\tif len(longest_prefix) > len(strs[i]):\n\t\t\t\t\t\tlongest_prefix = strs[i]\n\t\treturn longest_prefix\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tlongest_suffix = strs[0]\n\t\tfor i in range(1, len(strs)):\n\t\t\t\tif strs[i] == \"\":\n\t\t\t\t\t\treturn \"\"\n\t\t\t\tif len(longest_suffix) < len(strs[i]):\n\t\t\t\t\t\tlongest_suffix = strs[i]\n\t\treturn longest_suffix\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst two strings.\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n\t\tif len(str1) == 0 or len(str2) == 0:\n\t\t\t\treturn \"\"\n\t\tif str1[0] == str2[0]:\n\t\t\t\treturn longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\t\telse:\n\t\t\t\treturn max(longest_common_subsequence(str1[1:], str2), longest_common_subsequence(str1, str2[1:]))\n\n\"\"\"\nWrite a function to find the longest common subsequence string amongst an array of strings.\n\"\"\"\ndef longest_common_subsequence_array(strs):\n\t\tif len(strs) == 0:\n\t\t\t\treturn \"\"\n\t\tif len(strs) == 1:\n\t\t\t\treturn strs[0]\n\t\tlongest_prefix = strs[0]\n\t\tfor i in range(1, len(strs)):\n\t\t\t\tif"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t\tif x == 0:\n\t\t\treturn y\n\t\telif y == 0:\n\t\t\treturn x\n\t\telse:\n\t\t\treturn num_comm_div(x%y,y)\n\nprint(num_comm_div(10,20))\nprint(num_comm_div(10,10))\nprint(num_comm_div(10,1))\nprint(num_comm_div(10,0))\nprint(num_comm_div(10,100))\nprint(num_comm_div(10,1000))\nprint(num_comm_div(10,10000))\nprint(num_comm_div(10,100000))\nprint(num_comm_div(10,1000000))\nprint(num_comm_div(10,10000000))\nprint(num_comm_div(10,100000000))\nprint(num_comm_div(10,1000000000))\nprint(num_comm_div(10,10000000000))\nprint(num_comm_div(10,100000000000))\nprint(num_comm_div(10,1000000000000))\nprint(num_comm_div(10,10000000000000))\nprint(num_comm_div(10,100000000000000))\nprint(num_comm_div(10,1000000000000000))\nprint(num_comm_div(10,10000000000000000))\nprint(num_comm_div(10,100000000000000000))\nprint(num_comm_div(10,1000000000000000000))\nprint("}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t\treturn n%m\n\nprint(find(10,5))\n<|endoftext|>"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t\t# Write your code here\n\t\tnums.sort()\n\t\tfor i in range(len(nums)-1):\n\t\t\tif nums[i+1] - nums[i] == 1:\n\t\t\t\tnums.pop(i)\n\t\t\t\tnums.pop(i)\n\t\t\t\tnums.append(nums[i]+1)\n\t\t\t\tnums.append(nums[i]+2)\n\t\t\t\tnums.append(nums[i]+3)\n\t\t\t\tnums.append(nums[i]+4)\n\t\t\t\tnums.append(nums[i]+5)\n\t\t\t\tnums.append(nums[i]+6)\n\t\t\t\tnums.append(nums[i]+7)\n\t\t\t\tnums.append(nums[i]+8)\n\t\t\t\tnums.append(nums[i]+9)\n\t\t\t\tnums.append(nums[i]+10)\n\t\t\t\tnums.append(nums[i]+11)\n\t\t\t\tnums.append(nums[i]+12)\n\t\t\t\tnums.append(nums[i]+13)\n\t\t\t\tnums.append(nums[i]+14)\n\t\t\t\tnums.append(nums[i]+15)\n\t\t\t\tnums.append(nums[i]+16)\n\t\t\t\tnums.append(nums[i]+17)\n\t\t\t\tnums.append(nums[i]+18)\n\t\t\t\tnums.append(nums[i]+19)\n\t\t\t\tnums.append(nums[i]+20)\n\t\t\t\tnums.append(nums[i]+21)\n\t\t\t\tnums.append(nums[i]+22)\n\t\t\t\tnums.append(nums[i]+23)\n\t\t\t\tnums.append(nums[i]+24)\n\t\t\t\tnums.append(nums[i]+25)\n\t\t\t\tnums.append(nums[i]+26)\n\t\t\t\tnums.append(nums[i]+27)\n\t\t\t\tnums.append(nums[i]+28)\n\t\t\t\tnums.append(nums[i]+29)\n\t\t\t\tnums.append(nums[i]+30)\n\t\t\t\tnums.append(nums[i]+31)\n\t\t\t\tnums.append(nums[i]+32)\n\t\t\t\tnums.append(nums[i]+33)\n\t\t\t\tnums.append(nums[i]+34)\n\t\t\t\tnums.append(nums[i]+35)\n\t\t\t\tnums.append(nums"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1):\n\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_Of_Series(5))\n<|endoftext|>"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\tfor i in range(len(A)):\n\t\t\tif A[i] == 0:\n\t\t\t\tA.append(A.pop(i))\n\t\treturn A\n\nA = [0, 1, 0, 3, 12]\nprint(re_order(A))\n<|endoftext|>"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type k: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 1\n\t\tif k == 0:\n\t\t\treturn 1\n\t\tif k == 1:\n\t\t\treturn n\n\t\tif k == 2:\n\t\t\treturn n * (n - 1) / 2\n\t\tif k == 3:\n\t\t\treturn n * (n - 1) * (n - 2) / 6\n\t\tif k == 4:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) / 24\n\t\tif k == 5:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n\t\tif k == 6:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n\t\tif k == 7:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) / 5040\n\t\tif k == 8:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 40320\n\t\tif k == 9:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) / 362880\n\t\tif k == 10:\n\t\t\treturn n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - "}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor word in removewords:\n\t\t\tlist1.remove(word)\n\t\treturn list1\n\n#print(remove_words([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\"]))\n\n\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t\tfor"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t\tif len(l1)!= len(l2):\n\t\t\treturn False\n\t\tfor i in range(len(l1)):\n\t\t\tif l1[i]!= l2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given list is a permutation of another list.\n\"\"\"\ndef is_permutation(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[i]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given list is a permutation of another list.\n\"\"\"\ndef is_permutation_2(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[l2.index(l1[i])]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given list is a permutation of another list.\n\"\"\"\ndef is_permutation_3(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[l2.index(l1[i])]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given list is a permutation of another list.\n\"\"\"\ndef is_permutation_4(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[l2.index(l1[i])]:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given list is a permutation of another list.\n\"\"\"\ndef is_permutation_5(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[l2.index(l"}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tif i % 2!= 0 : \n\t\t\t\tsum += i\n\t\treturn sum/2\n\nprint(average_Odd(10))\n<|endoftext|>"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t\t# Write your code here\n\t\tn = len(arr)\n\t\tdp = [[0 for i in range(n)] for j in range(n)]\n\t\tfor i in range(n):\n\t\t\tdp[i][i] = 1\n\t\tfor i in range(n-1):\n\t\t\tfor j in range(i+1, n):\n\t\t\t\tdp[i][j] = dp[i+1][j] + dp[i][j-1]\n\t\t\t\tif arr[i]*arr[j] < k:\n\t\t\t\t\tdp[i][j] = 0\n\t\treturn dp[0][n-1]\n\nprint(no_of_subsequences([1,2,3,4,5,6,7,8,9,10], 10))\n<|endoftext|>"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t\t# Your code here\n\t\tsum = 0\n\t\tfor i in range(1,num+1):\n\t\t\tif num%i == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(find_Min_Sum(100))\n<|endoftext|>"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t\tcount = {}\n\t\tfor element in test_tuple:\n\t\t\tif element in count:\n\t\t\t\tcount[element] += 1\n\t\t\telse:\n\t\t\t\tcount[element] = 1\n\t\treturn count\n\nprint(count_element_freq((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n<|endoftext|>"}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t\treturn [test_tup[0] + K + str(i) for i in test_tup[1:]]\n\nprint(add_str((1, 2, 3), \"abc\"))\n<|endoftext|>"}
{"ID": 877, "source": "MBPP:514", "prompt": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t\treturn sum(test_tup)\n\nprint(sum_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the product of tuple elements in the given tuple list.\n\"\"\"\ndef product_elements(test_tup):\n\t\treturn prod(test_tup)\n\nprint(product_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the difference of tuple elements in the given tuple list.\n\"\"\"\ndef difference_elements(test_tup):\n\t\treturn diff(test_tup)\n\nprint(difference_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the quotient of tuple elements in the given tuple list.\n\"\"\"\ndef quotient_elements(test_tup):\n\t\treturn quot(test_tup)\n\nprint(quotient_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the remainder of tuple elements in the given tuple list.\n\"\"\"\ndef remainder_elements(test_tup):\n\t\treturn rem(test_tup)\n\nprint(remainder_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the power of tuple elements in the given tuple list.\n\"\"\"\ndef power_elements(test_tup):\n\t\treturn pow(test_tup)\n\nprint(power_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the factorial of tuple elements in the given tuple list.\n\"\"\"\ndef factorial_elements(test_tup):\n\t\treturn fact(test_tup)\n\nprint(factorial_elements((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the sum of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements_2(test_tup):\n\t\treturn sum(test_tup)\n\nprint(sum_elements_2((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to find the product of tuple elements in the given tuple list.\n\"\"\"\ndef product_elements_2(test_tup):\n\t\treturn prod(test_tup)\n\nprint(product_elements_2((1,2,3,4,5)))\n\n\"\"\""}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\t# Write your code here\n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tsum += arr[i]\n\t\tif sum % m == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 3))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 15))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 100))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 1000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 10000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 100000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 1000000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 10000000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 100000000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 1000000000))\nprint(modular_sum([1,2,3,4,5,6,7,8,9,10], 10, 10000000000))\nprint(modular_sum([1,2,3,4,5,6,7"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t\t# Create a dictionary to store the frequency of each digit\n\t\td = {}\n\t\tfor i in nums:\n\t\t\tif i not in d:\n\t\t\t\td[i] = 1\n\t\t\telse:\n\t\t\t\td[i] += 1\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = []\n\n\t\t# Create a list to store the sorted elements\n\t\tsorted_list_rev_rev_rev_rev"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t\tmax_pos = 0\n\t\tfor i in list1:\n\t\t\tif i > 0:\n\t\t\t\tmax_pos = i\n\t\treturn max_pos\n\nprint(largest_pos([1, 2, 3, 4, 5]))\nprint(largest_pos([-1, -2, -3, -4, -5]))\nprint(largest_pos([1, 2, 3, 4, 5, 6]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(largest"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t\tif num == 0:\n\t\t\treturn 0\n\t\telif num == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\tfor i in range(2, num):\n\t\t\t\tif num % i == 0:\n\t\t\t\t\treturn i\n\t\t\treturn num\n\nprint(sqrt_root(100))\n<|endoftext|>"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t\treturn num * (num + 1) * (num + 2) / 6\n\n\"\"\"\nWrite a function to calculate volume of a cube.\n\"\"\"\ndef volume_cube(num):\n\t\treturn num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a sphere.\n\"\"\"\ndef volume_sphere(num):\n\t\treturn 4 / 3 * math.pi * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a cylinder.\n\"\"\"\ndef volume_cylinder(num):\n\t\treturn 4 / 3 * math.pi * num * num\n\n\"\"\"\nWrite a function to calculate volume of a cone.\n\"\"\"\ndef volume_cone(num):\n\t\treturn 4 / 3 * math.pi * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a torus.\n\"\"\"\ndef volume_torus(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hyperboloid.\n\"\"\"\ndef volume_hyperboloid(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hypersphere.\n\"\"\"\ndef volume_hypersphere(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hypercube.\n\"\"\"\ndef volume_hypercube(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hypersphere.\n\"\"\"\ndef volume_hypersphere(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hypercube.\n\"\"\"\ndef volume_hypercube(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a hypersphere.\n\"\"\"\ndef volume_hypersphere(num):\n\t\treturn 4 / 3 * math.pi * num * num * num * num\n\n\"\"\"\nWrite a function to calculate volume of a"}
{"ID": 883, "source": "MBPP:520", "prompt": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t", "predict": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t\tif len(l) == 0:\n\t\t\treturn 0\n\t\tif len(l) == 1:\n\t\t\treturn l[0]\n\t\tif len(l) == 2:\n\t\t\treturn l[0] * l[1]\n\t\tif len(l) == 3:\n\t\t\treturn l[0] * l[1] * l[2]\n\t\tif len(l) == 4:\n\t\t\treturn l[0] * l[1] * l[2] * l[3]\n\t\tif len(l) == 5:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4]\n\t\tif len(l) == 6:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5]\n\t\tif len(l) == 7:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5] * l[6]\n\t\tif len(l) == 8:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5] * l[6] * l[7]\n\t\tif len(l) == 9:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5] * l[6] * l[7] * l[8]\n\t\tif len(l) == 10:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5] * l[6] * l[7] * l[8] * l[9]\n\t\tif len(l) == 11:\n\t\t\treturn l[0] * l[1] * l[2] * l[3] * l[4] * l[5] * l[6] * l[7] * l[8] * l[9] * l[10]\n\t\tif len(l) == 12:\n\t\t\treturn l[0] * l"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\tif x+y > z and x+z > y and y+z > x:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_isosceles(1,2,3))\nprint(check_isosceles(1,2,4))\nprint(check_isosceles(1,2,5))\nprint(check_isosceles(1,2,6))\nprint(check_isosceles(1,2,7))\nprint(check_isosceles(1,2,8))\nprint(check_isosceles(1,2,9))\nprint(check_isosceles(1,2,10))\nprint(check_isosceles(1,2,11))\nprint(check_isosceles(1,2,12))\nprint(check_isosceles(1,2,13))\nprint(check_isosceles(1,2,14))\nprint(check_isosceles(1,2,15))\nprint(check_isosceles(1,2,16))\nprint(check_isosceles(1,2,17))\nprint(check_isosceles(1,2,18))\nprint(check_isosceles(1,2,19))\nprint(check_isosceles(1,2,20))\nprint(check_isosceles(1,2,21))\nprint(check_isosceles(1,2,22))\nprint(check_isosceles(1,2,23))\nprint(check_isosceles(1,2,24))\nprint(check_isosceles(1,2,25))\nprint(check_isosceles(1,2,26))\nprint(check_isosceles(1,2,27))\nprint(check_isosceles(1,2,28))\nprint(check_isosceles(1,2,29))\nprint(check_isosceles(1,2,30))\nprint(check_isosceles(1,2,31))\nprint(check_isosceles(1,2,32))\nprint(check_isos"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t\t# Write your code here\n\t\tif len(arr) == 0:\n\t\t\treturn 0\n\t\tif len(arr) == 1:\n\t\t\treturn 1\n\t\tif len(arr) == 2:\n\t\t\treturn 2\n\t\tif len(arr) == 3:\n\t\t\treturn 3\n\t\tif len(arr) == 4:\n\t\t\treturn 4\n\t\tif len(arr) == 5:\n\t\t\treturn 5\n\t\tif len(arr) == 6:\n\t\t\treturn 6\n\t\tif len(arr) == 7:\n\t\t\treturn 7\n\t\tif len(arr) == 8:\n\t\t\treturn 8\n\t\tif len(arr) == 9:\n\t\t\treturn 9\n\t\tif len(arr) == 10:\n\t\t\treturn 10\n\t\tif len(arr) == 11:\n\t\t\treturn 11\n\t\tif len(arr) == 12:\n\t\t\treturn 12\n\t\tif len(arr) == 13:\n\t\t\treturn 13\n\t\tif len(arr) == 14:\n\t\t\treturn 14\n\t\tif len(arr) == 15:\n\t\t\treturn 15\n\t\tif len(arr) == 16:\n\t\t\treturn 16\n\t\tif len(arr) == 17:\n\t\t\treturn 17\n\t\tif len(arr) == 18:\n\t\t\treturn 18\n\t\tif len(arr) == 19:\n\t\t\treturn 19\n\t\tif len(arr) == 20:\n\t\t\treturn 20\n\t\tif len(arr) == 21:\n\t\t\treturn 21\n\t\tif len(arr) == 22:\n\t\t\treturn 22\n\t\tif len(arr) == 23:\n\t\t\treturn 23\n\t\tif len(arr) == 24:\n\t\t\treturn 24\n\t\tif len(arr) == 25:\n\t\t\treturn 25\n\t\tif len(arr) == 26:\n\t\t\treturn 26\n\t\tif len(arr) == 27:\n\t\t\treturn 27\n\t\tif len(arr) == 28:\n\t\t\treturn 28\n\t\tif len"}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t\tif str1.isupper():\n\t\t\treturn True\n\t\telif str1.islower():\n\t\t\treturn True\n\t\telif str1.isdigit():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check_string(\"hello\"))\nprint(check_string(\"Hello\"))\nprint(check_string(\"hello1\"))\nprint(check_string(\"hello123\"))\nprint(check_string(\"hello1234\"))\nprint(check_string(\"hello12345\"))\nprint(check_string(\"hello123456\"))\nprint(check_string(\"hello1234567\"))\nprint(check_string(\"hello12345678\"))\nprint(check_string(\"hello123456789\"))\nprint(check_string(\"hello1234567890\"))\nprint(check_string(\"hello12345678901\"))\nprint(check_string(\"hello123456789012\"))\nprint(check_string(\"hello1234567890123\"))\nprint(check_string(\"hello12345678901234\"))\nprint(check_string(\"hello123456789012345\"))\nprint(check_string(\"hello1234567890123456\"))\nprint(check_string(\"hello12345678901234567\"))\nprint(check_string(\"hello123456789012345678\"))\nprint(check_string(\"hello1234567890123456789\"))\nprint(check_string(\"hello12345678901234567890\"))\nprint(check_string(\"hello123456789012345678901\"))\nprint(check_string(\"hello1234567890123456789012\"))\nprint(check_string(\"hello"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn 0\n\t\telif n == 1:\n\t\t\treturn arr[0]\n\t\telse:\n\t\t\tmax_sum = arr[0]\n\t\t\tfor i in range(1, n):\n\t\t\t\tmax_sum = max(max_sum, arr[i] + max_sum_increasing_subsequence(arr[i+1:], n-1))\n\t\t\treturn max_sum\n\nprint(max_sum_increasing_subsequence([1, 3, 5, 4, 7, 2, 6, 8, 9, 10], 10))\n<|endoftext|>"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\tif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether two given lines are perpendicular or not.\n\"\"\"\ndef perpendicular_lines(line1, line2):\n\t\tif line1[0] == line2[1] and line1[1] == line2[0]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether two given lines are collinear or not.\n\"\"\"\ndef collinear_lines(line1, line2):\n\t\tif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telif line1[0] == line2[1] and line1[1] == line2[0]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether two given lines are intersecting or not.\n\"\"\"\ndef intersecting_lines(line1, line2):\n\t\tif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telif line1[0] == line2[1] and line1[1] == line2[0]:\n\t\t\treturn True\n\t\telif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telif line1[0] == line2[1] and line1[1] == line2[0]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether two given lines are intersecting or not.\n\"\"\"\ndef intersecting_lines_2(line1, line2):\n\t\tif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telif line1[0] == line2[1] and line1[1] == line2[0]:\n\t\t\treturn True\n\t\telif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\t\treturn True\n\t\telif line1[0] =="}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t\tstr1 = str1.split()\n\t\tfor i in range(len(str1)):\n\t\t\tstr1[i] = str1[i][0].upper() + str1[i][1:]\n\t\treturn \" \".join(str1)\n\nprint(capitalize_first_last_letters(\"Hello World\"))\nprint(capitalize_first_last_letters(\"Hello World!\"))\nprint(capitalize_first_last_letters(\"Hello World! Hello World!\"))\nprint(capitalize_first_last_letters(\"Hello World! Hello World! Hello World!\"))\nprint(capitalize_first_last_letters(\"Hello World! Hello World! Hello World! Hello World!\"))\nprint(capitalize_first_last_letters(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!\"))\nprint(capitalize_first_last_letters(\"Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t\tpairs = 0\n\t\tfor i in range(len(arr)):\n\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\t\tpairs += 1\n\t\treturn pairs\n\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 15))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 16))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 17))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 18))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 19))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 20))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 21))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 22))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 23))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 24))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 25))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 26))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 27))\nprint(get_pairs_count([1, 2, 3, 4, 5], 10, 28))\nprint(get_pairs_count([1, 2, 3, 4, "}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t\tmin_length = 0\n\t\tmin_list = []\n\t\tfor i in range(len(list1)):\n\t\t\tif len(list1[i]) < min_length:\n\t\t\t\tmin_length = len(list1[i])\n\t\t\t\tmin_list = list1[i]\n\t\treturn min_list\n\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,8,9]]))\nprint(min_length([[1,2,3],[4,5,6],[7,"}
{"ID": 892, "source": "MBPP:529", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\t\"\"\"\n\t\t:param n: the number of the jacobsthal-lucas number\n\t\t:return: the nth jacobsthal-lucas number\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn (n * jacobsthal_lucas(n-1)) + 1\n\nprint(jacobsthal_lucas(10))\n<|endoftext|>"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t\tcount = 0\n\t\tfor i in nums:\n\t\t\tif i < 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(negative_count([-1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t\t# Write your code here.\n\t\tcoins.sort()\n\t\tcoins.reverse()\n\t\tcoins_count = 0\n\t\tfor i in range(len(coins)):\n\t\t\tif V >= coins[i]:\n\t\t\t\tcoins_count += 1\n\t\t\t\tV -= coins[i]\n\t\treturn coins_count\n\nprint(min_coins([1, 2, 5], 10, 15))\nprint(min_coins([1, 2, 5], 10, 10))\nprint(min_coins([1, 2, 5], 10, 11))\nprint(min_coins([1, 2, 5], 10, 12))\nprint(min_coins([1, 2, 5], 10, 13))\nprint(min_coins([1, 2, 5], 10, 14))\nprint(min_coins([1, 2, 5], 10, 15))\nprint(min_coins([1, 2, 5], 10, 16))\nprint(min_coins([1, 2, 5], 10, 17))\nprint(min_coins([1, 2, 5], 10, 18))\nprint(min_coins([1, 2, 5], 10, 19))\nprint(min_coins([1, 2, 5], 10, 20))\nprint(min_coins([1, 2, 5], 10, 21))\nprint(min_coins([1, 2, 5], 10, 22))\nprint(min_coins([1, 2, 5], 10, 23))\nprint(min_coins([1, 2, 5], 10, 24))\nprint(min_coins([1, 2, 5], 10, 25))\nprint(min_coins([1, 2, 5], 10, 26))\nprint(min_coins([1, 2, 5], 10, 27))\nprint(min_"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn str1 == str2[::-1]\n\nprint(check_permutation('abc', 'acb'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bacb'))\nprint(check_permutation('abc', 'baca'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc', 'bac'))\nprint(check_permutation('abc',"}
{"ID": 896, "source": "MBPP:533", "prompt": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t", "predict": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t\tif data_type == 'int':\n\t\t\treturn tuple([int(x) for x in test_tuple])\n\t\telif data_type == 'float':\n\t\t\treturn tuple([float(x) for x in test_tuple])\n\t\telif data_type =='str':\n\t\t\treturn tuple([str(x) for x in test_tuple])\n\t\telif data_type == 'bool':\n\t\t\treturn tuple([bool(x) for x in test_tuple])\n\t\telse:\n\t\t\treturn test_tuple\n\n\"\"\"\nWrite a function to remove particular data type elements from the given list.\n\"\"\"\ndef remove_datatype(test_list, data_type):\n\t\tif data_type == 'int':\n\t\t\treturn [int(x) for x in test_list]\n\t\telif data_type == 'float':\n\t\t\treturn [float(x) for x in test_list]\n\t\telif data_type =='str':\n\t\t\treturn [str(x) for x in test_list]\n\t\telif data_type == 'bool':\n\t\t\treturn [bool(x) for x in test_list]\n\t\telse:\n\t\t\treturn test_list\n\n\"\"\"\nWrite a function to remove particular data type elements from the given dictionary.\n\"\"\"\ndef remove_datatype(test_dict, data_type):\n\t\tif data_type == 'int':\n\t\t\treturn {key:int(value) for key, value in test_dict.items()}\n\t\telif data_type == 'float':\n\t\t\treturn {key:float(value) for key, value in test_dict.items()}\n\t\telif data_type =='str':\n\t\t\treturn {key:str(value) for key, value in test_dict.items()}\n\t\telif data_type == 'bool':\n\t\t\treturn {key:bool(value) for key, value in test_dict.items()}\n\t\telse:\n\t\t\treturn test_dict\n\n\"\"\"\nWrite a function to remove particular data type elements from the given set.\n\"\"\"\ndef remove_datatype(test_set, data_type):\n\t\tif data_type == 'int':\n\t\t\treturn set([int(x) for x in test_set])\n\t\telif data_type == 'float':\n\t\t\treturn set([float(x) for x in test_set])\n\t"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\tpattern_len = len(pattern)\n\t\ttext_len = len(text)\n\t\tif pattern_len > text_len:\n\t\t\treturn -1\n\t\telse:\n\t\t\tfor i in range(text_len-pattern_len+1):\n\t\t\t\tif text[i:i+pattern_len] == pattern:\n\t\t\t\t\treturn i\n\t\t\treturn -1\n\ndef main():\n\tpattern = input(\"Enter the pattern: \")\n\ttext = input(\"Enter the text: \")\n\tprint(\"The location of the pattern is: \",search_literal(pattern,text))\n\nif __name__ == \"__main__\":\n\tmain()<|endoftext|>"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t\treturn 2*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r):\n\t\treturn 3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef conesurfacearea(h,r):\n\t\treturn 2*3.14*h*r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef conevolume(h,r):\n\t\treturn 3.14*h*r**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef spheresurfacearea(r):\n\t\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef spherevolume(r):\n\t\treturn 4*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef cubesurfacearea(r):\n\t\treturn 6*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef cubevolume(r):\n\t\treturn 6*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a parallelepiped.\n\"\"\"\ndef parallelepipedsurfacearea(r):\n\t\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef parallelepipedvolume(r):\n\t\treturn 4*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef pyramidsurfacearea(r):\n\t\treturn 5*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef pyramidvolume(r):\n\t\treturn 5*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a trapezoid.\n\"\"\"\ndef trapezoidsurfacearea(r):\n\t\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5],2))\nprint(nth_items([1,2,3,4,5],3))\nprint(nth_items([1,2,3,4,5],4))\nprint(nth_items([1,2,3,4,5],5))\nprint(nth_items([1,2,3,4,5],6))\nprint(nth_items([1,2,3,4,5],7))\nprint(nth_items([1,2,3,4,5],8))\nprint(nth_items([1,2,3,4,5],9))\nprint(nth_items([1,2,3,4,5],10))\nprint(nth_items([1,2,3,4,5],11))\nprint(nth_items([1,2,3,4,5],12))\nprint(nth_items([1,2,3,4,5],13))\nprint(nth_items([1,2,3,4,5],14))\nprint(nth_items([1,2,3,4,5],15))\nprint(nth_items([1,2,3,4,5],16))\nprint(nth_items([1,2,3,4,5],17))\nprint(nth_items([1,2,3,4,5],18))\nprint(nth_items([1,2,3,4,5],19))\nprint(nth_items([1,2,3,4,5],20))\nprint(nth_items([1,2,3,4,5],21))\nprint(nth_items([1,2,3,4,5],22))\nprint(nth_items([1,2,3,4,5],23))\nprint(nth_items([1,2,3,4,5],24))\nprint(nth_items([1,2,3,4,5],25))\nprint(nth_items([1,2,3,4,5],26))\nprint(nth_items([1,2,"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t\t# Your code here\n\t\tstr1 = str1.split()\n\t\tfor i in range(len(str1)):\n\t\t\tfor j in range(i+1,len(str1)):\n\t\t\t\tif str1[i] == str1[j]:\n\t\t\t\t\treturn str1[i]\n\t\treturn \"None\"\n\nprint(first_repeated_word(\"This is a test\"))\nprint(first_repeated_word(\"This is a test this is a test\"))\nprint(first_repeated_word(\"This is a test this is a test this is a test\"))\nprint(first_repeated_word(\"This is a test this is a test this is a test this is a test\"))\nprint(first_repeated_word(\"This is a test this is a test this is a test this is a test this is a test\"))\nprint(first_repeated_word(\"This is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t\treturn tuple(str1)\n\n\"\"\"\nWrite a python function to convert a given string list to a list.\n\"\"\"\ndef string_list_to_list(str1):\n\t\treturn list(str1)\n\n\"\"\"\nWrite a python function to convert a given string list to a set.\n\"\"\"\ndef string_list_to_set(str1):\n\t\treturn set(str1)\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict(str1):\n\t\treturn dict(str1)\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict_with_key(str1, key):\n\t\treturn dict(zip(str1, key))\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict_with_value(str1, value):\n\t\treturn dict(zip(str1, value))\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict_with_key_and_value(str1, key, value):\n\t\treturn dict(zip(str1, key, value))\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict_with_key_and_value_and_key_value(str1, key, value, key_value):\n\t\treturn dict(zip(str1, key, value, key_value))\n\n\"\"\"\nWrite a python function to convert a given string list to a dictionary.\n\"\"\"\ndef string_list_to_dict_with_key_and_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_key_value_and_"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t\treturn [pow(i,j) for i in bases_num for j in range(index)]\n\nprint(basesnum_coresspondingnum([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum_2(bases_num,index):\n\t\treturn [pow(i,j) for i in bases_num for j in range(index)]\n\nprint(basesnum_coresspondingnum_2([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum_3(bases_num,index):\n\t\treturn [pow(i,j) for i in bases_num for j in range(index)]\n\nprint(basesnum_coresspondingnum_3([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum_4(bases_num,index):\n\t\treturn [pow(i,j) for i in bases_num for j in range(index)]\n\nprint(basesnum_coresspondingnum_4([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum_5(bases_num,index):\n\t\treturn [pow(i,j) for i in bases_num for j in range(index)]\n\nprint(basesnum_coresspondingnum_5([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum_6(bases_num,index):\n\t\treturn [pow"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t\t# Find the highest frequency\n\t\thighest = max(arr)\n\t\t# Find the lowest frequency\n\t\tlowest = min(arr)\n\t\t# Find the difference between highest and lowest frequency\n\t\tdiff = highest - lowest\n\t\t# Find the difference between highest and lowest frequency\n\t\treturn diff\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(find_Diff(arr,n))\n<|endoftext|>"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t\tif n < 2: \n\t\t\treturn False\n\t\tfor i in range(2, n): \n\t\t\tif n % i == 0: \n\t\t\t\treturn False\n\t\treturn True\n\nprint(check_abundant(10))\nprint(check_abundant(12))\nprint(check_abundant(15))\nprint(check_abundant(16))\nprint(check_abundant(18))\nprint(check_abundant(20))\nprint(check_abundant(22))\nprint(check_abundant(24))\nprint(check_abundant(26))\nprint(check_abundant(28))\nprint(check_abundant(30))\nprint(check_abundant(32))\nprint(check_abundant(34))\nprint(check_abundant(36))\nprint(check_abundant(38))\nprint(check_abundant(40))\nprint(check_abundant(42))\nprint(check_abundant(44))\nprint(check_abundant(46))\nprint(check_abundant(48))\nprint(check_abundant(50))\nprint(check_abundant(52))\nprint(check_abundant(54))\nprint(check_abundant(56))\nprint(check_abundant(58))\nprint(check_abundant(60))\nprint(check_abundant(62))\nprint(check_abundant(64))\nprint(check_abundant(66))\nprint(check_abundant(68))\nprint(check_abundant(70))\nprint(check_abundant(72))\nprint(check_abundant(74))\nprint(check_abundant(76))\nprint(check_abundant(78))\nprint(check_abundant(80))\nprint(check_abundant(82))\nprint(check_abundant(84))\nprint(check_abundant(86))\nprint(check_abundant(88))\nprint(check_abundant(90))\nprint(check_abundant(92))\nprint(check_abundant(9"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t\treturn re.sub(r'\\s+', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of commas with a colon in the given string by using regex.\n\"\"\"\ndef fill_commas(text):\n\t\treturn re.sub(r',+', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_dots(text):\n\t\treturn re.sub(r'\\.', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_all(text):\n\t\treturn re.sub(r'\\s+', ':', text) + re.sub(r',+', ':', text) + re.sub(r'\\.', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of commas with a colon in the given string by using regex.\n\"\"\"\ndef fill_all_commas(text):\n\t\treturn re.sub(r',+', ':', text) + re.sub(r',+', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_all_dots(text):\n\t\treturn re.sub(r'\\.', ':', text) + re.sub(r'\\.', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_all_spaces(text):\n\t\treturn re.sub(r'\\s+', ':', text) + re.sub(r'\\s+', ':', text) + re.sub(r'\\s+', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of commas with a colon in the given string by using regex.\n\"\"\"\ndef fill_all_commas_spaces(text):\n\t\treturn re.sub(r',+', ':', text) + re.sub(r',+', ':', text) + re.sub(r'\\s+', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_all_dots_spaces(text):\n\t\treturn re.sub(r'\\.', ':', text) + re."}
{"ID": 906, "source": "MBPP:543", "prompt": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t", "predict": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t\treturn len(str(num1+num2))\n\nprint(count_digits(10,20))\n<|endoftext|>"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_tuple((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to flatten the list list to a string.\n\"\"\"\ndef flatten_list(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to flatten the dictionary to a string.\n\"\"\"\ndef flatten_dict(test_dict):\n\t\treturn ''.join(test_dict.values())\n\nprint(flatten_dict({'a':1, 'b':2, 'c':3}))\n\n\"\"\"\nWrite a function to flatten the list of lists to a string.\n\"\"\"\ndef flatten_list_of_lists(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list_of_lists([[1,2,3], [4,5,6]]))\n\n\"\"\"\nWrite a function to flatten the list of tuples to a string.\n\"\"\"\ndef flatten_list_of_tuples(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list_of_tuples([(1,2,3), (4,5,6)]))\n\n\"\"\"\nWrite a function to flatten the list of dictionaries to a string.\n\"\"\"\ndef flatten_list_of_dicts(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list_of_dicts([{'a':1, 'b':2, 'c':3}, {'d':4, 'e':5, 'f':6}]))\n\n\"\"\"\nWrite a function to flatten the list of tuples of dictionaries to a string.\n\"\"\"\ndef flatten_list_of_tuples_of_dicts(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list_of_tuples_of_dicts([(1,2,3), (4,5,6)]))\n\n\"\"\"\nWrite a function to flatten the list of tuples of lists to a string.\n\"\"\"\ndef flatten_list_of_tuples_of_lists(test_list):\n\t\treturn ''.join(test_list)\n\nprint(flatten_list_of_tuples_of_lists([(1,2"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\treturn n ^ (n >> 1) ^ (n >> 2) ^ (n >> 4)\n\nprint(toggle_F_and_L_bits(10))\n<|endoftext|>"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t\treturn string.rfind(char)\n\nprint(last_occurence_char(\"Hello World\", \"o\"))\nprint(last_occurence_char(\"Hello World\", \"l\"))\nprint(last_occurence_char(\"Hello World\", \"d\"))\nprint(last_occurence_char(\"Hello World\", \"e\"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last_occurence_char(\"Hello World\", \" \"))\nprint(last"}
{"ID": 910, "source": "MBPP:547", "prompt": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t\t# Your code here\n\t\tsum = 0\n\t\tfor i in range(n):\n\t\t\tsum += hamming_distance(i,n)\n\t\treturn sum\n\ndef hamming_distance(x,y):\n\treturn bin(x^y).count('1')\n\nprint(Total_Hamming_Distance(1000000))<|endoftext|>"}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t\t# Write your code here\n\t\tif len(arr) == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\tmax_len = 1\n\t\t\tfor i in range(len(arr)):\n\t\t\t\tfor j in range(i+1, len(arr)):\n\t\t\t\t\tif arr[i] < arr[j]:\n\t\t\t\t\t\tmax_len = max(max_len, 1 + longest_increasing_subsequence(arr[i+1:j]))\n\t\t\treturn max_len\n\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\n<|endoftext|>"}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t\tsum = 0\n\t\tfor i in range(1,n+1) : \n\t\t\tsum += i**5\n\t\treturn sum\n\nprint(odd_Num_Sum(10))\n<|endoftext|>"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t\tif low > high: \n\t\t\treturn -1 \n\t\tmid = (low + high) // 2 \n\t\tif arr[mid] > arr[high]: \n\t\t\treturn find_Max(arr,low,mid-1) \n\t\telif arr[mid] < arr[high]: \n\t\t\treturn find_Max(arr,mid+1,high) \n\t\telse: \n\t\t\treturn mid \n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(find_Max(arr,0,len(arr)-1))\n<|endoftext|>"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_2(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_3(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_4(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_5(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_6(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_7(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_8(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_9(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_10(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_11(list1, n):\n\t\treturn [item[n] for item in list1]\n\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column_1"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(len(seq_nums)-1):\n\t\t\t\tif seq_nums[i] > seq_nums[i+1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check whether a given sequence is circular or not.\n\"\"\"\ndef Seq_Circular(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(len(seq_nums)-1):\n\t\t\t\tif seq_nums[i] < seq_nums[i+1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check whether a given sequence is a palindrome or not.\n\"\"\"\ndef Seq_Palindrome(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tseq_nums = list(seq_nums)\n\t\t\tseq_nums.sort()\n\t\t\tfor i in range(len(seq_nums)//2):\n\t\t\t\tif seq_nums[i]!= seq_nums[-i-1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check whether a given sequence is a palindrome or not.\n\"\"\"\ndef Seq_Reverse(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tseq_nums = list(seq_nums)\n\t\t\tseq_nums.reverse()\n\t\t\tfor i in range(len(seq_nums)//2):\n\t\t\t\tif seq_nums[i]!= seq_nums[-i-1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check whether a given sequence is a palindrome or not.\n\"\"\"\ndef Seq_Reverse_Iterative(seq_nums):\n\t\tif len(seq_nums) == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tseq_nums = list(seq_nums)\n\t\t\tseq_nums.reverse()\n\t\t\tfor i in range(len(seq_nums)//2):\n\t\t\t\tif seq_nums[i]!= seq_nums[-i-1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to check"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_2(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_3(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_4(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_5(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_6(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_7(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_8(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_9(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup[1])\n\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float_10(test_tup):\n\t\treturn float(test_tup[0]) + float(test_tup"}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\treturn [int(i) for i in list.split(',')]\n\ndef Odd(list): \n\t\treturn [i for i in list if i % 2!= 0]\n\ndef main(): \n\tlist = input(\"Enter a list of numbers separated by commas: \")\n\tprint(Odd(Split(list)))\n\nif __name__ == '__main__': \n\tmain()<|endoftext|>"}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t\tsum_of_cubes = 0\n\t\tfor i in range(1,n+1) :\n\t\t\tsum_of_cubes += i**3\n\t\treturn sum_of_cubes - sum(range(1,n+1))\n\nprint(difference(5))\n<|endoftext|>"}
{"ID": 919, "source": "MBPP:556", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t", "predict": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t\tcount = 0\n\t\tfor i in range(N) : \n\t\t\tfor j in range(i+1,N) : \n\t\t\t\tif A[i]^A[j] == 1 : \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nA = [1,2,3,4,5,6,7,8,9,10]\nN = len(A)\nprint(find_Odd_Pair(A,N))\n<|endoftext|>"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t\treturn string.swapcase()\n\nprint(toggle_string(\"Hello World\"))\nprint(toggle_string(\"hello world\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HELLO WORLD\"))"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\t# Your code here\n\t\treturn abs(n1 - n2)\n\nprint(digit_distance_nums(123, 456))\nprint(digit_distance_nums(123, 123))\nprint(digit_distance_nums(123, 124))\nprint(digit_distance_nums(123, 125))\nprint(digit_distance_nums(123, 126))\nprint(digit_distance_nums(123, 127))\nprint(digit_distance_nums(123, 128))\nprint(digit_distance_nums(123, 129))\nprint(digit_distance_nums(123, 130))\nprint(digit_distance_nums(123, 131))\nprint(digit_distance_nums(123, 132))\nprint(digit_distance_nums(123, 133))\nprint(digit_distance_nums(123, 134))\nprint(digit_distance_nums(123, 135))\nprint(digit_distance_nums(123, 136))\nprint(digit_distance_nums(123, 137))\nprint(digit_distance_nums(123, 138))\nprint(digit_distance_nums(123, 139))\nprint(digit_distance_nums(123, 140))\nprint(digit_distance_nums(123, 141))\nprint(digit_distance_nums(123, 142))\nprint(digit_distance_nums(123, 143))\nprint(digit_distance_nums(123, 144))\nprint(digit_distance_nums(123, 145))\nprint(digit_distance_nums(123, 146))\nprint(digit_distance_nums(123, 147))\nprint(digit_distance_nums(123, 148))\nprint(digit_distance_nums("}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t\tmax_sum = 0\n\t\tfor i in range(size):\n\t\t\tmax_sum += a[i]\n\t\t\tif max_sum < 0:\n\t\t\t\tmax_sum = 0\n\t\t\tif max_sum > 0:\n\t\t\t\ta[i] = max_sum\n\t\treturn max_sum\n\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 5))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 4))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 3))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 2))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 1))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], 0))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -1))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -2))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -3))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -4))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -5))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -6))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -7))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -8))\nprint(max_sub_array_sum([1, -2, 3, -4, 5], -9))\nprint(max_sub_array_sum([1, -2, 3, -4"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) | set(test_tup2))\n\n\"\"\"\nWrite a function to find the intersection of elements of the given tuples.\n\"\"\"\ndef intersection_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the difference of elements of the given tuples.\n\"\"\"\ndef difference_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) - set(test_tup2))\n\n\"\"\"\nWrite a function to find the symmetric difference of elements of the given tuples.\n\"\"\"\ndef symmetric_difference_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) ^ set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_elements(test_tup1, test_tup2):\n\t\treturn tuple(set(test_tup1) & set(test_tup2))\n\n\"\"\"\nWrite a function to find the cartesian product of elements of the given tuples.\n\"\"\"\ndef cartesian_product_"}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t\tfor i in range(len(test_list)):\n\t\t\tfor j in range(i+1, len(test_list)):\n\t\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\t\ttest_list[i] = test_list[j]\n\t\t\t\t\ttest_list[j] = test_list[i]\n\t\t\t\t\tbreak\n\t\treturn test_list\n\nprint(assign_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t\tmax_len = 0\n\t\tfor i in range(len(lst)):\n\t\t\tfor j in range(i+1, len(lst)):\n\t\t\t\tif lst[i] == lst[j]:\n\t\t\t\t\tmax_len = max(max_len, j-i)\n\t\treturn max_len\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Find_Max_Length(lst))\n<|endoftext|>"}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of values\n\t\t\"\"\"\n\t\tvalues = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == '\"':\n\t\t\t\tj = i + 1\n\t\t\t\twhile text[j]!= '\"':\n\t\t\t\t\tj += 1\n\t\t\t\tvalues.append(text[i+1:j])\n\t\t\t\ti = j\n\t\treturn values\n\n\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values_2(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of values\n\t\t\"\"\"\n\t\tvalues = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == '\"':\n\t\t\t\tj = i + 1\n\t\t\t\twhile text[j]!= '\"':\n\t\t\t\t\tj += 1\n\t\t\t\tvalues.append(text[i+1:j])\n\t\t\t\ti = j\n\t\treturn values\n\n\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values_3(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of values\n\t\t\"\"\"\n\t\tvalues = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == '\"':\n\t\t\t\tj = i + 1\n\t\t\t\twhile text[j]!= '\"':\n\t\t\t\t\tj += 1\n\t\t\t\tvalues.append(text[i+1:j])\n\t\t\t\ti = j\n\t\treturn values\n\n\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values_4(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of values\n\t\t\"\"\"\n\t\tvalues = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == '\"':\n\t\t\t\tj = i + 1\n\t\t\t\twhile text[j]!= '\"':\n\t\t\t\t\tj += 1\n\t\t\t\tvalues.append(text[i+1:j])\n\t\t\t\ti = j\n\t\treturn values\n\n\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values_5(text):\n\t\t\"\"\"\n\t\t:param text: string\n\t\t:return: list of"}
{"ID": 927, "source": "MBPP:564", "prompt": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t\tcount=0\n\t\tfor i in range(n):\n\t\t\tfor j in range(i+1,n):\n\t\t\t\tif arr[i]==arr[j]:\n\t\t\t\t\tcount+=1\n\t\treturn count\n\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(count_Pairs(arr,n))\n<|endoftext|>"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t\treturn word.split()\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_2(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_3(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_4(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_5(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_6(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_7(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_8(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_9(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_10(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_11(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_12(word): \n\t\treturn max(word, key=len)\n\n\"\"\"\nWrite a python function to find the longest substring in a string.\n\"\"\"\ndef longest_substring_"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t\treturn sum(int(i) for i in str(n))\n\nprint(sum_digits(12345))\nprint(sum_digits(123456))\nprint(sum_digits(1234567))\nprint(sum_digits(12345678))\nprint(sum_digits(123456789))\nprint(sum_digits(1234567890))\nprint(sum_digits(12345678901))\nprint(sum_digits(123456789012))\nprint(sum_digits(1234567890123))\nprint(sum_digits(12345678901234))\nprint(sum_digits(123456789012345))\nprint(sum_digits(1234567890123456))\nprint(sum_digits(12345678901234567))\nprint(sum_digits(123456789012345678))\nprint(sum_digits(1234567890123456789))\nprint(sum_digits(12345678901234567890))\nprint(sum_digits(123456789012345678901))\nprint(sum_digits(1234567890123456789012))\nprint(sum_digits(12345678901234567890123))\nprint(sum_digits(123456789012345678901234))\nprint(sum_digits(1234567890123456789012345))\nprint(sum_digits(123456"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t\tif list1 == []:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(len(list1)-1):\n\t\t\t\tif list1[i] > list1[i+1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is sorted in ascending order or not.\n\"\"\"\ndef issort_asc_list(list1):\n\tif list1 == []:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(list1)-1):\n\t\t\tif list1[i] < list1[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is sorted in descending order or not.\n\"\"\"\ndef issort_desc_list(list1):\n\tif list1 == []:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(list1)-1):\n\t\t\tif list1[i] > list1[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is a permutation of another list or not.\n\"\"\"\ndef ispermutation_list(list1, list2):\n\tif list1 == []:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i]!= list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is a permutation of another list in ascending order or not.\n\"\"\"\ndef ispermutation_asc_list(list1, list2):\n\tif list1 == []:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i]!= list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is a permutation of another list in descending order or not.\n\"\"\"\ndef ispermutation_desc_list(list1, list2):\n\tif list1 == []:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(list1)):\n\t\t\tif list1[i]!= list2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether a specified list is a subset"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t\treturn [None] * length\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts(length):\n\t\treturn [dict() for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values(length):\n\t\treturn [dict(value=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys(length):\n\t\treturn [dict(value=i, key=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys_and_values(length):\n\t\treturn [dict(value=i, key=i, value=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys_and_values_and_keys(length):\n\t\treturn [dict(value=i, key=i, value=i, key=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys_and_values_and_keys_and_values(length):\n\t\treturn [dict(value=i, key=i, value=i, key=i, value=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys_and_values_and_keys_and_values_and_keys(length):\n\t\treturn [dict(value=i, key=i, value=i, key=i, value=i, key=i) for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of dictionaries.\n\"\"\"\ndef empty_list_of_dicts_with_values_and_keys_and_values_and_keys_and_values_and_keys_"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t\tfor i in range(len(list1)):\n\t\t\tlist1[i].sort()\n\ndef main():\n\tlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n\tsort_sublists(list1)\n\tprint(list1)\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t\tfor word in list1:\n\t\t\tif word in charlist:\n\t\t\t\tlist1.remove(word)\n\t\treturn list1\n\nprint(remove_words([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"], [\"h\", \"e\", \"l\", \"l\", \"o\"]))\n<|endoftext|>"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t\n    # Write your code here.\n    # Initialize the max sum pair diff to 0\n    max_sum_pair_diff = 0\n    \n    # Initialize the max sum pair to 0\n    max_sum_pair = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_less_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_greater_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_less_than_K_and_greater_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_greater_than_K_and_less_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_less_than_K_and_greater_than_K_and_less_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_greater_than_K_and_less_than_K_and_greater_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_less_than_K_and_greater_than_K_and_greater_than_K_and_less_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_greater_than_K_and_less_than_K_and_greater_than_K_and_greater_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_less_than_K_and_greater_than_K_and_greater_than_K_and_greater_than_K_and_less_than_K = 0\n    \n    # Initialize the sum of all elements in the array to 0\n    sum_arr_greater_than_K_and_less_than_K_and_greater_than_K_and_greater_than_K_and_greater_than_K = 0\n    \n    # Initialize the sum of all elements in the array to "}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t\t# Write your code here\n\t\tnums.sort()\n\t\tfor i in range(len(nums)-1):\n\t\t\tif nums[i] == nums[i+1]:\n\t\t\t\tnums.pop(i)\n\t\t\t\tnums.pop(i)\n\t\t\t\tbreak\n\t\treturn nums\n\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t\tunique_list = []\n\t\tfor i in list_data:\n\t\t\tif i not in unique_list:\n\t\t\t\tunique_list.append(i)\n\t\treturn unique_list\n\nprint(unique_product([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t\treturn 2*pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t\treturn 2*pi*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t\treturn 4*pi*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t\treturn 4*pi*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l,b,h):\n\t\treturn 2*l*b*h\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l,b,h):\n\t\treturn l*b*h**3\n\n\"\"\"\nWrite a function to find the surface area of a parallelogram.\n\"\"\"\ndef surfacearea_parallelogram(a,b):\n\t\treturn a*b\n\n\"\"\"\nWrite a function to find the volume of a parallelogram.\n\"\"\"\ndef volume_parallelogram(a,b):\n\t\treturn a**2*b\n\n\"\"\"\nWrite a function to find the surface area of a trapezoid.\n\"\"\"\ndef surfacearea_trapezoid(a,b,h):\n\t\treturn (a+b)*h\n\n\"\"\"\nWrite a function to find the volume of a trapezoid.\n\"\"\"\ndef volume_trapezoid(a,b,h):\n\t\treturn (a+b)*h**2\n\n\"\"\"\nWrite a function to find the surface area of a rectangle.\n\"\"\"\ndef surfacearea_rectangle(l,b):\n\t\treturn l*b\n\n\"\"\"\nWrite a function to find the volume of a rectangle.\n\"\"\"\ndef volume_rectangle(l,b):\n\t"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t\tif L == R: \n\t\t\treturn 0 \n\t\tif L > R: \n\t\t\treturn -1 \n\t\tmid = (L+R)//2 \n\t\tif A[mid] == N: \n\t\t\treturn mid \n\t\tif A[mid] > N: \n\t\t\treturn count_no(A,N,L,mid-1) \n\t\telse: \n\t\t\treturn count_no(A,N,mid+1,R) \n\nA = [1,2,3,4,5,6,7,8,9,10]\nN = 10\nL = 0\nR = len(A)-1\nprint(count_no(A,N,L,R))\n<|endoftext|>"}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t\t# code here \n\t\tif n==0: \n\t\t\treturn True \n\t\tif m==0: \n\t\t\treturn False \n\t\tif A[n-1]==B[m-1]: \n\t\t\treturn is_Sub_Array(A,B,n-1,m-1) \n\t\telse: \n\t\t\treturn is_Sub_Array(A,B,n-1,m) or is_Sub_Array(A,B,n,m-1) \n\nA=[1,2,3,4,5,6,7,8,9,10]\nB=[1,2,3,4,5,6,7,8,9,10]\nn=len(A)\nm=len(B)\nprint(is_Sub_Array(A,B,n,m))\n<|endoftext|>"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t\tif n == 0: \n\t\t\treturn 0 \n\t\telse: \n\t\t\treturn n % 10 + last_Digit_Factorial(n // 10) \n\nprint(last_Digit_Factorial(100))\n<|endoftext|>"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t\treturn list1+list2+list3\n\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n<|endoftext|>"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: list\n\t\t\"\"\"\n\t\tdissimilar = []\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i]!= test_tup2[i]:\n\t\t\t\tdissimilar.append(test_tup1[i])\n\t\treturn dissimilar\n\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: list\n\t\t\"\"\"\n\t\tdissimilar = []\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i]!= test_tup2[i]:\n\t\t\t\tdissimilar.append(test_tup1[i])\n\t\treturn dissimilar\n\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: list\n\t\t\"\"\"\n\t\tdissimilar = []\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i]!= test_tup2[i]:\n\t\t\t\tdissimilar.append(test_tup1[i])\n\t\treturn dissimilar\n\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t:param test_tup1: tuple\n\t\t:param test_tup2: tuple\n\t\t:return: list\n\t\t\"\"\"\n\t\tdissimilar = []\n\t\tfor i in range(len(test_tup1)):\n\t\t\tif test_tup1[i]!= test_tup2[i]:\n\t\t\t\tdissimilar.append(test_tup1[i])\n\t\treturn dissimilar\n\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t\t\"\"\"\n\t\t"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t\teven_elements = []\n\t\tfor element in test_tuple:\n\t\t\tif element % 2 == 0:\n\t\t\t\teven_elements.append(element)\n\t\treturn even_elements\n\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 1"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t\treturn (b*s)/2\n\nprint(surface_Area(5,10))\n<|endoftext|>"}
{"ID": 945, "source": "MBPP:582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t", "predict": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t\tif dict1 == {}:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(my_dict({}))\nprint(my_dict({1:2, 3:4}))\nprint(my_dict({1:2, 3:4, 5:6}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18, 19:20}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18, 19:20, 21:22}))\nprint(my_dict({1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:1"}
{"ID": 946, "source": "MBPP:583", "prompt": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t", "predict": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t\t\"\"\"\n\t\tnum: int\n\t\treturn: int\n\t\t\"\"\"\n\t\tif num == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn num * catalan_number(num-1)\n\nprint(catalan_number(5))\n<|endoftext|>"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (adverb, position)\n\t\t\"\"\"\n\t\tadverbs = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'u':\n\t\t\t\tadverbs.append((text[i], i))\n\t\treturn adverbs\n\n\"\"\"\nWrite a function to find all nouns and their positions in a given sentence by using regex.\n\"\"\"\ndef find_nouns(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (noun, position)\n\t\t\"\"\"\n\t\tnouns = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'n' or text[i] == 'o' or text[i] == 'u':\n\t\t\t\tnouns.append((text[i], i))\n\t\treturn nouns\n\n\"\"\"\nWrite a function to find all verbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_verbs(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (verb, position)\n\t\t\"\"\"\n\t\tverbs = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'v' or text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'u':\n\t\t\t\tverbs.append((text[i], i))\n\t\treturn verbs\n\n\"\"\"\nWrite a function to find all adjectives and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adjectives(text):\n\t\t\"\"\"\n\t\t:param text: a string\n\t\t:return: a list of tuples (adjective, position)\n\t\t\"\"\"\n\t\tadjectives = []\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == 'r' or text[i] =='s' or text[i] == 't' or text[i] == 'v"}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t\theap = []\n\t\tfor item in items:\n\t\t\theap.append(item)\n\t\theapify(heap)\n\t\tfor i in range(n):\n\t\t\tprint(heap.pop())\n\ndef heapify(heap):\n\tfor i in range(len(heap)//2,0,-1):\n\t\theapify_down(heap,i)\n\ndef heapify_down(heap,i):\n\tleft = 2*i+1\n\tright = 2*i+2\n\tlargest = i\n\tif left < len(heap) and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < len(heap) and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest!= i:\n\t\theap[i],heap[largest] = heap[largest],heap[i]\n\t\theapify_down(heap,largest)\n\nif __name__ == '__main__':\n\titems = [10,20,30,40,50,60,70,80,90]\n\tn = 5\n\texpensive_items(items,n)<|endoftext|>"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t\t# Your code here\n\t\ta.append(a[0])\n\t\ta.pop(0)\n\t\treturn a\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = 3\nk = 3\nprint(split_Arr(a,n,k))\n<|endoftext|>"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\t\treturn list(tuplex)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\t\treturn ''.join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\t\treturn list(stringx)\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string("}
{"ID": 951, "source": "MBPP:588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t", "predict": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t\tif len(nums) == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn max(nums) - min(nums)\n\nprint(big_diff([1, 2, 3, 4, 5]))\nprint(big_diff([1, 2, 3, 4, 5, 6]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint"}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t\tif a < 0 or b < 0:\n\t\t\treturn []\n\t\tif a == 0 or b == 0:\n\t\t\treturn [a, b]\n\t\tif a == b:\n\t\t\treturn [a]\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []\n\t\tif a % 2 == 0:\n\t\t\treturn []\n\t\tif b % 2 == 0:\n\t\t\treturn []\n\t\tif a > b:\n\t\t\treturn []"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t\tr = np.sqrt(x**2 + y**2)\n\t\ttheta = np.arctan2(y,x)\n\t\treturn r,theta\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n\"\"\"\ndef rect_polar(r,theta):\n\t\tx = r * np.cos(theta)\n\t\ty = r * np.sin(theta)\n\t\treturn x,y\n\n\"\"\"\nWrite a function to convert polar coordinates to cartesian coordinates.\n\"\"\"\ndef polar_cart(x,y):\n\t\tr = np.sqrt(x**2 + y**2)\n\t\ttheta = np.arctan2(y,x)\n\t\tx = r * np.cos(theta)\n\t\ty = r * np.sin(theta)\n\t\treturn x,y\n\n\"\"\"\nWrite a function to convert cartesian coordinates to polar coordinates.\n\"\"\"\ndef cart_polar(x,y):\n\t\tr = np.sqrt(x**2 + y**2)\n\t\ttheta = np.arctan2(y,x)\n\t\tx = r * np.cos(theta)\n\t\ty = r * np.sin(theta)\n\t\treturn x,y\n\n\"\"\"\nWrite a function to convert cartesian coordinates to rectangular coordinates.\n\"\"\"\ndef cart_rect(x,y):\n\t\tr = np.sqrt(x**2 + y**2)\n\t\ttheta = np.arctan2(y,x)\n\t\tx = r * np.cos(theta)\n\t\ty = r * np.sin(theta)\n\t\treturn x,y\n\n\"\"\"\nWrite a function to convert rectangular coordinates to cartesian coordinates.\n\"\"\"\ndef rect_cart(r,theta):\n\t\tx = r * np.cos(theta)\n\t\ty = r * np.sin(theta)\n\t\treturn x,y\n\n\"\"\"\nWrite a function to convert polar coordinates to spherical coordinates.\n\"\"\"\ndef polar_sph(x,y):\n\t\tr = np.sqrt(x**2 + y**2)\n\t\ttheta = np.arctan2(y,x)\n\t\tphi = np.arctan2(np.sqrt(x**2 + y**2),x)\n\t\treturn r,theta,phi\n\n\"\"\"\nWrite a function to convert spherical coordinates to polar coordinates.\n"}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0]\n\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n<|endoftext|>"}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t\t\"\"\"\n\t\tn: number of terms\n\t\t\"\"\"\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * sum_Of_product(n-1)\n\nprint(sum_Of_product(10))\n<|endoftext|>"}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t\treturn ip.lstrip('0')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip2(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip3(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip4(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip5(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip6(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip7(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip8(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip9(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip10(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip11(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip12(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip13(ip):\n\t\treturn ip.lstrip('0').lstrip('.')\n\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\n"}
{"ID": 957, "source": "MBPP:594", "prompt": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t", "predict": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t\teven_list = []\n\t\todd_list = []\n\t\tfor i in list1:\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_list.append(i)\n\t\t\telse:\n\t\t\t\todd_list.append(i)\n\t\treturn [even_list, odd_list]\n\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\t# Your code here\n\t\t#print(str1)\n\t\t#print(str2)\n\t\t#print(len(str1))\n\t\t#print(len(str2))\n\t\t#print(str1[0])\n\t\t#print(str2[0])\n\t\t#print(str1[1])\n\t\t#print(str2[1])\n\t\t#print(str1[2])\n\t\t#print(str2[2])\n\t\t#print(str1[3])\n\t\t#print(str2[3])\n\t\t#print(str1[4])\n\t\t#print(str2[4])\n\t\t#print(str1[5])\n\t\t#print(str2[5])\n\t\t#print(str1[6])\n\t\t#print(str2[6])\n\t\t#print(str1[7])\n\t\t#print(str2[7])\n\t\t#print(str1[8])\n\t\t#print(str2[8])\n\t\t#print(str1[9])\n\t\t#print(str2[9])\n\t\t#print(str1[10])\n\t\t#print(str2[10])\n\t\t#print(str1[11])\n\t\t#print(str2[11])\n\t\t#print(str1[12])\n\t\t#print(str2[12])\n\t\t#print(str1[13])\n\t\t#print(str2[13])\n\t\t#print(str1[14])\n\t\t#print(str2[14])\n\t\t#print(str1[15])\n\t\t#print(str2[15])\n\t\t#print(str1[16])\n\t\t#print(str2[16])\n\t\t#print(str1[17])\n\t\t#print(str2[17])\n\t\t#print(str1[18])\n\t\t#print(str2[18])\n\t\t#print(str1[19])\n\t\t#print(str2[19])\n\t\t#print(str1[20])\n\t\t#print(str2[20])\n\t\t#print(str1[21])\n\t\t#print(str2[21])\n\t\t#print(str1"}
{"ID": 959, "source": "MBPP:596", "prompt": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t", "predict": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t\treturn len(tuple_list)\n\n\"\"\"\nWrite a function to find the size of the given list.\n\"\"\"\ndef list_size(list_list):\n\t\treturn len(list_list)\n\n\"\"\"\nWrite a function to find the size of the given set.\n\"\"\"\ndef set_size(set_list):\n\t\treturn len(set_list)\n\n\"\"\"\nWrite a function to find the size of the given dictionary.\n\"\"\"\ndef dict_size(dict_list):\n\t\treturn len(dict_list)\n\n\"\"\"\nWrite a function to find the size of the given string.\n\"\"\"\ndef string_size(string_list):\n\t\treturn len(string_list)\n\n\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t\treturn len(tuple_list)\n\n\"\"\"\nWrite a function to find the size of the given list.\n\"\"\"\ndef list_size(list_list):\n\t\treturn len(list_list)\n\n\"\"\"\nWrite a function to find the size of the given set.\n\"\"\"\ndef set_size(set_list):\n\t\treturn len(set_list)\n\n\"\"\"\nWrite a function to find the size of the given dictionary.\n\"\"\"\ndef dict_size(dict_list):\n\t\treturn len(dict_list)\n\n\"\"\"\nWrite a function to find the size of the given string.\n\"\"\"\ndef string_size(string_list):\n\t\treturn len(string_list)\n\n\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t\treturn len(tuple_list)\n\n\"\"\"\nWrite a function to find the size of the given list.\n\"\"\"\ndef list_size(list_list):\n\t\treturn len(list_list)\n\n\"\"\"\nWrite a function to find the size of the given set.\n\"\"\"\ndef set_size(set_list):\n\t\treturn len(set_list)\n\n\"\"\"\nWrite a function to find the size of the given dictionary.\n\"\"\"\ndef dict_size(dict_list):\n\t\treturn len(dict_list)\n\n\"\"\"\nWrite a function to find the size of the given string.\n\"\"\"\ndef string_size"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t\t# Write your code here\n\t\tif k == 0:\n\t\t\treturn arr1[0]\n\t\telif k == 1:\n\t\t\treturn arr2[0]\n\t\telse:\n\t\t\tmid = (m + n) // 2\n\t\t\tif m == n:\n\t\t\t\treturn arr1[mid] if mid < k else arr2[mid - k]\n\t\t\telif m < n:\n\t\t\t\tif arr1[mid] < arr2[mid]:\n\t\t\t\t\treturn find_kth(arr1, arr2, m, mid, k - (mid - m))\n\t\t\t\telse:\n\t\t\t\t\treturn find_kth(arr1, arr2, mid, n, k - (n - mid))\n\t\t\telse:\n\t\t\t\tif arr1[mid] < arr2[mid]:\n\t\t\t\t\treturn find_kth(arr1, arr2, mid, n, k - (mid - m))\n\t\t\t\telse:\n\t\t\t\t\treturn find_kth(arr1, arr2, m, n, k - (n - mid))\n\ndef main():\n\tarr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tarr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tk = 3\n\tprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t\tsum = 0\n\t\twhile number > 0:\n\t\t\tdigit = number % 10\n\t\t\tsum += digit ** 3\n\t\t\tnumber //= 10\n\t\treturn sum == number\n\nprint(armstrong_number(12345))\nprint(armstrong_number(123456))\nprint(armstrong_number(1234567))\nprint(armstrong_number(12345678))\nprint(armstrong_number(123456789))\nprint(armstrong_number(1234567890))\nprint(armstrong_number(12345678901))\nprint(armstrong_number(123456789012))\nprint(armstrong_number(1234567890123))\nprint(armstrong_number(12345678901234))\nprint(armstrong_number(123456789012345))\nprint(armstrong_number(1234567890123456))\nprint(armstrong_number(12345678901234567))\nprint(armstrong_number(123456789012345678))\nprint(armstrong_number(1234567890123456789))\nprint(armstrong_number(12345678901234567890))\nprint(armstrong_number(123456789012345678901))\nprint(armstrong_number(1234567890123456789012))\nprint(armstrong_number(12345678901234567890123))\nprint(armstrong_number(12345678901234567890123"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t\tsum = 0\n\t\tfor i in range(number):\n\t\t\tsum += i\n\t\taverage = sum / number\n\t\treturn sum, average\n\nprint(sum_average(5))\nprint(sum_average(10))\nprint(sum_average(15))\nprint(sum_average(20))\nprint(sum_average(25))\nprint(sum_average(30))\nprint(sum_average(35))\nprint(sum_average(40))\nprint(sum_average(45))\nprint(sum_average(50))\nprint(sum_average(55))\nprint(sum_average(60))\nprint(sum_average(65))\nprint(sum_average(70))\nprint(sum_average(75))\nprint(sum_average(80))\nprint(sum_average(85))\nprint(sum_average(90))\nprint(sum_average(95))\nprint(sum_average(100))\nprint(sum_average(105))\nprint(sum_average(110))\nprint(sum_average(115))\nprint(sum_average(120))\nprint(sum_average(125))\nprint(sum_average(130))\nprint(sum_average(135))\nprint(sum_average(140))\nprint(sum_average(145))\nprint(sum_average(150))\nprint(sum_average(155))\nprint(sum_average(160))\nprint(sum_average(165))\nprint(sum_average(170))\nprint(sum_average(175))\nprint(sum_average(180))\nprint(sum_average(185))\nprint(sum_average(190))\nprint(sum_average(195))\nprint(sum_average(200))\nprint(sum_average(205))\nprint(sum_average(210))\nprint(sum_average(215))\nprint(sum_average(220))\nprint(sum_average(225))\nprint(sum"}
{"ID": 963, "source": "MBPP:600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t\treturn n & 1 == 0\n\nprint(is_Even(10))\nprint(is_Even(11))\nprint(is_Even(12))\nprint(is_Even(13))\nprint(is_Even(14))\nprint(is_Even(15))\nprint(is_Even(16))\nprint(is_Even(17))\nprint(is_Even(18))\nprint(is_Even(19))\nprint(is_Even(20))\nprint(is_Even(21))\nprint(is_Even(22))\nprint(is_Even(23))\nprint(is_Even(24))\nprint(is_Even(25))\nprint(is_Even(26))\nprint(is_Even(27))\nprint(is_Even(28))\nprint(is_Even(29))\nprint(is_Even(30))\nprint(is_Even(31))\nprint(is_Even(32))\nprint(is_Even(33))\nprint(is_Even(34))\nprint(is_Even(35))\nprint(is_Even(36))\nprint(is_Even(37))\nprint(is_Even(38))\nprint(is_Even(39))\nprint(is_Even(40))\nprint(is_Even(41))\nprint(is_Even(42))\nprint(is_Even(43))\nprint(is_Even(44))\nprint(is_Even(45))\nprint(is_Even(46))\nprint(is_Even(47))\nprint(is_Even(48))\nprint(is_Even(49))\nprint(is_Even(50))\nprint(is_Even(51))\nprint(is_Even(52))\nprint(is_Even(53))\nprint(is_Even(54))\nprint(is_Even(55))\nprint(is_Even(56))\nprint(is_Even(57))\nprint(is_Even(58))\nprint(is_Even(59))\nprint"}
{"ID": 964, "source": "MBPP:1", "prompt": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t", "predict": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t\t# Create a 2D array to store the minimum cost path\n\t\tmin_cost_path = [[0 for i in range(n)] for j in range(m)]\n\t\t# Initialize the minimum cost path\n\t\tmin_cost_path[0][0] = cost[0][0]\n\t\t# Initialize the minimum cost path\n\t\tfor i in range(1, m):\n\t\t\tmin_cost_path[i][0] = min(min_cost_path[i-1][0], cost[i][0])\n\t\tfor j in range(1, n):\n\t\t\tmin_cost_path[0][j] = min(min_cost_path[0][j-1], cost[0][j])\n\t\t# Fill the minimum cost path\n\t\tfor i in range(1, m):\n\t\t\tfor j in range(1, n):\n\t\t\t\tmin_cost_path[i][j] = min(min_cost_path[i-1][j], min_cost_path[i][j-1]) + cost[i][j]\n\t\t# Return the minimum cost path\n\t\treturn min_cost_path[m-1][n-1]\n\n\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost_dp(cost, m, n): \n\t\t# Create a 2D array to store the minimum cost path\n\t\tmin_cost_path = [[0 for i in range(n)] for j in range(m)]\n\t\t# Initialize the minimum cost path\n\t\tmin_cost_path[0][0] = cost[0][0]\n\t\t# Initialize the minimum cost path\n\t\tfor i in range(1, m):\n\t\t\tmin_cost_path[i][0] = min(min_cost_path[i-1][0], cost[i][0])\n\t\tfor j in range(1, n):\n\t\t\tmin_cost_path[0][j] = min(min_cost_path[0][j-1], cost[0][j])\n\t\t# Fill the minimum cost path\n\t\tfor i in range(1, m):\n\t\t\tfor j in range("}
{"ID": 965, "source": "MBPP:2", "prompt": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t", "predict": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t\t# Create a list of tuples\n\t\ttest_list = list(zip(test_tup1, test_tup2))\n\t\t# Sort the list\n\t\ttest_list.sort()\n\t\t# Create a list of tuples\n\t\tsimilar_list = []\n\t\t# For each tuple in the list\n\t\tfor i in range(len(test_list)):\n\t\t\t# If the tuple is not the same as the previous tuple\n\t\t\tif test_list[i][0]!= test_list[i-1][0]:\n\t\t\t\t# Add the tuple to the list\n\t\t\t\tsimilar_list.append(test_list[i])\n\t\t# Return the list of tuples\n\t\treturn similar_list\n\n# Test cases\nprint(similar_elements((1, 2), (1, 2)))\nprint(similar_elements((1, 2), (1, 3)))\nprint(similar_elements((1, 2), (2, 3)))\nprint(similar_elements((1, 2), (1, 2, 3)))\nprint(similar_elements((1, 2, 3), (1, 2, 3)))\nprint(similar_elements((1, 2, 3), (1, 2, 3, 4)))\nprint(similar_elements((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(similar_elements((1, 2, 3, 4), (1, 2, 3, 4, 5)))\nprint(similar_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(similar_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)))\nprint(similar_elements((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)))\nprint(similar_elements((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7)))\nprint(similar_"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\tif n == 1:\n\t\t\treturn False\n\t\tfor i in range(2, n):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38))\nprint(is_not_prime(39))\nprint(is_not_prime(40))\nprint(is_not_prime(41))\nprint(is_not_prime(42))\nprint(is_not_prime(43))\nprint(is_not_prime(44))\nprint(is_not_prime(45))\nprint(is_not_prime(46))\nprint(is_not_prime(47))\nprint(is_not_prime(48))\nprint("}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t\t# Create a heap\n\t\theap = []\n\t\tfor i in range(n):\n\t\t\theap.append(nums[i])\n\t\tfor i in range(n,0,-1):\n\t\t\theapify(heap,i)\n\t\t# Find the largest element\n\t\tlargest = heap[0]\n\t\tfor i in range(1,n):\n\t\t\tif heap[i]>largest:\n\t\t\t\tlargest = heap[i]\n\t\treturn largest\n\ndef heapify(heap,n):\n\tlargest = n\n\tleft = 2*n+1\n\tright = 2*n+2\n\tif left<n and heap[left]>heap[largest]:\n\t\tlargest = left\n\tif right<n and heap[right]>heap[largest]:\n\t\tlargest = right\n\tif largest!=n:\n\t\theap[n],heap[largest] = heap[largest],heap[n]\n\t\theapify(heap,largest)\n\ndef main():\n\tnums = [1,2,3,4,5,6,7,8,9,10]\n\tn = len(nums)\n\tprint(heap_queue_largest(nums,n))\n\nif __name__ == '__main__':\n\tmain()<|endoftext|>"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t\t# Write your code here\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telif n == 1:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn count_ways(n-1) + count_ways(n-2)\n\nprint(count_ways(3))\n<|endoftext|>"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at two bit positions only or not.\n\"\"\"\ndef differ_At_Two_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at three bit positions only or not.\n\"\"\"\ndef differ_At_Three_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at four bit positions only or not.\n\"\"\"\ndef differ_At_Four_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at five bit positions only or not.\n\"\"\"\ndef differ_At_Five_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at six bit positions only or not.\n\"\"\"\ndef differ_At_Six_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at seven bit positions only or not.\n\"\"\"\ndef differ_At_Seven_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at eight bit positions only or not.\n\"\"\"\ndef differ_At_Eight_Bit_Pos(a,b): \n\t\tif a & b == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the two numbers differ at nine bit positions only or not.\n\"\"\"\ndef differ_At_Nine_Bit_Pos(a,b): \n\t\tif a &"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t\treturn re.findall(r'\\w{4,}', text)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_2(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.IGNORECASE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_3(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.UNICODE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_4(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.VERBOSE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_5(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.DOTALL)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_6(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.MULTILINE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_7(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.UNICODE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_8(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.VERBOSE)\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long_9(text):\n\t\treturn re.findall(r'\\w{4,}', text, re.DOTALL)\n\n\"\"\"\nWrite a function to find all words which are"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(square_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\treturn [num**2 for num in nums]\n\nprint(sum(square_nums([1,2,3,4,5])))\n\n\"\"\"\nWrite a function to find the sum of squares of individual elements in a list using lambda function.\n\"\"\"\ndef square"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t\t# Your code here\n\t\t#print(str)\n\t\t#print(len(str))\n\t\t#print(len(str)-1)\n\t\t#print(len(str)-2)\n\t\t#print(len(str)-3)\n\t\t#print(len(str)-4)\n\t\t#print(len(str)-5)\n\t\t#print(len(str)-6)\n\t\t#print(len(str)-7)\n\t\t#print(len(str)-8)\n\t\t#print(len(str)-9)\n\t\t#print(len(str)-10)\n\t\t#print(len(str)-11)\n\t\t#print(len(str)-12)\n\t\t#print(len(str)-13)\n\t\t#print(len(str)-14)\n\t\t#print(len(str)-15)\n\t\t#print(len(str)-16)\n\t\t#print(len(str)-17)\n\t\t#print(len(str)-18)\n\t\t#print(len(str)-19)\n\t\t#print(len(str)-20)\n\t\t#print(len(str)-21)\n\t\t#print(len(str)-22)\n\t\t#print(len(str)-23)\n\t\t#print(len(str)-24)\n\t\t#print(len(str)-25)\n\t\t#print(len(str)-26)\n\t\t#print(len(str)-27)\n\t\t#print(len(str)-28)\n\t\t#print(len(str)-29)\n\t\t#print(len(str)-30)\n\t\t#print(len(str)-31)\n\t\t#print(len(str)-32)\n\t\t#print(len(str)-33)\n\t\t#print(len(str)-34)\n\t\t#print(len(str)-35)\n\t\t#print(len(str)-36)\n\t\t#print(len(str)-37)\n\t\t#print(len(str)-38)\n\t\t#print(len(str)-39)\n\t\t#print(len(str)-40)\n\t\t#print(len(str)-41)\n\t\t#print(len(str"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=False)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum_2(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum_2(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=False)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum_3(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum_3(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=False)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum_4(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum_4(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=False)[:n]\n\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum_5(list1,n):\n\t\treturn sorted(list1,key=lambda x:x[1],reverse=True)[:n]\n\n\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef large_nnum_5(list1,n):\n\t\treturn sorted(list1,key=lambda"}
