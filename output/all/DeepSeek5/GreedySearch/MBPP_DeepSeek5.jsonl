{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\tmax = 0\n\tmcl = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i][0] > arr[j][1] and mcl[i] < mcl[j] + 1): \n\t\t\t\tmcl[i] = mcl[j] + 1\n\tfor i in range(n): \n\t\tif (max < mcl[i]): \n\t\t\tmax = mcl[i] \n\treturn max\n\narr = [[5, 24], [15, 25], [27, 40], [50, 60]] \nprint(\"Length of maximum size chain is\", max_chain_length(arr, len(arr)))<｜end▁of▁sentence｜>"}
{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\ttemp = {}\n\tfor ch in str1:\n\t\tif ch in temp:\n\t\t\treturn ch;\n\t\telse:\n\t\t\ttemp[ch] = 0\n\treturn '\\0'\n\nprint(first_repeated_char(\"abcdabcd\"))<｜end▁of▁sentence｜>"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\tludics = [1]\n\ti = 2\n\twhile i <= n:\n\t\tludics.append(i)\n\t\ti *= 2\n\ti = 3\n\twhile i <= n:\n\t\tludics.append(i)\n\t\ti *= 3\n\ti = 5\n\twhile i <= n:\n\t\tludics.append(i)\n\t\ti *= 5\n\ti = 7\n\twhile i <= n:\n\t\tludics.append(i)\n\t\ti *= 7\n\tludics.sort()\n\treturn ludics\n\ndef get_lucid(n):\n\tludics = get_ludic(n)\n\tlucid = []\n\tfor i in range(len(ludics)):\n\t\tfor j in range(i, len(ludics)):\n\t\t\tif ludics[i] * ludics[j] <= n:\n\t\t\t\tlucid.append(ludics[i] * ludics[j])\n\t\t\telse:\n\t\t\t\tbreak\n\tlucid.sort()\n\treturn lucid\n\ndef main():\n\tn = int(input())\n\tlucid = get_lucid(n)\n\tprint(lucid)\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\twords = s.split()\n\twords.reverse()\n\treturn ' '.join(words)\n\nprint(reverse_words(\"the sky is blue\"))<｜end▁of▁sentence｜>"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t\"\"\"\n\tThis function checks if the given integer is a prime number.\n\t\"\"\"\n\tif num > 1:\n\t\tfor i in range(2, num):\n\t\t\tif num % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(prime_num(1))\nprint(prime_num(2))\nprint(prime_num(3))\nprint(prime_num(4))\nprint(prime_num(5))\nprint(prime_num(6))\nprint(prime_num(7))\nprint(prime_num(8))\nprint(prime_num(9))\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\n"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\tpi = 3.14\n\tradian = degree * (pi/180)\n\treturn radian\n\nprint(radian_degree(15))\nprint(radian_degree(90))\nprint(radian_degree(100))<｜end▁of▁sentence｜>"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\timport re\n\tpattern = r'{}'.format(pattern)\n\tfor match in re.finditer(pattern, text):\n\t\ts = match.start()\n\t\te = match.end()\n\t\tprint('Found {0} at {1}:{2}'.format(text[s:e], s, e))\n\nfind_literals('Hello World', 'World')<｜end▁of▁sentence｜>"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\tbell = [[0 for i in range(n+1)] for j in range(n+1)] \n\tbell[0][0] = 1\n\tfor i in range(1, n+1): \n\t\tbell[i][0] = bell[i-1][i-1] \n\t\tfor j in range(1, i+1): \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n\treturn bell[n][0] \n\nfor n in range(6): \n\tprint('Bell Number', n, 'is', bell_Number(n))<｜end▁of▁sentence｜>"}
{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t\"\"\"\n\tA: list of integers\n\tB: list of integers\n\tN: integer\n\t\"\"\"\n\tmin_val = float('inf')\n\tfor i in range(N):\n\t\tval = A[i] * N + B[i]\n\t\tif val < min_val:\n\t\t\tmin_val = val\n\treturn min_val\n\nif __name__ == '__main__':\n\tA = [1,2,3,4,5]\n\tB = [1,2,3,4,5]\n\tN = 5\n\tprint(floor_Min(A,B,N))<｜end▁of▁sentence｜>"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tnew_list = []\n\tfor i in range(len(list1)):\n\t\tif i not in L:\n\t\t\tnew_list.append(list1[i])\n\treturn new_list\n\nlist1=[1,1,2,3,4,4,5,1]\nL=[0,3,4,5]\nprint(remove_kth_element(list1,L))<｜end▁of▁sentence｜>"}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\tres = max(x[N] for x in test_list)\n\treturn res\n\ntest_list = [(3, 5, 6), (1, 3, 7), (2, 6, 5), (1, 6, 6), (2, 6, 8), (3, 0, 6)]\nN = 1\nprint(\"The original list is : \" + str(test_list))\nprint(\"The maximum of Nth index value : \" + str(max_of_nth(test_list, N)))<｜end▁of▁sentence｜>"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\tres=[]\n\tfor i in lst:\n\t\tres.append(i[0]+i[-1])\n\treturn res\n\nlst=[['a','b'],['x','y'],['1','2']]\nprint(merge(lst))<｜end▁of▁sentence｜>"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t\"\"\"\n\tWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\t\"\"\"\n\tres = max(test_list, key=lambda sub: sub[1])[1]\n\treturn res\n\ntest_list = [('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"Maximum value of tuple list : \" + str(maximum_value(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 13, "source": "MBPP:614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n\tres = []\n\tfor ele in test_list:\n\t\tsum = 0\n\t\tfor item in ele:\n\t\t\tsum += item\n\t\tres.append(sum)\n\treturn res\n\ntest_list = [(3, 5, 6), (8, 3, 7), (7, 11, 9)]\nprint(\"The original list is : \" + str(test_list))\nres = cummulative_sum(test_list)\nprint(\"The cummulative sum of all the values in the list is : \" + str(res))<｜end▁of▁sentence｜>"}
{"ID": 14, "source": "MBPP:615", "prompt": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n\tresult = [sum(x) / len(x) for x in zip(*nums)]\n\treturn result\n\nnums = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"\\nAverage value of the numbers of the said tuple of tuples:\\n\",average_tuple(nums))\nnums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"\\nAverage value of the numbers of the said tuple of tuples:\\n\",average_tuple(nums))<｜end▁of▁sentence｜>"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\t\"\"\"\n\tres = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n\treturn res\n\n\ntest_tup1 = (10, 4, 5)\ntest_tup2 = (8, 5, 3)\nprint(tuple_modulo(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\ttemp = a \n\ta = min(a, b) \n\tb = max(temp, b) \n\tres = b / d \n\tres += (res * d == b) \n\twhile (res * d < a): \n\t\tres += 1\n\treturn res \na = 3\nb = 4\nd = 2\nprint(min_Jumps(a, b, d))<｜end▁of▁sentence｜>"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\tresult = map(lambda x,y:x/y,nums1,nums2)\n\treturn list(result)\n\nnums1 = [1,2,3,4,5]\nnums2 = [6,7,8,9,10]\nprint(div_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\tres = []\n\tfor i in test_str:\n\t\tif i.isdigit():\n\t\t\tres.append(i)\n\t\telse:\n\t\t\tres.insert(0, i)\n\treturn ''.join(res)\n\ntest_str = \"1234567890\"\nprint(move_num(test_str))<｜end▁of▁sentence｜>"}
{"ID": 19, "source": "MBPP:620", "prompt": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n\tdp = [0 for i in range(n)]\n\tdp[n-1] = 1\n\tfor i in range(n-2, -1, -1):\n\t\tmax = 0\n\t\tfor j in range(i+1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tif dp[j] > max:\n\t\t\t\t\tmax = dp[j]\n\t\tdp[i] = 1 + max\n\treturn max\n\na = [18, 1, 3, 6, 13, 17]\nprint(largest_subset(a, len(a)))<｜end▁of▁sentence｜>"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\tres = []\n\tfor sub in test_list:\n\t\tres.append(''.join([str(int(ele) + K) if ele.isdigit() else ele for ele in sub]))\n\treturn res\n\ntest_list = ['gfg123is', 'best456', 'for789geeks']\nK = 1\nprint(\"The original list is : \" + str(test_list))\nprint(\"The incremented numeric values list is : \" + str(increment_numerics(test_list, K)))<｜end▁of▁sentence｜>"}
{"ID": 21, "source": "MBPP:622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n\ti = 0\n\tj = 0\n\tm1 = -1\n\tm2 = -1\n\tcount = 0\n\twhile count < n + 1:\n\t\tcount += 1\n\t\tif i == n:\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\telif j == n:\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tif arr1[i] < arr2[j]:\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\treturn (m1 + m2) / 2\n\n\narr1 = [1, 12, 15, 26, 38]\narr2 = [2, 13, 17, 30, 45]\nn1 = len(arr1)\nn2 = len(arr2)\nif n1 == n2:\n\tprint(\"Median is \", get_median(arr1, arr2, n1))\nelse:\n\tprint(\"Doesn't work for arrays of unequal size\")<｜end▁of▁sentence｜>"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\tresult = list(map(lambda x: x**n, nums))\n\treturn result\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nn = 2\nprint(nth_nums(nums,n))<｜end▁of▁sentence｜>"}
{"ID": 23, "source": "MBPP:624", "prompt": "\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n\tprint(string.upper())\n\nis_upper(\"w3resource\")<｜end▁of▁sentence｜>"}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\tsize = len(newList) \n\ttemp = newList[0] \n\tnewList[0] = newList[size - 1] \n\tnewList[size - 1] = temp \n\treturn newList \nnewList = [12, 35, 9, 56, 24] \nprint(swap_List(newList))<｜end▁of▁sentence｜>"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\tpi = 3.14  \n\tarea = (pi * r * r) / 2  \n\treturn area  \n\ndef semicircle_area(r) :  \n\tpi = 3.14  \n\tarea = (pi * r * r) / 4  \n\treturn area  \n\ndef find_largest_triangle(r) :  \n\tsemicircle_area = (pi * r * r) / 4  \n\ttriangle_area = (pi * r * r) / 2  \n\tlargest_triangle = triangle_area - semicircle_area  \n\treturn largest_triangle  \n\nr = float(input(\"Enter the radius of the semicircle: \"))  \nprint(\"The largest triangle that can be inscribed in the semicircle is: \", find_largest_triangle(r))<｜end▁of▁sentence｜>"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\twhile (start <= end): \n\t\tif (start != array[start]): \n\t\t\treturn start; \n\t\tstart = start + 1\n\treturn end + 1\n\ndef find_Smallest_Missing(array,start,end): \n\tif (start > end): \n\t\treturn end + 1\n\tif (start != array[start]): \n\t\treturn start; \n\tmid = int((start + end) / 2) \n\tif (array[mid] == mid): \n\t\treturn find_Smallest_Missing(array,mid+1,end) \n\treturn find_Smallest_Missing(array,start,mid) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 10] \nn = len(array) \nprint(\"Smallest missing element is\", \n\tfind_Smallest_Missing(array, 0, n-1))<｜end▁of▁sentence｜>"}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\tstring = list(string)\n\tfor i in range(len(string)):\n\t\tif string[i] == ' ':\n\t\t\tstring[i] = '%20'\n\treturn ''.join(string)\n\nprint(replace_spaces('hello world'))<｜end▁of▁sentence｜>"}
{"ID": 28, "source": "MBPP:629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\teven = [] \n\todd = [] \n\tfor i in list: \n\t\tif (i % 2 == 0): \n\t\t\teven.append(i) \n\t\telse: \n\t\t\todd.append(i) \n\tprint(\"Even lists:\", even) \n\tprint(\"Odd lists:\", odd) \n\nlist = [1,2,3,4,5,6,7,8,9,10] \nSplit(list)<｜end▁of▁sentence｜>"}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t\"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n\tres = []\n\tfor ele in test_tup:\n\t\tres.extend([(ele[0] + a, ele[1] + b)\n\t\t\t\tfor a in range(-1, 2) for b in range(-1, 2)])\n\treturn res\n\ntest_tup = [(3, 4), (7, 8), (7, 2), (9, 6)]\nprint(\"The original tuple is : \" + str(test_tup))\nprint(\"The extracted adjacent coordinates : \" + str(get_coordinates(test_tup)))<｜end▁of▁sentence｜>"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\timport re\n\ttext = re.sub(r\"\\s\", \"_\", text)\n\treturn text\n\ndef replace_underscores(text):\n\timport re\n\ttext = re.sub(r\"_\", \" \", text)\n\treturn text\n\nprint(replace_spaces(\"Hello World\"))\nprint(replace_underscores(\"Hello_World\"))<｜end▁of▁sentence｜>"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\tcount=0\n\tres=[]\n\tfor i in num_list:\n\t\tif i==0:\n\t\t\tcount+=1\n\t\telse:\n\t\t\tres.append(i)\n\twhile count:\n\t\tres.append(0)\n\t\tcount-=1\n\treturn res\nnum_list=[0,1,0,2,0,3,4,0,5,6,7,8,9,10,0,12,0]\nprint(\"Original list:\",num_list)\nprint(\"List after pushing all zeros to end of list:\",move_zero(num_list))<｜end▁of▁sentence｜>"}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\tsum = 0\n\tfor i in range(0, n) : \n\t\tfor j in range(i + 1, n) : \n\t\t\tsum = sum + (arr[i] ^ arr[j]) \n\treturn 2 * sum\n\narr = [ 7, 3, 5 ] \nn = len(arr) \nprint(pair_OR_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tsum = sum + (2 * i) * (2 * i) * (2 * i) * (2 * i) \n\treturn sum\nn = int(input(\"Enter the number: \"))\nprint(even_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\t"}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b**2 - 4*a*c \n\tif d >= 0: \n\t\tprint(\"Real and Different Roots\") \n\t\tprint((-b + d**0.5)/(2 * a)) \n\t\tprint((-b - d**0.5)/(2 * a)) \n\telse:\n\t\tprint(\"Complex Roots\") \n\t\tprint(- b / (2 * a), \" + i\", d**0.5) \n\t\tprint(- b / (2 * a), \" - i\", d**0.5) \n\na = 1\nb = 10\nc = -24\n\nif a<0:\n\tprint(\"Invalid quadratic equation\")\nelse:\n\tCheck_Solution(a, b, c)<｜end▁of▁sentence｜>"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t\"\"\"\n\tDescription:\n\t\tThis function is used to check whether the given amount has no profit and no loss\n\tParameter:\n\t\tactual_cost (float): The actual cost of the product\n\t\tsale_amount (float): The sale amount of the product\n\tReturn:\n\t\tTrue (bool): If the given amount has no profit and no loss\n\t\tFalse (bool): If the given amount has profit or loss\n\t\"\"\"\n\tif actual_cost == sale_amount:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,100.01))\nprint(noprofit_noloss(100,99.99))\nprint(noprofit_noloss(100,101))\nprint(noprofit_noloss(100,99))<｜end▁of▁sentence｜>"}
{"ID": 37, "source": "MBPP:638", "prompt": "\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate wind chill index.\n\"\"\"\ndef wind_chill(v,t):\n\tw = 35.74 + 0.6215*t + (0.4275*t - 35.75) * v**0.16\n\treturn w\n\ndef main():\n\tv = float(input(\"Enter wind speed in miles per hour: \"))\n\tt = float(input(\"Enter temperature in Fahrenheit: \"))\n\tw = wind_chill(v,t)\n\tprint(\"Wind chill index is\",w)\n\nmain()<｜end▁of▁sentence｜>"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\tresult = 0\n\tfor name in sample_names:\n\t\tif name[0] == name[0].upper():\n\t\t\tresult += len(name)\n\treturn result\n\nprint(sample_nam([\"Eleanor\", \"Evelyn\", \"Sammy\", \"Owen\", \"Gavin\"]))<｜end▁of▁sentence｜>"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\"\"\"\n\t>>> remove_parenthesis(\"example (unwanted thing) example\")\n\t'example  example'\n\t>>> remove_parenthesis(\"example (unwanted thing) example\")\n\t'example  example'\n\t>>> remove_parenthesis(\"a (bc d)e\")\n\t'a e'\n\t>>> remove_parenthesis(\"a (bc d) (e f) (g)\")\n\t'a  ()'\n\t>>> remove_parenthesis(\"(first group) (second group) (third group)\")\n\t'(first group) (second group) (third group)'\n\t\"\"\"\n\tresult = []\n\tskip = 0\n\tfor i in items:\n\t\tif i == '(':\n\t\t\tskip += 1\n\t\telif i == ')' and skip > 0:\n\t\t\tskip -= 1\n\t\telif skip == 0:\n\t\t\tresult.append(i)\n\treturn \"\".join(result)\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\"\"\"\n\tReturns True if n is nonagonal and False if not.\n\t\"\"\"\n\ttest = 1\n\ti = 1\n\twhile test < n:\n\t\ttest = i * (2 * i - 1)\n\t\tif test == n:\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n\ndef nonagonal(n):\n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\ndef main():\n\t\"\"\"\n\tFind the first nonagonal number to contain four digits.\n\t\"\"\"\n\tn = 1\n\twhile len(str(nonagonal(n))) < 4:\n\t\tn += 1\n\twhile True:\n\t\tif is_nonagonal(nonagonal(n)):\n\t\t\tprint(nonagonal(n))\n\t\t\tbreak\n\t\tn += 1\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tif i not in res:\n\t\t\tres.append(i)\n\treturn res\n\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (7, 8), (5, 6)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The filtered list is : \" + str(remove_similar_row(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\tpatterns = '\\Bz\\B'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_wordz_middle(\"Python Exercises.\"))<｜end▁of▁sentence｜>"}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\tk = k - 1\n\ti = 0\n\twhile(i < k): \n\t\ttemp = input[i] \n\t\tinput[i] = input[k] \n\t\tinput[k] = temp \n\t\ti += 1\n\t\tk -= 1\n\ninput = [1, 2, 3, 4, 5, 6] \nk = 4\nreverse_Array_Upto_K(input, k) \nprint(input)<｜end▁of▁sentence｜>"}
{"ID": 44, "source": "MBPP:645", "prompt": "\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the product of it’s kth index in the given tuples.\n\"\"\"\ndef find_k_product(test_list, K):\n\tres = 1\n\tfor idx, ele in enumerate(test_list):\n\t\tif idx == K:\n\t\t\tres *= ele\n\treturn res\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 2\nprint(\"The original list is : \" + str(test_list))\nprint(\"The product of Kth index : \" + str(K))\nprint(\"The extracted product is : \" + str(find_k_product(test_list, K)))<｜end▁of▁sentence｜>"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t\"\"\"\n\tThis function returns the number of cubes of size k in a cube of size n.\n\t\"\"\"\n\tcount = 0\n\tif N >= K:\n\t\tcount = (N-K+1)**3\n\treturn count\n\nN = int(input(\"Enter the size of the cube: \"))\nK = int(input(\"Enter the size of the cubes: \"))\nprint(No_of_cubes(N,K))<｜end▁of▁sentence｜>"}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\"\"\"\n\t>>> split_upperstring(\"HelloWorld\")\n\t['Hello', 'World']\n\t>>> split_upperstring(\"HelloWorldAndHowAreYou\")\n\t['Hello', 'World', 'And', 'How', 'Are', 'You']\n\t>>> split_upperstring(\"HelloWorldAndHowAreYouAndIAmFine\")\n\t['Hello', 'World', 'And', 'How', 'Are', 'You', 'And', 'I', 'Am', 'Fine']\n\t\"\"\"\n\tresult = []\n\tstart = 0\n\tfor i in range(len(text)):\n\t\tif text[i].isupper():\n\t\t\tresult.append(text[start:i])\n\t\t\tstart = i\n\tresult.append(text[start:])\n\treturn result\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 47, "source": "MBPP:648", "prompt": "\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\ndef exchange_elements(lst):\n\t\"\"\"\n\tExchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\t\"\"\"\n\tlst[::2], lst[1::2] = lst[1::2], lst[::2]\n\treturn lst\n\nprint(exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\tsum_list = 0\n\tfor i in range(m, n+1, 1):\n\t\tsum_list += nums[i]\n\treturn sum_list\n\nnums=input(\"Enter the list of numbers: \")\nnums=nums.split()\nnums=[int(x) for x in nums]\nm=int(input(\"Enter the value of m: \"))\nn=int(input(\"Enter the value of n: \"))\nprint(\"Original list:\",nums)\nprint(\"Range:\",m,\",\",n)\nprint(\"Sum of the numbers in the said list between mth and nth index: \",sum_Range_list(nums, m, n))<｜end▁of▁sentence｜>"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\tarr1.sort()\n\tarr2.sort()\n\tif(n != m):\n\t\treturn False\n\tfor i in range(0,n):\n\t\tif(arr1[i] != arr2[i]):\n\t\t\treturn False\n\treturn True\n\narr1 = [1,2,3,4,5]\narr2 = [5,4,3,2,1]\nn = len(arr1)\nm = len(arr2)\nif(are_Equal(arr1,arr2,n,m)):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\"\"\"\n\tFunction to check if one tuple is a subset of another tuple.\n\t\"\"\"\n\tflag = 0\n\tfor i in test_tup1:\n\t\tif i not in test_tup2:\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 0:\n\t\tprint(\"Yes, test_tup1 is a subset of test_tup2\")\n\telse:\n\t\tprint(\"No, test_tup1 is not a subset of test_tup2\")\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncheck_subset(test_tup1, test_tup2)<｜end▁of▁sentence｜>"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\tres = []\n\tfor i in range(len(test_list[0])):\n\t\ttemp = []\n\t\tfor j in range(len(test_list)):\n\t\t\ttemp.append(test_list[j][i])\n\t\tres.append(tuple(temp))\n\treturn res\n\ntest_list = [(5, 6, 7), (8, 3, 1), (9, 2, 4)]\nprint(matrix_to_list(test_list))<｜end▁of▁sentence｜>"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\td = {}\n\tfor k,v in l:\n\t\td.setdefault(k,[]).append(v)\n\treturn d\n\nprint(grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]))<｜end▁of▁sentence｜>"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\tperimeter=2*(l+b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\tarea=l*b\n\treturn area\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\tcircumference=2*3.14*r\n\treturn circumference\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea=3.14*r*r\n\treturn area\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef cylinder_surface_area(r,h):\n\tsurface_area=2*3.14*r*h+2*3.14*r*r\n\treturn surface_area\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r,h):\n\tvolume=3.14*r*r*h\n\treturn volume\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\tsurface_area=4*3.14*r*r\n\treturn surface_area\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\tvolume=4/3*3.14*r*r*r\n\treturn volume\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef cone_surface_area(r,l):\n\tsurface_area=3.14*r*l+3.14*r*r\n\treturn surface_area\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r,h):\n\tvolume=3.14*r*r*h/3\n\treturn volume<｜end▁of▁sentence｜>"}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i * i * i * i * i \n\treturn sum\nn = 5\nprint(fifth_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 55, "source": "MBPP:656", "prompt": "\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n): \n\ta.sort() \n\tb.sort() \n\tsum=0\n\tfor i in range(n): \n\t\tsum=sum+abs(a[i]-b[i]) \n\treturn sum\na=[4,1,8,7] \nb=[2,3,6,5] \nn=len(a) \nprint(find_Min_Sum(a,b,n))<｜end▁of▁sentence｜>"}
{"ID": 56, "source": "MBPP:657", "prompt": "\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\n\"\"\"\ndef first_Digit(n) : \n\tfact = 1\n\tfor i in range(2, n + 1) : \n\t\tfact = fact * i \n\twhile (fact >= 10) : \n\t\tfact = fact // 10\n\treturn fact \nn = 120\nprint(first_Digit(n))<｜end▁of▁sentence｜>"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\tmax_count = 0\n\tmax_item = None\n\tcount = {}\n\tfor i in list1:\n\t\tif i not in count:\n\t\t\tcount[i] = 1\n\t\telse:\n\t\t\tcount[i] += 1\n\t\tif count[i] > max_count:\n\t\t\tmax_count = count[i]\n\t\t\tmax_item = i\n\treturn max_item\n\nprint(max_occurrences([1, 3, 2, 1, 4, 1]))<｜end▁of▁sentence｜>"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\tsize = len(x) \n\trepeated = [] \n\tfor i in range(size): \n\t\tk = i + 1\n\t\tfor j in range(k, size): \n\t\t\tif x[i] == x[j] and x[i] not in repeated: \n\t\t\t\trepeated.append(x[i]) \n\treturn repeated \n\nlist1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20] \nprint (Repeat(list1))<｜end▁of▁sentence｜>"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\ta = []\n\tfor i in range(l1,r1+1):\n\t\tif i not in range(l2,r2+1):\n\t\t\ta.append(i)\n\tfor i in range(l2,r2+1):\n\t\tif i not in range(l1,r1+1):\n\t\t\ta.append(i)\n\treturn a\n\nprint(find_Points(2,3,4,5))<｜end▁of▁sentence｜>"}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\tsum = [0 for i in range(n + 1)] \n\tsum[0] = 0\n\tsum[1] = arr[0] \n\tsum[2] = arr[1] + arr[0] \n\tfor i in range(3, n + 1): \n\t\tsum[i] = max(max(sum[i - 1], sum[i - 2] + arr[i - 1]), \n\t\t\t\t\tarr[i - 1] + arr[i - 2] + sum[i - 3]) \n\treturn sum[n] \narr = [100, 1000, 100, 1000, 1] \nn = len(arr) \nprint(max_sum_of_three_consecutive(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\tdict2 = {}\n\tfor key in dict1:\n\t\tdict2[key] = sorted(dict1[key])\n\treturn dict2\n\ndict1 = {1: [1, 3, 2], 2: [1, 2, 3], 3: [3, 2, 1]}\nprint(sorted_dict(dict1))<｜end▁of▁sentence｜>"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t\"\"\"\n\t:type n: int\n\t:type x: int\n\t:type y: int\n\t:rtype: int\n\t\"\"\"\n\tk = n\n\twhile k > 0:\n\t\tif k % x == y:\n\t\t\treturn k\n\t\tk -= 1\n\treturn -1\n\nif __name__ == '__main__':\n\tn = int(input())\n\tx = int(input())\n\ty = int(input())\n\tprint(find_max_val(n, x, y))<｜end▁of▁sentence｜>"}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\tsum = 0\n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif i % 2 == 0 : \n\t\t\tsum += i\n\t\t\tcount += 1\n\taverage = sum / count\n\treturn average\nn = int(input(\"Enter the number : \"))\nprint(\"Average of even numbers till\", n, \"is\", average_Even(n))<｜end▁of▁sentence｜>"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\tnew_list=[]\n\tfor index,num in enumerate(num_list):\n\t\tif index==0:\n\t\t\tpass\n\t\telse:\n\t\t\tnew_list.append(num)\n\tnew_list.append(num_list[0])\n\treturn new_list\nnum_list=[1,2,3,4,5]\nprint(move_last(num_list))<｜end▁of▁sentence｜>"}
{"ID": 65, "source": "MBPP:666", "prompt": "\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n\tcount = 0\n\tfor i in string:\n\t\tif i == char:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_char(\"hello\",'l'))<｜end▁of▁sentence｜>"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\tfinal = [each for each in string if each in vowels] \n\tprint(len(final)) \n\tprint(final) \n\t\nstring = \"Geeks for Geeks\"\nvowels = \"AaEeIiOoUu\"\nCheck_Vow(string, vowels);<｜end▁of▁sentence｜>"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\n\t# Count variable \n\tcount = 0\n\t\n\t# making the string \n\tnew_str = \"\" \n\t\n\tfor i in string: \n\t\t\n\t\t# Check for repeated char \n\t\tif i == char: \n\t\t\tcount += 1\n\t\t\t\n\t\t\t# If count is greater than 1 \n\t\t\tif count > 1: \n\t\t\t\tcontinue\n\t\t\t\t\n\t\t# Append current char \n\t\tnew_str += i \n\treturn new_str \n\n# Driver code \nstring = \"geeksforgeeks\"\nchar = \"e\"\nprint(replace(string, char))<｜end▁of▁sentence｜>"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\timport re \n\tregex = \"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$\"\n\tif(re.search(regex, Ip)): \n\t\treturn True\n\telse: \n\t\treturn False\n\nif __name__ == '__main__' : \n\tIp = \"192.168.0.1\"\n\tif (check_IP(Ip)): \n\t\tprint(\"Valid Ip address\") \n\telse: \n\t\tprint(\"Invalid Ip address\") \n\n\tIp = \"110.234.52.124\"\n\tif (check_IP(Ip)): \n\t\tprint(\"Valid Ip address\") \n\telse: \n\t\tprint(\"Invalid Ip address\") \n\n\tIp = \"366.1.2.2\"\n\tif (check_IP(Ip)): \n\t\tprint(\"Valid Ip address\") \n\telse: \n\t\tprint(\"Invalid Ip address\")<｜end▁of▁sentence｜>"}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\tflag=0\n\tfor i in range(len(nums)-1):\n\t\tif(nums[i]>nums[i+1]):\n\t\t\tflag=1\n\t\telse:\n\t\t\tflag=0\n\t\t\tbreak\n\tif(flag==1):\n\t\treturn True\n\telse:\n\t\treturn False\n\nnums=[1,2,3,4,5,6,7,8,9,10]\nprint(decreasing_trend(nums))<｜end▁of▁sentence｜>"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\n\tif (n == 0): \n\t\treturn 1\n\t\n\tif ((n & (n + 1)) == 0): \n\t\treturn n \n\t\n\treturn ((n | (n + 1)) & (~(n & (n + 1)))) \n\n\nn = 21\nprint(set_Right_most_Unset_Bit(n))<｜end▁of▁sentence｜>"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\tmax_num = num1\n\tif num2 > max_num:\n\t\tmax_num = num2\n\tif num3 > max_num:\n\t\tmax_num = num3\n\treturn max_num\n\nprint(max_of_three(1,2,3))\nprint(max_of_three(1,3,2))\nprint(max_of_three(3,2,1))\nprint(max_of_three(3,1,2))\nprint(max_of_three(2,1,3))\nprint(max_of_three(2,3,1))<｜end▁of▁sentence｜>"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\tres = int(\"\".join(map(str, list))) \n\treturn res \nlist = [11, 33, 50] \nprint(convert(list))<｜end▁of▁sentence｜>"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\tfrom collections import OrderedDict\n\tresult = \" \".join(OrderedDict.fromkeys(string.split()))\n\treturn result\n\nstring = \"Python is great and Java is also great\"\nprint(remove_duplicate(string))<｜end▁of▁sentence｜>"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\tsum = x + y\n\tif sum in range(m, n):\n\t\treturn 20\n\telse:\n\t\treturn sum\n\nprint(sum_nums(10, 11, 10, 20))\nprint(sum_nums(10, 2, 10, 20))<｜end▁of▁sentence｜>"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\tpattern = re.compile(r'[\\W_]+')\n\ttext1 = pattern.sub('', text1)\n\treturn text1\n\ntext1 = \" %^&*(_Hi. How_are things+ going on?^&*%$# \"\nprint(remove_extra_char(text1))<｜end▁of▁sentence｜>"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t\"\"\"\n\tThis function checks if the triangle is valid or not.\n\t\"\"\"\n\tif a+b>c and b+c>a and c+a>b:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\ndef main():\n\t\"\"\"\n\tThis is the main function.\n\t\"\"\"\n\ta = int(input(\"Enter the first side of the triangle: \"))\n\tb = int(input(\"Enter the second side of the triangle: \"))\n\tc = int(input(\"Enter the third side of the triangle: \"))\n\tif validity_triangle(a,b,c):\n\t\tprint(\"The triangle is valid.\")\n\telse:\n\t\tprint(\"The triangle is not valid.\")\n\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\tstr1 = str1.replace(' ','')\n\treturn str1\nprint(remove_spaces(\"P F Chowdary\"))\nprint(remove_spaces(\"P F\"))\nprint(remove_spaces(\"P    F\"))<｜end▁of▁sentence｜>"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\tprint(ditionary[key])\n\ndictionary = {\n\t\"name\":\"Ram\",\n\t\"age\":20,\n\t\"address\":\"Kathmandu\"\n}\n\naccess_key(dictionary,\"name\")<｜end▁of▁sentence｜>"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\tflag=0\n\tfor i in range(len(nums)-1):\n\t\tif(nums[i]>nums[i+1]):\n\t\t\tflag=1\n\t\t\tbreak\n\tif(flag==0):\n\t\treturn True\n\telse:\n\t\treturn False\n\nnums=list(map(int,input().split()))\nprint(increasing_trend(nums))<｜end▁of▁sentence｜>"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\ta = []\n\tif n % 2 == 0: \n\t\ta.append(2) \n\tfor i in range(3, int(n**0.5)+1, 2): \n\t\twhile n % i== 0: \n\t\t\ta.append(i) \n\t\t\tn = n / i \n\tif n > 2: \n\t\ta.append(n) \n\treturn a\n\nn = int(input(\"Enter a number: \"))\nprint(smallest_Divisor(n))<｜end▁of▁sentence｜>"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\tresult = map(lambda n1,n2:n1*n2,nums1,nums2)\n\treturn list(result)\n\nnums1 = [1,2,3,4,5]\nnums2 = [6,7,8,9,10]\nprint(mul_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\tj = 1; \n\twhile j*j <= n : \n\t\tb = sqrt(n - j*j) \n\t\tif b - floor(b) == 0 : \n\t\t\treturn True\n\t\tj = j + 1\n\treturn False\nn = int(input())\nif (sum_Square(n)) : \n\tprint(\"Yes\") \nelse : \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\tcount = 0\n\tfor i in str: \n\t\tif (i == x): \n\t\t\tcount += 1\n\treturn count \n\nstr = \"geeksforgeeks\"\nx = 'e'\nprint(count_Char(str, x))<｜end▁of▁sentence｜>"}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\tprime = [True] * (n + 1) \n\tp = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * 2, n + 1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\tsum = 0\n\tfor i in range(2, n + 1): \n\t\tif(prime[i] == True): \n\t\t\tsum += i \n\treturn sum\nn = int(input(\"Enter the number: \"))\nprint(sum_Of_Primes(n))<｜end▁of▁sentence｜>"}
{"ID": 85, "source": "MBPP:686", "prompt": "\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the frequency of each element in the given list.\n\"\"\"\ndef freq_element(test_tup):\n\t\"\"\"\n\t:param test_tup:\n\t:return:\n\t\"\"\"\n\tres = {}\n\tfor ele in test_tup:\n\t\tres[ele] = res.get(ele, 0) + 1\n\treturn res\n\n\nif __name__ == '__main__':\n\ttest_tup = (4, 5, 4, 5, 6, 6, 5)\n\tprint(freq_element(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t\"\"\"\n\tThis function takes two integers and returns the greatest common divisor (gcd) of the two integers.\n\t\"\"\"\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn recur_gcd(b, a % b)\n\n\nprint(recur_gcd(12, 14))\nprint(recur_gcd(6, 12))\nprint(recur_gcd(5, 9))\nprint(recur_gcd(8, 12))<｜end▁of▁sentence｜>"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t\"\"\"\n\t>>> len_complex(3,4)\n\t5.0\n\t\"\"\"\n\treturn (a**2+b**2)**0.5\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]\narr = [1, 3, 6, 1, 0, 9]\nsize = len(arr)\nprint(\"Minimum number of jumps to reach end is\", min_jumps(arr, size))<｜end▁of▁sentence｜>"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\tresult = []\n\tfor i in range(len(nums)-1):\n\t\tresult.append(nums[i] * nums[i+1])\n\treturn result\n\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6]))\nprint(mul_consecutive_nums([4, 5, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 90, "source": "MBPP:691", "prompt": "\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\ndef group_element(test_list):\n\tres = {}\n\tfor sub in test_list:\n\t\tres.setdefault(sub[1], []).append(sub[0])\n\treturn res\n\ntest_list = [(1, 2), (3, 2), (1, 3), (3, 4), (1, 2), (5, 6)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The grouped elements : \" + str(group_element(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfact = 1\n\tfor i in range(1, N + 1): \n\t\tfact = fact * i \n\tprint(abs(fact) % 100) \nN = 6\nlast_Two_Digits(N)<｜end▁of▁sentence｜>"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\timport re\n\ttext2 = re.sub(' +', ' ', text1)\n\treturn text2\n\ntext1 = \"This is a    test string with multiple spaces.\"\nprint(remove_multiple_spaces(text1))<｜end▁of▁sentence｜>"}
{"ID": 93, "source": "MBPP:694", "prompt": "\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n\tres = list(sorted({ele for val in test_dict.values() for ele in val}))\n\treturn res\n\ntest_dict = {'gfg' : [5, 6, 7, 8],\n\t\t\t'is' : [10, 11, 7, 5],\n\t\t\t'best' : [6, 12, 10, 8],\n\t\t\t'for' : [1, 2, 5]}\n\nprint(extract_unique(test_dict))<｜end▁of▁sentence｜>"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\tres = all(x < y for x, y in zip(test_tup1, test_tup2))\n\treturn res\n\ntest_tup1 = (3, 2, 4, 5)\ntest_tup2 = (1, 2, 3, 4)\nprint (\"The original tuple 1 : \" + str(test_tup1))\nprint (\"The original tuple 2 : \" + str(test_tup2))\nres = check_greater(test_tup1, test_tup2)\nprint (\"Does each element in first tuple is greater than its corresponding index in second tuple ? : \" + str(res))<｜end▁of▁sentence｜>"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\tresult = list(map(lambda x, y: x + y, list1, list2))  \n\treturn result  \n\nlist1 = [['a', 'b'], ['c', 'd'], ['e', 'f']]  \nlist2 = [['p', 'q'], ['r', 's'], ['t', 'u']]  \nprint(zip_list(list1,list2))<｜end▁of▁sentence｜>"}
{"ID": 96, "source": "MBPP:697", "prompt": "\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n\tcount = 0\n\tfor i in array_nums:\n\t\tif i % 2 == 0:\n\t\t\tcount = count + 1\n\treturn count\nprint(count_even([1, 2, 3, 5, 7, 8, 9, 10]))\nprint(count_even([1, 3, 5, 7, 9]))<｜end▁of▁sentence｜>"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\tresult = dict(sorted(test_dict.items(), key = lambda x: x[0][0] * x[0][1]))\n\treturn result\n\ntest_dict = {(1, 3): 5, (2, 4): 6, (3, 1): 7, (4, 2): 8}\nprint(sort_dict_item(test_dict))<｜end▁of▁sentence｜>"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\tn = len(str1) \n\tm = len(str2) \n\tif n != m : \n\t\treturn -1\n\tnum_ones = 0\n\tnum_zeros = 0\n\tnum_unmatch = 0\n\tfor i in range(n) : \n\t\tif str1[i] != str2[i] : \n\t\t\tif str1[i] == '1' : \n\t\t\t\tnum_ones += 1\n\t\t\telse : \n\t\t\t\tnum_zeros += 1\n\t\t\tnum_unmatch += 1\n\tif num_ones == num_zeros : \n\t\treturn num_unmatch // 2\n\telse : \n\t\treturn -1\n\nstr1 = \"1101\"\nstr2 = \"1010\"\nprint(min_Swaps(str1, str2))<｜end▁of▁sentence｜>"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr\n\nlist1 = [10,20,30,40,40,40,70,80,99]\nprint(count_range_in_list(list1, 40, 100))\n\nlist2 = ['a','b','c','d','e','f']\nprint(count_range_in_list(list2, 'a', 'e'))<｜end▁of▁sentence｜>"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\tleft_sum = 0\n\tright_sum = sum(arr)\n\tfor i in range(len(arr)):\n\t\tright_sum -= arr[i]\n\t\tif left_sum == right_sum:\n\t\t\treturn i\n\t\tleft_sum += arr[i]\n\treturn -1\n\n\nif __name__ == '__main__':\n\tarr = [-7, 1, 5, 2, -4, 3, 0]\n\tprint(equilibrium_index(arr))<｜end▁of▁sentence｜>"}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\tarr.sort()\n\tmin_elem = 0\n\ti = 0\n\tj = 0\n\twhile i < n:\n\t\tif arr[i] - arr[j] > k:\n\t\t\tj += 1\n\t\telse:\n\t\t\tmin_elem = max(min_elem, i - j + 1)\n\t\t\ti += 1\n\treturn n - min_elem\n\n\nif __name__ == '__main__':\n\tarr = [1, 3, 4, 9, 10, 11, 12, 17, 20]\n\tn = len(arr)\n\tk = 4\n\tprint(removals(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\tflag=0\n\tfor i in d:\n\t\tif i==x:\n\t\t\tflag=1\n\t\t\tbreak\n\tif flag==1:\n\t\tprint(\"Key is present\")\n\telse:\n\t\tprint(\"Key is not present\")\n\nd={\"a\":1,\"b\":2,\"c\":3,\"d\":4}\nx=input(\"Enter the key to be searched: \")\nis_key_present(d,x)<｜end▁of▁sentence｜>"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += 1/i\n\treturn sum\n\nprint(harmonic_sum(7))\nprint(harmonic_sum(4))<｜end▁of▁sentence｜>"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\tlist1.sort(key=len)\n\tfor i in range(len(list1)):\n\t\tlist1[i].sort()\n\treturn list1\n\nprint(sort_sublists([[1, 3, 4, 5], [1], [1, 2]]))<｜end▁of▁sentence｜>"}
{"ID": 105, "source": "MBPP:706", "prompt": "\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \n\ti = 0\n\tj = 0\n\tif m < n: \n\t\treturn 0\n\n\tarr1.sort() \n\tarr2.sort() \n\t\n\twhile i < n and j < m: \n\t\tif arr1[j] < arr2[i]: \n\t\t\tj += 1\n\t\telif arr1[j] == arr2[i]: \n\t\t\tj += 1\n\t\t\ti += 1\n\t\telif arr1[j] > arr2[i]: \n\t\t\treturn 0\n\treturn False if i < n else True\n\narr1 = [11, 1, 13, 21, 3, 7] \narr2 = [11, 3, 7, 1] \n\nm = len(arr1) \nn = len(arr2) \n\nif(is_subset(arr1, m, arr2, n)): \n\tprint(\"arr2 is subset of arr1 \") \nelse: \n\tprint(\"arr2 is not a subset of arr1 \")<｜end▁of▁sentence｜>"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\tcount = 0\n\twhile (n) : \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count \n\ndef countSetBits(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tcount += count_Set_Bits(i) \n\treturn count \n\nn = int(input(\"Enter the number : \"))\nprint(countSetBits(n))<｜end▁of▁sentence｜>"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\tli = list(string.split(\" \")) \n\treturn li\n\nstr1 = \"Geeks for Geeks\"\nprint(Convert(str1))<｜end▁of▁sentence｜>"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\tres = {}\n\tfor i in test_list:\n\t\tres[i] = res.get(i, 0) + 1\n\tres = list(res.items())\n\ttemp = sorted(res, key = lambda x: x[1], reverse = True)\n\treturn temp\n\ntest_list = [(5, 6), (5, 7), (5, 6), (5, 7), (6, 7), (6, 7)]\nprint(get_unique(test_list))<｜end▁of▁sentence｜>"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t\"\"\"\n\tWrite a function to access the initial and last data of the given tuple record.\n\t\"\"\"\n\tres = test_tup[0], test_tup[-1]\n\treturn res\n\n\nprint(front_and_rear((1, 2, 3, 4, 5)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(front_and_rear((1, 2, 3"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\todd_product = 1\n\teven_product = 1\n\tn = str(n)\n\tfor i in range(len(n)): \n\t\tif i % 2 == 0: \n\t\t\todd_product *= int(n[i]) \n\t\telse: \n\t\t\teven_product *= int(n[i]) \n\tif odd_product == even_product: \n\t\treturn True\n\telse: \n\t\treturn False\n\nn = int(input(\"Enter a number: \"))\nif product_Equal(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tlist2.append(i)\n\treturn list2\n\nlist1 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\nprint(remove_duplicate(list1))<｜end▁of▁sentence｜>"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\"\"\"\n\tWrite a function to check if the given tuple contains all valid values or not.\n\t\"\"\"\n\tres = True\n\tfor ele in test_tup:\n\t\tif not ele:\n\t\t\tres = False\n\t\t\tbreak\n\treturn res\n\ntest_tup = (4, 5, 6, 7, 8)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 0)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, False)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, None)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, ' ')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '0')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'False')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'None')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'True')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'a')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'b')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'c')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7,"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile (n % 2 == 0):  \n\t\tcount += 1\n\t\tn = n // 2\n\tfor i in range(3, int(n**0.5) + 1, 2):  \n\t\twhile (n % i == 0):  \n\t\t\tcount += 1\n\t\t\tn = n // i\n\tif (n > 2):  \n\t\tcount += 1\n\treturn count\n\nn = int(input())\nprint(count_Fac(n))<｜end▁of▁sentence｜>"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\tres = tuple(int(i) for i in test_str.split(\",\"))\n\treturn res\n\ntest_str = \"1,2,3,4,5\"\nprint(str_to_tuple(test_str))<｜end▁of▁sentence｜>"}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\tperimeter = 4 * a\n\treturn perimeter\n\nprint(rombus_perimeter(10))<｜end▁of▁sentence｜>"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [(x - mean) ** 2 for x in data]\n\tvariance = sum(deviations) / n\n\treturn variance ** 0.5\n\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef var_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [(x - mean) ** 2 for x in data]\n\tvariance = sum(deviations) / n\n\treturn variance\n\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef cov_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\treturn covariance\n\n\n\"\"\"\nWrite a function to calculate the correlation.\n\"\"\"\ndef cor_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\tstd1 = (sum(deviations1) / n) ** 0.5\n\tstd2 = (sum(deviations2) / n) ** 0.5\n\treturn covariance / (std1 * std2)\n\n\n\"\"\"\nWrite a function to calculate the mean absolute deviation.\n\"\"\"\ndef mad_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [abs(x - mean) for x in"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\tlist2 = []\n\tfor i in range(0,len(list1),2):\n\t\tlist2.append(list1[i])\n\treturn list2\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(alternate_elements(list1))<｜end▁of▁sentence｜>"}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\tpatterns = 'ab*?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match(\"ac\"))\nprint(text_match(\"abc\"))\nprint(text_match(\"abbc\"))<｜end▁of▁sentence｜>"}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\ttemp = list(test_tup)\n\ttemp.append(test_dict)\n\treturn tuple(temp)\n\ntest_tup = (1, 2, 3, 4, 5)\ntest_dict = {\"a\": 6, \"b\": 7}\nprint(add_dict_to_tuple(test_tup, test_dict))<｜end▁of▁sentence｜>"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \n\tdp[0][0] = cost[0][0] \n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j] \n\treturn dp[N - 1][N - 1] / (2 * N - 1) \ncost = [[1, 2, 3], \n\t\t[6, 5, 4], \n\t\t[7, 3, 9]] \nN = len(cost) \nprint(maxAverageOfPath(cost, N))<｜end▁of▁sentence｜>"}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\tresult = {}\n\tfor key,value in students.items():\n\t\tif value[0] >= h and value[1] >= w:\n\t\t\tresult[key] = value\n\treturn result\n\nstudents = {\n\t\"Ram\": (6, 72),\n\t\"Laxman\": (5.9, 67),\n\t\"Sita\": (5, 60),\n\t\"Laxmi\": (5.4, 60)\n}\n\nh = 5.5\nw = 65\n\nprint(filter_data(students,h,w))<｜end▁of▁sentence｜>"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor i in range(len(nums1)):\n\t\tif nums1[i] == nums2[i]:\n\t\t\tcount += 1\n\treturn count\n\n\ndef main():\n\tprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 2, 3, 1, 2, 6, 7, 9, 9]))\n\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = 0\n\tfor digit in str(base ** power):\n\t\tresult += int(digit)\n\treturn result\n\nprint(power_base_sum(2, 15))\nprint(power_base_sum(2, 1000))<｜end▁of▁sentence｜>"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\\\"(.+?)\\\"'\n\tresult = re.findall(pattern, text1)\n\treturn result\n\ntext1 = '\"Python\", \"PHP\", \"Java\"'\nprint(extract_quotation(text1))<｜end▁of▁sentence｜>"}
{"ID": 125, "source": "MBPP:726", "prompt": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n\tres = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n\treturn res\n\ntest_tup = (1, 5, 7, 8, 10)\nprint(multiply_elements(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\tS = re.sub(r'[^a-zA-Z0-9]', '', S)\n\treturn S\n\nS = \"Hello, World!\"\nprint(remove_char(S))<｜end▁of▁sentence｜>"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\tlst3=[]\n\tfor i in range(len(lst1)):\n\t\tlst3.append(lst1[i]+lst2[i])\n\treturn lst3\n\nlst1=[1,2,3,4,5]\nlst2=[6,7,8,9,10]\nprint(sum_list(lst1,lst2))<｜end▁of▁sentence｜>"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\tprint(list(map(lambda x,y:x+y,nums1,nums2)))\n\nadd_list([1,2,3],[4,5,6])<｜end▁of▁sentence｜>"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\ti = 0\n\twhile i < len(nums) - 1:\n\t\tif nums[i] == nums[i + 1]:\n\t\t\tnums.pop(i)\n\t\telse:\n\t\t\ti += 1\n\treturn nums\n\nprint(consecutive_duplicates([0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9]))<｜end▁of▁sentence｜>"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\timport math\n\tl=math.sqrt(r**2+h**2)\n\tlateralsurface=math.pi*r*l\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cone.\n\"\"\"\ndef totalsurface_cone(r,h):\n\timport math\n\tl=math.sqrt(r**2+h**2)\n\ttotalsurface=math.pi*r*(r+l)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\timport math\n\tvolume=math.pi*r**2*h/3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\timport math\n\tlateralsurface=2*math.pi*r*h\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef totalsurface_cylinder(r,h):\n\timport math\n\ttotalsurface=2*math.pi*r*(r+h)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\timport math\n\tvolume=math.pi*r**2*h\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\timport math\n\tlateralsurface=4*math.pi*r**2\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a sphere.\n\"\"\"\ndef totalsurface_sphere(r):\n\timport math\n\ttotalsurface=4*math.pi*r**2\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\timport math\n\tvolume=4/3*math.pi*r**3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t\"\"\"\n\tThis function replaces all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n\ttext = text.replace(\" \", \":\")\n\ttext = text.replace(\",\", \":\")\n\ttext = text.replace(\".\", \":\")\n\treturn text\n\nprint(replace_specialchar(\"This is a test. It is only a test.\"))<｜end▁of▁sentence｜>"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\tleft, right = 0, len(A) - 1\n\tresult = -1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tresult = mid\n\t\t\tright = mid - 1\n\t\telif A[mid] > x:\n\t\t\tright = mid - 1\n\t\telse:\n\t\t\tleft = mid + 1\n\treturn result\n\n\nif __name__ == '__main__':\n\tA = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\tres = 0\n\tfor i in range(0,n):\n\t\tprod = arr[i]\n\t\tres += prod\n\t\tfor j in range(i+1,n):\n\t\t\tprod *= arr[j]\n\t\t\tres += prod\n\treturn res\n\narr = [1,2,3]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))<｜end▁of▁sentence｜>"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\tx = n & 1 \n\tn = n ^ 1 \n\tn = n ^ (1 << int(math.log2(n))) \n\tn = n ^ 1 \n\tn = n | x \n\treturn n \n\nn = 10\nprint(toggle_middle_bits(n))<｜end▁of▁sentence｜>"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\tlo = 0\n\thi = len(a)\n\twhile lo < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telse:\n\t\t\thi = mid\n\treturn lo\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\tlo = 0\n\thi = len(a)\n\twhile lo < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif x < a[mid]:\n\t\t\thi = mid\n\t\telse:\n\t\t\tlo = mid + 1\n\treturn lo\n\n\"\"\"\nWrite a function to find the first occurrence of a specified value in a given sorted array.\n\"\"\"\ndef first_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == 0 or a[mid - 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\thi = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the last occurrence of a specified value in a given sorted array.\n\"\"\"\ndef last_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == len(a) - 1 or a[mid + 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tlo = mid + 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the first greater element than a specified value in a given sorted array.\n\"\"\"\ndef first_greater(a, x):\n\tlo = "}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\tif re.search(regex, string): \n\t\tprint(\"Valid\") \n\telse: \n\t\tprint(\"Invalid\") \n\nstring = \"geeks\"\ncheck_str(string) \n\nstring = \"geeksforgeeks\"\ncheck_str(string)<｜end▁of▁sentence｜>"}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: sum\n\t\"\"\"\n\tif n < 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\ti = 1\n\twhile True: \n\t\tnum = (i * (i + 1)) // 2\n\t\tif len(str(num)) == n: \n\t\t\treturn i \n\t\ti += 1\nn = 6\nprint(find_Index(n))<｜end▁of▁sentence｜>"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\tres = {test_tup[ele] : test_tup[ele + 1] for ele in range(0, len(test_tup), 2)}\n\treturn res\n\ntest_tup = ('gfg', 'is', 'best', 'for', 'CS')\nprint(tuple_to_dict(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\tn = len(s)\n\tfor i in range(1, n) :\n\t\tif s[i] != s[0] :\n\t\t\treturn False\n\treturn True\n\ns = input(\"Enter the string: \")\nif all_Characters_Same(s) :\n\tprint (\"Yes\")\nelse :\n\tprint (\"No\")<｜end▁of▁sentence｜>"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t\"\"\"\n\tCalculate the area of a tetrahedron.\n\t\"\"\"\n\tarea = (3**0.5) * (side**2)\n\treturn area\n\nprint(area_tetrahedron(10))<｜end▁of▁sentence｜>"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\tlist2=[]\n\tfor i in range(m,n):\n\t\tlist2.append(list1[i])\n\tfor i in range(0,m):\n\t\tlist2.append(list1[i])\n\treturn list2\n\nlist1=[1,2,3,4,5,6,7,8,9]\nm=int(input(\"Enter the number of items to be rotated to right: \"))\nn=len(list1)\nprint(rotate_right(list1,m,n))<｜end▁of▁sentence｜>"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t\"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n\tres = False\n\tfor ele in test_tup:\n\t\tif ele is None:\n\t\t\tres = True\n\t\t\tbreak\n\treturn res\n\ntest_tup = (10, 4, 5, 6, None)\nprint(\"The original tuple : \" + str(test_tup))\nprint(\"Does tuple contain None value ? : \" + str(check_none(test_tup)))<｜end▁of▁sentence｜>"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\tnum_list = []\n\tfor num in range(startnum, endnum+1):\n\t\tnum_list.append(num)\n\t\tnum_str = str(num)\n\t\tfor digit in num_str:\n\t\t\tif int(digit) == 0:\n\t\t\t\tnum_list.remove(num)\n\t\t\t\tbreak\n\t\t\telif num % int(digit) != 0:\n\t\t\t\tnum_list.remove(num)\n\t\t\t\tbreak\n\treturn num_list\n\nprint(divisible_by_digits(1, 22))\nprint(divisible_by_digits(1, 100))\nprint(divisible_by_digits(1, 1000))<｜end▁of▁sentence｜>"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\tpi=3.14\n\tarea=pi*r*r*a/360\n\treturn area\nr=int(input(\"Enter the radius of the circle:\"))\na=int(input(\"Enter the angle of the sector:\"))\nprint(\"Area of the sector is:\",sector_area(r,a))<｜end▁of▁sentence｜>"}
{"ID": 146, "source": "MBPP:747", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \n\t\tfor k in range(m+1)] \n\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\t\t\n\t\t\t\telif (X[i-1] == Y[j-1] and\n\t\t\t\t\tX[i-1] == Z[k-1]): \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\tL[i][j][k-1]) \n\n\treturn L[m][n][o] \n\nX = 'AGGT12'\nY = '12TXAYB'\nZ = '12XBA'\n\nm = len(X) \nn = len(Y) \no = len(Z) \n\nprint('Length of LCS is', \n\tlcs_of_three(X, Y, Z, m, n, o))<｜end▁of▁sentence｜>"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\timport re\n\treturn re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n\nprint(capital_words_spaces(\"Python\"))\nprint(capital_words_spaces(\"PythonExercises\"))\nprint(capital_words_spaces(\"PythonExercisesPracticeSolution\"))<｜end▁of▁sentence｜>"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=int)\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt2(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt3(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt4(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt5(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt6(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt7(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt8(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int"}
{"ID": 149, "source": "MBPP:750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n\ttest_list.append(test_tup)\n\treturn test_list\n\ntest_list = [5, 6, 7]\ntest_tup = (9, 10)\nprint(add_tuple(test_list, test_tup))<｜end▁of▁sentence｜>"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\tn = len(arr)\n\tif i >= (n-2)/2:\n\t\treturn True\n\tif arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2] and check_min_heap(arr, 2*i+1) and check_min_heap(arr, 2*i+2):\n\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5, 6]\nprint check_min_heap(arr, 0)<｜end▁of▁sentence｜>"}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\"\"\"\n\tFunction to find the nth jacobsthal number.\n\t\"\"\"\n\tjacobsthal = [0, 1] \n\tfor i in range(2, n + 1): \n\t\tjacobsthal.append(jacobsthal[i - 1] + 2 * jacobsthal[i - 2]) \n\treturn jacobsthal[n] \n\n# Driver code \nn = 10\nprint(jacobsthal_num(n))<｜end▁of▁sentence｜>"}
{"ID": 152, "source": "MBPP:753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n\t\"\"\"\n\tFunction to find minimum k records from tuple list.\n\t\"\"\"\n\tres = sorted(test_list, key = lambda sub: sub[-1])\n\treturn res[:K]\n\n# Driver Code\ntest_list = [(3, 1, 5), (1, 3, 6), (2, 5, 7), (5, 2, 8), (6, 3, 0)]\nK = 3\nprint(\"The original list is : \" + str(test_list))\nprint(\"The minimum k records are : \" + str(min_k(test_list, K)))<｜end▁of▁sentence｜>"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\tl4 = []\n\tfor i in range(len(l1)):\n\t\tif l1[i] in l2 and l1[i] in l3:\n\t\t\tl4.append(l1[i])\n\treturn l4\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nl2 = [2, 4, 6, 8, 10]\nl3 = [1, 3, 5, 7, 9, 11]\nprint(extract_index_list(l1, l2, l3))<｜end▁of▁sentence｜>"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\tsmallest = None\n\tsecond_smallest = None\n\tfor num in numbers:\n\t\tif smallest == None:\n\t\t\tsmallest = num\n\t\telif num < smallest:\n\t\t\tsecond_smallest = smallest\n\t\t\tsmallest = num\n\t\telif second_smallest == None:\n\t\t\tsecond_smallest = num\n\t\telif num < second_smallest:\n\t\t\tsecond_smallest = num\n\treturn second_smallest\n\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ac\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more(text):\n\tpattern = 'ab*?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_or_more(\"ac\"))\nprint(text_match_zero_or_more(\"abc\"))\nprint(text_match_zero_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn '"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i][::-1] == test_list[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\ntest_list = [\"geeks\", \"best\", \"tseb\", \"for\", \"skeeg\", \"hello\", \"olleh\"]\nprint(count_reverse_pairs(test_list))<｜end▁of▁sentence｜>"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\"\"\"\n\tThis function takes a list as input and returns the number of unique lists within the list.\n\t\"\"\"\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\nprint(unique_sublists([[1,2],[1,2],[1,2],[1,2],[2,1]]))<｜end▁of▁sentence｜>"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\tnum = str(num)\n\tnum = num.split('.')\n\tif len(num) == 1:\n\t\treturn True\n\telif len(num) == 2:\n\t\tif len(num[1]) <= 2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nprint(is_decimal(12.345))\nprint(is_decimal(12.34))\nprint(is_decimal(12))\nprint(is_decimal(12.3))\nprint(is_decimal(12.3456))<｜end▁of▁sentence｜>"}
{"ID": 159, "source": "MBPP:760", "prompt": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif arr[i] == arr[j]:\n\t\t\t\tcount += 1\n\tif count == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(unique_Element(arr,n))<｜end▁of▁sentence｜>"}
{"ID": 160, "source": "MBPP:761", "prompt": "\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n\t\"\"\"\n\td = diameter\n\ta = angle\n\t\"\"\"\n\tpi = 3.14\n\tarc = (pi*d)*(a/360)\n\treturn arc\n\nprint(arc_length(10,90))<｜end▁of▁sentence｜>"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\tmonthnum3 = int(input(\"Enter the month number: \"))\n\tif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n\t\tprint(\"The month number contains 30 days\")\n\telse:\n\t\tprint(\"The month number does not contain 30 days\")\ncheck_monthnumber_number(monthnum3)<｜end▁of▁sentence｜>"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\tarr = sorted(arr) \n\tdiff = 10**20\n\tfor i in range(n-1): \n\t\tif arr[i+1] - arr[i] < diff: \n\t\t\tdiff = arr[i+1] - arr[i] \n\treturn diff \narr = [1, 5, 3, 19, 18, 25] \nn = len(arr) \nprint(\"Minimum difference is \" + str(find_Min_Diff(arr, n)))<｜end▁of▁sentence｜>"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tctr += 1\n\treturn ctr\n\nstr = input(\"Enter a string: \")\nprint(number_ctr(str))<｜end▁of▁sentence｜>"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tif n % i == 0: \n\t\t\tcount += 1\n\tif count % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef nth_polite(n): \n\tcount = 0\n\ti = 1\n\twhile count < n: \n\t\tif is_polite(i): \n\t\t\tcount += 1\n\t\ti += 1\n\treturn i-1\n\nprint(nth_polite(10))<｜end▁of▁sentence｜>"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\tl2 = []\n\tfor i in range(len(l1)-1):\n\t\tl2.append((l1[i],l1[i+1]))\n\treturn l2\n\nprint(pair_wise([1,1,2,3,3]))<｜end▁of▁sentence｜>"}
{"ID": 166, "source": "MBPP:767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n\tcount=0\n\tfor i in range(0,n):\n\t\tfor j in range(i+1,n):\n\t\t\tif arr[i]+arr[j]==sum:\n\t\t\t\tcount+=1\n\treturn count\n\narr=[1,5,7,-1,5]\nn=len(arr)\nsum=6\nprint(\"Count of pairs is\",get_Pairs_Count(arr,n,sum))<｜end▁of▁sentence｜>"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\"\"\"\n\tThis function checks for odd parity of a given number.\n\t\"\"\"\n\t\n\tif x % 2 != 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nif __name__ == '__main__':\n\tx = int(input(\"Enter a number: \"))\n\tprint(check_Odd_Parity(x))<｜end▁of▁sentence｜>"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\tli_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n\treturn li_dif\n\nli1 = [10,15,20,25,30,35,40]\nli2 = [25,40,35]\nli3 = Diff(li1,li2)\nprint(li3)<｜end▁of▁sentence｜>"}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tsum = sum + i * i * i * i\n\treturn sum\nn = int(input(\"Enter the number: \"))\nprint(odd_Num_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i in ['(','{','[']:\n\t\t\tstack.append(i)\n\t\telse:\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\tcurrent_char = stack.pop()\n\t\t\tif current_char == '(':\n\t\t\t\tif i != ')':\n\t\t\t\t\treturn False\n\t\t\tif current_char == '{':\n\t\t\t\tif i != '}':\n\t\t\t\t\treturn False\n\t\t\tif current_char == '[':\n\t\t\t\tif i != ']':\n\t\t\t\t\treturn False\n\tif stack:\n\t\treturn False\n\treturn True\n\nexp = \"{()}[]\"\nprint(check_expression(exp))<｜end▁of▁sentence｜>"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\tnew_str = []\n\ttest_str = test_str.split()\n\tfor i in test_str:\n\t\tif len(i) != K:\n\t\t\tnew_str.append(i)\n\treturn \" \".join(new_str)\n\n\ntest_str = \"hello world\"\nK = 5\nprint(remove_length(test_str, K))<｜end▁of▁sentence｜>"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\tcount = 0\n\tpos = []\n\tfor i in range(len(text)):\n\t\tif text[i:i+len(pattern)] == pattern:\n\t\t\tcount += 1\n\t\t\tpos.append(i)\n\treturn count,pos\n\ntext = input(\"Enter the text: \")\npattern = input(\"Enter the pattern: \")\ncount,pos = occurance_substring(text,pattern)\nprint(\"The number of occurance of the pattern is: \",count)\nprint(\"The position of the pattern is: \",pos)<｜end▁of▁sentence｜>"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\timport re \n\tregex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n\tif(re.search(regex,email)): \n\t\treturn True\n\telse: \n\t\treturn False\n\nemail = input(\"Enter email: \")\nif check_email(email):\n\tprint(\"Valid email\")\nelse:\n\tprint(\"Invalid email\")<｜end▁of▁sentence｜>"}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\tcount = 0\n\tfor i in range(len(nums)):\n\t\tif i % 2 != 0 and nums[i] % 2 != 0:\n\t\t\tcount = count + 1\n\tif count == len(nums) // 2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(odd_position([2,1,4,3,6,7,6,3,4]))\nprint(odd_position([2,1,4,3,6,7,6,3,4,5]))\nprint(odd_position([4,1,2]))<｜end▁of▁sentence｜>"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\tcount = 0\n\tvowels = 'aeiou'\n\tfor ele in range(1, len(test_str)-1):\n\t\tif test_str[ele-1].lower() not in vowels and test_str[ele+1].lower() not in vowels:\n\t\t\tif test_str[ele].lower() in vowels:\n\t\t\t\tcount += 1\n\treturn count\nstr1 = \"Jupyter\"\nprint(\"Original string:\",str1)\nprint(\"No. of vowels which have vowels as neighbor characters:\",count_vowels(str1))<｜end▁of▁sentence｜>"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\tmp = dict() \n\tfor i in range(n): \n\t\tif arr[i] in mp.keys(): \n\t\t\tmp[arr[i]] += 1\n\t\telse: \n\t\t\tmp[arr[i]] = 1\n\tsum = 0\n\tfor x in mp: \n\t\tif mp[x] == 1: \n\t\t\tsum += x \n\treturn sum\narr = [1, 2, 3, 1, 1, 4, 5, 6] \nn = len(arr) \nprint(find_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\tlist2 = []\n\tlist3 = []\n\tfor i in range(len(list1)):\n\t\tif i == 0:\n\t\t\tlist2.append(list1[i])\n\t\telif list1[i] == list1[i-1]:\n\t\t\tlist2.append(list1[i])\n\t\telse:\n\t\t\tlist3.append(list2)\n\t\t\tlist2 = []\n\t\t\tlist2.append(list1[i])\n\tlist3.append(list2)\n\treturn list3\n\nprint(pack_consecutive_duplicates([1,1,1,1,2,3,3,1,1,2,4,4,4,5,3,3]))<｜end▁of▁sentence｜>"}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\"\"\"\n\tThis function takes a list as input and returns the number of unique lists within the list.\n\t\"\"\"\n\tunique_lists = []\n\tfor i in list1:\n\t\tif i not in unique_lists:\n\t\t\tunique_lists.append(i)\n\treturn len(unique_lists)\n\nprint(unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [2, 1]]))\nprint(unique_sublists([[1, 2], [1, 3], [1, 4], [1, 5], [1, 3]]))\nprint(unique_sublists([[1, 2], [1, 2], [1, 3], [1, 4], [1, 4]]))\nprint(unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]))\nprint(unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]))<｜end▁of▁sentence｜>"}
{"ID": 179, "source": "MBPP:780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tfor j in test_list:\n\t\t\tres.append((i, j))\n\treturn res\n\ntest_list = [1, 2, 3]\nprint(\"The original list : \" + str(test_list))\nprint(\"The combinations of sums are : \" + str(find_combinations(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i == 0) : \n\t\t\tcount += 1\n\treturn count\n\ndef check_Count(n) : \n\tcount = count_Divisors(n) \n\tif (count % 2 == 0) : \n\t\treturn True\n\telse : \n\t\treturn False\n\nn = int(input(\"Enter a number: \"))\nif (check_Count(n)) : \n\tprint(\"Even\") \nelse : \n\tprint(\"Odd\")<｜end▁of▁sentence｜>"}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n, 2):\n\t\t\tfor k in range(i, j + 1, 1):\n\t\t\t\tsum += arr[k]\n\treturn sum\n\narr = [1, 4, 2, 5, 3]\nprint(Odd_Length_Sum(arr))<｜end▁of▁sentence｜>"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\tr, g, b = r/255.0, g/255.0, b/255.0\n\tmx = max(r, g, b)\n\tmn = min(r, g, b)\n\tdf = mx-mn\n\tif mx == mn:\n\t\th = 0\n\telif mx == r:\n\t\th = (60 * ((g-b)/df) + 360) % 360\n\telif mx == g:\n\t\th = (60 * ((b-r)/df) + 120) % 360\n\telif mx == b:\n\t\th = (60 * ((r-g)/df) + 240) % 360\n\tif mx == 0:\n\t\ts = 0\n\telse:\n\t\ts = (df/mx)*100\n\tv = mx*100\n\treturn h, s, v\n\nprint(rgb_to_hsv(255, 255, 255))<｜end▁of▁sentence｜>"}
{"ID": 183, "source": "MBPP:784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n\teven_product = 1\n\todd_product = 1\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_product *= i\n\t\telse:\n\t\t\todd_product *= i\n\treturn even_product, odd_product\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_product, odd_product = mul_even_odd(list1)\nprint(\"Product of even numbers:\", even_product)\nprint(\"Product of odd numbers:\", odd_product)<｜end▁of▁sentence｜>"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\tres = tuple(int(i) for i in test_str)\n\treturn res\n\ntest_str = \"(1, 2, 3, 4)\"\nprint(tuple_str_int(test_str))<｜end▁of▁sentence｜>"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\"\"\"\n\t>>> right_insertion([1, 2, 4, 5], 3)\n\t2\n\t>>> right_insertion([1, 2, 4, 5], 0)\n\t0\n\t>>> right_insertion([1, 2, 4, 5], 6)\n\t4\n\t>>> right_insertion([1, 2, 4, 5], 4)\n\t2\n\t\"\"\"\n\tlo = 0\n\thi = len(a)\n\twhile lo < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif x < a[mid]:\n\t\t\thi = mid\n\t\telse:\n\t\t\tlo = mid + 1\n\treturn lo\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\tpatterns = 'ab{3}?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"aabbbbbc\"))<｜end▁of▁sentence｜>"}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\ttest_list.append(test_str)\n\treturn tuple(test_list)\n\ntest_list = [1, 2, 3, 4, 5]\ntest_str = \"Python\"\nprint(new_tuple(test_list, test_str))<｜end▁of▁sentence｜>"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\tperimeter = s*l\n\treturn perimeter\n\nprint(perimeter_polygon(4,5))<｜end▁of▁sentence｜>"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\tcount = 0\n\tfor i in range(0,len(nums),2):\n\t\tif nums[i]%2==0:\n\t\t\tcount+=1\n\tif count==len(nums)//2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnums=[2,1,4,3,6,7,6,3]\nprint(even_position(nums))<｜end▁of▁sentence｜>"}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\tres = tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n\treturn res\n\ntest_tup = (1, 5, 7, (4, 6), 10)\nprint(remove_nested(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count\n\ninput_list = [1, 2, [3, 4], [5, 6], 7, [8, 9]]\nprint(count_list(input_list))<｜end▁of▁sentence｜>"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\tlow=0\n\thigh=n-1\n\tres=-1\n\twhile(low<=high):\n\t\tmid=(low+high)//2\n\t\tif(arr[mid]>x):\n\t\t\thigh=mid-1\n\t\telif(arr[mid]<x):\n\t\t\tlow=mid+1\n\t\telse:\n\t\t\tres=mid\n\t\t\tlow=mid+1\n\treturn res\n\narr=[1,2,2,2,2,3,4,7,8,8]\nn=len(arr)\nx=2\nprint(last(arr,x,n))<｜end▁of▁sentence｜>"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r'^a.*b$'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_starta_endb(\"aabbbbd\"))\nprint(text_starta_endb(\"aabAbbbc\"))\nprint(text_starta_endb(\"accddbbjjjb\"))<｜end▁of▁sentence｜>"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\timport heapq\n\tcheap_items = heapq.nsmallest(n,items,key=lambda s:s['price'])\n\treturn cheap_items\n\nitems = [\n\t{'name': 'Item-1', 'price': 101.1},\n\t{'name': 'Item-2', 'price': 555.22},\n\t{'name': 'Item-3', 'price': 45.09},\n\t{'name': 'Item-4', 'price': 22.75},\n\t{'name': 'Item-5', 'price': 16.30},\n\t{'name': 'Item-6', 'price': 110.65}\n]\n\nprint(cheap_items(items,3))<｜end▁of▁sentence｜>"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\tsum = 0\n\tfor i in dict:\n\t\tsum = sum + dict[i]\n\treturn sum\n\ndict = {'a': 100, 'b': 200, 'c': 300}\nprint(\"Sum :\", return_sum(dict))<｜end▁of▁sentence｜>"}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 != 0:\n\t\t\tsum += i\n\treturn sum\n\nl,r = map(int,input().split())\nprint(sum_in_Range(l,r))<｜end▁of▁sentence｜>"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\tsum=0\n\tfor i in arr:\n\t\tsum = sum + i\n\treturn(sum)\narr=[]\narr = [12, 3, 4, 15]\nn = len(arr)\nans = _sum(arr)\nprint ('Sum of the array is ', ans)<｜end▁of▁sentence｜>"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\tn = bin(n)[2:]\n\tn = n[d:] + n[:d]\n\treturn int(n,2)\n\nn = int(input(\"Enter a number: \"))\nd = int(input(\"Enter the number of bits to be rotated: \"))\nprint(left_Rotate(n,d))<｜end▁of▁sentence｜>"}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t\"\"\"\n\tRemove all spaces from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char != \" \":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to remove all vowels from a string.\n\"\"\"\ndef remove_all_vowels(text):\n\t\"\"\"\n\tRemove all vowels from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char not in \"aeiouAEIOU\":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to remove all consonants from a string.\n\"\"\"\ndef remove_all_consonants(text):\n\t\"\"\"\n\tRemove all consonants from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(text):\n\t\"\"\"\n\tCount the number of words in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\n\n\"\"\"\nWrite a function to count the number of characters in a string.\n\"\"\"\ndef count_characters(text):\n\t\"\"\"\n\tCount the number of characters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char != \" \":\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of uppercase letters in a string.\n\"\"\"\ndef count_uppercase_letters(text):\n\t\"\"\"\n\tCount the number of uppercase letters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of lowercase letters in a string.\n\"\"\"\ndef count_lowercase_letters(text):\n\t\"\"\"\n\tCount the number of lowercase letters in a string.\n\t\"\"\"\n\tcount = "}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\tresult=set([x,y,z])\n\tif len(result)==3:\n\t\treturn 0\n\telse:\n\t\treturn (4-len(result))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(-1,-2,-3))\nprint(test_three_equal(-1,-1,-1))<｜end▁of▁sentence｜>"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\tmin = arr[0]\n\tmin_index = -1\n\tfor i in range(0, n):\n\t\tif (min > arr[i]):\n\t\t\tmin = arr[i]\n\t\t\tmin_index = i\n\treturn min_index\n\narr = [15, 18, 2, 3, 6, 12]\nn = len(arr)\nprint(count_Rotation(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\ti = 1\n\twhile(i * i < n) :\n\t\ti += 1\n\treturn i * i == n\nn = int(input(\"Enter a number: \"))\nif (is_Perfect_Square(n)) :\n\tprint(\"Yes\")\nelse :\n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\tcount_odd = 0\n\tcount_even = 0\n\tfor i in range(n): \n\t\tif arr[i] % 2 == 1: \n\t\t\tcount_odd += 1\n\t\telse: \n\t\t\tcount_even += 1\n\tif (count_even > 0 and count_odd == 0): \n\t\treturn 1\n\telif count_odd % 2 == 1: \n\t\treturn 0\n\telse: \n\t\treturn 1\narr = [ 1, 3, 5, 7 ] \nn = len(arr) \nif is_Product_Even(arr, n) == 1: \n\tprint(\"YES\") \nelse: \n\tprint(\"NO\")<｜end▁of▁sentence｜>"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = []\n\tfor l in lists:\n\t\tsum = 0\n\t\tfor i in l:\n\t\t\tsum += i\n\t\tif sum > max_sum:\n\t\t\tmax_sum = sum\n\t\t\tmax_list = l\n\treturn max_list\n\nlists = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]\nprint(max_sum_list(lists))<｜end▁of▁sentence｜>"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\tmax_count = 0\n\tcount = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 0\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\treturn max_count\n\n\nprint(max_run_uppercase(\"GeeksforGeeks\"))\nprint(max_run_uppercase(\"GeeksForGeeks\"))\nprint(max_run_uppercase(\"GeeksForGeEeks\"))\nprint(max_run_uppercase(\"GeeksForGEEKs\"))<｜end▁of▁sentence｜>"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\"\"\"\n\t>>> first_odd([1, 2, 3, 4, 5])\n\t2\n\t>>> first_odd([2, 4, 6, 8, 10])\n\t>>> first_odd([1, 3, 5, 7, 9])\n\t1\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 1:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\"\"\"\n\t>>> first_even([1, 2, 3, 4, 5])\n\t1\n\t>>> first_even([2, 4, 6, 8, 10])\n\t2\n\t>>> first_even([1, 3, 5, 7, 9])\n\t>>> first_even([2, 4, 6, 8, 10])\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number greater than a given number in a given list of numbers.\n\"\"\"\ndef first_greater_than(nums, n):\n\t\"\"\"\n\t>>> first_greater_than([1, 2, 3, 4, 5], 3)\n\t4\n\t>>> first_greater_than([2, 4, 6, 8, 10], 6)\n\t8\n\t>>> first_greater_than([1, 3, 5, 7, 9], 7)\n\t>>> first_greater_than([2, 4, 6, 8, 10], 11)\n\t\"\"\"\n\tfor num in nums:\n\t\tif num > n:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number less than a given number in a given list of numbers.\n\"\"\"\ndef first_less_than(nums, n):\n\t\"\"\"\n\t>>> first_less_than([1, 2, 3, 4, 5], 3)\n\t1\n\t>>> first_less_than(["}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\tres = False\n\tfor ele in test_tup:\n\t\tif ele == K:\n\t\t\tres = True\n\t\t\tbreak\n\treturn res\n\n\n# Driver Code\ntest_tup = (15, 20, 123, 47, 89)\nK = 47\nprint(\"Does tuple contain K ? : \" + str(check_K(test_tup, K)))\n\n\"\"\"\nOutput:\nDoes tuple contain K ? : True\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\tres = all(x < y for x, y in zip(test_tup1, test_tup2))\n\treturn res\n\n\ntest_tup1 = (3, 4, 5)\ntest_tup2 = (1, 2, 6)\nprint (\"The original tuple 1 : \" + str(test_tup1))\nprint (\"The original tuple 2 : \" + str(test_tup2))\nres = check_smaller(test_tup1, test_tup2)\nprint (\"Does each element in first tuple is smaller than its corresponding index in second tuple ? : \" + str(res))<｜end▁of▁sentence｜>"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\tprint(a*b)\n\tprint(c*d)\n\ncount_variable(\"a\",3,\"b\",4)<｜end▁of▁sentence｜>"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t\"\"\"\n\tFunction to check if two lists of tuples are identical or not.\n\t\"\"\"\n\tflag = True\n\tfor i in test_list1:\n\t\tif i not in test_list2:\n\t\t\tflag = False\n\t\t\tbreak\n\treturn flag\n\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(check_identical(test_list1, test_list2))<｜end▁of▁sentence｜>"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t\"\"\"\n\t>>> road_rd('23rd')\n\t'23rd'\n\t>>> road_rd('1st')\n\t'1st'\n\t>>> road_rd('3rd')\n\t'3rd'\n\t>>> road_rd('Broad')\n\t'Brd'\n\t>>> road_rd('Superintendent')\n\t'Superintendent'\n\t\"\"\"\n\timport re\n\tpattern = r'(\\d+)rd'\n\tmatch = re.search(pattern, street)\n\tif match:\n\t\treturn match.group(1) + 'rd'\n\telse:\n\t\treturn street\n\n\n\"\"\"\nWrite a function to check for a number at the end of word/sentence.\n\"\"\"\ndef end_num(string):\n\t\"\"\"\n\t>>> end_num('abcdef')\n\tFalse\n\t>>> end_num('abcdef6')\n\tTrue\n\t\"\"\"\n\timport re\n\tpattern = r'\\d$'\n\tmatch = re.search(pattern, string)\n\tif match:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to search the number (0-9) of length between 1 to 3 in a given string.\n\"\"\"\ndef num_btw_1_3(string):\n\t\"\"\"\n\t>>> num_btw_1_3('xyz')\n\t[]\n\t>>> num_btw_1_3('xyz 12345 123 abc 12 1234')\n\t['123', '12', '1234']\n\t\"\"\"\n\timport re\n\tpattern = r'\\d{1,3}'\n\tmatch = re.findall(pattern, string)\n\treturn match\n\n\n\"\"\"\nWrite a function to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).\n\"\"\"\ndef is_allowed_specific_char(string):\n\t\"\"\"\n\t>>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n\tTrue\n\t>>> is_allowed_specific_char(\"*&%@#/\")\n\tFalse\n\t\"\"\"\n\timport re\n\tpattern = r'^[a-z"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\tcount = 0\n\tfor char in str1:\n\t\tcount += 1\n\treturn count\n\nprint(string_length('hello'))<｜end▁of▁sentence｜>"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\tarea=(p*q)/2\n\treturn area\n\np=int(input(\"Enter the diagonal 1:\"))\nq=int(input(\"Enter the diagonal 2:\"))\nprint(\"Area of the rombus is:\",rombus_area(p,q))<｜end▁of▁sentence｜>"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\tlow = 0\n\tmid = 0\n\thigh = n-1\n\twhile mid <= high:\n\t\tif arr[mid] == 0:\n\t\t\tarr[low], arr[mid] = arr[mid], arr[low]\n\t\t\tlow += 1\n\t\t\tmid += 1\n\t\telif arr[mid] == 1:\n\t\t\tmid += 1\n\t\telse:\n\t\t\tarr[mid], arr[high] = arr[high], arr[mid]\n\t\t\thigh -= 1\n\treturn arr\n\n\nif __name__ == \"__main__\":\n\tarr = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]\n\tn = len(arr)\n\tprint(sort_by_dnf(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\ttest_tup = tuple()\n\treturn test_tup\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(clear_tuple(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\tresult = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n\treturn result\n\nnums = [12, 65, 54, 39, 102, 339, 221,]\nprint(\"Original list:\")\nprint(nums)\nm = 13\nn = 5\nprint(\"\\nNumbers of the above list divisible by\",m,\"and\",n,\":\")\nprint(div_of_nums(nums, m, n))<｜end▁of▁sentence｜>"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\tctr=0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tctr+=1\n\treturn ctr\n\nstr=input(\"Enter a string: \")\nprint(\"Number of lower case letters in the string: \",lower_ctr(str))<｜end▁of▁sentence｜>"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\tcount = 0\n\ti = 0\n\twhile i < len(lists)-1:\n\t\tif lists[i] == lists[i+1]:\n\t\t\tcount += 1\n\t\ti += 1\n\treturn count\n\nprint(count_duplic([1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5]))<｜end▁of▁sentence｜>"}
{"ID": 219, "source": "MBPP:820", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n\t\"\"\"\n\tThis function is used to check whether the given month number contains 28 days or not.\n\t\"\"\"\n\tif monthnum1 == 2:\n\t\tprint(\"The given month number contains 28 days\")\n\telse:\n\t\tprint(\"The given month number does not contain 28 days\")\n\nmonthnum = int(input(\"Enter the month number: \"))\ncheck_monthnum_number(monthnum)<｜end▁of▁sentence｜>"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\tdict3 = dict1.copy()\n\tdict3.update(dict2)\n\treturn dict3\n\ndict1 = {'a':1,'b':2,'c':3}\ndict2 = {'d':4,'e':5,'f':6}\nprint(merge_dictionaries(dict1,dict2))<｜end▁of▁sentence｜>"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\tl=len(p)\n\tif l<6 or l>16:\n\t\treturn False\n\telif not any(i.isdigit() for i in p):\n\t\treturn False\n\telif not any(i.isupper() for i in p):\n\t\treturn False\n\telif not any(i.islower() for i in p):\n\t\treturn False\n\telif not any(i in \"$#@\" for i in p):\n\t\treturn False\n\telse:\n\t\treturn True\n\np=input(\"Enter password: \")\nprint(pass_validity(p))<｜end▁of▁sentence｜>"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\timport re \n\tregex = re.compile(sample) \n\tif re.match(regex, string) : \n\t\tprint(\"Given string starts with the given substring\") \n\telse : \n\t\tprint(\"Given string does not starts with the given substring\") \n\nstring = \"Python is fun\"\nsample = \"Python\"\ncheck_substring(string, sample) \n\nsample = \"Java\"\ncheck_substring(string, sample)<｜end▁of▁sentence｜>"}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\tnew_list = []\n\tfor i in l:\n\t\tif i%2 != 0:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nprint(remove_even([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\tresult = []\n\tfor i in list_index:\n\t\tresult.append(nums[i])\n\treturn result\n\nnums_list = [2, 10, 8, 22, 16, 19, 21, 14]\nprint(\"Original list:\", nums_list)\nprint(\"Multiple elements at the given index:\")\nindex_list = [0, 3, 5]\nprint(access_elements(nums_list, index_list))<｜end▁of▁sentence｜>"}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t\n\tif a == b == c: \n\t\tprint(\"Equilateral Triangle\") \n\n\telif a == b or b == c or c == a: \n\t\tprint(\"Isosceles Triangle\") \n\n\telse: \n\t\tprint(\"Scalene Triangle\") \n\n\na = int(input(\"Enter the value of the first side: \")) \nb = int(input(\"Enter the value of the second side: \")) \nc = int(input(\"Enter the value of the third side: \")) \n\ncheck_Type_Of_Triangle(a, b, c)<｜end▁of▁sentence｜>"}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the sum of all the values in that column.\n\t\"\"\"\n\ttotal = 0\n\tfor row in list1:\n\t\ttotal = total + row[C]\n\treturn total\n\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\"\"\"\n\tThis function takes a list of lists and a row number R.\n\tIt returns the sum of all the values in that row.\n\t\"\"\"\n\ttotal = 0\n\tfor col in list1[R]:\n\t\ttotal = total + col\n\treturn total\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific column of a list in a given list of lists.\n\"\"\"\ndef max_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the maximum value in that column.\n\t\"\"\"\n\tmax_value = list1[0][C]\n\tfor row in list1:\n\t\tif row[C] > max_value:\n\t\t\tmax_value = row[C]\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific row of a list in a given list of lists.\n\"\"\"\ndef max_row(list1, R):\n\t\"\"\"\n\tThis function takes a list of lists and a row number R.\n\tIt returns the maximum value in that row.\n\t\"\"\"\n\tmax_value = list1[R][0]\n\tfor col in list1[R]:\n\t\tif col > max_value:\n\t\t\tmax_value = col\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the minimum value in a specific column of a list in a given list of lists.\n\"\"\"\ndef min_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the minimum value in that column.\n\t\"\"\"\n\tmin_value = list1[0][C]\n\tfor row in list1:\n\t\tif row[C] < min_value:\n\t\t\tmin_value = row[C]\n\treturn min_value\n"}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\talpha_count=0\n\tdig_count=0\n\tspl_count=0\n\tfor i in string:\n\t\tif i.isalpha():\n\t\t\talpha_count+=1\n\t\telif i.isdigit():\n\t\t\tdig_count+=1\n\t\telse:\n\t\t\tspl_count+=1\n\treturn alpha_count,dig_count,spl_count\n\nstring=input(\"Enter a string: \")\nalpha_count,dig_count,spl_count=count_alpha_dig_spl(string)\nprint(\"Alphabets: \",alpha_count)\nprint(\"Digits: \",dig_count)\nprint(\"Special Characters: \",spl_count)<｜end▁of▁sentence｜>"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\tdict = {} \n\tfor i in input: \n\t\tif i not in dict.keys(): \n\t\t\tdict[i] = 1\n\t\telse: \n\t\t\tdict[i] += 1\n\tfirst_max = max(dict.values()) \n\tfor key in dict: \n\t\tif dict[key]==first_max: \n\t\t\tdict[key]=0\n\tm=max(dict.values()) \n\tfor key in dict: \n\t\tif dict[key]==m: \n\t\t\treturn key\n\nprint(second_frequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"]))<｜end▁of▁sentence｜>"}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\ta = a * 10**digits\n\ta = int(a)\n\ta = a / 10**digits\n\treturn a\n\nprint(round_up(23.3213, 3))<｜end▁of▁sentence｜>"}
{"ID": 230, "source": "MBPP:831", "prompt": "\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\tcount = 0\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n) : \n\t\t\tif(arr[i] == arr[j]) : \n\t\t\t\tcount += 1\n\treturn count \narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10] \nn = len(arr) \nprint(count_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)\n\n\"\"\"\nWrite a function to extract the minimum numeric value from a string by using regex.\n\"\"\"\ndef extract_min(input): \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn min(numbers)\n\n\"\"\"\nWrite a function to extract the first occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_first(pattern, input): \n\tmatch = re.search(pattern, input) \n\tif match: \n\t\treturn match.group() \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the second occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_second(pattern, input): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= 2: \n\t\treturn matches[1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the nth occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_nth(pattern, input, n): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= n: \n\t\treturn matches[n-1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string by using regex.\n\"\"\"\ndef extract_all(pattern, input): \n\treturn re.findall(pattern, input)\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string, ignoring case by using regex.\n\"\"\"\ndef extract_all_ignore_case(pattern, input): \n\treturn re.findall(pattern, input, re.IGNORECASE)\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string, ignoring overlapping matches by using regex.\n\"\"\"\ndef extract_all_ignore_overlapping(pattern, input): \n\treturn re.findall(pattern, input, re.OVERLAPPED)\n\n"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\tlist = [] \n\tfor key in dict.keys(): \n\t\tlist.append(key) \n\treturn list\n\n\ndict = {'a': 100, 'b':200, 'c':300} \nprint(get_key(dict))<｜end▁of▁sentence｜>"}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\tmatrix = [[0 for i in range(n)] for j in range(n)]\n\trow_start = 0\n\trow_end = n-1\n\tcol_start = 0\n\tcol_end = n-1\n\tnum = 1\n\twhile row_start <= row_end and col_start <= col_end:\n\t\tfor i in range(col_start, col_end+1):\n\t\t\tmatrix[row_start][i] = num\n\t\t\tnum += 1\n\t\trow_start += 1\n\t\tfor i in range(row_start, row_end+1):\n\t\t\tmatrix[i][col_end] = num\n\t\t\tnum += 1\n\t\tcol_end -= 1\n\t\tif row_start <= row_end:\n\t\t\tfor i in range(col_end, col_start-1, -1):\n\t\t\t\tmatrix[row_end][i] = num\n\t\t\t\tnum += 1\n\t\t\trow_end -= 1\n\t\tif col_start <= col_end:\n\t\t\tfor i in range(row_end, row_start-1, -1):\n\t\t\t\tmatrix[i][col_start] = num\n\t\t\t\tnum += 1\n\t\t\tcol_start += 1\n\treturn matrix\n\nprint(generate_matrix(3))<｜end▁of▁sentence｜>"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\"\"\"\n\tThis function returns the slope of a line.\n\t\"\"\"\n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))<｜end▁of▁sentence｜>"}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\tmax_so_far =a[0] \n\tcurr_max = a[0] \n\t\n\tfor i in range(1,size): \n\t\tcurr_max = max(a[i], curr_max + a[i]) \n\t\tmax_so_far = max(max_so_far,curr_max) \n\t\t\n\treturn max_so_far \n\na = [-2, -3, 4, -1, -2, 1, 5, -3] \nprint(\"Maximum contiguous sum is\" , max_sub_array_sum(a,len(a)))<｜end▁of▁sentence｜>"}
{"ID": 236, "source": "MBPP:837", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum +=i*i*i \n\treturn sum\nn = 5\nprint(cube_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\tn = len(s1)  \n\tnoOfOnes = 0\n\tcount = 0\n\tfor i in range(0, n) : \n\t\tif s1[i] == '1' : \n\t\t\tnoOfOnes += 1\n\t\tif s2[i] == '1' : \n\t\t\tnoOfOnes -= 1\n\t\tif noOfOnes < 0 : \n\t\t\tcount = count - noOfOnes \n\t\t\tnoOfOnes = 0\n\t\tif noOfOnes > 0 : \n\t\t\tcount = count + noOfOnes \n\t\t\tnoOfOnes = 0\n\treturn count \ns1 = \"1101\"\ns2 = \"1010\"\nprint(min_Swaps(s1, s2))<｜end▁of▁sentence｜>"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][1] > tup[j + 1][1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup \ntup =[('for', 24), ('Geeks', 8), ('Geeks', 30)] \nprint(sort_tuple(tup))<｜end▁of▁sentence｜>"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\td = b**2 - 4*a*c  \n\tif d > 0:  \n\t\tprint(\"Real and Different Roots\")  \n\telif d == 0:  \n\t\tprint(\"Real and Same Roots\")  \n\telse:  \n\t\tprint(\"Complex Roots\")  \na = int(input(\"Enter a: \"))  \nb = int(input(\"Enter b: \"))  \nc = int(input(\"Enter c: \"))  \nCheck_Solution(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count \n\narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", \n\tget_inv_count(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\tres = 0\n\tfor i in range(0, arr_size):\n\t\tres = res ^ arr[i]\n\treturn res\n\narr = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nn = len(arr)\nprint(get_odd_occurence(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef n"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\n\t\n\todd = (n + 1) // 2\n\n\t\n\teven = n // 2\n\n\t\n\tif k <= odd: \n\t\treturn (2 * k - 1) \n\telse: \n\t\treturn (2 * (k - odd)) \n\n\nn = 10\nk = 3\n\n\nprint(get_Number(n, k))<｜end▁of▁sentence｜>"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\tfactorial = 1\n\tfor i in range(1, n + 1): \n\t\tfactorial = factorial * i \n\tprint(\"The factorial of\", n, \"is\", factorial) \n\tcount = 0\n\twhile (factorial > 0): \n\t\tcount = count + 1\n\t\tfactorial = factorial // 10\n\tprint(\"The number of digits in the factorial are:\", count) \nn = int(input(\"Enter a number: \")) \nfind_Digits(n)<｜end▁of▁sentence｜>"}
{"ID": 245, "source": "MBPP:846", "prompt": "\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n): \n\tarr.sort() \n\tdep.sort() \n\tplat_needed = 1\n\tresult = 1\n\ti = 1\n\tj = 0\n\twhile (i < n and j < n): \n\t\tif (arr[i] <= dep[j]): \n\t\t\tplat_needed += 1\n\t\t\ti += 1\n\t\telif (arr[i] > dep[j]): \n\t\t\tplat_needed -= 1\n\t\t\tj += 1\n\t\tif (plat_needed > result): \n\t\t\tresult = plat_needed \n\treturn result \n\narr = [900, 940, 950, 1100, 1500, 1800] \ndep = [910, 1200, 1120, 1130, 1900, 2000] \nn = len(arr) \nprint(\"Minimum Number of Platforms Required = \", find_platform(arr, dep, n))<｜end▁of▁sentence｜>"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to"}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\tarea=(base1+base2)/2*height\n\treturn area\n\nbase1=float(input(\"Enter the length of the first base of the trapezium: \"))\nbase2=float(input(\"Enter the length of the second base of the trapezium: \"))\nheight=float(input(\"Enter the height of the trapezium: \"))\nprint(\"The area of the trapezium is\",area_trapezium(base1,base2,height))<｜end▁of▁sentence｜>"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\ti = 2\n\twhile i <= N: \n\t\tif N % i == 0: \n\t\t\tsum += i \n\t\t\tN = N / i \n\t\telse: \n\t\t\ti += 1\n\treturn sum\nN = int(input())\nprint(Sum(N))<｜end▁of▁sentence｜>"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a,"}
{"ID": 250, "source": "MBPP:851", "prompt": "\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \n\ti = 1\n\twhile i <= N: \n\t\tSum += (1.0/i) \n\t\ti += 1\n\treturn Sum\nN = int(input(\"Enter the number: \"))\nSum = 0\nprint(\"Sum of Divisors of {0} is {1}\".format(N,Sum_of_Inverse_Divisors(N,Sum)))<｜end▁of▁sentence｜>"}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\tnew_list = []\n\tfor num in num_list:\n\t\tif num >= 0:\n\t\t\tnew_list.append(num)\n\treturn new_list\n\nprint(remove_negs([1, 2, -3, 4, -5, 6]))<｜end▁of▁sentence｜>"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tres = 1\n\twhile n % 2 == 0: \n\t\tn = n // 2\n\tfor i in range(3, int(math.sqrt(n) + 1)): \n\t\tcount = 0\n\t\tcurr_sum = 1\n\t\tcurr_term = 1\n\t\twhile n % i == 0: \n\t\t\tcount+=1\n\t\t\tn = n // i \n\t\t\tcurr_term = curr_term * i \n\t\t\tcurr_sum += curr_term \n\t\tres = res * curr_sum \n\tif n >= 2: \n\t\tres = res * (1 + n) \n\treturn res \nn = 25\nprint(sum_of_odd_Factors(n))<｜end▁of▁sentence｜>"}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\theap = []\n\tfor i in rawheap:\n\t\theap.append(i)\n\t\theapify(heap)\n\treturn heap\n\ndef heapify(heap):\n\ti = len(heap) - 1\n\twhile i > 0:\n\t\tparent = (i - 1) // 2\n\t\tif heap[i] > heap[parent]:\n\t\t\theap[i], heap[parent] = heap[parent], heap[i]\n\t\t\ti = parent\n\t\telse:\n\t\t\treturn\n\nprint(raw_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\tn = bin(x) \n\tn = n[2:] \n\tn = n.count('1') \n\tif n%2 == 0: \n\t\treturn 0\n\telse: \n\t\treturn 1\n\nif __name__ == '__main__': \n\tx = 7\n\tprint(check_Even_Parity(x))<｜end▁of▁sentence｜>"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\tnoOfOnes = 0\n\tfor i in range(0, n) : \n\t\tif (arr[i] == 1) : \n\t\t\tnoOfOnes = noOfOnes + 1\n\tcurr_count = 0\n\tmax_count = 0\n\tfor i in range(0, noOfOnes) : \n\t\tif (arr[i] == 1) : \n\t\t\tcurr_count = curr_count + 1\n\t\tmax_count = curr_count \n\tfor i in range(1, n - noOfOnes + 1) : \n\t\tif (arr[i - 1] == 1) : \n\t\t\tcurr_count = curr_count - 1\n\t\tif (arr[i + noOfOnes - 1] == 1) : \n\t\t\tcurr_count = curr_count + 1\n\t\tif (max_count < curr_count) : \n\t\t\tmax_count = curr_count \n\treturn noOfOnes - max_count \n\narr = [0, 0, 1, 0, 1, 0, 1, 1] \nn = len(arr) \nprint(find_Min_Swaps(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t\"\"\"\n\tThis function takes a list of strings and returns a list of lists.\n\t\"\"\"\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"apple\", \"banana\", \"cherry\", \"orange\"]))<｜end▁of▁sentence｜>"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count**2\n\nprint(count_list([1, 2, 3, [4, 5], [6, 7], [8, 9]]))<｜end▁of▁sentence｜>"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsubs = [[]]\n\tfor i in range(len(my_list)):\n\t\tn = i+1\n\t\twhile n <= len(my_list):\n\t\t\tsub = my_list[i:n]\n\t\t\tsubs.append(sub)\n\t\t\tn += 1\n\n\treturn subs\n\nmy_list = [1, 2, 3, 4]\n\nprint(sub_lists(my_list))<｜end▁of▁sentence｜>"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\tregex = '[a-zA-Z0-9]$'\n\tif(re.search(regex, string)): \n\t\tprint(\"Valid String\") \n\telse: \n\t\tprint(\"Invalid String\") \n\nstring = \"Geeks43\"\ncheck_alphanumeric(string) \n\nstring = \"Geeksforgeeks\"\ncheck_alphanumeric(string) \n\nstring = \"Geeksforgeeks123\"\ncheck_alphanumeric(string) \n\nstring = \"Geeksforgeeks123@\"\ncheck_alphanumeric(string)<｜end▁of▁sentence｜>"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\tresult = list(filter(lambda x: (sorted(texts) == sorted(str)), texts))\n\treturn result\n\ntexts = [\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"]\nstr = \"abcd\"\nprint(anagram_lambda(texts, str))<｜end▁of▁sentence｜>"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\tword_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\treturn word_count[:n]\n\ntext = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nprint(n_common_words(text,3))<｜end▁of▁sentence｜>"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t\n\ts = set() \n\tans = 0\n\n\tfor ele in arr: \n\t\ts.add(ele) \n\n\tfor i in range(n): \n\n\t\tif (arr[i]-1) not in s: \n\n\t\t\tj = arr[i] \n\t\t\twhile(j in s): \n\t\t\t\tj+= 1\n\n\t\t\tans = max(ans, j-arr[i]) \n\treturn ans \n\narr = [1, 9, 3, 10, 4, 20, 2] \nn = len(arr) \n\nprint(\"Length of the Longest contiguous subsequence is\", \n\tfind_longest_conseq_subseq(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\tresult = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n\treturn result\n\ntexts = [\"php\", \"w3r\", \"Python\", \"abcd\", \"Java\", \"aaa\"]\nprint(\"Orginal list of strings:\")\nprint(texts)\nprint(\"\\nList of palindromes:\")\nprint(palindrome_lambda(texts))<｜end▁of▁sentence｜>"}
{"ID": 264, "source": "MBPP:865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n\tresult = map(lambda x:x*n, nums)\n\treturn result\n\nnums = [1,2,3,4]\nprint(list(ntimes_list(nums,3)))<｜end▁of▁sentence｜>"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\tmonth_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n\tmonth_30 = [\"April\", \"June\", \"September\", \"November\"]\n\tmonth_28 = [\"February\"]\n\tif monthname2 in month_31:\n\t\treturn True\n\telif monthname2 in month_30:\n\t\treturn False\n\telif monthname2 in month_28:\n\t\treturn False\n\telse:\n\t\treturn False\n\nmonthname2 = input(\"Enter the month name: \")\nprint(check_monthnumb(monthname2))<｜end▁of▁sentence｜>"}
{"ID": 266, "source": "MBPP:867", "prompt": "\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):  \n\tsum = 0\n\tfor i in range(n): \n\t\tsum += arr[i] \n\t\n\tif (sum % 2 == 0): \n\t\treturn 2\n\telse: \n\t\treturn 1\n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nprint(min_Num(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\tl = 0\n\n\tx = a.strip() \n\n\tfor i in range(len(x)): \n\t\tif x[i] == \" \": \n\t\t\tl = 0\n\t\telse: \n\t\t\tl += 1\n\treturn l \n\n\na = \"Hello World\"\nprint(\"The length of last word is\", \n\t\t\t\t\t\t\tlength_Of_Last_Word(a))<｜end▁of▁sentence｜>"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\tresult = [i for i in list1 if (min(i) >= leftrange and max(i) <= rigthrange)]\n\treturn result\n\nlist1 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]\nleftrange = 13\nrigthrange = 17\nprint(\"Original list:\")\nprint(list1)\nprint(\"\\nAfter removing sublists from a given list of lists, which are outside the said range:\")\nprint(remove_list_range(list1, leftrange, rigthrange))<｜end▁of▁sentence｜>"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\tsum_positivenum = list(filter(lambda n: n > 0, nums))\n\treturn sum_positivenum\n\nnums = [34, -1, 0, -23, 12, -300, 33]\nprint(\"Original numbers in the list: \",nums)\nprint(\"Sum of the positive numbers: \", sum_positivenum(nums))<｜end▁of▁sentence｜>"}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\tsize1 = len(string1) \n\tsize2 = len(string2) \n\ttemp = '' \n\tif size1 != size2: \n\t\treturn 0\n\ttemp = string1 + string1 \n\tif (temp.count(string2)> 0): \n\t\treturn 1\n\telse: \n\t\treturn 0\nstring1 = \"AACD\"\nstring2 = \"ACDA\"\nif are_Rotations(string1, string2): \n\tprint (\"Strings are rotations of each other\")\nelse: \n\tprint (\"Strings are not rotations of each other\")<｜end▁of▁sentence｜>"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\tflag = 0\n\tif(all(x in list2 for x in list1)): \n\t\tflag = 1\n\treturn flag\n\nlist1 = [1, 2, 3, 4, 5] \nlist2 = [2, 3, 4] \nprint(check_subset(list1, list2)) \n\nlist1 = [1, 2, 3, 4, 5] \nlist2 = [2, 4, 6] \nprint(check_subset(list1, list2))<｜end▁of▁sentence｜>"}
{"ID": 272, "source": "MBPP:873", "prompt": "\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n\t\"\"\"\n\tReturn the nth number in the fibonacci sequence.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\n\n\"\"\"\nWrite a function to solve the factorial of a number using recursion.\n\"\"\"\ndef factorial(n):\n\t\"\"\"\n\tReturn the factorial of n.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\n\n\"\"\"\nWrite a function to reverse a string using recursion.\n\"\"\"\ndef reverse(s):\n\t\"\"\"\n\tReturn the reverse of s.\n\t\"\"\"\n\tif len(s) == 0:\n\t\treturn s\n\telse:\n\t\treturn reverse(s[1:]) + s[0]\n\n\n\"\"\"\nWrite a function to check if a string is a palindrome using recursion.\n\"\"\"\ndef is_palindrome(s):\n\t\"\"\"\n\tReturn True if s is a palindrome, False otherwise.\n\t\"\"\"\n\tif len(s) <= 1:\n\t\treturn True\n\telse:\n\t\treturn s[0] == s[-1] and is_palindrome(s[1:-1])\n\n\n\"\"\"\nWrite a function to find the greatest common divisor of two numbers using recursion.\n\"\"\"\ndef gcd(a, b):\n\t\"\"\"\n\tReturn the greatest common divisor of a and b.\n\t\"\"\"\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)\n\n\n\"\"\"\nWrite a function to find the least common multiple of two numbers using recursion.\n\"\"\"\ndef lcm(a, b):\n\t\"\"\"\n\tReturn the least common multiple of a and b.\n\t\"\"\"\n\treturn a * b // gcd(a, b)\n\n\n\"\"\"\nWrite a function to find the nth number in the tribonacci sequence using recursion.\n\"\"\"\ndef tribonacci(n):\n\t\"\"\"\n\tReturn the nth number in the tribonacci sequence.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\tstr1_len = len(str1)\n\tstr2_len = len(str2)\n\t\n\tif str1_len % str2_len == 0:\n\t\tn = int(str1_len / str2_len)\n\t\tstr2 = str2 * n\n\t\tif str1 == str2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\n\nif check_Concat(str1,str2):\n\tprint(\"Yes, the string is a concatenation of another string.\")\nelse:\n\tprint(\"No, the string is not a concatenation of another string.\")<｜end▁of▁sentence｜>"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\tres = float('inf')\n\tfor sub in test_list:\n\t\tres = min(res, abs(sub[0] - sub[1]))\n\treturn res\n\ntest_list = [(5, 8), (3, 9), (1, 6), (8, 10)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The minimum difference pair is : \" + str(min_difference(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 275, "source": "MBPP:876", "prompt": "\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n\t\"\"\"\n\tThis function takes two\n\tintegers and returns the L.C.M.\n\t\"\"\"\n\n\t# choose the greater number\n\tif x > y:\n\t\tgreater = x\n\telse:\n\t\tgreater = y\n\n\twhile(True):\n\t\tif((greater % x == 0) and (greater % y == 0)):\n\t\t\tlcm = greater\n\t\t\tbreak\n\t\tgreater += 1\n\n\treturn lcm\n\n\n# take input from the user\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\nprint(\"The L.C.M. of\", num1,\"and\", num2,\"is\", lcm(num1, num2))<｜end▁of▁sentence｜>"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\tstr = ''.join(sorted(str)) \n\treturn str\n\nstr = \"hello world\"\nprint(sort_String(str))<｜end▁of▁sentence｜>"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\tres = all(ele == test_tuple[0] for ele in test_tuple)\n\tres2 = len(test_tuple) == K\n\tres = res == res2\n\tprint(\"Does tuple contain only k elements? : \" + str(res))\n\ntest_tuple = (4, 4, 4, 4)\nK = 4\ncheck_tuples(test_tuple, K)\n\ntest_tuple = (4, 4, 4, 5)\nK = 4\ncheck_tuples(test_tuple, K)\n\ntest_tuple = (4, 4, 4, 4)\nK = 3\ncheck_tuples(test_tuple, K)<｜end▁of▁sentence｜>"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\tpatterns = '^a(b*)$'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match(\"ac\"))\nprint(text_match(\"abc\"))\nprint(text_match(\"abbc\"))<｜end▁of▁sentence｜>"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\tdiscriminant = b*b - 4*a*c \n\tif (discriminant > 0) : \n\t\tprint(\"Real and Different Roots \") \n\t\tprint(-b + math.sqrt(discriminant) / (2 * a)) \n\t\tprint(-b - math.sqrt(discriminant) / (2 * a)) \n\telif (discriminant == 0) : \n\t\tprint(\"Real and Same Roots\") \n\t\tprint(-b / (2 * a)) \n\telse :\n\t\tprint(\"Complex Roots\") \n\t\tprint(- b / (2 * a), \" + i\", sqrt_val) \n\t\tprint(- b / (2 * a), \" - i\", sqrt_val) \n\na = 1\nb = 10\nc = -24\nCheck_Solution(a, b, c)<｜end▁of▁sentence｜>"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\tsum_even += i\n\t\telse:\n\t\t\tsum_odd += i\n\treturn sum_even, sum_odd\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_even_odd(list1))<｜end▁of▁sentence｜>"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\tperimeter = 2*(b+h)\n\treturn perimeter\n\nprint(parallelogram_perimeter(10,10))<｜end▁of▁sentence｜>"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\tresult = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n\treturn result\n\nnums = [12, 65, 54, 39, 102, 339, 221,]\nprint(\"Original list:\",nums)\nm = 13\nn = 65\nprint(\"Numbers of the said list divisible by\",m,\"and\",n,\":\")\nprint(div_of_nums(nums,m,n))<｜end▁of▁sentence｜>"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\ta = 1 << (l - 1) \n\tb = (1 << r) - 1\n\tif n & b == b and n & a == a: \n\t\treturn True\n\treturn False\nn,l,r=map(int,input().split())\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))<｜end▁of▁sentence｜>"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\tdict_str1 = {} \n\tdict_str2 = {} \n\tfor i, value in enumerate(str1): \n\t\tdict_str1[value] = dict_str1.get(value, []) + [i] \n\tfor j, value in enumerate(str2): \n\t\tdict_str2[value] = dict_str2.get(value, []) + [j] \n\tif sorted(dict_str1.values()) == sorted(dict_str2.values()): \n\t\treturn True\n\treturn False\nstr1 = input()\nstr2 = input()\nprint(is_Isomorphic(str1, str2))<｜end▁of▁sentence｜>"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\tsum = 0\n\tfor i in numbers:\n\t\tsum += i\n\treturn sum/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t\n\t# n^1 is n+1, then even, else odd \n\tif (n ^ 1 == n + 1) : \n\t\treturn False\n\telse : \n\t\treturn True\n\n# Driver code \nn = 5\nprint(\"Yes\") if is_odd(n) else print(\"No\") \n\nn = 10\nprint(\"Yes\") if is_odd(n) else print(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 287, "source": "MBPP:888", "prompt": "\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\tres = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n\treturn res\n\ntest_tup1 = (7, 2, 3, 4, 6, 72)\ntest_tup2 = (9, 5, 3, 7, 5, 10)\nprint (\"The tuple after subracting elements : \" + str(substract_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\"\"\"\n\t>>> reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\t[[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\t\"\"\"\n\treturn [list(reversed(l)) for l in lists]\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum"}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\tindex = 0\n\tfor i in range(0, n) : \n\t\tif (arr1[i] != arr2[i]) : \n\t\t\tindex = i \n\t\t\tbreak\n\tif (index == 0) : \n\t\treturn n - 1\n\telse : \n\t\treturn index \n\narr1 = [2, 4, 6, 8, 9, 10, 12] \narr2 = [2, 4, 6, 8, 10, 12] \nn = len(arr2) \nindex = find_Extra(arr1, arr2, n) \nprint(index)<｜end▁of▁sentence｜>"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\tcount1=0\n\tcount2=0\n\twhile A>0:\n\t\tcount1+=1\n\t\tA=A//10\n\twhile B>0:\n\t\tcount2+=1\n\t\tB=B//10\n\tif count1==count2:\n\t\treturn True\n\telse:\n\t\treturn False\nA=int(input(\"Enter the first number:\"))\nB=int(input(\"Enter the second number:\"))\nprint(same_Length(A,B))<｜end▁of▁sentence｜>"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\tnew_text = \"\"\n\tfor i in range(len(text)):\n\t\tif text[i] != \" \":\n\t\t\tnew_text += text[i]\n\t\telif text[i] == \" \" and text[i+1] != \" \":\n\t\t\tnew_text += text[i]\n\treturn new_text\n\nprint(remove_spaces(\"Hello     this is a   string\"))<｜end▁of▁sentence｜>"}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\tresult = map(lambda x: x[-1], lst) \n\treturn list(result) \n\nlst = [[1, 2, 3], [5, 6, 7], [9, 10, 11]] \nprint(Extract(lst))<｜end▁of▁sentence｜>"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\tres = tuple(float(i) for i in test_str.split())\n\treturn res\n\ntest_str = \"1.2 3.4 5.6 7.8\"\nprint(float_to_tuple(test_str))<｜end▁of▁sentence｜>"}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\tn = len(A)\n\tdp = [0]*n\n\tdp[0] = A[0]\n\tdp[1] = max(A[0], A[1])\n\tfor i in range(2, n):\n\t\tdp[i] = max(dp[i-1], dp[i-2]+A[i])\n\treturn dp[n-1]\n\n\nif __name__ == '__main__':\n\tA = [1, 2, 9, 4, 5, 0, 4, 11, 6]\n\tprint max_sum_subseq(A)<｜end▁of▁sentence｜>"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t\"\"\"\n\t>>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n\t[[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]\n\t\"\"\"\n\treturn sorted(tuples, key=lambda x: x[-1])\n\n\n\"\"\"\nWrite a function to remove duplicates from a list.\n\"\"\"\ndef remove_duplicates(lst):\n\t\"\"\"\n\t>>> remove_duplicates([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t\"\"\"\n\treturn list(set(lst))\n\n\n\"\"\"\nWrite a function to check whether a list contains a sublist.\n\"\"\"\ndef check_sublist(lst, sublist):\n\t\"\"\"\n\t>>> check_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5])\n\tTrue\n\t>>> check_sublist([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11])\n\tFalse\n\t\"\"\"\n\treturn sublist in lst\n\n\n\"\"\"\nWrite a function to find common elements in two lists.\n\"\"\"\ndef find_common_elements(lst1, lst2):\n\t\"\"\"\n\t>>> find_common_elements([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t\"\"\"\n\treturn list(set(lst1) & set(lst2))\n\n"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\tsentence = sentence.split() \n\tfor i in sentence: \n\t\tif (i == word): \n\t\t\treturn True\n\treturn False\nsentence = input(\"Enter the sentence: \")\nword = input(\"Enter the word: \")\nif (is_Word_Present(sentence, word)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\tresult = []\n\tfor i in range(len(numbers) - n + 1):\n\t\tresult.append(numbers[i:i+n])\n\treturn result\n\nprint(extract_elements([1, 1, 3, 4, 2, 3, 1, 2, 5, 6, 3, 2], 4))\nprint(extract_elements([1, 1, 3, 4, 2, 3, 1, 2, 5, 6, 3, 2], 5))<｜end▁of▁sentence｜>"}
{"ID": 298, "source": "MBPP:899", "prompt": "\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\n\"\"\"\ndef check(arr,n): \n\tcount = 0\n\t\n\t# Check for corner elements \n\t# first and last only \n\tif (arr[0] > arr[1]): \n\t\tcount += 1\n\tif (arr[n - 1] > arr[n - 2]): \n\t\tcount += 1\n\n\t# Check for all other elements \n\tfor i in range(1, n - 1): \n\t\tif (arr[i] > arr[i - 1] or arr[i] > arr[i + 1]): \n\t\t\tcount += 1\n\n\t# If count is greater than 1 \n\tif (count > 1): \n\t\treturn False\n\n\treturn True\n\n# Driver code \narr = [ 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110 ] \nn = len(arr) \n\nif (check(arr, n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\ttext = re.compile(r\"^5\")\n\tif text.match(string):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(match_num('5-2345861'))\nprint(match_num('6-2345861'))\n\n\"\"\"\nWrite a function that checks the validity of a password.\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_"}
{"ID": 300, "source": "MBPP:901", "prompt": "\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n\t\"\"\"\n\tFind the smallest multiple of the first n numbers.\n\t\"\"\"\n\tmultiple = 1\n\tfor i in range(1, n+1):\n\t\tmultiple = multiple * i\n\treturn multiple\n\nprint(smallest_multiple(10))<｜end▁of▁sentence｜>"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\td3={}\n\tfor i in d1:\n\t\tif i in d2:\n\t\t\td3[i]=d1[i]+d2[i]\n\t\telse:\n\t\t\td3[i]=d1[i]\n\tfor i in d2:\n\t\tif i not in d3:\n\t\t\td3[i]=d2[i]\n\treturn d3\n\nd1={'a':100,'b':200,'c':300}\nd2={'a':300,'b':200,'d':400}\nprint(add_dict(d1,d2))<｜end▁of▁sentence｜>"}
{"ID": 302, "source": "MBPP:903", "prompt": "\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\n\"\"\"\ndef count_Unset_Bits(n) :  \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tcount += bin(i).count('0') - 1\n\treturn count \n\nn = 17\nprint(count_Unset_Bits(n))<｜end▁of▁sentence｜>"}
{"ID": 303, "source": "MBPP:904", "prompt": "\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n\t\"\"\"\n\t>>> even_num(2)\n\tTrue\n\t>>> even_num(3)\n\tFalse\n\t\"\"\"\n\tif x%2==0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to return true if the given number is odd else return false.\n\"\"\"\ndef odd_num(x):\n\t\"\"\"\n\t>>> odd_num(2)\n\tFalse\n\t>>> odd_num(3)\n\tTrue\n\t\"\"\"\n\tif x%2==0:\n\t\treturn False\n\telse:\n\t\treturn True\n\n\"\"\"\nWrite a function to return true if the given number is prime else return false.\n\"\"\"\ndef prime_num(x):\n\t\"\"\"\n\t>>> prime_num(2)\n\tTrue\n\t>>> prime_num(4)\n\tFalse\n\t\"\"\"\n\tcount=0\n\tfor i in range(1,x+1):\n\t\tif x%i==0:\n\t\t\tcount+=1\n\tif count==2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to return true if the given number is palindrome else return false.\n\"\"\"\ndef palindrome_num(x):\n\t\"\"\"\n\t>>> palindrome_num(121)\n\tTrue\n\t>>> palindrome_num(123)\n\tFalse\n\t\"\"\"\n\ttemp=x\n\trev=0\n\twhile(x>0):\n\t\tdig=x%10\n\t\trev=rev*10+dig\n\t\tx=x//10\n\tif(temp==rev):\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to return true if the given number is armstrong else return false.\n\"\"\"\ndef armstrong_num(x):\n\t\"\"\"\n\t>>> armstrong_num(153)\n\tTrue\n\t>>> armstrong_num(123)\n\tFalse\n\t\"\"\"\n\tsum=0\n\ttemp=x\n\twhile temp>0:\n\t\tdigit=temp%10\n\t\tsum+=digit**3\n\t\ttemp//=10\n\tif x==sum:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a function to return"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\tsum = 0\n\tfor i in range(0, n+1): \n\t\tsum = sum + (2*i)**2\n\treturn sum\nn = 5\nprint(sum_of_square(n))<｜end▁of▁sentence｜>"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\timport re\n\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\tmatch = re.search(pattern, url)\n\tif match:\n\t\tyear = match.group(1)\n\t\tmonth = match.group(2)\n\t\tday = match.group(3)\n\t\treturn year, month, day\n\telse:\n\t\treturn None\n\nprint(extract_date('https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/'))<｜end▁of▁sentence｜>"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_nums = []\n\ti = 1\n\twhile len(lucky_nums) < n:\n\t\tlucky_nums.append(i)\n\t\ti += 1\n\t\tcount = 2\n\t\twhile count <= len(lucky_nums):\n\t\t\tif i % count == 0:\n\t\t\t\tlucky_nums.remove(i)\n\t\t\t\tbreak\n\t\t\tcount += 1\n\treturn lucky_nums\n\nprint(lucky_num(10))<｜end▁of▁sentence｜>"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\tlow = 0\n\thigh = n - 1\n\twhile low <= high: \n\t\tmid = (low + high) // 2\n\t\tif arr[mid] == mid: \n\t\t\treturn mid \n\t\telif arr[mid] < mid: \n\t\t\tlow = mid + 1\n\t\telse: \n\t\t\thigh = mid - 1\n\treturn -1\n\narr = [-10, -5, 0, 3, 7] \nn = len(arr) \nprint(\"Fixed Point is \" + str(find_fixed_point(arr, n)))<｜end▁of▁sentence｜>"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\twhile True:\n\t\tnum -= 1\n\t\tif str(num) == str(num)[::-1]:\n\t\t\treturn num\n\nprint(previous_palindrome(1234))\nprint(previous_palindrome(1221))\nprint(previous_palindrome(12321))\nprint(previous_palindrome(121))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome(1234567890123456789012))\nprint(previous_palindrome(12345678901234567890123))\nprint(previous_palindrome(123456789012345678901234))\n"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\t"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\timport heapq\n\ta = heapq.nlargest(3, nums)\n\tb = heapq.nsmallest(2, nums)\n\treturn max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\nnums = [10, 3, 5, 6, 20]\nprint(\"Original array elements:\")\nprint(nums)\nprint(\"Maximum product of three numbers of the said array:\")\nprint(maximum_product(nums))\nnums = [-10, -3, -5, -6, -20]\nprint(\"\\nOriginal array elements:\")\nprint(nums)\nprint(\"Maximum product of three numbers of the said array:\")\nprint(maximum_product(nums))\nnums = [1, 4, 3, 5, 2]\nprint(\"\\nOriginal array elements:\")\nprint(nums)\nprint(\"Maximum product of three numbers of the said array:\")\nprint(maximum_product(nums))<｜end▁of▁sentence｜>"}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t\"\"\"\n\t>>> end_num('abcdef')\n\tFalse\n\t>>> end_num('abcdef6')\n\tTrue\n\t\"\"\"\n\ttry:\n\t\tint(string[-1])\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef palindrome(string):\n\t\"\"\"\n\t>>> palindrome('racecar')\n\tTrue\n\t>>> palindrome('race car')\n\tFalse\n\t\"\"\"\n\treturn string == string[::-1]\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(string):\n\t\"\"\"\n\t>>> count_words('How many words       here       ')\n\t4\n\t\"\"\"\n\treturn len(string.split())\n\n\n\"\"\"\nWrite a function to count the number of lines in a string.\n\"\"\"\ndef count_lines(string):\n\t\"\"\"\n\t>>> count_lines('How many words\\\\nhere')\n\t2\n\t\"\"\"\n\treturn len(string.split('\\n'))\n\n\n\"\"\"\nWrite a function to get the square root of a number.\n\"\"\"\ndef square_root(num):\n\t\"\"\"\n\t>>> square_root(100)\n\t10.0\n\t\"\"\"\n\treturn num ** 0.5\n\n\n\"\"\"\nWrite a function to get the cube root of a number.\n\"\"\"\ndef cube_root(num):\n\t\"\"\"\n\t>>> cube_root(1000)\n\t10.0\n\t\"\"\"\n\treturn num ** (1/3)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary.\n\"\"\"\ndef binary_and(a, b):\n\t\"\"\"\n\t>>> binary_and(5, 3)\n\t'0b101'\n\t>>> binary_and(5, 6)\n\t'0b100'\n\t\"\"\"\n\treturn bin(a & b)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary.\n\"\"\"\ndef binary_or(a, b):\n\t\"\"\"\n\t>>> binary_or(5, 3)"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\tn = len(s)  \n\tfor i in range(n - 1):  \n\t\tif s[i] == s[i + 1]:  \n\t\t\treturn False\n\treturn True\ns = input(\"Enter the string: \")\nprint(is_Two_Alter(s))<｜end▁of▁sentence｜>"}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t\"\"\"\n\tRearrange positive and negative numbers in a given array using lambda function.\n\t\"\"\"\n\treturn [x for x in array_nums if x < 0] + [x for x in array_nums if x >= 0]\n\nprint(rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10]))<｜end▁of▁sentence｜>"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\tA.sort()\n\tfor i in range(0, arr_size-2): \n\t\tl = i + 1 \n\t\tr = arr_size-1 \n\t\twhile (l < r): \n\t\t\tif( A[i] + A[l] + A[r] == sum): \n\t\t\t\tprint(\"Triplet is\", A[i], ', ', A[l], ', ', A[r]); \n\t\t\t\treturn True\n\t\t\telif (A[i] + A[l] + A[r] < sum): \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tr -= 1\n\treturn False\n\nA = [1, 4, 45, 6, 10, 8] \nsum = 22\narr_size = len(A) \nfind_triplet_array(A, arr_size, sum)<｜end▁of▁sentence｜>"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\tresult = re.findall('[A-Z][a-z]+', text)\n\treturn result\n\ntext = \"Write a function to find the sequences of one upper case letter followed by lower case letters.\"\nprint(text_uppercase_lowercase(text))<｜end▁of▁sentence｜>"}
{"ID": 317, "source": "MBPP:918", "prompt": "\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count coin change.\n\"\"\"\ndef coin_change(S, m, n): \n\ttable = [0 for k in range(n+1)] \n\ttable[0] = 1\n\tfor i in range(0,m): \n\t\tfor j in range(S[i],n+1): \n\t\t\ttable[j] += table[j-S[i]] \n\treturn table[n] \n\narr = [1, 2, 3] \nm = len(arr) \nn = 4\nx = coin_change(arr, m, n) \nprint (x)<｜end▁of▁sentence｜>"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\tmultiply_numbers = 1\n\tfor x in items:\n\t\tmultiply_numbers *= x\n\treturn multiply_numbers\nprint(multiply_list([1,2,3,4]))<｜end▁of▁sentence｜>"}
{"ID": 319, "source": "MBPP:920", "prompt": "\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n\tres = [sub for sub in test_list if not all(ele == None for ele in sub)]\n\treturn res\n\ntest_list = [(None, 2), (None, None), (3, 4), (12, 3), (None, )]\nprint(remove_tuple(test_list))<｜end▁of▁sentence｜>"}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\tres = []\n\tfor i in range(0, len(test_tup), N):\n\t\tres.append(test_tup[i:i + N])\n\treturn res\n\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nN = 3\nprint(chunk_tuples(test_tup, N))<｜end▁of▁sentence｜>"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\tn = len(arr)\n\tif n < 2: \n\t\treturn\n\tx = y = 0\n\tfor i in range(n): \n\t\tif arr[i] > x: \n\t\t\ty = x\n\t\t\tx = arr[i] \n\t\telif arr[i] > y: \n\t\t\ty = arr[i] \n\treturn x * y \n\narr = [1, 2, 3, 4, 5, 6, 7] \nprint(max_product(arr))<｜end▁of▁sentence｜>"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\tdp = [[0 for i in range(n+1)] for j in range(m+1)]\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tif i == 0:\n\t\t\t\tdp[i][j] = j\n\t\t\telif j == 0:\n\t\t\t\tdp[i][j] = i\n\t\t\telif X[i-1] == Y[j-1]:\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1]\n\t\t\telse:\n\t\t\t\tdp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\treturn dp[m][n]\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Length of the shortest supersequence is %d\" % super_seq(X, Y, len(X), len(Y)))<｜end▁of▁sentence｜>"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t\"\"\"\n\tReturns the maximum of two numbers.\n\t\"\"\"\n\tif x > y:\n\t\treturn x\n\treturn y\n\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\t\"\"\"\n\tReturns the maximum of three numbers.\n\t\"\"\"\n\treturn max_of_two( x, max_of_two( y, z ) )\n\n\n\"\"\"\nWrite a function to sum all the numbers in a list.\n\"\"\"\ndef sum(numbers):\n\t\"\"\"\n\tReturns the sum of all the numbers in a list.\n\t\"\"\"\n\ttotal = 0\n\tfor x in numbers:\n\t\ttotal += x\n\treturn total\n\n\n\"\"\"\nWrite a function to multiply all the numbers in a list.\n\"\"\"\ndef multiply(numbers):\n\t\"\"\"\n\tReturns the product of all the numbers in a list.\n\t\"\"\"\n\ttotal = 1\n\tfor x in numbers:\n\t\ttotal *= x\n\treturn total\n\n\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\ndef reverse(string):\n\t\"\"\"\n\tReturns the reverse of a string.\n\t\"\"\"\n\treturn string[::-1]\n\n\n\"\"\"\nWrite a function to calculate the factorial of a number.\n\"\"\"\ndef factorial(n):\n\t\"\"\"\n\tReturns the factorial of a number.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)\n\n\n\"\"\"\nWrite a function that accepts a string and calculate the number of upper case letters and lower case letters.\n\"\"\"\ndef string_test(s):\n\t\"\"\"\n\tReturns the number of upper case letters and lower case letters in a string.\n\t\"\"\"\n\td={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\n\tfor c in s:\n\t\tif c.isupper():\n\t\t\td[\"UPPER_CASE\"]+=1\n\t\telif c.islower():\n\t\t\td[\"LOWER_CASE\"]+=1\n\t\telse:\n\t\t\tpass\n\tprint (\"Original String : \", s)\n\tprint (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\n\t"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint("}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\"\"\"\n\t>>> rencontres_number(1, 1)\n\t1\n\t>>> rencontres_number(2, 1)\n\t0\n\t>>> rencontres_number(2, 2)\n\t1\n\t>>> rencontres_number(3, 1)\n\t0\n\t>>> rencontres_number(3, 2)\n\t1\n\t>>> rencontres_number(3, 3)\n\t0\n\t>>> rencontres_number(4, 1)\n\t0\n\t>>> rencontres_number(4, 2)\n\t0\n\t>>> rencontres_number(4, 3)\n\t1\n\t>>> rencontres_number(4, 4)\n\t0\n\t>>> rencontres_number(5, 1)\n\t0\n\t>>> rencontres_number(5, 2)\n\t0\n\t>>> rencontres_number(5, 3)\n\t0\n\t>>> rencontres_number(5, 4)\n\t1\n\t>>> rencontres_number(5, 5)\n\t0\n\t>>> rencontres_number(6, 1)\n\t0\n\t>>> rencontres_number(6, 2)\n\t0\n\t>>> rencontres_number(6, 3)\n\t0\n\t>>> rencontres_number(6, 4)\n\t0\n\t>>> rencontres_number(6, 5)\n\t1\n\t>>> rencontres_number(6, 6)\n\t0\n\t>>> rencontres_number(7, 1)\n\t0\n\t>>> rencontres_number(7, 2)\n\t0\n\t>>> rencontres_number(7, 3)\n\t0\n\t>>> rencontres_number(7, 4)\n\t0\n\t>>> rencontres_number(7, 5)\n\t0\n\t>>> rencontres_number(7, 6)\n\t1\n\t>>> rencontres_number(7, 7)\n\t0\n\t>>> rencontres_number(8, 1)\n\t0\n\t>>> rencontres_number(8, 2)\n\t0\n"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        lheight = height(root.left)\n        rheight = height(root.right)\n        if lheight > rheight:\n            return lheight + 1\n        else:\n            return rheight + 1\n\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \n\nprint(\"Height of tree is %d\" %(height(root)))<｜end▁of▁sentence｜>"}
{"ID": 327, "source": "MBPP:928", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\ndef change_date_format(dt):\n\td,m,y = dt.split('-')\n\treturn '-'.join((d,m,y))\n\nprint(change_date_format(\"2026-01-02\"))\nprint(change_date_format(\"1997-08-11\"))<｜end▁of▁sentence｜>"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\tcount = 0  \n\tfor i in tuplex:  \n\t\tif i == value:  \n\t\t\tcount = count + 1  \n\treturn count  \n  \ntuplex = (4, 8, 6, 4, 1, 2, 3, 4)  \nprint(tuplex)  \nvalue = 4  \nprint(\"The count of\",value,\"in the tuple is:\",count_tuplex(tuplex, value))<｜end▁of▁sentence｜>"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpatterns = 'ab*?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match(\"ac\"))\nprint(text_match(\"abc\"))\nprint(text_match(\"abbc\"))<｜end▁of▁sentence｜>"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i**3\n\treturn sum\n\nprint(sum_series(3))<｜end▁of▁sentence｜>"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\tl1=[]\n\tfor i in l:\n\t\tif i not in l1:\n\t\t\tl1.append(i)\n\treturn l1\n\nl=['a','b','c','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nprint(remove_duplic_list(l))<｜end▁of▁sentence｜>"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\timport re\n\tstr1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\nprint(camel_to_snake('PythonExercises'))\nprint(camel_to_snake('PythonExercisesPracticeSolution'))<｜end▁of▁sentence｜>"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\"\"\"\n\t:type n: int\n\t:type m: int\n\t:rtype: int\n\t\"\"\"\n\tdp = [[0 for i in range(m+1)] for j in range(n+1)]\n\tfor i in range(n+1):\n\t\tfor j in range(m+1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tdp[i][j] = 1\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n\treturn dp[n][m]\n\nif __name__ == '__main__':\n\tn, m = 3, 3\n\tprint(dealnnoy_num(n, m))<｜end▁of▁sentence｜>"}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i**2\n\treturn sum\n\nprint(series_sum(5))<｜end▁of▁sentence｜>"}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t\"\"\"\n\tFunction to re-arrange the given tuples based on the given ordered list.\n\t\"\"\"\n\ttemp = dict(test_list)\n\tres = [(key, temp[key]) for key in ord_list]\n\treturn res\n\n# Driver code\ntest_list = [('Gfg', 3), ('is', 2), ('Best', 1)]\nord_list = ['Best', 'is', 'Gfg']\nprint(\"The original list is : \" + str(test_list))\nprint(\"The original order list is : \" + str(ord_list))\nprint(\"The re-arranged tuple list is : \" + str(re_arrange_tuples(test_list, ord_list)))<｜end▁of▁sentence｜>"}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\tmax_char = ''\n\tmax_count = 0\n\tchar_count = {}\n\tfor char in str1:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\t\tif char_count[char] > max_count:\n\t\t\tmax_count = char_count[char]\n\t\t\tmax_char = char\n\treturn max_char\n\nprint(max_char('abcccccccd'))<｜end▁of▁sentence｜>"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\tdiff = float('inf') \n\tres_i = 0\n\tres_j = 0\n\tres_k = 0\n\twhile p < len(A) and q < len(B) and r < len(C): \n\t\tminimum = min(A[p], B[q], C[r]) \n\t\tmaximum = max(A[p], B[q], C[r]) \n\t\tif maximum - minimum < diff: \n\t\t\tres_i = p \n\t\t\tres_j = q \n\t\t\tres_k = r \n\t\t\tdiff = maximum - minimum \n\t\tif diff == 0: \n\t\t\tbreak\n\t\tif A[p] == minimum: \n\t\t\tp += 1\n\t\telif B[q] == minimum: \n\t\t\tq += 1\n\t\telse: \n\t\t\tr += 1\n\treturn A[res_i], B[res_j], C[res_k] \n\nA = [1, 4, 10] \nB = [2, 15, 20] \nC = [10, 12] \n\np, q, r = 0, 0, 0\nprint(find_closet(A, B, C, p, q, r))<｜end▁of▁sentence｜>"}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\tmodels.sort(key = lambda x: x['color'])\n\treturn models\n\nmodels = [{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':'2', 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}]\nprint(\"Original list of dictionaries :\")\nprint(models)\nsorted_models = sorted_models(models)\nprint(\"\\nSorting the List of dictionaries :\")\nprint(sorted_models)<｜end▁of▁sentence｜>"}
{"ID": 339, "source": "MBPP:940", "prompt": "\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n\tn = len(arr)\n\n\t# Build a maxheap.\n\tfor i in range(n, -1, -1):\n\t\theapify(arr, n, i)\n\n\t# One by one extract elements\n\tfor i in range(n-1, 0, -1):\n\t\tarr[i], arr[0] = arr[0], arr[i] # swap\n\t\theapify(arr, i, 0)\n\ndef heapify(arr, n, i):\n\tlargest = i # Initialize largest as root\n\tl = 2 * i + 1\t # left = 2*i + 1\n\tr = 2 * i + 2\t # right = 2*i + 2\n\n\t# See if left child of root exists and is\n\t# greater than root\n\tif l < n and arr[i] < arr[l]:\n\t\tlargest = l\n\n\t# See if right child of root exists and is\n\t# greater than root\n\tif r < n and arr[largest] < arr[r]:\n\t\tlargest = r\n\n\t# Change root, if needed\n\tif largest != i:\n\t\tarr[i], arr[largest] = arr[largest], arr[i] # swap\n\n\t\t# Heapify the root.\n\t\theapify(arr, n, largest)\n\n# Driver code to test above\narr = [12, 11, 13, 5, 6, 7]\nheap_sort(arr)\nn = len(arr)\nprint(\"Sorted array is\")\nfor i in range(n):\n\tprint(\"%d\" % arr[i]),<｜end▁of▁sentence｜>"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif isinstance(i, tuple):\n\t\t\tbreak\n\t\tcount += 1\n\treturn count\n\nprint(count_elim([1,2,3,(1,2),3]))<｜end▁of▁sentence｜>"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t\"\"\"\n\tWrite a function to check if any list element is present in the given list.\n\t\"\"\"\n\tresult = False\n\tfor i in test_tup:\n\t\tif i in check_list:\n\t\t\tresult = True\n\t\t\tbreak\n\treturn result\n\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ncheck_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(check_element(test_tup, check_list))<｜end▁of▁sentence｜>"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\timport heapq\n\tnum1=list(num1)\n\tnum2=list(num2)\n\theapq.heapify(num1)\n\theapq.heapify(num2)\n\tnum1=heapq.merge(num1,num2)\n\treturn list(num1)\n\nprint(combine_lists([1,2,3],[4,5,6]))<｜end▁of▁sentence｜>"}
{"ID": 343, "source": "MBPP:944", "prompt": "\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(text):\n\tresult = \"\"\n\tfor i,char in enumerate(text):\n\t\tif char.isdigit():\n\t\t\tresult += char + \" \" + str(i) + \",\"\n\treturn result[:-1]\n\nprint(num_position(\"Emma25 is Data scientist50 and AI Expert\"))<｜end▁of▁sentence｜>"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t\"\"\"\n\t>>> tuple_to_set((1,2,3,4,5))\n\t{1, 2, 3, 4, 5}\n\t>>> tuple_to_set(('a','b','c','d','e'))\n\t{'a', 'b', 'c', 'd', 'e'}\n\t>>> tuple_to_set((1,2,3,4,5,1,2,3,4,5))\n\t{1, 2, 3, 4, 5}\n\t>>> tuple_to_set(('a','b','c','d','e','a','b','c','d','e'))\n\t{'a', 'b', 'c', 'd', 'e'}\n\t\"\"\"\n\treturn set(t)\n\n\n\"\"\"\nWrite a function to convert the given list into set.\n\"\"\"\ndef list_to_set(l):\n\t\"\"\"\n\t>>> list_to_set([1,2,3,4,5])\n\t{1, 2, 3, 4, 5}\n\t>>> list_to_set(['a','b','c','d','e'])\n\t{'a', 'b', 'c', 'd', 'e'}\n\t>>> list_to_set([1,2,3,4,5,1,2,3,4,5])\n\t{1, 2, 3, 4, 5}\n\t>>> list_to_set(['a','b','c','d','e','a','b','c','d','e'])\n\t{'a', 'b', 'c', 'd', 'e'}\n\t\"\"\"\n\treturn set(l)\n\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\"\"\"\n\t>>> set_to_list({1,2,3,4,5})\n\t[1, 2, 3, 4, 5]\n\t>>> set_to_list({'a','b','c','d','e'})\n\t['a', 'b', 'c', 'd', 'e']\n\t>>> set_to_list({1,2,3,4,5,1,2,3,4,5})\n\t[1"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\td={}\n\tfor i in s:\n\t\tif i in d:\n\t\t\td[i]+=1\n\t\telse:\n\t\t\td[i]=1\n\tl=[]\n\tfor i in d:\n\t\tif d[i]==a:\n\t\t\tl.append(i)\n\treturn l\ns=input(\"Enter the string: \")\na=int(input(\"Enter the count: \"))\nprint(most_common_elem(s,a))<｜end▁of▁sentence｜>"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\tlist2=[]\n\tfor i in list1:\n\t\tlist2.append(len(i))\n\treturn min(list2)\n\nlist1=[\"hello\",\"world\",\"hi\",\"bye\"]\nprint(len_log(list1))<｜end▁of▁sentence｜>"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1"}
{"ID": 348, "source": "MBPP:949", "prompt": "\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef sort_list(test_list):\n\tres = sorted(test_list, key = lambda ele: sum(len(str(ele)) for ele in ele))\n\treturn res\n\ntest_list = [(3, 4, 6, 723), (1, 2), (134, 234, 34)]\nprint(sort_list(test_list))<｜end▁of▁sentence｜>"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\tanimals = [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\"]\n\tprint(animals[(year - 1900) % 12])\n\nchinese_zodiac(1990)<｜end▁of▁sentence｜>"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\tres = []\n\tfor i in range(len(test_list1)):\n\t\tres.append(max(test_list1[i][1], test_list2[i][1]))\n\treturn res\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntest_list2 = [(1, 3), (3, 5), (5, 7), (7, 9)]\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\nprint(\"The maximum of similar indices in two lists of tuples : \" + str(max_similar_indices(test_list1, test_list2)))<｜end▁of▁sentence｜>"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tC = [0] * (n + 1) \n\tC[0] = 1\n\tfor i in range(1, n + 1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j - 1]) % p \n\treturn C[r] \n\n# Driver program \nn = 1000\nr = 200\np = 13\nprint('Value of nCr % p is', nCr_mod_p(n, r, p))<｜end▁of▁sentence｜>"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\tres = 0\n\tmp = {} \n\tfor i in range(n): \n\t\tif ar[i] not in mp: \n\t\t\tmp[ar[i]] = 1\n\t\telse: \n\t\t\tmp[ar[i]] += 1\n\tfor it in mp: \n\t\tres += 1\n\treturn res \nif __name__ == \"__main__\": \n\tar = [ 1, 2, 1, 3, 4, 2 ] \n\tn = len(ar) \n\tprint(subset(ar, n))<｜end▁of▁sentence｜>"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\tprofit=sale_amount-actual_cost\n\tif profit>0:\n\t\treturn profit\n\telse:\n\t\treturn None\n\nprint(profit_amount(100,100))\nprint(profit_amount(20,30))\nprint(profit_amount(30,20))<｜end▁of▁sentence｜>"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\tsum = 0\n\tfor i in range(1,n):\n\t\tif n%i == 0:\n\t\t\tsum += i\n\tif sum > n:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_abundant(12))\nprint(is_abundant(13))<｜end▁of▁sentence｜>"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\timport re\n\tpattern = r'[A-Z]'\n\tresult = re.split(pattern, text)\n\treturn result\n\nprint(split_list(\"PythonIsAnObjectOrientedLanguage\"))<｜end▁of▁sentence｜>"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\tpos = 1\n\twhile n > 0:\n\t\tif n & 1 == 1:\n\t\t\treturn pos\n\t\tn = n >> 1\n\t\tpos += 1\n\treturn 0\n\n\nif __name__ == '__main__':\n\tn = int(input())\n\tprint(get_First_Set_Bit_Pos(n))<｜end▁of▁sentence｜>"}
{"ID": 357, "source": "MBPP:958", "prompt": "\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: str\n\t\"\"\"\n\tvalues = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]\n\tnumerals = [ \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" ]\n\tres, i = \"\", 0\n\twhile num:\n\t\tres += (num//values[i]) * numerals[i]\n\t\tnum %= values[i]\n\t\ti += 1\n\treturn res\n\n\nprint(int_to_roman(1234))<｜end▁of▁sentence｜>"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\tlength = len(lst) \n\tsum = 0\n\tfor i in lst: \n\t\tsum += i \n\treturn sum/length\n\nlst = [15, 9, 55, 41, 35, 20, 62, 49] \naverage = Average(lst) \nprint(\"Average of the list =\", round(average, 2))<｜end▁of▁sentence｜>"}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\treturn get_noOfways(n-1) + get_noOfways(n-2)\n\n\ndef get_noOfways_dp(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tdp = [0] * (n+1)\n\tdp[0] = 0\n\tdp[1] = 1\n\tdp[2] = 2\n\tfor i in range(3, n+1):\n\t\tdp[i] = dp[i-1] + dp[i-2]\n\treturn dp[n]\n\n\nif __name__ == \"__main__\":\n\tprint get_noOfways(4)\n\tprint get_noOfways_dp(4)<｜end▁of▁sentence｜>"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t\"\"\"\n\t:type s: str\n\t:rtype: int\n\t\"\"\"\n\troman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n\tresult = 0\n\tfor i in range(len(s)):\n\t\tif i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n\t\t\tresult += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n\t\telse:\n\t\t\tresult += roman_dict[s[i]]\n\treturn result\n\nprint(roman_to_int('III'))\nprint(roman_to_int('IV'))\nprint(roman_to_int('IX'))\nprint(roman_to_int('LVIII'))\nprint(roman_to_int('MCMXCIV'))<｜end▁of▁sentence｜>"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\tsum=0\n\tfor i in range(l,r+1):\n\t\tif i%2==0:\n\t\t\tsum=sum+i\n\treturn sum\n\nl=int(input(\"Enter the lower limit: \"))\nr=int(input(\"Enter the upper limit: \"))\nprint(\"Sum of all even numbers between\",l,\"and\",r,\"is\",sum_Even(l,r))<｜end▁of▁sentence｜>"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\"\"\"\n\tThis function calculates the discriminant value.\n\t\"\"\"\n\tdiscriminant = y**2 - 4*x*z\n\treturn discriminant\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_2(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_3(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tl=len(s)\n\tif l%2==0:\n\t\treturn True\n\telse:\n\t\treturn False\ns=input(\"Enter a word: \")\nprint(word_len(s))<｜end▁of▁sentence｜>"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\timport re\n\tstr1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\nprint(camel_to_snake('PythonExercises'))\nprint(camel_to_snake('PythonExercisesPracticeSolution'))<｜end▁of▁sentence｜>"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\tL = [t for t in tuple1 if t]\n\treturn L\n\ntuple1 = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(tuple1))<｜end▁of▁sentence｜>"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\tstring = string.replace(' ', '') \n\tstring = string.lower() \n\tvowels = set(\"aeiou\") \n\ts = set({}) \n\tfor char in string: \n\t\tif char in vowels: \n\t\t\ts.add(char) \n\t\telse: \n\t\t\tpass\n\tif len(s) == len(vowels): \n\t\tprint(\"Accepted\") \n\telse: \n\t\tprint(\"Not Accepted\") \nif __name__ == \"__main__\": \n\tstring = \"SEEquoiaL\"\n\tcheck(string)<｜end▁of▁sentence｜>"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\tmax_val = A*N + B*(N*(N-1)//2)\n\treturn max_val\n\nif __name__ == '__main__':\n\tA = 1\n\tB = 2\n\tN = 3\n\tprint(floor_Max(A,B,N))<｜end▁of▁sentence｜>"}
{"ID": 368, "source": "MBPP:969", "prompt": "\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n\tres = []\n\tfor sub in test_list:\n\t\tif res and res[-1][0] == sub[0]:\n\t\t\tres[-1].extend(sub)\n\t\telse:\n\t\t\tres.append(sub)\n\tres = list(map(tuple, res))\n\treturn res\n\ntest_list = [(5, 6), (5, 7), (5, 8), (6, 10), (7, 13)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The extracted elements : \" + str(join_tuples(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of four numbers.\n\"\"\"\ndef min_of_four( w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of five numbers.\n\"\"\"\ndef min_of_five( v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of six numbers.\n\"\"\"\ndef min_of_six( u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of seven numbers.\n\"\"\"\ndef min_of_seven( t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eight numbers.\n\"\"\"\ndef min_of_eight( s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of nine numbers.\n\"\"\"\ndef min_of_nine( r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of ten numbers.\n\"\"\"\ndef min_of_ten( q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eleven numbers.\n\"\"\"\ndef min_of_eleven( p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of twelve numbers.\n\"\"\"\ndef min_of_twelve( o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of thirteen numbers.\n\"\"\"\ndef min_of_thirteen( n, o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of fourteen numbers.\n\"\"\"\ndef"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t\n\t# stores the maximum number of segments \n\t# of length 'a', 'b' and 'c' can be formed \n\t# using the given number of segments \n\tdp = [-1] * (n + 10) \n\n\t# Initialize dp[0] to 0 \n\tdp[0] = 0\n\n\t# loop for all possible segments \n\tfor i in range(0, n) : \n\t\t\n\t\tif (dp[i] != -1) : \n\t\t\t\n\t\t\t# conditions \n\t\t\tif(i + a <= n ) : #avoiding index out of bound \n\t\t\t\tdp[i + a] = max(dp[i] + 1, \n\t\t\t\t\t\t\t\tdp[i + a]) \n\t\t\t\t\t\t\t\t\t\n\t\t\tif(i + b <= n ) : #avoiding index out of bound \n\t\t\t\tdp[i + b] = max(dp[i] + 1, \n\t\t\t\t\t\t\t\tdp[i + b]) \n\t\t\t\t\t\t\t\t\t\n\t\t\tif(i + c <= n ) : #avoiding index out of bound \n\t\t\t\tdp[i + c] = max(dp[i] + 1, \n\t\t\t\t\t\t\t\tdp[i + c]) \n\t\t\t\t\t\t\t\t\t\n\n\t# return dp[n] if possible \n\treturn dp[n] \n\n# Driver Code \nn = 7\na = 5\nb = 2\nc = 5\nprint(maximum_segments(n, a, b, c)) \n\n# This code is contributed by Nikita Tiwari. \n\n\"\"\"\nOutput:\n2\n\nTime Complexity: O(n)\nAuxiliary Space: O(n)\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\tres = (test_tup1, test_tup2)\n\treturn res\n\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (3, 4, 5)\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\nprint(\"Nesting tuples in a tuple : \" + str(concatenate_nested(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\ttemp=s[0:d]\n\ttemp1=s[d:]\n\treturn temp1+temp\ns=input(\"Enter the string: \")\nd=int(input(\"Enter the number of rotations: \"))\nprint(left_rotate(s,d))<｜end▁of▁sentence｜>"}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\tn = len(A)\n\tdp = [[0 for i in range(n)] for j in range(n)]\n\tdp[0][0] = A[0][0]\n\tfor i in range(1,n):\n\t\tfor j in range(i+1):\n\t\t\tif j == 0:\n\t\t\t\tdp[i][j] = dp[i-1][j] + A[i][j]\n\t\t\telif j == i:\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + A[i][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = min(dp[i-1][j],dp[i-1][j-1]) + A[i][j]\n\treturn min(dp[n-1])\n\nA = [[2],[3,4],[6,5,7],[4,1,8,3]]\nprint(min_sum_path(A))<｜end▁of▁sentence｜>"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\tnew_s = \"\" \n\tn = len(s) \n\tfor i in range(n): \n\t\tif s[i] == ch and i < n-1 and s[i+1] == ch: \n\t\t\tcontinue\n\t\telif s[i] == ch and i == n-1 and new_s[-1] == ch: \n\t\t\tcontinue\n\t\telse: \n\t\t\tnew_s = new_s + s[i] \n\treturn new_s \n\ns = input(\"Enter the string: \")\nch = input(\"Enter the character to be removed: \")\nprint(remove_Occ(s,ch))<｜end▁of▁sentence｜>"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t\"\"\"\n\t>>> M = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n\t>>> sort_matrix(M)\n\t[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\t\"\"\"\n\tM.sort(key=sum)\n\treturn M\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\t>>> count_common(['a', 'a', 'b', 'c', 'c', 'c'])\n\t['c', 'a']\n\t\"\"\"\n\tcounts = {}\n\tfor word in words:\n\t\tif word in counts:\n\t\t\tcounts[word] += 1\n\t\telse:\n\t\t\tcounts[word] = 1\n\n\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file(filename):\n\t\"\"\"\n\t>>> count_common_file('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\treturn count_common(words)\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_2(filename):\n\t\"\"\"\n\t>>> count_common_file_2('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\tcounts = {}\n\tfor word in words:\n\t\tif word in counts:\n\t\t\tcounts[word] += 1\n\t\telse:\n\t\t\tcounts[word] = 1\n\n\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_3(filename):\n\t\"\"\"\n\t>>> count_common_file_3('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\tcounts = {}\n\tfor word in words:\n\t\tif word in"}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\tvol = (l * b * h)/3\n\treturn vol\n\nl = int(input(\"Enter the length of the triangular prism : \"))\nb = int(input(\"Enter the breadth of the triangular prism : \"))\nh = int(input(\"Enter the height of the triangular prism : \"))\n\nprint(\"Volume of the triangular prism is : \",find_Volume(l, b, h))<｜end▁of▁sentence｜>"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\"\"\"\n\t>>> split_lowerstring(\"Hello World\")\n\t['Hello', 'World']\n\t>>> split_lowerstring(\"HiThere\")\n\t['Hi', 'There']\n\t>>> split_lowerstring(\"\")\n\t[]\n\t>>> split_lowerstring(\"a\")\n\t['a']\n\t>>> split_lowerstring(\"A\")\n\t['A']\n\t>>> split_lowerstring(\"AA\")\n\t['AA']\n\t>>> split_lowerstring(\"aA\")\n\t['a', 'A']\n\t>>> split_lowerstring(\"aAA\")\n\t['a', 'AA']\n\t>>> split_lowerstring(\"AAa\")\n\t['AA', 'a']\n\t>>> split_lowerstring(\"AAA\")\n\t['AAA']\n\t>>> split_lowerstring(\"aAa\")\n\t['a', 'A', 'a']\n\t>>> split_lowerstring(\"aAAa\")\n\t['a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAA\")\n\t['a', 'AAA']\n\t>>> split_lowerstring(\"aAaA\")\n\t['a', 'A', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAa\")\n\t['a', 'AAA', 'a']\n\t>>> split_lowerstring(\"aAAAaA\")\n\t['a', 'AAA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAA\")\n\t['a', 'AAA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAAaAAaA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAAaAA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAAaAAaAAaA"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\tresult = re.findall('[a-z]+_[a-z]+', text)\n\treturn result\n\ntext = \"The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\nprint(text_lowercase_underscore(text))<｜end▁of▁sentence｜>"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\tperimeter = 4 * a\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\tarea = a * a\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\tperimeter = 2 * (a + b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\tarea = a * b\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\tperimeter = 2 * 3.14 * r\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea = 3.14 * r * r\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\tperimeter = a + b + c\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a + b + c) / 2\n\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a, b, c, d):\n\tperimeter = a + b + c + d\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\tarea = (a + b) / 2 * h\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(a, b):\n\tperimeter = 2 * (a + b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef par"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\tcount = 0\n\tres_str = [] \n\tfor i in range(0, len(string)): \n\t\tfor j in range(0, len(second_string)): \n\t\t\tif string[i] == second_string[j]: \n\t\t\t\tcount += 1\n\t\tif count == 0: \n\t\t\tres_str.append(string[i]) \n\treturn toString(res_str) \n\ndef toString(List): \n\treturn ''.join(List) \n\nstring = \"battle of the vowels: Hawaii vs. Grozny\"\nsecond_string = \"aeiou\"\nprint(remove_dirty_chars(string, second_string))<｜end▁of▁sentence｜>"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\tnums = set(arraynums)\n\treturn len(arraynums) != len(nums)\n\nprint(test_duplicate([1,2,3,4,5]))\nprint(test_duplicate([1,2,3,4, 4]))\nprint(test_duplicate([1,1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\"\"\"\n\t>>> is_woodall(123)\n\tTrue\n\t>>> is_woodall(1234)\n\tFalse\n\t>>> is_woodall(12345)\n\tFalse\n\t>>> is_woodall(123456)\n\tFalse\n\t>>> is_woodall(1234567)\n\tFalse\n\t>>> is_woodall(12345678)\n\tFalse\n\t>>> is_woodall(123456789)\n\tFalse\n\t>>> is_woodall(1234567890)\n\tFalse\n\t>>> is_woodall(12345678901)\n\tFalse\n\t>>> is_woodall(123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123)\n\tFalse\n\t>>> is_woodall(12345678901234)\n\tFalse\n\t>>> is_woodall(123456789012345)\n\tFalse\n\t>>> is_woodall(1234567890123456)\n\tFalse\n\t>>> is_woodall(12345678901234567)\n\tFalse\n\t>>> is_woodall(123456789012345678)\n\tFalse\n\t>>> is_woodall(1234567890123456789)\n\tFalse\n\t>>> is_woodall(12345678901234567890)\n\tFalse\n\t>>> is_woodall(123456789012345678901)\n\tFalse\n\t>>> is_woodall(1234567890123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\tmultiples = []\n\tfor i in range(1,m+1):\n\t\tmultiples.append(i*n)\n\treturn multiples\n\nprint(multiples_of_num(5,2))<｜end▁of▁sentence｜>"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\tseen = set()\n\tfor num in nums:\n\t\tif num in seen:\n\t\t\treturn num\n\t\tseen.add(num\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef find_first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the second largest element in a given array of integers.\n\"\"\"\ndef find_second_largest(nums):\n\tlargest = float('-inf')\n\tsecond_largest = float('-inf')\n\tfor num in nums:\n\t\tif num > largest:\n\t\t\tsecond_largest = largest\n\t\t\tlargest = num\n\t\telif num > second_largest and num != largest:\n\t\t\tsecond_largest = num\n\treturn second_largest\n\n\"\"\"\nWrite a function to find the longest common prefix among a given array of strings.\n\"\"\"\ndef find_longest_common_prefix(strings):\n\tif not strings:\n\t\treturn \"\"\n\tprefix = strings[0]\n\tfor string in strings[1:]:\n\t\twhile string[:len(prefix)] != prefix:\n\t\t\tprefix = prefix[:-1]\n\t\t\tif not prefix:\n\t\t\t\treturn \"\"\n\treturn prefix\n\n\"\"\"\nWrite a function to find the maximum sum subarray in a given array of integers.\n\"\"\"\ndef find_max_sum_subarray(nums):\n\tmax_sum = float('-inf')\n\tcurrent_sum = 0\n\tfor num in nums:\n\t\tcurrent_sum = max(num, current_sum + num)\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum\n\n\"\"\"\nWrite a function to find the minimum element in a given array of integers.\n\"\"\"\ndef find_min(nums):\n\tmin_num = float('inf')\n\tfor num in nums:\n\t\tif num <"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\tresult = list1[0] \n\tfor i in list1[1:]: \n\t\tresult = [max(x, y) for x, y in zip(i, result)] \n\treturn result \n\nlist1 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]] \nprint(maximum_Sum(list1))<｜end▁of▁sentence｜>"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\tdecimal, i = 0, 0\n\twhile(binary != 0): \n\t\tdec = binary % 10\n\t\tdecimal = decimal + dec * pow(2, i) \n\t\tbinary = binary//10\n\t\ti += 1\n\treturn decimal\n\nif __name__ == '__main__':\n\tbinary = int(input(\"Enter the binary number: \"))\n\tprint(\"The decimal equivalent of\", binary, \"is\", binary_to_decimal(binary))<｜end▁of▁sentence｜>"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\tproduct = 1\n\tflag = 0\n\tfor i in range(n): \n\t\tfor j in range(n): \n\t\t\tif (arr[i] == arr[j] and i != j): \n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif (flag == 0): \n\t\t\tproduct *= arr[i] \n\t\tflag = 0\n\treturn product \n\narr = [10, 20, 9, 40, 50, 60, 70, 80, 100, 110] \nn = len(arr) \nprint(find_Product(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\tres = True\n\tfor ele in test_list:\n\t\tif len(ele) != K:\n\t\t\tres = False\n\t\t\tbreak\n\treturn res\n\n\n# initializing list\ntest_list = [(5, 6, 7), (7, 8), (8, 9, 10, 11)]\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n# initializing K\nK = 3\n\n# Check if all tuples have K elements\nres = check_k_elements(test_list, K)\n\n# printing result\nprint(\"Does all tuples have K elements ? : \" + str(res))<｜end▁of▁sentence｜>"}
{"ID": 390, "source": "MBPP:27", "prompt": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove all digits from a list of strings.\n\"\"\"\ndef remove(list): \n\tresult = [] \n\tfor item in list: \n\t\tres = ''.join([i for i in item if not i.isdigit()]) \n\t\tresult.append(res) \n\treturn result \nlist = ['1abc', '2bcd', '3efg', '4ghi'] \nprint(remove(list))<｜end▁of▁sentence｜>"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\tC = [[0 for i in range(k+1)] for i in range(n+1)] \n\tfor i in range(n+1): \n\t\tfor j in range(min(i, k)+1): \n\t\t\tif j == 0 or j == i: \n\t\t\t\tC[i][j] = 1\n\t\t\telse: \n\t\t\t\tC[i][j] = C[i-1][j-1] + C[i-1][j] \n\treturn C[n][k] \nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"Value of C(%d,%d) is %d\" %(n,k,binomial_Coeff(n,k)))<｜end▁of▁sentence｜>"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\tres = 0\n\tfor i in range(0, arr_size):\n\t\tres = res ^ arr[i]\n\treturn res\n\narr = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nn = len(arr)\nprint(get_Odd_Occurrence(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tresult = 0; \n\tn = len(s); \n\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (s[i] == s[j]): \n\t\t\t\tresult = result + 1\n\treturn result \n\ns = \"abcab\"\nprint(count_Substring_With_Equal_Ends(s))<｜end▁of▁sentence｜>"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\tfrom heapq import heappush, heappop\n\tfrom collections import Counter\n\tcounter = Counter(nums)\n\theap = []\n\tfor key, value in counter.items():\n\t\theappush(heap, (value, key))\n\t\tif len(heap) > k:\n\t\t\theappop(heap)\n\tresult = []\n\twhile heap:\n\t\tresult.append(heappop(heap)[1])\n\treturn result\n\n\nif __name__ == '__main__':\n\tnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tprime_factor = 0\n\ti = 2\n\n\twhile i <= n / i: \n\t\tif n % i == 0: \n\t\t\tprime_factor = i \n\t\t\tn /= i \n\t\telse: \n\t\t\ti += 1\n\t\t\t\n\tif prime_factor < n: \n\t\tprime_factor = n \n\t\n\treturn prime_factor\n\nn = int(input(\"Enter a number: \"))\nprint(max_Prime_Factors(n))<｜end▁of▁sentence｜>"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\tbinary = bin(N).replace(\"0b\", \"\") \n\treturn binary\n\nif __name__ == '__main__':\n    N = int(input(\"Enter a number: \"))\n    print(decimal_To_Binary(N))<｜end▁of▁sentence｜>"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\ta = 0\n\tb = N - 1\n\tmid = 0\n\twhile b > a + 1: \n\t\tmid = (a + b) // 2\n\t\tif (ar[a] - a) != (ar[mid] - mid): \n\t\t\tb = mid \n\t\telif (ar[b] - b) != (ar[mid] - mid): \n\t\t\ta = mid \n\treturn ar[mid] + 1\n\nar = [1, 2, 3, 4, 5, 6, 8] \nn = len(ar) \nprint(find_missing(ar, n))<｜end▁of▁sentence｜>"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\"\"\"\n\tFind the n-th rectangular number.\n\t\"\"\"\n\treturn n * (n + 1) / 2\n\nprint find_rect_num(10)<｜end▁of▁sentence｜>"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\"\"\"\n\tSorts a mixed list of integers and strings.\n\t\"\"\"\n\tintegers = []\n\tstrings = []\n\tfor item in mixed_list:\n\t\tif isinstance(item, int):\n\t\t\tintegers.append(item)\n\t\telif isinstance(item, str):\n\t\t\tstrings.append(item)\n\t\telse:\n\t\t\traise ValueError(\"List contains non-integer and non-string values.\")\n\tintegers.sort()\n\tstrings.sort()\n\treturn integers + strings\n\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tmixed_list = [1, 2, 3, \"a\", \"b\", \"c\"]\n\tprint(sort_mixed_list(mixed_list))\n\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 401, "source": "MBPP:38", "prompt": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\n\"\"\"\ndef div_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn even_sum / odd_sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(div_even_odd(list1))<｜end▁of▁sentence｜>"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\tchar_freq = {}\n\tfor char in S:\n\t\tif char not in char_freq:\n\t\t\tchar_freq[char] = 0\n\t\tchar_freq[char] += 1\n\n\tmax_heap = []\n\tfor char, freq in char_freq.items():\n\t\theapq.heappush(max_heap, (-freq, char))\n\n\tprev_char, prev_freq = None, 0\n\tresult_string = []\n\twhile max_heap:\n\t\tfreq, char = heapq.heappop(max_heap)\n\t\tif prev_char and -prev_freq > 0:\n\t\t\theapq.heappush(max_heap, (prev_freq, prev_char))\n\t\tresult_string.append(char)\n\t\tprev_char = char\n\t\tprev_freq = freq + 1\n\n\treturn ''.join(result_string) if len(result_string) == len(S) else \"\"\n\n\ndef main():\n\tprint(\"Rearranged string: \" + rearange_string(\"aappp\"))\n\tprint(\"Rearranged string: \" + rearange_string(\"Programming\"))\n\tprint(\"Rearranged string: \" + rearange_string(\"aapa\"))\n\n\nmain()<｜end▁of▁sentence｜>"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\tresult = Counter(nums)\n\treturn result\n\nnums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\tresult = list(filter(lambda x: x % 2 == 0, nums))\n\treturn result\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Original list of integers:\")\nprint(nums)\nprint(\"\\nEven numbers from the said list:\")\nprint(filter_evennumbers(nums))<｜end▁of▁sentence｜>"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\tres = 0\n\tfor i in range(n): \n\t\tj = i + 1\n\t\tfor j in range(j, n): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\tres = res + arr[i] \n\treturn res \narr = [1,2,3,1,3,4,5,5] \nn = len(arr) \nprint(find_Sum(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\tpatterns = '^[a-z]+_[a-z]+$'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match(\"aab_cbbbc\"))\nprint(text_match(\"aab_Abbbc\"))\nprint(text_match(\"Aaab_abbbc\"))<｜end▁of▁sentence｜>"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\tpatterns = '^\\w+'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_string(\" The quick brown fox jumps over the lazy dog.\"))<｜end▁of▁sentence｜>"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\tgcd = l[0]\n\tfor i in range(1,len(l)):\n\t\tgcd = gcd_of_two_numbers(gcd,l[i])\n\treturn gcd\n\ndef gcd_of_two_numbers(a,b):\n\tif a == 0:\n\t\treturn b\n\treturn gcd_of_two_numbers(b%a,a)\n\nl = [2,4,6,8,16]\nprint(get_gcd(l))<｜end▁of▁sentence｜>"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t\n\tif len(data) == len(set(data)):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(test_distinct([1,5,7,9]))\nprint(test_distinct([2,4,5,5,7,9]))<｜end▁of▁sentence｜>"}
{"ID": 410, "source": "MBPP:47", "prompt": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\"\"\"\ndef compute_Last_Digit(A,B): \n\tfact = [1] \n\tfor i in range(1, A + 1): \n\t\tfact.append((i * fact[i - 1]) % 10) \n\treturn fact[B] \n\nA = 5\nB = 2\nprint(compute_Last_Digit(A, B))<｜end▁of▁sentence｜>"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\tn=n|1\n\treturn n\n\nn=int(input(\"Enter a number:\"))\nprint(\"After setting all odd bits of a given number:\",odd_bit_set_number(n))<｜end▁of▁sentence｜>"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\tresult = [i[N] for i in nums]\n\treturn result\n\nnums = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nN = 3\nprint(\"Original list:\")\nprint(nums)\nprint(\"\\nExtract every first or specified element from the said given two dimensional list:\")\nprint(specified_element(nums, N))<｜end▁of▁sentence｜>"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\tmin_length = len(input_list[0])\n\tresult = input_list[0]\n\tfor i in input_list:\n\t\tif len(i) < min_length:\n\t\t\tresult = i\n\t\t\tmin_length = len(i)\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tinput_list = [[0], [1, 3], [5, 6, 7]]\n\tprint(min_length_list(input_list))<｜end▁of▁sentence｜>"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t\"\"\"\n\tThis function checks if the triangle is equilateral or not.\n\t\"\"\"\n\tif x==y==z:\n\t\tprint(\"The triangle is equilateral.\")\n\telse:\n\t\tprint(\"The triangle is not equilateral.\")\n\n\nx=int(input(\"Enter the first side of the triangle: \"))\ny=int(input(\"Enter the second side of the triangle: \"))\nz=int(input(\"Enter the third side of the triangle: \"))\n\ncheck_equilateral(x,y,z)<｜end▁of▁sentence｜>"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\tarea = b*h\n\treturn area\n\nprint(parallelogram_area(5,6))<｜end▁of▁sentence｜>"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\tfirst_char = str[0]\n\tlast_char = str[-1]\n\tif first_char == last_char:\n\t\treturn True\n\telse:\n\t\treturn False\n\nstr = input(\"Enter a string: \")\nprint(check_Equality(str))<｜end▁of▁sentence｜>"}
{"ID": 417, "source": "MBPP:54", "prompt": "\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using counting sort.\n\"\"\"\ndef counting_sort(my_list):\n\tmax_value = max(my_list)\n\tcount_list = [0] * (max_value + 1)\n\tfor i in my_list:\n\t\tcount_list[i] += 1\n\tindex = 0\n\tfor i in range(len(count_list)):\n\t\tfor j in range(count_list[i]):\n\t\t\tmy_list[index] = i\n\t\t\tindex += 1\n\treturn my_list\n\n\nprint(counting_sort([4, 2, 2, 8, 3, 3, 1]))<｜end▁of▁sentence｜>"}
{"ID": 418, "source": "MBPP:55", "prompt": "\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find t-nth term of geometric series.\n\"\"\"\ndef tn_gp(a,n,r):\n\t\"\"\"\n\tThis function returns the t-nth term of geometric series.\n\t\"\"\"\n\treturn a*r**(n-1)\n\na=int(input(\"Enter the first term of geometric series: \"))\nn=int(input(\"Enter the number of terms in geometric series: \"))\nr=int(input(\"Enter the common ratio of geometric series: \"))\nprint(\"The t-nth term of geometric series is: \",tn_gp(a,n,r))<｜end▁of▁sentence｜>"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\trev=0\n\twhile(n>0):\n\t\tr=n%10\n\t\trev=rev*10+r\n\t\tn=n//10\n\tn=n-1\n\tif(n==rev):\n\t\treturn True\n\telse:\n\t\treturn False\nn=int(input())\nprint(check(n))<｜end▁of▁sentence｜>"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\tarr.sort() \n\tarr.reverse() \n\tnum = arr[0] \n\tfor i in range(1, n) : \n\t\tnum = num * 10 + arr[i] \n\treturn num \n\narr = [1, 34, 3, 98, 9, 76, 45, 4] \nn = len(arr) \nprint(find_Max_Num(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t\n\treturn ((x ^ y) < 0); \n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\nif (opposite_Signs(x, y) == True): \n\tprint (\"Signs are opposite\")\nelse: \n\tprint (\"Signs are not opposite\")<｜end▁of▁sentence｜>"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\"\"\"\n\tReturns True if n is octagonal and False if not.\n\t\"\"\"\n\ttest = (1 + (8 * n + 1) ** 0.5) / 4\n\treturn test == int(test)\n\ndef octagonal(n):\n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\ndef main():\n\t\"\"\"\n\tFind the sum of all the numbers that can be written as the sum of a prime and twice a square.\n\t\"\"\"\n\tn = 1\n\twhile True:\n\t\toct = octagonal(n)\n\t\tif is_octagonal(oct):\n\t\t\tprint(oct)\n\t\tn += 1\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\n\tmd = [0 for i in range(n)] \n\n\tfor i in range(n - 2, -1, -1): \n\t\tfor j in range(n - 1, i, -1): \n\t\t\tif arr[i] > arr[j] and md[i] < md[j] + 1: \n\t\t\t\tmd[i] = md[j] + 1\n\n\tmaximum = 0\n\n\tfor i in range(n): \n\t\tmaximum = max(maximum, md[i]) \n\n\treturn maximum\n\narr = [10, 22, 9, 33, 21, 50, 41, 60] \nn = len(arr) \nprint(\"Maximum length subsequence =\", \n\tmax_len_sub(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\tcount=0\n\tfor i in range(n):\n\t\tsum=0\n\t\tfor j in range(i,n):\n\t\t\tsum+=int(s[j])\n\t\t\tif sum==(j-i+1):\n\t\t\t\tcount+=1\n\treturn count\ns=input()\nn=len(s)\nprint(count_Substrings(s,n))<｜end▁of▁sentence｜>"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\nprint(smallest_num([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t\"\"\"\n\tFunction to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n\tres = []\n\tfor sub in test_list:\n\t\tres.append(sub[1] - sub[0])\n\treturn max(res)\n\ntest_list = [(3, 5), (1, 7), (10, 11), (1, 11), (2, 12)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The maximum difference between available pairs is : \" + str(max_difference(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\tsubjectmarks.sort(key = lambda x: x[1])\n\treturn subjectmarks\n\nsubjectmarks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\nprint(\"Original list of tuples:\")\nprint(subjectmarks)\nsubject_marks(subjectmarks)\nprint(\"\\nSorting the List of Tuples:\")\nprint(subjectmarks)<｜end▁of▁sentence｜>"}
{"ID": 428, "source": "MBPP:65", "prompt": "\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function of recursion list sum.\n\"\"\"\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\nprint(recursive_list_sum([1, 2, [3,4],[5,6]]))<｜end▁of▁sentence｜>"}
{"ID": 429, "source": "MBPP:66", "prompt": "\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count positive numbers in a list.\n\"\"\"\ndef pos_count(list):\n\tcount=0\n\tfor i in list:\n\t\tif i>0:\n\t\t\tcount+=1\n\treturn count\n\nlist=[1,2,3,4,-1,-2,-3,-4]\nprint(pos_count(list))<｜end▁of▁sentence｜>"}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\tbell = [[0 for i in range(n+1)] for j in range(n+1)] \n\tbell[0][0] = 1\n\tfor i in range(1, n+1): \n\t\tbell[i][0] = bell[i-1][i-1] \n\t\tfor j in range(1, i+1): \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n\treturn bell[n][0] \n\ndef main():\n    n = int(input(\"Enter the number of elements: \"))\n    print(\"Number of ways to partition a set of size\", n, \"is\", bell_number(n))\n\nif __name__ == \"__main__\":\n    main()<｜end▁of▁sentence｜>"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\n\treturn (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n\t\t\tall(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n\nA = [6, 5, 4, 4] \n\nprint(is_Monotonic(A))<｜end▁of▁sentence｜>"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n\n\na = [2,4,3,5,7]\nb = [4,3]\nc = [3,7]\nprint(is_sublist(a, b))\nprint(is_sublist(a, c))<｜end▁of▁sentence｜>"}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\tres = []\n\tfor i in Input:\n\t\tif len(i) == k:\n\t\t\tres.append(i)\n\treturn res\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\nk = 3\nprint(get_equal(Input, k))<｜end▁of▁sentence｜>"}
{"ID": 434, "source": "MBPP:71", "prompt": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using comb sort.\n\"\"\"\ndef comb_sort(nums):\n\tgap = len(nums)\n\tswapped = True\n\twhile gap !=1 or swapped == 1:\n\t\tgap = int(gap / 1.3)\n\t\tif gap < 1:\n\t\t\tgap = 1\n\t\tswapped = False\n\t\tfor i in range(0, len(nums) - gap):\n\t\t\tif nums[i] > nums[i + gap]:\n\t\t\t\tnums[i], nums[i + gap]=nums[i + gap], nums[i]\n\t\t\t\tswapped = True\n\n\nnums = [5, 3, 8, 6, 7, 2]\ncomb_sort(nums)\nprint(nums)<｜end▁of▁sentence｜>"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\ti = 1; \n\twhile i * i <= n: \n\t\tj = 1; \n\t\twhile(j * j <= n): \n\t\t\tif (i * i + j * j == n): \n\t\t\t\treturn True; \n\t\t\tj = j + 1; \n\t\ti = i + 1; \n\treturn False; \nn = int(input(\"Enter a number: \"))\nif (dif_Square(n)): \n\tprint(\"Yes\"); \nelse: \n\tprint(\"No\"); \n\n\"\"\"\nOutput:\nEnter a number: 10\nYes\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\timport re\n\tprint(re.split('[,;.]', text))\n\nmultiple_split(\"Hello, World; Python\")<｜end▁of▁sentence｜>"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\tcolor_dict = {}\n\tpattern_dict = {}\n\tif len(colors) != len(patterns):\n\t\treturn False\n\tfor i in range(len(colors)):\n\t\tif colors[i] not in color_dict:\n\t\t\tcolor_dict[colors[i]] = patterns[i]\n\t\telse:\n\t\t\tif color_dict[colors[i]] != patterns[i]:\n\t\t\t\treturn False\n\t\tif patterns[i] not in pattern_dict:\n\t\t\tpattern_dict[patterns[i]] = colors[i]\n\t\telse:\n\t\t\tif pattern_dict[patterns[i]] != colors[i]:\n\t\t\t\treturn False\n\treturn True\n\n\ncolors = ['red', 'green', 'green']\npatterns = ['a', 'b', 'b']\nprint(is_samepatterns(colors, patterns))<｜end▁of▁sentence｜>"}
{"ID": 438, "source": "MBPP:75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"\ndef find_tuples(test_list, K):\n\tres = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n\treturn res\n\n\ntest_list = [(5, 6, 2), (4, 7, 8), (9, 10, 2)]\nK = 2\nprint(find_tuples(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t\"\"\"\n\tThis function takes two integers m and n as input and returns the number of squares in a rectangle of dimensions m x n.\n\t\"\"\"\n\tif m==n:\n\t\treturn 1\n\telif m==1 or n==1:\n\t\treturn m*n\n\telse:\n\t\treturn m*n + count_Squares(m-1,n-1)\n\nm=int(input(\"Enter the length of the rectangle: \"))\nn=int(input(\"Enter the breadth of the rectangle: \"))\nprint(\"The number of squares in a rectangle of dimensions\",m,\"x\",n,\"is\",count_Squares(m,n))<｜end▁of▁sentence｜>"}
{"ID": 440, "source": "MBPP:77", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\n\"\"\"\ndef is_Diff(n): \n\tec=0\n\toc=0\n\twhile n != 0:\n\t\tr = n % 10\n\t\tn = n // 10\n\t\tif r % 2 == 0:\n\t\t\tec = ec + r\n\t\telse:\n\t\t\toc = oc + r\n\treturn ec - oc\nn = int(input(\"Enter a number:\"))\nprint(is_Diff(n))<｜end▁of▁sentence｜>"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n + 1): \n\t\tif (bin(i).count('1') % 2 == 1): \n\t\t\tcount += 1\n\treturn count \n\nn = int(input(\"Enter the number: \"))\nprint(count_With_Odd_SetBits(n))<｜end▁of▁sentence｜>"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\tl=len(s)\n\tif l%2==0:\n\t\treturn False\n\telse:\n\t\treturn True\ns=input(\"Enter a word: \")\nprint(word_len(s))<｜end▁of▁sentence｜>"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\"\"\"\n\tReturns the nth tetrahedral number.\n\t\"\"\"\n\treturn (n * (n + 1) * (n + 2)) / 6\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_number(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn (n * (3 * n - 1)) / 2\n\n\n\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_number(n): \n\t\"\"\"\n\tReturns the nth hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_number(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn (n * (5 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_number(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_number(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn (n * (7 * n - 5)) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_number(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn (n * (4 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth dodecagonal number.\n\"\"\"\ndef dodecagonal_number(n): \n\t\"\"\"\n\tReturns the nth dodecagonal number.\n\t\"\"\"\n\treturn (n * (11 * n - 9)) / 2\n\n\n\"\"\"\nWrite a function to find the nth tridecagonal number.\n\"\"\"\ndef tridecagonal_number(n): \n\t\"\"\"\n\tReturns the nth tridecagonal"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\tres = tuple(zip(test_tup1, test_tup2))\n\treturn res\n\n\ntest_tup1 = (7, 8, 4, 5, 9, 10)\ntest_tup2 = (1, 5, 6, 9, 10, 2)\nprint(zip_tuples(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\tpi = 3.14\n\tvolume = (4/3)*pi*(r**3)\n\treturn volume\n\nprint(volume_sphere(2))<｜end▁of▁sentence｜>"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\tsumm = 0\n\tfor i in strr:\n\t\tsumm += ord(i)\n\treturn chr(summ)\n\nstrr = input()\nprint(get_Char(strr))<｜end▁of▁sentence｜>"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\tseq = [0, 1, 1] \n\tfor i in range(3, n+1): \n\t\tseq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]]) \n\treturn seq[n] \n\nn = int(input(\"Enter the number: \"))\nprint(sequence(n))<｜end▁of▁sentence｜>"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\tpi = 3.14\n\tsurfacearea = 4*pi*r*r\n\treturn surfacearea\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"Surface area of the sphere is: \", surfacearea_sphere(r))<｜end▁of▁sentence｜>"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\"\"\"\n\tThis function returns the nth centered hexagonal number.\n\t\"\"\"\n\treturn (2*n*(2*n-1))\n\n\nif __name__ == '__main__':\n\tn = int(input(\"Enter the value of n: \"))\n\tprint(\"The nth centered hexagonal number is: \", centered_hexagonal_number(n))<｜end▁of▁sentence｜>"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\tdict4 = dict1.copy()\n\tdict4.update(dict2)\n\tdict4.update(dict3)\n\treturn dict4\n\ndict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4}\ndict3 = {'e':5, 'f':6}\n\nprint(merge_dictionaries_three(dict1, dict2, dict3))<｜end▁of▁sentence｜>"}
{"ID": 451, "source": "MBPP:88", "prompt": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the frequency of the elements in a list.\n\"\"\"\ndef freq_count(list1):\n\tcount = {}\n\tfor i in list1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(freq_count(list1))<｜end▁of▁sentence｜>"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\"\"\"\n\t>>> closest_num(100)\n\t99\n\t>>> closest_num(1000)\n\t999\n\t>>> closest_num(10000)\n\t9999\n\t>>> closest_num(100000)\n\t99999\n\t>>> closest_num(1000000)\n\t999999\n\t>>> closest_num(10000000)\n\t9999999\n\t>>> closest_num(100000000)\n\t99999999\n\t>>> closest_num(1000000000)\n\t999999999\n\t>>> closest_num(10000000000)\n\t9999999999\n\t>>> closest_num(100000000000)\n\t99999999999\n\t>>> closest_num(1000000000000)\n\t999999999999\n\t>>> closest_num(10000000000000)\n\t9999999999999\n\t>>> closest_num(100000000000000)\n\t99999999999999\n\t>>> closest_num(1000000000000000)\n\t999999999999999\n\t>>> closest_num(10000000000000000)\n\t9999999999999999\n\t>>> closest_num(100000000000000000)\n\t99999999999999999\n\t>>> closest_num(1000000000000000000)\n\t99"}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax=0\n\tfor i in list1:\n\t\tif len(i)>max:\n\t\t\tmax=len(i)\n\treturn max\n\nlist1=[\"hello\",\"world\",\"name\",\"computer\",\"science\"]\nprint(len_log(list1))<｜end▁of▁sentence｜>"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\tresult = list(filter(lambda x: sub_str in x, str1))\n\treturn result\n\nstr1 = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nprint(\"\\nOriginal list:\")\nprint(str1)\nsub_str = \"ack\"\nprint(\"\\nSubstring to search:\")\nprint(sub_str)\nprint(\"\\nElements of the said list that contain the substring:\")\nprint(find_substring(str1, sub_str))\nsub_str = \"abc\"\nprint(\"\\nSubstring to search:\")\nprint(sub_str)\nprint(\"\\nElements of the said list that contain the substring:\")\nprint(find_substring(str1, sub_str))<｜end▁of▁sentence｜>"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\tn = str(n)\n\tif len(n) < 3:\n\t\treturn False\n\tfor i in range(len(n)-2):\n\t\tif n[i] == n[i+2]:\n\t\t\treturn False\n\treturn True\n\nprint(is_undulating(121))\nprint(is_undulating(12))\nprint(is_undulating(12121))\nprint(is_undulating(1212121))\nprint(is_undulating(121212121))\nprint(is_undulating(12121212121))\nprint(is_undulating(1212121212121))\nprint(is_undulating(121212121212121))\nprint(is_undulating(12121212121212121))\nprint(is_undulating(1212121212121212121))\nprint(is_undulating(121212121212121212121))\nprint(is_undulating(12121212121212121212121))\nprint(is_undulating(1212121212121212121212121))\nprint(is_undulating(121212121212121212121212121))\nprint(is_undulating(12121212121212121212121212121))\nprint(is_undulating(1212121212121212121212121212121))\nprint(is_undulating(121212121212121212121212121212121))\nprint(is_undulating(12121212"}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t\"\"\"\n\t>>> power(3,4)\n\t81\n\t>>> power(2,3)\n\t8\n\t\"\"\"\n\tresult = 1\n\twhile b > 0:\n\t\tresult = result * a\n\t\tb = b - 1\n\treturn result\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t\"\"\"\n\tWrite a function to extract the index minimum value record from the given tuples.\n\t\"\"\"\n\tres = min(range(len(test_list)), key = lambda i : test_list[i])\n\treturn res\n\nprint(index_minimum([(3, 4), (1, 2), (5, 6), (1, 2)]))\nprint(index_minimum([(3, 4), (5, 6), (1, 2), (3, 2)]))\nprint(index_minimum([(4, 3), (6, 5), (2, 1), (4, 2)]))<｜end▁of▁sentence｜>"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\tmin = len(lst[0])  \n\tfor i in lst:  \n\t\tif len(i) < min:  \n\t\t\tmin = len(i)  \n\treturn min  \n\nlst = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]  \nprint(Find_Min_Length(lst))<｜end▁of▁sentence｜>"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\tcount=0\n\tfor i in range(1,n+1):\n\t\tif n%i==0:\n\t\t\tcount+=1\n\treturn count\nn=int(input(\"Enter a number: \"))\nprint(\"Number of divisors of\",n,\"is\",divisor(n))<｜end▁of▁sentence｜>"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\"\"\"\n\tThis function takes list of lists as input and returns frequency count of list of lists.\n\t\"\"\"\n\tcount = {}\n\tfor i in list1:\n\t\tif (str(i) in count.keys()):\n\t\t\tcount[str(i)] += 1\n\t\telse:\n\t\t\tcount[str(i)] = 1\n\treturn count\n\n\nlist1 = [[1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3"}
{"ID": 461, "source": "MBPP:98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"\ndef multiply_num(numbers):  \n\ttotal = 1\n\tfor x in numbers:\n\t\ttotal *= x  \n\treturn total/len(numbers)\n\nprint(multiply_num([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\tbinary = \"\"\n\twhile n > 0:\n\t\tbinary = str(n % 2) + binary\n\t\tn = n // 2\n\treturn binary\n\nprint(decimal_to_binary(10))<｜end▁of▁sentence｜>"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\t>>> next_smallest_palindrome(123)\n\t131\n\t>>> next_smallest_palindrome(131)\n\t141\n\t>>> next_smallest_palindrome(141)\n\t151\n\t>>> next_smallest_palindrome(151)\n\t202\n\t>>> next_smallest_palindrome(202)\n\t212\n\t>>> next_smallest_palindrome(212)\n\t222\n\t>>> next_smallest_palindrome(222)\n\t232\n\t>>> next_smallest_palindrome(232)\n\t242\n\t>>> next_smallest_palindrome(242)\n\t252\n\t>>> next_smallest_palindrome(252)\n\t262\n\t>>> next_smallest_palindrome(262)\n\t272\n\t>>> next_smallest_palindrome(272)\n\t282\n\t>>> next_smallest_palindrome(282)\n\t292\n\t>>> next_smallest_palindrome(292)\n\t303\n\t>>> next_smallest_palindrome(303)\n\t313\n\t>>> next_smallest_palindrome(313)\n\t323\n\t>>> next_smallest_palindrome(323)\n\t333\n\t>>> next_smallest_palindrome(333)\n\t343\n\t>>> next_smallest_palindrome(343)\n\t353\n\t>>> next_smallest_palindrome(353)\n\t363\n\t>>> next_smallest_palindrome(363)\n\t373\n\t>>> next_smallest_palindrome(373)\n\t383\n\t>>> next_smallest_palindrome(383)\n\t393\n\t>>> next_smallest_palindrome(393)\n\t404\n\t>>> next_smallest"}
{"ID": 464, "source": "MBPP:101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the kth element in the given array.\n\"\"\"\ndef kth_element(arr, n, k):\n\tarr.sort()\n\treturn arr[k-1]\n\n\nif __name__ == \"__main__\":\n\tarr = [7, 10, 4, 3, 20, 15]\n\tn = len(arr)\n\tk = 3\n\tprint(kth_element(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t\"\"\"\n\t>>> snake_to_camel(\"hello_world\")\n\t'helloWorld'\n\t>>> snake_to_camel(\"this_is_snake_case\")\n\t'thisIsSnakeCase'\n\t\"\"\"\n\twords = word.split(\"_\")\n\tresult = words[0]\n\tfor i in range(1, len(words)):\n\t\tresult += words[i].capitalize()\n\treturn result\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 466, "source": "MBPP:103", "prompt": "\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find eulerian number a(n, m).\n\"\"\"\ndef eulerian_num(n, m): \n\tdp = [[0 for i in range(m+1)] for j in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(0, m+1): \n\t\t\tif j == 0 or j == i: \n\t\t\t\tdp[i][j] = 1\n\t\t\telse: \n\t\t\t\tdp[i][j] = ((i-j)*dp[i-1][j-1] + (j+1)*dp[i-1][j]) \n\treturn dp[n][m] \n\nn = 3\nm = 1\nprint(eulerian_num(n, m))<｜end▁of▁sentence｜>"}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\tresult = [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\treturn result\n\ninput_list = [['green', 'orange'], ['black', 'white'], ['white', 'red']]\nprint(sort_sublists(input_list))<｜end▁of▁sentence｜>"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\tcount = 0\n\tfor i in lst:\n\t\tif i == True:\n\t\t\tcount += 1\n\treturn count\n\nlst = [True, False, True, True, False, True, True, True, True, False, True, False]\nprint(count(lst))<｜end▁of▁sentence｜>"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\tres = [(i, j) for i, j in zip(test_list, test_tup)]\n\treturn res\n\ntest_list = [3, 6, 9, 12, 15, 18, 21]\ntest_tup = (3, 7, 11, 15, 19, 23, 27)\nprint(add_lists(test_list, test_tup))<｜end▁of▁sentence｜>"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\tcount = 0\n\tfor i in range(L,R+1) : \n\t\tstr1 = str(i) \n\t\tl = len(str1) \n\t\tif str1[0] == '1' and str1[l - 1] == '1' : \n\t\t\tcount += 1\n\treturn count \n\nL = 1\nR = 1000000\nprint(count_Hexadecimal(L, R))<｜end▁of▁sentence｜>"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\timport heapq\n\tnums = [num1,num2,num3]\n\theapq.heapify(nums)\n\twhile nums:\n\t\tsmallest = heapq.heappop(nums)\n\t\ttry:\n\t\t\tyield smallest.next()\n\t\t\theapq.heappush(nums,smallest)\n\t\texcept StopIteration:\n\t\t\tpass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\tcount = 0\n\tfor i in range(n): \n\t\tif (s[i] == '1'): \n\t\t\tcount += 1\n\treturn (count % 2 == 1) \n\ndef countRotations(s,n): \n\todd = 0\n\tfor i in range(n): \n\t\tif (odd_Equivalent(s[i:n] + s[0:i], n)): \n\t\t\todd += 1\n\treturn odd \n\ns = \"1001001\"\nn = len(s) \nprint(countRotations(s, n))<｜end▁of▁sentence｜>"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t\"\"\"\n\tFunction to extract the ranges that are missing from the given list with the given start range and end range values.\n\t\"\"\"\n\tres = []\n\tstrt_val = strt_val\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] != strt_val:\n\t\t\tres.append((strt_val, test_list[i]-1))\n\t\tstrt_val = test_list[i] + 1\n\tif strt_val <= stop_val:\n\t\tres.append((strt_val, stop_val))\n\treturn res\n\ntest_list = [1, 2, 3, 5, 7, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, "}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t\"\"\"\n\t>>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 31], [14, 19, 25, 45, 46]])\n\t[12, 18, 25]\n\t\"\"\"\n\tcommon = []\n\tfor i in nestedlist[0]:\n\t\tif i in nestedlist[1] and i in nestedlist[2]:\n\t\t\tcommon.append(i)\n\treturn common\n\n\n\"\"\"\nWrite a function to find the difference of two lists.\n\"\"\"\ndef difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tdifference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tdifference.append(i)\n\treturn difference\n\n\n\"\"\"\nWrite a function to find symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> symmetric_difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tsymmetric_difference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tsymmetric_difference.append(i)\n\tfor i in list2:\n\t\tif i not in list1:\n\t\t\tsymmetric_difference.append(i)\n\treturn symmetric_difference\n\n\n\"\"\"\nWrite a function to find the cumulative sum of a list.\n\"\"\"\ndef cumulative_sum_of_a_list(list1):\n\t\"\"\"\n\t>>> cumulative_sum_of_a_list([1, 2, 3, 4])\n\t[1, 3, 6, 10]\n\t\"\"\"\n\tcumulative_sum = []\n\tfor i in range(len(list1)):\n\t\tcumulative_sum.append(sum(list1[:i+"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\tpi = 3.14\n\tperimeter = 2 * pi * (diameter/2) * height\n\treturn perimeter\n\ndiameter = int(input(\"Enter the diameter of the cylinder : \"))\nheight = int(input(\"Enter the height of the cylinder : \"))\nprint(\"The perimeter of the cylinder is : \",perimeter(diameter,height))<｜end▁of▁sentence｜>"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\nprint(check_integer(\"123\"))\nprint(check_integer(\"12.3\"))\nprint(check_integer(\"abc\"))<｜end▁of▁sentence｜>"}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t\"\"\"\n\tWrite a function to assign frequency to each tuple in the given tuple list.\n\t\"\"\"\n\tres = []\n\tfor i in test_list:\n\t\tres.append(i + (test_list.count(i),))\n\treturn res\n\nprint(assign_freq([(3, 4), (1, 2), (3, 4), (1, 2), (3, 4), (1, 2)]))<｜end▁of▁sentence｜>"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\tflag=True\n\tfor i in list1:\n\t\tif i:\n\t\t\tflag=False\n\t\t\tbreak\n\treturn flag\n\nlist1=[{},{},{}]\nprint(empty_dit(list1))<｜end▁of▁sentence｜>"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\tresult = int(''.join(map(str,nums)))\n\treturn result\n\nnums = (1,2,3)\nprint(tuple_to_int(nums))<｜end▁of▁sentence｜>"}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t\"\"\"\n\tThis function converts all possible convertible elements in the list to float.\n\t\"\"\"\n\ttry:\n\t\tfloat_list = [float(i) for i in test_list]\n\t\treturn float_list\n\texcept ValueError:\n\t\tprint(\"Error: List contains non-convertible elements.\")\n\t\treturn test_list\n\n# Test the function\ntest_list = [1, 2, 3, \"4\", \"5.6\", \"abc\"]\nfloat_list = list_to_float(test_list)\nprint(float_list)<｜end▁of▁sentence｜>"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\tlist1=[] \n\tlist1[:0]=string \n\treturn list1\n\nstring=\"abcd\"\nprint(string_to_list(string))<｜end▁of▁sentence｜>"}
{"ID": 482, "source": "MBPP:119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"\ndef search(arr,n) :\n\tlow = 0\n\thigh = n - 2\n\twhile (low <= high) :\n\t\tmid = (low + high) // 2\n\t\tif (arr[mid] == arr[mid ^ 1]) :\n\t\t\tlow = mid + 1\n\t\telse :\n\t\t\thigh = mid - 1\n\treturn arr[low]\n\narr = [ 1, 1, 2, 4, 4, 5, 5, 6, 6 ]\nn = len(arr)\nprint(\"The required element is\",search(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product\n\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))<｜end▁of▁sentence｜>"}
{"ID": 484, "source": "MBPP:121", "prompt": "\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the triplet with sum of the given array\n\"\"\"\ndef check_triplet(A, n, sum, count):\n\tA.sort()\n\tfor i in range(0, n-1):\n\t\tl = i+1\n\t\tr = n-1\n\t\twhile(l<r):\n\t\t\tif(A[i]+A[l]+A[r]==sum):\n\t\t\t\tcount+=1\n\t\t\t\tl+=1\n\t\t\t\tr-=1\n\t\t\telif(A[i]+A[l]+A[r]<sum):\n\t\t\t\tl+=1\n\t\t\telse:\n\t\t\t\tr-=1\n\treturn count\n\nA = [1, 4, 45, 6, 10, 8]\nsum = 22\nn = len(A)\ncount = 0\nprint(check_triplet(A, n, sum, count))<｜end▁of▁sentence｜>"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\tprime = [0] * (n+1) \n\tprime[0] = prime[1] = 1\n\tp = 2\n\twhile(p*p <= n): \n\t\tif (prime[p] == 0): \n\t\t\tfor i in range(p * 2, n+1, p): \n\t\t\t\tprime[i] = 1\n\t\tp += 1\n\tcount = 0\n\tfor i in range(10, n+1): \n\t\tif (prime[i] == 0): \n\t\t\tcount += 1\n\treturn count\nn = 5\nprint(smartNumber(n))<｜end▁of▁sentence｜>"}
{"ID": 486, "source": "MBPP:123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\"\"\"\ndef amicable_numbers_sum(limit):\n\tpass<｜end▁of▁sentence｜>"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\timport math\n\tangle = math.atan(b/a)\n\treturn angle\n\n\"\"\"\nWrite a function to get the module of a complex number.\n\"\"\"\ndef module_complex(a,b):\n\timport math\n\tmodule = math.sqrt(a**2 + b**2)\n\treturn module\n\n\"\"\"\nWrite a function to get the conjugate of a complex number.\n\"\"\"\ndef conjugate_complex(a,b):\n\tconjugate = complex(a, -b)\n\treturn conjugate\n\n\"\"\"\nWrite a function to get the polar representation of a complex number.\n\"\"\"\ndef polar_complex(a,b):\n\timport math\n\tmodule = math.sqrt(a**2 + b**2)\n\tangle = math.atan(b/a)\n\tpolar = module*(math.cos(angle) + math.sin(angle)*1j)\n\treturn polar\n\n\"\"\"\nWrite a function to get the cartesian representation of a complex number.\n\"\"\"\ndef cartesian_complex(a,b):\n\timport math\n\tmodule = math.sqrt(a**2 + b**2)\n\tangle = math.atan(b/a)\n\tcartesian = complex(module*math.cos(angle), module*math.sin(angle))\n\treturn cartesian\n\n\"\"\"\nWrite a function to get the addition of two complex numbers.\n\"\"\"\ndef addition_complex(a,b,c,d):\n\taddition = complex(a+c, b+d)\n\treturn addition\n\n\"\"\"\nWrite a function to get the substraction of two complex numbers.\n\"\"\"\ndef substraction_complex(a,b,c,d):\n\tsubstraction = complex(a-c, b-d)\n\treturn substraction\n\n\"\"\"\nWrite a function to get the multiplication of two complex numbers.\n\"\"\"\ndef multiplication_complex(a,b,c,d):\n\tmultiplication = complex(a*c-b*d, a*d+b*c)\n\treturn multiplication\n\n\"\"\"\nWrite a function to get the division of two complex numbers.\n\"\"\"\ndef division_complex(a,b,c,d):\n\tdivision = complex((a*c+b*d)/(c**2+d**2), ("}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\tcount = 0\n\tcurr_count = 0\n\tmax_count = 0\n\tfor i in range(n): \n\t\tif (string[i] == '0'): \n\t\t\tcurr_count += 1\n\t\t\tmax_count = max(max_count, curr_count) \n\t\telse: \n\t\t\tcurr_count -= 1\n\t\t\tmax_count = max(max_count, curr_count) \n\t\t\tif (curr_count < 0): \n\t\t\t\tcurr_count = 0\n\treturn max_count \n\nstring = \"11000010001\"\nn = len(string) \nprint(find_length(string, n))<｜end▁of▁sentence｜>"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\tsum=0\n\ti=1\n\twhile i<=a and i<=b:\n\t\tif a%i==0 and b%i==0:\n\t\t\tsum=sum+i\n\t\ti=i+1\n\treturn sum\na=int(input(\"enter the number\"))\nb=int(input(\"enter the number\"))\nprint(sum(a,b))<｜end▁of▁sentence｜>"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\tresult = 0\n\tnegative = False\n\tif x < 0:\n\t\tnegative = not negative\n\t\tx = -x\n\tif y < 0:\n\t\tnegative = not negative\n\t\ty = -y\n\twhile y > 0:\n\t\tresult += x\n\t\ty -= 1\n\tif negative:\n\t\tresult = -result\n\treturn result\n\nprint multiply_int(10, 10)\nprint multiply_int(10, -10)\nprint multiply_int(-10, 10)\nprint multiply_int(-10, -10)<｜end▁of▁sentence｜>"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\tword_len = []\n\ttxt = str.split(\" \")\n\tfor x in txt:\n\t\tif len(x) > n:\n\t\t\tword_len.append(x)\n\treturn word_len\nprint(long_words(3, \"The quick brown fox jumps over the lazy dog\"))<｜end▁of▁sentence｜>"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\tiSize = len(my_matrix[0])\n\tsum_list = []\n\t\n\tfor col in range(iSize):\n\t\tsum_list.append(sum(row[col] for row in my_matrix))\n\t\n\tsum_list.extend([sum (lines) for lines in my_matrix])\n\t\n\tsum_list.append(sum(my_matrix[i][i] for i in range(iSize)))\n\t\n\tsum_list.append(sum(my_matrix[i][iSize-i-1] for i in range(iSize)))\n\t\n\tif len(set(sum_list))>1:\n\t\treturn False\n\treturn True\n\nmy_matrix = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\nprint(magic_square_test(my_matrix))\n\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nprint(magic_square_test(my_matrix))\n\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 7]]\nprint(magic_square_test(my_matrix))<｜end▁of▁sentence｜>"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\"\"\"Find the most common number in nums.\"\"\"\n\tcounts = {}\n\tmax_count = 0\n\tmax_num = None\n\n\tfor num in nums:\n\t\tcounts[num] = counts.get(num, 0) + 1\n\n\t\tif counts[num] > max_count:\n\t\t\tmax_count = counts[num]\n\t\t\tmax_num = num\n\n\treturn max_num\n\n\nprint(max_occurrences([1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nprint(reverse_vowels(\"Hello, have you tried our tutorial section yet?\"))<｜end▁of▁sentence｜>"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\tstr1 = ''.join(tup1)\n\treturn str1\n\ntup1 = ('a','b','c','d')\nprint(tup_string(tup1))<｜end▁of▁sentence｜>"}
{"ID": 496, "source": "MBPP:133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\tnegative_nums = list(filter(lambda x: x < 0, nums))\n\treturn sum(negative_nums)\n\nnums = [-1, 2, -3, 4, -5]\nprint(\"Original list of numbers:\", nums)\nprint(\"Sum of the negative numbers:\", sum_negativenum(nums))<｜end▁of▁sentence｜>"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\tarr[n-1] = arr[n-1] * (2**p) \n\tif (arr[n-1] % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False\n\narr = [ 1, 2, 3, 4, 5 ] \nn = len(arr) \np = 2\nif (check_last(arr, n, p)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\"\"\"\n\tReturns the nth hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_num(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth triangular number.\n\"\"\"\ndef triangular_num(n): \n\t\"\"\"\n\tReturns the nth triangular number.\n\t\"\"\"\n\treturn n * (n + 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth square number.\n\"\"\"\ndef square_num(n): \n\t\"\"\"\n\tReturns the nth square number.\n\t\"\"\"\n\treturn n * n\n\n\n\"\"\"\nWrite a function to find the nth pyramidal number.\n\"\"\"\ndef pyramidal_num(n): \n\t\"\"\"\n\tReturns the nth pyramidal number.\n\t\"\"\"\n\treturn n * (n + 1) * (2 * n + 1) / 6\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_num(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_num(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn n * (5 * n - 3) / 2\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_num(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn n * (7 * n - 5) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_num(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn n * (9 * n - 7) / 2\n\n\n\"\"\"\nWrite a function to find the"}
{"ID": 499, "source": "MBPP:136", "prompt": "\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate electricity bill.\n\"\"\"\ndef cal_electbill(units):\n\tbill=0\n\tif units<=100:\n\t\tbill=units*4.5\n\telif units<=200:\n\t\tbill=100*4.5+(units-100)*6\n\telif units<=300:\n\t\tbill=100*4.5+100*6+(units-200)*10\n\telse:\n\t\tbill=100*4.5+100*6+100*10+(units-300)*20\n\treturn bill\n\nunits=int(input(\"Enter the units of electricity consumed: \"))\nprint(\"The electricity bill is: \",cal_electbill(units))<｜end▁of▁sentence｜>"}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count / len(nums)\n\nprint(zero_count([1, 2, 3, 0, 0, 0]))\nprint(zero_count([1, 2, 3, 0, 0, 0, 0]))\nprint(zero_count([1, 2, 3]))\nprint(zero_count([0, 0, 0]))<｜end▁of▁sentence｜>"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\twhile (n != 1): \n\t\tif (n % 2 != 0): \n\t\t\treturn False\n\t\tn = n // 2\n\treturn True\nn = int(input())\nif(is_Sum_Of_Powers_Of_Two(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\tpi = 3.14\n\tcircumference = 2 * pi * r\n\treturn circumference\n\nprint(circle_circumference(5))<｜end▁of▁sentence｜>"}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t\"\"\"\n\t>>> extract_singly([(3, 4), (5, 6), (3, 4), (5, 6), (7, 8)])\n\t[7, 8]\n\t\"\"\"\n\tres = []\n\tfor i in test_list:\n\t\tif test_list.count(i) == 1:\n\t\t\tres.extend(i)\n\treturn list(set(res))\n\n\n\"\"\"\nWrite a function to find the maximum and minimum values in the given list of tuples.\n\"\"\"\ndef max_min_list_tuples(class_students):\n\t\"\"\"\n\t>>> max_min_list_tuples([('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)])\n\t('VIII', 'VI')\n\t\"\"\"\n\tmax_val = max(class_students, key=lambda x: x[1])\n\tmin_val = min(class_students, key=lambda x: x[1])\n\treturn max_val[0], min_val[0]\n\n\n\"\"\"\nWrite a function to sort a list of tuples by the second item.\n\"\"\"\ndef sort_list_last(tuples):\n\t\"\"\"\n\t>>> sort_list_last([('square', 3), ('circle', 2), ('rectangle', 4)])\n\t[('circle', 2), ('square', 3), ('rectangle', 4)]\n\t\"\"\"\n\treturn sorted(tuples, key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to find the length of a given tuple.\n\"\"\"\ndef length_tuple(test_tup):\n\t\"\"\"\n\t>>> length_tuple((1, 2, 3, 4, 5))\n\t5\n\t\"\"\"\n\treturn len(test_tup)\n\n\n\"\"\"\nWrite a function to find the index of an item of a tuple.\n\"\"\"\ndef index_tuple(test_tup, item):\n\t\"\"\"\n\t>>> index_tuple((1, 2, 3, 4, 5), 3)\n\t"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\"\"\"\n\t>>> pancake_sort([1, 5, 3, 2, 4])\n\t[1, 2, 3, 4, 5]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> pancake_sort([1, 5, 3, 2"}
{"ID": 505, "source": "MBPP:142", "prompt": "\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the same pair in three given lists.\n\"\"\"\ndef count_samepair(list1,list2,list3):\n\tcount = 0\n\tfor i in list1:\n\t\tfor j in list2:\n\t\t\tfor k in list3:\n\t\t\t\tif i == j == k:\n\t\t\t\t\tcount += 1\n\treturn count\n\nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [2,2,4,4,6,6,8,8]\nlist3 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\nprint(count_samepair(list1,list2,list3))<｜end▁of▁sentence｜>"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\tcount = 0\n\tfor i in Input: \n\t\tif type(i) == list: \n\t\t\tcount += 1\n\treturn count \n\nInput = ([1, 2, 3], [4, 5, 6], [7, 8, 9], (10, 11, 12)) \nprint(find_lists(Input))<｜end▁of▁sentence｜>"}
{"ID": 507, "source": "MBPP:144", "prompt": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\"\"\"\ndef sum_Pairs(arr,n): \n\tsum = 0\n\tfor i in range (0, n): \n\t\tsum = sum + arr[i] * (n-i) * (i+1) \n\treturn sum\narr = [1, 2, 3] \nn = len(arr) \nprint (sum_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 508, "source": "MBPP:145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"\ndef max_Abs_Diff(arr,n): \n\tmax_diff = arr[1] - arr[0] \n\tfor i in range( 0, n ): \n\t\tfor j in range( i+1, n ): \n\t\t\tif(arr[j] - arr[i] > max_diff): \n\t\t\t\tmax_diff = arr[j] - arr[i] \n\treturn max_diff \n\narr = [2, 1, 5, 3, 4] \nn = len(arr) \nprint (\"Maximum difference is\", max_Abs_Diff(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 509, "source": "MBPP:146", "prompt": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ascii value of total characters in a string.\n\"\"\"\ndef ascii_value_string(str1):\n\ttotal = 0\n\tfor i in str1:\n\t\ttotal = total + ord(i)\n\treturn total\nprint(ascii_value_string('sachin'))<｜end▁of▁sentence｜>"}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t  \n    # loop for bottom-up calculation \n    for i in range(m-1, -1, -1): \n        for j in range(i+1): \n  \n            # for each element, check both \n            # elements just below the number \n            # and below right to the number \n            # add the maximum of them to it \n            if (tri[i+1][j] > tri[i+1][j+1]): \n                tri[i][j] += tri[i+1][j] \n            else: \n                tri[i][j] += tri[i+1][j+1] \n  \n    # return the top element \n    # which stores the maximum sum \n    return tri[0][0] \n\n\ntri = [[1, 0, 0], \n       [4, 8, 0], \n       [1, 5, 3]] \nprint(max_path_sum(tri, 2, 2))<｜end▁of▁sentence｜>"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t\n\tsum = 0\n\twhile (N > 0) : \n\t\tsum += N % 10\n\t\tN //= 10\n\t\n\t\n\tpart1 = sum // 2\n\tpart2 = sum - part1\n\t\n\tprint(\"The two parts are\", part1, \"and\", part2) \n\n\nN = 4325\nsum_digits_twoparts(N) \n\n\n\"\"\"\nOutput:\n\nThe two parts are 10 and 11\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\tmp = {} \n\tfor i in range(n): \n\t\tif arr[i] - 1 in mp: \n\t\t\tmp[arr[i]] = mp[arr[i] - 1] + 1\n\t\telse: \n\t\t\tmp[arr[i]] = 1\n\tmaximum = 0\n\tfor it in mp: \n\t\tif maximum < mp[it]: \n\t\t\tmaximum = mp[it] \n\treturn maximum \n\narr = [10, 9, 4, 5, 4, 8, 6] \nn = len(arr) \nprint(\"Length of longest subsequence is\", longest_subseq_with_diff_one(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\twhile a<=b: \n\t\tif a==c: \n\t\t\treturn True\n\t\ta+=1\n\treturn False\n\na=int(input(\"Enter the first number of the sequence: \"))\nb=int(input(\"Enter the last number of the sequence: \"))\nc=int(input(\"Enter the number to be searched: \"))\n\nif does_Contain_B(a,b,c): \n\tprint(\"The number is present in the sequence\")\nelse: \n\tprint(\"The number is not present in the sequence\")<｜end▁of▁sentence｜>"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\thcf=1\n\tfor i in range(1,x+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\thcf=i\n\tif hcf==1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_coprime(15,21))<｜end▁of▁sentence｜>"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\tn = len(x)\n\tif n == 1:\n\t\treturn x\n\tmid = n//2\n\tleft = merge_sort(x[:mid])\n\tright = merge_sort(x[mid:])\n\ti, j = 0, 0\n\tres = []\n\twhile i < len(left) and j < len(right):\n\t\tif left[i] < right[j]:\n\t\t\tres.append(left[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tres.append(right[j])\n\t\t\tj += 1\n\tres += left[i:]\n\tres += right[j:]\n\treturn res\n\n\nif __name__ == '__main__':\n\tx = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10]\n\tprint(merge_sort(x))<｜end▁of▁sentence｜>"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\tx = -b / (2 * a)\n\ty = a * x ** 2 + b * x + c\n\treturn (x, y)\n\nprint(parabola_vertex(2, -1, -1))<｜end▁of▁sentence｜>"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tfor j in range(len(nums[i])):\n\t\t\tif nums[i][j] == N:\n\t\t\t\tresult.append((i, j))\n\treturn result\n\nnums = [[1, 3, 5, 7, 9], [3, 2, 1, 7, 6], [5, 3, 7, 2, 9], [9, 3, 4, 7, 3]]\nprint(\"Original list:\")\nprint(nums)\nN = 7\nprint(\"\\nExtract 7 from the said list of lists:\")\nprint(specified_element(nums, N))\n\n\"\"\"\nOriginal list:\n[[1, 3, 5, 7, 9], [3, 2, 1, 7, 6], [5, 3, 7, 2, 9], [9, 3, 4, 7, 3]]\n\nExtract 7 from the said list of lists:\n[(0, 3), (1, 3), (2, 2), (3, 3)]\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\n\t# Print number \n\tprint(\"Actual Number = \", n) \n\t\n\t# Left shift 1 by 1 and \n\t# OR with original number \n\tn = n ^ 0xAAAAAAAA\n\t\n\tprint(\"Toggled Number = \", n) \n\n# Driver code \nn = 10\neven_bit_toggle_number(n) \n\n\"\"\"\nOutput:\n\nActual Number =  10\nToggled Number =  5\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t\"\"\"\n\t>>> tuple_int_str(('123', '456', '789'))\n\t(123, 456, 789)\n\t\"\"\"\n\treturn tuple(map(int, tuple_str))\n\n\n\"\"\"\nWrite a function to compute the sum of the elements of a tuple.\n\"\"\"\ndef tuple_sum(tuple_int):\n\t\"\"\"\n\t>>> tuple_sum((1, 2, 3))\n\t6\n\t\"\"\"\n\treturn sum(tuple_int)\n\n\n\"\"\"\nWrite a function to remove an empty tuple(s) from a list of tuples.\n\"\"\"\ndef remove_empty_tuple(list_tuple):\n\t\"\"\"\n\t>>> remove_empty_tuple([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n\t[('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\"\"\"\n\treturn [t for t in list_tuple if t]\n\n\n\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef sort_tuple_float(list_tuple):\n\t\"\"\"\n\t>>> sort_tuple_float([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n\t[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n\t\"\"\"\n\treturn sorted(list_tuple, key=lambda x: float(x[1]), reverse=True)\n\n\n\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_until_tuple(list_mixed):\n\t\"\"\"\n\t>>> count_until_tuple([12, 24, 35, 70, 88, 120, 155, (), 90, 100])\n\t6\n\t\"\"\"\n\tfor i, v in enumerate(list_mixed):\n\t\tif isinstance(v, tuple):\n\t\t\treturn i\n\n\n\"\"\"\n"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\tlist2 = []\n\tcount = 1\n\tfor i in range(len(list1)-1):\n\t\tif list1[i] == list1[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tlist2.append([count, list1[i]])\n\t\t\tcount = 1\n\tlist2.append([count, list1[i]])\n\treturn list2\n\ndef decode_list(list1):\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tfor j in range(list1[i][0]):\n\t\t\tlist2.append(list1[i][1])\n\treturn list2\n\nprint(encode_list([1,1,1,1,2,3,3,1,1,4,5,5,5,5]))\nprint(decode_list([[4,1],[1,2],[2,3],[2,1],[1,4],[4,5]]))<｜end▁of▁sentence｜>"}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\tarr.sort() \n\tmax_freq = 1; curr_freq = 1\n\tfor i in range(1, n): \n\t\tif (arr[i] == arr[i - 1]): \n\t\t\tcurr_freq += 1\n\t\telse: \n\t\t\tmax_freq = max(max_freq, curr_freq) \n\t\t\tcurr_freq = 1\n\tmax_freq = max(max_freq, curr_freq) \n\treturn (n - max_freq) \n\narr = [1, 5, 2, 1, 3, 2, 1] \nn = len(arr) \nk = max(arr) \nprint(min_Ops(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tspring = ['March','April','May']\n\tsummer = ['June','July','August']\n\tfall = ['September','October','November']\n\twinter = ['December','January','February']\n\tif month in spring:\n\t\tprint(\"Spring\")\n\telif month in summer:\n\t\tprint(\"Summer\")\n\telif month in fall:\n\t\tprint(\"Fall\")\n\telif month in winter:\n\t\tprint(\"Winter\")\n\telse:\n\t\tprint(\"Invalid month\")\n\nmonth_season('March',31)\nmonth_season('June',30)\nmonth_season('September',30)\nmonth_season('December',31)\nmonth_season('January',31)\nmonth_season('February',28)\nmonth_season('April',30)\nmonth_season('July',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('May',31)\nmonth_season('August',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('February',29)\nmonth_season('February',28)\nmonth_season('April',31)\nmonth_season('July',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('May',32)\nmonth_season('August',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('February',30)\nmonth_season('April',32)\nmonth_season('July',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('May',33)\nmonth_season('August',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('February',31)\nmonth_season('April',33)\nmonth_season('July',34)\nmonth_season('October',34)\nmonth_season('November',33)\nmonth_season('May',34)\nmonth_season"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\td = gcd(a, b)\n\tif n % d != 0:\n\t\treturn []\n\ta, b, n = a // d, b // d, n // d\n\tx, y = ext_gcd(a, b)\n\tx, y = x * n, y * n\n\treturn [x, y]\n\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef ext_gcd(a, b):\n\tif b == 0:\n\t\treturn 1, 0\n\tx, y = ext_gcd(b, a % b)\n\tx, y = y, x - (a // b) * y\n\treturn x, y\n\nprint(solution(4, 6, 2))<｜end▁of▁sentence｜>"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\tlist3 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tlist3.append(i)\n\treturn list3\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [2, 4, 6, 8]\nprint(remove_elements(list1, list2))<｜end▁of▁sentence｜>"}
{"ID": 525, "source": "MBPP:162", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\ndef sum_series(n):\n\tsum = 0\n\twhile n > 0:\n\t\tsum += n\n\t\tn -= 2\n\treturn sum\n\nprint(sum_series(10))<｜end▁of▁sentence｜>"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\timport math\n\tarea = (s*l**2)/(4*math.tan(math.pi/s))\n\treturn area\n\nprint(area_polygon(4,25))\nprint(area_polygon(6,3))\nprint(area_polygon(10,4))<｜end▁of▁sentence｜>"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\tsum1 = 0\n\tsum2 = 0\n\tfor i in range(1,num1):\n\t\tif num1%i==0:\n\t\t\tsum1+=i\n\tfor i in range(1,num2):\n\t\tif num2%i==0:\n\t\t\tsum2+=i\n\tif sum1==sum2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nnum1=int(input(\"Enter the first number: \"))\nnum2=int(input(\"Enter the second number: \"))\nif areEquivalent(num1,num2):\n\tprint(\"The sum of divisors of both the numbers are same\")\nelse:\n\tprint(\"The sum of divisors of both the numbers are not same\")<｜end▁of▁sentence｜>"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\tcount=0\n\tfor i in range(len(str1)): \n\t\tif ((i == ord(str1[i]) - ord('a')) or (i == ord(str1[i]) - ord('A'))): \n\t\t\tcount+=1\n\treturn count \nstr1=input(\"Enter the string:\")\nprint(\"Number of characters of the said string at same position as in English alphabet:\")\nprint(count_char_position(str1))<｜end▁of▁sentence｜>"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\tcount = 0\n\tfor i in range(N): \n\t\tfor j in range(i + 1, N): \n\t\t\tif (A[i] ^ A[j] % 2 == 0): \n\t\t\t\tcount += 1\n\treturn count \n\nA = [1, 2, 3, 4, 5] \nN = len(A) \nprint(find_even_Pair(A, N))<｜end▁of▁sentence｜>"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\tcount = 0; \n\tif (n and not(n & (n - 1))): \n\t\treturn n \n\twhile( n != 0): \n\t\tn >>= 1\n\t\tcount += 1\n\treturn 1 << count; \n\nn = int(input(\"Enter a number: \"))\nprint(next_Power_Of_2(n))<｜end▁of▁sentence｜>"}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\tcount = 0\n\tfor i in a:\n\t\tif i == x:\n\t\t\tcount += 1\n\treturn count\n\na = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nx = 10\nprint(frequency(a,x))<｜end▁of▁sentence｜>"}
{"ID": 532, "source": "MBPP:169", "prompt": "\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the nth pell number.\n\"\"\"\ndef get_pell(n): \n\t\"\"\"\n\t>>> get_pell(1)\n\t1\n\t>>> get_pell(2)\n\t2\n\t>>> get_pell(3)\n\t5\n\t>>> get_pell(4)\n\t12\n\t>>> get_pell(5)\n\t29\n\t\"\"\"\n\ta, b = 0, 1\n\tfor i in range(n):\n\t\ta, b = b, 2*b + a\n\treturn a\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\tsum = 0\n\tfor i in range(m, n+1):\n\t\tsum += list1[i]\n\treturn sum\n\nlist1 = [2, 1, 5, 6, 8, 3]\nm = 2\nn = 4\nprint(sum_range_list(list1, m, n))<｜end▁of▁sentence｜>"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\tperimeter = a * 5\n\treturn perimeter\n\nprint(perimeter_pentagon(15))<｜end▁of▁sentence｜>"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == 's':\n\t\t\tfor j in range(i+1, len(s)):\n\t\t\t\tif s[j] == 't':\n\t\t\t\t\tfor k in range(j+1, len(s)):\n\t\t\t\t\t\tif s[k] == 'd':\n\t\t\t\t\t\t\tcount += 1\n\treturn count\n\ns = \"std\"\nprint(count_occurance(s))<｜end▁of▁sentence｜>"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\tresult = ''.join(e for e in text if e.isalnum()) \n\treturn result \n\ntext = \"Hello, World!\"\nprint(remove_splchar(text))<｜end▁of▁sentence｜>"}
{"ID": 537, "source": "MBPP:174", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\"\"\"\ndef group_keyvalue(l):\n\td = {}\n\tfor k,v in l:\n\t\td.setdefault(k,[]).append(v)\n\treturn d\n\nprint group_keyvalue([('a',1),('b',2),('c',3),('a',4),('b',5),('c',6)])<｜end▁of▁sentence｜>"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\tstack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n\tfor parenthese in str1:\n\t\tif parenthese in pchar:\n\t\t\tstack.append(parenthese)\n\t\telif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n\t\t\treturn False\n\treturn len(stack) == 0\n\nprint(is_valid_parenthese(\"(){}[]\"))\nprint(is_valid_parenthese(\"()[{)}\"))\nprint(is_valid_parenthese(\"()\"))<｜end▁of▁sentence｜>"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\tperimeter = a+b+c\n\treturn perimeter\n\nprint(perimeter_triangle(2,3,4))<｜end▁of▁sentence｜>"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\ta=L \n\tb=L+1\n\tif(b>R): \n\t\treturn [-1,-1] \n\telse: \n\t\treturn [a,b] \nL=int(input()) \nR=int(input()) \nprint(answer(L,R))<｜end▁of▁sentence｜>"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\"\"\"\n\t:param patterns: list of patterns to search\n\t:param text: text to search in\n\t:return: list of patterns found in text\n\t\"\"\"\n\tfound = []\n\tfor pattern in patterns:\n\t\tif pattern in text:\n\t\t\tfound.append(pattern)\n\treturn found\n\n\nif __name__ == '__main__':\n\tpatterns = ['a','b','c']\n\ttext = 'abc'\n\tprint(string_literals(patterns,text))<｜end▁of▁sentence｜>"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\ttemp = x \n\tarr = [] \n\twhile (temp > 0): \n\t\tarr.append(temp%10) \n\t\ttemp = temp//10\n\tn = len(arr) \n\twhile (x > 0): \n\t\tsum = 0\n\t\tfor i in range(1, n + 1): \n\t\t\tsum = sum + arr[n - i] \n\t\tarr.append(sum) \n\t\tx = x - arr[0] \n\t\tarr.pop(0) \n\t\tn = len(arr) \n\tif (sum == x): \n\t\treturn True\n\telse: \n\t\treturn False\n\nx = 197\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(slat)\n\tlon1 = radians(slon)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\tdistance = R * c\n\treturn distance\n\n\n\"\"\"\nWrite a function to calculate distance between two points using zip codes.\n\"\"\"\ndef distance_zip(zip1,zip2):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(zip1)\n\tlon1 = radians(zip2)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\tdistance = R * c\n\treturn distance\n\n\n\"\"\"\nWrite a function to calculate distance between two points using city and state.\n\"\"\"\ndef distance_city_state(city1,state1,city2,state2):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(city1)\n\tlon1 = radians(state1)\n\tlat2 = radians(city2)\n\tlon2 = radians(state2)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\tresult += str1[i] \n\t\ti += 1\n\t\tj += 1\n\treturn (result) \n\ndef common_prefix(arr, n): \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix) \n\nif __name__ == \"__main__\": \n\tarr = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] \n\tn = len(arr) \n\tans = common_prefix(arr, n) \n\tif (len(ans)): \n\t\tprint (\"The longest common prefix is\",ans); \n\telse: \n\t\tprint(\"There is no common prefix\")<｜end▁of▁sentence｜>"}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\timport re\n\tuppercase = re.findall(r'[A-Z]', string)\n\tlowercase = re.findall(r'[a-z]', string)\n\tspecial_character = re.findall(r'[^a-zA-Z0-9]', string)\n\tnumeric = re.findall(r'[0-9]', string)\n\tprint(\"Uppercase: \", uppercase)\n\tprint(\"Lowercase: \", lowercase)\n\tprint(\"Special Character: \", special_character)\n\tprint(\"Numeric: \", numeric)\n\nfind_character(\"Hello World 123 !@#\")<｜end▁of▁sentence｜>"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\tcount = 0\n\tarr.sort()\n\tl = 0\n\tr = 0\n\twhile r < n:\n\t\tif arr[r] - arr[l] == k:\n\t\t\tcount += 1\n\t\t\tl += 1\n\t\t\tr += 1\n\t\telif arr[r] - arr[l] > k:\n\t\t\tl += 1\n\t\telse:\n\t\t\tr += 1\n\treturn count\n\n\narr = [1, 5, 3, 4, 2]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\tnew_list=[]\n\tfor i in list:\n\t\tif i>num:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nlist=[1,2,3,4,5,6,7,8,9,10]\nnum=5\nprint(greater_specificnum(list,num))<｜end▁of▁sentence｜>"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\th = -b/(2*a)\n\tk = (4*a*c - b**2)/(4*a)\n\treturn (h, k)\n\nprint(parabola_focus(2, -3, -2))<｜end▁of▁sentence｜>"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\timport re\n\tfor pattern in patterns:\n\t\tprint('Looking for \"%s\" in \"%s\" ->' % (pattern, text), end=' ')\n\t\tif re.search(pattern, text):\n\t\t\tprint('found a match')\n\t\telse:\n\t\t\tprint('no match')\n\ncheck_literals('ab', ['a', 'b', 'c'])\ncheck_literals('a\\nb', ['.', 'a', 'b', 'c'])\ncheck_literals('a\\nb\\nc', ['c', '.', 'a', 'b', 'c'])\ncheck_literals('a\\r\\nb\\r\\nc', ['c', '.', 'a', 'b', 'c'])<｜end▁of▁sentence｜>"}
{"ID": 550, "source": "MBPP:187", "prompt": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \n\tL = [[0 for x in range(n+1)] for x in range(m+1)] \n\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i == 0 or j == 0: \n\t\t\t\tL[i][j] = 0\n\t\t\telif X[i-1] == Y[j-1]: \n\t\t\t\tL[i][j] = L[i-1][j-1] + 1\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i-1][j], L[i][j-1]) \n\n\tindex = L[m][n] \n\n\tlcs = [\"\"] * (index+1) \n\tlcs[index] = \"\" \n\n\ti = m \n\tj = n \n\twhile i > 0 and j > 0: \n\n\t\tif X[i-1] == Y[j-1]: \n\t\t\tlcs[index-1] = X[i-1] \n\t\t\ti-=1\n\t\t\tj-=1\n\t\t\tindex-=1\n\n\t\telif L[i-1][j] > L[i][j-1]: \n\t\t\ti-=1\n\t\telse: \n\t\t\tj-=1\n\n\tprint(\"LCS of \" + X + \" and \" + Y + \" is \" + \"\".join(lcs))\n\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn = len(Y) \nlongest_common_subsequence(X, Y, m, n)<｜end▁of▁sentence｜>"}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\ti=1\n\twhile i*i<=n:\n\t\tj=1\n\t\twhile j*j<=n:\n\t\t\tif i*i*j*j==n:\n\t\t\t\treturn True\n\t\t\tj+=1\n\t\ti+=1\n\treturn False\nn=int(input())\nprint(prod_Square(n))<｜end▁of▁sentence｜>"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\tarr.sort() \n\tcounter = 1\n\tfor i in range(n): \n\t\tif (arr[i] <= 0): \n\t\t\tcontinue\n\t\tif (arr[i] == counter): \n\t\t\tcounter += 1\n\t\t\twhile (i < n-1 and arr[i + 1] == arr[i]): \n\t\t\t\ti += 1\n\treturn counter \n\narr = [0, 10, 2, -10, -20] \nn = len(arr) \nprint(first_Missing_Positive(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1): \n\t\tfor j in range(y1,y2+1): \n\t\t\tcount += 1\n\treturn count \nx1,y1,x2,y2 = map(int,input().split())\nprint(count_Intgral_Points(x1,y1,x2,y2))<｜end▁of▁sentence｜>"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\tmonthname3 = monthname3.lower()\n\tif monthname3 == \"april\" or monthname3 == \"june\" or monthname3 == \"september\" or monthname3 == \"november\":\n\t\tprint(\"This month contains 30 days\")\n\telse:\n\t\tprint(\"This month does not contain 30 days\")\n\nmonthname3 = input(\"Enter the month name: \")\ncheck_monthnumber(monthname3)<｜end▁of▁sentence｜>"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\tflag_l=False\n\tflag_n=False\n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\tflag_l=True\n\t\tif i.isdigit(): \n\t\t\tflag_n=True\n\treturn flag_l and flag_n \nstr=input(\"Enter string:\")\nprint(check_String(str))<｜end▁of▁sentence｜>"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\tres = tuple(set(test_tup))\n\treturn res\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(remove_tuple(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\tdecimal = 0\n\tbase = 1\n\ttemp = n\n\twhile(temp):\n\t\tlast_digit = temp % 10\n\t\ttemp = int(temp / 10)\n\t\tdecimal += last_digit * base\n\t\tbase = base * 8\n\treturn decimal\n\nn = int(input(\"Enter a octal number: \"))\nprint(\"The decimal value of\", n, \"is\", octal_To_Decimal(n))<｜end▁of▁sentence｜>"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\tlow = 0\n\thigh = n - 1\n\tres = -1\n\twhile (low <= high): \n\t\tmid = (low + high) // 2\n\t\tif arr[mid] > x: \n\t\t\thigh = mid - 1\n\t\telif arr[mid] < x: \n\t\t\tlow = mid + 1\n\t\telse: \n\t\t\tres = mid \n\t\t\thigh = mid - 1\n\treturn res \n\ndef last(arr,x,n): \n\tlow = 0\n\thigh = n - 1\n\tres = -1\n\twhile(low <= high): \n\t\tmid = (low + high) // 2\n\t\tif arr[mid] > x: \n\t\t\thigh = mid - 1\n\t\telif arr[mid] < x: \n\t\t\tlow = mid + 1\n\t\telse: \n\t\t\tres = mid \n\t\t\tlow = mid + 1\t\t \n\treturn res \n\ndef count(arr,x,n): \n\ti = first(arr,x,n) \n\tif i == -1: \n\t\treturn i \n\tj = last(arr,x,n) \n\treturn j-i+1\n\narr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8] \nx = 2\nn = len(arr) \nprint(count(arr, x, n))<｜end▁of▁sentence｜>"}
{"ID": 559, "source": "MBPP:196", "prompt": "\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all the tuples with length k.\n\"\"\"\ndef remove_tuples(test_list, K):\n\tres = [ele for ele in test_list if len(ele) != K]\n\treturn res\n\ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\nK = 2\nprint(remove_tuples(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 560, "source": "MBPP:197", "prompt": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\n\t\"\"\"\n\t:param test_tup1:\n\t:param test_tup2:\n\t:return:\n\t\"\"\"\n\tres = tuple(map(pow, test_tup1, test_tup2))\n\treturn res\n\n\ntest_tup1 = (5, 2, 3)\ntest_tup2 = (2, 3, 2)\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\nprint(\"The container after element exponentiation : \" + str(find_exponentio(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t\"\"\"\n\t>>> largest_triangle(10,10)\n\t25.0\n\t>>> largest_triangle(10,5)\n\t12.5\n\t>>> largest_triangle(10,1)\n\t0.5\n\t\"\"\"\n\timport math\n\tr = a*b/(a+b)**0.5\n\th = r-b\n\tarea = h*a/2\n\treturn area\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\tres = 0; \n\tfor i in range(n, 0, -1): \n\t\tif ((i & (i - 1)) == 0): \n\t\t\tres = i; \n\t\t\tbreak; \n\treturn res; \n\nn = int(input(\"Enter a number: \"))\nprint(highest_Power_of_2(n)); \n\n\"\"\"\nOutput:\nEnter a number: 10\n8\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\tmax_value = max(list1)\n\tindex_list = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == max_value:\n\t\t\tindex_list.append(i)\n\treturn index_list\n\nprint(position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))<｜end▁of▁sentence｜>"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\tflag = 0 \n\ti = 1 \n\twhile i < len(lst): \n\t\tif lst[i] != lst[0]: \n\t\t\tflag = 1 \n\t\ti = i + 1 \n\tif flag == 0: \n\t\treturn True \n\telse: \n\t\treturn False \nlst = [1,1,1,1,1] \nif chkList(lst): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\tresult = \"\"\n\tfor i in range(len(str1)):\n\t\tif i % 2 != 0:\n\t\t\tresult = result + str1[i]\n\treturn result\n\nstr1 = input(\"Enter a string: \")\nprint(remove_even(str1))<｜end▁of▁sentence｜>"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\tx = n1 ^ n2  \n\tsetBits = 0\n\twhile (x > 0) : \n\t\tsetBits += x & 1\n\t\tx >>= 1\n\treturn setBits \nn1 = 9\nn2 = 14\nprint(hamming_Distance(n1, n2))<｜end▁of▁sentence｜>"}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\tres = 0\n\tfor i in range(len(s)) : \n\t\tif (s[i] == c): \n\t\t\tres = res + 1\n\treturn res \n\nstr= \"geeksforgeeks\"\nc = 'e'\nprint(count(str, c))<｜end▁of▁sentence｜>"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t\"\"\"\n\tWrite a function to find the inversions of tuple elements in the given tuple list.\n\t\"\"\"\n\tres = []\n\tfor tup in test_tup:\n\t\tres.append(tup[::-1])\n\treturn res\n\nprint(inversion_elements([(1, 2), (3, 4), (5, 6), (7, 8)]))<｜end▁of▁sentence｜>"}
{"ID": 569, "source": "MBPP:206", "prompt": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\"\"\"\ndef concatenate_elements(test_tup):\n\tres = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n\treturn res\n\n\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(concatenate_elements(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for i in range(n+1)] for j in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1]\t\t \n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j])\t \n\treturn dp[n][n] \n\nstr = \"aabb\"\nprint(\"The length of the largest subsequence that repeats itself is : \"\n\t, find_longest_repeating_subseq(str))<｜end▁of▁sentence｜>"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\timport re\n\tpattern = re.compile(r'^[0-9]+(\\.[0-9]{1,2})?$')\n\treturn bool(pattern.match(num))\n\nprint(is_decimal('123.11'))\nprint(is_decimal('123.1'))\nprint(is_decimal('123'))\nprint(is_decimal('0.21'))\n\nprint(is_decimal('123.1214'))\nprint(is_decimal('3.124587'))\nprint(is_decimal('e666.8'))\nprint(is_decimal('12a'))\nprint(is_decimal('123.1214.12'))<｜end▁of▁sentence｜>"}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\theap[0]=a\n\theapify(heap)\n\n\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\theap[0]=a\n\theapify(heap)\n\n\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\theap[0]=a\n\theapify(heap)<｜end▁of▁sentence｜>"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\timport re\n\tcharRe = re.compile(r'[^a-zA-Z0-9.]')\n\tstring = charRe.search(string)\n\treturn not bool(string)\n\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\")) \nprint(is_allowed_specific_char(\"*&%@#!\"))<｜end▁of▁sentence｜>"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\tcount = 0\n\tfor i in range(1, n + 1): \n\t\tif (i & (i - 1)): \n\t\t\tcount += 1\n\treturn count \nn = 10\nprint(count_Num(n))<｜end▁of▁sentence｜>"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum = sum + i * i * i * i \n\treturn sum\nn = int(input(\"Enter the number: \"))\nprint(fourth_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\tres = list(test_tup1) + list(test_tup2)\n\treturn tuple(res)\n\ntest_tup1 = (\"g\", \"e\", \"e\", \"k\", \"s\")\ntest_tup2 = (\"f\", \"o\", \"r\", \"g\", \"e\", \"e\", \"k\", \"s\")\nprint(concatenate_strings(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 577, "source": "MBPP:214", "prompt": "\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef degree_radian(radian):\n\tpi = 3.14159\n\tdegree = radian * (180/pi)\n\treturn degree\n\nradian = float(input(\"Enter the radian: \"))\nprint(degree_radian(radian))<｜end▁of▁sentence｜>"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\"\"\"\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 1, 1, 1, 1, 1, 1, 1])\n\t[1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\tflag = True\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tflag = False\n\t\t\tbreak\n\treturn flag\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [1, 2, 3, 4, 5]\nlist3 = [11, 12, 13, 14, 15]\n\nprint(check_subset_list(list1, list2))\nprint(check_subset_list(list1, list3))<｜end▁of▁sentence｜>"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\th = {} \n\tfor ch in str: \n\t\tif ch in h: \n\t\t\treturn ch; \n\t\telse: \n\t\t\th[ch] = 0\n\treturn '\\0'\n\nstring = input(\"Enter the string: \")\nprint(\"First Repeated Character is: \",first_Repeated_Char(string))<｜end▁of▁sentence｜>"}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\tcount = 0\n\twhile A != B:\n\t\tif A > B:\n\t\t\tA = A - B\n\t\telse:\n\t\t\tB = B - A\n\t\tcount += 1\n\treturn count\n\nA = int(input(\"Enter the first number: \"))\nB = int(input(\"Enter the second number: \"))\nprint(min_Operations(A,B))<｜end▁of▁sentence｜>"}
{"ID": 582, "source": "MBPP:219", "prompt": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\n\"\"\"\ndef extract_min_max(test_tup, K):\n\ttest_tup = list(test_tup)\n\ttemp = sorted(test_tup)\n\tres = tuple(temp[:K] + temp[-K:])\n\treturn res\n\ntest_tup = (5, 20, 3, 7, 6, 8)\nK = 2\nprint(\"The extracted values : \" + str(extract_min_max(test_tup, K)))<｜end▁of▁sentence｜>"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\timport re\n\tpattern = re.compile(r\"[ ,.]\")\n\tresult = pattern.sub(\":\",text,n)\n\treturn result\n\ntext = \"Python Exercises, PHP exercises.\"\nprint(\"Original string:\",text)\nprint(\"After replacing maximum 4 occurrences of ,, . or spaces:\\n\",replace_max_specialchar(text,4))<｜end▁of▁sentence｜>"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\"\"\"\n\t:param nums: list of numbers\n\t:return: first even number in the list\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\n\nprint(first_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_even([1, 3, 5, 7, 9]))\nprint(first_even([2, 4, 6, 8, 10]))<｜end▁of▁sentence｜>"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t\"\"\"\n\tThis function takes a tuple as input and checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tres = True\n\ttemp = test_tuple[0]\n\tfor ele in test_tuple:\n\t\tif not isinstance(ele, type(temp)):\n\t\t\tres = False\n\t\t\tbreak\n\treturn res\n\ntest_tuple = (4, 5, 6, 7, 8)\nprint(check_type(test_tuple))\n\ntest_tuple = (4, 5, 6, 7, 8.0)\nprint(check_type(test_tuple))\n\ntest_tuple = (4, 5, 6, 7, '8')\nprint(check_type(test_tuple))<｜end▁of▁sentence｜>"}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t\"\"\"\n\tTime Complexity: O(logn)\n\tSpace Complexity: O(1)\n\t\"\"\"\n\tdef _binary_search(arr, low, high, x):\n\t\tif low > high:\n\t\t\treturn -1\n\t\tif low == high:\n\t\t\treturn low if arr[low] == x else -1\n\t\tmid = (low + high) // 2\n\t\tif arr[mid] == x:\n\t\t\treturn mid\n\t\telif arr[mid] > x:\n\t\t\treturn _binary_search(arr, low, mid-1, x)\n\t\telse:\n\t\t\treturn _binary_search(arr, mid+1, high, x)\n\n\tindex = _binary_search(arr, 0, n-1, x)\n\tif index == -1:\n\t\treturn False\n\tleft = index\n\tright = index\n\twhile left > 0 and arr[left-1] == x:\n\t\tleft -= 1\n\twhile right < n-1 and arr[right+1] == x:\n\t\tright += 1\n\treturn (right - left + 1) > n // 2\n\n\nif __name__ == \"__main__\":\n\tarr = [1, 2, 3, 3, 3, 3, 10]\n\tn = len(arr)\n\tx = 3\n\tprint(is_majority(arr, n, x))<｜end▁of▁sentence｜>"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count \n\nn = int(input(\"Enter a number: \"))\nprint(count_Set_Bits(n))<｜end▁of▁sentence｜>"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\tmin = arr[low] \n\ti = low \n\tfor i in range(high+1): \n\t\tif arr[i] < min: \n\t\t\tmin = arr[i] \n\treturn min \n\narr1 = [5, 6, 1, 2, 3, 4] \nn1 = len(arr1) \nprint(\"The minimum element is \" + str(find_Min(arr1, 0, n1-1))) \n\narr2 = [1, 2, 3, 4] \nn2 = len(arr2) \nprint(\"The minimum element is \" + str(find_Min(arr2, 0, n2-1))) \n\narr3 = [1] \nn3 = len(arr3) \nprint(\"The minimum element is \" + str(find_Min(arr3, 0, n3-1))) \n\narr4 = [1, 2] \nn4 = len(arr4) \nprint(\"The minimum element is \" + str(find_Min(arr4, 0, n4-1))) \n\narr5 = [2, 1] \nn5 = len(arr5) \nprint(\"The minimum element is \" + str(find_Min(arr5, 0, n5-1))) \n\narr6 = [5, 6, 7, 1, 2, 3, 4] \nn6 = len(arr6) \nprint(\"The minimum element is \" + str(find_Min(arr6, 0, n6-1))) \n\narr7 = [1, 2, 3, 4, 5, 6, 7] \nn7 = len(arr7) \nprint(\"The minimum element is \" + str(find_Min(arr7, 0, n7-1))) \n\narr8 = [2, 3, 4, 5, 6, 7, 8, 1] \nn8 = len(arr8) \nprint(\"The minimum element is \" + str(find_Min(arr8, 0, n8-1))) \n\narr9 = [3,"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\tresult = \"\"\n\tfor i in range(len(str)):\n\t\tif i % 2 == 0:\n\t\t\tresult = result + str[i]\n\treturn result\n\nprint(odd_values_string('abcdef'))\nprint(odd_values_string('python'))<｜end▁of▁sentence｜>"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\tmin = a\n\tif b < min:\n\t\tmin = b\n\tif c < min:\n\t\tmin = c\n\treturn min\n\nprint(min_of_three(1,2,3))\nprint(min_of_three(1,1,1))\nprint(min_of_three(1,2,2))\nprint(min_of_three(2,2,1))\nprint(min_of_three(2,1,2))\nprint(min_of_three(2,1,1))\nprint(min_of_three(1,2,1))\nprint(min_of_three(1,1,2))<｜end▁of▁sentence｜>"}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\ta = 1 << (l - 1)  \n\tb = (1 << (r)) - 1\n\tb = (b ^ a)  \n\tif (n & b) == 0: \n\t\treturn True\n\telse: \n\t\treturn False\nn = 42\nl = 2\nr = 5\nif all_Bits_Set_In_The_Given_Range(n, l, r): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 592, "source": "MBPP:229", "prompt": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\"\"\"\ndef re_arrange_array(arr, n):\n\tj = 0\n\tfor i in range(n):\n\t\tif arr[i] < 0:\n\t\t\ttemp = arr[i]\n\t\t\tarr[i] = arr[j]\n\t\t\tarr[j] = temp\n\t\t\tj += 1\n\treturn arr\n\n\nif __name__ == \"__main__\":\n\tarr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n\tn = len(arr)\n\tprint(re_arrange_array(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\tstr1 = str1.replace(\" \",char)\n\treturn str1\n\nstr1 = \"Hello World\"\nchar = \"*\"\nprint(replace_blank(str1,char))<｜end▁of▁sentence｜>"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t  \n\t# loop for bottom-up calculation \n\tfor i in range(n-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\n\t\t\t# for each element, check both \n\t\t\t# elements just below the number \n\t\t\t# and below right to the number \n\t\t\t# add the maximum of them to it \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\t\n\t# return the top element \n\t# which stores the maximum sum \n\treturn tri[0][0] \n\n# Driver program to test above function \ntri = [[1, 0, 0], \n\t[4, 8, 0], \n\t[1, 5, 3]] \nprint(max_sum(tri, 2))<｜end▁of▁sentence｜>"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[-n:]\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nn=int(input(\"Enter the number of largest items to be returned: \"))\nprint(larg_nnum(list1,n))<｜end▁of▁sentence｜>"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\tlateral_surface_area = 2*3.14*r*h\n\treturn lateral_surface_area\n\nprint(lateralsuface_cylinder(10,10))<｜end▁of▁sentence｜>"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\tv = l**3\n\treturn v\n\nprint(volume_cube(3))<｜end▁of▁sentence｜>"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\tn = n | 0xAAAAAAAA\n\treturn n\n\nn = int(input(\"Enter a number: \"))\nprint(even_bit_set_number(n))<｜end▁of▁sentence｜>"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\tcount=0\n\twhile(N>0):\n\t\tcount+=N\n\t\tN=N-K\n\treturn count\nN=int(input())\nK=int(input())\nprint(No_of_Triangle(N,K))<｜end▁of▁sentence｜>"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\"\"\"\n\tWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\t\"\"\"\n\tres = {}\n\tfor sub in test_list:\n\t\tres[sub] = res.get(sub, 0) + 1\n\tres = list(res.values())\n\ttemp = set(res)\n\tres = list(temp)\n\tif len(res) == len(temp):\n\t\treturn True\n\telse:\n\t\treturn False\n\ntest_list = [(5, 6, 7, 8), (5, 7, 6, 8), (6, 5, 8, 7), (7, 6, 5, 8), (6, 7, 8, 5)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"Does occurrences of records which occur similar times in the given tuples ? : \" + str(check_occurences(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\nstr = \"abcde\"; \nprint(number_of_substrings(str));<｜end▁of▁sentence｜>"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\tdp = [[0 for i in range(m + 1)] for j in range(n + 1)] \n\tfor i in range(1, m + 1): \n\t\tdp[1][i] = i \n\tfor i in range(2, n + 1): \n\t\tfor j in range(1, m + 1): \n\t\t\tif i > j: \n\t\t\t\tdp[i][j] = 0\n\t\t\telse: \n\t\t\t\tdp[i][j] = dp[i - 1][j // 2] \n\tfor i in range(n + 1): \n\t\tfor j in range(m + 1): \n\t\t\tprint(dp[i][j], end = \" \") \n\t\tprint() \n\treturn dp[n][m] \nn = 2\nm = 10\nprint(get_total_number_of_sequences(m, n))<｜end▁of▁sentence｜>"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1.pop()\n\tlist1.extend(list2)\n\treturn list1\n\nlist1=[1,3,5,7,9,10]\nlist2=[2,4,6,8]\nprint(replace_list(list1,list2))<｜end▁of▁sentence｜>"}
{"ID": 604, "source": "MBPP:241", "prompt": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\ndef array_3d(m,n,o):\n\tarr=[]\n\tfor i in range(m):\n\t\tarr1=[]\n\t\tfor j in range(n):\n\t\t\tarr2=[]\n\t\t\tfor k in range(o):\n\t\t\t\tarr2.append('*')\n\t\t\tarr1.append(arr2)\n\t\tarr.append(arr1)\n\treturn arr\n\nm=int(input(\"Enter the number of rows: \"))\nn=int(input(\"Enter the number of columns: \"))\no=int(input(\"Enter the number of depth: \"))\nprint(array_3d(m,n,o))<｜end▁of▁sentence｜>"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tcount += 1\n\treturn count\n\nstr1 = input(\"Enter a string: \")\nprint(\"Total characters in the string: \", count_charac(str1))<｜end▁of▁sentence｜>"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\tlst.sort(key = lambda x: x[0]) \n\treturn lst \n\nlst = [(3, 1, 5), (1, 3, 6), (2, 5, 7), (5, 2, 6)] \nprint(sort_on_occurence(lst))<｜end▁of▁sentence｜>"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\tnextN = N+1\n\twhile True:\n\t\tif nextN**0.5 == int(nextN**0.5):\n\t\t\treturn nextN\n\t\telse:\n\t\t\tnextN += 1\n\nN = int(input(\"Enter a number: \"))\nprint(next_Perfect_Square(N))<｜end▁of▁sentence｜>"}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\treturn max(msis) \n\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9] \nn = len(arr) \nprint(\"Sum of maximum sum increasing subsequence is \" +\n\t\t\t\t\tstr(max_sum(arr, n)))<｜end▁of▁sentence｜>"}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t\"\"\"\n\tComputes the square root of a number using the babylonian method.\n\t\"\"\"\n\tguess = number / 2.0\n\twhile abs(guess * guess - number) > 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1] \n\nstr = \"GEEKS FOR GEEKS\"\nprint(\"The length of the LPS is \" + str(lps(str)))<｜end▁of▁sentence｜>"}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += 1/i\n\treturn sum\n\nprint(harmonic_sum(7))\nprint(harmonic_sum(4))<｜end▁of▁sentence｜>"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\tresult = list(filter(lambda x: x in array_nums1, array_nums2)) \n\treturn result\n\narray_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]\narray_nums2 = [1, 2, 4, 8, 9]\nprint(\"Original arrays:\")\nprint(array_nums1)\nprint(array_nums2)\nprint(\"\\nIntersection of the said arrays: \",intersection_array(array_nums1, array_nums2))<｜end▁of▁sentence｜>"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\tcount = 0\n\tfor ele in tup: \n\t\tif (ele == x): \n\t\t\tcount = count + 1\n\treturn count \n\ntup = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2) \nenq = 4\nenq1 = 10\nprint(count_X(tup, enq)) \nprint(count_X(tup, enq1))<｜end▁of▁sentence｜>"}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\tnew_list = []\n\tfor i in list:\n\t\tnew_list.append(element)\n\t\tnew_list.append(i)\n\treturn new_list\n\nprint(insert_element([1,2,3,4,5],0))<｜end▁of▁sentence｜>"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\timport cmath\n\tprint(cmath.polar(numbers))\n\nconvert(1+2j)<｜end▁of▁sentence｜>"}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\tcount=0\n\tfor i in list1:\n\t\tif type(i)==int:\n\t\t\tcount+=1\n\treturn count\n\nlist1=[1,2,3,4,5,6,7,8,9,10]\nprint(count_integer(list1))<｜end▁of▁sentence｜>"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\twords = text.split()\n\tae_words = []\n\tfor word in words:\n\t\tif word[0] == 'a' or word[0] == 'e':\n\t\t\tae_words.append(word)\n\treturn ae_words\n\nprint words_ae(\"after effects\")<｜end▁of▁sentence｜>"}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t\"\"\"\n\t:param l: list of colours\n\t:param n: number of colours to choose\n\t:return: list of all combinations with repetitions\n\t\"\"\"\n\tif n == 0:\n\t\treturn [[]]\n\telif n == 1:\n\t\treturn [[x] for x in l]\n\telse:\n\t\treturn [[x] + y for x in l for y in combinations_colors(l, n - 1)]\n\n\nprint(combinations_colors(['red', 'green', 'blue'], 2))<｜end▁of▁sentence｜>"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\tcount = 0\n\tfor i in range(2,n):\n\t\tif is_Prime(i):\n\t\t\tcount += 1\n\treturn count\n\ndef is_Prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(count_Primes_nums(10))\nprint(count_Primes_nums(25))\nprint(count_Primes_nums(30))<｜end▁of▁sentence｜>"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\ta = a + b\n\tb = a - b\n\ta = a - b\n\treturn a,b\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"Before swapping: a = %d, b = %d\" %(a,b))\na,b = swap_numbers(a,b)\nprint(\"After swapping: a = %d, b = %d\" %(a,b))<｜end▁of▁sentence｜>"}
{"ID": 621, "source": "MBPP:258", "prompt": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\n\"\"\"\ndef count_odd(array_nums):\n\tcount = 0\n\tfor i in array_nums:\n\t\tif i % 2 != 0:\n\t\t\tcount += 1\n\treturn count\n\narray_nums = [1, 2, 3, 5, 7, 8, 9, 10]\nprint(\"Number of odd numbers in the above array: \", count_odd(array_nums))<｜end▁of▁sentence｜>"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to maximize the given two tuples.\n\t\"\"\"\n\tresult = tuple(map(lambda i, j: i if i >= j else j, test_tup1, test_tup2))\n\treturn result\n\n\ntest_tup1 = (2, 4, 6, 8, 10, 12)\ntest_tup2 = (4, 8, 12, 16, 20, 24)\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\nprint(\"Maximize combination of two tuples: \" + str(maximize_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\tprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 59"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\tres = tuple(map(lambda i, j: i / j, test_tup1, test_tup2))\n\treturn res\n\n\ntest_tup1 = (10, 4, 5)\ntest_tup2 = (2, 5, 2)\nprint (\"The original tuple 1 : \" + str(test_tup1))\nprint (\"The original tuple 2 : \" + str(test_tup2))\nprint (\"The element division tuple : \" + str(division_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\tlist2 = []\n\tlist3 = []\n\tfor i in range(L):\n\t\tlist2.append(list1[i])\n\tfor i in range(L, len(list1)):\n\t\tlist3.append(list1[i])\n\treturn list2, list3\n\nprint(split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3))<｜end▁of▁sentence｜>"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\td3={}\n\tfor i in d1:\n\t\td3[i]=d1[i]\n\tfor i in d2:\n\t\td3[i]=d2[i]\n\treturn d3\n\nd1={'a':1,'b':2,'c':3}\nd2={'d':4,'e':5,'f':6}\nprint(merge_dict(d1,d2))<｜end▁of▁sentence｜>"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\td_age = h_age * 7\n\treturn d_age\n\nprint(dog_age(10))<｜end▁of▁sentence｜>"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t\"\"\"\n\t>>> list_split(['a','b','c','d','e','f','g','h','i'], 3)\n\t[['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']]\n\t\"\"\"\n\treturn [S[i::step] for i in range(step)]\n\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\tlateralsurface_cube = 4*l*l\n\treturn lateralsurface_cube\n\nl = int(input(\"Enter the length of the cube: \"))\nprint(\"Lateral surface area of the cube is: \",lateralsurface_cube(l))<｜end▁of▁sentence｜>"}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum = sum + (2*i - 1)**2\n\treturn sum\n\nn = int(input(\"Enter the number: \"))\nprint(square_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\"\"\"\n\tFind the n'th star number.\n\t\"\"\"\n\tstar_num = 0\n\twhile n > 0:\n\t\tstar_num += 1\n\t\tif is_star_num(star_num):\n\t\t\tn -= 1\n\treturn star_num\n\ndef is_star_num(n):\n\t\"\"\"\n\tCheck if a number is a star number.\n\t\"\"\"\n\twhile n > 0:\n\t\tif n % 10 == 6:\n\t\t\treturn True\n\t\tn //= 10\n\treturn False\n\nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\tprint(ord(k))\n\nascii_value('a')<｜end▁of▁sentence｜>"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\tsum=0\n\tfor i in range(n):\n\t\tif i%2==0 and arr[i]%2==0:\n\t\t\tsum+=arr[i]\n\treturn sum\n\nn=int(input())\narr=list(map(int,input().split()))\nprint(sum_even_and_even_index(arr,n))<｜end▁of▁sentence｜>"}
{"ID": 634, "source": "MBPP:271", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tsum = sum + (2 * i)**5\n\treturn sum\nn = 5\nprint(even_Power_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 635, "source": "MBPP:272", "prompt": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\n\"\"\"\ndef rear_extract(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tres.append(i[-1])\n\treturn res\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(rear_extract(test_list))<｜end▁of▁sentence｜>"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\tres = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n\treturn res\n\ntest_tup1 = (10, 4, 5)\ntest_tup2 = (2, 5, 18)\nprint (\"The tuple after subtration is : \" + str(substract_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\tsum = 0\n\tfor i in range(0, n + 1): \n\t\tsum = sum + binomialCoeff(n, i) \n\treturn sum\n\ndef binomialCoeff(n, k): \n\tres = 1\n\tif (k > n - k): \n\t\tk = n - k \n\tfor i in range(0 , k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\nn = 5\nprint(\"Sum of even index binomial coefficients is\", \n\teven_binomial_Coeff_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\tpi = 3.14\n\tvolume = pi * r**2 * h\n\treturn volume\n\nprint(volume_cylinder(2,3))<｜end▁of▁sentence｜>"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\tnew_dict = {}\n\tfor key,value in dict.items():\n\t\tif value > n:\n\t\t\tnew_dict[key] = value\n\treturn new_dict\n\ndict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\nprint(dict_filter(dict,3))<｜end▁of▁sentence｜>"}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t\"\"\"\n\tWrite a function to find the element count that occurs before the record in the given tuple.\n\t\"\"\"\n\tres = []\n\tfor ele in test_tup:\n\t\tres.append(test_tup.index(ele))\n\treturn res\n\nprint(count_first_elements((1, 3, 5, 7, 9, 11, 13, 15, 17, 19)))<｜end▁of▁sentence｜>"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\"\"\"\n\tFunction to check if a number is decagonal or not.\n\t\"\"\"\n\tx = 1\n\twhile True:\n\t\tx = (x * (3 * x - 1)) / 2\n\t\tif x == n:\n\t\t\treturn True\n\t\telif x > n:\n\t\t\treturn False\n\ndef decagonal_num(n):\n\t\"\"\"\n\tFunction to find the nth decagonal number.\n\t\"\"\"\n\treturn (n * (3 * n - 1)) / 2\n\ndef main():\n\t\"\"\"\n\tMain function to find the nth decagonal number.\n\t\"\"\"\n\tn = int(input(\"Enter the value of n: \"))\n\tprint(\"The nth decagonal number is: \", decagonal_num(n))\n\nif __name__ == \"__main__\":\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 643, "source": "MBPP:280", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search an element in the given array by using sequential search.\n\"\"\"\ndef sequential_search(dlist, item):\n\tpos = 0\n\tfound = False\n\twhile pos < len(dlist) and not found:\n\t\tif dlist[pos] == item:\n\t\t\tfound = True\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn found\n\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\n\n\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found\n\t\nprint(binary_search([1,2,3,5,8], 6))\nprint(binary_search([1,2,3,5,8], 5))\n\n\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search_rec(item_list,item):\n\tif len(item_list) == 0:\n\t\treturn False\n\telse:\n\t\tmid = len(item_list)//2\n\t\tif item_list[mid]==item:\n\t\t\treturn True\n\t\telse:\n\t\t\tif item<item_list[mid]:\n\t\t\t\treturn binary_search_rec(item_list[:mid],item)\n\t\t\telse:\n\t\t\t\treturn binary_search_rec(item_list[mid+1:],item)\n\treturn False\n\nprint(binary_search_rec([1,2,3,5,8], 6))\nprint(binary_search_rec([1,2,3,5,8], 5))<｜end▁of▁sentence｜>"}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\tflag = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\tif flag == 1:\n\t\treturn False\n\telse:\n\t\treturn True\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(all_unique(test_list))<｜end▁of▁sentence｜>"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\tsub_list = list(map(lambda x,y:x-y,nums1,nums2))\n\treturn sub_list\n\nnums1 = [1,2,3,4,5]\nnums2 = [6,7,8,9,10]\nprint(sub_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\tn = str(n) \n\tfor i in range(0, len(n)): \n\t\tcount = n.count(n[i]) \n\t\tdigit = int(n[i]) \n\t\tif count > digit: \n\t\t\treturn False\n\treturn True\nn = int(input(\"Enter the number: \"))\nif validate(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t\"\"\"\n\tThis function checks whether all items of a list are equal to a given string.\n\t\"\"\"\n\tresult = all(x == element for x in list)\n\treturn result\n\n\nlist = ['a','a','a','a','a']\nelement = 'a'\nprint(check_element(list,element))\n\nlist = ['a','a','a','a','b']\nelement = 'a'\nprint(check_element(list,element))<｜end▁of▁sentence｜>"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\tpattern = 'ab{2,3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"aabbbbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ab\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\tpattern = 'ab{3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"ababbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_end_b(text):\n\tpattern = 'ab*?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_anything_end_b(\"ac\"))\nprint(text_match_anything_end_b(\"abc\"))\nprint(text_match_anything_end_b(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_beginning(text):\n\tpattern = '^\\w+'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_beginning(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_beginning(\" The quick brown fox jumps over"}
{"ID": 649, "source": "MBPP:286", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\ti = 0\n\twhile (i < n * k): \n\t\tmax_ending_here = max_ending_here + a[i % n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\t\ti += 1\n\treturn max_so_far \n\na = [10, 20, -30, -1] \nn = len(a) \nk = 3\nprint(\"Maximum contiguous sum is\", \n\t\t\t\t\tmax_sub_array_sum_repeated(a, n, k))<｜end▁of▁sentence｜>"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum = sum + (2 * i)**2\n\treturn sum\n\nn = int(input(\"Enter the number: \"))\nprint(square_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\tcount = 0\n\tfor i in range(N):\n\t\tif arr[i] % P == i:\n\t\t\tcount += 1\n\treturn count\n\n\nif __name__ == \"__main__\":\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tN = len(arr)\n\tP = 17\n\tprint(modular_inverse(arr, N, P))<｜end▁of▁sentence｜>"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\tcount = 0\n\tfor i in range(1, N + 1): \n\t\tif (i % 400 == 0 or ((i % 4 == 0) and (i % 100 != 0))): \n\t\t\tcount += 1\n\treturn count \nN = 2020\nprint(odd_Days(N))<｜end▁of▁sentence｜>"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\tmax=len(list1[0])\n\tlist2=[]\n\tfor i in list1:\n\t\tif len(i)>max:\n\t\t\tmax=len(i)\n\tfor i in list1:\n\t\tif len(i)==max:\n\t\t\tlist2.append(i)\n\treturn list2\n\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))<｜end▁of▁sentence｜>"}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\ttotal = k \n\tmod = 1000000007\n\n\tfor i in range(1, n): \n\t\tsame = diff = total \n\t\ttotal = (same + diff) * (k - 1) \n\t\ttotal = total % mod \n\t\n\treturn total \n\nn = 3\nk = 2\nprint(count_no_of_ways(n, k))<｜end▁of▁sentence｜>"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\tq=n//m\n\treturn q\nn=int(input())\nm=int(input())\nprint(find(n,m))<｜end▁of▁sentence｜>"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t\"\"\"\n\t>>> otherside_rightangle(3,4)\n\t5.0\n\t>>> otherside_rightangle(12,5)\n\t13.0\n\t\"\"\"\n\timport math\n\tx = math.sqrt(w**2 + h**2)\n\treturn x\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in listval:\n\t\tif i > max_val:\n\t\t\tmax_val = i\n\treturn max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div(8))\nprint(sum_div(12))<｜end▁of▁sentence｜>"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", \n\tget_Inv_Count(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t\"\"\"\n\tFlatten a given nested list structure.\n\t\"\"\"\n\tflat_list = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tflat_list.extend(flatten_list(item))\n\t\telse:\n\t\t\tflat_list.append(item)\n\treturn flat_list\n\n\nif __name__ == '__main__':\n\tlist1 = [1, [2, 3], [4, [5, 6, [7, 8, [9, 10]]]]]\n\tprint(flatten_list(list1))<｜end▁of▁sentence｜>"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\tl3 = []\n\tfor i in l1:\n\t\tif i in l2:\n\t\t\tl3.append(i)\n\treturn l3\n\nl1 = [1,2,3,4,5,6]\nl2 = [4,5,6,7,8,9]\nprint(intersection_nested_lists(l1, l2))<｜end▁of▁sentence｜>"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t\"\"\"\n\t:param stdata: list of tuples\n\t:return: max aggregate\n\t\"\"\"\n\tmax_aggr = 0\n\tfor i in stdata:\n\t\taggr = sum(i[1:])\n\t\tif aggr > max_aggr:\n\t\t\tmax_aggr = aggr\n\treturn max_aggr\n\n\nstdata = [('Ram', 72, 85, 73), ('Anuj', 82, 75, 75), ('Ravi', 79, 81, 88), ('Suhas', 75, 84, 85)]\nprint(max_aggregate(stdata))<｜end▁of▁sentence｜>"}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 1\n\tdp[1] = 2\n\tfor i in range(2, n + 1): \n\t\tdp[i] = dp[i - 1] + dp[i - 2] \n\treturn dp[n] \n\nn = int(input())\nprint(count_binary_seq(n))<｜end▁of▁sentence｜>"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t\"\"\"\n\t>>> dict_depth({1: 1, 2: {2: 2, 3: {3: 3, 4: 4}}})\n\t3\n\t>>> dict_depth({1: 1, 2: {2: 2, 3: {3: 3, 4: 4}}, 5: 5})\n\t3\n\t>>> dict_depth({1: 1, 2: {2: 2, 3: {3: 3, 4: 4}}, 5: 5, 6: {6: 6, 7: {7: 7, 8: 8}}} )\n\t4\n\t\"\"\"\n\tdepth = 1\n\tfor key in d:\n\t\tif type(d[key]) == dict:\n\t\t\tdepth = max(depth, 1 + dict_depth(d[key]))\n\treturn depth\n\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\tk = int(math.log(n, 2)) \n\treturn k \nn = 273\nprint(set_Bit_Number(n))<｜end▁of▁sentence｜>"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i]>a[j]:\n\t\t\t\tcount+=1\n\treturn count\n\ndef main():\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tb=list(map(int,input().split()))\n\tx=solve(a,n)\n\ty=solve(b,n)\n\tif x==y:\n\t\tprint(\"yes\")\n\telse:\n\t\tprint(\"no\")\nmain()<｜end▁of▁sentence｜>"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t\n\tfor i in range(rotations, rotations + index) : \n\t\tindex = ranges[i] \n\treturn arr[index] \n\narr = [1, 2, 3, 4, 5] \n\nranges = [3, 4, 0, 1, 2] \n\nrotations = 2\n\nindex = 1\n\nprint(find_Element(arr, ranges, rotations, index))<｜end▁of▁sentence｜>"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\tlst = []\n\tfor word in words:\n\t\tif word.startswith('p'):\n\t\t\tlst.append(word)\n\treturn lst\n\nwords = ['python', 'programming', 'pyscho', 'pneumonoultramicroscopicsilicovolcanoconiosis']\nprint(start_withp(words))<｜end▁of▁sentence｜>"}
{"ID": 669, "source": "MBPP:306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\n\tmax_sum = 0\n\tfor i in range(index, k):\n\t\tsum = 0\n\t\tfor j in range(index, i):\n\t\t\tif a[j] < a[i]:\n\t\t\t\tsum += a[j]\n\t\tmax_sum = max(max_sum, sum)\n\treturn max_sum\n\n\nif __name__ == \"__main__\":\n\ta = [1, 101, 2, 3, 100, 4, 5]\n\tn = len(a)\n\tindex = 4\n\tk = 6\n\tprint(max_sum_increasing_subseq(a, n, index, k))<｜end▁of▁sentence｜>"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\"\"\"\n\t:param tuplex: tuple\n\t:param m: int\n\t:param n: int\n\t:return: tuple\n\t\"\"\"\n\treturn tuplex[m:n]\n\ntuplex = (2, 4, 3, 5, 4, 6, 7, 8, 6, 1)\nprint(colon_tuplex(tuplex,2,5))<｜end▁of▁sentence｜>"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\tnums1.sort()\n\tnums2.sort()\n\tresult = []\n\ti = 0\n\twhile i < N:\n\t\tresult.append(nums1[-1] * nums2[-1])\n\t\tnums1.pop()\n\t\tnums2.pop()\n\t\ti += 1\n\treturn result\n\nprint(large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))<｜end▁of▁sentence｜>"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\"\"\"\n\tThis function finds the maximum of two numbers.\n\t\"\"\"\n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\tlist1 = list(str1)\n\ttuple1 = tuple(list1)\n\treturn tuple1\n\nprint(string_to_tuple(\"python\"))<｜end▁of▁sentence｜>"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\n\t# if all bits of 'n' are set \n\tif (n == 0): \n\t\treturn n \n\n\t# position of first set bit \n\tmsb = 0\n\tn = n // 2\n\n\twhile (n != 0): \n\t\tn = n // 2\n\t\tmsb += 1\n\n\t# a number with all bits set \n\t# except the msb \n\tmask = (1 << msb) \n\n\t# set the msb bit \n\tn = n ^ mask \n\n\treturn n \n\n# Driver code \nn = 21\nprint(set_left_most_unset_bit(n))<｜end▁of▁sentence｜>"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\tpi = 3.14\n\tvolume = (pi*r*r*h)/3\n\treturn volume\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\nprint(\"The volume of the cone is: \", volume_cone(r,h))<｜end▁of▁sentence｜>"}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\tprint(\"Positive numbers in the list are: \")\n\tfor i in list1:\n\t\tif i>0:\n\t\t\tprint(i)\n\nlist1=[1,2,3,-4,-5,-6,7,8,9]\npos_nos(list1)<｜end▁of▁sentence｜>"}
{"ID": 677, "source": "MBPP:314", "prompt": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \n\tincl = 0\n\texcl = 0\n\t\n\tfor i in range(n) : \n\t\tnew_excl = excl if excl>incl else incl \n\t\tincl = excl + grid[0][i] \n\t\texcl = new_excl \n\t\n\treturn (excl if excl>incl else incl) \n\ngrid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]] \nn = len(grid[0]) \nprint(max_sum_rectangular_grid(grid, n))<｜end▁of▁sentence｜>"}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\tlength = len(str) \n\tcount = 0\n\tcur_len = 0\n\tmax_len = 0\n\ti = 0\n\twhile i < length: \n\t\tif str[i] != ' ': \n\t\t\tcur_len += 1\n\t\t\ti += 1\n\t\telse: \n\t\t\tif cur_len % 2 == 0: \n\t\t\t\tmax_len = max(max_len, cur_len) \n\t\t\tcur_len = 0\n\t\t\ti += 1\n\treturn max_len \n\nstr = input(\"Enter the string: \")\nprint(\"Maximum length of even word is: \", find_Max_Len_Even(str))<｜end▁of▁sentence｜>"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\tlow, high = 0, len(A) - 1\n\tresult = -1\n\twhile low <= high:\n\t\tmid = low + (high - low) // 2\n\t\tif x == A[mid]:\n\t\t\tresult = mid\n\t\t\tlow = mid + 1\n\t\telif x < A[mid]:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn result\n\n\nif __name__ == '__main__':\n\tA = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\n\tx = 5\n\tprint(find_last_occurrence(A, x))<｜end▁of▁sentence｜>"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t\"\"\"\n\t>>> modified_encode([1, 1, 1, 1, 2, 3, 3])\n\t[[4, 1], 2, [2, 3]]\n\t\"\"\"\n\tresult = []\n\tcount = 1\n\tfor i in range(len(alist) - 1):\n\t\tif alist[i] == alist[i + 1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tif count > 1:\n\t\t\t\tresult.append([count, alist[i]])\n\t\t\telse:\n\t\t\t\tresult.append(alist[i])\n\t\t\tcount = 1\n\tif count > 1:\n\t\tresult.append([count, alist[-1]])\n\telse:\n\t\tresult.append(alist[-1])\n\treturn result\n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\ta = 0\n\twhile (a * a * a <= s): \n\t\tb = 0\n\t\twhile (a * a * a + b * b * b <= s): \n\t\t\tc = 0\n\t\t\twhile (a * a * a + b * b * b + c * c * c <= s): \n\t\t\t\tif (a * a * a + b * b * b + c * c * c == s): \n\t\t\t\t\treturn a * b * c \n\t\t\t\tc += 1\n\t\t\tb += 1\n\t\ta += 1\n\treturn -1\ns = int(input())\nprint(max_volume(s))<｜end▁of▁sentence｜>"}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\tpattern = r\"\\b\\w{5}\\b\"\n\tresult = re.findall(pattern, text)\n\treturn result\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_long_word(text))<｜end▁of▁sentence｜>"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\tsum_of_squares = 0\n\tsquare_of_sum = 0\n\tfor i in range(1,n+1):\n\t\tsum_of_squares += i**2\n\t\tsquare_of_sum += i\n\tsquare_of_sum = square_of_sum**2\n\treturn square_of_sum - sum_of_squares\n\nprint(sum_difference(10))<｜end▁of▁sentence｜>"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\tn = int(s) \n\twhile True: \n\t\tn += 1\n\t\tif set(str(n)) == set(s): \n\t\t\treturn n \nprint(find_demlo(\"123\"))<｜end▁of▁sentence｜>"}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\tmin_value = min(list1)\n\tmin_index = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min_value:\n\t\t\tmin_index.append(i)\n\treturn min_index\n\nprint(position_min([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\ndef re_arrange_2(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_3(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_4(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t\"\"\"\n\tThis function takes a tuple as input and returns the sum of alternate elements in the tuple.\n\t\"\"\"\n\tsum = 0\n\tfor i in range(0, len(test_tuple), 2):\n\t\tsum += test_tuple[i]\n\treturn sum\n\n\ntest_tuple = (1, 2, 3, 4, 5, 6)\nprint(sum_of_alternates(test_tuple))<｜end▁of▁sentence｜>"}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\tdp = [0, 1, 2, 3]\n\tfor i in range(4, n+1):\n\t\tdp.append(i)\n\t\tfor x in range(1, i+1):\n\t\t\ttemp = x*x\n\t\t\tif temp > i:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tdp[i] = min(dp[i], 1+dp[i-temp])\n\treturn dp[n]\n\nn = int(input())\nprint(get_Min_Squares(n))<｜end▁of▁sentence｜>"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\tres = {}\n\tfor sub in test_list:\n\t\tsub = sub.split()\n\t\tfor i in sub:\n\t\t\tres[i] = res.get(i, 0) + 1\n\tres = sorted(res.items(), key = lambda x: x[1], reverse = True)\n\treturn res\n\ntest_list = [\"geek for geek\", \"for geek geek contribution\"]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The word with most number of occurrences is : \" + str(most_occurrences(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\"\"\"\n\tThis function checks if the triangle is isosceles or not.\n\t\"\"\"\n\tif x == y or y == z or z == x:\n\t\tprint(\"The triangle is isosceles.\")\n\telse:\n\t\tprint(\"The triangle is not isosceles.\")\n\ncheck_isosceles(1,2,3)\ncheck_isosceles(1,1,1)<｜end▁of▁sentence｜>"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\tlist2=[]\n\tfor i in range(m,n):\n\t\tlist2.append(list1[i])\n\tfor i in range(0,m):\n\t\tlist2.append(list1[i])\n\treturn list2\n\nlist1=[1,2,3,4,5,6,7,8,9]\nm=3\nn=6\nprint(rotate_left(list1,m,n))<｜end▁of▁sentence｜>"}
{"ID": 692, "source": "MBPP:329", "prompt": "\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count negative numbers in a list.\n\"\"\"\ndef neg_count(list):\n\tcount=0\n\tfor i in list:\n\t\tif i<0:\n\t\t\tcount+=1\n\treturn count\n\nlist=[1,-2,3,-4,5,-6,7,-8,9,-10]\nprint(neg_count(list))<｜end▁of▁sentence｜>"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\timport re\n\tpattern = r\"\\b\\w{3,5}\\b\"\n\tresult = re.findall(pattern, text)\n\treturn result\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_char(text))<｜end▁of▁sentence｜>"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count \n\nn = 9\nprint(count_unset_bits(n))<｜end▁of▁sentence｜>"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\tdict = {}\n\tfor n in str1:\n\t\tkeys = dict.keys()\n\t\tif n in keys:\n\t\t\tdict[n] += 1\n\t\telse:\n\t\t\tdict[n] = 1\n\treturn dict\nprint(char_frequency('google.com'))<｜end▁of▁sentence｜>"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\tsub_li.sort(key = lambda x: x[1]) \n\treturn sub_li \n\nsub_li =[['rishav', 10], ['akash', 5], ['ram', 20], ['gaurav', 15]] \nprint(Sort(sub_li))<｜end▁of▁sentence｜>"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t\n\tif (a + b <= c) or (a + c <= b) or (b + c <= a) : \n\t\treturn False\n\telse: \n\t\treturn True\t\t\n\na = int(input(\"Enter the value of a = \"))\nb = int(input(\"Enter the value of b = \"))\nc = int(input(\"Enter the value of c = \"))\n\nif check_Validity(a, b, c): \n\tprint(\"Valid Triangle\")  \nelse: \n\tprint(\"Invalid Triangle\")<｜end▁of▁sentence｜>"}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\tsum=0\n\ti=0\n\twhile i<n:\n\t\tsum=sum+a\n\t\ta=a+d\n\t\ti=i+1\n\treturn sum\na=int(input(\"Enter the first term of AP: \"))\nn=int(input(\"Enter the number of terms: \"))\nd=int(input(\"Enter the common difference: \"))\nprint(\"Sum of AP: \",ap_sum(a,n,d))<｜end▁of▁sentence｜>"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\tmonthname = monthname1.lower()\n\tif monthname == \"february\":\n\t\tprint(\"28 days\")\n\telse:\n\t\tprint(\"not 28 days\")\ncheck_monthnum(\"february\")<｜end▁of▁sentence｜>"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t\"\"\"\n\t\tReturns the matched word if it is at the end of a string.\n\t\"\"\"\n\tpattern = '\\\\w+\\\\S*$'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog. \"))\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog \"))<｜end▁of▁sentence｜>"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tresult = 0; \n\tn = len(s); \n\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (s[i] == s[j]): \n\t\t\t\tresult = result + 1\n\treturn result \n\ns = \"abcab\"\nprint(count_Substring_With_Equal_Ends(s))<｜end▁of▁sentence｜>"}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisor=0\n\tmax_divisor=0\n\tfor i in range(x,y+1):\n\t\tcount=0\n\t\tfor j in range(1,i+1):\n\t\t\tif i%j==0:\n\t\t\t\tcount+=1\n\t\tif count>divisor:\n\t\t\tdivisor=count\n\t\t\tmax_divisor=i\n\treturn max_divisor\n\nprint(find_Divisor(1,10))<｜end▁of▁sentence｜>"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\tlst.sort()\n\treturn lst[0] + lst[1] + lst[2]\n\nprint(sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7]))\nprint(sum_three_smallest_nums([2, 9, 6, -1]))\nprint(sum_three_smallest_nums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587]))\nprint(sum_three_smallest_nums([3683, 2902, 3951, -475, 1617, -2385]))<｜end▁of▁sentence｜>"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t\"\"\"\n\t>>> set_to_tuple({1, 2, 3})\n\t((1, 2, 3),)\n\t>>> set_to_tuple({1, 2, 3, 4})\n\t((1, 2, 3, 4),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5})\n\t((1, 2, 3, 4, 5),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6})\n\t((1, 2, 3, 4, 5, 6),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7})\n\t((1, 2, 3, 4, 5, 6, 7),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8})\n\t((1, 2, 3, 4, 5, 6, 7, 8),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9})\n\t((1, 2,3, 4, 5, 6, 7, 8, 9),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),)\n\t>>> set_to_tuple({1, 2, 3, 4"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\tpass\n\n\nif __name__ == \"__main__\":\n\tlist1 = [4, 10, 15, 24, 26]\n\tlist2 = [0, 9, 12, 20]\n\tlist3 = [5, 18, 22, 30]\n\tprint(find_minimum_range(list1, list2, list3))<｜end▁of▁sentence｜>"}
{"ID": 706, "source": "MBPP:343", "prompt": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\n\"\"\"\ndef dig_let(s):\n\td=0\n\tl=0\n\tfor i in s:\n\t\tif i.isdigit():\n\t\t\td+=1\n\t\telif i.isalpha():\n\t\t\tl+=1\n\treturn d,l\n\ns=input(\"Enter a string: \")\nd,l=dig_let(s)\nprint(\"Number of digits: \",d)\nprint(\"Number of letters: \",l)<｜end▁of▁sentence｜>"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\tcount = 0\n\tfor i in range(n,m+1): \n\t\tif (i % 2 != 0): \n\t\t\tcount += 1\n\treturn count \nn = 10\nm = 20\nprint(\"Count of odd factors is\",count_Odd_Squares(n, m))<｜end▁of▁sentence｜>"}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\tresult = [j-i for i, j in zip(nums[:-1], nums[1:])]\n\treturn result\n\nnums = [1, 1, 3, 3, 4, 5, 6, 7]\nprint(\"Original list:\")\nprint(nums)\nprint(\"Difference between consecutive numbers of the said list:\")\nprint(diff_consecutivenums(nums))\n\n\"\"\"\nOriginal list:\n[1, 1, 3, 3, 4, 5, 6, 7]\nDifference between consecutive numbers of the said list:\n[0, 2, 0, 1, 1, 1, 1]\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\n\t# Base cases \n\tif n == 0 and k == 0: \n\t\treturn 1\n\tif k == 0: \n\t\treturn 0\n\n\t# Recurrence relation \n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k) \n\n# Driver Code \nn = 4\nk = 3\nprint(\"Zigzag value : \", zigzag(n, k))<｜end▁of▁sentence｜>"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\n\tif(n < m): \n\t\ttemp = m \n\t\tm = n \n\t\tn = temp \n\t\t\n\treturn ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2)) \n\nm = 4\nn = 3\nprint(\"Count of squares is \",int(count_Squares(m, n)))<｜end▁of▁sentence｜>"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\tN = len(M) \n\tdp = [[0 for i in range(N)] for j in range(N)] \n\tfor i in range(N): \n\t\tdp[i][i] = 1\n\tfor L in range(2, N + 1): \n\t\tfor i in range(N - L + 1): \n\t\t\tj = i + L - 1\n\t\t\tfor k in range(i, j + 1): \n\t\t\t\tif M[k] == 0: \n\t\t\t\t\tdp[i][j] += dp[i][k - 1] * dp[k + 1][j] \n\t\t\t\telse: \n\t\t\t\t\tdp[i][j] += dp[i][k - 1] * dp[k + 1][j] \n\treturn dp[0][N - 1] \nM = [0, 0, 0, 0, 0] \nprint(find_ways(M))<｜end▁of▁sentence｜>"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\tb = set(string)\n\ts = {'0', '1'}\n\tif s == b or b == {'0'} or b == {'1'}:\n\t\tprint(\"Yes\")\n\telse :\n\t\tprint(\"No\")\n\t\t\nstring = \"101010000111\"\ncheck(string)<｜end▁of▁sentence｜>"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\tn = len(s) \n\tdistinct_count = 0\n\tcount = [0] * 256\n\tfor i in range(n) : \n\t\tif (count[ord(s[i])] == 0) : \n\t\t\tdistinct_count += 1\n\t\tcount[ord(s[i])] += 1\n\tmin_len = n \n\tfor i in range(256) : \n\t\tif (count[i] > 0) : \n\t\t\tmin_len = min(min_len, count[i]) \n\treturn (n - min_len) \ns = input()\nprint(minimum_Length(s))<｜end▁of▁sentence｜>"}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\tcount = {} \n\tfor i in range(0, n): \n\t\tif(arr[i] in count.keys()): \n\t\t\tcount[arr[i]] += 1\n\t\telse: \n\t\t\tcount[arr[i]] = 1\n\tfor i in range(0, n): \n\t\tif (count[arr[i]] == k): \n\t\t\treturn arr[i] \n\treturn -1\n\narr = [1, 7, 4, 3, 4, 8, 7] \nn = len(arr) \nk = 2\nprint(first_Element(arr, n, k))<｜end▁of▁sentence｜>"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\tchars = set()\n\tfor char in str:\n\t\tif char in chars:\n\t\t\treturn False\n\t\tchars.add(char)\n\treturn True\nstr = input(\"Enter the string: \")\nif (unique_Characters(str)):\n\tprint(\"The string\", str, \"has all unique characters\")\nelse:\n\tprint(\"The string\", str, \"has duplicate characters\")<｜end▁of▁sentence｜>"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\tresult = [i.pop(n) for i in list1]\n\treturn result\n\nlist1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nn = 0\nprint(\"Original list:\")\nprint(list1)\nprint(\"\\nAfter removing 1st column:\")\nprint(remove_column(list1, n))<｜end▁of▁sentence｜>"}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\ttn = a + (n-1)*d\n\treturn tn\n\na = int(input(\"Enter the first term of AP: \"))\nn = int(input(\"Enter the term number: \"))\nd = int(input(\"Enter the common difference: \"))\nprint(\"The tn term of AP is: \",tn_ap(a,n,d))<｜end▁of▁sentence｜>"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\tcount = 0\n\tfor i in range(1, radius + 1):\n\t\tfor j in range(1, radius + 1):\n\t\t\tif i * i + j * j <= radius * radius:\n\t\t\t\tcount += 1\n\treturn count\n\nradius = int(input(\"Enter the radius of the circle: \"))\nprint(\"Number of rectangles in the circle:\", count_Rectangles(radius))<｜end▁of▁sentence｜>"}
{"ID": 719, "source": "MBPP:356", "prompt": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\n\"\"\"\ndef find_angle(a,b):\n\t\"\"\"\n\tThis function takes two angles of a triangle and returns the third angle.\n\t\"\"\"\n\treturn 180-(a+b)\n\nif __name__ == '__main__':\n\ta = int(input(\"Enter the first angle: \"))\n\tb = int(input(\"Enter the second angle: \"))\n\tprint(\"The third angle is: \", find_angle(a,b))<｜end▁of▁sentence｜>"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tres.append(max(i))\n\treturn res\n\ntest_list = [(3, 5, 6), (2, 4), (10, 7, 8, 11), (7,)]\nprint(\"The original list is : \" + str(test_list))\nprint(\"The maximum element of each tuple list : \" + str(find_max(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\tresult = map(lambda x,y:x%y,nums1,nums2)\n\treturn list(result)\n\nnums1 = [10,20,30,40,50]\nnums2 = [5,10,15,20,25]\nprint(moddiv_list(nums1,nums2))<｜end▁of▁sentence｜>"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b**2 - 4*a*c \n\tif d > 0: \n\t\tprint(\"Real and Distinct Roots\") \n\telif d == 0: \n\t\tprint(\"Real and Equal Roots\") \n\telse: \n\t\tprint(\"Complex Roots\") \n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nCheck_Solution(a,b,c)<｜end▁of▁sentence｜>"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\tcarol_nums = [1, 2, 3]\n\t\n\tfor i in range(3, n):\n\t\tcarol_nums.append(carol_nums[i-1] + carol_nums[i-2] + carol_nums[i-3])\n\t\n\treturn carol_nums[n-1]\n\nprint(get_carol(6))<｜end▁of▁sentence｜>"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\tres = [ele for ele in list1 if ele != []]\n\treturn res\n\nlist1 = [5, 6, [], 3, [], [], 9]\nprint(remove_empty(list1))<｜end▁of▁sentence｜>"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\tmax_count = 0\n\tmax_item = None\n\tcount = {}\n\tfor i in nums:\n\t\tif i not in count:\n\t\t\tcount[i] = 1\n\t\telse:\n\t\t\tcount[i] += 1\n\t\tif count[i] > max_count:\n\t\t\tmax_count = count[i]\n\t\t\tmax_item = i\n\treturn max_item\n\nprint(max_occurrences([1, 3, 2, 1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, "}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\tres = [sub + K for sub in test_list]\n\treturn res\n\ntest_list = [1, 2, 3, 4, 5]\nK = 6\nprint(\"The original list is : \" + str(test_list))\nprint(\"The value of K is : \" + str(K))\nres = add_K_element(test_list, K)\nprint(\"The list after adding K to each element : \" + str(res))<｜end▁of▁sentence｜>"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t\n\treturn min(get_flip_with_starting_charcter(str, '0'), \n\t\t\tget_flip_with_starting_charcter(str, '1')) \n\ndef get_flip_with_starting_charcter(str, expected): \n\n\tflip_count=0\n\tfor i in range(len( str)): \n\t\t\n\t\tif (str[i] != expected): \n\t\t\tflip_count+=1\n\n\t\texpected = flip(expected) \n\treturn flip_count \n\ndef flip(ch): \n\treturn '1' if (ch == '0') else '0' \n\n\nif __name__ == \"__main__\":\n    str = \"0001010111\"\n    print(min_flip_to_make_string_alternate(str))<｜end▁of▁sentence｜>"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\tcount=0\n\twhile n>0:\n\t\tcount+=1\n\t\tn=n//10\n\treturn count\n\nn=int(input(\"Enter a number: \"))\nprint(\"Number of digits in\",n,\"is\",count_Digit(n))<｜end▁of▁sentence｜>"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\tmax_product = list_nums[0] * list_nums[1]\n\tfor i in range(1,len(list_nums)-1):\n\t\tproduct = list_nums[i] * list_nums[i+1]\n\t\tif product > max_product:\n\t\t\tmax_product = product\n\treturn max_product\n\nnums = [1,2,3,4,5,6]\nprint(\"Original list numbers:\")\nprint(nums)\nprint(\"Largest product of pair of adjacent numbers from the said list of integers:\")\nprint(adjacent_num_product(nums))\nnums = [1,2,3,4,5]\nprint(\"\\nOriginal list numbers:\")\nprint(nums)\nprint(\"Largest product of pair of adjacent numbers from the said list of integers:\")\nprint(adjacent_num_product(nums))\nnums = [2,3]\nprint(\"\\nOriginal list numbers:\")\nprint(nums)\nprint(\"Largest product of pair of adjacent numbers from the said list of integers:\")\nprint(adjacent_num_product(nums))<｜end▁of▁sentence｜>"}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t\"\"\"\n\t:type root: TreeNode\n\t:rtype: bool\n\t\"\"\"\n\tif root is None:\n\t\treturn True\n\tleft_height = get_height(root.left)\n\tright_height = get_height(root.right)\n\tif abs(left_height - right_height) > 1:\n\t\treturn False\n\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n\tif root is None:\n\t\treturn 0\n\treturn 1 + max(get_height(root.left), get_height(root.right))<｜end▁of▁sentence｜>"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t\"\"\"\n\t:type test_tup: tuple\n\t:type N: int\n\t:rtype: tuple\n\t\"\"\"\n\tres = ()\n\tfor i in range(N):\n\t\tres += test_tup\n\treturn res\n\n\nif __name__ == '__main__':\n\ttest_tup = (1, 2, 3)\n\tN = 3\n\tprint(repeat_tuples(test_tup, N))<｜end▁of▁sentence｜>"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t\"\"\"\n\tThis function sorts a tuple by its float element.\n\t\"\"\"\n\treturn sorted(price, key=lambda x: float(x[1]), reverse=True)\n\nprice = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nprint(float_sort(price))<｜end▁of▁sentence｜>"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\tmid_element = left_element + (right_element - left_element) // 2\n\tif left_element > right_element:\n\t\treturn left_element\n\tif A[mid_element] == mid_element:\n\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\telse:\n\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\n\nA = [0, 1, 2, 3, 4, 5, 6]\nleft_element = 0\nright_element = len(A) - 1\nprint(smallest_missing(A, left_element, right_element))<｜end▁of▁sentence｜>"}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\timport heapq\n\theapq.heapify(nums)\n\tresult = []\n\twhile nums:\n\t\tresult.append(heapq.heappop(nums))\n\treturn result\n\nnums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nprint(heap_assending(nums))<｜end▁of▁sentence｜>"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume = l*w*h\n\treturn volume<｜end▁of▁sentence｜>"}
{"ID": 737, "source": "MBPP:374", "prompt": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\n\"\"\"\ndef permute_string(str):\n\tpermute_string_helper(\"\", str)\n\ndef permute_string_helper(prefix, str):\n\tn = len(str)\n\tif n == 0:\n\t\tprint(prefix)\n\telse:\n\t\tfor i in range(n):\n\t\t\tpermute_string_helper(prefix + str[i], str[0:i] + str[i+1:n])\n\npermute_string(\"abc\")<｜end▁of▁sentence｜>"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\ta=n%m\n\tif a<m/2:\n\t\treturn n-a\n\telse:\n\t\treturn n+m-a\n\nprint(round_num(12,5))\nprint(round_num(15,5))\nprint(round_num(16,5))\nprint(round_num(18,5))\nprint(round_num(20,5))<｜end▁of▁sentence｜>"}
{"ID": 739, "source": "MBPP:376", "prompt": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\"\"\"\ndef remove_replica(test_tup):\n\tres = []\n\tfor i in test_tup:\n\t\tif i not in res:\n\t\t\tres.append(i)\n\t\telse:\n\t\t\tres.append(\"_\")\n\treturn tuple(res)\n\ntest_tup = (1, 3, 5, 2, 3, 5, 1, 1, 3)\nprint(remove_replica(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\tcount = 0\n\tnew_s = \"\"\n\tfor i in range(len(s)) : \n\t\tif s[i] == c : \n\t\t\tcount += 1\n\t\telse : \n\t\t\tnew_s += s[i]\n\treturn new_s\n\ns = input(\"Enter the string : \")\nc = input(\"Enter the character to be removed : \")\nprint(remove_Char(s,c))<｜end▁of▁sentence｜>"}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\tnew_list = []\n\tnew_list.append(test_list[-1])\n\tfor i in range(len(test_list)-1):\n\t\tnew_list.append(test_list[i])\n\treturn new_list\n\ntest_list = [1,2,3,4,5]\nprint(move_first(test_list))<｜end▁of▁sentence｜>"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\tarea=2*(l*w+w*h+h*l)\n\treturn area\n\nl=int(input(\"Enter the length of cuboid:\"))\nw=int(input(\"Enter the width of cuboid:\"))\nh=int(input(\"Enter the height of cuboid:\"))\nprint(\"The surface area of cuboid is:\",surfacearea_cuboid(l,w,h))<｜end▁of▁sentence｜>"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t\"\"\"\n\t:param rownum: number of rows\n\t:param colnum: number of columns\n\t:return: a two-dimensional array\n\t\"\"\"\n\trowlist = []\n\tfor i in range(rownum):\n\t\trowlist.append([])\n\t\tfor j in range(colnum):\n\t\t\trowlist[i].append(j)\n\treturn rowlist\n\nprint(multi_list(3,5))<｜end▁of▁sentence｜>"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t\"\"\"\n\tFunction to sort a list of lists by a given index of the inner list.\n\t\"\"\"\n\tlist_data.sort(key=lambda x: x[index_no])\n\treturn list_data\n\n\nif __name__ == \"__main__\":\n\tlist_data = [[2, 3], [1, 4], [0, 5]]\n\tindex_no = 0\n\tprint(index_on_inner_list(list_data, index_no))<｜end▁of▁sentence｜>"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\tstart = 0\n\tend = len(A) - 1\n\twhile start <= end:\n\t\tmid = (start + end) // 2\n\t\tif A[mid] > A[mid + 1]:\n\t\t\treturn mid + 1\n\t\telif A[mid] < A[mid - 1]:\n\t\t\treturn mid\n\t\telif A[mid] < A[end]:\n\t\t\tend = mid - 1\n\t\telse:\n\t\t\tstart = mid + 1\n\treturn 0\n\n\nif __name__ == '__main__':\n\tA = [1, 2, 3, 4, 5, 6, 7]\n\tprint(find_rotation_count(A))<｜end▁of▁sentence｜>"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t\n\t# Printing number in binary \n\tprint(\"Actual number\", n, \"in binary is\", bin(n)) \n\n\t# Logic to toggle bits \n\tn = (n & 0xaaaaaaaa) | ((n & 0x55555555) << 1) \n\n\t# Printing number in binary \n\tprint(\"Toggled number\", n, \"in binary is\", bin(n)) \n\n# Driver code \nn = 10\neven_bit_toggle_number(n)<｜end▁of▁sentence｜>"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\tmin = arr[0]\n\tfor i in range(1,n):\n\t\tif arr[i] < min:\n\t\t\tmin = arr[i]\n\tcount = 0\n\tfor i in range(n):\n\t\tif arr[i] == min:\n\t\t\tcount += 1\n\treturn count\n\nn = int(input())\narr = list(map(int,input().split()))\nprint(frequency_Of_Smallest(n,arr))<｜end▁of▁sentence｜>"}
{"ID": 748, "source": "MBPP:385", "prompt": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th perrin number using recursion.\n\"\"\"\ndef get_perrin(n):\n\t\"\"\"\n\tWrite your code here\n\t\"\"\"\n\tpass\n\n\ndef main():\n\t\"\"\"\n\tTaking input from the user\n\t\"\"\"\n\tn = int(input())\n\tprint(get_perrin(n))\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\tstack = []\n\tcount = 0\n\tfor i in s:\n\t\tif i == '[':\n\t\t\tstack.append(i)\n\t\telif i == ']':\n\t\t\tif len(stack) > 0:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\tcount += 1\n\treturn count\n\ns = input()\nprint(swap_count(s))<｜end▁of▁sentence｜>"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\tN = int(N, 16) \n\tif (N % 2 == 0): \n\t\treturn \"Even\"\n\telse: \n\t\treturn \"Odd\"\n\nN = \"1A\"\nprint(even_or_odd(N))<｜end▁of▁sentence｜>"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\tres = 0; \n\tfor i in range(n, 0, -1): \n\t\tif ((i & (i - 1)) == 0): \n\t\t\tres = i; \n\t\t\tbreak; \n\treturn res; \n\nn = int(input())\nprint(highest_Power_of_2(n))<｜end▁of▁sentence｜>"}
{"ID": 752, "source": "MBPP:389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"\ndef find_lucas(n): \n\ta = 2\n\tb = 1\n\tif (n == 0): \n\t\treturn a \n\tif (n == 1): \n\t\treturn b \n\tfor i in range(2, n + 1): \n\t\tc = a + b \n\t\ta = b \n\t\tb = c \n\treturn b \nn = 9\nprint(find_lucas(n))<｜end▁of▁sentence｜>"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\tnew_list = []\n\tfor i in list:\n\t\tnew_list.append(string+i)\n\treturn new_list\n\nprint(add_string(['a','b','c'],'x'))<｜end▁of▁sentence｜>"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\tdictionary = dict(zip(l1, l2))\n\tdictionary = dict(zip(l1, dictionary.values()))\n\tdictionary = dict(zip(l1, dictionary.values()))\n\treturn dictionary\n\nl1 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nl2 = [1, 2, 3, 4, 5, 6]\nl3 = [\"Dog\", \"Cat\", \"Rat\", \"Cow\", \"Bat\", \"Rabbit\"]\nprint(convert_list_dictionary(l1, l2, l3))<｜end▁of▁sentence｜>"}
{"ID": 755, "source": "MBPP:392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"\ndef get_max_sum (n):\n\t\"\"\"\n\tReturns the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n\tif n <= 11:\n\t\treturn n\n\telse:\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nif __name__ == '__main__':\n\tprint get_max_sum(12)<｜end▁of▁sentence｜>"}
{"ID": 756, "source": "MBPP:393", "prompt": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\tmax_length = max(len(x) for x in input_list )\n\tmax_list = max(input_list, key = lambda i: len(i))\n\treturn max_list\n\nlist1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nprint(max_length_list(list1))<｜end▁of▁sentence｜>"}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t\"\"\"\n\tFunction to check if given tuple is distinct or not.\n\t\"\"\"\n\tres = True\n\ttemp = set()\n\tfor ele in test_tup:\n\t\tif ele in temp:\n\t\t\tres = False\n\t\t\tbreak\n\t\ttemp.add(ele)\n\treturn res\n\ntest_tup = (1, 4, 5, 6, 1, 4)\nprint(check_distinct(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\tchar_order = []\n\tctr = {}\n\tfor c in str1:\n\t\tif c in ctr:\n\t\t\tctr[c] += 1\n\t\telse:\n\t\t\tctr[c] = 1 \n\t\t\tchar_order.append(c)\n\tfor c in char_order:\n\t\tif ctr[c] == 1:\n\t\t\treturn c\n\treturn None\n\nprint(first_non_repeating_character('abcdef'))\nprint(first_non_repeating_character('abcabcdef'))\nprint(first_non_repeating_character('aabbcc'))<｜end▁of▁sentence｜>"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\timport re \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\tif(re.search(regex, string)): \n\t\tprint(\"Valid\") \n\telse: \n\t\tprint(\"Invalid\") \n\nif __name__ == '__main__' : \n\tstring = \"geeks\"\n\tcheck_char(string) \n\tstring = \"geek\"\n\tcheck_char(string) \n\tstring = \"gee\"\n\tcheck_char(string) \n\tstring = \"g\"\n\tcheck_char(string)<｜end▁of▁sentence｜>"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t\"\"\"\n\t>>> median_numbers(1,2,3)\n\t2\n\t>>> median_numbers(1,3,2)\n\t2\n\t>>> median_numbers(2,1,3)\n\t2\n\t>>> median_numbers(2,3,1)\n\t2\n\t>>> median_numbers(3,1,2)\n\t2\n\t>>> median_numbers(3,2,1)\n\t2\n\t\"\"\"\n\tif a > b:\n\t\tif a < c:\n\t\t\tmedian = a\n\t\telif b > c:\n\t\t\tmedian = b\n\t\telse:\n\t\t\tmedian = c\n\telse:\n\t\tif a > c:\n\t\t\tmedian = a\n\t\telif b < c:\n\t\t\tmedian = b\n\t\telse:\n\t\t\tmedian = c\n\treturn median\n\n\n\"\"\"\nWrite a function to find the median of a list of numbers.\n\"\"\"\ndef median_list(numbers):\n\t\"\"\"\n\t>>> median_list([1,2,3])\n\t2\n\t>>> median_list([1,3,2])\n\t2\n\t>>> median_list([2,1,3])\n\t2\n\t>>> median_list([2,3,1])\n\t2\n\t>>> median_list([3,1,2])\n\t2\n\t>>> median_list([3,2,1])\n\t2\n\t\"\"\"\n\tnumbers.sort()\n\tmedian = numbers[len(numbers)/2]\n\treturn median\n\n\n\"\"\"\nWrite a function to find the median of a list of numbers.\n\"\"\"\ndef median_list_2(numbers):\n\t\"\"\"\n\t>>> median_list_2([1,2,3])\n\t2\n\t>>> median_list_2([1,3,2])\n\t2\n\t>>> median_list_2([2,1,3])\n\t2\n\t>>> median_list_2([2,3,1])\n\t2\n\t>>> median_list_2([3,1,2])\n\t2\n\t>>> median_list_2([3,2,1])\n\t2\n\t\"\"\"\n\tnumbers.sort()\n\tif len(num"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\tsum = 0\n\tfor num in nums:\n\t\twhile num > 0:\n\t\t\tsum += num % 10\n\t\t\tnum = num // 10\n\treturn sum\n\nprint(sum_of_digits([12, 34, 56]))<｜end▁of▁sentence｜>"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t\"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n\tresult = ()\n\tfor i, j in zip(test_tup1, test_tup2):\n\t\tresult += (i ^ j,)\n\treturn result\n\nprint(bitwise_xor((10, 4, 8, 23, 14), (8, 4, 2, 15, 32)))<｜end▁of▁sentence｜>"}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\tres = {}\n\tfor sub in test_list:\n\t\tsub.sort()\n\t\tres[tuple(sub)] = res.get(tuple(sub), 0) + 1\n\treturn res\n\ntest_list = [(5, 6), (5, 7), (5, 6), (6, 5), (6, 7), (7, 5), (7, 6), (5, 6)]\nprint(\"The extracted frequencies : \" + str(extract_freq(test_list)))<｜end▁of▁sentence｜>"}
{"ID": 764, "source": "MBPP:401", "prompt": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\n\tres = tuple(map(sum, zip(test_tup1, test_tup2)))\n\treturn res\n\ntest_tup1 = (7, 8, 9, 1, 10, 7)\ntest_tup2 = (10, 8, 9, 1, 10, 7)\nprint(add_nested_tuples(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tC = [0 for i in range(r+1)] \n\tC[0] = 1 \n\tfor i in range(1, n+1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j-1]) % p \n\treturn C[r] \n\nn = 10\nr = 2\np = 13\nprint('Value of nCr % p is', ncr_modp(n, r, p))<｜end▁of▁sentence｜>"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\nurl = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(url) == True):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\nurl = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(url) == True):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\"\"\"\n\tThis function finds the minimum of two numbers.\n\t\"\"\"\n\tif a<b:\n\t\treturn a\n\telse:\n\t\treturn b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\tprint(tuple1 in tuplex)\n\ntuplex = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\ncheck_tuplex(tuplex,\"r\")\ncheck_tuplex(tuplex,\"e\")\ncheck_tuplex(tuplex,\"z\")<｜end▁of▁sentence｜>"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\tresult = 0\n\twhile (x): \n\t\tresult = result ^ (x & 1) \n\t\tx = x >> 1\n\treturn result \n\nx = int(input(\"Enter a number: \"))\nprint(find_Parity(x))<｜end▁of▁sentence｜>"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\tdigits = list(str(n))\n\ti = len(digits) - 1\n\twhile i > 0 and digits[i - 1] >= digits[i]:\n\t\ti -= 1\n\tif i <= 0:\n\t\treturn -1\n\tj = len(digits) - 1\n\twhile digits[j] <= digits[i - 1]:\n\t\tj -= 1\n\tdigits[i - 1], digits[j] = digits[j], digits[i - 1]\n\tdigits[i:] = digits[len(digits) - 1: i - 1: -1]\n\treturn int(''.join(digits))\n\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(2017))\nprint(rearrange_bigger(9))\nprint(rearrange_bigger(111))\nprint(rearrange_bigger(534976))<｜end▁of▁sentence｜>"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\timport heapq\n\theap = []\n\theapq.heapify(heap)\n\tfor i in range(min(k, len(nums1))):\n\t\tfor j in range(min(k, len(nums2))):\n\t\t\theapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n\tresult = []\n\tfor i in range(min(k, len(heap))):\n\t\tresult.append(heapq.heappop(heap)[1:])\n\treturn result\n\nif __name__ == '__main__':\n\tprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n\tprint(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2))\n\tprint(k_smallest_pairs([1, 2], [3], 3))<｜end▁of▁sentence｜>"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = list1[0][0] * list1[0][1]\n\tfor i in list1:\n\t\tif i[0] * i[1] < min_product:\n\t\t\tmin_product = i[0] * i[1]\n\treturn min_product\n\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))<｜end▁of▁sentence｜>"}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\tminval = listval[0]\n\tfor i in listval:\n\t\tif i < minval:\n\t\t\tminval = i\n\treturn minval\n\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\timport re\n\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\nprint(snake_to_camel('python_exercises'))\nprint(snake_to_camel('python_exercises'))\nprint(snake_to_camel('python_exercises'))<｜end▁of▁sentence｜>"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\tnew_list = []\n\tfor i in l:\n\t\tif i%2 == 0:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 776, "source": "MBPP:413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"\ndef extract_nth_element(list1, n):\n\tresult = [x[n] for x in list1]\n\treturn result\n\nlist1 = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\nprint(\"Original list:\")\nprint(list1)\nn = 0\nprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\nprint(extract_nth_element(list1, n))\nn = 2\nprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\nprint(extract_nth_element(list1, n))<｜end▁of▁sentence｜>"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\tflag=0\n\tfor i in list1:\n\t\tif i in list2:\n\t\t\tflag=1\n\t\t\tbreak\n\tif flag==1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nlist1=[1,2,3,4,5]\nlist2=[6,7,8,9]\nprint(overlapping(list1,list2))<｜end▁of▁sentence｜>"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\tn = len(arr) \n\tif n < 2: \n\t\tprint(\"No pairs exists\") \n\t\treturn\n\tx = arr[0]; y = arr[1] \n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] * arr[j] > x * y): \n\t\t\t\tx = arr[i]; y = arr[j] \n\treturn x,y \n\narr = [1, 4, 3, 6, 7, 0] \nprint(\"Max product pair is \", max_Product(arr))<｜end▁of▁sentence｜>"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\n\t# Base case \n\tif (n == 0 or n == 1): \n\t\treturn 0\n\n\t# break n recursively and return the maximum \n\t# sum obtained \n\treturn max((breakSum(n//2) + breakSum(n//3) + breakSum(n//4)), n) \n\n# Driver code \nn = 24\nprint(breakSum(n)) \n\n# This code is contributed by Anant Agarwal. \n\n\"\"\"\nTime Complexity: O(n)\nAuxiliary Space: O(n)\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\ttemp = {} \n\tfor i in Input: \n\t\tif i[0] in temp: \n\t\t\ttemp[i[0]].append(i[1]) \n\t\telse: \n\t\t\ttemp[i[0]] = [i[1]] \n\tresult = [] \n\tfor key, value in temp.items(): \n\t\tresult.append((key, *value)) \n\treturn result \nInput = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(group_tuples(Input))<｜end▁of▁sentence｜>"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\tmax_len = 0 \n\tfor i in range(len(lst)): \n\t\tif (len(lst[i]) > max_len): \n\t\t\tmax_len = len(lst[i]) \n\t\t\ttemp = lst[i] \n\tprint(temp) \nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]] \nFind_Max(lst)<｜end▁of▁sentence｜>"}
{"ID": 782, "source": "MBPP:419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\ndef round_and_sum(list1):\n\tsum = 0\n\tfor i in list1:\n\t\tsum += round(i)\n\treturn sum * len(list1)\n\nprint(round_and_sum([1.3, 2.3, 4.4]))\nprint(round_and_sum([2.4, 3.4, 5.5]))<｜end▁of▁sentence｜>"}
{"ID": 783, "source": "MBPP:420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"\ndef cube_Sum(n): \n\tsum = 0\n\tfor i in range(2, 2*n + 1, 2): \n\t\tsum += i**3\n\treturn sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(cube_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\tres = ''.join(test_tup)\n\treturn res\n\ntest_tup = ('g', 'e', 'e', 'k', 's')\nprint(concatenate_tuple(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\tsum = 0  \n\tfor i in range(1, n+1):  \n\t\tsum += (i * i * i)  \n\treturn sum  \nn = 5  \nprint(find_Average_Of_Cube(n))<｜end▁of▁sentence｜>"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\tgoldtable = [[0 for i in range(n)] \n\t\t\t\tfor j in range(m)] \n\n\tfor col in range(n-1, -1, -1): \n\t\tfor row in range(m): \n\n\t\t\t# Gold collected on going to \n\t\t\t# the cell on the right(->) \n\t\t\tif (col == n-1): \n\t\t\t\tright = 0\n\t\t\telse: \n\t\t\t\tright = goldtable[row][col+1] \n\n\t\t\t# Gold collected on going to \n\t\t\t# the cell to right up (/) \n\t\t\tif (row == 0 or col == n-1): \n\t\t\t\tright_up = 0\n\t\t\telse: \n\t\t\t\tright_up = goldtable[row-1][col+1] \n\n\t\t\t# Gold collected on going to \n\t\t\t# the cell to right down (\\) \n\t\t\tif (row == m-1 or col == n-1): \n\t\t\t\tright_down = 0\n\t\t\telse: \n\t\t\t\tright_down = goldtable[row+1][col+1] \n\n\t\t\t# Max gold collected from taking \n\t\t\t# either of the above 3 paths \n\t\t\tgoldtable[row][col] = gold[row][col] + max(right, right_up, right_down) \n\t\t\t\n\t# The max amount of gold \n\t# collected will be the max \n\t# value in first column of all rows \n\tres = goldtable[0][0] \n\tfor i in range(1, m): \n\t\tres = max(res, goldtable[i][0]) \n\treturn res \n\n# Driver code \ngold = [[1, 3, 1, 5], \n\t\t[2, 2, 4, 1], \n\t\t[5, 0, 2, 3], \n\t\t[0, 6, 1, 2]] \n\nm = 4\nn = 4\n\nprint(get_maxgold(gold, m, n))<｜end▁of▁sentence｜>"}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\tres = tuple(sub[-1] for sub in test_tuple)\n\treturn res\n\ntest_tuple = (('gfg', 'good'), ('is', 'best', 'for', 'geeks'))\nprint(extract_rear(test_tuple))<｜end▁of▁sentence｜>"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\tcount = 0\n\tfor sub in list1: \n\t\tif x in sub: \n\t\t\tcount = count + 1\n\treturn count \n\nlist1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] \n\nprint(\"The original list : \" + str(list1)) \n\nx = 'A'\ny = 'D'\nprint(\"The count of element\", x, \"is\", count_element_in_list(list1, x)) \nprint(\"The count of element\", y, \"is\", count_element_in_list(list1, y))<｜end▁of▁sentence｜>"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\todd_nums = list(filter(lambda x: x % 2 != 0, nums))\n\treturn odd_nums\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums))<｜end▁of▁sentence｜>"}
{"ID": 790, "source": "MBPP:427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\"\"\"\ndef change_date_format(dt):\n\timport re\n\treturn re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n\ndate1 = \"2026-01-02\"\nprint(\"Original date in YYY-MM-DD Format: \",date1)\nprint(\"New date in DD-MM-YYYY Format: \",change_date_format(date1))<｜end▁of▁sentence｜>"}
{"ID": 791, "source": "MBPP:428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"\ndef shell_sort(my_list):\n\tgap = len(my_list) // 2\n\twhile gap > 0:\n\t\tfor i in range(gap, len(my_list)):\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp:\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tmy_list[j] = temp\n\t\tgap //= 2\n\treturn my_list\n\n\nif __name__ == \"__main__\":\n\tmy_list = [1, 5, 2, 4, 3]\n\tprint(shell_sort(my_list))<｜end▁of▁sentence｜>"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\tres = tuple(map(lambda i, j: i + j, test_tup1, test_tup2))\n\treturn res\n\ntest_tup1 = (7, 4, 5)\ntest_tup2 = (2, 7, 8)\nprint (\"The original tuple 1 : \" + str(test_tup1))\nprint (\"The original tuple 2 : \" + str(test_tup2))\nprint (\"The modified tuple : \" + str(and_tuples(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\"\"\"\n\tFind the directrix of a parabola.\n\t\"\"\"\n\treturn -b / (2 * a)\n\nprint(parabola_directrix(1, 2, 3))\nprint(parabola_directrix(0, 2, 3))\nprint(parabola_directrix(1, 0, 3))\nprint(parabola_directrix(1, 2, 0))<｜end▁of▁sentence｜>"}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\tresult = False\n\tfor i in list1:\n\t\tfor j in list2:\n\t\t\tif i == j:\n\t\t\t\tresult = True\n\treturn result\n\nprint(common_element([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]))\nprint(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\tmedian=(base1+base2)/2\n\tprint(\"Median of trapezium is:\",median)\n\nbase1=int(input(\"Enter the base1 of trapezium:\"))\nbase2=int(input(\"Enter the base2 of trapezium:\"))\nheight=int(input(\"Enter the height of trapezium:\"))\nmedian_trapezium(base1,base2,height)<｜end▁of▁sentence｜>"}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t\"\"\"\n\tThis function checks whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n\tfor i in arr:\n\t\tif i > number:\n\t\t\treturn True\n\treturn False\n\n\nif __name__ == \"__main__\":\n\tarr = [1, 2, 3, 4, 5]\n\tnumber = 6\n\tprint(check_greater(arr, number))<｜end▁of▁sentence｜>"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\tpatterns = 'ab+?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one(\"ab\"))\nprint(text_match_one(\"abc\"))\nprint(text_match_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_two(text):\n\tpatterns = 'ab*?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_two(\"ab\"))\nprint(text_match_two(\"abc\"))\nprint(text_match_two(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_three(text):\n\tpatterns = 'ab?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_three(\"ab\"))\nprint(text_match_three(\"abc\"))\nprint(text_match_three(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_four(text):\n\tpatterns = 'ab{3}?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_four(\"ab\"))\nprint(text_match_four(\"abc\"))\nprint(text_match_four(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_five(text):\n\tpatterns = 'ab{2,3}?'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_five(\"ab\"))\nprint(text_match_five(\"abc\"))\nprint(text_match_five(\"abbc\"))<｜end▁of▁sentence｜>"}
{"ID": 798, "source": "MBPP:435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\ndef last_Digit(n) :\n\tn = n % 10\n\treturn n\n\nn = int(input(\"Enter a number : \"))\nprint(last_Digit(n))<｜end▁of▁sentence｜>"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\tlist2=[]\n\tfor i in list1:\n\t\tif i<0:\n\t\t\tlist2.append(i)\n\treturn list2\n\nlist1=[1,2,-3,-4,5,-6,7,-8,9]\nprint(neg_nos(list1))<｜end▁of▁sentence｜>"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\tresult = \"\"\n\tfor i in range(len(str1)):\n\t\tif i % 2 == 0:\n\t\t\tresult = result + str1[i]\n\treturn result\n\nstr1 = input(\"Enter a string: \")\nprint(remove_odd(str1))<｜end▁of▁sentence｜>"}
{"ID": 801, "source": "MBPP:438", "prompt": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count bidirectional tuple pairs.\n\"\"\"\ndef count_bidirectional(test_list):\n\t\"\"\"\n\tCount bidirectional tuple pairs.\n\t\"\"\"\n\tres = []\n\tfor i in test_list:\n\t\tif i[::-1] in test_list:\n\t\t\tres.append(i)\n\treturn len(res)\n\n\ntest_list = [(1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1)]\nprint(count_bidirectional(test_list))<｜end▁of▁sentence｜>"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\"\"\"\n\t>>> multiple_to_single([11, 33, 50])\n\t113350\n\t\"\"\"\n\tresult = 0\n\tfor i in L:\n\t\tresult = result * 10 + i\n\treturn result\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(L):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the number of even numbers in the list.\nThe second element should be the number of odd numbers in the list.\n\"\"\"\ndef count_even_and_odd(L):\n\t\"\"\"\n\t>>> count_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[3, 3]\n\t\"\"\"\n\teven_count = 0\n\todd_count = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\treturn [even_count, odd_count]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(L):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\t"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t\"\"\"\n\tFinds all adverbs and their positions in a given sentence.\n\t\"\"\"\n\tadverbs = []\n\tfor word in text.split():\n\t\tif word.endswith('ly'):\n\t\t\tadverbs.append((word, text.index(word)))\n\treturn adverbs\n\nprint(find_adverb_position('Clearly, he has no excuse for such behavior.'))<｜end▁of▁sentence｜>"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\tsa=6*l*l\n\treturn sa\nl=int(input(\"Enter the length of the cube:\"))\nprint(\"The surface area of the cube is:\",surfacearea_cube(l))<｜end▁of▁sentence｜>"}
{"ID": 805, "source": "MBPP:442", "prompt": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\n\"\"\"\ndef positive_count(nums):\n\tpositive_count = 0\n\tnegative_count = 0\n\tzero_count = 0\n\tfor num in nums:\n\t\tif num > 0:\n\t\t\tpositive_count += 1\n\t\telif num < 0:\n\t\t\tnegative_count += 1\n\t\telse:\n\t\t\tzero_count += 1\n\treturn positive_count / (positive_count + negative_count + zero_count)\n\nprint(positive_count([1, 2, 3, -4, -5, 0]))<｜end▁of▁sentence｜>"}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\tlist1.sort()\n\tfor i in list1:\n\t\tif i<0:\n\t\t\ta=i\n\treturn a\n\nlist1=[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]\nprint(largest_neg(list1))<｜end▁of▁sentence｜>"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\tres = [tuple(i[:K] + i[-K:]) for i in test_list]\n\treturn res\n\ntest_list = [(1, 2, 3, 4, 5, 6, 7), (5, 2, 2, 4, 4, 6, 7), (3, 2, 4, 4, 2, 6, 7), (2, 2, 3, 1, 1, 6, 7)]\nK = 2\nprint(trim_tuple(test_list, K))<｜end▁of▁sentence｜>"}
{"ID": 808, "source": "MBPP:445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n\tres = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n\treturn res\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (10, 20, 30, 40, 50)\nprint(index_multiplication(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t\n\t\n\tcount = 0\n\tfor i in lst: \n\t\tif (tup.count(i)>0): \n\t\t\tcount+=1\n\treturn count \n\n\ntup = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2) \nlst = [10, 8, 5] \nprint(count_Occurrence(tup, lst),end = \" \") \n\n\n\"\"\"\nOutput:\n3\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t\"\"\"\n\tThis function takes a list of numbers and returns a list of cubes of those numbers.\n\t\"\"\"\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\ta=[0]*(n+1)\n\ta[0]=3\n\ta[1]=0\n\ta[2]=2\n\tfor i in range(3,n+1):\n\t\ta[i]=a[i-2]+a[i-3]\n\treturn sum(a)\nn=int(input())\nprint(cal_sum(n))<｜end▁of▁sentence｜>"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) \n\tif (a == 0): \n\t\tprint(\"No\") \n\telse: \n\t\tprint(\"Yes\") \n\nx1,x2,x3,y1,y2,y3 = map(int,input().split())\ncheck_Triangle(x1,y1,x2,y2,x3,y3)<｜end▁of▁sentence｜>"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\tresult = []\n\tfor i in str:\n\t\tif len(i) == l:\n\t\t\tresult.append(i)\n\treturn result\n\nstr = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint(\"Original list:\")\nprint(str)\nl = 8\nprint(\"\\nlength of the string to extract:\")\nprint(l)\nprint(\"\\nAfter extracting strings of specified length from the said list:\")\nprint(extract_string(str, l))<｜end▁of▁sentence｜>"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\timport re\n\ttext2 = re.sub(r'\\s+', '', text1)\n\treturn text2\n\ntext1 = \"Hello, how are you?\"\nprint(remove_whitespaces(text1))<｜end▁of▁sentence｜>"}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\tloss=actual_cost-sale_amount\n\tif loss>0:\n\t\treturn loss\n\telse:\n\t\treturn None<｜end▁of▁sentence｜>"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(2, n+1, 2) : \n\t\tif n % i == 0 : \n\t\t\tsum += i \n\treturn sum\nn = int(input(\"Enter the number: \"))\nprint(sumofFactors(n))<｜end▁of▁sentence｜>"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\tpatterns = '\\Bz\\B'\n\tif re.search(patterns, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_wordz(\"Python Exercises.\"))<｜end▁of▁sentence｜>"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\tmonth_31_days = [1,3,5,7,8,10,12]\n\tif monthnum2 in month_31_days:\n\t\treturn True\n\telse:\n\t\treturn False\n\nmonthnum2 = int(input(\"Enter the month number: \"))\nprint(check_monthnumb_number(monthnum2))<｜end▁of▁sentence｜>"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t\"\"\"\n\tReverse strings in a given list of string values.\n\t\"\"\"\n\treversed_list = []\n\tfor string in stringlist:\n\t\treversed_list.append(string[::-1])\n\treturn reversed_list\n\n\nif __name__ == '__main__':\n\tstringlist = ['abc', 'def', 'ghi']\n\tprint(reverse_string_list(stringlist))<｜end▁of▁sentence｜>"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\tmin = len(lst[0]) \n\tfor i in lst: \n\t\tif len(i) < min: \n\t\t\tmin = len(i) \n\t\t\tresult = i \n\treturn result \n\nlst = [[1, 2], [3, 4, 5], [9, 6, 3, 7], [3, 10, 6, 7]] \nprint(Find_Min(lst))<｜end▁of▁sentence｜>"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\tarea=l*b\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\tarea=s*s\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea=3.14*r*r\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\tarea=0.5*b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\tarea=0.5*(a+b)*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(p,q):\n\tarea=0.5*p*q\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\tarea=b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(d1,d2):\n\tarea=0.5*d1*d2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(s):\n\tarea=(3*1.732*s*s)/2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(s):\n\tarea=(7*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(s):\n\tarea=(4*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef nonagon_area(s):\n\tarea=(9*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\timport re\n\tstr2 = re.sub('[A-Z]', '', str1)\n\treturn str2\n\nstr1 = \"Python\"\nprint(\"Original string:\",str1)\nprint(\"After removing uppercase letters from above string:\",remove_uppercase(str1))<｜end▁of▁sentence｜>"}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [item[0] for item in lst] \n\n# Driver Code \nlst = [['Gfg', 'good'], ['is', 'best']] \nprint(Extract(lst))<｜end▁of▁sentence｜>"}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tctr=0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tctr+=1\n\treturn ctr\n\nstr=input(\"Enter a string: \")\nprint(\"Number of upper case characters in the string: \",upper_ctr(str))<｜end▁of▁sentence｜>"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\tcombinations = []\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tcombinations.append([list1[i], list1[j]])\n\treturn combinations\n\nprint(combinations_list([1,2,3,4]))<｜end▁of▁sentence｜>"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 1\n\tflag = 0\n\n\tfor i in range(len(arr)):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 1:\n\t\treturn 0\n\treturn max_so_far\n\n\nif __name__ == '__main__':\n\tarr = [1, -2, -3, 0, 7, -8, -2]\n\tprint(max_subarray_product(arr))<｜end▁of▁sentence｜>"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\tflag = True\n\tfor key in dict:\n\t\tif dict[key] != n:\n\t\t\tflag = False\n\t\t\tbreak\n\treturn flag\n\ndict = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}\nn = 12\nprint(\"Original dictionary elements:\")\nprint(dict)\nprint(n, \" : \", check_value(dict, n))\nn = 8\nprint(n, \" : \", check_value(dict, n))<｜end▁of▁sentence｜>"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\tdict2 = {}\n\tfor key, value in dict1.items():\n\t\tif value:\n\t\t\tdict2[key] = value\n\treturn dict2\n\ndict1 = {'c1': 'Red', 'c2': 'Green', 'c3': None}\nprint(\"Original Dictionary:\")\nprint(dict1)\nprint(\"New Dictionary after dropping empty items:\")\nprint(drop_empty(dict1))<｜end▁of▁sentence｜>"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\tmid = low + (high - low)/2 \n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\telse: \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n) \n\narr = [1, 3, 20, 4, 1, 0] \nn = len(arr) \nprint(\"Index of a peak point is\", find_peak(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\toctalNum = []\n\twhile deciNum != 0:\n\t\toctalNum.append(deciNum % 8)\n\t\tdeciNum = deciNum // 8\n\toctalNum.reverse()\n\tprint(\"The octal number is: \")\n\tfor i in octalNum:\n\t\tprint(i, end=\"\")\n\ndeciNum = int(input(\"Enter the decimal number: \"))\ndecimal_to_Octal(deciNum)<｜end▁of▁sentence｜>"}
{"ID": 831, "source": "MBPP:468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"\ndef max_product(arr, n ): \n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 1\n\tflag = 0\n\tfor i in range(0, n): \n\t\tif arr[i] > 0: \n\t\t\tmax_ending_here = max_ending_here * arr[i] \n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1) \n\t\t\tflag = 1\n\t\telif arr[i] == 0: \n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse: \n\t\t\ttemp = max_ending_here \n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1) \n\t\t\tmin_ending_here = temp * arr[i] \n\t\tif max_so_far < max_ending_here: \n\t\t\tmax_so_far = max_ending_here \n\tif flag == 0 and max_so_far == 1: \n\t\treturn 0\n\treturn max_so_far \n\narr = [ 1, -2, -3, 0, 7, -8, -2 ] \nn = len(arr) \nprint(\"Maximum Sub array product is\", max_product(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\tn = len(price)\n\tprofit = [[0 for i in range(n + 1)] for j in range(k + 1)]\n\tfor i in range(1, k + 1):\n\t\tprev_diff = float('-inf')\n\t\tfor j in range(1, n):\n\t\t\tprev_diff = max(prev_diff, profit[i - 1][j - 1] - price[j - 1])\n\t\t\tprofit[i][j] = max(profit[i][j - 1], price[j] + prev_diff)\n\treturn profit[k][n - 1]\n\n\nif __name__ == '__main__':\n\tprice = [2, 4, 7, 5, 4, 3, 5]\n\tk = 3\n\tprint(max_profit(price, k))<｜end▁of▁sentence｜>"}
{"ID": 833, "source": "MBPP:470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\n\"\"\"\ndef add_pairwise(test_tup):\n\tres = list(map(lambda i, j: i + j, test_tup, test_tup[1:] + (test_tup[0],)))\n\treturn res\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t\n\tmul = 1\n\t\n\tfor i in range(lens): \n\t\tmul = (mul * (arr[i] % n)) % n \n\t\n\treturn mul % n \n\narr = [ 100, 10, 5, 25, 35, 14 ] \nlens = len(arr) \nn = 11\n\nprint(find_remainder(arr, lens, n))<｜end▁of▁sentence｜>"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\tn = len(l) \n\tif (n < 1): \n\t\treturn False\n\tmin_val = min(l) \n\tmax_val = max(l) \n\tif max_val - min_val + 1 == n: \n\t\tfor i in range(n): \n\t\t\tif l[i] < 0: \n\t\t\t\tj = -l[i] - min_val \n\t\t\telse: \n\t\t\t\tj = l[i] - min_val \n\t\t\tif l[j] > 0: \n\t\t\t\tl[j] = -l[j] \n\t\t\telse: \n\t\t\t\treturn False\n\t\treturn True\n\treturn False\n\nl = [2, 3, 1, 4, 5] \nprint(check_Consecutive(l))<｜end▁of▁sentence｜>"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\tres = [(i, j) for i, j in test_list1 if i in test_list2]\n\treturn res\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(\"The original list 1 : \" + str(test_list1))\nprint(\"The original list 2 : \" + str(test_list2))\nprint(\"The tuple intersection of elements in the given tuple list irrespective of their order : \" + str(tuple_intersection(test_list1, test_list2)))<｜end▁of▁sentence｜>"}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\tstr2=\"\"\n\tfor i in str1:\n\t\tif i==ch:\n\t\t\tstr2+=newch\n\t\telse:\n\t\t\tstr2+=i\n\treturn str2\n\nstr1=input(\"Enter a string: \")\nch=input(\"Enter a character to be replaced: \")\nnewch=input(\"Enter a character to replace: \")\nprint(replace_char(str1,ch,newch))<｜end▁of▁sentence｜>"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t\"\"\"\n\t>>> sort_counter({'a': 1, 'b': 2, 'c': 3})\n\t[('c', 3), ('b', 2), ('a', 1)]\n\t\"\"\"\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\tmax = nums[0]\n\tmin = nums[0]\n\tfor i in nums:\n\t\tif i > max:\n\t\t\tmax = i\n\t\tif i < min:\n\t\t\tmin = i\n\treturn max + min\n\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\tprint(string.lower())\n\nis_lower(\"Hello\")<｜end▁of▁sentence｜>"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\ttemp = \"\"\n\tfor i in range(len(str1)):\n\t\tif not str1[i].islower():\n\t\t\ttemp = temp + str1[i]\n\treturn temp\n\nstr1 = \"AbcDEfGhIJ\"\nprint(remove_lowercase(str1))<｜end▁of▁sentence｜>"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\twhile n >= 10:  \n\t\tn = n / 10;  \n\treturn int(n)  \nn = 98562;  \nprint(first_Digit(n))<｜end▁of▁sentence｜>"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\tASCII_SIZE = 256\n\tctr = [0] * ASCII_SIZE\n\tmax = -1\n\tch = ''\n\tfor i in str1:\n\t\tctr[ord(i)]+=1;\n\n\tfor i in str1:\n\t\tif max < ctr[ord(i)]:\n\t\t\tmax = ctr[ord(i)]\n\t\t\tch = i\n\treturn ch\n\nstr1=input(\"Enter the string: \")\nprint(\"Maximum occurring character in the given string is: \" + get_max_occuring_char(str1))<｜end▁of▁sentence｜>"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\tsubset = [[False for i in range(sum+1)] for i in range(n+1)]\n\tfor i in range(n+1):\n\t\tsubset[i][0] = True\n\tfor i in range(1, sum+1):\n\t\tsubset[0][i] = False\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, sum+1):\n\t\t\tif j < set[i-1]:\n\t\t\t\tsubset[i][j] = subset[i-1][j]\n\t\t\tif j >= set[i-1]:\n\t\t\t\tsubset[i][j] = subset[i-1][j] or subset[i-1][j-set[i-1]]\n\treturn subset[n][sum]\n\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum) == True:\n\tprint(\"Found a subset with given sum\")\nelse:\n\tprint(\"No subset with given sum\")<｜end▁of▁sentence｜>"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\tpattern = '[A-Z]+[a-z]+$'\n\tif re.search(pattern, text): \n\t\treturn('Yes') \n\telse: \n\t\treturn('No') \n\nprint(match(\"AaBbGg\")) \nprint(match(\"Python\")) \nprint(match(\"python\")) \nprint(match(\"PYTHON\")) \nprint(match(\"aA\")) \nprint(match(\"Aa\"))<｜end▁of▁sentence｜>"}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\tfact = 1\n\tn = 1\n\twhile (fact % x != 0): \n\t\tfact = fact * n \n\t\tn = n + 1\n\treturn n - 1\n\nx = int(input(\"Enter a number: \"))\nprint(first_Factorial_Divisible_Number(x))<｜end▁of▁sentence｜>"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\tres = [(val1, val2) for val1, val2 in zip(test_list1, test_list2) if val1 != val2]\n\treturn res\n\n\ntest_list1 = [(1, 3), (4, 5), (2, 9), (1, 10), (3, 4)]\ntest_list2 = [(4, 5), (1, 3), (10, 15), (3, 4), (2, 9)]\nprint(\"The original list 1 : \" + str(test_list1))\nprint(\"The original list 2 : \" + str(test_list2))\nprint(\"The filtered tuples : \" + str(remove_matching_tuple(test_list1, test_list2)))<｜end▁of▁sentence｜>"}
{"ID": 848, "source": "MBPP:485", "prompt": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest palindromic number in the given array.\n\"\"\"\ndef largest_palindrome(A, n) : \n\tmax = -1\n\tfor i in range(n) : \n\t\tfor j in range(n) : \n\t\t\tnum = A[i] * A[j] \n\t\t\tif (isPalindrome(num) and num > max) : \n\t\t\t\tmax = num \n\treturn max\n\ndef isPalindrome(n) : \n\trev = 0\n\twhile (n != 0) : \n\t\trev = rev * 10 + n % 10\n\t\tn = n // 10\n\treturn rev\n\nif __name__ == \"__main__\" : \n\tA = [1, 2, 3, 4, 5, 99, 101, 111, 121] \n\tn = len(A) \n\tprint(largest_palindrome(A, n))<｜end▁of▁sentence｜>"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup \ntup =[(1, 3), (3, 2), (2, 1)] \nprint(sort_tuple(tup))<｜end▁of▁sentence｜>"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\tarea = (5/2) * (a**2) * (3**(1/2))\n\treturn area\n\nprint(area_pentagon(5))<｜end▁of▁sentence｜>"}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\tmax=arr[0]\n\tcount=0\n\tfor i in range(n):\n\t\tif arr[i]>max:\n\t\t\tmax=arr[i]\n\tfor i in range(n):\n\t\tif arr[i]==max:\n\t\t\tcount+=1\n\treturn count\nn=int(input())\narr=list(map(int,input().split()))\nprint(frequency_Of_Largest(n,arr))<｜end▁of▁sentence｜>"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t\"\"\"\n\textract all the pairs which are symmetric in the given tuple list.\n\t\"\"\"\n\tres = []\n\tfor tup in test_list:\n\t\tif tup[::-1] in test_list:\n\t\t\tres.append(tup)\n\treturn res\n\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\nprint(extract_symmetric(test_list))<｜end▁of▁sentence｜>"}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\tsum=0\n\twhile n>0:\n\t\tsum=sum+a\n\t\ta=a*r\n\t\tn=n-1\n\treturn sum\n\na=int(input(\"Enter the first term of the series: \"))\nn=int(input(\"Enter the number of terms in the series: \"))\nr=int(input(\"Enter the common ratio of the series: \"))\nprint(\"The sum of the series is: \",sum_gp(a,n,r))<｜end▁of▁sentence｜>"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found\n\t\nprint(binary_search([1,2,3,5,8], 6))\nprint(binary_search([1,2,3,5,8], 5))<｜end▁of▁sentence｜>"}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tCalculate a grid of hexagon coordinates.\n\t\"\"\"\n\tpolygons = []\n\tfor y in range(starty, endy, radius):\n\t\tfor x in range(startx, endx, radius):\n\t\t\tpolygons.append([(x, y), (x + radius, y), (x + radius, y + radius), (x, y + radius), (x - radius, y + radius), (x - radius, y)])\n\treturn polygons\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tstartx = 0\n\tstarty = 0\n\tendx = 100\n\tendy = 100\n\tradius = 10\n\tpolygons = calculate_polygons(startx, starty, endx, endy, radius)\n\tprint(polygons)\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t\"\"\"\n\tWrite a function to convert the given binary tuple to integer.\n\t\"\"\"\n\tres = int(''.join(str(x) for x in test_tup), 2)\n\treturn (res)\n\ntest_tup = (1, 0, 0, 1, 1)\nprint(binary_to_integer(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\timport re\n\tstr2 = re.sub('[a-z]+', '', str1)\n\treturn str2\n\nstr1 = \"Python Tutorial\"\nprint(remove_lowercase(str1))<｜end▁of▁sentence｜>"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\timport heapq\n\theap = []\n\tfor num in nums:\n\t\theapq.heappush(heap, num)\n\treturn [heapq.heappop(heap) for i in range(n)]\n\nnums = [1, 23, 12, 9, 30, 2, 50]\nprint(heap_queue_smallest(nums,3))<｜end▁of▁sentence｜>"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\tpi=3.14\n\tl=(r**2+h**2)**0.5\n\tsurfacearea=pi*r*(r+l)\n\treturn surfacearea\nr=int(input(\"Enter the radius of cone:\"))\nh=int(input(\"Enter the height of cone:\"))\nprint(\"Surface area of cone is:\",surfacearea_cone(r,h))<｜end▁of▁sentence｜>"}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\twhile y:\n\t\tx, y = y, x % y\n\treturn x\n\nprint(gcd(12, 17))\nprint(gcd(100, 100))<｜end▁of▁sentence｜>"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\td=2*r\n\treturn d\n\nr=int(input(\"Enter the radius of the circle: \"))\nprint(\"The diameter of the circle is: \",diameter_circle(r))<｜end▁of▁sentence｜>"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\tstring = \"\"\n\tfor element in list:\n\t\tstring += str(element)\n\treturn string\n\nprint(concatenate_elements([1, 2, 3, 4, 5]))<｜end▁of▁sentence｜>"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\tl=[]\n\tfor i in range(1,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\tl.append(i)\n\treturn l\n\nprint(num_comm_div(10,20))<｜end▁of▁sentence｜>"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\trem=n%m\n\treturn rem\nn=int(input(\"Enter the number:\"))\nm=int(input(\"Enter the number:\"))\nprint(find(n,m))<｜end▁of▁sentence｜>"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t\"\"\"Add consecutive numbers of a given list.\"\"\"\n\tnew_nums = []\n\tfor i in range(len(nums) - 1):\n\t\tnew_nums.append(nums[i] + nums[i + 1])\n\treturn new_nums\n\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))<｜end▁of▁sentence｜>"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum +=i*i*i \n\t\t\n\treturn sum\n\nn = 5\nprint(sum_Of_Series(n))<｜end▁of▁sentence｜>"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\ti = 0\n\tj = 0\n\twhile i < len(A):\n\t\tif A[i] != 0:\n\t\t\tA[j] = A[i]\n\t\t\tj += 1\n\t\ti += 1\n\twhile j < len(A):\n\t\tA[j] = 0\n\t\tj += 1\n\treturn A\n\nprint re_order([1,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10])<｜end▁of▁sentence｜>"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\tP = [[0 for i in range(k+1)] for j in range(n+1)] \n\tfor i in range(n+1): \n\t\tfor j in range(min(i, k)+1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i-1][j] + (j*P[i-1][j-1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j+1] = 0\n\treturn P[n][k] \nn = 10\nk = 2\nprint(\"Value of P(\",n,\",\",k,\") is \",permutation_coefficient(n, k))<｜end▁of▁sentence｜>"}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\tresult = []\n\tfor word in list1:\n\t\tif word not in removewords:\n\t\t\tresult.append(word)\n\treturn result\n\nlist1 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]\nremovewords = [\"white\", \"orange\"]\nprint(\"Original list:\")\nprint(list1)\nprint(\"\\nRemove words:\")\nprint(removewords)\nprint(\"\\nAfter removing the specified words from the said list:\")\nprint(remove_words(list1, removewords))<｜end▁of▁sentence｜>"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\tl1_set = set(l1)\n\tl2_set = set(l2)\n\tcommon_elements = l1_set.intersection(l2_set)\n\tcommon_elements_l1 = [i for i in l1 if i in common_elements]\n\tcommon_elements_l2 = [i for i in l2 if i in common_elements]\n\treturn common_elements_l1 == common_elements_l2\n\n\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1,"}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\tsum = 0\n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif(i % 2 != 0) : \n\t\t\tsum += i \n\t\t\tcount += 1\n\treturn sum / count \nn = int(input(\"Enter the number : \"))\nprint(\"Average of odd numbers till\", n, \"is\", average_Odd(n))<｜end▁of▁sentence｜>"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\t\n\t\t\t# number of subsequence \n\t\t\t# using j-1 terms \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\t\n\t\t\t# if arr[j-1] > i it will \n\t\t\t# surely make product greater \n\t\t\t# thus it won't contribute then \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\t\n\t\t\t\t# number of subsequence \n\t\t\t\t# using 1 to j-1 terms \n\t\t\t\t# and j-th term \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n] \n\n# Driver Code \narr = [1, 2, 3, 4] \nk = 10\nprint(no_of_subsequences(arr, k))<｜end▁of▁sentence｜>"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\tsum = 0\n\ti = 2\n\twhile(i * i <= num): \n\t\twhile(num % i == 0): \n\t\t\tsum += i \n\t\t\tnum /= i \n\t\ti += 1\n\tsum += num \n\treturn sum\nnum = int(input(\"Enter a number: \"))\nprint(find_Min_Sum(num))<｜end▁of▁sentence｜>"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t\"\"\"\n\tThis function will count the element frequency in the mixed nested tuple.\n\t\"\"\"\n\tres = {}\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tfor sub in ele:\n\t\t\t\tres[sub] = res.get(sub, 0) + 1\n\t\telse:\n\t\t\tres[ele] = res.get(ele, 0) + 1\n\treturn res\n\n\ntest_tuple = (4, 5, 4, 5, 6, 6, 5, (5, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, "}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\tres = [i + K for i in test_tup]\n\treturn res\n\ntest_tup = (\"gfg\", \"is\", \"best\", \"for\", \"geeks\")\nK = \"-\"\nprint(add_str(test_tup, K))<｜end▁of▁sentence｜>"}
{"ID": 877, "source": "MBPP:514", "prompt": "\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\n\"\"\"\ndef sum_elements(test_tup):\n\tres = 0\n\tfor tup in test_tup:\n\t\tres += sum(list(tup))\n\treturn res\n\ntest_tup = ([7, 8], [9, 1, 10, 7])\nprint(sum_elements(test_tup))<｜end▁of▁sentence｜>"}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\n\tif (n > m): \n\t\treturn True\n\n\tDP = [False for i in range(m)] \n\n\tfor i in range(n): \n\t\t\n\t\tif (DP[0]): \n\t\t\treturn True\n\n\t\ttemp = [False for i in range(m)] \n\n\t\tfor j in range(m): \n\t\t\t\n\t\t\tif (DP[j] == True): \n\t\t\t\t\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \n\t\t\t\t\t\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\n\n\t\tfor j in range(m): \n\t\t\tif (temp[j]): \n\t\t\t\tDP[j] = True\n\n\t\tDP[arr[i] % m] = True\n\t\t\n\treturn DP[0] \n\narr = [3, 1, 7, 5] \nn = len(arr) \nm = 6\nprint(\"YES\") if(modular_sum(arr, n, m)) else print(\"NO\") \n\n\"\"\"\nTime Complexity: O(m*n).\nAuxiliary Space: O(m).\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t\"\"\"\n\t>>> radix_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n\t[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n\t\"\"\"\n\tRADIX = 10\n\tmaxLength = False\n\ttmp, placement = -1, 1\n\n\twhile not maxLength:\n\t\tmaxLength = True\n\t\tbuckets = [list() for _ in range(RADIX)]\n\n\t\tfor i in nums:\n\t\t\ttmp = i / placement\n\t\t\tbuckets[tmp % RADIX].append(i)\n\t\t\tif maxLength and tmp > 0:\n\t\t\t\tmaxLength = False\n\n\t\ta = 0\n\t\tfor b in range(RADIX):\n\t\t\tbuck = buckets[b]\n\t\t\tfor i in buck:\n\t\t\t\tnums[a] = i\n\t\t\t\ta += 1\n\n\t\tplacement *= RADIX\n\n\treturn nums\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\tmax = list1[0] \n\tfor x in list1: \n\t\tif x > max: \n\t\t\tmax = x \n\treturn max\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Largest number is:\", largest_pos(list1))<｜end▁of▁sentence｜>"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t\"\"\"\n\tThis function takes a number and returns its square root.\n\t\"\"\"\n\treturn num ** 0.5\n\nprint(sqrt_root(4))\nprint(sqrt_root(9))\nprint(sqrt_root(16))<｜end▁of▁sentence｜>"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\timport math\n\tvolume = (num**3)/(6*math.sqrt(2))\n\treturn round(volume,2)\n\nprint(volume_tetrahedron(10))<｜end▁of▁sentence｜>"}
{"ID": 883, "source": "MBPP:520", "prompt": "\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\ndef get_lcm(l):\n\tlcm = l[0]\n\tfor i in range(1,len(l)):\n\t\tlcm = lcm*l[i]//gcd(lcm,l[i])\n\treturn lcm\n\ndef gcd(a,b):\n\tif b==0:\n\t\treturn a\n\treturn gcd(b,a%b)\n\nl = list(map(int,input().split()))\nprint(get_lcm(l))<｜end▁of▁sentence｜>"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t\"\"\"\n\tThis function checks if the triangle is scalene or not.\n\t\"\"\"\n\tif x == y or y == z or z == x:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef main():\n\t\"\"\"\n\tThis is the main function.\n\t\"\"\"\n\tx = int(input(\"Enter the first side of the triangle: \"))\n\ty = int(input(\"Enter the second side of the triangle: \"))\n\tz = int(input(\"Enter the third side of the triangle: \"))\n\tprint(check_isosceles(x,y,z))\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\tn = len(arr) \n\tlis = [1 for i in range(n+1)] \n\tfor i in range(1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \n\t\t\t\tlis[i] = lis[j] + 1\n\tlds = [1 for i in range(n+1)] \n\t\n\tfor i in reversed(range(n-1)): \n\t\tfor j in reversed(range(i-1 ,n)): \n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \n\t\t\t\tlds[i] = lds[j] + 1\n\n\tmaximum = lis[0] + lds[0] - 1\n\tfor i in range(1 , n): \n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \n\t\n\treturn maximum \n\narr = [0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15] \nprint (\"Length of LBS is\",lbs(arr))<｜end▁of▁sentence｜>"}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\tmessage = [\n\t\tlambda str1: any(x.isupper() for x in str1), # checks if there is any uppercase letter\n\t\tlambda str1: any(x.islower() for x in str1), # checks if there is any lowercase letter\n\t\tlambda str1: any(x.isdigit() for x in str1), # checks if there is any digit\n\t\tlambda str1: len(str1) == 7 # checks if the string is of length 7\n\t]\n\tresult = [x for x in [i(str1) for i in message] if x != True]\n\tif not result:\n\t\tresult.append('Valid string.')\n\treturn result\ns = input()\nprint(check_string(s))<｜end▁of▁sentence｜>"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] > arr[j] and msis[i] < msis[j] + arr[i]: \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\treturn max(msis) \n\narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(\"Sum of maximum sum increasing subsequence is \" + str(max_sum_increasing_subsequence(arr, n)))<｜end▁of▁sentence｜>"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\tChecks whether two given lines are parallel or not.\n\t\"\"\"\n\tslope1 = (line1[1][1] - line1[0][1]) / (line1[1][0] - line1[0][0])\n\tslope2 = (line2[1][1] - line2[0][1]) / (line2[1][0] - line2[0][0])\n\treturn slope1 == slope2\n\nline1 = ((0, 0), (1, 1))\nline2 = ((0, 1), (1, 2))\nprint(parallel_lines(line1, line2))\n\nline1 = ((0, 0), (1, 1))\nline2 = ((0, 1), (1, 3))\nprint(parallel_lines(line1, line2))<｜end▁of▁sentence｜>"}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\tstr1 = result = str1.title()\n\tresult =  \"\"\n\tfor word in str1.split():\n\t\tresult += word[:-1] + word[-1].upper() + \" \"\n\treturn result[:-1]  \n\nprint(capitalize_first_last_letters(\"python exercises practice solution\"))\nprint(capitalize_first_last_letters(\"w3resource\"))<｜end▁of▁sentence｜>"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\tcount = 0\n\tfor i in range(0, n):\n\t\tfor j in range(i + 1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\narr = [1, 5, 7, -1, 5]\nn = len(arr)\nsum = 6\nprint(\"Count of pairs is\", get_pairs_count(arr, n, sum))<｜end▁of▁sentence｜>"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\tmin_len = len(list1[0])\n\tmin_list = []\n\tfor i in list1:\n\t\tif len(i) < min_len:\n\t\t\tmin_len = len(i)\n\tfor i in list1:\n\t\tif len(i) == min_len:\n\t\t\tmin_list.append(i)\n\treturn min_list\n\nlist1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nprint(min_length(list1))<｜end▁of▁sentence｜>"}
{"ID": 892, "source": "MBPP:529", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\n\"\"\"\ndef jacobsthal_lucas(n): \n\t\"\"\"\n\tFunction to find the nth jacobsthal-lucas number.\n\t\"\"\"\n\ta = 2\n\tb = 1\n\tif n == 0:\n\t\treturn 2\n\tif n == 1:\n\t\treturn 1\n\tfor i in range(2, n+1):\n\t\tc = a + 2*b\n\t\ta = b\n\t\tb = c\n\treturn c\n\n\nif __name__ == '__main__':\n\tn = int(input(\"Enter the value of n: \"))\n\tprint(jacobsthal_lucas(n))<｜end▁of▁sentence｜>"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\tneg_count = 0\n\tpos_count = 0\n\tzero_count = 0\n\tfor num in nums:\n\t\tif num < 0:\n\t\t\tneg_count += 1\n\t\telif num > 0:\n\t\t\tpos_count += 1\n\t\telse:\n\t\t\tzero_count += 1\n\treturn neg_count / (neg_count + pos_count + zero_count)\n\nprint(negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, 0]))<｜end▁of▁sentence｜>"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\ttable = [0 for i in range(V + 1)] \n\ttable[0] = 0\n\tfor i in range(1, V + 1): \n\t\ttable[i] = sys.maxsize \n\tfor i in range(1, V + 1): \n\t\tfor j in range(m): \n\t\t\tif (coins[j] <= i): \n\t\t\t\tsub_res = table[i - coins[j]] \n\t\t\t\tif (sub_res != sys.maxsize and \n\t\t\t\t\tsub_res + 1 < table[i]): \n\t\t\t\t\ttable[i] = sub_res + 1\n\tif table[V] == sys.maxsize: \n\t\treturn -1\n\treturn table[V] \n\nif __name__ == \"__main__\": \n\tcoins = [9, 6, 5, 1] \n\tm = len(coins) \n\tV = 11\n\tprint(\"Minimum coins required is\",min_coins(coins, m, V))<｜end▁of▁sentence｜>"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\"\"\"\n\tCheck if two strings are permutations of each other.\n\t\"\"\"\n\tif len(str1) != len(str2):\n\t\treturn False\n\n\tchar_count = {}\n\tfor char in str1:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in str2:\n\t\tif char not in char_count:\n\t\t\treturn False\n\t\tchar_count[char] -= 1\n\t\tif char_count[char] < 0:\n\t\t\treturn False\n\n\treturn True\n\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tstr1 = \"abc\"\n\tstr2 = \"bca\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc"}
{"ID": 896, "source": "MBPP:533", "prompt": "\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\n\tres = []\n\tfor i in test_tuple:\n\t\tif type(i) != data_type:\n\t\t\tres.append(i)\n\treturn tuple(res)\n\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\ndata_type = int\nprint(remove_datatype(test_tuple, data_type))<｜end▁of▁sentence｜>"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\tM = len(pattern)\n\tN = len(text)\n\tfor i in range(N-M+1):\n\t\tj = 0\n\t\twhile(j < M):\n\t\t\tif (text[i+j] != pattern[j]):\n\t\t\t\tbreak\n\t\t\tj += 1\n\t\tif (j == M):\n\t\t\tprint(\"Pattern found at index \", i)\n\n\ntext = \"AABAACAADAABAAABAA\"\npattern = \"AABA\"\nsearch_literal(pattern, text)<｜end▁of▁sentence｜>"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\tpi = 3.14\n\ttop_surfacearea = pi * r**2\n\tbottom_surfacearea = pi * r**2\n\treturn top_surfacearea, bottom_surfacearea\n\nr = float(input(\"Enter the radius of the cylinder: \"))\ntop_surfacearea, bottom_surfacearea = topbottom_surfacearea(r)\nprint(\"Top surface area of the cylinder: \", top_surfacearea)\nprint(\"Bottom surface area of the cylinder: \", bottom_surfacearea)<｜end▁of▁sentence｜>"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\tnew_list = []\n\tfor i in range(len(list)):\n\t\tif i % n == 0:\n\t\t\tnew_list.append(list[i])\n\treturn new_list\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))<｜end▁of▁sentence｜>"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\ttemp = set()\n\tfor word in str1.split():\n\t\tif word in temp:\n\t\t\treturn word;\n\t\telse:\n\t\t\ttemp.add(word)\n\treturn 'None'\n\nstr1 = \"ab ca bc ab\"\nprint(first_repeated_word(str1))\nstr1 = \"ab ca bc\"\nprint(first_repeated_word(str1))<｜end▁of▁sentence｜>"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t\"\"\"\n\tThis function converts a given string list to a tuple.\n\t\"\"\"\n\treturn tuple(str1)\n\nstr1 = [\"Hello\", \"World\", \"Python\"]\nprint(string_list_to_tuple(str1))<｜end▁of▁sentence｜>"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t\"\"\"\n\tThis function will return the list of power of number in bases raised to the corresponding number in the index\n\t\"\"\"\n\tresult=list(map(pow,bases_num,index))\n\treturn result\n\nif __name__==\"__main__\":\n\tbases_num=[10,20,30,40,50,60,70,80,90,100]\n\tindex=[1,2,3,4,5,6,7,8,9,10]\n\tprint(basesnum_coresspondingnum(bases_num,index))<｜end▁of▁sentence｜>"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\tcount = [0] * 1000000\n\tfor i in range(n): \n\t\tcount[arr[i]] += 1\n\tmax_count = 0\n\tmin_count = n \n\tfor i in range(1000000): \n\t\tif (count[i] != 0): \n\t\t\tmax_count = max(max_count, count[i]) \n\t\t\tmin_count = min(min_count, count[i]) \n\treturn max_count - min_count \narr = [7, 8, 4, 5, 4, 1, 1, 7, 7, 2] \nn = len(arr) \nprint(find_Diff(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\tsum = 0\n\tfor i in range(1,n):\n\t\tif n%i == 0:\n\t\t\tsum += i\n\tif sum > n:\n\t\treturn True\n\telse:\n\t\treturn False\n\nn = int(input(\"Enter a number: \"))\nif check_abundant(n):\n\tprint(n,\"is an abundant number\")\nelse:\n\tprint(n,\"is not an abundant number\")<｜end▁of▁sentence｜>"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\tresult = re.sub(\"[ ,.]\", \":\", text)\n\treturn result\n\nprint(fill_spaces(\"Python Exercises, PHP exercises.\"))<｜end▁of▁sentence｜>"}
{"ID": 906, "source": "MBPP:543", "prompt": "\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\n\"\"\"\ndef count_digits(num1,num2):\n\tsum=num1+num2\n\tcount=0\n\twhile sum>0:\n\t\tcount+=1\n\t\tsum=sum//10\n\treturn count\n\nnum1=int(input(\"Enter first number:\"))\nnum2=int(input(\"Enter second number:\"))\nprint(\"Number of digits in sum:\",count_digits(num1,num2))<｜end▁of▁sentence｜>"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t\"\"\"\n\tFlatten the tuple list to a string.\n\t\"\"\"\n\tres = \"\"\n\tfor sub in test_list:\n\t\tres += str(sub)\n\treturn res\n\ntest_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), ('G', 'E', 'E', 'K', 'S')]\nprint(flatten_tuple(test_list))<｜end▁of▁sentence｜>"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\tn = n ^ 1\n\tn = n ^ (1 << (len(bin(n)) - 2))\n\treturn n\n\nn = int(input(\"Enter a number : \"))\nprint(toggle_F_and_L_bits(n))<｜end▁of▁sentence｜>"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\tindex = -1\n\tfor i in range(len(string)):\n\t\tif string[i] == char:\n\t\t\tindex = i\n\treturn index\n\nprint(last_occurence_char(\"hello world\",\"l\"))<｜end▁of▁sentence｜>"}
{"ID": 910, "source": "MBPP:547", "prompt": "\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\"\"\"\ndef Total_Hamming_Distance(n):   \n\ttotal = 0\n\ti = 0\n\twhile i < n:\n\t\ttotal += Hamming_Distance(i, i+1)\n\t\ti += 1\n\treturn total\n\ndef Hamming_Distance(x, y):\n\txor = x ^ y\n\tsetBits = 0\n\twhile (xor > 0):\n\t\tsetBits += xor & 1\n\t\txor >>= 1\n\treturn setBits\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Total Hamming Distance:\", Total_Hamming_Distance(n))<｜end▁of▁sentence｜>"}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\tn = len(arr) \n\tlis = [1]*n \n\tfor i in range (1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n\t\t\t\tlis[i] = lis[j]+1\n\tmaximum = 0\n\tfor i in range(n): \n\t\tmaximum = max(maximum , lis[i]) \n\treturn maximum \n\narr = [10, 22, 9, 33, 21, 50, 41, 60] \nprint (\"Length of lis is\", longest_increasing_subsequence(arr))<｜end▁of▁sentence｜>"}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tsum = sum + i * i * i * i * i\n\t\t\n\treturn sum\n\nn = 5\nprint(odd_Num_Sum(n))<｜end▁of▁sentence｜>"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t\n\tif low == high: \n\t\treturn arr[low] \n\n\tif high == low + 1: \n\t\treturn max(arr[low], arr[high]) \n\n\tmid = (low + high) // 2\n\n\tif arr[mid] > arr[mid + 1] and arr[mid] > arr[mid - 1]: \n\t\treturn arr[mid] \n\n\tif arr[mid] > arr[mid + 1] and arr[mid] < arr[mid - 1]: \n\t\treturn find_Max(arr, low, mid-1) \n\telse: \n\t\treturn find_Max(arr, mid + 1, high) \n\narr = [3, 4, 5, 1, 2] \nn = len(arr) \nprint(\"The maximum element is %d\" % find_Max(arr, 0, n-1))<｜end▁of▁sentence｜>"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\tresult = [x[n] for x in list1]\n\treturn result\n\nlist1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nprint(\"Original list:\")\nprint(list1)\nprint(\"\\nExtract 1st column\")\nprint(extract_column(list1,0))\nprint(\"\\nExtract 2nd column\")\nprint(extract_column(list1,1))\nprint(\"\\nExtract 3rd column\")\nprint(extract_column(list1,2))<｜end▁of▁sentence｜>"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\tdiff = seq_nums[1] - seq_nums[0]\n\tfor i in range(len(seq_nums)-1):\n\t\tif not (seq_nums[i + 1] - seq_nums[i] == diff):\n\t\t\treturn False\n\treturn True\n\nseq_nums = [10,12,14,16,18,20]\nprint(Seq_Linear(seq_nums))\nseq_nums = [10,12,14,16,18,20,22]\nprint(Seq_Linear(seq_nums))<｜end▁of▁sentence｜>"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t\"\"\"\n\tWrite a function to convert the given tuple to a floating-point number.\n\t\"\"\"\n\treturn float('.'.join(str(ele) for ele in test_tup))\n\nprint(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\tevenlist = [] \n\toddlist = [] \n\tfor i in list: \n\t\tif (i % 2 == 0): \n\t\t\tevenlist.append(i) \n\t\telse: \n\t\t\toddlist.append(i) \n\tprint(\"Even lists:\", evenlist) \n\tprint(\"Odd lists:\", oddlist) \n\nlist = [1,2,3,4,5,6,7,8,9,10] \nSplit(list)<｜end▁of▁sentence｜>"}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\tsum = 0  \n\tfor i in range(1, n+1) : \n\t\tsum = sum + i*i*i  \n\treturn sum \nn = 5\nprint(difference(n))<｜end▁of▁sentence｜>"}
{"ID": 919, "source": "MBPP:556", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\n\"\"\"\ndef find_Odd_Pair(A,N) : \n\tcount = 0\n\tfor i in range(N) : \n\t\tfor j in range(i + 1, N) : \n\t\t\tif (A[i] ^ A[j]) % 2 == 1 : \n\t\t\t\tcount += 1\n\treturn count \n\nA = [ 1, 2, 3 ] \nN = len(A) \nprint(find_Odd_Pair(A, N))<｜end▁of▁sentence｜>"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\tnew_string = \"\"\n\tfor char in string:\n\t\tif char.isupper():\n\t\t\tnew_string += char.lower()\n\t\telse:\n\t\t\tnew_string += char.upper()\n\treturn new_string\n\nprint(toggle_string(\"Hello World\"))<｜end▁of▁sentence｜>"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\tl1 = len(n1)\n\tl2 = len(n2)\n\tl = l1 if l1<=l2 else l2\n\tcount = 0\n\tfor i in range(l):\n\t\tcount += abs(int(n1[i]) - int(n2[i]))\n\tcount += abs(l1-l2)\n\treturn count\n\nprint(digit_distance_nums(123, 256))\nprint(digit_distance_nums(555, 666))\nprint(digit_distance_nums(12, 122))<｜end▁of▁sentence｜>"}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\tmax_so_far = a[0]\n\tcurr_max = a[0]\n\n\tfor i in range(1, size):\n\t\tcurr_max = max(a[i], curr_max + a[i])\n\t\tmax_so_far = max(max_so_far, curr_max)\n\n\treturn max_so_far\n\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, len(a)))<｜end▁of▁sentence｜>"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\tresult = list(test_tup1) + list(test_tup2)\n\treturn result\n\n\ntest_tup1 = (7, 2, 5, 3, 5, 3)\ntest_tup2 = (2, 4, 5, 6, 7, 5)\nprint (\"The union elements from the given tuples are : \" + str(union_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tif i not in res:\n\t\t\tres.append(i)\n\t\telse:\n\t\t\tres.remove(i)\n\treturn res\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 6"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_len = 0  \n\tfor ele in lst:  \n\t\tif len(ele) > max_len:  \n\t\t\tmax_len = len(ele)  \n\t\t\tresult = ele  \n\treturn result  \n\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]  \nprint(Find_Max_Length(lst))<｜end▁of▁sentence｜>"}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\tvalues = []\n\tstart = 0\n\twhile True:\n\t\tstart = text.find('\"', start)\n\t\tif start == -1:\n\t\t\treturn values\n\t\tend = text.find('\"', start + 1)\n\t\tvalues.append(text[start+1:end])\n\t\tstart = end + 1\n\nprint(extract_values('\"Geeks\" for \"Geeks\"'))\nprint(extract_values('\"Geeks\" for \"Geeks\" for \"Geeks\"'))<｜end▁of▁sentence｜>"}
{"ID": 927, "source": "MBPP:564", "prompt": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count unequal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n): \n\tcount = 0\n\tfor i in range(0, n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif arr[i] != arr[j]: \n\t\t\t\tcount += 1\n\treturn count \narr = [1, 2, 1, 2, 1] \nn = len(arr) \nprint(\"Total Pairs: \",count_Pairs(arr, n))<｜end▁of▁sentence｜>"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\tlist = []\n\tfor i in word:\n\t\tlist.append(i)\n\treturn list\n\nword = input(\"Enter a string: \")\nprint(split(word))<｜end▁of▁sentence｜>"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\tsum = 0\n\twhile n > 0:\n\t\tsum += n % 10\n\t\tn = n // 10\n\treturn sum\n\nprint(sum_digits(123))<｜end▁of▁sentence｜>"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\tlist2 = list1.copy()\n\tlist2.sort()\n\tif list1 == list2:\n\t\treturn True\n\telse:\n\t\treturn False\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(issort_list(list1))<｜end▁of▁sentence｜>"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\tlist = []\n\tfor i in range(length):\n\t\tlist.append({})\n\treturn list\n\nprint(empty_list(5))<｜end▁of▁sentence｜>"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t\"\"\"\n\t>>> sort_sublists([['green', 'eggs', 'and'], ['ham'], ['then', 'comes', 'the', 'eggs', 'and', 'ham']])\n\t[['and', 'eggs', 'green'], ['ham'], ['and', 'comes', 'eggs', 'ham', 'the']]\n\t\"\"\"\n\tlist2 = []\n\tfor i in list1:\n\t\tlist2.append(sorted(i))\n\treturn list2\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(list1):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest(list1):\n\t\"\"\"\n\t>>> second_largest([1, 2, 3, 4, 5, 6])\n\t5\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-2]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest(list1):\n\t\"\"\"\n\t>>> largest([1, 2, 3, 4, 5, 6])\n\t6\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-1]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest(list1):\n\t\"\"\"\n\t>>> smallest([1, 2, 3, 4, 5, 6])\n\t1\n\t\"\"\"\n\tlist1.sort()"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\tnew_list = []\n\tfor i in list1:\n\t\tfor j in charlist:\n\t\t\tif j in i:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\nlist1 = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\ncharlist = ['l', 'a', 'ck']\nprint(remove_words(list1, charlist))<｜end▁of▁sentence｜>"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\tmaxSum = 0\n\tarr.sort() \n\ti = N - 1\n\twhile (i > 0): \n\t\tif (arr[i] - arr[i - 1] < K): \n\t\t\tmaxSum += arr[i] \n\t\t\tmaxSum += arr[i - 1] \n\t\t\ti-=1\n\t\ti-=1\n\treturn maxSum \n\narr = [3, 5, 10, 15, 17, 12, 9] \nN = len(arr) \nK = 4\nprint(max_sum_pair_diff_lessthan_K(arr, N, K))<｜end▁of▁sentence｜>"}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\tunique_nums = []\n\tfor i in nums:\n\t\tif i not in unique_nums:\n\t\t\tunique_nums.append(i)\n\treturn unique_nums\n\nprint(two_unique_nums([1,2,3,3,3,3,4,5,6,6,6,6,7,8,9,9]))<｜end▁of▁sentence｜>"}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t\"\"\"\n\t:param list_data: list of numbers\n\t:return: product of the unique numbers of a given list\n\t\"\"\"\n\tproduct = 1\n\tunique_list = []\n\tfor i in list_data:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tfor i in unique_list:\n\t\tproduct *= i\n\treturn product\n\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))<｜end▁of▁sentence｜>"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\tpi=3.14\n\tarea=2*pi*r*h+2*pi*r*r\n\treturn area\nr=int(input(\"Enter the radius of the cylinder:\"))\nh=int(input(\"Enter the height of the cylinder:\"))\nprint(\"The surface area of the cylinder is:\",surfacearea_cylinder(r,h))<｜end▁of▁sentence｜>"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\tcount = 0\n\tfor i in range(L,R+1): \n\t\tif (i % A != 0): \n\t\t\tcount += 1\n\t\tif (count == N): \n\t\t\treturn i \n\treturn -1\nA=int(input())\nN=int(input())\nL=int(input())\nR=int(input())\nprint(count_no(A,N,L,R))<｜end▁of▁sentence｜>"}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\ti = 0\n\tj = 0\n\twhile (i < n and j < m): \n\t\tif (A[i] == B[j]): \n\t\t\ti += 1\n\t\t\tj += 1\n\t\t\tif (j == m): \n\t\t\t\treturn True\n\t\telse: \n\t\t\ti = i - j + 1\n\t\t\tj = 0\n\treturn False\n\nA = [2, 3, 0, 5, 1, 1, 2] \nB = [3, 0, 5, 1] \nn = len(A) \nm = len(B) \n\nif(is_Sub_Array(A, B, n, m)): \n\tprint(\"YES\") \nelse: \n\tprint(\"NO\")<｜end▁of▁sentence｜>"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\tfactorial = 1\n\tfor i in range(1, n + 1): \n\t\tfactorial = factorial * i \n\tprint(factorial)\n\tprint(factorial % 10)\n\nn = int(input(\"Enter a number: \"))\nlast_Digit_Factorial(n)<｜end▁of▁sentence｜>"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\tlist4=[]\n\tfor i in range(len(list1)):\n\t\tlist4.append(list1[i])\n\t\tlist4.append(list2[i])\n\t\tlist4.append(list3[i])\n\treturn list4\n\nlist1=[1,2,3,4,5]\nlist2=[10,20,30,40,50]\nlist3=[100,200,300,400,500]\nprint(interleave_lists(list1,list2,list3))<｜end▁of▁sentence｜>"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\tres = tuple(set(test_tup1) ^ set(test_tup2))\n\treturn res\n\ntest_tup1 = (3, 4, 5, 6)\ntest_tup2 = (5, 7, 4, 10)\nprint(find_dissimilar(test_tup1, test_tup2))<｜end▁of▁sentence｜>"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t\"\"\"\n\tFunction to extract the even elements in the nested mixed tuple.\n\t\"\"\"\n\tres = []\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres.extend(extract_even(ele))\n\t\telif isinstance(ele, int):\n\t\t\tif ele % 2 == 0:\n\t\t\t\tres.append(ele)\n\treturn res\n\n\ntest_tuple = (1, 2, 3, (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(extract_even(test_tuple))<｜end▁of▁sentence｜>"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\tarea = b*b + 2*b*s\n\treturn area\n\nbase = int(input(\"Enter the base of the square pyramid: \"))\nslant_height = int(input(\"Enter the slant height of the square pyramid: \"))\n\nprint(\"Surface Area of the square pyramid is: \",surface_Area(base,slant_height))<｜end▁of▁sentence｜>"}
{"ID": 945, "source": "MBPP:582", "prompt": "\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a dictionary is empty or not.\n\"\"\"\ndef my_dict(dict1):\n\t\"\"\"\n\tThis function checks if a dictionary is empty or not.\n\t\"\"\"\n\tif dict1:\n\t\treturn \"Dictionary is not empty\"\n\telse:\n\t\treturn \"Dictionary is empty\"\n\ndict1 = {}\nprint(my_dict(dict1))\n\ndict1 = {1:2, 3:4}\nprint(my_dict(dict1))<｜end▁of▁sentence｜>"}
{"ID": 946, "source": "MBPP:583", "prompt": "\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function for nth catalan number.\n\"\"\"\ndef catalan_number(num):\n\t\"\"\"\n\tThis function returns the nth catalan number.\n\t\"\"\"\n\tif num <= 1:\n\t\treturn 1\n\tresult = 0\n\tfor i in range(num):\n\t\tresult += catalan_number(i) * catalan_number(num-i-1)\n\treturn result\n\nif __name__ == '__main__':\n\tprint(catalan_number(10))<｜end▁of▁sentence｜>"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\timport re\n\tpattern = r\"\\w+ly\"\n\tresult = re.finditer(pattern, text)\n\tpositions = []\n\tfor match in result:\n\t\tpositions.append(match.span())\n\treturn positions\n\ntext = \"He was carefully disguised but captured quickly by police.\"\nprint(find_adverbs(text))<｜end▁of▁sentence｜>"}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\timport heapq\n\texpensive_items = heapq.nlargest(n,items,key=lambda s:s['price'])\n\treturn expensive_items\n\nitems = [\n\t{'name':'Item-1','price':101.1},\n\t{'name':'Item-2','price':555.22},\n\t{'name':'Item-3','price':45.09},\n\t{'name':'Item-4','price':22.75},\n\t{'name':'Item-5','price':16.30},\n\t{'name':'Item-6','price':110.65}\n]\n\nprint(expensive_items(items,3))<｜end▁of▁sentence｜>"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\tb = a[:k] \n\treturn (a[k::]+b[::]) \n\narr = [12, 10, 5, 6, 52, 36] \nn = len(arr) \nposition = 2\narr = split_Arr(arr, n, position) \nfor i in range(0, n): \n\tprint(arr[i], end = ' ')<｜end▁of▁sentence｜>"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t\"\"\"\n\tThis function takes a list and returns a tuple.\n\t\"\"\"\n\treturn tuple(listx)\n\nprint(list_tuple([1,2,3,4,5]))<｜end▁of▁sentence｜>"}
{"ID": 951, "source": "MBPP:588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\n\"\"\"\ndef big_diff(nums):\n\tmax_num = nums[0]\n\tmin_num = nums[0]\n\tfor i in nums:\n\t\tif i > max_num:\n\t\t\tmax_num = i\n\t\tif i < min_num:\n\t\t\tmin_num = i\n\treturn max_num - min_num\n\nprint(big_diff([10, 3, 5, 6]))\nprint(big_diff([7, 2, 10, 9]))\nprint(big_diff([2, 10, 7, 2]))<｜end▁of▁sentence｜>"}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t\"\"\"\n\t>>> perfect_squares(1, 10)\n\t[1, 4, 9]\n\t>>> perfect_squares(1, 100)\n\t[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\t\"\"\"\n\tresult = []\n\tfor i in range(a, b+1):\n\t\tif i**0.5 == int(i**0.5):\n\t\t\tresult.append(i)\n\treturn result\n\nif __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\timport math\n\tr = math.sqrt(x**2 + y**2)\n\ttheta = math.atan(y/x)\n\treturn r, theta\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n\"\"\"\ndef rect_polar(r,theta):\n\timport math\n\tx = r*math.cos(theta)\n\ty = r*math.sin(theta)\n\treturn x, y\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in rectangular coordinates.\n\"\"\"\ndef distance_rect(x1,y1,x2,y2):\n\timport math\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar(r1,theta1,r2,theta2):\n\timport math\n\td = math.sqrt((r1-r2)**2 + (theta1-theta2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar_rect(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_rect_polar(x1,y1,x2,y2):\n\timport math\n\tr"}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\tsize = len(newList) \n\ttemp = newList[0] \n\tnewList[0] = newList[size - 1] \n\tnewList[size - 1] = temp \n\treturn newList \nnewList = [12, 35, 9, 56, 24] \nprint(swap_List(newList))<｜end▁of▁sentence｜>"}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\tx = 2*n \n\tsum = 0\n\tfor i in range(0, x): \n\t\tsum += i*(x-i) \n\treturn sum\nn = 3\nprint(sum_Of_product(n))<｜end▁of▁sentence｜>"}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\tnew_ip = \".\".join([str(int(i)) for i in ip.split(\".\")])\n\treturn new_ip\n\nip = \"255.024.01.01\"\nprint(removezero_ip(ip))<｜end▁of▁sentence｜>"}
{"ID": 957, "source": "MBPP:594", "prompt": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\n\"\"\"\ndef diff_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn even_sum - odd_sum\n\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))<｜end▁of▁sentence｜>"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\tcount = 0\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\tcount += 1\n\treturn count // 2\n\nstr1 = \"1101\"\nstr2 = \"1010\"\nprint(min_Swaps(str1,str2))<｜end▁of▁sentence｜>"}
{"ID": 959, "source": "MBPP:596", "prompt": "\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the size of the given tuple.\n\"\"\"\ndef tuple_size(tuple_list):\n\tprint(len(tuple_list))\n\ntuple_size((1,2,3,4,5,6,7,8,9,10))<｜end▁of▁sentence｜>"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\ti = 0\n\tj = 0\n\twhile i < m and j < n:\n\t\tif arr1[i] < arr2[j]:\n\t\t\ti += 1\n\t\telse:\n\t\t\tj += 1\n\t\tif i + j == k:\n\t\t\treturn arr1[i-1] if i > 0 else arr2[j-1]\n\twhile i < m:\n\t\ti += 1\n\t\tif i + j == k:\n\t\t\treturn arr1[i-1]\n\twhile j < n:\n\t\tj += 1\n\t\tif i + j == k:\n\t\t\treturn arr2[j-1]\n\n\nif __name__ == '__main__':\n\tarr1 = [1, 3, 5, 7, 9]\n\tarr2 = [2, 4, 6, 8, 10]\n\tprint(find_kth(arr1, arr2, len(arr1), len(arr2), 5))<｜end▁of▁sentence｜>"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\tsum = 0\n\ttemp = number\n\twhile temp > 0:\n\t\tdigit = temp % 10\n\t\tsum += digit ** 3\n\t\ttemp //= 10\n\tif number == sum:\n\t\tprint(number,\"is an Armstrong number\")\n\telse:\n\t\tprint(number,\"is not an Armstrong number\")\n\narmstrong_number(153)\narmstrong_number(120)\narmstrong_number(1253)\narmstrong_number(1253)\narmstrong_number(1634)<｜end▁of▁sentence｜>"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\tsum = 0\n\tfor i in range(1,number+1):\n\t\tsum += i\n\taverage = sum/number\n\treturn sum,average\n\nnumber = int(input(\"Enter a number: \"))\nsum,average = sum_average(number)\nprint(\"Sum of first {} natural numbers is {}\".format(number,sum))\nprint(\"Average of first {} natural numbers is {}\".format(number,average))<｜end▁of▁sentence｜>"}
{"ID": 963, "source": "MBPP:600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\n\"\"\"\ndef is_Even(n) : \n\t\n\t# n^1 is n+1, then even, else odd \n\tif (n ^ 1 == n + 1) : \n\t\treturn True\n\telse : \n\t\treturn False\n\n# Driver code \nif __name__ == \"__main__\" : \n\t\n\tn = 100\n\tif (is_Even(n)) : \n\t\tprint(\"Even\") \n\telse : \n\t\tprint(\"Odd\")<｜end▁of▁sentence｜>"}
{"ID": 964, "source": "MBPP:1", "prompt": "\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\"\"\"\ndef min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\n\ttc[0][0] = cost[0][0] \n\n\t# Initialize first column of total cost(tc) array \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\n\t# Initialize first row of tc array \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\n\t# Construct rest of the tc array \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\n\treturn tc[m][n] \n\n# Driver program to test above functions \ncost = [[1, 2, 3], \n\t\t[4, 8, 2], \n\t\t[1, 5, 3]] \nprint(min_cost(cost, 2, 2))<｜end▁of▁sentence｜>"}
{"ID": 965, "source": "MBPP:2", "prompt": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n\tres = list(set(test_tup1).intersection(test_tup2))\n\treturn res\n\n\ntest_tup1 = (3, 4, 5, 6)\ntest_tup2 = (5, 7, 4, 10)\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\nprint(\"The common elements from both tuples are : \" + str(similar_elements(test_tup1, test_tup2)))<｜end▁of▁sentence｜>"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\"\"\"\n\tThis function checks if the given number is prime or not.\n\t\"\"\"\n\tif n <= 1:\n\t\treturn True\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn True\n\treturn False\n\n\ndef filter_non_prime(lst):\n\t\"\"\"\n\tThis function filters out all the non-prime numbers from the given list.\n\t\"\"\"\n\treturn list(filter(is_not_prime, lst))\n\n\nprint(filter_non_prime([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\timport heapq\n\tlargest_nums = heapq.nlargest(n, nums)\n\treturn largest_nums\nnums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nprint(\"Original array elements:\")\nprint(nums)\nn = 3\nprint(\"\\nThree largest numbers from the said array:\")\nprint(heap_queue_largest(nums,n))<｜end▁of▁sentence｜>"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n + 1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] \nn = 8\nprint(\"Count of ways is \" + str(count_ways(n)))<｜end▁of▁sentence｜>"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\tx = a ^ b \n\tif x and not(x & (x - 1)): \n\t\treturn True\n\treturn False\n\na = 10\nb = 12\nif differ_At_One_Bit_Pos(a, b): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\")<｜end▁of▁sentence｜>"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\timport re\n\tpattern = r\"\\b\\w{4,}\\b\"\n\tresult = re.findall(pattern, text)\n\treturn result\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_char_long(text))<｜end▁of▁sentence｜>"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t\"\"\"\n\tSquares numbers in nums\n\tnums: list of numbers\n\tReturns: list of numbers\n\t\"\"\"\n\treturn list(map(lambda x: x**2, nums))\n\n\ndef main():\n\tnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(square_nums(nums))\n\nif __name__ == '__main__':\n\tmain()<｜end▁of▁sentence｜>"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\ttmp = str + str \n\tn = len(str) \n\tfor i in range(1, n + 1): \n\t\tsubstring = tmp[i: n + i] \n\t\tif (str == substring): \n\t\t\treturn i \n\treturn n \nif __name__ == \"__main__\": \n\tstr = \"aaaab\"\n\tprint(find_Rotations(str))<｜end▁of▁sentence｜>"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[:n]\n\nlist1=[10,20,30,40,50,60,70,80,90,100]\nn=int(input(\"Enter the number of smallest items you want to get: \"))\nprint(small_nnum(list1,n))<｜end▁of▁sentence｜>"}
