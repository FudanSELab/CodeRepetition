{"ID": 0, "source": "HumanEval:HumanEval/0", "prompt": "from typing import List\n\n\n\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n\"\"\"\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n\"\"\"\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 1, "source": "HumanEval:HumanEval/1", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # TODO: Implement me\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\ndetermine if the groupings are \"balanced\" (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> is_balanced('( ) (( )) (( )( ))')\nTrue\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n\"\"\"\ndef is_balanced(paren_string: str) -> bool:\n    # TODO: Implement me\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\ndetermine if the groupings are \"balanced\" (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> is_balanced('( ) (( )) (( )( ))')\nTrue\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n\"\"\"\ndef is_balanced(paren_string: str) -> bool:\n    # TODO: Implement me\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\ndetermine if the groupings are \"balanced\" (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> is_balanced('( ) (( )) (( )( ))')\nTrue\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n>>> is_balanced('( ) (( )) (( )( )) )')\nFalse\n\"\"\"\ndef is_balanced(paren_string: str) -> bool:\n    # TODO: Implement me\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\ndetermine if the groupings are \"balanced\" (each open brace is properly closed) and"}
{"ID": 2, "source": "HumanEval:HumanEval/2", "prompt": "\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(lefto"}
{"ID": 3, "source": "HumanEval:HumanEval/3", "prompt": "from typing import List\n\n\n\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\n\"\"\" You're given a list of integers. Your task is to return the number of times that number\nappears in the list.\n>>> count_numbers([1, 2, 3, 1, 1, 2])\n{1: 3, 2: 2, 3: 1}\n\"\"\"\ndef count_numbers(numbers: List[int]) -> dict:\n    result = {}\n    for number in numbers:\n        if number in result:\n            result[number] += 1\n        else:\n            result[number] = 1\n    return result\n\n\n\"\"\" You're given a list of integers. Your task is to return the number of times that number\nappears in the list.\n>>> count_numbers([1, 2, 3, 1, 1, 2])\n{1: 3, 2: 2, 3: 1}\n\"\"\"\ndef count_numbers(numbers: List[int]) -> dict:\n    result = {}\n    for number in numbers:\n        if number in result:\n            result[number] += 1\n        else:\n            result[number] = 1\n    return result\n\n\n\"\"\" You're given a list of integers. Your task is to return the number of times that number\nappears in the list.\n>>> count_numbers([1, 2, 3, 1, 1, 2])\n{1: 3, 2: 2, 3: 1}\n\"\"\"\ndef count_numbers(numbers: List[int]) -> dict:\n    result = {}\n    for number in numbers:\n        if number in result:\n            result[number] += 1\n        else:\n            result[number] = 1\n    return result\n\n\n\"\"\" You're given a list of integers. Your task is to return the number of times that number\nappears in the list.\n>>> count_numbers([1, 2, 3, 1, 1, 2])\n{1: 3, 2: 2, "}
{"ID": 4, "source": "HumanEval:HumanEval/4", "prompt": "from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    :param numbers: list of numbers\n    :return: mean absolute deviation\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(number - mean) for number in numbers) / len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 5, "source": "HumanEval:HumanEval/5", "prompt": "from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_iterative([], 4)\n[]\n>>> intersperse_iterative([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_iterative(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_iterative_2([], 4)\n[]\n>>> intersperse_iterative_2([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_iterative_2(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_iterative_3([], 4)\n[]\n>>> intersperse_iterative_3([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_iterative_3(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = ["}
{"ID": 6, "source": "HumanEval:HumanEval/6", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n\"\"\"\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    :param paren_string: string of multiple groups of nested parentheses\n    :return: list of integers representing the deepest level of nesting of parentheses for each group\n    \"\"\"\n    paren_string = paren_string.split()\n    result = []\n    for paren_group in paren_string:\n        result.append(parse_nested_parens_helper(paren_group))\n    return result\n\n\ndef parse_nested_parens_helper(paren_group: str) -> int:\n    \"\"\"\n    :param paren_group: string of a single group of nested parentheses\n    :return: integer representing the deepest level of nesting of parentheses for the group\n    \"\"\"\n    max_depth = 0\n    curr_depth = 0\n    for char in paren_group:\n        if char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n    return max_depth\n\n\nif __name__ == '__main__':\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))<｜end▁of▁sentence｜>"}
{"ID": 7, "source": "HumanEval:HumanEval/7", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n\n\n\"\"\" Filter an input list of strings only for ones that do not contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['bacd', 'cde']\n\"\"\"\ndef filter_by_substring_not(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring not in string]\n\n\n\"\"\" Filter an input list of strings only for ones that contain all substrings from a given list\n>>> filter_by_substrings(['abc', 'bacd', 'cde', 'array'], ['a', 'b'])\n['abc', 'bacd']\n\"\"\"\ndef filter_by_substrings(strings: List[str], substrings: List[str]) -> List[str]:\n    return [string for string in strings if all(substring in string for substring in substrings)]\n\n\n\"\"\" Filter an input list of strings only for ones that contain any substrings from a given list\n>>> filter_by_substrings(['abc', 'bacd', 'cde', 'array'], ['a', 'b'])\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substrings_any(strings: List[str], substrings: List[str]) -> List[str]:\n    return [string for string in strings if any(substring in string for substring in substrings)]\n\n\n\"\"\" Filter an input list of strings only for ones that do not contain any substrings from a given list\n>>> filter_by_substrings_not(['abc', 'bacd', 'cde', 'array'], ['a', 'b'])\n['cde']\n\"\"\"\ndef filter_by_substrings_not(strings: List[str], substrings: List[str]) -> List[str]:\n    return [string for string in strings if not any(substring in string for substring in substrings)]\n\n\n\"\"\" Filter an input list of strings only for ones that contain all substrings from a given list\n>>> filter_by_substrings_not(['"}
{"ID": 8, "source": "HumanEval:HumanEval/8", "prompt": "from typing import List, Tuple\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List, Tuple\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n\"\"\"\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\n\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list."}
{"ID": 9, "source": "HumanEval:HumanEval/9", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n    return max_numbers\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max_2(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_numbers.append(numbers[i])\n        else:\n            max_numbers.append(max(max_numbers[i-1], numbers[i]))\n    return max_numbers\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max_3(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_numbers.append(numbers[i])\n        else:\n            max_numbers.append(max(max_numbers[i-1], numbers[i]))\n    return max_numbers\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max_4(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    for i in range(len(num"}
{"ID": 10, "source": "HumanEval:HumanEval/10", "prompt": "\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\nif not string:\nreturn ''\n\nfor i in range(len(string)):\nsuffix = string[i:]\nif is_palindrome(suffix):\nreturn string + suffix[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\nif not string:\nreturn ''\n\nfor i in range(len(string)):\nsuffix = string[i:]\nif is_palindrome(suffix):\nreturn string + suffix[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\nif not string:\nreturn ''\n\nfor"}
{"ID": 11, "source": "HumanEval:HumanEval/11", "prompt": "from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n\n\"\"\" Input is a list of strings consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> strings_xor(['010', '110', '101'])\n'100'\n\"\"\"\ndef strings_xor(l: List[str]) -> str:\n    return ''.join([str(sum([int(x) for x in y]) % 2) for y in zip(*l)])\n\n\n\"\"\" Input is a list of strings consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> strings_xor(['010', '110', '101'])\n'100'\n\"\"\"\ndef strings_xor(l: List[str]) -> str:\n    return ''.join([str(sum(map(int, y)) % 2) for y in zip(*l)])\n\n\n\"\"\" Input is a list of strings consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> strings_xor(['010', '110', '101'])\n'100'\n\"\"\"\ndef strings_xor(l: List[str]) -> str:\n    return ''.join([str(sum(map(int, y)) % 2) for y in zip(*l)])\n\n\n\"\"\" Input is a list of strings consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> strings_xor(['010', '110', '101'])\n'100'\n\"\"\"\ndef strings_xor(l: List[str]) -> str:\n    return ''.join([str(sum(map(int, y)) % 2) for y in zip(*l)])\n\n\n\"\"\" Input is a list of strings consisting only of 1s and 0s.\nPerform binary XOR"}
{"ID": 12, "source": "HumanEval:HumanEval/12", "prompt": "from typing import List, Optional\n\n\n\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n\"\"\"\ndef longest(strings: List[str]) -> Optional[str]:", "predict": "<｜begin▁of▁sentence｜>from typing import List, Optional\n\n\n\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n\"\"\"\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n\n\"\"\" Out of list of strings, return the shortest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> shortest([])\n\n>>> shortest(['a', 'b', 'c'])\n'a'\n>>> shortest(['a', 'bb', 'ccc'])\n'a'\n\"\"\"\ndef shortest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n\n\"\"\" Out of list of strings, return the one that is alphabetically first. Return the first one in\ncase of multiple strings that are alphabetically first. Return None in case the input list is empty.\n>>> first_alphabetically([])\n\n>>> first_alphabetically(['a', 'b', 'c'])\n'a'\n>>> first_alphabetically(['a', 'bb', 'ccc'])\n'a'\n>>> first_alphabetically(['aaa', 'bb', 'cc'])\n'aaa'\n>>> first_alphabetically(['aaa', 'bb', 'cc'])\n'aaa'\n\"\"\"\ndef first_alphabetically(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    first_string = strings[0]\n    for string in strings:\n        if string < first_string:\n            first_string = string\n    return first_string\n\n\n\"\"\" Out of list of strings, return the one that is alphabetically last. Return the first one in\ncase of multiple strings that are alphabetically last. Return None in case the input list is empty.\n>>> last_alphabetically([])\n\n>>> last_alphabetically(['a', 'b', 'c'])\n'c'\n>>> last_alphabet"}
{"ID": 13, "source": "HumanEval:HumanEval/13", "prompt": "\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\n\"\"\" Return a least common multiple of two integers a and b\n>>> least_common_multiple(3, 5)\n15\n>>> least_common_multiple(25, 15)\n75\n\"\"\"\ndef least_common_multiple(a: int, b: int) -> int:\n    return a * b // greatest_common_divisor(a, b)\n\n\n\"\"\" Return a list of prime numbers up to n\n>>> prime_numbers(10)\n[2, 3, 5, 7]\n>>> prime_numbers(20)\n[2, 3, 5, 7, 11, 13, 17, 19]\n\"\"\"\ndef prime_numbers(n: int) -> list:\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return [i for i in range(2, n + 1) if primes[i]]\n\n\n\"\"\" Return a list of prime factors of n\n>>> prime_factors(10)\n[2, 5]\n>>> prime_factors(20)\n[2, 2, 5]\n\"\"\"\ndef prime_factors(n: int) -> list:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\n\"\"\" Return a list of prime factors of n\n>>> prime_factors(10)\n[2, 5]\n>>> prime_factors(20)\n[2, 2, 5]\n\"\"\"\ndef prime_factors(n: int"}
{"ID": 14, "source": "HumanEval:HumanEval/14", "prompt": "from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n\"\"\" Return list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'bc', 'abc']\n\"\"\"\ndef all_suffixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string that start with the given prefix\n>>> substrings_starting_with('abc', 'a')\n['abc']\n\"\"\"\ndef substrings_starting_with(string: str, prefix: str) -> List[str]:\n    return [string[i:] for i in range(len(string)) if string[i:].startswith(prefix)]\n\n\n\"\"\" Return list of all substrings of the input string that end with the given suffix\n>>> substrings_ending_with('abc', 'c')\n['abc']\n\"\"\"\ndef substrings_ending_with(string: str, suffix: str) -> List[str]:\n    return [string[:i] for i in range(len(string)) if string[:i].endswith(suffix)]<｜end▁of▁sentence｜>"}
{"ID": 15, "source": "HumanEval:HumanEval/15", "prompt": "\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 16, "source": "HumanEval:HumanEval/16", "prompt": "\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\n\"\"\" Given a string, find out how many times each character (regardless of case) occurs in it\n>>> count_characters('xyzXYZ')\n{'x': 1, 'y': 1, 'z': 1}\n>>> count_characters('Jerry')\n{'j': 1, 'e': 1, 'r': 2, 'y': 1}\n\"\"\"\ndef count_characters(string: str) -> dict:\n    result = {}\n    for char in string.lower():\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n\n\n\n\"\"\" Given a string, find out how many times each word occurs in it\n>>> count_words('Jerry of the of the same')\n{'jerry': 1, 'of': 2, 'the': 2, 'same': 1}\n\"\"\"\ndef count_words(string: str) -> dict:\n    result = {}\n    for word in string.lower().split():\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\n\n\n\"\"\" Given a string, find out how many times each word (regardless of case) occurs in it\n>>> count_words_case_insensitive('Jerry of the of The same')\n{'jerry': 1, 'of': 2, 'the': 2, 'same': 1}\n\"\"\"\ndef count_words_case_insensitive(string: str) -> dict:\n    result = {}\n    for word in string.lower().split():\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\n\n\n\"\"\" Given a string, find out how many times each word (regardless of case) occurs in it\n>>> count_words_case_insensitive('Jerry of the of The same')\n{'jerry': 1, 'of': 2, 'the': 2, 'same': 1}\n\"\"\"\ndef count_words_case_insensitive(string: str) -"}
{"ID": 17, "source": "HumanEval:HumanEval/17", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\"\"\"\ndef parse_music(music_string: str) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\"\"\"\ndef parse_music(music_string: str) -> List[int]:\n    pass\n\n\n\"\"\" Input to this function is a list of integers representing how many beats does each note last.\nYour task is to return a string representing musical notes in a special ASCII format.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n'o o| .| o| o| .| .| .| .| .| o o'\n\"\"\"\ndef unparse_music(music_list: List[int]) -> str:\n    pass<｜end▁of▁sentence｜>"}
{"ID": 18, "source": "HumanEval:HumanEval/18", "prompt": "\n\n\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n\"\"\"\ndef how_many_times(string: str, substring: str) -> int:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n\"\"\"\ndef how_many_times(string: str, substring: str) -> int:\n    if len(string) < len(substring):\n        return 0\n    if string[:len(substring)] == substring:\n        return 1 + how_many_times(string[1:], substring)\n    return how_many_times(string[1:], substring)\n\n\n\n\"\"\" Find how many times a given substring can be found in the original string. Do not count overlaping cases.\n>>> how_many_times_no_overlap('', 'a')\n0\n>>> how_many_times_no_overlap('aaa', 'a')\n3\n>>> how_many_times_no_overlap('aaaa', 'aa')\n2\n\"\"\"\ndef how_many_times_no_overlap(string: str, substring: str) -> int:\n    if len(string) < len(substring):\n        return 0\n    if string[:len(substring)] == substring:\n        return 1 + how_many_times_no_overlap(string[len(substring):], substring)\n    return how_many_times_no_overlap(string[1:], substring)\n\n\n\n\"\"\" Find the longest substring of a given string that is a palindrome.\n>>> longest_palindrome('')\n''\n>>> longest_palindrome('a')\n'a'\n>>> longest_palindrome('aa')\n'aa'\n>>> longest_palindrome('ab')\n'a'\n>>> longest_palindrome('aba')\n'aba'\n>>> longest_palindrome('abba')\n'abba'\n>>> longest_palindrome('abbac')\n'abba'\n>>> longest_palindrome('abbacabba')\n'abbacabba'\n>>> longest_palindrome('abbacabbac')\n'abbacabba'\n>>> longest_palindrome('abbacabbacabba')\n'abbacabbacabba'\n>>> longest_palindrome('abbacabbacabbac')\n'abbacabbacabba'\n>>> longest_palindrome('abbacabbacabbacabba')\n'"}
{"ID": 19, "source": "HumanEval:HumanEval/19", "prompt": "from typing import List\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n\"\"\"\ndef sort_numbers(numbers: str) -> str:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n\"\"\"\ndef sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    number_to_numeral = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine'\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: numeral_to_number[x])\n    return ' '.join(numbers_list)\n\n\n\"\"\" Input is a list of integers.\nReturn the list sorted from smallest to largest.\n>>> sort_numbers([3, 1, 5])\n[1, 3, 5]\n\"\"\"\ndef sort_numbers_list(numbers: List[int]) -> List[int]:\n    numbers.sort()\n    return numbers\n\n\n\"\"\" Input is a list of integers.\nReturn the list sorted from smallest to largest.\n>>> sort_numbers_list_reverse([3, 1, 5])\n[5, 3, 1]\n\"\"\"\ndef sort_numbers_list_reverse(numbers: List[int]) -> List[int]:\n    numbers.sort(reverse=True)\n    return numbers\n\n\n\"\"\" Input is a list of integers.\nReturn the list sorted from smallest to largest.\n>>> sort_numbers_list_reverse_in_place([3, 1, 5])\n[5, 3, 1]\n\"\"\"\ndef sort_numbers_list_reverse_in_place(numbers: List[int]) -> List[int]:\n    numbers.sort(reverse=True)\n    return numbers\n\n\n\"\"\" Input is a list of integers.\nReturn"}
{"ID": 20, "source": "HumanEval:HumanEval/20", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:", "predict": "<｜begin▁of▁sentence｜>from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    pass\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements_v2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements_v2([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements_v2(numbers: List[float]) -> Tuple[float, float]:\n    pass<｜end▁of▁sentence｜>"}
{"ID": 21, "source": "HumanEval:HumanEval/21", "prompt": "from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace(numbers: List[float]) -> None:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace_2(numbers: List[float]) -> None:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    for i, num in enumerate(numbers):\n        numbers[i] = (num - min_num) / (max_num - min_num)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0."}
{"ID": 22, "source": "HumanEval:HumanEval/22", "prompt": "from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n\n\"\"\" Create list of integers from 0 to given number (excluding)\n>>> create_integer_list(4)\n[0, 1, 2, 3]\n>>> create_integer_list(0)\n[]\n\"\"\"\ndef create_integer_list(number: int) -> List[int]:\n    return [value for value in range(number)]\n\n\n\"\"\" Create list of integers from 0 to given number (excluding)\nusing while loop\n>>> create_integer_list_with_while_loop(4)\n[0, 1, 2, 3]\n>>> create_integer_list_with_while_loop(0)\n[]\n\"\"\"\ndef create_integer_list_with_while_loop(number: int) -> List[int]:\n    result = []\n    i = 0\n    while i < number:\n        result.append(i)\n        i += 1\n    return result\n\n\n\"\"\" Create list of integers from 0 to given number (excluding)\nusing for loop\n>>> create_integer_list_with_for_loop(4)\n[0, 1, 2, 3]\n>>> create_integer_list_with_for_loop(0)\n[]\n\"\"\"\ndef create_integer_list_with_for_loop(number: int) -> List[int]:\n    result = []\n    for i in range(number):\n        result.append(i)\n    return result\n\n\n\"\"\" Create list of integers from 0 to given number (excluding)\nusing list comprehension\n>>> create_integer_list_with_comprehension(4)\n[0, 1, 2, 3]\n>>> create_integer_list_with_comprehension(0)\n[]\n\"\"\"\ndef create_integer_list_with_comprehension(number: int) -> List[int]:\n    return [i for i in range(number)]\n\n\n\"\"\" Create list of integers from 0 to given number (excluding)\nusing recursion\n>>> create_integer_list_with_recursion(4)\n[0, 1, 2, "}
{"ID": 23, "source": "HumanEval:HumanEval/23", "prompt": "\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:\n    return len(string)\n\n\n\"\"\" Return first character of given string\n>>> first_char('')\n''\n>>> first_char('abc')\n'a'\n\"\"\"\ndef first_char(string: str) -> str:\n    return string[0]\n\n\n\"\"\" Return last character of given string\n>>> last_char('')\n''\n>>> last_char('abc')\n'c'\n\"\"\"\ndef last_char(string: str) -> str:\n    return string[-1]\n\n\n\"\"\" Return input string without first and last characters\n>>> trim_edges('Hello World')\n'ello Worl'\n>>> trim_edges('')\n''\n>>> trim_edges('a')\n''\n\"\"\"\ndef trim_edges(string: str) -> str:\n    return string[1:-1]\n\n\n\"\"\" Return input string repeated n times\n>>> repeat('a', 3)\n'aaa'\n>>> repeat('abc', 0)\n''\n>>> repeat('abc', -1)\n''\n\"\"\"\ndef repeat(string: str, n: int) -> str:\n    return string * n\n\n\n\"\"\" Return input string repeated n times,\n    delimited by the given delimiter\n>>> repeat_delimited('a', 3, '-')\n'a-a-a'\n>>> repeat_delimited('abc', 0, '-')\n''\n>>> repeat_delimited('abc', -1, '-')\n''\n\"\"\"\ndef repeat_delimited(string: str, n: int, delimiter: str) -> str:\n    return delimiter.join([string] * n)\n\n\n\"\"\" Return input string repeated n times,\n    delimited by the given delimiter,\n    and ending with the given ending\n>>> repeat_delimited_ending('a', 3, '-', '+')\n'a-a-a+'\n>>> repeat_delimited_ending('abc', 0, '-', '+')\n'+'\n>>> repeat_delimited_ending('abc', -1, '-', '+')\n'+'\n\"\"\"\ndef repeat_delimited_ending(string: str, n: int, delim"}
{"ID": 24, "source": "HumanEval:HumanEval/24", "prompt": "\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:\n    \"\"\"Return the largest divisor of n that is smaller than n.\n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    return n - 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 25, "source": "HumanEval:HumanEval/25", "prompt": "from typing import List\n\n\n\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n\"\"\"\ndef factorize(n: int) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n\"\"\"\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n\n\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize_recursive(8)\n[2, 2, 2]\n>>> factorize_recursive(25)\n[5, 5]\n>>> factorize_recursive(70)\n[2, 5, 7]\n\"\"\"\ndef factorize_recursive(n: int) -> List[int]:\n    if n == 1:\n        return []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return [i] + factorize_recursive(n // i)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()<｜end▁of▁sentence｜>"}
{"ID": 26, "source": "HumanEval:HumanEval/26", "prompt": "from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nDo not keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_no_order(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_no_order_no_sets(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nDo not keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_no_order_no_sets_no_loops(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_no_order_no_sets_no_loops_no_recursion(num"}
{"ID": 27, "source": "HumanEval:HumanEval/27", "prompt": "\n\n\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n\"\"\"\ndef flip_case(string: str) -> str:", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n\"\"\"\ndef flip_case(string: str) -> str:\n    \"\"\" Flip case of a string.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 28, "source": "HumanEval:HumanEval/28", "prompt": "from typing import List\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\"\"\"\ndef concatenate(strings: List[str]) -> str:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\"\"\"\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate_with_separator([])\n''\n>>> concatenate_with_separator(['a', 'b', 'c'])\n'a, b, c'\n\"\"\"\ndef concatenate_with_separator(strings: List[str]) -> str:\n    return ', '.join(strings)\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate_with_separator_and_last(['a', 'b', 'c'])\n'a, b and c'\n\"\"\"\ndef concatenate_with_separator_and_last(strings: List[str]) -> str:\n    if len(strings) == 0:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    return ', '.join(strings[:-1]) + ' and ' + strings[-1]\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate_with_separator_and_last_and_oxford_comma(['a', 'b', 'c'])\n'a, b, and c'\n\"\"\"\ndef concatenate_with_separator_and_last_and_oxford_comma(strings: List[str]) -> str:\n    if len(strings) == 0:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    return ', '.join(strings[:-1]) + ', and ' + strings[-1]\n\n\n\"\"\" Concatenate list of strings into a single string\n>>> concatenate_with_separator_and_last_and_oxford_comma_and_last(['a', 'b', 'c'])\n'a, b, and c'\n\"\"\"\ndef concatenate_with_separator_and_last_and_oxford_comma_and_last(strings: List[str]) -> str:\n    if len(strings) == 0:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    return ', '.join(strings[:-1]) + ', and ' + strings[-1]\n\n\n\"\"\" Concat"}
{"ID": 29, "source": "HumanEval:HumanEval/29", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:", "predict": "<｜begin▁of▁sentence｜>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n\n\"\"\" Filter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'y')\n['array']\n\"\"\"\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    return [s for s in strings if s.endswith(suffix)]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', '"}
{"ID": 30, "source": "HumanEval:HumanEval/30", "prompt": "\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n\n\n\n\"\"\"Return only even numbers in the list.\n>>> get_even([-1, 2, -4, 5, 6])\n[2, -4, 6]\n>>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[-4, 2, 0]\n\"\"\"\ndef get_even(l: list):\n    return [x for x in l if x % 2 == 0]\n\n\n\n\"\"\"Return only odd numbers in the list.\n>>> get_odd([-1, 2, -4, 5, 6])\n[-1, 5]\n>>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[3, -5, 3, 9, 1, -10]\n\"\"\"\ndef get_odd(l: list):\n    return [x for x in l if x % 2 != 0]\n\n\n\n\"\"\"Return only negative numbers in the list.\n>>> get_negative([-1, 2, -4, 5, 6])\n[-1, -4]\n>>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[-5, -3, -10]\n\"\"\"\ndef get_negative(l: list):\n    return [x for x in l if x < 0]\n\n\n\n\"\"\"Return only numbers that are divisible by 3 in the list.\n>>> get_divisible_by_3([-1, 2, -4, 5, 6])\n[6]\n>>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[3, 9]\n\"\"\"\ndef get_divisible_by_3(l: list):\n    return ["}
{"ID": 31, "source": "HumanEval:HumanEval/31", "prompt": "\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 32, "source": "HumanEval:HumanEval/32", "prompt": "import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):", "predict": "<｜begin▁of▁sentence｜>import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero_helper(xs: list, x: float):\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return x - poly(xs, x) / poly(derivative(xs), x)\n\ndef derivative(xs: list):\n    return [coeff * i for i, coeff in enumerate(xs)][1:]\n\ndef find_zero_iter(xs: list, x: float, epsilon: float):\n    if abs(poly(xs, x)) < epsilon:\n        return x\n    else:\n        return find_zero_iter(xs, find_zero_helper(xs, x), epsilon)\n\nreturn find_zero_iter(xs, find_zero_helper(xs, 0), 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 33, "source": "HumanEval:HumanEval/33", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    for i in range(len(l_prime)):\n        if i % 3 == 0:\n            l_prime[i] = sorted(l_prime[i])\n    return l_prime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 34, "source": "HumanEval:HumanEval/34", "prompt": "\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique("}
{"ID": 35, "source": "HumanEval:HumanEval/35", "prompt": "\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\n\n\"\"\"Return minimum element in the list.\n>>> min_element([1, 2, 3])\n1\n>>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-10\n\"\"\"\ndef min_element(l: list):\n    min_element = l[0]\n    for i in l:\n        if i < min_element:\n            min_element = i\n    return min_element\n\n\n\n\"\"\"Return average value of all elements in the list.\n>>> average_value([1, 2, 3])\n2.0\n>>> average_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n10.0\n\"\"\"\ndef average_value(l: list):\n    sum = 0\n    for i in l:\n        sum += i\n    return sum / len(l)\n\n\n\n\"\"\"Return number of elements in the list that are larger than average.\n>>> larger_than_average([1, 2, 3])\n0\n>>> larger_than_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n4\n\"\"\"\ndef larger_than_average(l: list):\n    average = average_value(l)\n    count = 0\n    for i in l:\n        if i > average:\n            count += 1\n    return count\n\n\n\n\"\"\"Return number of elements in the list that are smaller than average.\n>>> smaller_than_average([1, 2, 3])\n0\n>>> smaller_than_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n5\n\"\"\"\ndef smaller_than_average(l:"}
{"ID": 36, "source": "HumanEval:HumanEval/36", "prompt": "\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n\"\"\"\ndef fizz_buzz(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n\"\"\"\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz_2(50)\n0\n>>> fizz_buzz_2(78)\n2\n>>> fizz_buzz_2(79)\n3\n\"\"\"\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\n\n\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz_3(50)\n0\n>>> fizz_buzz_3(78)\n2\n>>> fizz_buzz_3(79)\n3\n\"\"\"\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3"}
{"ID": 37, "source": "HumanEval:HumanEval/37", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_odd.sort()\n    l_even.extend(l_odd)\n    return l_even\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 38, "source": "HumanEval:HumanEval/38", "prompt": "\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef encode_cyclic(s: str):\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups ="}
{"ID": 39, "source": "HumanEval:HumanEval/39", "prompt": "\n\n\"\"\"\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n\"\"\"\ndef prime_fib(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n\"\"\"\ndef prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = 2\n        b = 3\n        for i in range(n-2):\n            c = a + b\n            a = b\n            b = c\n            if is_prime(c):\n                return c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 40, "source": "HumanEval:HumanEval/40", "prompt": "\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 41, "source": "HumanEval:HumanEval/41", "prompt": "\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0.\n\"\"\"\ndef sum_to_zero(nums: list):\n    pass\n\n\n\n\"\"\"\nThis function takes in a list of integers and returns the number of\npairs of integers that sum to 0"}
{"ID": 42, "source": "HumanEval:HumanEval/42", "prompt": "\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x+1 for x in l]\n\n\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x+1 for x in l]\n\n\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x+1 for x in l]\n\n\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x+1 for x in l]\n\n\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n"}
{"ID": 43, "source": "HumanEval:HumanEval/43", "prompt": "\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 44, "source": "HumanEval:HumanEval/44", "prompt": "\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 45, "source": "HumanEval:HumanEval/45", "prompt": "\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, "}
{"ID": 46, "source": "HumanEval:HumanEval/46", "prompt": "\n\n\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n\"\"\"\ndef fib4(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n\"\"\"\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 47, "source": "HumanEval:HumanEval/47", "prompt": "\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\n\"\"\"Return the mode of elements in the list l.\n>>> mode([3, 1, 2, 4, 5])\n[3, 1, 2, 4, 5]\n>>> mode([-10, 4, 6, 1000, 10, 20])\n[4, 6, 1000, 10, 20]\n\"\"\"\ndef mode(l: list):\n    return l\n\n\n\"\"\"Return the range of elements in the list l.\n>>> range([3, 1, 2, 4, 5])\n4\n>>> range([-10, 4, 6, 1000, 10, 20])\n1010\n\"\"\"\ndef range(l: list):\n    return max(l) - min(l)\n\n\n\"\"\"Return the mean of elements in the list l.\n>>> mean([3, 1, 2, 4, 5])\n3.0\n>>> mean([-10, 4, 6, 1000, 10, 20])\n101.0\n\"\"\"\ndef mean(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the variance of elements in the list l.\n>>> variance([3, 1, 2, 4, 5])\n2.0\n>>> variance([-10, 4, 6, 1000, 10, 20])\n10000.0\n\"\"\"\ndef variance(l: list):\n    return sum([(x - mean(l)) ** 2 for x in l]) / len(l)\n\n\n\"\"\"Return the standard deviation of elements in the list l.\n>>> stddev([3, 1, 2, 4, 5])\n1.414213562"}
{"ID": 48, "source": "HumanEval:HumanEval/48", "prompt": "\n\n\"\"\"\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n\"\"\"\ndef is_palindrome(text: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n\"\"\"\ndef is_palindrome(text: str):\n    return text == text[::-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 49, "source": "HumanEval:HumanEval/49", "prompt": "\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n // 2, p) ** 2 % p\n\n\n\"\"\"Return the nth prime number.\n>>> nth_prime(1)\n2\n>>> nth_prime(2)\n3\n>>> nth_prime(3)\n5\n>>> nth_prime(4)\n7\n>>> nth_prime(5)\n11\n>>> nth_prime(6)\n13\n>>> nth_prime(7)\n17\n>>> nth_prime(8)\n19\n>>> nth_prime(9)\n23\n>>> nth_prime(10)\n29\n>>> nth_prime(11)\n31\n>>> nth_prime(12)\n37\n>>> nth_prime(13)\n41\n>>> nth_prime(14)\n43\n>>> nth_prime(15)\n47\n>>> nth_prime(16)\n53\n>>> nth_prime(17)\n59\n>>> nth_prime(18)\n61\n>>> nth_prime(19)\n67\n>>> nth_prime(20)\n71\n>>> nth_prime(21)\n73\n>>> nth_prime(22)\n79\n>>> nth_prime(23)\n83\n>>> nth_prime(24)\n89\n>>> nth_prime(25)\n97\n>>> nth_prime(26)\n101\n>>> nth_prime(27)\n103\n>>> nth_prime(28)\n107\n>>> nth_prime(29)\n109\n>>> nth_prime(30)\n113\n>>> nth_prime(31)\n127\n>>> nth_prime(32)\n131\n>>> nth_prime(33)\n137\n>>> nth_prime(34)\n1"}
{"ID": 50, "source": "HumanEval:HumanEval/50", "prompt": "\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])<｜end▁of▁sentence｜>"}
{"ID": 51, "source": "HumanEval:HumanEval/51", "prompt": "\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 52, "source": "HumanEval:HumanEval/52", "prompt": "\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 53, "source": "HumanEval:HumanEval/53", "prompt": "\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):\n    return x+y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 54, "source": "HumanEval:HumanEval/54", "prompt": "\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars(s0: str, s1: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\ndef same_chars(s0: str, s1: str):\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 55, "source": "HumanEval:HumanEval/55", "prompt": "\n\n\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n\"\"\"\ndef fib(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n\"\"\"\ndef fib(n: int):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 56, "source": "HumanEval:HumanEval/56", "prompt": "\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 57, "source": "HumanEval:HumanEval/57", "prompt": "\n\n\"\"\"Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n\n\"\"\"Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n\n\"\"\"Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n\n\"\"\"Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n\"\"\"\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\n\n\"\"\"Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1"}
{"ID": 58, "source": "HumanEval:HumanEval/58", "prompt": "\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 59, "source": "HumanEval:HumanEval/59", "prompt": "\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    \"\"\"Return the"}
{"ID": 60, "source": "HumanEval:HumanEval/60", "prompt": "\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 61, "source": "HumanEval:HumanEval/61", "prompt": "\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 62, "source": "HumanEval:HumanEval/62", "prompt": "\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return integral of this polynomial in the same form.\n>>> integral([3, 1, 2, 4, 5])\n[0, 3, 0.5, 0.6666666666666666, 1.6, 2.5]\n>>> integral([1, 2, 3])\n[0, 1, 1, 1]\n\"\"\"\ndef integral(xs: list):\n    return [0] + [xs[i] / (i + 1) for i in range(len(xs))]\n\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return definite integral of this polynomial in the same form.\n>>> integral_from_to([3, 1, 2, 4, 5], 0, 1)\n1.6666666666666666\n>>> integral_from_to([1, 2, 3], 0, 1)\n1.5\n\"\"\"\ndef integral_from_to(xs: list, a: float, b: float):\n    return sum([xs[i] / (i + 1) * (b ** (i + 1) - a ** (i + 1)) for i in range(len(xs))])\n\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return definite integral of this polynomial in the same form.\n>>> integral_from_to([3, 1, 2, 4, 5], 0, 1)\n1.6666666666666666\n>>> integral_from_to([1, 2, 3], 0, 1)\n1.5\n\"\"\"\ndef integral_from"}
{"ID": 63, "source": "HumanEval:HumanEval/63", "prompt": "\n\n\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n\"\"\"\ndef fibfib(n: int):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n\"\"\"\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 64, "source": "HumanEval:HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\"\ndef vowels_count(s):", "predict": "<｜begin▁of▁sentence｜>\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\"\ndef vowels_count(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"xyz\") == 0\n    assert vowels_count(\"a\") == 1\n    assert vowels_count(\"A\") == 1\n    assert vowels_count(\"AaEeIiOoUu\") == 10\n    assert vowels_count(\"AaEeIiOoUuY\") == 10\n    assert vowels_count(\"AaEeIiOoUuYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyY\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyY\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyY\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYyY\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYyYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYyYyY\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYyYyYy\") == 11\n    assert vowels_count(\"AaEeIiOoUuYyYyYyYyY"}
{"ID": 65, "source": "HumanEval:HumanEval/65", "prompt": "\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the number of digits in the integer x.\n>>> num_digits(12)\n2\n>>> num_digits(123)\n3\n\"\"\"\ndef num_digits("}
{"ID": 66, "source": "HumanEval:HumanEval/66", "prompt": "\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n\"\"\"\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digit"}
{"ID": 67, "source": "HumanEval:HumanEval/67", "prompt": "\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):\n    # write your code here\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 68, "source": "HumanEval:HumanEval/68", "prompt": "\n\"\"\"\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n\"\"\"\ndef pluck(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n\"\"\"\ndef pluck(arr):\n    # WRITE YOUR BRILLIANT CODE HERE\n    return []\n\n\nif __name__ == '__main__':\n    arr = [int(x) for x in input().split()]\n    res = pluck(arr)\n    print(' '.join(map(str, res)))<｜end▁of▁sentence｜>"}
{"ID": 69, "source": "HumanEval:HumanEval/69", "prompt": "\n\ndef search(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef search(lst):\n    for i in range(len(lst)):\n        if lst[i] == i:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    lst = [-10, -5, 0, 3, 7]\n    print(search(lst))<｜end▁of▁sentence｜>"}
{"ID": 70, "source": "HumanEval:HumanEval/70", "prompt": "\n\ndef strange_sort_list(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef strange_sort_list(lst):\n    return sorted(lst, key=lambda x: str(x))\n\n\ndef strange_sort_tuple(tpl):\n    return tuple(sorted(tpl, key=lambda x: str(x)))\n\n\ndef strange_sort_dict(dct):\n    return dict(sorted(dct.items(), key=lambda x: str(x[0])))\n\n\ndef strange_sort_set(st):\n    return sorted(st, key=lambda x: str(x))\n\n\ndef strange_sort_str(string):\n    return ''.join(sorted(string, key=lambda x: str(x)))\n\n\ndef strange_sort_int(num):\n    return int(''.join(sorted(str(num), key=lambda x: str(x))))\n\n\ndef strange_sort_float(num):\n    return float(''.join(sorted(str(num), key=lambda x: str(x))))\n\n\ndef strange_sort_bool(boolean):\n    return boolean\n\n\ndef strange_sort_none(none):\n    return none\n\n\ndef strange_sort(obj):\n    if isinstance(obj, list):\n        return strange_sort_list(obj)\n    elif isinstance(obj, tuple):\n        return strange_sort_tuple(obj)\n    elif isinstance(obj, dict):\n        return strange_sort_dict(obj)\n    elif isinstance(obj, set):\n        return strange_sort_set(obj)\n    elif isinstance(obj, str):\n        return strange_sort_str(obj)\n    elif isinstance(obj, int):\n        return strange_sort_int(obj)\n    elif isinstance(obj, float):\n        return strange_sort_float(obj)\n    elif isinstance(obj, bool):\n        return strange_sort_bool(obj)\n    elif isinstance(obj, type(None)):\n        return strange_sort_none(obj)\n    else:\n        raise TypeError(f\"Unsupported type: {type(obj)}\")\n\n\nif __name__ == '__main__':\n    print(strange_sort([3, 2, 1]))\n"}
{"ID": 71, "source": "HumanEval:HumanEval/71", "prompt": "\n\ndef triangle_area(a, b, c):", "predict": "<｜begin▁of▁sentence｜>\n\ndef triangle_area(a, b, c):\n    p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n\ndef triangle_perimeter(a, b, c):\n    return a + b + c\n\n\ndef rectangle_area(a, b):\n    return a * b\n\n\ndef rectangle_perimeter(a, b):\n    return 2 * (a + b)\n\n\ndef circle_area(r):\n    return 3.14 * r ** 2\n\n\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n\ndef square_area(a):\n    return a ** 2\n\n\ndef square_perimeter(a):\n    return 4 * a\n\n\ndef pentagon_area(a):\n    return 1 / 4 * (5 * (5 + 2 * (5 ** 0.5))) ** 0.5 * a ** 2\n\n\ndef pentagon_perimeter(a):\n    return 5 * a\n\n\ndef hexagon_area(a):\n    return 3 * (3 ** 0.5) / 2 * a ** 2\n\n\ndef hexagon_perimeter(a):\n    return 6 * a\n\n\ndef heptagon_area(a):\n    return 7 / 4 * a ** 2 * (3 ** 0.5)\n\n\ndef heptagon_perimeter(a):\n    return 7 * a\n\n\ndef octagon_area(a):\n    return 2 * (1 + (2 ** 0.5)) * a ** 2\n\n\ndef octagon_perimeter(a):\n    return 8 * a\n\n\ndef nonagon_area(a):\n    return 9 / 4 * a ** 2 * (1 / (2 ** 0.5))\n\n\ndef nonagon_perimeter(a):\n    return 9 * a\n\n\ndef decagon_area(a):\n    return 5 / 2 * a ** 2 * (5 + 2 * (5 ** 0.5)) ** 0.5"}
{"ID": 72, "source": "HumanEval:HumanEval/72", "prompt": "\n\ndef will_it_fly(q,w):", "predict": "<｜begin▁of▁sentence｜>\n\ndef will_it_fly(q,w):\n    if q == \"bird\" and w == \"eagle\":\n        return True\n    elif q == \"bird\" and w == \"kiwi\":\n        return False\n    elif q == \"dog\" and w == \"eagle\":\n        return False\n    elif q == \"dog\" and w == \"kiwi\":\n        return False\n    elif q == \"dog\" and w == \"snake\":\n        return True\n    elif q == \"human\" and w == \"eagle\":\n        return False\n    elif q == \"human\" and w == \"kiwi\":\n        return False\n    elif q == \"human\" and w == \"snake\":\n        return False\n    elif q == \"snake\" and w == \"eagle\":\n        return False\n    elif q == \"snake\" and w == \"kiwi\":\n        return True\n    elif q == \"snake\" and w == \"snake\":\n        return False\n    elif q == \"kiwi\" and w == \"eagle\":\n        return False\n    elif q == \"kiwi\" and w == \"kiwi\":\n        return False\n    elif q == \"kiwi\" and w == \"snake\":\n        return False\n    elif q == \"eagle\" and w == \"eagle\":\n        return True\n    elif q == \"eagle\" and w == \"kiwi\":\n        return False\n    elif q == \"eagle\" and w == \"snake\":\n        return False\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 73, "source": "HumanEval:HumanEval/73", "prompt": "\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):\n    \"\"\"\n    :param arr: list[int]\n    :return: int\n    \"\"\"\n    # WRITE YOUR BRILLIANT CODE HERE\n    return 0\n\n\nif __name__ == '__main__':\n    arr = [int(x) for x in input().split()]\n    res = smallest_change(arr)\n    print(res)<｜end▁of▁sentence｜>"}
{"ID": 74, "source": "HumanEval:HumanEval/74", "prompt": "\n\ndef total_match(lst1, lst2):", "predict": "<｜begin▁of▁sentence｜>\n\ndef total_match(lst1, lst2):\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i]:\n            count += 1\n    return count\n\n\ndef main():\n    lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    lst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(total_match(lst1, lst2))\n\n\nif __name__ == \"__main__\":\n    main()<｜end▁of▁sentence｜>"}
{"ID": 75, "source": "HumanEval:HumanEval/75", "prompt": "\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l):\n    pass\n\n\n\"\"\"Write a function that returns the sum of the numbers in the given list.\nExample:\nsum_list([1, 2, 3, 4, 5]) == 15\n\"\"\"\ndef sum_list(l"}
{"ID": 76, "source": "HumanEval:HumanEval/76", "prompt": "\n\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n\"\"\"\ndef is_simple_power(x, n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n\"\"\"\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x == 0:\n        return False\n    elif n == 1:\n        return False\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 77, "source": "HumanEval:HumanEval/77", "prompt": "\n\ndef iscube(a):", "predict": "<｜begin▁of▁sentence｜>\n\ndef iscube(a):\n    if a<0:\n        return False\n    else:\n        return round(a**(1/3))**3==a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 78, "source": "HumanEval:HumanEval/78", "prompt": "\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    return hex_dict[num]\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_primes(num):\n    count = 0\n    for i in num:\n        if is_prime(hex_key(i)):\n            count += 1\n    return count\n\nprint(hex_primes(\"AB\"))\nprint(hex_primes(\"1077E\"))\nprint(hex_primes(\"ABED1A33\"))\nprint(hex_primes(\"123456789ABCDEF0\"))\nprint(hex_primes(\"2020\"))<｜end▁of▁sentence｜>"}
{"ID": 79, "source": "HumanEval:HumanEval/79", "prompt": "\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n\n\n\"\"\"You will be given a number in binary form and your task is to convert it to\ndecimal format. The function should return an integer, representing the decimal number.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nbinary_to_decimal(\"db1111db\")   # returns 15\nbinary_to_decimal(\"db100000db\")  # returns 32\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = binary[2:-2]\n    return int(binary, 2)\n\n\n\"\"\"You will be given a number in binary form and your task is to convert it to\nhexadecimal format. The function should return a string, with each character representing a hexadecimal\nnumber. Each character in the string will be '0'-'9' or 'a'-'f'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nbinary_to_hexadecimal(\"db1111db\")   # returns \"f\"\nbinary_to_hexadecimal(\"db100000db\")  # returns \"10\"\n\"\"\"\ndef binary_to_hexadecimal(binary):\n    binary = binary[2:-2]\n    return hex(int(binary, 2))[2:]\n\n\n\"\"\"You will be given a number in hexadecimal form and your task is to convert it to\ndecimal format. The function should return an integer, representing the decimal number.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nhexadecimal_to_decimal(\"db1111db\")   # returns 15\nhexadecimal_to_decimal(\"db100000db\")  # returns 32\n\"\"\"\ndef"}
{"ID": 80, "source": "HumanEval:HumanEval/80", "prompt": "\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n\"\"\"\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n\"\"\"You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example"}
{"ID": 81, "source": "HumanEval:HumanEval/81", "prompt": "\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 82, "source": "HumanEval:HumanEval/82", "prompt": "\n\"\"\"Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\"\"\"\ndef prime_length(string):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\"\"\"\ndef prime_length(string):\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n\n\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\nprint(prime_length(''))\nprint(prime_length('a'))\nprint(prime_length('ab'))\nprint(prime_length('abc'))\nprint(prime_length('abcd'))\nprint(prime_length('abcde'))\nprint(prime_length('abcdef'))\nprint(prime_length('abcdefg'))\nprint(prime_length('abcdefgh'))\nprint(prime_length('abcdefghi'))\nprint(prime_length('abcdefghij'))\nprint(prime_length('abcdefghijk'))\nprint(prime_length('abcdefghijkl'))\nprint(prime_length('abcdefghijklm'))\nprint(prime_length('abcdefghijklmn'))\nprint(prime_length('abcdefghijklmno'))\nprint(prime_length('abcdefghijklmnop'))\nprint(prime_length('abcdefghijklmnopq'))\nprint(prime_length('abcdefghijklmnopqr'))\nprint(prime_length('abcdefghijklmnopqrs'))\nprint(prime_length('abcdefghijklmnopqrst'))\nprint(prime_length('abcdefghijklmnopqrstu'))\nprint(prime_length('abcdefghijklmnopqrstuv'))\nprint(prime_length('abcdefghijklmnopqrstuvw'))\nprint(prime_length('abcdefghijklmnopqrstuvwx'))\nprint(prime_length('abcdefghijklmnopqrstuvwxy'))\nprint(prime_length('abcdefghijklmnopqrstuvwxyz'))\nprint(prime_length('abcdefghijklmnopqrstuvwxyzabcdef"}
{"ID": 83, "source": "HumanEval:HumanEval/83", "prompt": "\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):\n    if n == 1:\n        return 10\n    if n == 2:\n        return 100\n    if n == 3:\n        return 1000\n    if n == 4:\n        return 10000\n    if n == 5:\n        return 100000\n    if n == 6:\n        return 1000000\n    if n == 7:\n        return 10000000\n    if n == 8:\n        return 100000000\n    if n == 9:\n        return 1000000000\n    if n == 10:\n        return 10000000000\n    if n == 11:\n        return 100000000000\n    if n == 12:\n        return 1000000000000\n    if n == 13:\n        return 10000000000000\n    if n == 14:\n        return 100000000000000\n    if n == 15:\n        return 1000000000000000\n    if n == 16:\n        return 10000000000000000\n    if n == 17:\n        return 100000000000000000\n    if n == 18:\n        return 1000000000000000000\n    if n == 19:\n        return 10000000000000000000\n    if n == 20:\n        return 100000000000000000000\n    if n == 21:\n        return 1000000000000000000000\n    if n == 22:\n        return 10000"}
{"ID": 84, "source": "HumanEval:HumanEval/84", "prompt": "\n\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n\"\"\"\ndef solve(N):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n\"\"\"\ndef solve(N):\n    # Write your code here\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N = N // 10\n    return bin(sum)[2:]\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))<｜end▁of▁sentence｜>"}
{"ID": 85, "source": "HumanEval:HumanEval/85", "prompt": "\n\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 \n\"\"\"\ndef add(lst):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 \n\"\"\"\ndef add(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 86, "source": "HumanEval:HumanEval/86", "prompt": "\n\"\"\"\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\"\"\"\ndef anti_shuffle(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\"\"\"\ndef anti_shuffle(s):\n    return ' '.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 87, "source": "HumanEval:HumanEval/87", "prompt": "\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\"\"\"\ndef get_row(lst, x):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\"\"\"\ndef get_row(lst, x):\n    pass\n\n\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\"\"\"\ndef get_row(lst, x):\n    pass\n\n\n\"\"\"\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1)"}
{"ID": 88, "source": "HumanEval:HumanEval/88", "prompt": "\n\"\"\"\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\"\"\"\ndef sort_array(array):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\"\"\"\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 89, "source": "HumanEval:HumanEval/89", "prompt": "\n\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n\"\"\"\ndef encrypt(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n\"\"\"\ndef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_s = ''\n    for i in s:\n        if i in alphabet:\n            new_s += alphabet[(alphabet.index(i) + 2) % 26]\n        else:\n            new_s += i\n    return new_s\n\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))<｜end▁of▁sentence｜>"}
{"ID": 90, "source": "HumanEval:HumanEval/90", "prompt": "\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\n\"\"\"\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\"\"\"\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\n\"\"\""}
{"ID": 91, "source": "HumanEval:HumanEval/91", "prompt": "\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):\n    count = 0\n    for i in S.split(\".\"):\n        if i.strip().startswith(\"I\"):\n            count += 1\n    return count\n\n\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):\n    count = 0\n    for i in S.split(\".\"):\n        if i.strip().startswith(\"I\"):\n            count += 1\n    return count\n\n\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):\n    count = 0\n    for i in S.split(\".\"):\n        if i.strip().startswith(\"I\"):\n            count += 1\n    return count\n\n\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'\n   \nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\"\"\"\ndef is_bored(S):\n    count = 0\n    for i in S.split(\".\"):\n        if i.strip().startswith(\"I\"):\n            count += 1\n    return count\n\n\n\"\"\"\nYou'll be given a string of words, and your task is to count the number\nof bored"}
{"ID": 92, "source": "HumanEval:HumanEval/92", "prompt": "\n\ndef any_int(x, y, z):", "predict": "<｜begin▁of▁sentence｜>\n\ndef any_int(x, y, z):\n    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n\n\nprint(any_int(1, 2, 3))\nprint(any_int(1, 1, 2))\nprint(any_int(1, 2, 1))\nprint(any_int(2, 1, 1))\nprint(any_int(2, 2, 1))\nprint(any_int(2, 1, 2))\nprint(any_int(1, 2, 2))\nprint(any_int(2, 2, 2))<｜end▁of▁sentence｜>"}
{"ID": 93, "source": "HumanEval:HumanEval/93", "prompt": "\n\"\"\"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\"\"\"\ndef encode(message):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\"\"\"\ndef encode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.isupper():\n            letter = letter.lower()\n            if letter in vowels:\n                letter = vowels[(vowels.index(letter) + 2) % 5]\n                letter = letter.upper()\n            new_message += letter\n        elif letter.islower():\n            if letter in vowels:\n                letter = vowels[(vowels.index(letter) + 2) % 5]\n            new_message += letter\n        else:\n            new_message += letter\n    return new_message\n\n\n\"\"\"\nWrite a function that takes a message, and decodes it. \n\nExamples:\n>>> decode('TGST')\n'test'\n>>> decode('tHKS KS C MGSSCGG')\n'this is a message'\n\"\"\"\ndef decode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.isupper():\n            letter = letter.lower()\n            if letter in vowels:\n                letter = vowels[(vowels.index(letter) - 2) % 5]\n                letter = letter.upper()\n            new_message += letter\n        elif letter.islower():\n            if letter in vowels:\n                letter = vowels[(vowels.index(letter) - 2) % 5]\n            new_message += letter\n        else:\n            new_message += letter\n    return new_message\n\n\n\"\"\"\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\"\"\"\ndef encode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if"}
{"ID": 94, "source": "HumanEval:HumanEval/94", "prompt": "\n\n\"\"\"You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n\"\"\"\ndef skjkasdkd(lst):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n\"\"\"\ndef skjkasdkd(lst):\n    lst = [i for i in lst if i > 1]\n    if len(lst) == 0:\n        return 0\n    else:\n        lst.sort()\n        lst.reverse()\n        for i in lst:\n            if i == 2:\n                return 2\n            elif i % 2 == 0:\n                continue\n            else:\n                for j in range(3, int(i**0.5)+1, 2):\n                    if i % j == 0:\n                        break\n                else:\n                    return sum(int(i) for i in str(i))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 95, "source": "HumanEval:HumanEval/95", "prompt": "\n\"\"\"\nGiven a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\"\"\"\ndef check_dict_case(dict):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\"\"\"\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    else:\n        keys = dict.keys()\n        for key in keys:\n            if not isinstance(key, str):\n                return False\n        if all(key.islower() for key in keys):\n            return True\n        elif all(key.isupper() for key in keys):\n            return True\n        else:\n            return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 96, "source": "HumanEval:HumanEval/96", "prompt": "\n\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n\"\"\"\ndef count_up_to(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n\"\"\"\ndef count_up_to(n):\n    if n < 2:\n        return []\n    else:\n        prime_numbers = []\n        for i in range(2, n):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n        return prime_numbers\n\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))<｜end▁of▁sentence｜>"}
{"ID": 97, "source": "HumanEval:HumanEval/97", "prompt": "\n\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n\n\n\"\"\"\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n\n\n\"\"\"\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n\n\n\"\"\"\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n\"\"\"\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n\n\n\"\"\"\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return "}
{"ID": 98, "source": "HumanEval:HumanEval/98", "prompt": "\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n\n\"\"\"\nGiven a string s, return the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so \"hixxxhi\" yields 1.\n\nFor example:\nlast2('hixxhi') returns 1\nlast2('xaxxaxaxx') returns 1\nlast2('axxxaaxx') returns 2\n\"\"\"\ndef last2(s):\n    if len(s) < 2:\n        return 0\n    last2 = s[len(s)-2:]\n    count = 0\n    for i in range(len(s)-2):\n        sub = s[i:i+2]\n        if sub == last2:\n            count += 1\n    return count\n\n\n\"\"\"\nGiven a string s, return a string where for every char in the original, there are two chars.\n\nFor example:\ndouble_char('The') returns 'TThhee'\ndouble_char('AAbb') returns 'AAAAbbbb'\ndouble_char('Hi-There') returns 'HHii--TThheerree'\n\"\"\"\ndef double_char(s):\n    result = ''\n    for char in s:\n        result += char * 2\n    return result\n\n\n\"\"\"\nGiven a string s, return a new string made of every other char starting with the first, so \"Hello\" yields \"Hlo\".\n\nFor example:\nstring_bits('Hello') returns 'Hlo'\nstring_bits('Hi') returns 'H'\nstring_bits('Heeololeo') returns 'Hello'\n\"\"\"\ndef string_bits(s):\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result\n\n\n\"\"\"\nGiven a non-empty string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\nFor example:\ncan_construct('a',"}
{"ID": 99, "source": "HumanEval:HumanEval/99", "prompt": "\n\ndef closest_integer(value):", "predict": "<｜begin▁of▁sentence｜>\n\ndef closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return int(round(value))\n\n\ndef closest_integer_in_list(value, list_of_values):\n    \"\"\"\n    Returns the closest integer to the given value in the given list of values.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return min(list_of_values, key=lambda x: abs(x - value))\n\n\ndef closest_integer_in_list_with_index(value, list_of_values):\n    \"\"\"\n    Returns the closest integer to the given value in the given list of values.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return min(enumerate(list_of_values), key=lambda x: abs(x[1] - value))\n\n\ndef closest_integer_in_list_with_index_and_value(value, list_of_values):\n    \"\"\"\n    Returns the closest integer to the given value in the given list of values.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return min(enumerate(list_of_values), key=lambda x: abs(x[1] - value))\n\n\ndef closest_integer_in_list_with_index_and_value_and_index(value, list_of_values):\n    \"\"\"\n    Returns the closest integer to the given value in the given list of values.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return min(enumerate(list_of_values), key=lambda x: abs(x[1] - value))\n\n\ndef closest_integer_in_list_with_index_and_value_and_index_and_value(value, list_of_values):\n    \"\"\"\n    Returns the closest integer to the given value in the given list of values.\n    If two integers are equally close, the smallest integer is returned.\n    \"\"\"\n    return min(enumerate(list_of_values), key=lambda x: abs(x[1] - value))\n\n\ndef closest_integer_in_list"}
{"ID": 100, "source": "HumanEval:HumanEval/100", "prompt": "\n\"\"\"\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n\"\"\"\ndef make_a_pile(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n\"\"\"\ndef make_a_pile(n):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the even numbers in the list.\n\nExamples:\n>>> sum_even_numbers([1, 2, 3, 4])\n6\n>>> sum_even_numbers([1, 3, 5])\n0\n\"\"\"\ndef sum_even_numbers(numbers):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the negative numbers in the list.\n\nExamples:\n>>> sum_negative_numbers([1, -2, 3, -4])\n-6\n>>> sum_negative_numbers([1, 2, 3])\n0\n\"\"\"\ndef sum_negative_numbers(numbers):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the positive numbers in the list.\n\nExamples:\n>>> sum_positive_numbers([1, -2, 3, -4])\n4\n>>> sum_positive_numbers([-1, -2, -3])\n0\n\"\"\"\ndef sum_positive_numbers(numbers):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the odd numbers in the list.\n\nExamples:\n>>> sum_odd_numbers([1, 2, 3, 4])\n4\n>>> sum_odd_numbers([2, 4, 6])\n0\n\"\"\"\ndef sum_odd_numbers(numbers):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the numbers in the list.\n\nExamples:\n>>> sum_numbers([1, 2, 3, 4])\n10\n>>> sum_numbers([1, -2, 3, -4])\n0\n\"\"\"\ndef sum_numbers(numbers):\n    pass\n\n\n\"\"\"\nGiven a list of integers, return the sum of the even numbers in the list.\n\nExamples:\n>>> sum_even_numbers([1, 2, 3, 4])\n6\n>>> sum_even_numbers([1, 3, 5])\n0\n\"\"\"\ndef sum_even_numbers(numbers):\n    pass"}
{"ID": 101, "source": "HumanEval:HumanEval/101", "prompt": "\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.replace(',', ' ').split()\n\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.replace(',', ' ').split()\n\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.replace(',', ' ').split()\n\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.replace(',', ' ').split()\n\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \""}
{"ID": 102, "source": "HumanEval:HumanEval/102", "prompt": "\n\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n\"\"\"\ndef choose_num(x, y):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n\"\"\"\ndef choose_num(x, y):\n    if x % 2 == 0:\n        return y\n    else:\n        return y - 1\n\n\n\"\"\"This function takes a list of integers and returns the biggest even\ninteger number in the list. If there's no such number, then the function\nshould return -1.\n\nFor example:\nchoose_num([1, 2, 3, 4, 5]) = 4\nchoose_num([1, 3, 5]) = -1\n\"\"\"\ndef choose_num(nums):\n    for num in reversed(nums):\n        if num % 2 == 0:\n            return num\n    return -1\n\n\n\"\"\"This function takes a list of integers and returns the biggest even\ninteger number in the list. If there's no such number, then the function\nshould return -1.\n\nFor example:\nchoose_num([1, 2, 3, 4, 5]) = 4\nchoose_num([1, 3, 5]) = -1\n\"\"\"\ndef choose_num(nums):\n    biggest = -1\n    for num in nums:\n        if num % 2 == 0 and num > biggest:\n            biggest = num\n    return biggest\n\n\n\"\"\"This function takes a list of integers and returns the biggest even\ninteger number in the list. If there's no such number, then the function\nshould return -1.\n\nFor example:\nchoose_num([1, 2, 3, 4, 5]) = 4\nchoose_num([1, 3, 5]) = -1\n\"\"\"\ndef choose_num(nums):\n    evens = [num for num in nums if num % 2 == 0]\n    if evens:\n        return max(evens)\n    else:\n        return -1\n\n\n\"\"\"This function takes a list of integers and returns the biggest even\ninteger number in the list. If there's no such number, then the function\nshould return -1.\n\nFor example:\nchoose_num([1, 2, 3, 4, 5]) = 4\nchoose_num([1, 3, 5]) = -1\n\"\"\"\ndef choose_num(nums):\n    try:\n"}
{"ID": 103, "source": "HumanEval:HumanEval/103", "prompt": "\n\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n\"\"\"\ndef rounded_avg(n, m):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n\"\"\"\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)\n\n\n\"\"\"You are given a string s. Your task is to count the number of each character in s.\nReturn a dictionary containing the character and its count.\nExample:\ncount_characters(\"hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\ncount_characters(\"abc\") => {\"a\": 1, \"b\": 1, \"c\": 1}\ncount_characters(\"aaabbbccc\") => {\"a\": 3, \"b\": 3, \"c\": 3}\n\"\"\"\ndef count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\n\n\"\"\"You are given a string s. Your task is to count the number of each character in s.\nReturn a dictionary containing the character and its count.\nExample:\ncount_characters(\"hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\ncount_characters(\"abc\") => {\"a\": 1, \"b\": 1, \"c\": 1}\ncount_characters(\"aaabbbccc\") => {\"a\": 3, \"b\": 3, \"c\": 3}\n\"\"\"\ndef count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\n\n\"\"\"You are given a string s. Your task is to count the number of each character in s.\nReturn a dictionary containing the character and its count.\nExample:\ncount_characters(\"hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\ncount_characters(\"abc\") => {\"a\": 1, \"b\": 1"}
{"ID": 104, "source": "HumanEval:HumanEval/104", "prompt": "\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\ndef unique_digits(x):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\ndef unique_digits(x):\n    \"\"\"\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if all(int(j) % 2 for j in str(i))])\n\n\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that has at least one even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> at_least_one_even_digit([15, 33, 1422, 1])\n[1422, 33]\n>>> at_least_one_even_digit([152, 323, 1422, 10])\n[152, 1422, 323]\n\"\"\"\ndef at_least_one_even_digit(x):\n    \"\"\"\n    >>> at_least_one_even_digit([15, 33, 1422, 1])\n    [1422, 33]\n    >>> at_least_one_even_digit([152, 323, 1422, 10])\n    [152, 1422, 323]\n    \"\"\"\n    return sorted([i for i in x if any(int(j) % 2 == 0 for j in str(i))])\n\n\n\"\"\"Given a list of positive integers x. return a sorted list of all \nelements that has exactly one even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> exactly_one_even_digit([15, 33, 1422, 1])\n[1, 15, 33]\n>>> exactly_one_even_digit([152, 323, 1422, 10])\n[10, 152, 3"}
{"ID": 105, "source": "HumanEval:HumanEval/105", "prompt": "\n\"\"\"\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']\n\"\"\"\ndef by_length(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']\n\"\"\"\ndef by_length(arr):\n    return sorted(arr, key=len)\n\n\ndef sort_and_reverse(arr):\n    return sorted(arr, reverse=True)\n\n\ndef replace_digits(arr):\n    return [\n        \"One\" if i == 1 else\n        \"Two\" if i == 2 else\n        \"Three\" if i == 3 else\n        \"Four\" if i == 4 else\n        \"Five\" if i == 5 else\n        \"Six\" if i == 6 else\n        \"Seven\" if i == 7 else\n        \"Eight\" if i == 8 else\n        \"Nine\" if i == 9 else\n        \"One\" for i in arr\n    ]\n\n\ndef sort_and_reverse_and_replace(arr):\n    return replace_digits(sort_and_reverse(arr))\n\n\ndef sort_and_reverse_and_replace_by_length(arr):\n    return replace_digits(sort_and_reverse(by_length(arr)))\n\n\ndef sort_and_reverse_and_replace_by_length_and_sort_by_length(arr):\n    return replace_digits(sort_and_reverse(by_length(arr)))\n\n\ndef sort_and_reverse_and_replace_by_length_and_sort_by_length_and_reverse(arr):\n    return replace_digits(sort_and_reverse(by_length(arr)))\n\n\ndef sort_and_reverse_and_replace_by_length_and_sort_by_length_and_reverse_and_replace(arr):\n    return replace_digits(sort_and_reverse(by_length(arr)))\n\n\ndef sort_and_reverse_and_replace_by_length_and_sort_by_length_and_reverse_and_replace_by_length(arr):\n    return replace_digits(sort_and_reverse(by_length(arr)))\n\n\ndef sort_and_reverse_and_replace_by_length_and_sort_by_length_and_reverse_and_replace_by_length_and_sort_by_length(arr):\n   "}
{"ID": 106, "source": "HumanEval:HumanEval/106", "prompt": "\n\"\"\" Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\"\"\"\ndef f(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\" Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\"\"\"\ndef f(n):\n    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    return l\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(f(5))<｜end▁of▁sentence｜>"}
{"ID": 107, "source": "HumanEval:HumanEval/107", "prompt": "\n\"\"\"\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n\"\"\"\ndef even_odd_palindrome(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n\"\"\"\ndef even_odd_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: tuple\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 108, "source": "HumanEval:HumanEval/108", "prompt": "\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\n\"\"\"\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n"}
{"ID": 109, "source": "HumanEval:HumanEval/109", "prompt": "\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):\n    if len(arr)==0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i]>arr[i+1]:\n                return False\n            else:\n                return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 110, "source": "HumanEval:HumanEval/110", "prompt": "\n\"\"\"In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\"\"\"\ndef exchange(lst1, lst2):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\"\"\"\ndef exchange(lst1, lst2):\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in lst1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == len(lst1) or even_count == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 111, "source": "HumanEval:HumanEval/111", "prompt": "\n\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n\"\"\"\ndef histogram(test):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n\"\"\"\ndef histogram(test):\n    test = test.split()\n    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 112, "source": "HumanEval:HumanEval/112", "prompt": "\n\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"\ndef reverse_delete(s,c):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"\ndef reverse_delete(s,c):\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s[::-1]==s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 113, "source": "HumanEval:HumanEval/113", "prompt": "\n\"\"\"Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\ndef odd_count(lst):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\ndef odd_count(lst):\n    \"\"\"Return a list of strings where each string consists of only digits,\n    and each element i of the output should be \"the number of odd elements\n    in the string i of the input.\"\n    \"\"\"\n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 114, "source": "HumanEval:HumanEval/114", "prompt": "\n\"\"\"\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n\"\"\"\ndef minSubArraySum(nums):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n\"\"\"\ndef minSubArraySum(nums):\n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\n\n\"\"\"\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\nof nums.\nExample\nmaxSubArraySum([2, 3, 4, 1, 2, 4]) == 13\nmaxSubArraySum([-1, -2, -3]) == -1\n\"\"\"\ndef maxSubArraySum(nums):\n    max_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\n\n\"\"\"\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\nof nums.\nExample\nmaxSubArraySum([2, 3, 4, 1, 2, 4]) == 13\nmaxSubArraySum([-1, -2, -3]) == -1\n\"\"\"\ndef maxSubArraySum(nums):\n    max_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\n\n\"\"\"\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\nof nums.\nExample\nmaxSubArraySum([2, 3, 4, 1, 2, 4]) == 13\nmaxSubArraySum([-1, -2, -3]) == -1\n\"\"\"\ndef max"}
{"ID": 115, "source": "HumanEval:HumanEval/115", "prompt": "\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    # Initialize the number of times the buckets need to be lowered\n    num_lowers = 0\n\n    # Iterate through the wells\n    for well in grid:\n        # Initialize the number of units of water in the well\n        num_water = 0\n\n        # Iterate through the well\n        for unit in well:\n            # If the unit is filled with water, increment the number of units of water\n            if unit == 1:\n                num_water += 1\n\n        # If the number of units of water in the well is greater than the capacity of the bucket,\n        # increment the number of times the buckets need to be lowered\n        if num_water > capacity:\n            num_lowers += num_water - capacity\n\n    # Return the number of times the buckets need to be lowered\n    return num_lowers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 116, "source": "HumanEval:HumanEval/116", "prompt": "\n\"\"\"\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\"\"\"\ndef sort_array(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\"\"\"\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 117, "source": "HumanEval:HumanEval/117", "prompt": "\n\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\"\"\"\ndef select_words(s, n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\"\"\"\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 118, "source": "HumanEval:HumanEval/118", "prompt": "\n\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_vowel(word):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n\n\"\"\"You are given a string. Your task is to find the first consonant that stands between \ntwo vowels from the left side of the string (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any consonant met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_consonant(\"yogurt\") ==> \"r\"\nget_closest_consonant(\"FULL\") ==> \"\"\nget_closest_consonant(\"quick\") ==> \"k\"\nget_closest_consonant(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_consonant(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1):\n        if word[i] not in vowels and word[i+1] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\n\n\"\"\"You are given a string. Your task is to find the first consonant that stands between \ntwo vowels from the right side of the string (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any consonant met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_consonant(\"yogurt\") ==> \"r\"\nget_closest_consonant(\"FULL\") ==> \"\"\nget_closest_consonant(\"quick\") ==> \"k\"\nget_closest_consonant(\"ab\") ==> \"\"\n\"\"\"\ndef get_closest_consonant(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0"}
{"ID": 119, "source": "HumanEval:HumanEval/119", "prompt": "\n\ndef match_parens(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef match_parens(lst):\n    \"\"\"\n    Given a list of tokens, return a new list with the items that are matched parens removed.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item == '(':\n            new_lst.append(item)\n        elif item == ')':\n            if new_lst[-1] == '(':\n                new_lst.pop()\n            else:\n                new_lst.append(item)\n        else:\n            new_lst.append(item)\n    return new_lst\n\n\ndef match_parens_2(lst):\n    \"\"\"\n    Given a list of tokens, return a new list with the items that are matched parens removed.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item == '(':\n            new_lst.append(item)\n        elif item == ')':\n            if new_lst[-1] == '(':\n                new_lst.pop()\n            else:\n                new_lst.append(item)\n        else:\n            new_lst.append(item)\n    return new_lst\n\n\ndef match_parens_3(lst):\n    \"\"\"\n    Given a list of tokens, return a new list with the items that are matched parens removed.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item == '(':\n            new_lst.append(item)\n        elif item == ')':\n            if new_lst[-1] == '(':\n                new_lst.pop()\n            else:\n                new_lst.append(item)\n        else:\n            new_lst.append(item)\n    return new_lst\n\n\ndef match_parens_4(lst):\n    \"\"\"\n    Given a list of tokens, return a new list with the items that are matched parens removed.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item == '(':\n            new_lst.append(item)\n        elif item == ')':\n            if new_l"}
{"ID": 120, "source": "HumanEval:HumanEval/120", "prompt": "\n\"\"\"\nGiven an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n\"\"\"\ndef maximum(arr, k):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n\"\"\"\ndef maximum(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Time complexity: O(nlogn), Space complexity: O(1)\n    arr.sort()\n    return arr[-k:]\n\n\ndef maximum2(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Time complexity: O(nlogk), Space complexity: O(k)\n    import heapq\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap\n\n\ndef maximum3(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Time complexity: O(nlogk), Space complexity: O(k)\n    import heapq\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    res = []\n    for _ in range(k):\n        res.append(-heapq.heappop(heap))\n    return res\n\n\ndef maximum4(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Time complexity: O(nlogk), Space complexity: O(k)\n    import heapq\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap\n\n\ndef maximum5(arr, k):\n    \"\"\"\n    :type arr: List"}
{"ID": 121, "source": "HumanEval:HumanEval/121", "prompt": "\n\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n\"\"\"\ndef solution(lst):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n\"\"\"\ndef solution(lst):\n    return sum(lst[1::2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 122, "source": "HumanEval:HumanEval/122", "prompt": "\n\"\"\"\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n\"\"\"\ndef add_elements(arr, k):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n\"\"\"\ndef add_elements(arr, k):\n    res = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            res += arr[i]\n    return res\n\n\nif __name__ == '__main__':\n    arr = [111,21,3,4000,5,6,7,8,9]\n    k = 4\n    print(add_elements(arr, k))<｜end▁of▁sentence｜>"}
{"ID": 123, "source": "HumanEval:HumanEval/123", "prompt": "\n\"\"\"\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\"\"\"\ndef get_odd_collatz(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\"\"\"\ndef get_odd_collatz(n):\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 124, "source": "HumanEval:HumanEval/124", "prompt": "\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):\n    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list) != 3:\n            return False\n        else:\n            month = int(date_list[0])\n            day = int(date_list[1])\n            year = int(date_list[2])\n            if month < 1 or month > 12:\n                return False\n            elif month in [1,3,5,7,8,10,12]:\n                if day < 1 or day > 31:\n                    return False\n            elif month in [4,6,9,11]:\n                if day < 1 or day > 30:\n                    return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                return True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))<｜end▁of▁sentence｜>"}
{"ID": 125, "source": "HumanEval:HumanEval/125", "prompt": "\n\ndef split_words(txt):", "predict": "<｜begin▁of▁sentence｜>\n\ndef split_words(txt):\n    \"\"\"\n    Split a string into words, separated by space\n    :param txt: The string to split in words\n    :return: A list of words\n    \"\"\"\n    txt = txt.split()\n    return txt\n\n\ndef get_words_from_file(filename):\n    \"\"\"\n    Get all words from a text file\n    :param filename: The filename where to read the text\n    :return: A list of words, with all punctuation removed\n    \"\"\"\n    with open(filename, 'r') as f:\n        txt = f.read()\n\n    txt = txt.replace('\\n', ' ')\n    txt = txt.replace(',', ' ')\n    txt = txt.replace('.', ' ')\n    txt = txt.replace('?', ' ')\n    txt = txt.replace('\"', ' ')\n    txt = txt.replace('(', ' ')\n    txt = txt.replace(')', ' ')\n    txt = txt.replace('\\'', ' ')\n    txt = txt.replace(':', ' ')\n    txt = txt.replace(';', ' ')\n    txt = txt.replace('-', ' ')\n    txt = txt.replace('_', ' ')\n    txt = txt.replace('*', ' ')\n    txt = txt.replace('[', ' ')\n    txt = txt.replace(']', ' ')\n    txt = txt.replace('{', ' ')\n    txt = txt.replace('}', ' ')\n    txt = txt.replace('<', ' ')\n    txt = txt.replace('>', ' ')\n    txt = txt.replace('=', ' ')\n    txt = txt.replace('+', ' ')\n    txt = txt.replace('&', ' ')\n    txt = txt.replace('%', ' ')\n    txt = txt.replace('$', ' ')\n    txt = txt.replace('#', ' ')\n    txt = txt.replace('@', ' ')\n    txt = txt.replace('^', ' ')\n    txt = txt.replace('~', ' ')\n    txt = txt.replace('`', ' ')\n    txt = txt."}
{"ID": 126, "source": "HumanEval:HumanEval/126", "prompt": "\n\ndef is_sorted(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef is_sorted(lst):\n    \"\"\"Returns True if the linked list is sorted, and False otherwise.\"\"\"\n    if not lst:\n        return True\n    current = lst.head\n    while current.next:\n        if current.value > current.next.value:\n            return False\n        current = current.next\n    return True\n\n\ndef reverse(lst):\n    \"\"\"Reverses the linked list.\"\"\"\n    if not lst:\n        return\n    current = lst.head\n    prev = None\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    lst.head = prev\n\n\ndef remove_cycle(lst):\n    \"\"\"Removes a cycle from the linked list.\"\"\"\n    if not lst:\n        return\n    slow = lst.head\n    fast = lst.head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            break\n    if not fast or not fast.next:\n        return\n    slow = lst.head\n    while slow.next != fast.next:\n        slow = slow.next\n        fast = fast.next\n    fast.next = None\n\n\ndef has_cycle(lst):\n    \"\"\"Returns True if the linked list has a cycle, and False otherwise.\"\"\"\n    if not lst:\n        return False\n    slow = lst.head\n    fast = lst.head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\n\n\ndef is_palindrome(lst):\n    \"\"\"Returns True if the linked list is a palindrome, and False otherwise.\"\"\"\n    if not lst:\n        return True\n    stack = []\n    current = lst.head\n    while current:\n        stack.append(current.value)\n        current = current.next\n    current = lst.head\n    while current:\n        if current.value != stack.pop():\n            return False\n        current = current.next\n    return True\n\n\ndef find_middle(lst):"}
{"ID": 127, "source": "HumanEval:HumanEval/127", "prompt": "\n\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\"\"\"\ndef intersection(interval1, interval2):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\"\"\"\ndef intersection(interval1, interval2):\n    # your code here\n    # find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    # otherwise, return \"NO\"\n    # if the two intervals don't intersect, return \"NO\"\n    # if the two intervals intersect, find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    # otherwise, return \"NO\"\n    # if the two intervals don't intersect, return \"NO\"\n    # if the two intervals intersect, find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    # otherwise, return \"NO\"\n    # if the two intervals don't intersect, return \"NO\"\n    # if the two intervals intersect, find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    # otherwise, return \"NO\"\n    # if the two intervals don't intersect, return \"NO\"\n    # if the two intervals intersect, find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    # otherwise, return \"NO\"\n    # if the two intervals don't intersect, return \"NO\"\n    # if the two intervals intersect, find the intersection of the two intervals\n    # if the intersection is empty, return \"NO\"\n    # if the intersection is not empty, find the length of the intersection\n    # if the length of the intersection is a prime number, return \"YES\"\n    #"}
{"ID": 128, "source": "HumanEval:HumanEval/128", "prompt": "\n\"\"\"\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n\"\"\"\ndef prod_signs(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n\"\"\"\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sign = 1\n    for i in arr:\n        if i < 0:\n            sign *= -1\n        elif i == 0:\n            return 0\n    return sign * sum(abs(i) for i in arr)\n\n\n\"\"\"\nYou are given a list of integers and you need to return\nthe number of pairs of integers that are equal.\n\nExample:\n>>> equal_pairs([1, 2, 3, 1, 1, 3]) == 4\n>>> equal_pairs([1, 1, 1, 1, 1]) == 10\n>>> equal_pairs([1, 2, 3]) == 0\n\"\"\"\ndef equal_pairs(arr):\n    return sum(arr.count(i) * (arr.count(i) - 1) // 2 for i in set(arr))\n\n\n\"\"\"\nYou are given a list of integers and you need to return\nthe number of pairs of integers that are equal.\n\nExample:\n>>> equal_pairs([1, 2, 3, 1, 1, 3]) == 4\n>>> equal_pairs([1, 1, 1, 1, 1]) == 10\n>>> equal_pairs([1, 2, 3]) == 0\n\"\"\"\ndef equal_pairs(arr):\n    return sum(arr.count(i) * (arr.count(i) - 1) // 2 for i in set(arr))\n\n\n\"\"\"\nYou are given a list of integers and you need to return\nthe number of pairs of integers that are equal.\n\nExample:\n>>> equal_pairs([1, 2, 3, 1, 1, 3]) == 4\n>>> equal_pairs([1, 1, 1, 1, 1]) == 10\n>>> equal_pairs([1, 2, 3]) == 0\n\"\"\"\ndef equal_pairs(arr):\n    return sum(arr.count(i) * (arr.count(i) - 1) // 2 for i in set(arr))<｜end▁of▁sentence｜>"}
{"ID": 129, "source": "HumanEval:HumanEval/129", "prompt": "\n\"\"\"\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]\n\"\"\"\ndef minPath(grid, k):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]\n\"\"\"\ndef minPath(grid, k):\n    # WRITE YOUR BRILLIANT CODE HERE\n    return []\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 130, "source": "HumanEval:HumanEval/130", "prompt": "\n\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n\"\"\"\ndef tri(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n\"\"\"\ndef tri(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 2, 8]\n    else:\n        return [3, 1, 2, 8] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\nprint(tri(4))\n\n\n\"\"\"\ndef tri(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 2, 8]\n    else:\n        return [3, 1, 2, 8] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\"\"\"<｜end▁of▁sentence｜>"}
{"ID": 131, "source": "HumanEval:HumanEval/131", "prompt": "\n\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n\"\"\"\ndef digits(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n\"\"\"\ndef digits(n):\n    result = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            result *= int(i)\n    return result\n\n\n\"\"\"Given a positive integer n, return the sum of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 8\n\"\"\"\ndef digits(n):\n    result = 0\n    for i in str(n):\n        if int(i) % 2 != 0:\n            result += int(i)\n    return result\n\n\n\"\"\"Given a positive integer n, return the sum of the even digits.\nReturn 0 if all digits are odd.\nFor example:\ndigits(1)  == 0\ndigits(4)  == 4\ndigits(235) == 2\n\"\"\"\ndef digits(n):\n    result = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            result += int(i)\n    return result\n\n\n\"\"\"Given a positive integer n, return the sum of the digits.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 4\ndigits(235) == 10\n\"\"\"\ndef digits(n):\n    result = 0\n    for i in str(n):\n        result += int(i)\n    return result\n\n\n\"\"\"Given a positive integer n, return the sum of the digits.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 4\ndigits(235) == 10\n\"\"\"\ndef digits(n):\n    result = 0\n    for i in str(n):\n        result += int(i)\n    return result\n\n\n\"\"\"Given a positive integer n, return the sum of the digits.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 4\ndigits(235) == 10\n\"\"\"\ndef digits(n):\n    result = 0\n    for"}
{"ID": 132, "source": "HumanEval:HumanEval/132", "prompt": "\n\ndef is_nested(string):", "predict": "<｜begin▁of▁sentence｜>\n\ndef is_nested(string):\n    if string == \"\":\n        return True\n    if string[0] == \"(\" and string[-1] == \")\":\n        return is_nested(string[1:-1])\n    else:\n        return False\n\n\nprint(is_nested(\"((()))\"))\nprint(is_nested(\"()\"))\nprint(is_nested(\"\"))\nprint(is_nested(\"(((\"))\nprint(is_nested(\"(()\"))\nprint(is_nested(\")(\"))\nprint(is_nested(\"())\"))<｜end▁of▁sentence｜>"}
{"ID": 133, "source": "HumanEval:HumanEval/133", "prompt": "\n\n\"\"\"You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n\"\"\"\ndef sum_squares(lst):", "predict": "<｜begin▁of▁sentence｜>\n\n\"\"\"You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n\"\"\"\ndef sum_squares(lst):\n    return sum([int(i)**2 for i in lst])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 134, "source": "HumanEval:HumanEval/134", "prompt": "\n\ndef check_if_last_char_is_a_letter(txt):", "predict": "<｜begin▁of▁sentence｜>\n\ndef check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_number(txt):\n    if txt[-1].isdigit():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_symbol(txt):\n    if txt[-1].isalnum():\n        return False\n    else:\n        return True\n\n\ndef check_if_last_char_is_a_space(txt):\n    if txt[-1].isspace():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_punctuation(txt):\n    if txt[-1].isalnum():\n        return False\n    else:\n        return True\n\n\ndef check_if_last_char_is_a_uppercase(txt):\n    if txt[-1].isupper():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_lowercase(txt):\n    if txt[-1].islower():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_title(txt):\n    if txt[-1].istitle():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_printable(txt):\n    if txt[-1].isprintable():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_alnum(txt):\n    if txt[-1].isalnum():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_alpha(txt):\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_digit(txt):\n    if txt[-1].isdigit():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_"}
{"ID": 135, "source": "HumanEval:HumanEval/135", "prompt": "\n\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n\"\"\"\ndef can_arrange(arr):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n\"\"\"\ndef can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\n\n\"\"\"Create a function which returns the number of times a character appears\nin each word in a sentence.\n\nExamples:\nchar_count(\"a\", \"edabit\") = 1\nchar_count(\"c\", \"Chamber of secrets\") = 1\nchar_count(\"b\", \"big fat bubble\") = 4\n\"\"\"\ndef char_count(char, sentence):\n    return sentence.lower().count(char)\n\n\n\"\"\"Create a function that takes a list of numbers and returns the sum of\nall prime numbers in the list.\n\nExamples:\nsum_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 17\nsum_primes([2, 3, 4, 11, 20, 50, 71]) = 87\nsum_primes([]) = None\n\"\"\"\ndef sum_primes(lst):\n    if not lst:\n        return None\n    primes = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    return sum(primes)\n\n\n\"\"\"Create a function that takes a list of numbers and returns the sum of\nall prime numbers in the list.\n\nExamples:\nsum_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 17\nsum_primes([2, 3, 4, 11, 20, 50, 71]) = 87\nsum_primes([]) = None\n\"\"\"\ndef sum_primes(lst):\n    if not lst:\n        return None\n    primes = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break"}
{"ID": 136, "source": "HumanEval:HumanEval/136", "prompt": "\n\ndef largest_smallest_integers(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef largest_smallest_integers(lst):\n    largest = lst[0]\n    smallest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest, smallest\n\n\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))<｜end▁of▁sentence｜>"}
{"ID": 137, "source": "HumanEval:HumanEval/137", "prompt": "\n\"\"\"\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ None\n\"\"\"\ndef compare_one(a, b):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ None\n\"\"\"\ndef compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    else:\n        if type(a) == int or type(a) == float:\n            if type(b) == int or type(b) == float:\n                return max(a, b)\n            else:\n                return b\n        else:\n            return a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 138, "source": "HumanEval:HumanEval/138", "prompt": "\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\nExample\nis_equal_to_sum_odd(4) == False\nis_equal_to_sum_odd(6) == False\nis_equal_to_sum_odd(8) == False\nis_equal_to_sum_odd(10) == True\n\"\"\"\ndef is_equal_to_sum_odd(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\nExample\nis_equal_to_sum_odd(4) == False\nis_equal_to_sum_odd(6) == False\nis_equal_to_sum_odd(8) == False\nis_equal_to_sum_odd(10) == True\n\"\"\"\ndef is_equal_to_sum_odd(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum"}
{"ID": 139, "source": "HumanEval:HumanEval/139", "prompt": "\n\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n\"\"\"\ndef special_factorial(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n\"\"\"\ndef special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\n\"\"\"The Fibonacci sequence is a sequence of numbers where every number is the\nsum of the two previous ones.\n\nFor example:\n>>> fibonacci(8)\n[0, 1, 1, 2, 3, 5, 8, 13]\n\nThe function will receive an integer as input and should return a list with\nthe Fibonacci sequence up to this integer.\n\"\"\"\ndef fibonacci(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        fib = fibonacci(n-1)\n        fib.append(fib[-1] + fib[-2])\n        return fib\n\n\n\"\"\"The Lucas sequence is a variation of the Fibonacci sequence where the first\ntwo numbers are 2 and 1.\n\nFor example:\n>>> lucas(8)\n[2, 1, 3, 4, 7, 11, 18, 29]\n\nThe function will receive an integer as input and should return a list with\nthe Lucas sequence up to this integer.\n\"\"\"\ndef lucas(n):\n    if n == 0:\n        return [2]\n    elif n == 1:\n        return [2, 1]\n    else:\n        luc = lucas(n-1)\n        luc.append(luc[-1] + luc[-2])\n        return luc\n\n\n\"\"\"The Padovan sequence is a variation of the Fibonacci sequence where the first\nthree numbers are 1, 0 and 0.\n\nFor example:\n>>> padovan(8)\n[1, 0, 0, 1, 0, 1, 1, 1]\n\nThe function will receive an integer as input and should return a list with\nthe Padovan sequence up to this integer.\n\"\"\"\ndef padovan(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,"}
{"ID": 140, "source": "HumanEval:HumanEval/140", "prompt": "\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):\n    text = text.strip()\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 141, "source": "HumanEval:HumanEval/141", "prompt": "\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):\n    # Your code here\n    pass\n\n\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):\n    # Your code here\n    pass\n\n\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):\n    # Your code here\n    pass\n\n\n\"\"\"Create a function which takes a string representing a file'"}
{"ID": 142, "source": "HumanEval:HumanEval/142", "prompt": "\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):", "predict": "<｜begin▁of▁sentence｜>\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 143, "source": "HumanEval:HumanEval/143", "prompt": "\n\"\"\"\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n\"\"\"\ndef words_in_sentence(sentence):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n\"\"\"\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    return words\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_words(sentence):\n    words = words_in_sentence(sentence)\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 144, "source": "HumanEval:HumanEval/144", "prompt": "\n\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n\"\"\"\ndef simplify(x, n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n\"\"\"\ndef simplify(x, n):\n    x = x.split('/')\n    n = n.split('/')\n    if int(x[0]) * int(n[1]) == int(x[1]) * int(n[0]):\n        return True\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 145, "source": "HumanEval:HumanEval/145", "prompt": "\n\"\"\"\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n\"\"\"\ndef order_by_points(nums):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n\"\"\"\ndef order_by_points(nums):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits(123) == 6\n>>> sum_of_digits(1000000000) == 1\n\"\"\"\ndef sum_of_digits(num):\n    pass\n\n\n\"\"\"\nWrite a function which returns the sum of all digits in a given number.\n\nFor example:\n>>> sum_of_digits("}
{"ID": 146, "source": "HumanEval:HumanEval/146", "prompt": "\n\"\"\"Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\"\"\"\ndef specialFilter(nums):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\"\"\"\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))<｜end▁of▁sentence｜>"}
{"ID": 147, "source": "HumanEval:HumanEval/147", "prompt": "\n\"\"\"\nYou are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n\"\"\"\ndef get_max_triples(n):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n\"\"\"\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_max_triples(n))<｜end▁of▁sentence｜>"}
{"ID": 148, "source": "HumanEval:HumanEval/148", "prompt": "\n\ndef bf(planet1, planet2):", "predict": "<｜begin▁of▁sentence｜>\n\ndef bf(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return ((planet1.x - planet2.x) ** 2 + (planet1.y - planet2.y) ** 2) ** 0.5\n\n\ndef bf_x(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the x direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.x - planet2.x\n\n\ndef bf_y(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the y direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.y - planet2.y\n\n\ndef bf_z(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the z direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.z - planet2.z\n\n\ndef bf_vx(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the x direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.vx - planet2.vx\n\n\ndef bf_vy(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the y direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.vy - planet2.vy\n\n\ndef bf_vz(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the z direction\n    :param planet1:\n    :param planet2:\n    :return:\n    \"\"\"\n    return planet1.vz - planet2.vz\n\n\ndef bf_ax(planet1, planet2):\n    \"\"\"\n    Calculates the distance between two planets in the x direction\n    :param"}
{"ID": 149, "source": "HumanEval:HumanEval/149", "prompt": "\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):\n    lst.sort(key=len)\n    return lst\n\n\ndef list_sort(lst):\n    lst = sorted_list_sum(lst)\n    for i in lst:\n        if len(i) % 2 != 0:\n            lst.remove(i)\n    return lst\n\n\nprint(list_sort([\"aa\", \"a\", \"aaa\"]))\nprint(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 150, "source": "HumanEval:HumanEval/150", "prompt": "\n\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n\"\"\"\ndef x_or_y(n, x, y):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n\"\"\"\ndef x_or_y(n, x, y):\n    if n == 2 or n == 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return y\n        i += w\n        w = 6 - w\n    return x\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 151, "source": "HumanEval:HumanEval/151", "prompt": "\n\ndef double_the_difference(lst):", "predict": "<｜begin▁of▁sentence｜>\n\ndef double_the_difference(lst):\n    return [2 * (i - j) for i, j in zip(lst[1:], lst[:-1])]\n\n\ndef double_the_difference(lst):\n    return [2 * (b - a) for a, b in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (lst[i + 1] - lst[i]) for i in range(len(lst) - 1)]\n\n\ndef double_the_difference(lst):\n    return [2 * (j - i) for (i, j) in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (b - a) for (a, b) in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (lst[i + 1] - lst[i]) for i in range(len(lst) - 1)]\n\n\ndef double_the_difference(lst):\n    return [2 * (b - a) for (a, b) in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (lst[i + 1] - lst[i]) for i in range(len(lst) - 1)]\n\n\ndef double_the_difference(lst):\n    return [2 * (b - a) for (a, b) in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (lst[i + 1] - lst[i]) for i in range(len(lst) - 1)]\n\n\ndef double_the_difference(lst):\n    return [2 * (b - a) for (a, b) in zip(lst, lst[1:])]\n\n\ndef double_the_difference(lst):\n    return [2 * (lst[i + 1"}
{"ID": 152, "source": "HumanEval:HumanEval/152", "prompt": "\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 153, "source": "HumanEval:HumanEval/153", "prompt": "\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Find the strongest extension of a class.\n    \"\"\"\n    # Find the strength of each extension\n    strengths = []\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strengths.append(cap - sm)\n\n    # Find the index of the strongest extension\n    strongest_index = strengths.index(max(strengths))\n\n    # Return the class name and the strongest extension\n    return class_name + '.' + extensions[strongest_index]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 154, "source": "HumanEval:HumanEval/154", "prompt": "\n\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n\"\"\"\ndef cycpattern_check(a , b):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n\"\"\"\ndef cycpattern_check(a , b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint(cycpattern_check(\"efef\",\"eeff\"))\nprint(cycpattern_check(\"himenss\",\"simen\"))<｜end▁of▁sentence｜>"}
{"ID": 155, "source": "HumanEval:HumanEval/155", "prompt": "\n\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> (1, 1)\n    even_odd_count(123) ==> (1, 2)\n\"\"\"\ndef even_odd_count(num):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> (1, 1)\n    even_odd_count(123) ==> (1, 2)\n\"\"\"\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 156, "source": "HumanEval:HumanEval/156", "prompt": "\n\"\"\"\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n\"\"\"\ndef int_to_mini_roman(number):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n\"\"\"\ndef int_to_mini_roman(number):\n    \"\"\"\n    Convert a positive integer to its Roman numeral equivalent as a string.\n\n    Parameters:\n        number (int): The positive integer to convert.\n\n    Returns:\n        str: The Roman numeral equivalent of the input number.\n\n    Raises:\n        ValueError: If the input number is not a positive integer.\n\n    Examples:\n        >>> int_to_mini_roman(19)\n        'xix'\n        >>> int_to_mini_roman(152)\n        'clii'\n        >>> int_to_mini_roman(426)\n        'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_num = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_num += numeral\n            number -= value\n\n    return roman_num.lower()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 157, "source": "HumanEval:HumanEval/157", "prompt": "\n\ndef right_angle_triangle(a, b, c):", "predict": "<｜begin▁of▁sentence｜>\n\ndef right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(3, 4, 6))\n\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(3, 4, 6))<｜end▁of▁sentence｜>"}
{"ID": 158, "source": "HumanEval:HumanEval/158", "prompt": "\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_count = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 159, "source": "HumanEval:HumanEval/159", "prompt": "\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n\"\"\"\ndef eat(number, need, remaining):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n\"\"\"\ndef eat(number, need, remaining):\n    # Your code here\n    return [0, 0]\n\n\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n\"\"\"\ndef eat(number, need, remaining):\n    # Your code here\n    return [0, 0]\n\n\n\"\"\"\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, "}
{"ID": 160, "source": "HumanEval:HumanEval/160", "prompt": "\n\"\"\"\nGiven two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.\n\n\"\"\"\ndef do_algebra(operator, operand):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.\n\n\"\"\"\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 161, "source": "HumanEval:HumanEval/161", "prompt": "\n\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n\"\"\"\ndef solve(s):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n\"\"\"\ndef solve(s):\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 162, "source": "HumanEval:HumanEval/162", "prompt": "\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        import hashlib\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a list of strings, return a list of their md5 hash equivalent strings.\nIf a string is an empty string, return None for that string.\n\n>>> strings_to_md5(['Hello world', 'This is a test']) == ['3e25960a79dbc69b674cd4ec67a72c62', '6512bd43d9caa6e02c990b0a82652dca']\n\"\"\"\ndef strings_to_md5(texts):\n    \"\"\"\n    Given a list of strings, return a list of their md5 hash equivalent strings.\n    If a string is an empty string, return None for that string.\n    \"\"\"\n    if texts == []:\n        return None\n    else:\n        import hashlib\n        return [hashlib.md5(text.encode('utf-8')).hexdigest() for text in texts]\n\n\n\"\"\"\nGiven a list of strings, return a list of their md5 hash equivalent strings.\nIf a string is an empty string, return None for that string.\n\n>>> strings_to_md5(['Hello world', 'This is a test']) == ['3e25960a79dbc69b674cd4ec67a72c62', '6512bd43d9caa6e02c990b0a82652dca']\n\"\"\"\ndef strings_to_md5(texts):\n    \"\"\"\n    Given a list of strings, return a list of their md5 hash equivalent strings.\n    If a string is an empty string, return None for that string.\n    \"\"\"\n    if texts == []:\n        return None\n    else:\n        import hashlib\n        return [hashlib.md5(text.encode('utf-8')).hex"}
{"ID": 163, "source": "HumanEval:HumanEval/163", "prompt": "\n\"\"\"\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n\"\"\"\ndef generate_integers(a, b):", "predict": "<｜begin▁of▁sentence｜>\n\"\"\"\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n\"\"\"\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n\n\"\"\"\nGiven a string, return the sum of the digits 0-9 that appear in the string,\nignoring all other characters. Return 0 if there are no digits in the string.\n\nFor example:\nsum_digits(\"abc123xyz\") => 6\nsum_digits(\"aa11b33\") => 8\nsum_digits(\"Chocolate\") => 0\n\"\"\"\ndef sum_digits(s):\n    return sum(int(c) for c in s if c.isdigit())\n\n\n\"\"\"\nGiven a string, return the sum of the numbers appearing in the string,\nignoring all other characters. A number is a series of 1 or more digit\nchars in a row.\n\nFor example:\nsum_numbers(\"abc123xyz\") => 123\nsum_numbers(\"aa11b33\") => 44\nsum_numbers(\"7 11\") => 18\n\"\"\"\ndef sum_numbers(s):\n    return sum(int(c) for c in s.split() if c.isdigit())\n\n\n\"\"\"\nGiven a string, return the sum of the numbers appearing in the string,\nignoring all other characters. A number is a series of 1 or more digit\nchars in a row.\n\nFor example:\nsum_numbers(\"abc123xyz\") => 123\nsum_numbers(\"aa11b33\") => 44\nsum_numbers(\"7 11\") => 18\n\"\"\"\ndef sum_numbers(s):\n    return sum(int(c) for c in s.split() if c.isdigit())\n\n\n\"\"\"\nGiven a string, return the sum of the numbers appearing in the string,\nignoring all other characters. A number is a series of 1 or more digit\nchars in a row.\n\nFor example:\nsum_numbers(\"abc123xyz\") => 123\nsum_numbers(\"aa11b33\") => 44\nsum_num"}
