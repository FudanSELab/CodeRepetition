{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\n\t# If destination is 0, then \n\t# return 0 as no jump is required \n\tif (d == 0): \n\t\treturn 0\n\n\t# If destination is less than 0, \n\t# then return -1 as it is not possible \n\tif (d < 0): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif (d < 0): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible \n\tif (d < a and d < b): \n\t\treturn -1\n\n\t# If destination is greater than or equal to \n\t# the sum of the given lengths, then return 1 \n\tif (d >= a and d >= b): \n\t\treturn 1\n\n\t# If destination is less than the sum of the \n\t# given lengths, then return -1 as it is not possible "}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\tresult = []\n\ttemp = ''\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tresult.append(temp)\n\t\t\ttemp = ''\n\t\ttemp += char\n\tresult.append(temp)\n\treturn result\n\nprint(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorldAgain'))\nprint(split_upperstring('HelloWorldAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgain", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(split_upperstring('HelloWorld'))\nprint(split_upperstring('HelloWorldAgain'))\nprint(split_upperstring('HelloWorldAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgainAgain'))\nprint(split_upperstring('HelloWorldAgainAgainAgainAgainAgainAgain"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\tn = len(s)\n\t\n\t# If string is empty\n\tif (n == 0) :\n\t\treturn True\n\t\n\t# Traverse the string\n\tfor i in range(1, n) :\n\t\tif (s[i] != s[0]) :\n\t\t\treturn False\n\t\n\treturn True\n\n# Driver code\ns = \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "s = \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\tmax_run = 0\n\tcurrent_run = 0\n\tfor char in test_str:\n\t\tif char.isupper():\n\t\t\tcurrent_run += 1\n\t\t\tif current_run > max_run:\n\t\t\t\tmax_run = current_run\n\t\telse:\n\t\t\tcurrent_run = 0\n\treturn max_run\n\n# Test the function\nprint(max_run_uppercase(\"ABCDEaaa\"))  # Output: 5\nprint(max_run_uppercase(\"ABCDEaaais_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_run_uppercase(\"ABCDEaaa}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\timport re\n\tnumbers = re.findall('\\d+', input)\n\tnumbers = [int(i) for i in numbers]\n\treturn max(numbers)\n\n# Test the function\nprint(extract_max(\"abc123def456\"))  # Output: 456\nprint(extract_max(\"abcdef\"))  # Output: None\nprint(extract_max(\"abc123def\"))  # Output: 123\nprint(extract_max(\"abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_max(\"abc123def456\"))  # Output: 456\nprint(extract_max(\"abcdef\"))  # Output: None\nprint(extract_max(\"abc123def\"))  # Output: 123\nprint(extract_max(\"abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123abc123\"))  # Output: 123\nprint(extract_max(\"abc123def123abc123def123abc123def123abc123def123abc123def123\"))  # Output: 123\nprint(extract_max(\""}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\tugly = [1]\n\tindex = [0] * len(primes)\n\twhile len(ugly) < n:\n\t\tnext_ugly = min(ugly[index[i]] * primes[i] for i in range(len(primes)))\n\t\tugly.append(next_ugly)\n\t\tfor i in range(len(primes)):\n\t\t\tif next_ugly == ugly[index[i]] * primes[i]:\n\t\t\t\tindex[i] += 1\n\treturn ugly[-1]\n\n# Test the function\nprint(nth_super_ugly_number(12, [2, 7, 13, 19]))  # Output: 32\nprint(nth_super_ugly_number(1, [2, 3, 5]))  # Output: 1\nprint(nth_super_ugly_number(10, [2, 3, 5]))  # Output: 12\nprint(nth_super_ugly_number(100, [2, 3, 5]))  # Output: 51200000\nprint(nth_super_ugly_number(1000, [2, 3, 5]))  # Output: 1099511627776\nprint(nth_super_ugly_number(10000, [2, 3, 5]))  # Output: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(nth_super_ugly_number(10000, [2, 3, 5]))  # Output: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\tlen1 = len(str1)\n\tlen2 = len(str2)\n\tif len1 < len2:\n\t\treturn False\n\telif len1 == len2:\n\t\treturn str1 == str2\n\telse:\n\t\tfor i in range(len1):\n\t\t\tif str1[i:i+len2] == str2:\n\t\t\t\treturn True\n\t\treturn False\n\n# Test the function\nprint(check_Concat(\"abcabcabc\", \"abc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabcabc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\",", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Concat(\"abcabcabc\", \"abc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabcabc\"))  # True\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(check_Concat(\"abcabcabc\","}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\tself.assertEqual(\n\t\t\tself.parser.parse(code),\n\t\t\tast.Module(\n\t\t\t\tbody=[\n\t\t\t\t\tast.Expr(\n\t\t\t\t\t\tvalue=ast.Call(\n\t\t\t\t\t\t\tfunc=ast.Name(id='print', ctx=ast.Load()),\n\t\t\t\t\t\t\targs=[\n\t\t\t\t\t\t\t\tast.Str(s='Write a function to find ln, m lobb number.')\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tkeywords=[],\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\ttype_ignores=[]\n\t\t\t)\n\t\t)\n\n\tdef test_function_definition(self):\n\t\tcode = dedent(\"\"\"\n\t\tdef find_ln_m_lobb_number():\n\t\t\tprint('Write a function to find ln, m lobb number.')\n\t\t\"\"\")\n\t\tself.assertEqual(\n\t\t\tself.parser.parse(code),\n\t\t\tast.Module(\n\t\t\t\tbody=[\n\t\t\t\t\tast.FunctionDef(\n\t\t\t\t\t\tname='find_ln_m_lobb_number',\n\t\t\t\t\t\targs=ast.arguments(\n\t\t\t\t\t\t\targs=[],\n\t\t\t\t\t\t\tvararg=None,\n\t\t\t\t\t\t\tkwonlyargs=[],\n\t\t\t\t\t\t\tkw_defaults=[],\n\t\t\t\t\t\t\tkwarg=None,\n\t\t\t\t\t\t\tdefaults=[]\n\t\t\t\t\t\t),\n\t\t\t\t\t\tbody=[\n\t\t\t\t\t\t\tast.Expr(\n\t\t\t\t\t\t\t\tvalue=ast.Call(\n\t\t\t\t\t\t\t\t\tfunc=ast.Name(id='print', ctx=ast.Load()),\n\t\t\t\t\t\t\t\t\targs=[\n\t\t\t\t\t\t\t\t\t\tast.Str(s='Write a function to find ln, m lobb number.')\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkeywords=[],\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdecorator_list=[],\n\t\t\t\t\t\treturn_type=None\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\ttype_ignores=[]\n\t\t\t)\n\t\t)\n\n\tdef test_class_definition(self):\n\t\tcode = dedent(\"\"\"\n\t\tclass LnMLobbNumber:\n\t\t\tdef __init__(self):\n\t\t\t\tprint('Write a function to find ln, m lobb number.')", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\ttype_ignores=[]\n\t\t\t)\n\t\t)\n\n\tdef test_function_definition(self):\n\t\tcode = dedent(\"\"\"\n\t\tdef find_ln_m_lobb_number():\n\t\t\tprint('Write a function to find ln, m lobb number.')\n\t\t\"\"\")\n\t\tself.assertEqual(\n\t\t\tself.parser.parse(code),\n\t\t\tast.Module(\n\t\t\t\tbody=[\n\t\t\t\t\tast.FunctionDef(\n\t\t\t\t\t\tname='find_ln_m_lobb_number',\n\t\t\t\t\t\targs=ast.arguments(\n\t\t\t\t\t\t\targs=[],\n\t\t\t\t\t\t\tvararg=None,\n\t\t\t\t\t\t\tkwonlyargs=[],\n\t\t\t\t\t\t\tkw_defaults=[],\n\t\t\t\t\t\t\tkwarg=None,\n\t\t\t\t\t\t\tdefaults=[]\n\t\t\t\t\t\t),\n\t\t\t\t\t\tbody=[\n\t\t\t\t\t\t\tast.Expr(\n\t\t\t\t\t\t\t\tvalue=ast.Call(\n\t\t\t\t\t\t\t\t\tfunc=ast.Name(id='print', ctx=ast.Load()),\n\t\t\t\t\t\t\t\t\targs=[\n\t\t\t\t\t\t\t\t\t\tast.Str(s='Write a function to find ln, m lobb number.')\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tkeywords=[],\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdecorator_list=[],\n\t\t\t\t\t\treturn_type=None\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\ttype_ignores=[]\n\t\t\t)\n\t\t)\n\n\tdef test_class_definition(self):\n\t\tcode = dedent(\"\"\"\n\t\tclass LnMLobbNumber:\n\t\t\tdef __init__(self):\n\t\t\t\tprint('Write a function to find ln, m lobb number.')"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\tmax_sum = -999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "max_sum}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\tpatterns = r'^[a-z]+_[a-z]+$'\n\tif re.search(patterns,  text):\n\t  return 'Found a match!'\n\telse:\n\t  return('Not matched!')\n\nimport re\nprint(text_match(\"a_b\")) \nprint(text_match(\"a_b_c\")) \nprint(text_match(\"a_b_c_d\")) \nprint(text_match(\"a_b_c_d_e\")) \nprint(text_match(\"a_b_c_d_e_f\")) \nprint(text_match(\"A_B\")) \nprint(text_match(\"A_B_C\")) \nprint(text_match(\"A_B_C_D\")) \nprint(text_match(\"A_B_C_D_E\")) \nprint(text_match(\"A_B_C_D_E_F\")) \nprint(text_match(\"a_B\")) \nprint(text_match(\"a_B_c\")) \nprint(text_match(\"a_B_c_d\")) \nprint(text_match(\"a_B_c_d_e\")) \nprint(text_match(\"a_B_c_d_e_f\")) \nprint(text_match(\"A_B_C_d\")) \nprint(text_match(\"A_B_C_D_e\")) \nprint(text_match(\"A_B_C_D_E_f\")) \nprint(text_match(\"a_b_c_d_e_f_g\")) \nprint(text_match(\"a_b_c_d_e_f_g_h\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j_k\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j_k_l\")) \n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(text_match(\"a_b\")) \nprint(text_match(\"a_b_c\")) \nprint(text_match(\"a_b_c_d\")) \nprint(text_match(\"a_b_c_d_e\")) \nprint(text_match(\"a_b_c_d_e_f\")) \nprint(text_match(\"A_B\")) \nprint(text_match(\"A_B_C\")) \nprint(text_match(\"A_B_C_D\")) \nprint(text_match(\"A_B_C_D_E\")) \nprint(text_match(\"A_B_C_D_E_F\")) \nprint(text_match(\"a_B\")) \nprint(text_match(\"a_B_c\")) \nprint(text_match(\"a_B_c_d\")) \nprint(text_match(\"a_B_c_d_e\")) \nprint(text_match(\"a_B_c_d_e_f\")) \nprint(text_match(\"A_B_C_d\")) \nprint(text_match(\"A_B_C_D_e\")) \nprint(text_match(\"A_B_C_D_E_f\")) \nprint(text_match(\"a_b_c_d_e_f_g\")) \nprint(text_match(\"a_b_c_d_e_f_g_h\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j_k\")) \nprint(text_match(\"a_b_c_d_e_f_g_h_i_j_k_l\")) \n"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t\"\"\"\n\tThis function takes a character as input and returns its ASCII value.\n\t\"\"\"\n\treturn ord(k)\n\n# Test the function\nprint(ascii_value('a'))  # Output: 97\nprint(ascii_value('b'))  # Output: 98\nprint(ascii_value('c'))  # Output: 99\nprint(ascii_value('d'))  # Output: 100\nprint(ascii_value('e'))  # Output: 101\nprint(ascii_value('f'))  # Output: 102\nprint(ascii_value('g'))  # Output: 103\nprint(ascii_value('h'))  # Output: 104\nprint(ascii_value('i'))  # Output: 105\nprint(ascii_value('j'))  # Output: 106\nprint(ascii_value('k'))  # Output: 107\nprint(ascii_value('l'))  # Output: 108\nprint(ascii_value('m'))  # Output: 109\nprint(ascii_value('n'))  # Output: 110\nprint(ascii_value('o'))  # Output: 111\nprint(ascii_value('p'))  # Output: 112\nprint(ascii_value('q'))  # Output: 113\nprint(ascii_value('r'))  # Output: 114\nprint(ascii_value('s'))  # Output: 115\nprint(ascii_value('t'))  # Output: 116\nprint(ascii_value('u'))  # Output: 117\nprint(ascii_value('v'))  # Output: 118\nprint(ascii_value('w'))  # Output: 119\nprint(ascii_value('x'))  # Output: 120\nprint(ascii_value('y'))  # Output: 121\nprint(ascii_value", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(ascii_value('a'))  # Output: 97\nprint(ascii_value('b'))  # Output: 98\nprint(ascii_value('c'))  # Output: 99\nprint(ascii_value('d'))  # Output: 100\nprint(ascii_value('e'))  # Output: 101\nprint(ascii_value('f'))  # Output: 102\nprint(ascii_value('g'))  # Output: 103\nprint(ascii_value('h'))  # Output: 104\nprint(ascii_value('i'))  # Output: 105\nprint(ascii_value('j'))  # Output: 106\nprint(ascii_value('k'))  # Output: 107\nprint(ascii_value('l'))  # Output: 108\nprint(ascii_value('m'))  # Output: 109\nprint(ascii_value('n'))  # Output: 110\nprint(ascii_value('o'))  # Output: 111\nprint(ascii_value('p'))  # Output: 112\nprint(ascii_value('q'))  # Output: 113\nprint(ascii_value('r'))  # Output: 114\nprint(ascii_value('s'))  # Output: 115\nprint(ascii_value('t'))  # Output: 116\nprint(ascii_value('u'))  # Output: 117\nprint(ascii_value('v'))  # Output: 118\nprint(ascii_value('w'))  # Output: 119\nprint(ascii_value('x'))  # Output: 120\nprint(ascii_value('y'))  # Output: 121\nprint(ascii_value"}
{"ID": 757, "source": "MBPP:394", "prompt": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if given tuple is distinct or not.\n\"\"\"\ndef check_distinct(test_tup):\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\tadverbs = [\"quickly\", \"slowly\", \"easily\", \"carefully\", \"often\", \"always\", \"never\", \"hardly\", \"softly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "adverbs = [\"quickly\", \"slowly\", \"easily\", \"carefully\", \"often\", \"always\", \"never\", \"hardly\", \"softly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly\", \"well\", \"badly"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\tdistance = 0\n\tfor i in range(min(len(n1), len(n2))):\n\t\tdistance += abs(int(n1[i]) - int(n2[i]))\n\tif len(n1) > len(n2):\n\t\tdistance += sum(int(n1[i]) for i in range(len(n2), len(n1)))\n\telif len(n2) > len(n1):\n\t\tdistance += sum(int(n2[i]) for i in range(len(n1), len(n2)))\n\treturn distance\n\nprint(digit_distance_nums(123, 456)) # 1+2+3+3+2+1 = 11\nprint(digit_distance_nums(1234, 5678)) # 1+2+3+4+3+2+1+1+1+1 = 17\nprint(digit_distance_nums(12345, 67890)) # 1+2+3+4+5+4+3+2+1+1+1+1+1+1+1+1+1+1+1+1 = 30\nprint(digit_distance_nums(123456, 789012)) # 1+2+3+4+5+6+5+4+3+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(digit_distance_nums(123456, 789012)) # 1+2+3+4+5+6+5+4+3+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\timport re\n\tadverbs = re.finditer(r'\\b(?:very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tadverbs = re.finditer(r'\\b(?:very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough|fairly|so|too|as|too|very|just|really|too|enough"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\"\"\"\n\tThis function checks if a number is not prime.\n\t\"\"\"\n\tif n <= 1:\n\t\treturn True\n\tif n <= 3:\n\t\treturn False\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn True\n\ti = 5\n\twhile i * i <= n:\n\t\tif n % i == 0 or n % (i + 2) == 0:\n\t\t\treturn True\n\t\ti += 6\n\treturn False\n\n# Test the function\nprint(is_not_prime(1))  # True\nprint(is_not_prime(2))  # False\nprint(is_not_prime(3))  # False\nprint(is_not_prime(4))  # True\nprint(is_not_prime(5))  # False\nprint(is_not_prime(6))  # True\nprint(is_not_prime(7))  # False\nprint(is_not_prime(8))  # True\nprint(is_not_prime(9))  # True\nprint(is_not_prime(10))  # True\nprint(is_not_prime(11))  # False\nprint(is_not_prime(12))  # True\nprint(is_not_prime(13))  # False\nprint(is_not_prime(14))  # True\nprint(is_not_prime(15))  # True\nprint(is_not_prime(16))  # True\nprint(is_not_prime(17))  # False\nprint(is_not_prime(18))  # True\nprint(is_not_prime(19))  # False\nprint(is_not_prime(20))  # True\nprint(is_not_prime(21))  # True\nprint(is_not_prime(22))  # True\nprint(is_not_prime(23))  # False\nprint(is_not_prime(24))  # True\nprint(is_not_prime(25))  # True\nprint(is_not_prime(26))  # True\nprint(is_not_prime(27))  # True\nprint(is_not_prime", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_not_prime(1))  # True\nprint(is_not_prime(2))  # False\nprint(is_not_prime(3))  # False\nprint(is_not_prime(4))  # True\nprint(is_not_prime(5))  # False\nprint(is_not_prime(6))  # True\nprint(is_not_prime(7))  # False\nprint(is_not_prime(8))  # True\nprint(is_not_prime(9))  # True\nprint(is_not_prime(10))  # True\nprint(is_not_prime(11))  # False\nprint(is_not_prime(12))  # True\nprint(is_not_prime(13))  # False\nprint(is_not_prime(14))  # True\nprint(is_not_prime(15))  # True\nprint(is_not_prime(16))  # True\nprint(is_not_prime(17))  # False\nprint(is_not_prime(18))  # True\nprint(is_not_prime(19))  # False\nprint(is_not_prime(20))  # True\nprint(is_not_prime(21))  # True\nprint(is_not_prime(22))  # True\nprint(is_not_prime(23))  # False\nprint(is_not_prime(24))  # True\nprint(is_not_prime(25))  # True\nprint(is_not_prime(26))  # True\nprint(is_not_prime(27))  # True\nprint(is_not_prime"}
