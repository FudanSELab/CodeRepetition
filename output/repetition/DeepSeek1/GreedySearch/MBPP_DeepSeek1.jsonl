{"ID": 0, "source": "MBPP:601", "prompt": "\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\ndef max_chain_length(arr, n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t\"\"\"\n\t>>> get_ludic(100)\n\t100\n\t>>> get_ludic(1000)\n\t1000\n\t>>> get_ludic(10000)\n\t10000\n\t>>> get_ludic(100000)\n\t100000\n\t>>> get_ludic(1000000)\n\t1000000\n\t>>> get_ludic(10000000)\n\t10000000\n\t>>> get_ludic(100000000)\n\t100000000\n\t>>> get_ludic(1000000000)\n\t1000000000\n\t>>> get_ludic(10000000000)\n\t10000000000\n\t>>> get_ludic(100000000000)\n\t100000000000\n\t>>> get_ludic(1000000000000)\n\t1000000000000\n\t>>> get_ludic(10000000000000)\n\t10000000000000\n\t>>> get_ludic(100000000000000)\n\t100000000000000\n\t>>> get_ludic(1000000000000000)\n\t1000000000000000\n\t>>> get_ludic(10000000000000000)\n\t10000000000000000\n\t>>> get_ludic(100000000000000000)\n\t1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> get_ludic(100)\n\t100\n\t>>> get_ludic(1000)\n\t1000\n\t>>> get_ludic(10000)\n\t10000\n\t>>> get_ludic(100000)\n\t100000\n\t>>> get_ludic(1000000)\n\t1000000\n\t>>> get_ludic(10000000)\n\t10000000\n\t>>> get_ludic(100000000)\n\t100000000\n\t>>> get_ludic(1000000000)\n\t1000000000\n\t>>> get_ludic(10000000000)\n\t10000000000\n\t>>> get_ludic(100000000000)\n\t100000000000\n\t>>> get_ludic(1000000000000)\n\t1000000000000\n\t>>> get_ludic(10000000000000)\n\t10000000000000\n\t>>> get_ludic(100000000000000)\n\t100000000000000\n\t>>> get_ludic(1000000000000000)\n\t1000000000000000\n\t>>> get_ludic(10000000000000000)\n\t10000000000000000\n\t>>> get_ludic(100000000000000000)"}
{"ID": 3, "source": "MBPP:604", "prompt": "\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n\t\"\"\"\n\t>>> reverse_words('hello world')\n\t'world hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> reverse_words('hello world')\n\t'world hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world.')\n\t'world. hello'\n\t>>> reverse_words('hello world"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\tradian = degree * (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588163359329042461143841502156115953611108272988066130381622099141396104940118408483652671045671104276027093852110555964462294895493038196442881097566593344612847564823378678316527120190914", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "radian = degree * (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588163359329042461143841502156115953611108272988066130381622099141396104940118408483652671045671104276027093852110555964462294895493038196442881097566593344612847564823378678316527120190914"}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\tarea = 0.5 * r * r * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446429494231555950510288016887241092164276062257473692700870038530720962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548542187948622298284756482848067165213841469519415116094330572703657595919530921861173819326117931051185485421879486222982847564828480671652138414695194151160943305727036575959195309218611", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "area = 0.5 * r * r * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446429494231555950510288016887241092164276062257473692700870038530720962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548542187948622298284756482848067165213841469519415116094330572703657595919530921861173819326117931051185485421879486222982847564828480671652138414695194151160943305727036575959195309218611"}
{"ID": 29, "source": "MBPP:630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef get_coordinates(test_tup):\n\tx,y = test_tup\n\tadjacent_coordinates = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n\treturn adjacent_coordinates\n\nprint(get_coordinates((1,1)))\nprint(get_coordinates((1,2)))\nprint(get_coordinates((1,3)))\nprint(get_coordinates((1,4)))\nprint(get_coordinates((1,5)))\nprint(get_coordinates((1,6)))\nprint(get_coordinates((1,7)))\nprint(get_coordinates((1,8)))\nprint(get_coordinates((1,9)))\nprint(get_coordinates((1,10)))\nprint(get_coordinates((1,11)))\nprint(get_coordinates((1,12)))\nprint(get_coordinates((1,13)))\nprint(get_coordinates((1,14)))\nprint(get_coordinates((1,15)))\nprint(get_coordinates((1,16)))\nprint(get_coordinates((1,17)))\nprint(get_coordinates((1,18)))\nprint(get_coordinates((1,19)))\nprint(get_coordinates((1,20)))\nprint(get_coordinates((1,21)))\nprint(get_coordinates((1,22)))\nprint(get_coordinates((1,23)))\nprint(get_coordinates((1,24)))\nprint(get_coordinates((1,25)))\nprint(get_coordinates((1,26)))\nprint(get_coordinates((1,27)))\nprint(get_coordinates((1,28)))\nprint(get_coordinates((1,29)))\nprint(get_coordinates((1,30)))\nprint(get_coordinates((1,31)))\nprint(get_coordinates((1,32)))\nprint(get_coordinates((1,33)))\nprint(get_coordinates((1,34)))\nprint(get_coordinates((1,35)))\nprint(get_coordinates((1,36)))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(get_coordinates((1,1)))\nprint(get_coordinates((1,2)))\nprint(get_coordinates((1,3)))\nprint(get_coordinates((1,4)))\nprint(get_coordinates((1,5)))\nprint(get_coordinates((1,6)))\nprint(get_coordinates((1,7)))\nprint(get_coordinates((1,8)))\nprint(get_coordinates((1,9)))\nprint(get_coordinates((1,10)))\nprint(get_coordinates((1,11)))\nprint(get_coordinates((1,12)))\nprint(get_coordinates((1,13)))\nprint(get_coordinates((1,14)))\nprint(get_coordinates((1,15)))\nprint(get_coordinates((1,16)))\nprint(get_coordinates((1,17)))\nprint(get_coordinates((1,18)))\nprint(get_coordinates((1,19)))\nprint(get_coordinates((1,20)))\nprint(get_coordinates((1,21)))\nprint(get_coordinates((1,22)))\nprint(get_coordinates((1,23)))\nprint(get_coordinates((1,24)))\nprint(get_coordinates((1,25)))\nprint(get_coordinates((1,26)))\nprint(get_coordinates((1,27)))\nprint(get_coordinates((1,28)))\nprint(get_coordinates((1,29)))\nprint(get_coordinates((1,30)))\nprint(get_coordinates((1,31)))\nprint(get_coordinates((1,32)))\nprint(get_coordinates((1,33)))\nprint(get_coordinates((1,34)))\nprint(get_coordinates((1,35)))\nprint(get_coordinates((1,36)))\n"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t\"\"\"\n\tReturns True if n is a nonagonal number, False otherwise.\n\t\"\"\"\n\ti = 1\n\twhile i < n:\n\t\ti += 1\n\t\tif i % 2 == 0:\n\t\t\tcontinue\n\t\tif i % 3 == 0:\n\t\t\tcontinue\n\t\tif i % 5 == 0:\n\t\t\tcontinue\n\t\tif i % 7 == 0:\n\t\t\tcontinue\n\t\tif i % 11 == 0:\n\t\t\tcontinue\n\t\tif i % 13 == 0:\n\t\t\tcontinue\n\t\tif i % 17 == 0:\n\t\t\tcontinue\n\t\tif i % 19 == 0:\n\t\t\tcontinue\n\t\tif i % 23 == 0:\n\t\t\tcontinue\n\t\tif i % 29 == 0:\n\t\t\tcontinue\n\t\tif i % 31 == 0:\n\t\t\tcontinue\n\t\tif i % 37 == 0:\n\t\t\tcontinue\n\t\tif i % 41 == 0:\n\t\t\tcontinue\n\t\tif i % 43 == 0:\n\t\t\tcontinue\n\t\tif i % 47 == 0:\n\t\t\tcontinue\n\t\tif i % 53 == 0:\n\t\t\tcontinue\n\t\tif i % 59 == 0:\n\t\t\tcontinue\n\t\tif i % 61 == 0:\n\t\t\tcontinue\n\t\tif i % 67 == 0:\n\t\t\tcontinue\n\t\tif i % 71 == 0:\n\t\t\tcontinue\n\t\tif i % 73 == 0:\n\t\t\tcontinue\n\t\tif i % 79 == 0:\n\t\t\tcontinue\n\t\tif i % 83 == 0:\n\t\t\tcontinue\n\t\tif i % 89 == 0:\n\t\t\tcontinue\n\t\tif i % 97 == 0:\n\t\t\tcontinue\n\t\tif i % 101 == 0:\n\t\t\tcontinue\n\t\tif i % 103 == 0:\n\t\t\tcontinue\n\t\tif i % 107 == 0:\n\t\t\tcontinue\n\t\tif i % 109 == 0:\n\t\t\tcontinue\n\t\tif i % 113 == 0:\n\t\t\tcontinue\n\t\tif i % 127 == 0:\n\t\t\tcontinue\n\t\tif i % 13", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\ti += 1\n\t\tif i % 2 == 0:\n\t\t\tcontinue\n\t\tif i % 3 == 0:\n\t\t\tcontinue\n\t\tif i % 5 == 0:\n\t\t\tcontinue\n\t\tif i % 7 == 0:\n\t\t\tcontinue\n\t\tif i % 11 == 0:\n\t\t\tcontinue\n\t\tif i % 13 == 0:\n\t\t\tcontinue\n\t\tif i % 17 == 0:\n\t\t\tcontinue\n\t\tif i % 19 == 0:\n\t\t\tcontinue\n\t\tif i % 23 == 0:\n\t\t\tcontinue\n\t\tif i % 29 == 0:\n\t\t\tcontinue\n\t\tif i % 31 == 0:\n\t\t\tcontinue\n\t\tif i % 37 == 0:\n\t\t\tcontinue\n\t\tif i % 41 == 0:\n\t\t\tcontinue\n\t\tif i % 43 == 0:\n\t\t\tcontinue\n\t\tif i % 47 == 0:\n\t\t\tcontinue\n\t\tif i % 53 == 0:\n\t\t\tcontinue\n\t\tif i % 59 == 0:\n\t\t\tcontinue\n\t\tif i % 61 == 0:\n\t\t\tcontinue\n\t\tif i % 67 == 0:\n\t\t\tcontinue\n\t\tif i % 71 == 0:\n\t\t\tcontinue\n\t\tif i % 73 == 0:\n\t\t\tcontinue\n\t\tif i % 79 == 0:\n\t\t\tcontinue\n\t\tif i % 83 == 0:\n\t\t\tcontinue\n\t\tif i % 89 == 0:\n\t\t\tcontinue\n\t\tif i % 97 == 0:\n\t\t\tcontinue\n\t\tif i % 101 == 0:\n\t\t\tcontinue\n\t\tif i % 103 == 0:\n\t\t\tcontinue\n\t\tif i % 107 == 0:\n\t\t\tcontinue\n\t\tif i % 109 == 0:\n\t\t\tcontinue\n\t\tif i % 113 == 0:\n\t\t\tcontinue\n\t\tif i % 127 == 0:\n\t\t\tcontinue\n\t\tif i % 13"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t\"\"\"\n\tThis function takes a tuple matrix as input and returns a tuple matrix without similar rows.\n\t\"\"\"\n\tnew_list = []\n\tfor i in test_list:\n\t\tif i not in new_list:\n\t\t\tnew_list.append(i)\n\treturn tuple(new_list)\n\n\ntest_list = ((1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = ((1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2,"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t\"\"\"\n\t>>> text_match_wordz_middle('xz')\n\tTrue\n\t>>> text_match_wordz_middle('zz')\n\tTrue\n\t>>> text_match_wordz_middle('zzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzz')\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> text_match_wordz_middle('xz')\n\tTrue\n\t>>> text_match_wordz_middle('zz')\n\tTrue\n\t>>> text_match_wordz_middle('zzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzz')"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\"\"\"\n\tCheck if test_tup1 is a subset of test_tup2\n\t\"\"\"\n\ttest_tup1 = set(test_tup1)\n\ttest_tup2 = set(test_tup2)\n\treturn test_tup1.issubset(test_tup2)\n\nprint(check_subset((1, 2, 3), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3), (1, 2, 3)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_subset((1, 2, 3), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3), (1, 2, 3)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_subset((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t\n\tregex = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\ttext2 = re.sub(r'[^a-zA-Z0-9]', '', text1)\n\treturn text2\n\nprint(remove_extra_char(\"1234567890\"))\nprint(remove_extra_char(\"1234567890abcdef\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabc", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_extra_char(\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabc"}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n\tTrue\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n\tTrue\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n\tFalse\n\t>>> check_greater((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\"\"\"\n\tFinds the equilibrium index of the given array.\n\t\"\"\"\n\tsum_left = 0\n\tsum_right = sum(arr)\n\tfor i in range(len(arr)):\n\t\tsum_right -= arr[i]\n\t\tif sum_left == sum_right:\n\t\t\treturn i\n\t\tsum_left += arr[i]\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n\tprint(equilibrium_index([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\tunique_list = []\n\tunique_dict = {}\n\tfor i in test_list:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\t\t\tunique_dict[i] = test_list.count(i)\n\treturn unique_dict\n\nprint(get_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(get_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3,"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tlist2.append(i)\n\treturn list2\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "list1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\treturn count  \n\ndef count_prime_fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_2(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_3(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_2(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\t\ti = i + 2\n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_prime_fac_3(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tif n == 1:  \n\t\treturn count  \n\ti = 3\n\twhile i * i <= n:  \n\t\twhile n % i == 0:  \n\t\t\tcount += 1"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t\"\"\"\n\t>>> str_to_tuple('12345')\n\t(1, 2, 3, 4, 5)\n\t>>> str_to_tuple('123456789')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> str_to_tuple('1234567890')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)\n\t>>> str_to_tuple('12345678901')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1)\n\t>>> str_to_tuple('123456789012')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2)\n\t>>> str_to_tuple('1234567890123')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3)\n\t>>> str_to_tuple('12345678901234')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4)\n\t>>> str_to_tuple('123456789012345')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5)\n\t>>> str_to_tuple('1234567890123456')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> str_to_tuple('12345')\n\t(1, 2, 3, 4, 5)\n\t>>> str_to_tuple('123456789')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> str_to_tuple('1234567890')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)\n\t>>> str_to_tuple('12345678901')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1)\n\t>>> str_to_tuple('123456789012')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2)\n\t>>> str_to_tuple('1234567890123')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3)\n\t>>> str_to_tuple('12345678901234')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4)\n\t>>> str_to_tuple('123456789012345')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5)\n\t>>> str_to_tuple('1234567890123456')"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t\n\tdp = [[0 for i in range(N)] for j in range(N)] \n\t\n\tdp[0][0] = cost[0][0] \n\t\n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\t\n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\t\n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j] \n\t\n\ti = N - 1\n\tj = N - 1\n\t\n\tpath = [] \n\t\n\twhile i >= 0 and j >= 0: \n\t\tpath.append((i, j)) \n\t\t\n\t\tif dp[i][j] == dp[i - 1][j] + cost[i][j]: \n\t\t\ti -= 1\n\t\telif dp[i][j] == dp[i][j - 1] + cost[i][j]: \n\t\t\tj -= 1\n\t\n\tpath.reverse() \n\t\n\ttotal = 0\n\t\n\tfor i, j in path: \n\t\ttotal += cost[i][j] \n\t\n\treturn total / len(path) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\ti = 0\n\twhile i < len(nums) - 1:\n\t\tif nums[i] == nums[i+1]:\n\t\t\tnums.pop(i)\n\t\telse:\n\t\t\ti += 1\n\treturn nums\n\nprint(consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the first occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1] < x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the last occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == len(A) - 1 or A[mid + 1] > x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tleft = mid + 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the first occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1] < x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the last occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == len(A) - 1 or A[mid + 1] > x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tleft = mid + 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t\"\"\"\n\tFind the index of the first occurrence of x in A.\n\t\"\"\"\n\tleft = 0\n\tright = len(A) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1] < x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tright = mid - 1\n\t\telif A[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the index of the last occurrence of"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\ti = 1\n\twhile True:\n\t\ti += 1\n\t\ttri = i * (i + 1) / 2\n\t\tif len(str(tri)) == n:\n\t\t\treturn i\n\nprint find_Index(1)\nprint find_Index(2)\nprint find_Index(3)\nprint find_Index(4)\nprint find_Index(5)\nprint find_Index(6)\nprint find_Index(7)\nprint find_Index(8)\nprint find_Index(9)\nprint find_Index(10)\nprint find_Index(11)\nprint find_Index(12)\nprint find_Index(13)\nprint find_Index(14)\nprint find_Index(15)\nprint find_Index(16)\nprint find_Index(17)\nprint find_Index(18)\nprint find_Index(19)\nprint find_Index(20)\nprint find_Index(21)\nprint find_Index(22)\nprint find_Index(23)\nprint find_Index(24)\nprint find_Index(25)\nprint find_Index(26)\nprint find_Index(27)\nprint find_Index(28)\nprint find_Index(29)\nprint find_Index(30)\nprint find_Index(31)\nprint find_Index(32)\nprint find_Index(33)\nprint find_Index(34)\nprint find_Index(35)\nprint find_Index(36)\nprint find_Index(37)\nprint find_Index(38)\nprint find_Index(39)\nprint find_Index(40)\nprint find_Index(41)\nprint find_Index(42)\nprint find_Index(43)\nprint find_Index(44)\nprint find_Index(45)\nprint find_Index(46)\nprint find_Index(47)\nprint find_Index(48)\nprint find_Index(49)\nprint find_Index(50)\nprint find_Index(51)\nprint find_Index(52)\nprint find_Index(5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print find_Index(1)\nprint find_Index(2)\nprint find_Index(3)\nprint find_Index(4)\nprint find_Index(5)\nprint find_Index(6)\nprint find_Index(7)\nprint find_Index(8)\nprint find_Index(9)\nprint find_Index(10)\nprint find_Index(11)\nprint find_Index(12)\nprint find_Index(13)\nprint find_Index(14)\nprint find_Index(15)\nprint find_Index(16)\nprint find_Index(17)\nprint find_Index(18)\nprint find_Index(19)\nprint find_Index(20)\nprint find_Index(21)\nprint find_Index(22)\nprint find_Index(23)\nprint find_Index(24)\nprint find_Index(25)\nprint find_Index(26)\nprint find_Index(27)\nprint find_Index(28)\nprint find_Index(29)\nprint find_Index(30)\nprint find_Index(31)\nprint find_Index(32)\nprint find_Index(33)\nprint find_Index(34)\nprint find_Index(35)\nprint find_Index(36)\nprint find_Index(37)\nprint find_Index(38)\nprint find_Index(39)\nprint find_Index(40)\nprint find_Index(41)\nprint find_Index(42)\nprint find_Index(43)\nprint find_Index(44)\nprint find_Index(45)\nprint find_Index(46)\nprint find_Index(47)\nprint find_Index(48)\nprint find_Index(49)\nprint find_Index(50)\nprint find_Index(51)\nprint find_Index(52)\nprint find_Index(5"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\tstr1 = str1.replace(\" \", \"\")\n\tstr1 = str1.replace(\".\", \"\")\n\tstr1 = str1.replace(\",\", \"\")\n\tstr1 = str1.replace(\":\", \"\")\n\tstr1 = str1.replace(\";\", \"\")\n\tstr1 = str1.replace(\"?\", \"\")\n\tstr1 = str1.replace(\"-\", \"\")\n\tstr1 = str1.replace(\"_\", \"\")\n\tstr1 = str1.replace(\"(\", \"\")\n\tstr1 = str1.replace(\")\", \"\")\n\tstr1 = str1.replace(\"[\", \"\")\n\tstr1 = str1.replace(\"]\", \"\")\n\tstr1 = str1.replace(\"{\", \"\")\n\tstr1 = str1.replace(\"}\", \"\")\n\tstr1 = str1.replace(\"\\\"\", \"\")\n\tstr1 = str1.replace(\"'\", \"\")\n\tstr1 = str1.replace(\"*\", \"\")\n\tstr1 = str1.replace(\"&\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"%\", \"\")\n\tstr1 = str1.replace(\"$\", \"\")\n\tstr1 = str1.replace(\"#\", \"\")\n\tstr1 = str1.replace(\"@\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n\tstr1 = str1.replace(\"=\", \"\")\n\tstr1 = str1.replace(\"<\", \"\")\n\tstr1 = str1.replace(\">\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tstr1 = str1.replace(\".\", \"\")\n\tstr1 = str1.replace(\",\", \"\")\n\tstr1 = str1.replace(\":\", \"\")\n\tstr1 = str1.replace(\";\", \"\")\n\tstr1 = str1.replace(\"?\", \"\")\n\tstr1 = str1.replace(\"-\", \"\")\n\tstr1 = str1.replace(\"_\", \"\")\n\tstr1 = str1.replace(\"(\", \"\")\n\tstr1 = str1.replace(\")\", \"\")\n\tstr1 = str1.replace(\"[\", \"\")\n\tstr1 = str1.replace(\"]\", \"\")\n\tstr1 = str1.replace(\"{\", \"\")\n\tstr1 = str1.replace(\"}\", \"\")\n\tstr1 = str1.replace(\"\\\"\", \"\")\n\tstr1 = str1.replace(\"'\", \"\")\n\tstr1 = str1.replace(\"*\", \"\")\n\tstr1 = str1.replace(\"&\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"%\", \"\")\n\tstr1 = str1.replace(\"$\", \"\")\n\tstr1 = str1.replace(\"#\", \"\")\n\tstr1 = str1.replace(\"@\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n\tstr1 = str1.replace(\"=\", \"\")\n\tstr1 = str1.replace(\"<\", \"\")\n\tstr1 = str1.replace(\">\", \"\")\n\tstr1 = str1.replace(\"^\", \"\")\n\tstr1 = str1.replace(\"~\", \"\")\n\tstr1 = str1.replace(\"`\", \"\")\n\tstr1 = str1.replace(\"|\", \"\")\n\tstr1 = str1.replace(\"\\\\\", \"\")\n\tstr1 = str1.replace(\"+\", \"\")\n"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t\"\"\"\n\t>>> text_match_zero_one('abbbb')\n\tTrue\n\t>>> text_match_zero_one('abbbba')\n\tFalse\n\t>>> text_match_zero_one('abbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b(text):\n\t\"\"\"\n\t>>> text_match_three_b('abbbb')\n\tFalse\n\t>>> text_match_three_b('abbbba')\n\tFalse\n\t>>> text_match_three_b('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_2(text):\n\t\"\"\"\n\t>>> text_match_three_b_2('abbbb')\n\tFalse\n\t>>> text_match_three_b_2('abbbba')\n\tFalse\n\t>>> text_match_three_b_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_3(text):\n\t\"\"\"\n\t>>> text_match_three_b_3('abbbb')\n\tFalse\n\t>>> text_match_three_b_3('abbbba')\n\tFalse\n\t>>> text_match_three_b_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_4(text):\n\t\"\"\"\n\t>>> text_match_three_b_4('abbbb')\n\tFalse\n\t>>> text_match_three_b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t>>> text_match_three_b('abbbba')\n\tFalse\n\t>>> text_match_three_b('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_2(text):\n\t\"\"\"\n\t>>> text_match_three_b_2('abbbb')\n\tFalse\n\t>>> text_match_three_b_2('abbbba')\n\tFalse\n\t>>> text_match_three_b_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_3(text):\n\t\"\"\"\n\t>>> text_match_three_b_3('abbbb')\n\tFalse\n\t>>> text_match_three_b_3('abbbba')\n\tFalse\n\t>>> text_match_three_b_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three_b_4(text):\n\t\"\"\"\n\t>>> text_match_three_b_4('abbbb')\n\tFalse\n\t>>> text_match_three_b"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t\"\"\"\n\t>>> is_decimal(1.0)\n\tTrue\n\t>>> is_decimal(1.01)\n\tTrue\n\t>>> is_decimal(1.001)\n\tTrue\n\t>>> is_decimal(1.0001)\n\tFalse\n\t>>> is_decimal(1.00001)\n\tFalse\n\t>>> is_decimal(1.000001)\n\tFalse\n\t>>> is_decimal(1.0000001)\n\tFalse\n\t>>> is_decimal(1.00000001)\n\tFalse\n\t>>> is_decimal(1.000000001)\n\tFalse\n\t>>> is_decimal(1.0000000001)\n\tFalse\n\t>>> is_decimal(1.00000000001)\n\tFalse\n\t>>> is_decimal(1.000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> is_decimal(1.0)\n\tTrue\n\t>>> is_decimal(1.01)\n\tTrue\n\t>>> is_decimal(1.001)\n\tTrue\n\t>>> is_decimal(1.0001)\n\tFalse\n\t>>> is_decimal(1.00001)\n\tFalse\n\t>>> is_decimal(1.000001)\n\tFalse\n\t>>> is_decimal(1.0000001)\n\tFalse\n\t>>> is_decimal(1.00000001)\n\tFalse\n\t>>> is_decimal(1.000000001)\n\tFalse\n\t>>> is_decimal(1.0000000001)\n\tFalse\n\t>>> is_decimal(1.00000000001)\n\tFalse\n\t>>> is_decimal(1.000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000001)\n\tFalse\n\t>>> is_decimal(1.000000000000000001)\n\tFalse\n\t>>> is_decimal(1.0000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000000000001)\n\tFalse\n\t>>> is_decimal(1.00000000000"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\tcount = 0\n\tpos = 0\n\twhile True:\n\t\tpos = text.find(pattern,pos)\n\t\tif pos == -1:\n\t\t\tbreak\n\t\tcount += 1\n\t\tpos += 1\n\treturn count\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t\"\"\"\n\t>>> tuple_str_int('(1, 2, 3)')\n\t(1, 2, 3)\n\t>>> tuple_str_int('(1, 2, 3, 4)')\n\t(1, 2, 3, 4)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5)')\n\t(1, 2, 3, 4, 5)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6)')\n\t(1, 2, 3, 4, 5, 6)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7)')\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8)')\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> tuple_str_int('(1, 2, 3)')\n\t(1, 2, 3)\n\t>>> tuple_str_int('(1, 2, 3, 4)')\n\t(1, 2, 3, 4)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5)')\n\t(1, 2, 3, 4, 5)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6)')\n\t(1, 2, 3, 4, 5, 6)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7)')\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8)')\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)')\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> tuple_str_int('(1, 2, 3, 4, 5, 6, "}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\"\"\"\n\tFind the index where x should be inserted into a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_2(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_3(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_4(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_5(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_6(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tFind the index where x should be inserted into a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_2(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_3(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_4(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_5(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\"\n\tn = len(a)\n\ti = 0\n\twhile i < n and a[i] < x:\n\t\ti += 1\n\treturn i\n\ndef find_index_6(a, x):\n\t\"\"\"\n\tFind the index of x in a[1..n] in order to maintain the sorted order.\n\t\"\"\""}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t\"\"\"\n\t>>> text_match_three('abbbb')\n\tTrue\n\t>>> text_match_three('abbbba')\n\tFalse\n\t>>> text_match_three('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbbb')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything(text):\n\t\"\"\"\n\t>>> text_match_anything('abbbb')\n\tTrue\n\t>>> text_match_anything('abbbba')\n\tTrue\n\t>>> text_match_anything('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_2(text):\n\t\"\"\"\n\t>>> text_match_anything_2('abbbb')\n\tTrue\n\t>>> text_match_anything_2('abbbba')\n\tTrue\n\t>>> text_match_anything_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_3(text):\n\t\"\"\"\n\t>>> text_match_anything_3('abbbb')\n\tTrue\n\t>>> text_match_anything_3('abbbba')\n\tTrue\n\t>>> text_match_anything_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_4(text):\n\t\"\"\"\n\t>>> text_match_anything_4('abbbb')\n\tTrue\n\t>>> text_match_anything_4('abbbba')\n\tTrue\n\t>>> text_match_anything_4('abbbbb')\n\tTrue\n\t\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tTrue\n\t\"\"\"\n\treturn text.startswith('abbbb')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything(text):\n\t\"\"\"\n\t>>> text_match_anything('abbbb')\n\tTrue\n\t>>> text_match_anything('abbbba')\n\tTrue\n\t>>> text_match_anything('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_2(text):\n\t\"\"\"\n\t>>> text_match_anything_2('abbbb')\n\tTrue\n\t>>> text_match_anything_2('abbbba')\n\tTrue\n\t>>> text_match_anything_2('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_3(text):\n\t\"\"\"\n\t>>> text_match_anything_3('abbbb')\n\tTrue\n\t>>> text_match_anything_3('abbbba')\n\tTrue\n\t>>> text_match_anything_3('abbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('abbb') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_4(text):\n\t\"\"\"\n\t>>> text_match_anything_4('abbbb')\n\tTrue\n\t>>> text_match_anything_4('abbbba')\n\tTrue\n\t>>> text_match_anything_4('abbbbb')\n\tTrue\n\t\"\"\""}
{"ID": 190, "source": "MBPP:791", "prompt": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n\t\"\"\"\n\t>>> remove_nested((1, 2, 3, 4, 5))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> remove_nested((1, 2, 3, 4, 5))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13)))\n\t(1, 2, 3, 4, 5)\n\t>>> remove_nested((1, 2, 3, 4, (5, 6, 7, 8, 9, 10, 11, 12, 13, "}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')\n\tTrue\n\t>>> text_starta_endb('aabbb')\n\tFalse\n\t>>> text_starta_endb('aabbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('a') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t\"\"\"\n\t>>> text_starta_endb('aaabbb')\n\tTrue\n\t>>> text_starta_endb('aaaaabbb')"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\timport heapq\n\theap = []\n\tfor item in items:\n\t\theapq.heappush(heap,item)\n\t\tprint(heap)\n\t\tprint(heap[0])\n\t\tprint(heap[1])\n\t\tprint(heap[2])\n\t\tprint(heap[3])\n\t\tprint(heap[4])\n\t\tprint(heap[5])\n\t\tprint(heap[6])\n\t\tprint(heap[7])\n\t\tprint(heap[8])\n\t\tprint(heap[9])\n\t\tprint(heap[10])\n\t\tprint(heap[11])\n\t\tprint(heap[12])\n\t\tprint(heap[13])\n\t\tprint(heap[14])\n\t\tprint(heap[15])\n\t\tprint(heap[16])\n\t\tprint(heap[17])\n\t\tprint(heap[18])\n\t\tprint(heap[19])\n\t\tprint(heap[20])\n\t\tprint(heap[21])\n\t\tprint(heap[22])\n\t\tprint(heap[23])\n\t\tprint(heap[24])\n\t\tprint(heap[25])\n\t\tprint(heap[26])\n\t\tprint(heap[27])\n\t\tprint(heap[28])\n\t\tprint(heap[29])\n\t\tprint(heap[30])\n\t\tprint(heap[31])\n\t\tprint(heap[32])\n\t\tprint(heap[33])\n\t\tprint(heap[34])\n\t\tprint(heap[35])\n\t\tprint(heap[36])\n\t\tprint(heap[37])\n\t\tprint(heap[38])\n\t\tprint(heap[39])\n\t\tprint(heap[40])\n\t\tprint(heap[41])\n\t\tprint(heap[42])\n\t\tprint(heap[43", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\tprint(heap)\n\t\tprint(heap[0])\n\t\tprint(heap[1])\n\t\tprint(heap[2])\n\t\tprint(heap[3])\n\t\tprint(heap[4])\n\t\tprint(heap[5])\n\t\tprint(heap[6])\n\t\tprint(heap[7])\n\t\tprint(heap[8])\n\t\tprint(heap[9])\n\t\tprint(heap[10])\n\t\tprint(heap[11])\n\t\tprint(heap[12])\n\t\tprint(heap[13])\n\t\tprint(heap[14])\n\t\tprint(heap[15])\n\t\tprint(heap[16])\n\t\tprint(heap[17])\n\t\tprint(heap[18])\n\t\tprint(heap[19])\n\t\tprint(heap[20])\n\t\tprint(heap[21])\n\t\tprint(heap[22])\n\t\tprint(heap[23])\n\t\tprint(heap[24])\n\t\tprint(heap[25])\n\t\tprint(heap[26])\n\t\tprint(heap[27])\n\t\tprint(heap[28])\n\t\tprint(heap[29])\n\t\tprint(heap[30])\n\t\tprint(heap[31])\n\t\tprint(heap[32])\n\t\tprint(heap[33])\n\t\tprint(heap[34])\n\t\tprint(heap[35])\n\t\tprint(heap[36])\n\t\tprint(heap[37])\n\t\tprint(heap[38])\n\t\tprint(heap[39])\n\t\tprint(heap[40])\n\t\tprint(heap[41])\n\t\tprint(heap[42])\n\t\tprint(heap[43"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\tmax_run = 0\n\tcurr_run = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\tcurr_run += 1\n\t\telse:\n\t\t\tmax_run = max(max_run, curr_run)\n\t\t\tcurr_run = 0\n\tmax_run = max(max_run, curr_run)\n\treturn max_run\n\nprint(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run_uppercase(\"Hello World!\"))\nprint(max_run"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\"\"\"\n\tFinds the first odd number in a list of numbers.\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\nprint(first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_odd([1, 3, 5, 7, 9]))\nprint(first_odd([2, 4, 6, 8, 10]))\nprint(first_odd([1, 3, 5, 7, 9, 11]))\nprint(first_odd([2, 4, 6, 8, 10, 12]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]))\nprint(first_odd([2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_odd([1, 3, 5, 7, 9]))\nprint(first_odd([2, 4, 6, 8, 10]))\nprint(first_odd([1, 3, 5, 7, 9, 11]))\nprint(first_odd([2, 4, 6, 8, 10, 12]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\nprint(first_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]))\nprint(first_odd([2"}
{"ID": 208, "source": "MBPP:809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n\t\"\"\"\n\tCheck if each element of second tuple is smaller than its corresponding index in first tuple.\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tif test_tup1[i] < test_tup2[i]:\n\t\t\tresult.append(True)\n\t\telse:\n\t\t\tresult.append(False)\n\treturn result\n\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(check_smaller((1, 2, 3,"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t\"\"\"\n\t>>> clear_tuple((1, 2, 3))\n\t(1, 2, 3)\n\t>>> clear_tuple((1, 2, 3, 4))\n\t(1, 2, 3, 4)\n\t>>> clear_tuple((1, 2, 3, 4, 5))\n\t(1, 2, 3, 4, 5)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6))\n\t(1, 2, 3, 4, 5, 6)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7))\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8))\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n\t(1, 2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t>>> clear_tuple((1, 2, 3, 4, 5, 6))\n\t(1, 2, 3, 4, 5, 6)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7))\n\t(1, 2, 3, 4, 5, 6, 7)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8))\n\t(1, 2, 3, 4, 5, 6, 7, 8)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\t(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\t>>> clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t\"\"\"\n\tChecks if the password is valid.\n\t\"\"\"\n\tvalid = True\n\tif len(p) < 8:\n\t\tvalid = False\n\telif not any(c.isdigit() for c in p):\n\t\tvalid = False\n\telif not any(c.isupper() for c in p):\n\t\tvalid = False\n\telif not any(c.islower() for c in p):\n\t\tvalid = False\n\treturn valid\n\n\nif __name__ == \"__main__\":\n\tprint(pass_validity(\"12345678\"))\n\tprint(pass_validity(\"123456789\"))\n\tprint(pass_validity(\"1234567890\"))\n\tprint(pass_validity(\"12345678901\"))\n\tprint(pass_validity(\"123456789012\"))\n\tprint(pass_validity(\"1234567890123\"))\n\tprint(pass_validity(\"12345678901234\"))\n\tprint(pass_validity(\"123456789012345\"))\n\tprint(pass_validity(\"1234567890123456\"))\n\tprint(pass_validity(\"12345678901234567\"))\n\tprint(pass_validity(\"123456789012345678\"))\n\tprint(pass_validity(\"1234567890123456789\"))\n\tprint(pass_validity(\"12345678901234567890\"))\n\tprint(pass_validity(\"123456789012345678901\"))\n\tprint(pass_validity(\"1234567890123456789012\"))\n\tprint(pass_validity(\"12345678", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(pass_validity(\"12345678\"))\n\tprint(pass_validity(\"123456789\"))\n\tprint(pass_validity(\"1234567890\"))\n\tprint(pass_validity(\"12345678901\"))\n\tprint(pass_validity(\"123456789012\"))\n\tprint(pass_validity(\"1234567890123\"))\n\tprint(pass_validity(\"12345678901234\"))\n\tprint(pass_validity(\"123456789012345\"))\n\tprint(pass_validity(\"1234567890123456\"))\n\tprint(pass_validity(\"12345678901234567\"))\n\tprint(pass_validity(\"123456789012345678\"))\n\tprint(pass_validity(\"1234567890123456789\"))\n\tprint(pass_validity(\"12345678901234567890\"))\n\tprint(pass_validity(\"123456789012345678901\"))\n\tprint(pass_validity(\"1234567890123456789012\"))\n\tprint(pass_validity(\"12345678"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\timport re\n\tpattern = re.compile(sample)\n\tmatch = pattern.search(string)\n\tif match :\n\t\tprint(\"String starts with the substring\")\n\telse :\n\t\tprint(\"String does not start with the substring\")\n\ncheck_substring(\"Hello World\", \"Hello\")\ncheck_substring(\"Hello World\", \"World\")\ncheck_substring(\"Hello World\", \"World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\")\ncheck_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "check_substring(\"Hello World\", \"World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef factorial(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * factorial(n - 1) \n\ndef count_digits(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef count_digits_factorial(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef count_digits_factorial_recursive(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive(n - 1) \n\ndef count_digits_factorial_recursive_2(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_2(n - 1) \n\ndef count_digits_factorial_recursive_3(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_3(n - 1) \n\ndef count_digits_factorial_recursive_4(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_4(n - 1) \n\ndef count_digits_factorial_recursive_5(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_5(n - 1) \n\ndef count_digits_factorial_recursive_6(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_6(n - 1) \n\ndef count_digits_factorial_recursive_7(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n *", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn count\n\ndef count_digits_factorial(n): \n\tcount = 0\n\twhile(n): \n\t\tcount += 1\n\t\tn //= 10\n\treturn count\n\ndef count_digits_factorial_recursive(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive(n - 1) \n\ndef count_digits_factorial_recursive_2(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_2(n - 1) \n\ndef count_digits_factorial_recursive_3(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_3(n - 1) \n\ndef count_digits_factorial_recursive_4(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_4(n - 1) \n\ndef count_digits_factorial_recursive_5(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_5(n - 1) \n\ndef count_digits_factorial_recursive_6(n): \n\tif n == 0: \n\t\treturn 1\n\treturn n * count_digits_factorial_recursive_6(n - 1) \n\ndef count_digits_factorial_recursive_7(n): "}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\nprint(lcopy((1,)))\nprint(lcopy((1, 2)))\nprint(lcopy((1, 2, 3)))\nprint(lcopy((1, 2, 3, 4)))\nprint(lcopy((1, 2, 3, 4, 5)))\nprint(lcopy((1, 2, 3, 4, 5, 6)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(lcopy((1,)))\nprint(lcopy((1, 2)))\nprint(lcopy((1, 2, 3)))\nprint(lcopy((1, 2, 3, 4)))\nprint(lcopy((1, 2, 3, 4, 5)))\nprint(lcopy((1, 2, 3, 4, 5, 6)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(lcopy((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\theap = []\n\tfor i in rawheap:\n\t\theap.append(i)\n\t\theapify(heap)\n\treturn heap\n\ndef heapify(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\tparent = (i - 1) // 2\n\t\tif heap[parent] < heap[i]:\n\t\t\theap[parent], heap[i] = heap[i], heap[parent]\n\t\t\ti = parent\n\t\telse:\n\t\t\tbreak\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i\n\tif left < length and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < length and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest != i:\n\t\theap[i], heap[largest] = heap[largest], heap[i]\n\t\theapify(heap, largest, length)\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i\n\tif left < length and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < length and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest != i:\n\t\theap[i], heap[largest]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tbreak\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i\n\tif left < length and heap[left] > heap[largest]:\n\t\tlargest = left\n\tif right < length and heap[right] > heap[largest]:\n\t\tlargest = right\n\tif largest != i:\n\t\theap[i], heap[largest] = heap[largest], heap[i]\n\t\theapify(heap, largest, length)\n\ndef heap_sort(heap):\n\tlength = len(heap)\n\ti = length - 1\n\twhile i > 0:\n\t\theap[0], heap[i] = heap[i], heap[0]\n\t\theapify(heap, 0, i)\n\t\ti -= 1\n\ndef heapify(heap, i, length):\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tlargest = i"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t\n\tans = 0\n\t\n\tpos = [i for i in range(n)]\n\t\n\tfor i in range(n) : \n\t\t\n\t\tpos[arr[i]] = i\n\t\t\n\tfor i in range(n) : \n\t\t\n\t\tif (arr[i] != i) : \n\t\t\t\n\t\t\tans += 1\n\t\t\t\n\t\t\tj = i\n\t\t\t\n\t\t\twhile (arr[j] != i) : \n\t\t\t\t\n\t\t\t\ttemp = arr[j]\n\t\t\t\t\n\t\t\t\tarr[j] = arr[i]\n\t\t\t\t\n\t\t\t\tarr[i] = temp\n\t\t\t\t\n\t\t\t\tj = arr[i]\n\t\t\t\t\n\t\t\t\tans += 1\n\t\t\t\t\n\treturn ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\ndef square_count(input_list):\n\tcount = count_list(input_list)\n\treturn count**2\n\nprint(square_count([[1, 2], [3, 4], [5, 6]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(square_count([[1, 2], [3, 4], [5, 6]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]))\nprint(square_count([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t\"\"\"\n\tGenerate all sublists of a given list.\n\t\"\"\"\n\tsub_list = []\n\tfor i in range(len(my_list) + 1):\n\t\tfor j in range(i):\n\t\t\tsub_list.append(my_list[j:i])\n\treturn sub_list\n\nprint(sub_lists([1, 2, 3]))\nprint(sub_lists([1, 2, 3, 4]))\nprint(sub_lists([1, 2, 3, 4, 5]))\nprint(sub_lists([1, 2, 3, 4, 5, 6]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sub_lists([1, 2, 3]))\nprint(sub_lists([1, 2, 3, 4]))\nprint(sub_lists([1, 2, 3, 4, 5]))\nprint(sub_lists([1, 2, 3, 4, 5, 6]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(sub_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\timport re\n\tpattern = re.compile('^[a-zA-Z0-9]+$')\n\tif pattern.match(string):\n\t\tprint(\"String is alphanumeric\")\n\telse:\n\t\tprint(\"String is not alphanumeric\")\n\ncheck_alphanumeric(\"abc123\")\ncheck_alphanumeric(\"abc\")\ncheck_alphanumeric(\"abc1234\")\ncheck_alphanumeric(\"abc12345\")\ncheck_alphanumeric(\"abc123456\")\ncheck_alphanumeric(\"abc1234567\")\ncheck_alphanumeric(\"abc12345678\")\ncheck_alphanumeric(\"abc123456789\")\ncheck_alphanumeric(\"abc1234567890\")\ncheck_alphanumeric(\"abc12345678901\")\ncheck_alphanumeric(\"abc123456789012\")\ncheck_alphanumeric(\"abc1234567890123\")\ncheck_alphanumeric(\"abc12345678901234\")\ncheck_alphanumeric(\"abc123456789012345\")\ncheck_alphanumeric(\"abc1234567890123456\")\ncheck_alphanumeric(\"abc12345678901234567\")\ncheck_alphanumeric(\"abc123456789012345678\")\ncheck_alphanumeric(\"abc1234567890123456789\")\ncheck_alphanumeric(\"abc12345678901234567890\")\ncheck_alphanumeric(\"abc123456789012345678901\")\ncheck_alphanumeric(\"abc12345678901234", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "check_alphanumeric(\"abc123\")\ncheck_alphanumeric(\"abc\")\ncheck_alphanumeric(\"abc1234\")\ncheck_alphanumeric(\"abc12345\")\ncheck_alphanumeric(\"abc123456\")\ncheck_alphanumeric(\"abc1234567\")\ncheck_alphanumeric(\"abc12345678\")\ncheck_alphanumeric(\"abc123456789\")\ncheck_alphanumeric(\"abc1234567890\")\ncheck_alphanumeric(\"abc12345678901\")\ncheck_alphanumeric(\"abc123456789012\")\ncheck_alphanumeric(\"abc1234567890123\")\ncheck_alphanumeric(\"abc12345678901234\")\ncheck_alphanumeric(\"abc123456789012345\")\ncheck_alphanumeric(\"abc1234567890123456\")\ncheck_alphanumeric(\"abc12345678901234567\")\ncheck_alphanumeric(\"abc123456789012345678\")\ncheck_alphanumeric(\"abc1234567890123456789\")\ncheck_alphanumeric(\"abc12345678901234567890\")\ncheck_alphanumeric(\"abc123456789012345678901\")\ncheck_alphanumeric(\"abc12345678901234"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a.*?b$')\n\tmatch = pattern.search(text)\n\tif match:\n\t\tprint(match.group())\n\telse:\n\t\tprint(\"No match\")\n\ntext_match(\"abbbb\")\ntext_match(\"abbbbb\")\ntext_match(\"abbbbbb\")\ntext_match(\"abbbbbbb\")\ntext_match(\"abbbbbbbb\")\ntext_match(\"abbbbbbbbb\")\ntext_match(\"abbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "text_match(\"abbbb\")\ntext_match(\"abbbbb\")\ntext_match(\"abbbbbb\")\ntext_match(\"abbbbbbb\")\ntext_match(\"abbbbbbbb\")\ntext_match(\"abbbbbbbbb\")\ntext_match(\"abbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\ntext"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t\"\"\"\n\t>>> float_to_tuple('1.23456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345678')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> float_to_tuple('1.23456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.23456789012345678')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.234567890123456789')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234567890')\n\t(1, 23456789)\n\t>>> float_to_tuple('1.2345678901234"}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\timport re\n\tpattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\tmatch = re.search(pattern, url)\n\tif match:\n\t\tdate = match.group()\n\t\tprint(date)\n\telse:\n\t\tprint(\"No match found\")\n\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:l\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:m\")\nextract_date(\"https://www.google.com/search", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "extract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:l\")\nextract_date(\"https://www.google.com/search?q=python+date&oq=python+date&aqs=chrome.0.0j69i57j69i59j69i60l3.1006j0j7&sourceid=chrome&ie=UTF-8&tbm=isch&tbs=isz:m\")\nextract_date(\"https://www.google.com/search"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\"\"\"\n\tFinds the previous palindrome of a specified number.\n\t\"\"\"\n\tnum_str = str(num)\n\tnum_len = len(num_str)\n\tnum_half = num_len // 2\n\tnum_half_rev = num_half - 1\n\tnum_half_rev_str = num_str[num_half_rev::-1]\n\tnum_half_rev_str_len = len(num_half_rev_str)\n\tnum_half_rev_str_half = num_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev = num_half_rev_str_half - 1\n\tnum_half_rev_str_half_rev_str = num_half_rev_str[num_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev = num_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str = num_half_rev_str_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev_str_half_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tnum_half = num_len // 2\n\tnum_half_rev = num_half - 1\n\tnum_half_rev_str = num_str[num_half_rev::-1]\n\tnum_half_rev_str_len = len(num_half_rev_str)\n\tnum_half_rev_str_half = num_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev = num_half_rev_str_half - 1\n\tnum_half_rev_str_half_rev_str = num_half_rev_str[num_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev = num_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str = num_half_rev_str_half_rev_str_half_rev_str[num_half_rev_str_half_rev_str_half_rev_str_half_rev::-1]\n\tnum_half_rev_str_half_rev_str_half_rev_str_len = len(num_half_rev_str_half_rev_str_half_rev_str)\n\tnum_half_rev_str_half_rev_str_half_rev_str_half = num_half_rev_str_half_rev_str_half_rev_str_len // 2\n\tnum_half_rev_str_half_rev_str_half_rev_str_half_"}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\ndef ln(x):\n\t\"\"\"\n\tFind ln of x.\n\t\"\"\"\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 320, "source": "MBPP:921", "prompt": "\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n\t\"\"\"\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 3)\n\t[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 4)\n\t[(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 5)\n\t[(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 6)\n\t[(1, 2, 3, 4, 5, 6), (7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 7)\n\t[(1, 2, 3, 4, 5, 6, 7), (8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 8)\n\t[(1, 2, 3, 4, 5, 6, 7, 8), (9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 9)\n\t[(1, 2, 3, 4, 5, 6, 7, 8, 9), (10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 10)\n\t[(1, 2, 3,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 3)\n\t[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 4)\n\t[(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, )]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 5)\n\t[(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 6)\n\t[(1, 2, 3, 4, 5, 6), (7, 8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 7)\n\t[(1, 2, 3, 4, 5, 6, 7), (8, 9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 8)\n\t[(1, 2, 3, 4, 5, 6, 7, 8), (9, 10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 9)\n\t[(1, 2, 3, 4, 5, 6, 7, 8, 9), (10)]\n\t>>> chunk_tuples((1,2,3,4,5,6,7,8,9,10), 10)"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t\"\"\"\n\tThis function takes two numbers as arguments and returns the maximum of the two.\n\t\"\"\"\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\nprint(max_of_two(10, 20))\nprint(max_of_two(100, 200))\nprint(max_of_two(1000, 2000))\nprint(max_of_two(10000, 20000))\nprint(max_of_two(100000, 200000))\nprint(max_of_two(1000000, 2000000))\nprint(max_of_two(10000000, 20000000))\nprint(max_of_two(100000000, 200000000))\nprint(max_of_two(1000000000, 2000000000))\nprint(max_of_two(10000000000, 20000000000))\nprint(max_of_two(100000000000, 200000000000))\nprint(max_of_two(1000000000000, 2000000000000))\nprint(max_of_two(10000000000000, 20000000000000))\nprint(max_of_two(100000000000000, 200000000000000))\nprint(max_of_two(1000000000000000, 2000000000000000))\nprint(max_of_two(10000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_of_two(10, 20))\nprint(max_of_two(100, 200))\nprint(max_of_two(1000, 2000))\nprint(max_of_two(10000, 20000))\nprint(max_of_two(100000, 200000))\nprint(max_of_two(1000000, 2000000))\nprint(max_of_two(10000000, 20000000))\nprint(max_of_two(100000000, 200000000))\nprint(max_of_two(1000000000, 2000000000))\nprint(max_of_two(10000000000, 20000000000))\nprint(max_of_two(100000000000, 200000000000))\nprint(max_of_two(1000000000000, 2000000000000))\nprint(max_of_two(10000000000000, 20000000000000))\nprint(max_of_two(100000000000000, 200000000000000))\nprint(max_of_two(1000000000000000, 2000000000000000))\nprint(max_of_two(10000000000000"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\tself.data = data \n\tself.left = None\n\tself.right = None\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max(height(root.left), height(root.right))\n\n\"\"\"\nWrite a function to calculate the number of nodes in the given binary tree.\n\"\"\"\ndef count(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count(root.left) + count(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count(root.left) + count(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None and root.right is None:\n\t\treturn 1\n\telse:\n\t\treturn leaves(root.left) + leaves(root.right)\n\n\"\"\"\nWrite a function to calculate the number of internal nodes in the given binary tree.\n\"\"\"\ndef internal(root):\n\tif root is None:\n\t\treturn 0\n\tif root.left is None or root.right is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + internal(root.left) + internal(root.right)\n\n\"\"\"\nWrite a function to calculate the number of leaves in the given binary tree.\n\"\"\"\ndef leaves(root):\n\tif root is None:\n\t\treturn 0"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\tcount = 0  \n\tfor x in tuplex:  \n\t\tif x == value:  \n\t\t\tcount += 1  \n\treturn count  \ntuplex = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "tuplex = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'ab*')\n\tmatch = pattern.search(text)\n\tif match:\n\t\tprint(match.group())\n\telse:\n\t\tprint(\"No match\")\n\ntext_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "text_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\tl = list(set(l))\n\treturn l\n\nprint(remove_duplic_list(['a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_duplic_list(['a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','b','c','d','a','"}
{"ID": 335, "source": "MBPP:936", "prompt": "\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n\t\"\"\"\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 3), (2, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 0])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 1])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 2])\n\t[(1, 6), (3, 5), (2, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2, 3])\n\t[(1, 2), (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 3), (2, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 0])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [2, 1])\n\t[(3, 1), (5, 2), (6, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 2])\n\t[(1, 6), (3, 5), (2, 4)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 0])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2])\n\t[(1, 2), (3, 4), (5, 6)]\n\t>>> re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [0, 1, 2, 3])"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[p] - B[q])\n\td2 = abs(A[p] - C[r])\n\td3 = abs(B[q] - C[r])\n\tif d1 <= d2 and d1 <= d3:\n\t\treturn A[p], B[q], C[r]\n\telif d2 <= d1 and d2 <= d3:\n\t\treturn B[q], A[p], C[r]\n\telse:\n\t\treturn C[r], B[q], A[p]\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len(A) and j < len(B) and k < len(C):\n\t\td1 = abs(A[i] - B[j])\n\t\td2 = abs(A[i] - C[k])\n\t\td3 = abs(B[j] - C[k])\n\t\tif d1 <= d2 and d1 <= d3:\n\t\t\treturn A[i], B[j], C[k]\n\t\telif d2 <= d1 and d2 <= d3:\n\t\t\treturn B[j], A[i], C[k]\n\t\telse:\n\t\t\treturn C[k], B[j], A[i]\n\t\ti += 1\n\t\tj += 1\n\t\tk += 1\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif d1 <= d2 and d1 <= d3:\n\t\treturn A[p], B[q], C[r]\n\telif d2 <= d1 and d2 <= d3:\n\t\treturn B[q], A[p], C[r]\n\telse:\n\t\treturn C[r], B[q], A[p]\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len(A) and j < len(B) and k < len(C):\n\t\td1 = abs(A[i] - B[j])\n\t\td2 = abs(A[i] - C[k])\n\t\td3 = abs(B[j] - C[k])\n\t\tif d1 <= d2 and d1 <= d3:\n\t\t\treturn A[i], B[j], C[k]\n\t\telif d2 <= d1 and d2 <= d3:\n\t\t\treturn B[j], A[i], C[k]\n\t\telse:\n\t\t\treturn C[k], B[j], A[i]\n\t\ti += 1\n\t\tj += 1\n\t\tk += 1\n\ndef find_closest(A, B, C):\n\t\"\"\"\n\tFind the three closest elements from three sorted arrays.\n\t\"\"\"\n\td1 = abs(A[0] - B[0])\n\td2 = abs(A[0] - C[0])\n\td3 = abs(B[0] - C[0])"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\n\tres = 1\n\t\n\t# Since C(n, k) = C(n, n-k) \n\tif (r > n - r): \n\t\tr = n - r \n\t\n\t# Calculate value of [n * (n-1) *---* (n-r + 1)] / [k * (k-1) *----* 1] \n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p \n\t\n\t# return nCk mod p \n\treturn res % p\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t\n\tdp = [0] * (n + 1) \n\tdp[0] = 1\n\t\n\tfor i in range(1, n + 1): \n\t\tfor j in range(i - 1, -1, -1): \n\t\t\tdp[i] = dp[i] + dp[j] \n\t\n\treturn dp[n] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\ttext = text.replace(' ', '_')\n\ttext = text.replace('-', '_')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('Camel', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\ttext = text.replace('-', '_')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('Camel', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\ttext = text.replace('CamelCase', '')\n\t"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tdp[2] = 1\n\tdp[3] = 2\n\tdp[4] = 2\n\tdp[5] = 3\n\tdp[6] = 3\n\tdp[7] = 4\n\tdp[8] = 4\n\tdp[9] = 5\n\tdp[10] = 5\n\tdp[11] = 6\n\tdp[12] = 6\n\tdp[13] = 7\n\tdp[14] = 7\n\tdp[15] = 8\n\tdp[16] = 8\n\tdp[17] = 9\n\tdp[18] = 9\n\tdp[19] = 10\n\tdp[20] = 10\n\tdp[21] = 11\n\tdp[22] = 11\n\tdp[23] = 12\n\tdp[24] = 12\n\tdp[25] = 13\n\tdp[26] = 13\n\tdp[27] = 14\n\tdp[28] = 14\n\tdp[29] = 15\n\tdp[30] = 15\n\tdp[31] = 16\n\tdp[32] = 16\n\tdp[33] = 17\n\tdp[34] = 17\n\tdp[35] = 18\n\tdp[36] = 18\n\tdp[37] = 19\n\tdp[38] = 19\n\tdp[39] = 20\n\tdp[40] = 20\n\tdp[41] = 21\n\tdp[42] = 21\n\tdp[43] = 22\n\tdp[44] = 22\n\tdp[45] = 23\n\tdp[46] = 23\n\tdp[47] = 24\n\tdp[48] = 24\n\tdp[49] = 25\n\tdp[50] = 25\n\tdp[51] = 26\n\tdp[52] = 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tdp[0] = 0\n\tdp[1] = 1\n\tdp[2] = 1\n\tdp[3] = 2\n\tdp[4] = 2\n\tdp[5] = 3\n\tdp[6] = 3\n\tdp[7] = 4\n\tdp[8] = 4\n\tdp[9] = 5\n\tdp[10] = 5\n\tdp[11] = 6\n\tdp[12] = 6\n\tdp[13] = 7\n\tdp[14] = 7\n\tdp[15] = 8\n\tdp[16] = 8\n\tdp[17] = 9\n\tdp[18] = 9\n\tdp[19] = 10\n\tdp[20] = 10\n\tdp[21] = 11\n\tdp[22] = 11\n\tdp[23] = 12\n\tdp[24] = 12\n\tdp[25] = 13\n\tdp[26] = 13\n\tdp[27] = 14\n\tdp[28] = 14\n\tdp[29] = 15\n\tdp[30] = 15\n\tdp[31] = 16\n\tdp[32] = 16\n\tdp[33] = 17\n\tdp[34] = 17\n\tdp[35] = 18\n\tdp[36] = 18\n\tdp[37] = 19\n\tdp[38] = 19\n\tdp[39] = 20\n\tdp[40] = 20\n\tdp[41] = 21\n\tdp[42] = 21\n\tdp[43] = 22\n\tdp[44] = 22\n\tdp[45] = 23\n\tdp[46] = 23\n\tdp[47] = 24\n\tdp[48] = 24\n\tdp[49] = 25\n\tdp[50] = 25\n\tdp[51] = 26\n\tdp[52] = 2"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\tCounts the most common words in a dictionary.\n\t\"\"\"\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\treturn word_count\n\n\nif __name__ == '__main__':\n\twords = ['a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a',", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\twords = ['a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'b', 'a', 'a', 'b', 'c', 'a',"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\tresult = \"\"\n\tfor char in string:\n\t\tif char not in second_string:\n\t\t\tresult += char\n\treturn result\n\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrst", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_dirty_chars(\"abcdefghijklmnopqrst"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\tfrom heapq import heappush, heappop\n\theap = []\n\td = {}\n\tfor i in nums:\n\t\tif i in d:\n\t\t\td[i] += 1\n\t\telse:\n\t\t\td[i] = 1\n\tfor i in d:\n\t\theappush(heap, (-d[i], i))\n\tres = []\n\tfor i in range(k):\n\t\tres.append(heappop(heap)[1])\n\treturn res\n\nprint(func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\"\"\"\n\tFind the n-th rectangular number.\n\t\"\"\"\n\ti = 1\n\twhile True:\n\t\ti += 1\n\t\tnum = i * (i + 1) * (2 * i + 1)\n\t\tif num == n:\n\t\t\treturn i\n\nprint(find_rect_num(1))\nprint(find_rect_num(10))\nprint(find_rect_num(100))\nprint(find_rect_num(1000))\nprint(find_rect_num(10000))\nprint(find_rect_num(100000))\nprint(find_rect_num(1000000))\nprint(find_rect_num(10000000))\nprint(find_rect_num(100000000))\nprint(find_rect_num(1000000000))\nprint(find_rect_num(10000000000))\nprint(find_rect_num(100000000000))\nprint(find_rect_num(1000000000000))\nprint(find_rect_num(10000000000000))\nprint(find_rect_num(100000000000000))\nprint(find_rect_num(1000000000000000))\nprint(find_rect_num(10000000000000000))\nprint(find_rect_num(100000000000000000))\nprint(find_rect_num(1000000000000000000))\nprint(find_rect_num(10000000000000000000))\nprint(find_rect_num(100000000000000000000))\nprint(find_rect_num(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_rect_num(1))\nprint(find_rect_num(10))\nprint(find_rect_num(100))\nprint(find_rect_num(1000))\nprint(find_rect_num(10000))\nprint(find_rect_num(100000))\nprint(find_rect_num(1000000))\nprint(find_rect_num(10000000))\nprint(find_rect_num(100000000))\nprint(find_rect_num(1000000000))\nprint(find_rect_num(10000000000))\nprint(find_rect_num(100000000000))\nprint(find_rect_num(1000000000000))\nprint(find_rect_num(10000000000000))\nprint(find_rect_num(100000000000000))\nprint(find_rect_num(1000000000000000))\nprint(find_rect_num(10000000000000000))\nprint(find_rect_num(100000000000000000))\nprint(find_rect_num(1000000000000000000))\nprint(find_rect_num(10000000000000000000))\nprint(find_rect_num(100000000000000000000))\nprint(find_rect_num("}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\tprint(Counter(nums))\n\nnums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "nums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t\"\"\"\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t>>> text_match_string('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t\"\"\"\n\tpass\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t\"\"\"\n\t>>> text_match_end('abcdefg')\n\t['abcdefg']\n\t>>> text_match_end('abcdefg')"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\tdata = sorted(data)\n\tfor i in range(len(data)-1):\n\t\tif data[i] == data[i+1]:\n\t\t\treturn False\n\treturn True\n\n\ndef test_distinct_2(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_3(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_4(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_5(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_6(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_7(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_8(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_9(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_10(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_11(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_12(data", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef test_distinct_2(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_3(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_4(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_5(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_6(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_7(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_8(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_9(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_10(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_11(data):\n\t\"\"\"\n\tTest whether all the numbers are different from each other\n\t\"\"\"\n\treturn len(set(data)) == len(data)\n\n"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\trev = int(str(n)[::-1])\n\tif n == rev - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check(121))\nprint(check(123))\nprint(check(1234))\nprint(check(12345))\nprint(check(123456))\nprint(check(1234567))\nprint(check(12345678))\nprint(check(123456789))\nprint(check(1234567890))\nprint(check(12345678901))\nprint(check(123456789012))\nprint(check(1234567890123))\nprint(check(12345678901234))\nprint(check(123456789012345))\nprint(check(1234567890123456))\nprint(check(12345678901234567))\nprint(check(123456789012345678))\nprint(check(1234567890123456789))\nprint(check(12345678901234567890))\nprint(check(123456789012345678901))\nprint(check(1234567890123456789012))\nprint(check(12345678901234567890123))\nprint(check(123456789012345678901234))\nprint(check(1234567890123456789012345))\nprint(check(12345", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check(121))\nprint(check(123))\nprint(check(1234))\nprint(check(12345))\nprint(check(123456))\nprint(check(1234567))\nprint(check(12345678))\nprint(check(123456789))\nprint(check(1234567890))\nprint(check(12345678901))\nprint(check(123456789012))\nprint(check(1234567890123))\nprint(check(12345678901234))\nprint(check(123456789012345))\nprint(check(1234567890123456))\nprint(check(12345678901234567))\nprint(check(123456789012345678))\nprint(check(1234567890123456789))\nprint(check(12345678901234567890))\nprint(check(123456789012345678901))\nprint(check(1234567890123456789012))\nprint(check(12345678901234567890123))\nprint(check(123456789012345678901234))\nprint(check(1234567890123456789012345))\nprint(check(12345"}
{"ID": 420, "source": "MBPP:57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\n\"\"\"\ndef find_Max_Num(arr,n) : \n\t\n\tarr.sort() \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\"\"\"\n\tReturns True if n is an octagonal number.\n\t\"\"\"\n\ti = 1\n\twhile i**3 < n:\n\t\tif i**3 == n:\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n\ndef nth_octagonal(n):\n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\ti = 1\n\twhile True:\n\t\tif is_octagonal(i**3):\n\t\t\tn -= 1\n\t\tif n == 0:\n\t\t\treturn i**3\n\t\ti += 1\n\nprint(nth_octagonal(1))\nprint(nth_octagonal(2))\nprint(nth_octagonal(3))\nprint(nth_octagonal(4))\nprint(nth_octagonal(5))\nprint(nth_octagonal(6))\nprint(nth_octagonal(7))\nprint(nth_octagonal(8))\nprint(nth_octagonal(9))\nprint(nth_octagonal(10))\nprint(nth_octagonal(11))\nprint(nth_octagonal(12))\nprint(nth_octagonal(13))\nprint(nth_octagonal(14))\nprint(nth_octagonal(15))\nprint(nth_octagonal(16))\nprint(nth_octagonal(17))\nprint(nth_octagonal(18))\nprint(nth_octagonal(19))\nprint(nth_octagonal(20))\nprint(nth_octagonal(21))\nprint(nth_octagonal(22))\nprint(nth_octagonal(23))\nprint(nth_octagonal(24))\nprint(nth_octagonal(25))\nprint(nth_octagonal(26))\nprint(nth_octagonal(27))\nprint(nth_octagonal(28))\nprint(nth_octagonal(29))\nprint(nth_octagonal(30))\nprint(nth_octagonal(31))\nprint(nth_octagonal(32))\nprint(nth_octagonal(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(nth_octagonal(1))\nprint(nth_octagonal(2))\nprint(nth_octagonal(3))\nprint(nth_octagonal(4))\nprint(nth_octagonal(5))\nprint(nth_octagonal(6))\nprint(nth_octagonal(7))\nprint(nth_octagonal(8))\nprint(nth_octagonal(9))\nprint(nth_octagonal(10))\nprint(nth_octagonal(11))\nprint(nth_octagonal(12))\nprint(nth_octagonal(13))\nprint(nth_octagonal(14))\nprint(nth_octagonal(15))\nprint(nth_octagonal(16))\nprint(nth_octagonal(17))\nprint(nth_octagonal(18))\nprint(nth_octagonal(19))\nprint(nth_octagonal(20))\nprint(nth_octagonal(21))\nprint(nth_octagonal(22))\nprint(nth_octagonal(23))\nprint(nth_octagonal(24))\nprint(nth_octagonal(25))\nprint(nth_octagonal(26))\nprint(nth_octagonal(27))\nprint(nth_octagonal(28))\nprint(nth_octagonal(29))\nprint(nth_octagonal(30))\nprint(nth_octagonal(31))\nprint(nth_octagonal(32))\nprint(nth_octagonal("}
{"ID": 423, "source": "MBPP:60", "prompt": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\"\"\"\ndef max_len_sub( arr, n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\nprint(smallest_num([1, 2, 3, 4, 5]))\nprint(smallest_num([1, 2, 3, 4, 5, 6]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(smallest_num([1, 2, 3, 4, 5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(smallest_num([1, 2, 3, 4, 5]))\nprint(smallest_num([1, 2, 3, 4, 5, 6]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(smallest_num([1, 2, 3, 4, 5,"}
{"ID": 426, "source": "MBPP:63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"\ndef max_difference(test_list):\n\tmax_diff = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif abs(test_list[i] - test_list[j]) > max_diff:\n\t\t\t\tmax_diff = abs(test_list[i] - test_list[j])\n\treturn max_diff\n\nprint(max_difference([1, 2, 3, 4, 5]))\nprint(max_difference([1, 2, 3, 4, 5, 6]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_difference([1, 2, 3, 4, 5]))\nprint(max_difference([1, 2, 3, 4, 5, 6]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, "}
{"ID": 430, "source": "MBPP:67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\n\"\"\"\ndef bell_number(n):   \n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_2(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_3(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_4(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_5(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_6(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "bell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_2(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_3(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_4(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_5(n):\n\tbell = [0] * (n+1)\n\tbell[0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i] = sum(bell[i-j] for j in range(1, i+1))\n\treturn bell[n]\n\ndef bell_number_dp_6(n):"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\n\t# return 1 if all elements in the array are equal\n\tif len(set(A)) == 1: \n\t\treturn 1\n\t\n\t# return 0 if not monotonic\n\t\n\t# return 2 if all elements are equal\n\t\n\t# return 3 if all elements are decreasing\n\t\n\t# return 4 if all elements are increasing\n\t\n\t# return 5 if all elements are decreasing and equal\n\t\n\t# return 6 if all elements are increasing and equal\n\t\n\t# return 7 if all elements are decreasing and equal\n\t\n\t# return 8 if all elements are increasing and equal\n\t\n\t# return 9 if all elements are decreasing and equal\n\t\n\t# return 10 if all elements are increasing and equal\n\t\n\t# return 11 if all elements are decreasing and equal\n\t\n\t# return 12 if all elements are increasing and equal\n\t\n\t# return 13 if all elements are decreasing and equal\n\t\n\t# return 14 if all elements are increasing and equal\n\t\n\t# return 15 if all elements are decreasing and equal\n\t\n\t# return 16 if all elements are increasing and equal\n\t\n\t# return 17 if all elements are decreasing and equal\n\t\n\t# return 18 if all elements are increasing and equal\n\t\n\t# return 19 if all elements are decreasing and equal\n\t\n\t# return 20 if all elements are increasing and equal\n\t\n\t# return 21 if all elements are decreasing and equal\n\t\n\t# return 22 if all elements are increasing and equal\n\t\n\t# return 23 if all elements are decreasing and equal\n\t\n\t# return 24 if all elements are increasing and equal\n\t\n\t# return 25 if all elements are decreasing and equal\n\t\n\t# return 26 if all elements are increasing and equal\n\t\n\t# return 27 if all elements are decreasing and equal\n\t\n\t# return 28 if all elements are increasing and equal\n\t\n\t# return 29 if all elements are decreasing and equal\n\t\n\t# return 30 if all elements are increasing and equal\n\t\n\t# return 31 if all elements are decreasing and equal\n\t\n\t# return 32 if all elements are increasing and equal\n\t\n\t# return 33 if all elements are decreasing and equal\n\t\n\t# return", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\n\t# return 2 if all elements are equal\n\t\n\t# return 3 if all elements are decreasing\n\t\n\t# return 4 if all elements are increasing\n\t\n\t# return 5 if all elements are decreasing and equal\n\t\n\t# return 6 if all elements are increasing and equal\n\t\n\t# return 7 if all elements are decreasing and equal\n\t\n\t# return 8 if all elements are increasing and equal\n\t\n\t# return 9 if all elements are decreasing and equal\n\t\n\t# return 10 if all elements are increasing and equal\n\t\n\t# return 11 if all elements are decreasing and equal\n\t\n\t# return 12 if all elements are increasing and equal\n\t\n\t# return 13 if all elements are decreasing and equal\n\t\n\t# return 14 if all elements are increasing and equal\n\t\n\t# return 15 if all elements are decreasing and equal\n\t\n\t# return 16 if all elements are increasing and equal\n\t\n\t# return 17 if all elements are decreasing and equal\n\t\n\t# return 18 if all elements are increasing and equal\n\t\n\t# return 19 if all elements are decreasing and equal\n\t\n\t# return 20 if all elements are increasing and equal\n\t\n\t# return 21 if all elements are decreasing and equal\n\t\n\t# return 22 if all elements are increasing and equal\n\t\n\t# return 23 if all elements are decreasing and equal\n\t\n\t# return 24 if all elements are increasing and equal\n\t\n\t# return 25 if all elements are decreasing and equal\n\t\n\t# return 26 if all elements are increasing and equal\n\t\n\t# return 27 if all elements are decreasing and equal\n\t\n\t# return 28 if all elements are increasing and equal\n\t\n\t# return 29 if all elements are decreasing and equal\n\t\n\t# return 30 if all elements are increasing and equal\n\t\n\t# return 31 if all elements are decreasing and equal\n\t\n\t# return 32 if all elements are increasing and equal\n\t\n\t# return 33 if all elements are decreasing and equal"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t\"\"\"\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\tTrue\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\tFalse\n\t>>> is_sublist([1, 2, 3, 4, 5], [1, 2, 3"}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\timport re\n\tpattern = r\"[,|;|\\s]\"\n\tresult = re.split(pattern, text)\n\treturn result\n\nprint(multiple_split(\"one,two,three\"))\nprint(multiple_split(\"one;two;three\"))\nprint(multiple_split(\"one,two;three\"))\nprint(multiple_split(\"one,two,three,four\"))\nprint(multiple_split(\"one,two,three,four,five\"))\nprint(multiple_split(\"one,two,three,four,five,six\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(multiple_split(\"one,two,three\"))\nprint(multiple_split(\"one;two;three\"))\nprint(multiple_split(\"one,two;three\"))\nprint(multiple_split(\"one,two,three,four\"))\nprint(multiple_split(\"one,two,three,four,five\"))\nprint(multiple_split(\"one,two,three,four,five,six\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen\"))\nprint(multiple_split(\"one,two,three,four,five,six,seven,eight,nine,ten"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\n\tcolors = colors.split(',')\n\tpatterns = patterns.split(',')\n\t\n\tcolors = [int(i) for i in colors]\n\tpatterns = [int(i) for i in patterns]\n\t\n\tcolors.sort()\n\tpatterns.sort()\n\t\n\tif colors == patterns:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_2(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_3(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_4(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_5(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_6(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_7(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_8(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_9(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_10(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_11(n): \n\tcount = 0\n\twhile (n): ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "count = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_2(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_3(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_4(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_5(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_6(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_7(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_8(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_9(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_10(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_With_Odd_SetBits_11(n): \n\tcount = 0\n\twhile (n): "}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t\"\"\"\n\tThis function takes two arguments, str1 and sub_str.\n\tIt returns True if sub_str is present in str1, else it returns False.\n\t\"\"\"\n\tstr1 = str1.lower()\n\tsub_str = sub_str.lower()\n\tif sub_str in str1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n# Test cases\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog j", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_substring(\"The quick brown fox jumps over the lazy dog\", \"the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog jumps\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"jumps over the\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"quick brown fox\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"brown fox jumps over\"))\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog j"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))\n\tn = ''.join(n)\n\tn = int(n)\n\tn = str(n)\n\tn = list(n)\n\tn = list(map(int, n))\n\tn = sorted(n)\n\tn = list(map(str, n))"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\tFinds the next smallest palindrome of a specified number.\n\t\"\"\"\n\tnum_str = str(num)\n\tnum_len = len(num_str)\n\tnum_list = list(num_str)\n\tnum_list_len = len(num_list)\n\t\n\tif num_len % 2 == 0:\n\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)\n\t\tmid_index_left_int += 1\n\t\tmid_index_right_int -= 1\n\t\tnum_list[mid_index_left] = str(mid_index_left_int)\n\t\tnum_list[mid_index_right] = str(mid_index_right_int)\n\t\tnum_list_str = ''.join(num_list)\n\t\tnum_list_int = int(num_list_str)\n\t\treturn num_list_int\n\telse:\n\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)\n\t\tmid_index_left_int += 1\n\t\tmid_index_right_int -= 1\n\t\tnum_list[mid_index] = str(mid_index_left_int)\n\t\tnum_list_str = ''.join(num_list)\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)\n\t\tmid_index_left_int += 1\n\t\tmid_index_right_int -= 1\n\t\tnum_list[mid_index_left] = str(mid_index_left_int)\n\t\tnum_list[mid_index_right] = str(mid_index_right_int)\n\t\tnum_list_str = ''.join(num_list)\n\t\tnum_list_int = int(num_list_str)\n\t\treturn num_list_int\n\telse:\n\t\tmid_index = num_len // 2\n\t\tmid_index_left = mid_index - 1\n\t\tmid_index_right = mid_index\n\t\tmid_index_left_str = num_list[mid_index_left]\n\t\tmid_index_right_str = num_list[mid_index_right]\n\t\tmid_index_left_int = int(mid_index_left_str)\n\t\tmid_index_right_int = int(mid_index_right_str)"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\tmissing_list = []\n\tfor i in range(strt_val, stop_val+1):\n\t\tif i not in test_list:\n\t\t\tmissing_list.append(i)\n\treturn missing_list\n\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\n"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\nprint(check_integer(\"123\"))\nprint(check_integer(\"123.45\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_integer(\"123\"))\nprint(check_integer(\"123.45\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.45a\"))\nprint(check_integer(\"123a\"))\nprint(check_"}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t\"\"\"\n\tConvert all possible convertible elements in the list to float.\n\t\"\"\"\n\tnew_list = []\n\tfor element in test_list:\n\t\ttry:\n\t\t\tnew_list.append(float(element))\n\t\texcept ValueError:\n\t\t\tpass\n\treturn new_list\n\n\nif __name__ == '__main__':\n\ttest_list = [1, 2, 3, '4', 5, 6, 7, 8, 9, 10, '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [1, 2, 3, '4', 5, 6, 7, 8, 9, 10, '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\n\tmax_count = 0\n\tcount = 0\n\t\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tif count < 0: \n\t\t\tcount = 0\n\t\tmax_count = max(max_count, count) \n\treturn max_count \n\ndef find_max_diff(string): \n\t\n\tn = len(string) \n\t\n\tmax_diff = find_length(string, n) \n\t\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tstring = string[1:] \n\t\telse: \n\t\t\tstring = string[1:] \n\t\tmax_diff = max(max_diff, find_length(string, n)) \n\treturn max_diff \n\nstring = \"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "string = \"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t\"\"\"\n\tMultiply two integers without using the * operator in python.\n\t\"\"\"\n\tresult = 0\n\twhile y > 0:\n\t\tresult += x\n\t\ty -= 1\n\treturn result\n\nprint(multiply_int(2, 3))\nprint(multiply_int(2, 4))\nprint(multiply_int(2, 5))\nprint(multiply_int(2, 6))\nprint(multiply_int(2, 7))\nprint(multiply_int(2, 8))\nprint(multiply_int(2, 9))\nprint(multiply_int(2, 10))\nprint(multiply_int(2, 11))\nprint(multiply_int(2, 12))\nprint(multiply_int(2, 13))\nprint(multiply_int(2, 14))\nprint(multiply_int(2, 15))\nprint(multiply_int(2, 16))\nprint(multiply_int(2, 17))\nprint(multiply_int(2, 18))\nprint(multiply_int(2, 19))\nprint(multiply_int(2, 20))\nprint(multiply_int(2, 21))\nprint(multiply_int(2, 22))\nprint(multiply_int(2, 23))\nprint(multiply_int(2, 24))\nprint(multiply_int(2, 25))\nprint(multiply_int(2, 26))\nprint(multiply_int(2, 27))\nprint(multiply_int(2, 28))\nprint(multiply_int(2, 29))\nprint(multiply_int(2, 30))\nprint(multiply_int(2, 31))\nprint(multiply_int(2, 32))\nprint(multiply_int(2, 33))\nprint(multiply", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(multiply_int(2, 3))\nprint(multiply_int(2, 4))\nprint(multiply_int(2, 5))\nprint(multiply_int(2, 6))\nprint(multiply_int(2, 7))\nprint(multiply_int(2, 8))\nprint(multiply_int(2, 9))\nprint(multiply_int(2, 10))\nprint(multiply_int(2, 11))\nprint(multiply_int(2, 12))\nprint(multiply_int(2, 13))\nprint(multiply_int(2, 14))\nprint(multiply_int(2, 15))\nprint(multiply_int(2, 16))\nprint(multiply_int(2, 17))\nprint(multiply_int(2, 18))\nprint(multiply_int(2, 19))\nprint(multiply_int(2, 20))\nprint(multiply_int(2, 21))\nprint(multiply_int(2, 22))\nprint(multiply_int(2, 23))\nprint(multiply_int(2, 24))\nprint(multiply_int(2, 25))\nprint(multiply_int(2, 26))\nprint(multiply_int(2, 27))\nprint(multiply_int(2, 28))\nprint(multiply_int(2, 29))\nprint(multiply_int(2, 30))\nprint(multiply_int(2, 31))\nprint(multiply_int(2, 32))\nprint(multiply_int(2, 33))\nprint(multiply"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square_test_2(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum_row != sum_diag or sum_row != sum_other_diag:\n\t\treturn False\n\treturn True\n\ndef magic_square_test_2(my_matrix):\n\t\"\"\"\n\tThis function calculates the magic square.\n\t\"\"\"\n\tn = len(my_matrix)\n\tsum_row = sum_col = sum_diag = 0\n\tsum_other_diag = 0\n\tfor i in range(n):\n\t\tsum_row += my_matrix[i][i]\n\t\tsum_col += my_matrix[i][n-i-1]\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_other_diag += my_matrix[i][n-i-1]\n\tif sum_row != sum_col or sum"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 500, "source": "MBPP:137", "prompt": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\n\"\"\"\ndef zero_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_2(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_3(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_4(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_5(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_6(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_7(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_8(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_9(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_10(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_11(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_12(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_13(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "count = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_2(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_3(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_4(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_5(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_6(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_7(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_8(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_9(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_10(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_11(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_12(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n\ndef zero_count_13(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num == 0:\n\t\t\tcount += 1\n\treturn count\n"}
{"ID": 503, "source": "MBPP:140", "prompt": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\n\"\"\"\ndef extract_singly(test_list):\n\tresult = []\n\tfor i in test_list:\n\t\tif i.count(i[0]) == 1:\n\t\t\tresult.append(i[0])\n\treturn result\n\nprint(extract_singly([(1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(extract_singly([(1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), (1, 3), (1, 2), ("}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t\"\"\"\n\t>>> merge_sort([1, 2, 3, 4, 5])\n\t[1, 2, 3, 4, 5]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t>>> merge_sort([1, 2, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 1"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\tnew_list = []\n\tcount = 1\n\tfor i in range(len(list1)-1):\n\t\tif list1[i] == list1[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tnew_list.append(count)\n\t\t\tnew_list.append(list1[i])\n\t\t\tcount = 1\n\tnew_list.append(count)\n\tnew_list.append(list1[-1])\n\treturn new_list\n\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(encode_list([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tmonth_dict = {\n\t\t\"January\": \"Winter\",\n\t\t\"February\": \"Winter\",\n\t\t\"March\": \"Spring\",\n\t\t\"April\": \"Spring\",\n\t\t\"May\": \"Spring\",\n\t\t\"June\": \"Summer\",\n\t\t\"July\": \"Summer\",\n\t\t\"August\": \"Summer\",\n\t\t\"September\": \"Autumn\",\n\t\t\"October\": \"Autumn\",\n\t\t\"November\": \"Autumn\",\n\t\t\"December\": \"Winter\"\n\t}\n\tseason = month_dict[month]\n\tif days > 20:\n\t\tseason = \"Winter\"\n\telif days > 10:\n\t\tseason = \"Spring\"\n\telif days > 5:\n\t\tseason = \"Summer\"\n\telse:\n\t\tseason = \"Autumn\"\n\tprint(season)\n\nmonth_season(\"January\",20)\nmonth_season(\"February\",20)\nmonth_season(\"March\",20)\nmonth_season(\"April\",20)\nmonth_season(\"May\",20)\nmonth_season(\"June\",20)\nmonth_season(\"July\",20)\nmonth_season(\"August\",20)\nmonth_season(\"September\",20)\nmonth_season(\"October\",20)\nmonth_season(\"November\",20)\nmonth_season(\"December\",20)\nmonth_season(\"January\",10)\nmonth_season(\"February\",10)\nmonth_season(\"March\",10)\nmonth_season(\"April\",10)\nmonth_season(\"May\",10)\nmonth_season(\"June\",10)\nmonth_season(\"July\",10)\nmonth_season(\"August\",10)\nmonth_season(\"September\",10)\nmonth_season(\"October\",10)\nmonth_season(\"November\",10)\nmonth_season(\"December\",10)\nmonth_season(\"January\",5)\nmonth_season(\"February\",5)\nmonth_season(\"March\",5)\nmonth_season(\"April\",5)\nmonth_season(\"May\",5)\nmonth_season(\"June\",5)\nmonth_season(\"July\",5)\nmonth_season(\"August\",5)\nmonth_season(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "month_season(\"January\",20)\nmonth_season(\"February\",20)\nmonth_season(\"March\",20)\nmonth_season(\"April\",20)\nmonth_season(\"May\",20)\nmonth_season(\"June\",20)\nmonth_season(\"July\",20)\nmonth_season(\"August\",20)\nmonth_season(\"September\",20)\nmonth_season(\"October\",20)\nmonth_season(\"November\",20)\nmonth_season(\"December\",20)\nmonth_season(\"January\",10)\nmonth_season(\"February\",10)\nmonth_season(\"March\",10)\nmonth_season(\"April\",10)\nmonth_season(\"May\",10)\nmonth_season(\"June\",10)\nmonth_season(\"July\",10)\nmonth_season(\"August\",10)\nmonth_season(\"September\",10)\nmonth_season(\"October\",10)\nmonth_season(\"November\",10)\nmonth_season(\"December\",10)\nmonth_season(\"January\",5)\nmonth_season(\"February\",5)\nmonth_season(\"March\",5)\nmonth_season(\"April\",5)\nmonth_season(\"May\",5)\nmonth_season(\"June\",5)\nmonth_season(\"July\",5)\nmonth_season(\"August\",5)\nmonth_season(\""}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in s:\n\t\tif i == 'std':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char.isalnum():\n\t\t\tnew_text += char\n\treturn new_text\n\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello, World!\"))\nprint(remove_splchar(\"Hello,"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t\"\"\"\n\tThis function takes a string of parentheses and returns True if the string is valid, False otherwise.\n\t\"\"\"\n\tstack = []\n\tfor i in str1:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\tx = str(x)\n\tx = list(x)\n\tx = [int(i) for i in x]\n\tx = sum(x)\n\tif x == int(x):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_num_keith(123))\nprint(is_num_keith(1234))\nprint(is_num_keith(12345))\nprint(is_num_keith(123456))\nprint(is_num_keith(1234567))\nprint(is_num_keith(12345678))\nprint(is_num_keith(123456789))\nprint(is_num_keith(1234567890))\nprint(is_num_keith(12345678901))\nprint(is_num_keith(123456789012))\nprint(is_num_keith(1234567890123))\nprint(is_num_keith(12345678901234))\nprint(is_num_keith(123456789012345))\nprint(is_num_keith(1234567890123456))\nprint(is_num_keith(12345678901234567))\nprint(is_num_keith(123456789012345678))\nprint(is_num_keith(1234567890123456789))\nprint(is_num_keith(12345678901234567890))\nprint(is_num_keith(123456789012345678901))\nprint(is_num_keith(123456789", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_num_keith(123))\nprint(is_num_keith(1234))\nprint(is_num_keith(12345))\nprint(is_num_keith(123456))\nprint(is_num_keith(1234567))\nprint(is_num_keith(12345678))\nprint(is_num_keith(123456789))\nprint(is_num_keith(1234567890))\nprint(is_num_keith(12345678901))\nprint(is_num_keith(123456789012))\nprint(is_num_keith(1234567890123))\nprint(is_num_keith(12345678901234))\nprint(is_num_keith(123456789012345))\nprint(is_num_keith(1234567890123456))\nprint(is_num_keith(12345678901234567))\nprint(is_num_keith(123456789012345678))\nprint(is_num_keith(1234567890123456789))\nprint(is_num_keith(12345678901234567890))\nprint(is_num_keith(123456789012345678901))\nprint(is_num_keith(123456789"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix(arr): \n\tif len(arr) == 0: \n\t\treturn \"\"\n\tif len(arr) == 1: \n\t\treturn arr[0] \n\tstr1 = arr[0] \n\tstr2 = arr[1] \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_2(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_3(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_4(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_5(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_6(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn arr[0] \n\tstr1 = arr[0] \n\tstr2 = arr[1] \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_2(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_3(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_4(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n\ndef common_prefix_util_5(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i] \n"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\timport math\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\t\n\tdef f(x):\n\t\treturn a*x**2 + b*x**2\n\t\n\tx = np.linspace(0,1,100)\n\ty = f(x)\n\t\n\tplt.plot(x,y)\n\tplt.show()\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif i%2 != 0:\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_even(\"hello\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_even(\"hello\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint(remove_even(\"python\"))\nprint"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for i in range(n)] for j in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(n): \n\t\t\tif i != j and str[i] == str[j]: \n\t\t\t\tdp[i][j] = 1 + dp[i - 1][j - 1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n\treturn dp[n - 1][n - 1] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\timport re\n\tpattern = r'^[+-]?\\d+\\.?\\d{0,2}$'\n\tmatch = re.match(pattern, num)\n\tif match:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_decimal('1.23'))\nprint(is_decimal('1.234'))\nprint(is_decimal('1.2345'))\nprint(is_decimal('1.23456'))\nprint(is_decimal('1.234567'))\nprint(is_decimal('1.2345678'))\nprint(is_decimal('1.23456789'))\nprint(is_decimal('1.234567890'))\nprint(is_decimal('1.2345678901'))\nprint(is_decimal('1.23456789012'))\nprint(is_decimal('1.234567890123'))\nprint(is_decimal('1.2345678901234'))\nprint(is_decimal('1.23456789012345'))\nprint(is_decimal('1.234567890123456'))\nprint(is_decimal('1.2345678901234567'))\nprint(is_decimal('1.23456789012345678'))\nprint(is_decimal('1.234567890123456789'))\nprint(is_decimal('1.2345678901234567890'))\nprint(is_decimal('1.23456789012345678901'))\nprint(is_decimal('1.234567890123456789012'))\nprint(is_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_decimal('1.23'))\nprint(is_decimal('1.234'))\nprint(is_decimal('1.2345'))\nprint(is_decimal('1.23456'))\nprint(is_decimal('1.234567'))\nprint(is_decimal('1.2345678'))\nprint(is_decimal('1.23456789'))\nprint(is_decimal('1.234567890'))\nprint(is_decimal('1.2345678901'))\nprint(is_decimal('1.23456789012'))\nprint(is_decimal('1.234567890123'))\nprint(is_decimal('1.2345678901234'))\nprint(is_decimal('1.23456789012345'))\nprint(is_decimal('1.234567890123456'))\nprint(is_decimal('1.2345678901234567'))\nprint(is_decimal('1.23456789012345678'))\nprint(is_decimal('1.234567890123456789'))\nprint(is_decimal('1.2345678901234567890'))\nprint(is_decimal('1.23456789012345678901'))\nprint(is_decimal('1.234567890123456789012'))\nprint(is_"}
{"ID": 574, "source": "MBPP:211", "prompt": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\n\"\"\"\ndef count_Num(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_2(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_3(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_4(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_5(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_6(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_7(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_8(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_9(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_10(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_11(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_12(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_13(n): \n\tcount = 0\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "count = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_2(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_3(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_4(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_5(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_6(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_7(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_8(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_9(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_10(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_11(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_12(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef count_Num_13(n): "}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t\"\"\"\n\tCheck if list1 is a subset of list2\n\t\"\"\"\n\tlist1_len = len(list1)\n\tlist2_len = len(list2)\n\ti = 0\n\tj = 0\n\twhile i < list1_len and j < list2_len:\n\t\tif list1[i] == list2[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\tj += 1\n\tif i == list1_len:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_subset_list(list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, "}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tdata_type = []\n\tfor i in test_tuple:\n\t\tdata_type.append(type(i))\n\t\n\tif len(set(data_type)) == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(check_type((1, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_type((1, 2, 3, 4, 5)))\nprint(check_type((1, 2, 3, 4, \"5\")))\nprint(check_type((1, 2, 3, 4, 5.0)))\nprint(check_type((1, 2, 3, 4, 5.0, 6)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(check_type((1, 2, 3, 4, 5.0, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(check_type((1, 2"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\"\"\"\n\tThis function takes a list of tuples and checks the occurrences of records which occur similar times in the given tuples.\n\t\"\"\"\n\ttest_list.sort()\n\tprint(test_list)\n\tprev_time = test_list[0][0]\n\tcount = 1\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][0] == prev_time:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tprint(prev_time, count)\n\t\t\tprev_time = test_list[i][0]\n\t\t\tcount = 1\n\tprint(prev_time, count)\n\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), ("}
{"ID": 618, "source": "MBPP:255", "prompt": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\"\"\"\ndef combinations_colors(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations\n\treturn list(combinations(l, n))\n\ndef combinations_colors_with_repetitions(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations\n\treturn list(combinations(l, n))\n\ndef combinations_colors_with_repetitions(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n\treturn list(combinations_with_replacement(l, n))\n\ndef combinations_colors_with_repetitions_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n\t\"\"\"\n\tGenerate all the combinations with repetitions of n elements from l.\n\t\"\"\"\n\tfrom itertools import combinations_with_replacement\n"}
{"ID": 622, "source": "MBPP:259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))\n\t(4, 5, 6)\n\t>>> maximize_elements((1, 2, 3), (4, 5, 6))"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\"\"\"\n\tFind the n'th star number.\n\t\"\"\"\n\tstar_num = 0\n\ti = 0\n\twhile i < n:\n\t\tstar_num += 1\n\t\ti += star_num\n\treturn star_num\n\nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint(find_star_num(34))\nprint(find_star_num(35))\nprint(find_star_num(36))\nprint(find_star_num(37))\nprint(find_star_num(38))\nprint(find_star_num(3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint(find_star_num(34))\nprint(find_star_num(35))\nprint(find_star_num(36))\nprint(find_star_num(37))\nprint(find_star_num(38))\nprint(find_star_num(3"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\tresult = []\n\tfor i in range(len(test_tup1)):\n\t\tresult.append(test_tup1[i] - test_tup2[i])\n\treturn tuple(result)\n\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements((1, 2, 3), (1, 2, 3))\nprint substract_elements(("}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t\"\"\"\n\tReturns True if n is a decagonal number, False otherwise.\n\t\"\"\"\n\t\n\tdecagonal_numbers = [1, 5, 19, 41, 85, 151, 265, 401, 575, 791, 1045, 1341, 1685, 2075, 2521, 3025, 3591, 4225, 4925, 5691, 6525, 7421, 8385, 9415, 10511, 11675, 12905, 14201, 15565, 17005, 18511, 20085, 21731, 23445, 25225, 27071, 28985, 30965, 33011, 35125, 37305, 39551, 41865, 44245, 46691, 49205, 51785, 54431, 57145, 59925, 62771, 65685, 68665, 71711, 74825, 77995, 81221, 84505, 87845, 91241, 94695, 98205, 101771, 105395, 109075, 112811, 116605, 120455, 124361, 128325, 132345, 136421, 140555, 1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tdecagonal_numbers = [1, 5, 19, 41, 85, 151, 265, 401, 575, 791, 1045, 1341, 1685, 2075, 2521, 3025, 3591, 4225, 4925, 5691, 6525, 7421, 8385, 9415, 10511, 11675, 12905, 14201, 15565, 17005, 18511, 20085, 21731, 23445, 25225, 27071, 28985, 30965, 33011, 35125, 37305, 39551, 41865, 44245, 46691, 49205, 51785, 54431, 57145, 59925, 62771, 65685, 68665, 71711, 74825, 77995, 81221, 84505, 87845, 91241, 94695, 98205, 101771, 105395, 109075, 112811, 116605, 120455, 124361, 128325, 132345, 136421, 140555, 1"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t\"\"\"\n\t>>> text_match_two_three('abbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbb')\n\tFalse\n\t>>> text_match_two_three('abbbbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbbbb')\n\tTrue\n\t>>> text_match_two_three('abbbbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and len(text) >= 6\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\treturn text.startswith('ab') and len(text) >= 6\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_ending_in_b(text):\n\t\"\"\"\n\t>>> text_match_anything_ending_in_b('abbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbb')\n\tTrue\n\t>>> text_match_anything_ending_in_b('abbbbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.endswith('b')\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\""}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmaxval = listval[0]\n\tfor i in listval:\n\t\tif i > maxval:\n\t\t\tmaxval = i\n\treturn maxval\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 6]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 6]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tif aggregate > max_aggregate:\n\t\t\tmax_aggregate = aggregate\n\treturn max_aggregate\n\n\n\"\"\"\nWrite a function to calculate the minimum aggregate from the list of tuples.\n\"\"\"\ndef min_aggregate(stdata):\n\tmin_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tif aggregate < min_aggregate:\n\t\t\tmin_aggregate = aggregate\n\treturn min_aggregate\n\n\n\"\"\"\nWrite a function to calculate the average aggregate from the list of tuples.\n\"\"\"\ndef avg_aggregate(stdata):\n\tavg_aggregate = 0\n\tfor tup in stdata:\n\t\taggregate = sum(tup)\n\t\tavg_aggregate += aggregate\n\tavg_aggregate /= len(stdata)\n\treturn avg_aggregate\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_2(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_3(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_4(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn avg_aggregate\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_2(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_3(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn sum_elements\n\n\n\"\"\"\nWrite a function to calculate the sum of the elements in the list of tuples.\n\"\"\"\ndef sum_elements_4(stdata):\n\tsum_elements = 0\n\tfor tup in stdata:\n\t\tsum_elements += sum(tup)\n\treturn"}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\tnew_list = []\n\tcount = 1\n\tfor i in range(len(alist)-1):\n\t\tif alist[i] == alist[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tnew_list.append(count)\n\t\t\tnew_list.append(alist[i])\n\t\t\tcount = 1\n\tnew_list.append(count)\n\tnew_list.append(alist[-1])\n\treturn new_list\n\nprint(modified_encode([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(modified_encode([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t\"\"\"\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the lazy dog.')\n\t'jumped'\n\t>>> text_match_word('The quick brown fox jumped over the"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 714, "source": "MBPP:351", "prompt": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\n\"\"\"\ndef first_Element(arr,n,k): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\tlist2 = []\n\tfor i in list1:\n\t\tif i:\n\t\t\tlist2.append(i)\n\treturn list2\n\nprint(remove_emptyis_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_empty}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t\"\"\"\n\tFinds the smallest missing element in a sorted array.\n\t\"\"\"\n\tif left_element > right_element:\n\t\treturn right_element + 1\n\n\tmid_element = (left_element + right_element) // 2\n\n\tif A[mid_element] == mid_element:\n\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\telse:\n\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, "}
{"ID": 735, "source": "MBPP:372", "prompt": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\n\"\"\"\ndef heap_assending(nums):\n\theap = []\n\tfor i in nums:\n\t\theap.append(i)\n\t\theapify(heap)\n\treturn heap\n\ndef heapify(heap):\n\tn = len(heap)\n\ti = n//2 - 1\n\twhile i >= 0:\n\t\tleft = 2*i + 1\n\t\tright = 2*i + 2\n\t\tlargest = i\n\t\tif left < n and heap[left] > heap[largest]:\n\t\t\tlargest = left\n\t\tif right < n and heap[right] > heap[largest]:\n\t\t\tlargest = right\n\t\tif largest != i:\n\t\t\theap[i], heap[largest] = heap[largest], heap[i]\n\t\t\ti = largest\n\t\telse:\n\t\t\tbreak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t\"\"\"\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)\n\t10\n\t>>> round_num(12.5,10)"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\tlist_data.sort(key=lambda x: x[index_no])\n\treturn list_data\n\n\nlist_data = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "list_data = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\timport re\n\tpattern = r\"^[a-zA-Z]$\"\n\tmatch = re.search(pattern, string)\n\tif match:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\ncheck_char(\"a\")\ncheck_char(\"ab\")\ncheck_char(\"abc\")\ncheck_char(\"abcd\")\ncheck_char(\"abcdf\")\ncheck_char(\"abcdfgh\")\ncheck_char(\"abcdfghi\")\ncheck_char(\"abcdfghij\")\ncheck_char(\"abcdfghijk\")\ncheck_char(\"abcdfghijkl\")\ncheck_char(\"abcdfghijklm\")\ncheck_char(\"abcdfghijklmn\")\ncheck_char(\"abcdfghijklmno\")\ncheck_char(\"abcdfghijklmnop\")\ncheck_char(\"abcdfghijklmnopq\")\ncheck_char(\"abcdfghijklmnopqr\")\ncheck_char(\"abcdfghijklmnopqrs\")\ncheck_char(\"abcdfghijklmnopqrst\")\ncheck_char(\"abcdfghijklmnopqrstu\")\ncheck_char(\"abcdfghijklmnopqrstuv\")\ncheck_char(\"abcdfghijklmnopqrstuvw\")\ncheck_char(\"abcdfghijklmnopqrstuvwx\")\ncheck_char(\"abcdfghijklmnopqrstuvwxy\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyz\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzA\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzB\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzC\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzD\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzE\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzF\")", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "check_char(\"a\")\ncheck_char(\"ab\")\ncheck_char(\"abc\")\ncheck_char(\"abcd\")\ncheck_char(\"abcdf\")\ncheck_char(\"abcdfgh\")\ncheck_char(\"abcdfghi\")\ncheck_char(\"abcdfghij\")\ncheck_char(\"abcdfghijk\")\ncheck_char(\"abcdfghijkl\")\ncheck_char(\"abcdfghijklm\")\ncheck_char(\"abcdfghijklmn\")\ncheck_char(\"abcdfghijklmno\")\ncheck_char(\"abcdfghijklmnop\")\ncheck_char(\"abcdfghijklmnopq\")\ncheck_char(\"abcdfghijklmnopqr\")\ncheck_char(\"abcdfghijklmnopqrs\")\ncheck_char(\"abcdfghijklmnopqrst\")\ncheck_char(\"abcdfghijklmnopqrstu\")\ncheck_char(\"abcdfghijklmnopqrstuv\")\ncheck_char(\"abcdfghijklmnopqrstuvw\")\ncheck_char(\"abcdfghijklmnopqrstuvwx\")\ncheck_char(\"abcdfghijklmnopqrstuvwxy\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyz\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzA\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzB\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzC\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzD\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzE\")\ncheck_char(\"abcdfghijklmnopqrstuvwxyzF\")"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_x", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_xor((1, 2, 3), (4, 5, 6))\n\t(1, 2, 3)\n\t>>> bitwise_x"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\tfor i in range(r):\n\t\tres = (res * (n - i)) % p\n\treturn res\n\ndef ncr_modp_fast(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = (n * n) % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_2(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_3(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_4(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_5(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tres = 1\n\tfor i in range(r):\n\t\tres = (res * (n - i)) % p\n\treturn res\n\ndef ncr_modp_fast(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = (n * n) % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_2(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = (res * n) % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_3(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_4(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:\n\t\t\tres = res * n % p\n\t\tn = n * n % p\n\t\tr = r // 2\n\treturn res\n\ndef ncr_modp_fast_5(n, r, p): \n\t\"\"\"\n\tCompute the value of ncr%p.\n\t\"\"\"\n\tres = 1\n\twhile r > 0:\n\t\tif r % 2 == 1:"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = re.compile(r'^(https?://)?(www\\.)?[a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$')\n\treturn True if regex.match(str) else False\n\nprint(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com/\"))\nprint(is_valid_URL(\"https://www.google.com/abc\"))\nprint(is_valid_URL(\"https://www.google.com/abc/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/stu\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com/\"))\nprint(is_valid_URL(\"https://www.google.com/abc\"))\nprint(is_valid_URL(\"https://www.google.com/abc/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl/mno/pqr/stu\"))\nprint(is_valid_URL(\"https://www.google.com/abc/def/ghi/jkl"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\treturn n_list\n\n\ndef next_bigger(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\tn_list += 1\n\tn_list = rearrange_bigger(n_list)\n\treturn n_list\n\n\ndef next_bigger_2(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\tn_list += 1\n\tn_list = rearrange_bigger(n_list)\n\treturn n_list\n\n\ndef next_bigger_3(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\treturn n_list\n\n\ndef next_bigger(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)\n\tn_list = int(n_list)\n\tn_list += 1\n\tn_list = rearrange_bigger(n_list)\n\treturn n_list\n\n\ndef next_bigger_2(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\tn_str = str(n)\n\tn_list = list(n_str)\n\tn_list.sort()\n\tn_list.reverse()\n\tn_list = [int(i) for i in n_list]\n\tn_list = [str(i) for i in n_list]\n\tn_list = ''.join(n_list)"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t\n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30\n\tif n == 31: \n\t\treturn 31\n\tif n == 32: \n\t\treturn 32\n\tif n == 33: \n\t\treturn 33\n\tif n == 34: \n\t\treturn 34\n\tif n == 35: \n\t\treturn 35\n\tif n == 36: \n\t\treturn 36\n\tif n == 37: \n\t\treturn 37", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30\n\tif n == 31: \n\t\treturn 31\n\tif n == 32: \n\t\treturn 32\n\tif n == 33: \n\t\treturn 33\n\tif n == 34: \n\t\treturn 34\n\tif n == 35: \n\t\treturn 35\n\tif n == 36: \n\t\treturn 36\n\tif n == 37: "}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> and_tuples((1, 2, 3), (4, 5, 6))\n\t((1, 4), (2, 5), (3, 6))\n\t>>> and_tuples((1, 2, 3), (4, 5, 6, 7))\n\t((1, 4), (2, 5), (3, 6))\n\t>>> and_tuples((1, 2, 3), (4, 5))\n\t((1, 4), (2, 5))\n\t>>> and_tuples((1, 2, 3), (4, 5, 6, 7))\n\t((1, 4), (2, 5), (3, 6))\n\t\"\"\"\n\ttest_tup1 = list(test_tup1)\n\ttest_tup2 = list(test_tup2)\n\ttest_tup1_len = len(test_tup1)\n\ttest_tup2_len = len(test_tup2)\n\ttest_tup1_len_2 = test_tup1_len - 1\n\ttest_tup2_len_2 = test_tup2_len - 1\n\ttest_tup1_tuples = []\n\ttest_tup2_tuples = []\n\ttest_tup1_tuples_len = len(test_tup1_tuples)\n\ttest_tup2_tuples_len = len(test_tup2_tuples)\n\ttest_tup1_tuples_len_2 = test_tup1_tuples_len - 1\n\ttest_tup2_tuples_len_2 = test_tup2_tuples_len - 1\n\ttest_tup1_tuples_len_3 = test_tup1_tuples_len_2 - 1\n\ttest_tup2_tuples_len_3 = test_tup2_tuples_len_2 - 1\n\ttest_tup1_tuples_len", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\ttest_tup1 = list(test_tup1)\n\ttest_tup2 = list(test_tup2)\n\ttest_tup1_len = len(test_tup1)\n\ttest_tup2_len = len(test_tup2)\n\ttest_tup1_len_2 = test_tup1_len - 1\n\ttest_tup2_len_2 = test_tup2_len - 1\n\ttest_tup1_tuples = []\n\ttest_tup2_tuples = []\n\ttest_tup1_tuples_len = len(test_tup1_tuples)\n\ttest_tup2_tuples_len = len(test_tup2_tuples)\n\ttest_tup1_tuples_len_2 = test_tup1_tuples_len - 1\n\ttest_tup2_tuples_len_2 = test_tup2_tuples_len - 1\n\ttest_tup1_tuples_len_3 = test_tup1_tuples_len_2 - 1\n\ttest_tup2_tuples_len_3 = test_tup2_tuples_len_2 - 1\n\ttest_tup1_tuples_len"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t\"\"\"\n\t>>> text_match_one('abbbb')\n\tTrue\n\t>>> text_match_one('abbbbb')\n\tFalse\n\t>>> text_match_one('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') > 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero(text):\n\t\"\"\"\n\t>>> text_match_zero('abbbb')\n\tTrue\n\t>>> text_match_zero('abbbbb')\n\tTrue\n\t>>> text_match_zero('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_one_b(text):\n\t\"\"\"\n\t>>> text_match_one_b('abbbb')\n\tFalse\n\t>>> text_match_one_b('abbbbb')\n\tTrue\n\t>>> text_match_one_b('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 1\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b's.\n\"\"\"\ndef text_match_zero_b(text):\n\t\"\"\"\n\t>>> text_match_zero_b('abbbb')\n\tFalse\n\t>>> text_match_zero_b('abbbbb')\n\tTrue\n\t>>> text_match_zero_b('abbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') > 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one c's.\n\"\"\"\ndef text_match_one_c(text):\n\t\"\"\"\n\t>>> text_match_one_c('abbbb')\n\tFalse\n\t>>> text_match_one_c('abbbbb')\n\tFalse\n\t>>> text_match_one_c('abbb", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t>>> text_match_zero('abbbb')\n\tTrue\n\t>>> text_match_zero('abbbbb')\n\tTrue\n\t>>> text_match_zero('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 0\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_one_b(text):\n\t\"\"\"\n\t>>> text_match_one_b('abbbb')\n\tFalse\n\t>>> text_match_one_b('abbbbb')\n\tTrue\n\t>>> text_match_one_b('abbbbbb')\n\tFalse\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') == 1\n\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b's.\n\"\"\"\ndef text_match_zero_b(text):\n\t\"\"\"\n\t>>> text_match_zero_b('abbbb')\n\tFalse\n\t>>> text_match_zero_b('abbbbb')\n\tTrue\n\t>>> text_match_zero_b('abbbbbb')\n\tTrue\n\t\"\"\"\n\treturn text.startswith('ab') and text.count('b') > 0\n\n\n\"\"\""}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\tadverbs = []\n\tadverb_positions = []\n\tadverb_index = 0\n\tadverb_found = False\n\t\n\tfor i in range(len(text)):\n\t\tif text[i] == \" \":\n\t\t\tadverb_found = False\n\t\telif text[i] == \",\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \".\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"?\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"!\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \";\" or text[i] == \":\" or text[i] == \",\" or text[i] == \".\" or text[i] == \"?\" or text[i] == \"!\" or text[i] == \";\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"(\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \")\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"[\" or text[i] == \"]\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"{\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"}\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"<\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \">\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tadverb_found = False\n\t\n\tfor i in range(len(text)):\n\t\tif text[i] == \" \":\n\t\t\tadverb_found = False\n\t\telif text[i] == \",\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \".\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"?\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"!\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \";\" or text[i] == \":\" or text[i] == \",\" or text[i] == \".\" or text[i] == \"?\" or text[i] == \"!\" or text[i] == \";\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"(\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \")\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"[\" or text[i] == \"]\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"{\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"}\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"<\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \">\":\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':\n\t\t\tadverb_found = False\n\t\telif text[i] == \"'\" or text[i] == '\"':"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t\n\tx1 = int(x1)\n\ty1 = int(y1)\n\tx2 = int(x2)\n\ty2 = int(y2)\n\tx3 = int(x3)\n\ty3 = int(y3)\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t\"\"\"\n\t>>> text_match_wordz('z')\n\tTrue\n\t>>> text_match_wordz('zz')\n\tTrue\n\t>>> text_match_wordz('zzz')\n\tTrue\n\t>>> text_match_wordz('zzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> text_match_wordz('z')\n\tTrue\n\t>>> text_match_wordz('zz')\n\tTrue\n\t>>> text_match_wordz('zzz')\n\tTrue\n\t>>> text_match_wordz('zzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzz')\n\tTrue\n\t>>> text_match_wordz('zzzzzzzzzzzzzzzzzz"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t\tlist2.append(list1[i])\n\t"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\tn = len(price)\n\tdp = [[0 for i in range(k+1)] for j in range(n)]\n\tfor i in range(1, n):\n\t\tmax_diff = -price[i]\n\t\tfor j in range(1, k+1):\n\t\t\tdp[i][j] = max(dp[i-1][j], price[i] + max_diff)\n\t\t\tmax_diff = max(max_diff, dp[i-1][j-1] - price[i])\n\treturn dp[n-1][k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\tresult = []\n\tfor i in test_list1:\n\t\tfor j in test_list2:\n\t\t\tif i == j:\n\t\t\t\tresult.append(i)\n\treturn result\n\ntest_list1 = [(2, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list1 = [(2, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, "}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\tdict2 = {}\n\tfor key, value in dict1.items():\n\t\tdict2[value] = key\n\tdict2 = sorted(dict2.items(), reverse=True)\n\tdict3 = {}\n\tfor key, value in dict2:\n\t\tdict3[key] = value\n\treturn dict3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\tnums.sort()\n\treturn nums[0] + nums[-1]\n\nprint(big_sum([1, 2, 3, 4, 5]))\nprint(big_sum([1, 2, 3, 4, 5, 6]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(big_sum([1, 2, 3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(big_sum([1, 2, 3, 4, 5]))\nprint(big_sum([1, 2, 3, 4, 5, 6]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(big_sum([1, 2, 3,"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t\"\"\"\n\t>>> binary_to_integer((1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\t>>> binary_to_integer((1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\tfrom heapq import heappush, heappop\n\theap = []\n\tfor i in nums:\n\t\theappush(heap,i)\n\tres = []\n\tfor i in range(n):\n\t\tres.append(heappop(heap))\n\treturn res\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\"\"\"\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0])\n\t[1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0])\n\t[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t>>> re_order([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0])"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\ti = 0\n\tj = 0\n\twhile i < len(l1) and j < len(l2):\n\t\tif l1[i] == l2[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\treturn False\n\treturn True\n\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, "}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\tcount_dict = {}\n\tfor i in test_tuple:\n\t\tif i in count_dict:\n\t\t\tcount_dict[i] += 1\n\t\telse:\n\t\t\tcount_dict[i] = 1\n\treturn count_dict\n\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, "}
{"ID": 886, "source": "MBPP:523", "prompt": "\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\"\"\"\ndef check_string(str1):\n\tcheck_upper = lambda x: any(i.isupper() for i in x)\n\tcheck_lower = lambda x: any(i.islower() for i in x)\n\tcheck_number = lambda x: any(i.isdigit() for i in x)\n\tcheck_length = lambda x: len(x) == 5\n\treturn check_upper(str1) and check_lower(str1) and check_number(str1) and check_length(str1)\n\nprint(check_string(\"Aa12345\"))\nprint(check_string(\"Aa123456\"))\nprint(check_string(\"Aa1234567\"))\nprint(check_string(\"Aa12345678\"))\nprint(check_string(\"Aa123456789\"))\nprint(check_string(\"Aa1234567890\"))\nprint(check_string(\"Aa12345678901\"))\nprint(check_string(\"Aa123456789012\"))\nprint(check_string(\"Aa1234567890123\"))\nprint(check_string(\"Aa12345678901234\"))\nprint(check_string(\"Aa123456789012345\"))\nprint(check_string(\"Aa1234567890123456\"))\nprint(check_string(\"Aa12345678901234567\"))\nprint(check_string(\"Aa123456789012345678\"))\nprint(check_string(\"Aa1234567890123456789\"))\nprint(check_string(\"Aa12345678901234567890\"))\nprint(check_string(\"Aa123456789012345678901\"))\nprint(check_string", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_string(\"Aa12345\"))\nprint(check_string(\"Aa123456\"))\nprint(check_string(\"Aa1234567\"))\nprint(check_string(\"Aa12345678\"))\nprint(check_string(\"Aa123456789\"))\nprint(check_string(\"Aa1234567890\"))\nprint(check_string(\"Aa12345678901\"))\nprint(check_string(\"Aa123456789012\"))\nprint(check_string(\"Aa1234567890123\"))\nprint(check_string(\"Aa12345678901234\"))\nprint(check_string(\"Aa123456789012345\"))\nprint(check_string(\"Aa1234567890123456\"))\nprint(check_string(\"Aa12345678901234567\"))\nprint(check_string(\"Aa123456789012345678\"))\nprint(check_string(\"Aa1234567890123456789\"))\nprint(check_string(\"Aa12345678901234567890\"))\nprint(check_string(\"Aa123456789012345678901\"))\nprint(check_string"}
{"ID": 894, "source": "MBPP:531", "prompt": "\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum number of coins that make a given value.\n\"\"\"\ndef min_coins(coins, m, V): \n\ttable = [0 for i in range(V+1)] \n\ttable[0] = 0\n\tfor i in range(1, V+1): \n\t\ttable[i] = m \n\t\tfor j in range(0, m): \n\t\t\tif (coins[j] <= i): \n\t\t\t\tsub_res = table[i-coins[j]] \n\t\t\t\tif (sub_res != m and sub_res + 1 < table[i]): \n\t\t\t\t\ttable[i] = sub_res + 1\n\treturn table[V] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_2(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_3(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_4(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_5(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_6(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_7(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_8(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_2(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_3(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_4(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_5(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_6(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_7(pattern,text):\n\t\"\"\"\n\tSearch for a literal pattern in a string.\n\t\"\"\"\n\tpos = text.find(pattern)\n\tif pos == -1:\n\t\treturn None\n\telse:\n\t\treturn pos\n\ndef search_literal_location_8(pattern,text):\n\t\"\"\""}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\tstr1 = str1.lower()\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "str1 = str1.lower()\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()\n\tstr1 = ''.join(str1)\n\tstr1 = str1.split()"}
{"ID": 903, "source": "MBPP:540", "prompt": "\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\n\"\"\"\ndef find_Diff(arr,n): \n\t\n\tmax_count = 0\n\tmin_countis_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_count}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\tunion_tup = set(test_tup1) | set(test_tup2)\n\treturn union_tup\n\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(union_elements((1, 2, 3, 4), (2, 3, 4, 5)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5, 6,"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_len = 0\n\tcurr_len = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] == 1:\n\t\t\tcurr_len += 1\n\t\telse:\n\t\t\tcurr_len = 0\n\t\tif curr_len > max_len:\n\t\t\tmax_len = curr_len\n\treturn max_len\n\nlst = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "lst = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\tnums = list(set(nums))\n\tnums.sort()\n\treturn nums\n\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\teven_list = []\n\tfor i in test_tuple:\n\t\tif type(i) == int and i % 2 == 0:\n\t\t\teven_list.append(i)\n\treturn even_list\n\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\nprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t\n\t# Base case \n\tif n == 0: \n\t\treturn 1\n\t\n\t# If n is negative \n\tif n < 0: \n\t\treturn 0\n\t\n\t# If n is 1 \n\tif n == 1: \n\t\treturn 1\n\t\n\t# If n is 2 \n\tif n == 2: \n\t\treturn 2\n\t\n\t# If n is 3 \n\tif n == 3: \n\t\treturn 4\n\t\n\t# If n is 4 \n\tif n == 4: \n\t\treturn 7\n\t\n\t# If n is 5 \n\tif n == 5: \n\t\treturn 13\n\t\n\t# If n is 6 \n\tif n == 6: \n\t\treturn 24\n\t\n\t# If n is 7 \n\tif n == 7: \n\t\treturn 44\n\t\n\t# If n is 8 \n\tif n == 8: \n\t\treturn 81\n\t\n\t# If n is 9 \n\tif n == 9: \n\t\treturn 165\n\t\n\t# If n is 10 \n\tif n == 10: \n\t\treturn 330\n\t\n\t# If n is 11 \n\tif n == 11: \n\t\treturn 692\n\t\n\t# If n is 12 \n\tif n == 12: \n\t\treturn 1496\n\t\n\t# If n is 13 \n\tif n == 13: \n\t\treturn 3024\n\t\n\t# If n is 14 \n\tif n == 14: \n\t\treturn 5985\n\t\n\t# If n is 15 \n\tif n == 15: \n\t\treturn 11468\n\t\n\t# If n is 16 \n\tif n == 16: \n\t\treturn 24016\n\t\n\t# If n is 17 \n\tif n == 17: \n\t\treturn 49616\n\t\n\t# If n is 18 \n\tif n == 18: \n\t\treturn 94608\n\t\n\t# If n is 19 \n\tif n == 19: \n\t\treturn 19", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\t# Base case \n\tif n == 0: \n\t\treturn 1\n\t\n\t# If n is negative \n\tif n < 0: \n\t\treturn 0\n\t\n\t# If n is 1 \n\tif n == 1: \n\t\treturn 1\n\t\n\t# If n is 2 \n\tif n == 2: \n\t\treturn 2\n\t\n\t# If n is 3 \n\tif n == 3: \n\t\treturn 4\n\t\n\t# If n is 4 \n\tif n == 4: \n\t\treturn 7\n\t\n\t# If n is 5 \n\tif n == 5: \n\t\treturn 13\n\t\n\t# If n is 6 \n\tif n == 6: \n\t\treturn 24\n\t\n\t# If n is 7 \n\tif n == 7: \n\t\treturn 44\n\t\n\t# If n is 8 \n\tif n == 8: \n\t\treturn 81\n\t\n\t# If n is 9 \n\tif n == 9: \n\t\treturn 165\n\t\n\t# If n is 10 \n\tif n == 10: \n\t\treturn 330\n\t\n\t# If n is 11 \n\tif n == 11: \n\t\treturn 692\n\t\n\t# If n is 12 \n\tif n == 12: \n\t\treturn 1496\n\t\n\t# If n is 13 \n\tif n == 13: \n\t\treturn 3024\n\t\n\t# If n is 14 \n\tif n == 14: \n\t\treturn 5985\n\t\n\t# If n is 15 \n\tif n == 15: \n\t\treturn 11468\n\t\n\t# If n is 16 \n\tif n == 16: \n\t\treturn 24016\n\t\n\t# If n is 17 \n\tif n == 17: \n\t\treturn 49616\n\t\n\t# If n is 18 \n\tif n == 18: \n\t\treturn 94608\n\t\n\t# If n is 19 \n\tif n == 19: \n\t\treturn 19"}
