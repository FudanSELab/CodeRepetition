{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\treturn None\n\n\ndef first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tif str1[i] in str1[i+1:]:\n\t\t\treturn str1[i]\n\t"}
{"ID": 2, "source": "MBPP:603", "prompt": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\n\"\"\"\ndef get_ludic(n):\n\t\"\"\"\n\tThe ludic sequence is defined as follows:\n\t\t1. 1 is the only number that is both in the sequence and in the set of numbers not in the sequence.\n\t\t2. If n is in the sequence, then n+1 is also in the sequence.\n\t\t3. If n is not in the sequence, then n+1 is not in the sequence.\n\t\"\"\"\n\tludic = [1]\n\twhile ludic[-1] < n:\n\t\tludic.append(ludic[-1] + 1)\n\treturn ludic[-1]\n\ndef get_lucid(n):\n\t\"\"\"\n\tThe lucid number is the largest number in the ludic sequence that is smaller than or equal to n.\n\t\"\"\"\n\treturn get_ludic(n)\n\ndef test_lucid(n):\n\t\"\"\"\n\tTest that the lucid number is indeed the largest number in the ludic sequence that is smaller than or equal to n.\n\t\"\"\"\n\tludic = get_ludic(n)\n\tlucid = get_lucid(n)\n\tassert ludic[-1] == lucid\n\tassert all(ludic[i] < ludic[i+1] for i in range(len(ludic)-1))\n\tassert all(ludic[i] <= lucid for i in range(len(ludic)))\n\tassert all(ludic[i] != lucid for i in range(len(ludic)))\n\ndef test_ludic(n):\n\t\"\"\"\n\tTest that the ludic sequence is indeed a sequence.\n\t\"\"\"\n\tludic = get_ludic(n)\n\tassert all(ludic[i] < ludic[i+1] for i in range(len(ludic)-1))\n\ndef test_ludic_lucid(n):\n\t\"\"\"\n\tTest that the lucid number is indeed the largest number in the ludic sequence that is smaller than or equal to n.\n\t\"\"\"\n\tludic = get_ludic(n)\n\tlucid = get_lucid(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tludic = get_ludic(n)\n\tlucid = get_lucid(n)\n\tassert ludic[-1] == lucid\n\tassert all(ludic[i] < ludic[i+1] for i in range(len(ludic)-1))\n\tassert all(ludic[i] <= lucid for i in range(len(ludic)))\n\tassert all(ludic[i] != lucid for i in range(len(ludic)))\n\ndef test_ludic(n):\n\t\"\"\"\n\tTest that the ludic sequence is indeed a sequence.\n\t\"\"\"\n\tludic = get_ludic(n)\n\tassert all(ludic[i] < ludic[i+1] for i in range(len(ludic)-1))\n\ndef test_ludic_lucid(n):\n\t\"\"\"\n\tTest that the lucid number is indeed the largest number in the ludic sequence that is smaller than or equal to n.\n\t\"\"\"\n\tludic = get_ludic(n)\n\tlucid = get_lucid("}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\treturn degree * math.pi / 180\n\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i, char in enumerate(strs[0]):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or char != s[i]:\n\t\t\t\treturn strs[0][:i]\n\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix from a list of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i in range(len(strs[0])):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or strs[0][-i-1] != s[-i-1]:\n\t\t\t\treturn strs[0][-i-1:]\n\treturn strs[0][-i-1:]\n\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix_2(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i, char in enumerate(strs[0]):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or char != s[i]:\n\t\t\t\treturn strs[0][:i]\n\treturn strs[0][:i+1]\n\n\"\"\"\nWrite a function to find the longest common suffix from a list of strings.\n\"\"\"\ndef longest_common_suffix_2(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i in range(len(strs[0])):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or strs[0][-i-1] != s[-i-1]:\n\t\t\t\treturn strs[0][-i-1:]\n\treturn strs[0][-i-1:]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i, char in enumerate(strs[0]):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or char != s[i]:\n\t\t\t\treturn strs[0][:i]\n\treturn strs[0]\n\n\"\"\"\nWrite a function to find the longest common suffix from a list of strings.\n\"\"\"\ndef longest_common_suffix(strs):\n\tif not strs:\n\t\treturn ''\n\tfor i in range(len(strs[0])):\n\t\tfor s in strs[1:]:\n\t\t\tif i >= len(s) or strs[0][-i-1] != s[-i-1]:\n\t\t\t\treturn strs[0][-i-1:]\n\treturn strs[0][-i-1:]\n\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix_2(strs):\n\tif not strs:"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "<s> \"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn re.search(pattern, text).span()\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn re.search(pattern, text).span()\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.index(pattern), text.index(pattern) + len(pattern)\n\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:type text: str\n\t:type pattern: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn text.find(pattern), text.find(pattern) + len(pattern)\n"}
{"ID": 7, "source": "MBPP:608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find nth bell number.\n\"\"\"\ndef bell_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn bell_Number(n-1) + bell_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth catalan number.\n\"\"\"\ndef catalan_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 2\n\telse: \n\t\treturn catalan_Number(n-1) + catalan_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth fibonacci number.\n\"\"\"\ndef fibonacci_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_Number(n-1) + fibonacci_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth lucas number.\n\"\"\"\ndef lucas_Number(n): \n\tif n == 1: \n\t\treturn 2\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn lucas_Number(n-1) + lucas_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth mersenne number.\n\"\"\"\ndef mersenne_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn mersenne_Number(n-1) + mersenne_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth moore number.\n\"\"\"\ndef moore_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn moore_Number(n-1) + moore_Number(n-2)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\telse: \n\t\treturn bell_Number(n-1) + bell_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth catalan number.\n\"\"\"\ndef catalan_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 2\n\telse: \n\t\treturn catalan_Number(n-1) + catalan_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth fibonacci number.\n\"\"\"\ndef fibonacci_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_Number(n-1) + fibonacci_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth lucas number.\n\"\"\"\ndef lucas_Number(n): \n\tif n == 1: \n\t\treturn 2\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn lucas_Number(n-1) + lucas_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth mersenne number.\n\"\"\"\ndef mersenne_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn mersenne_Number(n-1) + mersenne_Number(n-2) \n\n\n\"\"\"\nWrite a python function to find nth moore number.\n\"\"\"\ndef moore_Number(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn moore_Number(n-1) + moore_Number(n-2)"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]\nprint(remove_kth_element(list1, 2))\n\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\nlist1 = [1, 2, 3, 4, 5]"}
{"ID": 10, "source": "MBPP:611", "prompt": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n\treturn max(map(lambda x: x[N], test_list))\n\ntest_list = [\n\t(1, 2, 3),\n\t(4, 5, 6),\n\t(7, 8, 9),\n\t(10, 11, 12),\n\t(13, 14, 15),\n\t(16, 17, 18),\n\t(19, 20, 21),\n\t(22, 23, 24),\n\t(25, 26, 27),\n\t(28, 29, 30),\n\t(31, 32, 33),\n\t(34, 35, 36),\n\t(37, 38, 39),\n\t(40, 41, 42),\n\t(43, 44, 45),\n\t(46, 47, 48),\n\t(49, 50, 51),\n\t(52, 53, 54),\n\t(55, 56, 57),\n\t(58, 59, 60),\n\t(61, 62, 63),\n\t(64, 65, 66),\n\t(67, 68, 69),\n\t(70, 71, 72),\n\t(73, 74, 75),\n\t(76, 77, 78),\n\t(79, 80, 81),\n\t(82, 83, 84),\n\t(85, 86, 87),\n\t(88, 89, 90),\n\t(91, 92, 93),\n\t(94, 95, 96),\n\t(97, 98, 99),\n\t(100, 101, 102),\n]\n\nprint(max_of_nth(test_list, 0))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "test_list = [\n\t(1, 2, 3),\n\t(4, 5, 6),\n\t(7, 8, 9),\n\t(10, 11, 12),\n\t(13, 14, 15),\n\t(16, 17, 18),\n\t(19, 20, 21),\n\t(22, 23, 24),\n\t(25, 26, 27),\n\t(28, 29, 30),\n\t(31, 32, 33),\n\t(34, 35, 36),\n\t(37, 38, 39),\n\t(40, 41, 42),\n\t(43, 44, 45),\n\t(46, 47, 48),\n\t(49, 50, 51),\n\t(52, 53, 54),\n\t(55, 56, 57),\n\t(58, 59, 60),\n\t(61, 62, 63),\n\t(64, 65, 66),\n\t(67, 68, 69),\n\t(70, 71, 72),\n\t(73, 74, 75),\n\t(76, 77, 78),\n\t(79, 80, 81),\n\t(82, 83, 84),\n\t(85, 86, 87),\n\t(88, 89, 90),\n\t(91, 92, 93),\n\t(94, 95, 96),\n\t(97, 98, 99),\n\t(100, 101, 102),\n]"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\tif len(lst) == 0:\n\t\treturn lst\n\telif len(lst) == 1:\n\t\treturn lst\n\telse:\n\t\tfirst = lst[0]\n\t\tlast = lst[-1]\n\t\tlst.pop(0)\n\t\tlst.pop(-1)\n\t\tlst.insert(0, last)\n\t\tlst.append(first)\n\t\treturn lst\n\nprint(merge([[1, 2, 3], [4, 5, 6]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]))\nprint(merge([[1, 2, 3],", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(merge([[1, 2, 3], [4, 5, 6]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]))\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]))\nprint(merge([[1, 2, 3],"}
{"ID": 12, "source": "MBPP:613", "prompt": "\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maxim", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0\n\tfor record in test_list:\n\t\tif record[1] > max_value:\n\t\t\tmax_value = record[1]\n\treturn max_value\n\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\nprint(maximum_value(test_list))\n\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n\tmax_value = 0"}
{"ID": 15, "source": "MBPP:616", "prompt": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((10, 20, 30), (4, 5, 6)))\n\n\"\"\"\nWrite a function to find the sum of the elements in a tuple.\n\"\"\"\ndef tuple_sum(test_tup):\n\treturn sum(test_tup)\n\nprint(tuple_sum((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the product of the elements in a tuple.\n\"\"\"\ndef tuple_product(test_tup):\n\treturn reduce(lambda x, y: x * y, test_tup)\n\nprint(tuple_product((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the maximum element in a tuple.\n\"\"\"\ndef tuple_max(test_tup):\n\treturn max(test_tup)\n\nprint(tuple_max((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the minimum element in a tuple.\n\"\"\"\ndef tuple_min(test_tup):\n\treturn min(test_tup)\n\nprint(tuple_min((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the average of the elements in a tuple.\n\"\"\"\ndef tuple_average(test_tup):\n\treturn sum(test_tup) / len(test_tup)\n\nprint(tuple_average((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the median of the elements in a tuple.\n\"\"\"\ndef tuple_median(test_tup):\n\ttest_tup.sort()\n\tif len(test_tup) % 2 == 0:\n\t\treturn (test_tup[len(test_tup) // 2] + test_tup[len(test_tup) // 2 - 1]) / 2\n\telse:\n\t\treturn test_tup[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\nprint(tuple_modulo((10, 20, 30), (4, 5, 6)))\n\n\"\"\"\nWrite a function to find the sum of the elements in a tuple.\n\"\"\"\ndef tuple_sum(test_tup):\n\treturn sum(test_tup)\n\nprint(tuple_sum((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the product of the elements in a tuple.\n\"\"\"\ndef tuple_product(test_tup):\n\treturn reduce(lambda x, y: x * y, test_tup)\n\nprint(tuple_product((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the maximum element in a tuple.\n\"\"\"\ndef tuple_max(test_tup):\n\treturn max(test_tup)\n\nprint(tuple_max((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the minimum element in a tuple.\n\"\"\"\ndef tuple_min(test_tup):\n\treturn min(test_tup)\n\nprint(tuple_min((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the average of the elements in a tuple.\n\"\"\"\ndef tuple_average(test_tup):\n\treturn sum(test_tup) / len(test_tup)\n\nprint(tuple_average((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a function to find the median of the elements in a tuple.\n\"\"\"\ndef tuple_median(test_tup):"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "<s> \"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\tif d == 0: \n\t\treturn 0\n\tif a == 0 and b == 0: \n\t\treturn -1\n\tif a == 0: \n\t\treturn min_Jumps(0, b, d) \n\tif b == 0: \n\t\treturn min_Jumps(a, 0, d) \n\treturn min(min_Jumps(a - d, b, d) + 1, min_Jumps(a, b - d, d) + 1) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 17, "source": "MBPP:618", "prompt": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\treturn list(map(lambda x,y:x/y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8,10]\nprint(div_list(nums1,nums2))\n\n\"\"\"\nWrite a function to get the first element of a list.\n\"\"\"\ndef first_element(my_list):\n\treturn my_list[0]\n\nmy_list = [1,2,3,4,5]\nprint(first_element(my_list))\n\n\"\"\"\nWrite a function to get the last element of a list.\n\"\"\"\ndef last_element(my_list):\n\treturn my_list[-1]\n\nmy_list = [1,2,3,4,5]\nprint(last_element(my_list))\n\n\"\"\"\nWrite a function to get the second last element of a list.\n\"\"\"\ndef second_last_element(my_list):\n\treturn my_list[-2]\n\nmy_list = [1,2,3,4,5]\nprint(second_last_element(my_list))\n\n\"\"\"\nWrite a function to get the second element of a list.\n\"\"\"\ndef second_element(my_list):\n\treturn my_list[1]\n\nmy_list = [1,2,3,4,5]\nprint(second_element(my_list))\n\n\"\"\"\nWrite a function to get the third element of a list.\n\"\"\"\ndef third_element(my_list):\n\treturn my_list[2]\n\nmy_list = [1,2,3,4,5]\nprint(third_element(my_list))\n\n\"\"\"\nWrite a function to get the fourth element of a list.\n\"\"\"\ndef fourth_element(my_list):\n\treturn my_list[3]\n\nmy_list = [1,2,3,4,5]\nprint(fourth_element(my_list))\n\n\"\"\"\nWrite a function to get the fifth element of a list.\n\"\"\"\ndef fifth_element(my_list):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to get the first element of a list.\n\"\"\"\ndef first_element(my_list):\n\treturn my_list[0]\n\nmy_list = [1,2,3,4,5]\nprint(first_element(my_list))\n\n\"\"\"\nWrite a function to get the last element of a list.\n\"\"\"\ndef last_element(my_list):\n\treturn my_list[-1]\n\nmy_list = [1,2,3,4,5]\nprint(last_element(my_list))\n\n\"\"\"\nWrite a function to get the second last element of a list.\n\"\"\"\ndef second_last_element(my_list):\n\treturn my_list[-2]\n\nmy_list = [1,2,3,4,5]\nprint(second_last_element(my_list))\n\n\"\"\"\nWrite a function to get the second element of a list.\n\"\"\"\ndef second_element(my_list):\n\treturn my_list[1]\n\nmy_list = [1,2,3,4,5]\nprint(second_element(my_list))\n\n\"\"\"\nWrite a function to get the third element of a list.\n\"\"\"\ndef third_element(my_list):\n\treturn my_list[2]\n\nmy_list = [1,2,3,4,5]\nprint(third_element(my_list))\n\n\"\"\"\nWrite a function to get the fourth element of a list.\n\"\"\"\ndef fourth_element(my_list):\n\treturn my_list[3]\n\nmy_list = [1,2,3,4,5]\nprint(fourth_element(my_list))\n\n\"\"\"\nWrite a function to get the fifth element of a list.\n\"\"\"\ndef fifth_element(my_list):\n\treturn"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numer", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numerics(test_list, K):\n\t\"\"\"\n\t:type test_list: list[str]\n\t:type K: int\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [re.sub(r'\\d+', lambda x: str(int(x.group()) + K), s) for s in test_list]\n\ndef increment_numer"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn [lambda x:x**n(x) for x in nums]\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using list comprehension.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn [x**n for x in nums]\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using reduce function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using filter function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using sorted function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [lambda x:x**n(x) for x in nums]\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using list comprehension.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn [x**n for x in nums]\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using reduce function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using filter function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using sorted function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn list(map(lambda x:x**n,nums))\n\nnums = [1,2,3,4,5]\nprint(nth_nums(nums,2))\n\n\"\"\""}
{"ID": 25, "source": "MBPP:626", "prompt": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r) :  \n\treturn (r**2) * (3**0.5)  \n  \ndef largest_triangle(r) :  \n\treturn (triangle_area(r) / 2)  \n  \ndef largest_triangle_inscribed(r) :  \n\treturn (largest_triangle(r) / 2)  \n  \nprint(largest_triangle_inscribed(5))  \n\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\""}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\tif start > end: \n\t\treturn -1\n\tmid = (start + end) // 2\n\tif array[mid] == mid: \n\t\treturn find_First_Missing(array,start,mid-1)\n\telif array[mid] > mid: \n\t\treturn find_First_Missing(array,mid+1,end)\n\telse: \n\t\treturn find_First_Missing(array,start,mid-1)\n\ndef find_smallest_missing(array):\n\tn = len(array)\n\tif n == 0:\n\t\treturn -1\n\tif n == 1:\n\t\treturn array[0] + 1\n\tif array[0] != 0:\n\t\treturn array[0]\n\tif array[n-1] != n-1:\n\t\treturn array[n-1] + 1\n\treturn find_First_Missing(array,1,n-2) + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 27, "source": "MBPP:628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\ndef replace_spaces(string):\n\t\"\"\"\n\t:type string: str\n\t:rtype: str\n\t\"\"\"\n\treturn string.replace(\" \", \"%20\")\n\n\ndef test_replace_spaces():\n\tassert replace_spaces(\"hello world\") == \"hello%20world\"\n\tassert replace_spaces(\"hello world world\") == \"hello%20world%20world\"\n\tassert replace_spaces(\"hello world world world\") == \"hello%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world\") == \"hello%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world\") == \"hello%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world%20world%20world%20world\"\n\tassert replace_spaces(\"hello world world world world world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world%20world%20world%20world%2", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tassert replace_spaces(\"hello world world world world world world world world world world world\") == \"hello%20world%20world%20world%20world%20world%20world%20world%20world%20world%20world%2"}
{"ID": 31, "source": "MBPP:632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t", "predict": "<s> \"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n\t\"\"\"\n\t:param num_list: list\n\t:return: list\n\t\"\"\"\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of the list\n\t# return num_list\n\t# move all zeroes to the end of"}
{"ID": 32, "source": "MBPP:633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) : \n\t# Initialize result\n\tresult = 0\n\t\n\t# Traverse the array\n\tfor i in range(n) : \n\t\tfor j in range(i+1, n) : \n\t\t\tresult = result ^ arr[i] ^ arr[j]\n\t\n\t# Return result\n\treturn result\n\n# Test cases\narr = [1, 2, 3, 4, 5]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Test cases\narr = [1, 2, 3, 4, 5]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(pair_OR_Sum(arr, len(arr)))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(pair_OR_Sum(arr, len(arr)))"}
{"ID": 33, "source": "MBPP:634", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n natural numbers.\n\"\"\"\ndef Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n positive integers.\n\"\"\"\ndef positive_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n negative integers.\n\"\"\"\ndef negative_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n integers.\n\"\"\"\ndef integer_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n floating point numbers.\n\"\"\"\ndef floating_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n complex numbers.\n\"\"\"\ndef complex_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n natural numbers.\n\"\"\"\ndef Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n positive integers.\n\"\"\"\ndef positive_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n negative integers.\n\"\"\"\ndef negative_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n integers.\n\"\"\"\ndef integer_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n floating point numbers.\n\"\"\"\ndef floating_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth power of first n complex numbers.\n\"\"\"\ndef complex_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of fourth"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<s> \"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theapq.heappush(heap, value)\n\treturn [heapq.heappop(heap) for _ in range(len(heap))]\n\ndef test_heap_sort():\n\tassert heap_sort([]) == []\n\tassert heap_sort([1]) == [1]\n\tassert heap_sort([1, 2, 3]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1, 4]) == [1, 2, 3, 4]\n\tassert heap_sort([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]\n\tassert heap_sort([3, 2, 1, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert heap_sort([]) == []\n\tassert heap_sort([1]) == [1]\n\tassert heap_sort([1, 2, 3]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1, 4]) == [1, 2, 3, 4]\n\tassert heap_sort([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]\n\tassert heap_sort([3, 2, 1, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tassert heap_sort([3, 2, 1, 4, 5, 6, 7, 8, "}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t\n\t# Calculate the discriminant of the quadratic equation\n\tdiscriminant = (b**2) - (4*a*c)\n\t\n\t# Check if the discriminant is positive\n\tif discriminant > 0:\n\t\t\n\t\t# Calculate the roots of the quadratic equation\n\t\troot1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n\t\troot2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n\t\t\n\t\t# Check if the roots are reciprocal of each other\n\t\tif root1 == 1/root2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\t\n\t# If the discriminant is not positive, the equation has no real roots\n\telse:\n\t\treturn False\n\n# Test the function with a=1, b=2, c=3\nprint(Check_Solution(1,2,3))\n\n# Test the function with a=1, b=2, c=4\nprint(Check_Solution(1,2,4))\n\n# Test the function with a=1, b=2, c=5\nprint(Check_Solution(1,2,5))\n\n# Test the function with a=1, b=2, c=6\nprint(Check_Solution(1,2,6))\n\n# Test the function with a=1, b=2, c=7\nprint(Check_Solution(1,2,7))\n\n# Test the function with a=1, b=2, c=8\nprint(Check_Solution(1,2,8))\n\n# Test the function with a=1, b=2, c=9\nprint(Check_Solution(1,2,9))\n\n# Test the function with a=1, b=2, c=10\nprint(Check_Solution(1,2,10))\n\n# Test the function with a=1, b=2, c=11\nprint(Check_Solution(1,2,11))\n\n# Test the function with a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n# Test the function with a=1, b=2, c=3\nprint(Check_Solution(1,2,3))\n\n# Test the function with a=1, b=2, c=4\nprint(Check_Solution(1,2,4))\n\n# Test the function with a=1, b=2, c=5\nprint(Check_Solution(1,2,5))\n\n# Test the function with a=1, b=2, c=6\nprint(Check_Solution(1,2,6))\n\n# Test the function with a=1, b=2, c=7\nprint(Check_Solution(1,2,7))\n\n# Test the function with a=1, b=2, c=8\nprint(Check_Solution(1,2,8))\n\n# Test the function with a=1, b=2, c=9\nprint(Check_Solution(1,2,9))\n\n# Test the function with a=1, b=2, c=10\nprint(Check_Solution(1,2,10))\n\n# Test the function with a=1, b=2, c=11\nprint(Check_Solution(1,2,11))\n\n# Test the function with a"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\tif actual_cost == sale_amount:\n\t\treturn True\n\telif actual_cost > sale_amount:\n\t\treturn False\n\telse:\n\t\treturn False\n\nprint(noprofit_noloss(100,90))\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,110))\nprint(noprofit_noloss(100,120))\nprint(noprofit_noloss(100,130))\nprint(noprofit_noloss(100,140))\nprint(noprofit_noloss(100,150))\nprint(noprofit_noloss(100,160))\nprint(noprofit_noloss(100,170))\nprint(noprofit_noloss(100,180))\nprint(noprofit_noloss(100,190))\nprint(noprofit_noloss(100,200))\nprint(noprofit_noloss(100,210))\nprint(noprofit_noloss(100,220))\nprint(noprofit_noloss(100,230))\nprint(noprofit_noloss(100,240))\nprint(noprofit_noloss(100,250))\nprint(noprofit_noloss(100,260))\nprint(noprofit_noloss(100,270))\nprint(noprofit_noloss(100,280))\nprint(noprofit_noloss(100,290))\nprint(noprofit_noloss(100,300))\nprint(noprofit_noloss(100,310))\nprint(noprofit_noloss(100,320))\nprint(noprofit_noloss(100,33", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(noprofit_noloss(100,90))\nprint(noprofit_noloss(100,100))\nprint(noprofit_noloss(100,110))\nprint(noprofit_noloss(100,120))\nprint(noprofit_noloss(100,130))\nprint(noprofit_noloss(100,140))\nprint(noprofit_noloss(100,150))\nprint(noprofit_noloss(100,160))\nprint(noprofit_noloss(100,170))\nprint(noprofit_noloss(100,180))\nprint(noprofit_noloss(100,190))\nprint(noprofit_noloss(100,200))\nprint(noprofit_noloss(100,210))\nprint(noprofit_noloss(100,220))\nprint(noprofit_noloss(100,230))\nprint(noprofit_noloss(100,240))\nprint(noprofit_noloss(100,250))\nprint(noprofit_noloss(100,260))\nprint(noprofit_noloss(100,270))\nprint(noprofit_noloss(100,280))\nprint(noprofit_noloss(100,290))\nprint(noprofit_noloss(100,300))\nprint(noprofit_noloss(100,310))\nprint(noprofit_noloss(100,320))\nprint(noprofit_noloss(100,33"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\"\"\"\n\t:type items: str\n\t:rtype: str\n\t\"\"\"\n\tstack = []\n\tfor item in items:\n\t\tif item == '(':\n\t\t\tstack.append(item)\n\t\telif item == ')':\n\t\t\tstack.pop()\n\t\telse:\n\t\t\tstack.append(item)\n\treturn ''.join(stack)\n\nprint(remove_parenthesis('()'))\nprint(remove_parenthesis('(())'))\nprint(remove_parenthesis('(()())'))\nprint(remove_parenthesis('((())())'))\nprint(remove_parenthesis('((((()))))'))\nprint(remove_parenthesis('((((()))))()'))\nprint(remove_parenthesis('((((()))))()()'))\nprint(remove_parenthesis('((((()))))()()()'))\nprint(remove_parenthesis('((((()))))()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()()", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_parenthesis('()'))\nprint(remove_parenthesis('(())'))\nprint(remove_parenthesis('(()())'))\nprint(remove_parenthesis('((())())'))\nprint(remove_parenthesis('((((()))))'))\nprint(remove_parenthesis('((((()))))()'))\nprint(remove_parenthesis('((((()))))()()'))\nprint(remove_parenthesis('((((()))))()()()'))\nprint(remove_parenthesis('((((()))))()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()()'))\nprint(remove_parenthesis('((((()))))()()()()()()()()()()()()()()()"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\tif n < 1:\n\t\treturn False\n\tif n == 1:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\tif n % 3 == 0:\n\t\treturn False\n\tif n % 5 == 0:\n\t\treturn False\n\tif n % 7 == 0:\n\t\treturn False\n\tif n % 11 == 0:\n\t\treturn False\n\tif n % 13 == 0:\n\t\treturn False\n\tif n % 17 == 0:\n\t\treturn False\n\tif n % 19 == 0:\n\t\treturn False\n\tif n % 23 == 0:\n\t\treturn False\n\tif n % 29 == 0:\n\t\treturn False\n\tif n % 31 == 0:\n\t\treturn False\n\tif n % 37 == 0:\n\t\treturn False\n\tif n % 41 == 0:\n\t\treturn False\n\tif n % 43 == 0:\n\t\treturn False\n\tif n % 47 == 0:\n\t\treturn False\n\tif n % 53 == 0:\n\t\treturn False\n\tif n % 59 == 0:\n\t\treturn False\n\tif n % 61 == 0:\n\t\treturn False\n\tif n % 67 == 0:\n\t\treturn False\n\tif n % 71 == 0:\n\t\treturn False\n\tif n % 73 == 0:\n\t\treturn False\n\tif n % 79 == 0:\n\t\treturn False\n\tif n % 83 == 0:\n\t\treturn False\n\tif n % 89 == 0:\n\t\treturn False\n\tif n % 97 == 0:\n\t\treturn False\n\treturn True\n\ndef find_nth_nonagonal(n):\n\ti = 1\n\twhile True:\n\t\tif is_nonagonal(i):\n\t\t\tn -= 1\n\t\t\tif n == 0:\n\t\t\t\treturn i\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n < 1:\n\t\treturn False\n\tif n == 1:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\tif n % 3 == 0:\n\t\treturn False\n\tif n % 5 == 0:\n\t\treturn False\n\tif n % 7 == 0:\n\t\treturn False\n\tif n % 11 == 0:\n\t\treturn False\n\tif n % 13 == 0:\n\t\treturn False\n\tif n % 17 == 0:\n\t\treturn False\n\tif n % 19 == 0:\n\t\treturn False\n\tif n % 23 == 0:\n\t\treturn False\n\tif n % 29 == 0:\n\t\treturn False\n\tif n % 31 == 0:\n\t\treturn False\n\tif n % 37 == 0:\n\t\treturn False\n\tif n % 41 == 0:\n\t\treturn False\n\tif n % 43 == 0:\n\t\treturn False\n\tif n % 47 == 0:\n\t\treturn False\n\tif n % 53 == 0:\n\t\treturn False\n\tif n % 59 == 0:\n\t\treturn False\n\tif n % 61 == 0:\n\t\treturn False\n\tif n % 67 == 0:\n\t\treturn False\n\tif n % 71 == 0:\n\t\treturn False\n\tif n % 73 == 0:\n\t\treturn False\n\tif n % 79 == 0:\n\t\treturn False\n\tif n % 83 == 0:\n\t\treturn False\n\tif n % 89 == 0:\n\t\treturn False\n\tif n % 97 == 0:\n\t\treturn False"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\treturn re.findall(r'\\bz\\w+\\b', text)\n\n\ndef text_match_wordz_middle_2(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_3(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_4(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_5(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_6(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_7(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_8(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_9(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_10(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_11(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_12(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_13(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_14(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_15(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.findall(r'\\bz\\w+\\b', text)\n\n\ndef text_match_wordz_middle_2(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_3(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_4(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_5(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_6(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_7(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_8(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_9(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_10(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_11(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_12(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_13(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_14(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_15(text):\n\treturn re.findall(r'z\\w+', text)\n\n\ndef text_match_wordz_middle_"}
{"ID": 43, "source": "MBPP:644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\t", "predict": "<s> \"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \n\treturn input[::-1][:k]\n\n\n\"\"\"\nWrite a python function to reverse a list of lists.\n\"\"\"\ndef reverse_list_of_lists(input):\n\treturn input[::-1]\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn input[::-1]\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):\n\treturn max(max(inner_list) for inner_list in input)\n\n\n\"\"\"\nWrite a python function to find the maximum element in a list of lists.\n\"\"\"\ndef max_element_in_list_of_lists(input):"}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\treturn (N//K)**3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split('([A-Z])', text)\n\n\ndef test_split_upperstring():\n\tassert split_upperstring('HelloWorld') == ['Hello', 'World']\n\tassert split_upperstring('HelloWorld123') == ['Hello', 'World123']\n\tassert split_upperstring('HelloWorld123ABC') == ['Hello', 'World123', 'ABC']\n\tassert split_upperstring('HelloWorld123ABCDEF') == ['Hello', 'World123', 'ABC', 'DEF']\n\tassert split_upperstring('HelloWorld123ABCDEFGHI') == ['Hello', 'World123', 'ABC', 'DEFGHI']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKL') == ['Hello', 'World123', 'ABC', 'DEFGHIJKL']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNO') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNO']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQR') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQR']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTU') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTU']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTUV') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTUV']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTUVW') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTUVW']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMN", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert split_upperstring('HelloWorld') == ['Hello', 'World']\n\tassert split_upperstring('HelloWorld123') == ['Hello', 'World123']\n\tassert split_upperstring('HelloWorld123ABC') == ['Hello', 'World123', 'ABC']\n\tassert split_upperstring('HelloWorld123ABCDEF') == ['Hello', 'World123', 'ABC', 'DEF']\n\tassert split_upperstring('HelloWorld123ABCDEFGHI') == ['Hello', 'World123', 'ABC', 'DEFGHI']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKL') == ['Hello', 'World123', 'ABC', 'DEFGHIJKL']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNO') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNO']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQR') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQR']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTU') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTU']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTUV') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTUV']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMNOPQRSTUVW') == ['Hello', 'World123', 'ABC', 'DEFGHIJKLMNOPQRSTUVW']\n\tassert split_upperstring('HelloWorld123ABCDEFGHIJKLMN"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "<s> \"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\treturn sum(nums[m:n+1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t\"\"\"\n\ttest_tup1: tuple\n\ttest_tup2: tuple\n\t\n\treturns: boolean\n\t\"\"\"\n\t# your code here\n\treturn test_tup1 in test_tup2\n\ndef test_check_subset():\n\tassert check_subset((1,2,3), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3)) == False\n\tassert check_subset((1,2,3), (1,2,3)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5,6)) == False\n\tassert check_subset((1,2,3,4,5,6), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5,6,7,8,9,10)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5)) == False\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5,6,7,8,9,10)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), (1,2,3,4,5,6,7,8,9,10)) == False\n\tassert check_subset((1,2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert check_subset((1,2,3), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3)) == False\n\tassert check_subset((1,2,3), (1,2,3)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5,6)) == False\n\tassert check_subset((1,2,3,4,5,6), (1,2,3,4,5)) == True\n\tassert check_subset((1,2,3,4,5), (1,2,3,4,5,6,7,8,9,10)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5)) == False\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5,6,7,8,9,10)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == True\n\tassert check_subset((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), (1,2,3,4,5,6,7,8,9,10)) == False\n\tassert check_subset((1,2"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\treturn {k:list(g) for k,g in itertools.groupby(l, lambda x:x[0])}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(s):\n\treturn 4*s\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(a,b):\n\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(a,b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a,b,c,d):\n\treturn (a+b)*(c+d)/2\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(s):\n\treturn 4*s\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(a,b):\n\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(a,b):\n\treturn a*b\n\n\"\"\""}
{"ID": 54, "source": "MBPP:655", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n positive integers, \nwhere n is a positive integer.\n\"\"\"\ndef sum_of_first_n_positive_integers(n) : \n\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find"}
{"ID": 58, "source": "MBPP:659", "prompt": "\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):\n        if Repeat(my_list[i:]) > 1:\n            print(my_list[i], end=\" \")\n\n\n#test case\nprint_duplicants([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):\n        if Repeat(my_list[i:]) > 1:\n            print(my_list[i], end=\" \")\n\n\n#test case\nprint_duplicants([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):\n        if Repeat(my_list[i:]) > 1:\n            print(my_list[i], end=\" \")\n\n\n#test case\nprint_duplicants([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):\n        if Repeat(my_list[i:]) > 1:\n            print(my_list[i], end=\" \")\n\n\n#test case\nprint_duplicants([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):\n        if Repeat(my_list[i:]) > 1:\n            print(my_list[i], end=\" \")\n\n\n#test case\nprint_duplicants([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x): \n\treturn len(x)\n\ndef print_duplicants(my_list):\n    my_list = list(set(my_list))\n    my_list.sort()\n    for i in range(len(my_list)):"}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\tif l1>r1 or l2>r2:\n\t\treturn []\n\tif l1>=l2 and l1<=r2:\n\t\treturn []\n\tif l2>=l1 and l2<=r1:\n\t\treturn []\n\treturn [l1,r1,l2,r2]\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\"\ndef find_Max_Sum(arr,k):\n\tif k>len(arr):\n\t\treturn -1\n\tmax_sum=0\n\tfor i in range(len(arr)-k+1):\n\t\tsum=0\n\t\tfor j in range(i,i+k):\n\t\t\tsum+=arr[j]\n\t\tif sum>max_sum:\n\t\t\tmax_sum=sum\n\treturn max_sum\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\"\ndef find_Max_Sum(arr,k):\n\tif k>len(arr):\n\t\treturn -1\n\tmax_sum=0\n\tfor i in range(len(arr)-k+1):\n\t\tsum=0\n\t\tfor j in range(i,i+k):\n\t\t\tsum+=arr[j]\n\t\tif sum>max_sum:\n\t\t\tmax_sum=sum\n\treturn max_sum\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\"\ndef find_Max_Sum(arr,k):\n\tif k>len(arr):\n\t\treturn -1\n\tmax_sum=0\n\tfor i in range(len(arr)-k+1):\n\t\tsum=0\n\t\tfor j in range(i,i+k):\n\t\t\tsum+=arr[j]\n\t\tif sum>max_sum:\n\t\t\tmax_sum=sum\n\treturn max_sum\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn []\n\treturn [l1,r1,l2,r2]\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\"\ndef find_Max_Sum(arr,k):\n\tif k>len(arr):\n\t\treturn -1\n\tmax_sum=0\n\tfor i in range(len(arr)-k+1):\n\t\tsum=0\n\t\tfor j in range(i,i+k):\n\t\t\tsum+=arr[j]\n\t\tif sum>max_sum:\n\t\t\tmax_sum=sum\n\treturn max_sum\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\"\ndef find_Max_Sum(arr,k):\n\tif k>len(arr):\n\t\treturn -1\n\tmax_sum=0\n\tfor i in range(len(arr)-k+1):\n\t\tsum=0\n\t\tfor j in range(i,i+k):\n\t\t\tsum+=arr[j]\n\t\tif sum>max_sum:\n\t\t\tmax_sum=sum\n\treturn max_sum\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray of size k in a given array arr of size n.\n\"\"\""}
{"ID": 61, "source": "MBPP:662", "prompt": "\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n\treturn {k: sorted(v) for k, v in dict1.items()}\n\n\n\"\"\"\nWrite a function to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\tif x == y: \n\t\treturn n\n\telse: \n\t\treturn n - (n % x) + y\n\nprint(find_max_val(10, 3, 7))\nprint(find_max_val(10, 3, 1))\nprint(find_max_val(10, 3, 4))\nprint(find_max_val(10, 3, 10))\nprint(find_max_val(10, 3, 11))\nprint(find_max_val(10, 3, 12))\nprint(find_max_val(10, 3, 13))\nprint(find_max_val(10, 3, 14))\nprint(find_max_val(10, 3, 15))\nprint(find_max_val(10, 3, 16))\nprint(find_max_val(10, 3, 17))\nprint(find_max_val(10, 3, 18))\nprint(find_max_val(10, 3, 19))\nprint(find_max_val(10, 3, 20))\nprint(find_max_val(10, 3, 21))\nprint(find_max_val(10, 3, 22))\nprint(find_max_val(10, 3, 23))\nprint(find_max_val(10, 3, 24))\nprint(find_max_val(10, 3, 25))\nprint(find_max_val(10, 3, 26))\nprint(find_max_val(10, 3, 27))\nprint(find_max_val(10, 3, 28))\nprint(find_max_val(10, 3, 29))\nprint(find_max_val(10, 3, 30))\nprint(find_max_val(10, 3, 31))\nprint(find_max_val(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_max_val(10, 3, 7))\nprint(find_max_val(10, 3, 1))\nprint(find_max_val(10, 3, 4))\nprint(find_max_val(10, 3, 10))\nprint(find_max_val(10, 3, 11))\nprint(find_max_val(10, 3, 12))\nprint(find_max_val(10, 3, 13))\nprint(find_max_val(10, 3, 14))\nprint(find_max_val(10, 3, 15))\nprint(find_max_val(10, 3, 16))\nprint(find_max_val(10, 3, 17))\nprint(find_max_val(10, 3, 18))\nprint(find_max_val(10, 3, 19))\nprint(find_max_val(10, 3, 20))\nprint(find_max_val(10, 3, 21))\nprint(find_max_val(10, 3, 22))\nprint(find_max_val(10, 3, 23))\nprint(find_max_val(10, 3, 24))\nprint(find_max_val(10, 3, 25))\nprint(find_max_val(10, 3, 26))\nprint(find_max_val(10, 3, 27))\nprint(find_max_val(10, 3, 28))\nprint(find_max_val(10, 3, 29))\nprint(find_max_val(10, 3, 30))\nprint(find_max_val(10, 3, 31))\nprint(find_max_val(1"}
{"ID": 64, "source": "MBPP:665", "prompt": "\"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t", "predict": "<s> \"\"\"\nWrite a python function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tnum_list.append(num_list.pop(0))\n\treturn num_list\n\ndef move_last_2(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_3(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_4(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_5(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_6(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_7(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_8(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_9(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn num_list\n\ndef move_last_2(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_3(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_4(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_5(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_6(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_7(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_8(num_list):\n\t\"\"\"\n\t:type num_list: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn num_list[1:] + num_list[:1]\n\ndef move_last_9(num_list):\n\t\"\"\"\n\t:type num_list: List[int]"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\tcount = 0\n\tfor i in string:\n\t\tif i in vowels:\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "<s> \"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\treturn char.join(string.split(char)) \n\n\ndef test_function(test_case):\n    if replace(test_case[0], test_case[1]) == test_case[2]:\n        return True\n    else:\n        return False\n\n\ndef replace(string, char):\n    return char.join(string.split(char))\n\n\ndef main():\n    test_cases = [\n        [\"aabbcc\", \"b\", \"acc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"c\", \"ab\"],\n        [\"aabbcc\", \"d\", \"aabbcc\"],\n        [\"aabbcc\", \"\", \"aabbcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"b", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "        [\"aabbcc\", \"b\", \"acc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"c\", \"ab\"],\n        [\"aabbcc\", \"d\", \"aabbcc\"],\n        [\"aabbcc\", \"\", \"aabbcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"bcc\"],\n        [\"aabbcc\", \"a\", \"b"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\timport re\n\tpattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n\tif re.match(pattern, Ip):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_IP(\"192.168.1.1\"))\nprint(check_IP(\"192.168.1.256\"))\nprint(check_IP(\"192.168.1.1.1\"))\nprint(check_IP(\"192.168.1\"))\nprint(check_IP(\"192.168.1.\"))\nprint(check_IP(\"192.168.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_IP(\"192.168.1.1\"))\nprint(check_IP(\"192.168.1.256\"))\nprint(check_IP(\"192.168.1.1.1\"))\nprint(check_IP(\"192.168.1\"))\nprint(check_IP(\"192.168.1.\"))\nprint(check_IP(\"192.168.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1."}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\tif len(nums) < 2:\n\t\treturn False\n\tfor i in range(len(nums) - 1):\n\t\tif nums[i] >= nums[i + 1]:\n\t\t\treturn False\n\treturn True\n\ndef decreasing_trend_2(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_3(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_4(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_5(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_6(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_7(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_8(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_9(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_10(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_11(nums):\n\treturn all(nums[i] <= nums[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef decreasing_trend_2(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_3(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_4(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_5(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_6(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_7(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_8(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_9(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_10(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef decreasing_trend_11(nums):\n\treturn all(nums[i] <= nums["}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\treturn n | (n & (n-1)) \n\ndef main():\n    print(\"Write a python function to set the right most unset bit.\")\n    print(\"Set the right most unset bit:\")\n    print(set_Right_most_Unset_Bit(1))\n    print(set_Right_most_Unset_Bit(2))\n    print(set_Right_most_Unset_Bit(3))\n    print(set_Right_most_Unset_Bit(4))\n    print(set_Right_most_Unset_Bit(5))\n    print(set_Right_most_Unset_Bit(6))\n    print(set_Right_most_Unset_Bit(7))\n    print(set_Right_most_Unset_Bit(8))\n    print(set_Right_most_Unset_Bit(9))\n    print(set_Right_most_Unset_Bit(10))\n    print(set_Right_most_Unset_Bit(11))\n    print(set_Right_most_Unset_Bit(12))\n    print(set_Right_most_Unset_Bit(13))\n    print(set_Right_most_Unset_Bit(14))\n    print(set_Right_most_Unset_Bit(15))\n    print(set_Right_most_Unset_Bit(16))\n    print(set_Right_most_Unset_Bit(17))\n    print(set_Right_most_Unset_Bit(18))\n    print(set_Right_most_Unset_Bit(19))\n    print(set_Right_most_Unset_Bit(20))\n    print(set_Right_most_Unset_Bit(21))\n    print(set_Right_most_Unset_Bit(22))\n    print(set_Right_most_Unset_Bit(23))\n    print(set_Right_most_Unset_Bit(24))\n    print(set_Right_most_Unset_Bit(25))\n    print(set_Right_most_Unset_Bit(26))\n    print(set_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    print(set_Right_most_Unset_Bit(1))\n    print(set_Right_most_Unset_Bit(2))\n    print(set_Right_most_Unset_Bit(3))\n    print(set_Right_most_Unset_Bit(4))\n    print(set_Right_most_Unset_Bit(5))\n    print(set_Right_most_Unset_Bit(6))\n    print(set_Right_most_Unset_Bit(7))\n    print(set_Right_most_Unset_Bit(8))\n    print(set_Right_most_Unset_Bit(9))\n    print(set_Right_most_Unset_Bit(10))\n    print(set_Right_most_Unset_Bit(11))\n    print(set_Right_most_Unset_Bit(12))\n    print(set_Right_most_Unset_Bit(13))\n    print(set_Right_most_Unset_Bit(14))\n    print(set_Right_most_Unset_Bit(15))\n    print(set_Right_most_Unset_Bit(16))\n    print(set_Right_most_Unset_Bit(17))\n    print(set_Right_most_Unset_Bit(18))\n    print(set_Right_most_Unset_Bit(19))\n    print(set_Right_most_Unset_Bit(20))\n    print(set_Right_most_Unset_Bit(21))\n    print(set_Right_most_Unset_Bit(22))\n    print(set_Right_most_Unset_Bit(23))\n    print(set_Right_most_Unset_Bit(24))\n    print(set_Right_most_Unset_Bit(25))\n    print(set_Right_most_Unset_Bit(26))\n    print(set_"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\timport re\n\timport collections\n\tstring = re.sub('[^a-zA-Z]', ' ', string)\n\tstring = string.lower()\n\tstring = ' '.join(collections.Counter(string.split()).elements())\n\treturn string\n\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_duplicate(\"Hello, how are you?\"))\nprint(remove_"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\tz = x+y\n\tif m <= z <= n:\n\t\treturn 20\n\telse:\n\t\treturn z\n\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,10,20))\nprint(sum_nums(1,2,1"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', text1)\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using split and join.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn ''.join(e for e in text1 if e.isalnum())\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using translate.\n\"\"\"\ndef remove_extra_char(text1):\n\timport string\n\treturn text1.translate(None, string.punctuation)\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.replace(' ', '').replace('-', '').replace('_', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', text1)\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using split and join.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn ''.join(e for e in text1 if e.isalnum())\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using translate.\n\"\"\"\ndef remove_extra_char(text1):\n\timport string\n\treturn text1.translate(None, string.punctuation)\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.replace(' ', '').replace('-', '').replace('_', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using strip and replace.\n\"\"\"\ndef remove_extra_char(text1):\n\treturn text1.strip('-_ ').replace(' ', '')\n\n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\tif a+b>c and b+c>a and c+a>b:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(validity_triangle(3,4,5))\nprint(validity_triangle(3,4,2))\nprint(validity_triangle(3,4,1))\nprint(validity_triangle(3,4,6))\nprint(validity_triangle(3,4,7))\nprint(validity_triangle(3,4,8))\nprint(validity_triangle(3,4,9))\nprint(validity_triangle(3,4,10))\nprint(validity_triangle(3,4,11))\nprint(validity_triangle(3,4,12))\nprint(validity_triangle(3,4,13))\nprint(validity_triangle(3,4,14))\nprint(validity_triangle(3,4,15))\nprint(validity_triangle(3,4,16))\nprint(validity_triangle(3,4,17))\nprint(validity_triangle(3,4,18))\nprint(validity_triangle(3,4,19))\nprint(validity_triangle(3,4,20))\nprint(validity_triangle(3,4,21))\nprint(validity_triangle(3,4,22))\nprint(validity_triangle(3,4,23))\nprint(validity_triangle(3,4,24))\nprint(validity_triangle(3,4,25))\nprint(validity_triangle(3,4,26))\nprint(validity_triangle(3,4,27))\nprint(validity_triangle(3,4,28))\nprint(validity_triangle(3,4,29))\nprint(validity_triangle(3,4,30))\nprint(validity_triangle(3,4,31))\nprint(validity_triangle(3,4,32))\nprint(validity_triangle(3,4,33))\nprint(validity_triangle(3,4,34))\nprint(validity", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(validity_triangle(3,4,5))\nprint(validity_triangle(3,4,2))\nprint(validity_triangle(3,4,1))\nprint(validity_triangle(3,4,6))\nprint(validity_triangle(3,4,7))\nprint(validity_triangle(3,4,8))\nprint(validity_triangle(3,4,9))\nprint(validity_triangle(3,4,10))\nprint(validity_triangle(3,4,11))\nprint(validity_triangle(3,4,12))\nprint(validity_triangle(3,4,13))\nprint(validity_triangle(3,4,14))\nprint(validity_triangle(3,4,15))\nprint(validity_triangle(3,4,16))\nprint(validity_triangle(3,4,17))\nprint(validity_triangle(3,4,18))\nprint(validity_triangle(3,4,19))\nprint(validity_triangle(3,4,20))\nprint(validity_triangle(3,4,21))\nprint(validity_triangle(3,4,22))\nprint(validity_triangle(3,4,23))\nprint(validity_triangle(3,4,24))\nprint(validity_triangle(3,4,25))\nprint(validity_triangle(3,4,26))\nprint(validity_triangle(3,4,27))\nprint(validity_triangle(3,4,28))\nprint(validity_triangle(3,4,29))\nprint(validity_triangle(3,4,30))\nprint(validity_triangle(3,4,31))\nprint(validity_triangle(3,4,32))\nprint(validity_triangle(3,4,33))\nprint(validity_triangle(3,4,34))\nprint(validity"}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "<s> \"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\treturn ditionary[key]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\tif len(nums) < 2:\n\t\treturn True\n\tfor i in range(len(nums) - 1):\n\t\tif nums[i] > nums[i + 1]:\n\t\t\treturn False\n\treturn True\n\ndef increasing_trend_2(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_3(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_4(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_5(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_6(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_7(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_8(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_9(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_10(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_11(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef increasing_trend_2(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_3(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_4(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_5(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_6(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_7(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_8(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_9(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_10(nums):\n\treturn all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef increasing_trend_11(nums):\n\treturn all(nums[i] < nums[i + 1] for i in range("}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\tfor i in range(2, n+1): \n\t\tif n % i == 0: \n\t\t\treturn i \n\treturn n \n\n\"\"\"\nWrite a python function to find the largest prime divisor of a number.\n\"\"\"\ndef largest_Divisor(n): \n\tfor i in range(n, 1, -1): \n\t\tif n % i == 0: \n\t\t\treturn i \n\treturn n \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_Factors(n): \n\tfactors = [] \n\twhile n % 2 == 0: \n\t\tfactors.append(2) \n\t\tn = n / 2\n\tfor i in range(3, int(n ** 0.5) + 1, 2): \n\t\twhile n % i == 0: \n\t\t\tfactors.append(i) \n\t\t\tn = n / i \n\tif n > 2: \n\t\tfactors.append(n) \n\treturn factors \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_Factors(n): \n\tfactors = [] \n\twhile n % 2 == 0: \n\t\tfactors.append(2) \n\t\tn = n / 2\n\tfor i in range(3, int(n ** 0.5) + 1, 2): \n\t\twhile n % i == 0: \n\t\t\tfactors.append(i) \n\t\t\tn = n / i \n\tif n > 2: \n\t\tfactors.append(n) \n\treturn factors \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_Factors(n): \n\tfactors = [] \n\twhile n % 2 == 0: \n\t\tfactors.append(2) \n\t\tn = n / 2\n\tfor i in range(3, int(n ** 0.5) + 1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif n % i == 0: \n\t\t\treturn i \n\treturn n \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_Factors(n): \n\tfactors = [] \n\twhile n % 2 == 0: \n\t\tfactors.append(2) \n\t\tn = n / 2\n\tfor i in range(3, int(n ** 0.5) + 1, 2): \n\t\twhile n % i == 0: \n\t\t\tfactors.append(i) \n\t\t\tn = n / i \n\tif n > 2: \n\t\tfactors.append(n) \n\treturn factors \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_Factors(n): \n\tfactors = [] \n\twhile n % 2 == 0: \n\t\tfactors.append(2) \n\t\tn = n / 2\n\tfor i in range(3, int(n ** 0.5) + 1, 2): \n\t\twhile n % i == 0: \n\t\t\tfactors.append(i) \n\t\t\tn = n / i \n\tif n > 2: \n\t\tfactors.append(n) \n\treturn factors \n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\""}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nprint(mul_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))"}
{"ID": 83, "source": "MBPP:684", "prompt": "\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x): \n\treturn str.count(x) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 84, "source": "MBPP:685", "prompt": "\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n): \n\tif n <= 2: \n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1): \n\t\tif is_prime(i): \n\t\t\tsum += i \n\treturn sum \n\ndef is_prime(n): \n\tif n <= 1: \n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1): \n\t\tif n % i == 0: \n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tif n <= 2:\n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tif n <= 2:\n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tif n <= 2:\n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1):", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def is_prime(n): \n\tif n <= 1: \n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1): \n\t\tif n % i == 0: \n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tif n <= 2:\n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tif n <= 2:\n\t\treturn 0\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "<s> \"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\tif n == 1:\n\t\treturn 0\n\tmin_jumps = [float('inf') for i in range(n)]\n\tmin_jumps[0] = 0\n\tfor i in range(1, n):\n\t\tfor j in range(i):\n\t\t\tif i > j + arr[j] and min_jumps[j] != float('inf'):\n\t\t\t\tmin_jumps[i] = min(min_jumps[i], min_jumps[j] + 1)\n\treturn min_jumps[n - 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 91, "source": "MBPP:692", "prompt": "\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1\n\tfor i in range(1, N+1): \n\t\tfactorial = (factorial % 1000000007) * (i % 1000000007) \n\treturn factorial % 1000000007 \n\n\n\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(N): \n\tfactorial = 1"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\timport re\n\treturn re.sub(' +', ' ', text1)\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text2):\n\treturn ' '.join(text2.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text3):\n\treturn text3.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text4):\n\treturn text4.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text5):\n\treturn ' '.join(text5.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text6):\n\treturn text6.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text7):\n\treturn text7.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text8):\n\treturn ' '.join(text8.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text9):\n\treturn text9.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text10):\n\treturn text10.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text11):\n\treturn ' '.join(text11.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text12):\n\treturn text12.replace('  ', '", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(' +', ' ', text1)\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text2):\n\treturn ' '.join(text2.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text3):\n\treturn text3.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text4):\n\treturn text4.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text5):\n\treturn ' '.join(text5.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text6):\n\treturn text6.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text7):\n\treturn text7.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text8):\n\treturn ' '.join(text8.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\"\ndef remove_multiple_spaces(text9):\n\treturn text9.replace('  ', ' ')\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip.\n\"\"\"\ndef remove_multiple_spaces(text10):\n\treturn text10.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split and join.\n\"\"\"\ndef remove_multiple_spaces(text11):\n\treturn ' '.join(text11.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace.\n\"\"\""}
{"ID": 94, "source": "MBPP:695", "prompt": "\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n\tif len(test_tup1) != len(test_tup2):\n\t\treturn False\n\tfor i in range(len(test_tup1)):\n\t\tif test_tup1[i] > test_tup2[i]:\n\t\t\treturn False\n\treturn True\n\nprint(check_greater((1, 2, 3), (2, 3, 4)))\nprint(check_greater((1, 2, 3), (2, 3, 3)))\nprint(check_greater((1, 2, 3), (2, 3, 2)))\nprint(check_greater((1, 2, 3), (2, 3, 1)))\nprint(check_greater((1, 2, 3), (2, 3, 0)))\nprint(check_greater((1, 2, 3), (2, 3, -1)))\nprint(check_greater((1, 2, 3), (2, 3, -2)))\nprint(check_greater((1, 2, 3), (2, 3, -3)))\nprint(check_greater((1, 2, 3), (2, 3, -4)))\nprint(check_greater((1, 2, 3), (2, 3, -5)))\nprint(check_greater((1, 2, 3), (2, 3, -6)))\nprint(check_greater((1, 2, 3), (2, 3, -7)))\nprint(check_greater((1, 2, 3), (2, 3, -8)))\nprint(check_greater((1, 2, 3), (2, 3, -9)))\nprint(check_greater((1, 2, 3), (2, 3, -10)))\nprint(check_greater((1, 2, 3), (2, 3, -11)))\nprint(check_greater((1, 2, 3), (2, 3, -12)))\nprint(check_greater((1, 2, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_greater((1, 2, 3), (2, 3, 4)))\nprint(check_greater((1, 2, 3), (2, 3, 3)))\nprint(check_greater((1, 2, 3), (2, 3, 2)))\nprint(check_greater((1, 2, 3), (2, 3, 1)))\nprint(check_greater((1, 2, 3), (2, 3, 0)))\nprint(check_greater((1, 2, 3), (2, 3, -1)))\nprint(check_greater((1, 2, 3), (2, 3, -2)))\nprint(check_greater((1, 2, 3), (2, 3, -3)))\nprint(check_greater((1, 2, 3), (2, 3, -4)))\nprint(check_greater((1, 2, 3), (2, 3, -5)))\nprint(check_greater((1, 2, 3), (2, 3, -6)))\nprint(check_greater((1, 2, 3), (2, 3, -7)))\nprint(check_greater((1, 2, 3), (2, 3, -8)))\nprint(check_greater((1, 2, 3), (2, 3, -9)))\nprint(check_greater((1, 2, 3), (2, 3, -10)))\nprint(check_greater((1, 2, 3), (2, 3, -11)))\nprint(check_greater((1, 2, 3), (2, 3, -12)))\nprint(check_greater((1, 2, "}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "<s> \"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\treturn list(zip(list1,list2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 97, "source": "MBPP:698", "prompt": "\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {(1,2):'a', (2,1):'b', (3,4):'c', (4,3):'d'}\nprint(sort_dict_item(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with list keys.\n\"\"\"\ndef sort_dict_item_list(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {[1,2]:'a', [2,1]:'b', [3,4]:'c', [4,3]:'d'}\nprint(sort_dict_item_list(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with string keys.\n\"\"\"\ndef sort_dict_item_str(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {'ab': 'a', 'ba': 'b', 'cd': 'c', 'dc': 'd'}\nprint(sort_dict_item_str(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with set keys.\n\"\"\"\ndef sort_dict_item_set(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {{1,2}:'a', {2,1}:'b', {3,4}:'c', {4,3}:'d'}\nprint(sort_dict_item_set(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with frozenset keys.\n\"\"\"\ndef sort_dict_item_frozenset(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {(1,2):'a', (2,1):'b', (3,4):'c', (4,3):'d'}\nprint(sort_dict_item(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with list keys.\n\"\"\"\ndef sort_dict_item_list(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {[1,2]:'a', [2,1]:'b', [3,4]:'c', [4,3]:'d'}\nprint(sort_dict_item_list(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with string keys.\n\"\"\"\ndef sort_dict_item_str(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {'ab': 'a', 'ba': 'b', 'cd': 'c', 'dc': 'd'}\nprint(sort_dict_item_str(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with set keys.\n\"\"\"\ndef sort_dict_item_set(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\ntest_dict = {{1,2}:'a', {2,1}:'b', {3,4}:'c', {4,3}:'d'}\nprint(sort_dict_item_set(test_dict))\n\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with frozenset keys.\n\"\"\"\ndef sort_dict_item_frozenset(test_dict):"}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t# Code here\n\tstr1 = list(str1)\n\tstr2 = list(str2)\n\tcount = 0\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\tcount += 1\n\t\t\tstr1[i], str2[i] = str2[i], str1[i]\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\tcount = 0\n\tfor i in li:\n\t\tif min <= i <= max:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 9))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 9))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 8))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 6))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 2))\nprint(count_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 9))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 9))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 8))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 6))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 2))\nprint(count_"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn -1\n\tleft = 0\n\tright = sum(arr)\n\twhile left < len(arr):\n\t\tif left == right:\n\t\t\treturn left\n\t\tright -= arr[left]\n\t\tleft += 1\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(equilibrium_index([0, 0, 0, 0, 0]))\n\tprint(equilibrium_index([0, 0, 0, 0, 1]))\n\tprint(equilibrium_index([0, 0, 0, 0, 2]))\n\tprint(equilibrium_index([0, 0, 0, 0, 3]))\n\tprint(equilibrium_index([0, 0, 0, 0, 4]))\n\tprint(equilibrium_index([0, 0, 0, 0, 5]))\n\tprint(equilibrium_index([0, 0, 0, 0, 6]))\n\tprint(equilibrium_index([0, 0, 0, 0, 7]))\n\tprint(equilibrium_index([0, 0, 0, 0, 8]))\n\tprint(equilibrium_index([0, 0, 0, 0, 9]))\n\tprint(equilibrium_index([0, 0, 0, 0, 10]))\n\tprint(equilibrium_index([0, 0, 0, 0, 11]))\n\tprint(equilibrium_index([0, 0, 0, 0, 12]))\n\tprint(equilibrium_index([0, 0, 0, 0, 13]))\n\tprint(equilibrium_index([0, 0, 0, 0, 14]))\n\tprint(equilibrium_index([0, 0, 0, 0, 15]))\n\tprint(equilibrium_index([0, 0, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(equilibrium_index([0, 0, 0, 0, 0]))\n\tprint(equilibrium_index([0, 0, 0, 0, 1]))\n\tprint(equilibrium_index([0, 0, 0, 0, 2]))\n\tprint(equilibrium_index([0, 0, 0, 0, 3]))\n\tprint(equilibrium_index([0, 0, 0, 0, 4]))\n\tprint(equilibrium_index([0, 0, 0, 0, 5]))\n\tprint(equilibrium_index([0, 0, 0, 0, 6]))\n\tprint(equilibrium_index([0, 0, 0, 0, 7]))\n\tprint(equilibrium_index([0, 0, 0, 0, 8]))\n\tprint(equilibrium_index([0, 0, 0, 0, 9]))\n\tprint(equilibrium_index([0, 0, 0, 0, 10]))\n\tprint(equilibrium_index([0, 0, 0, 0, 11]))\n\tprint(equilibrium_index([0, 0, 0, 0, 12]))\n\tprint(equilibrium_index([0, 0, 0, 0, 13]))\n\tprint(equilibrium_index([0, 0, 0, 0, 14]))\n\tprint(equilibrium_index([0, 0, 0, 0, 15]))\n\tprint(equilibrium_index([0, 0, "}
{"ID": 101, "source": "MBPP:702", "prompt": "\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef removals(arr, n, k):\n\tarr.sort()\n\tmin_removals = 0\n\twhile n > 1 and arr[-1] - arr[0] > k:\n\t\tarr.pop()\n\t\tmin_removals += 1\n\treturn min_removals\n\narr = [1, 2, 3, 4, 5]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nk =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min_removals\n\narr = [1, 2, 3, 4, 5]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nk = 2\nprint(removals(arr, len(arr), k))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nk ="}
{"ID": 102, "source": "MBPP:703", "prompt": "\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n\treturn x in d\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_present(d, 3))\n\n\"\"\"\nWrite a function to check whether the given value is present in the dictionary or not.\n\"\"\"\ndef is_value_present(d,x):\n\treturn x in d.values()\n\nd = {1:2, 3:4, 5:6}\nprint(is_value_present(d, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nd = {1:2, 3:4, 5:6}\nprint(is_key_present(d, 3))\n\n\"\"\"\nWrite a function to check whether the given value is present in the dictionary or not.\n\"\"\"\ndef is_value_present(d,x):\n\treturn x in d.values()\n\nd = {1:2, 3:4, 5:6}\nprint(is_value_present(d, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))\n\n\"\"\"\nWrite a function to check whether the given key-value pair is present in the dictionary or not.\n\"\"\"\ndef is_key_value_pair_present(d,x,y):\n\treturn x in d and d[x] == y\n\nd = {1:2, 3:4, 5:6}\nprint(is_key_value_pair_present(d, 3, 4))"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\treturn list(string)\n\n\"\"\"\nWrite a python function to get the first character of a string.\n\"\"\"\ndef FirstCharacter(string): \n\treturn string[0]\n\n\"\"\"\nWrite a python function to get the last character of a string.\n\"\"\"\ndef LastCharacter(string): \n\treturn string[-1]\n\n\"\"\"\nWrite a python function to get the length of a string.\n\"\"\"\ndef Length(string): \n\treturn len(string)\n\n\"\"\"\nWrite a python function to check whether a string is empty or not.\n\"\"\"\ndef IsEmpty(string): \n\treturn len(string) == 0\n\n\"\"\"\nWrite a python function to check whether a string is palindrome or not.\n\"\"\"\ndef IsPalindrome(string): \n\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef IsPalindrome(string): \n\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a string is a number or not.\n\"\"\"\ndef IsNumber(string): \n\ttry:\n\t\tfloat(string)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\tunique_list = []\n\tfor i in test_list:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn unique_list\n\ndef count_unique_keys(test_tuple):\n\tunique_keys = get_unique(test_tuple)\n\tcount = 0\n\tfor i in unique_keys:\n\t\tcount += test_tuple.count(i)\n\treturn count\n\nprint(count_unique_keys((1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_unique_keys((1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\teven_product = 1\n\todd_product = 1\n\ttemp = n\n\twhile(temp > 0):\n\t\trem = temp % 10\n\t\tif(temp % 2 == 0):\n\t\t\teven_product *= rem\n\t\telse:\n\t\t\todd_product *= rem\n\t\ttemp //= 10\n\treturn even_product == odd_product\n\nprint(product_Equal(123456789))\nprint(product_Equal(1234567890))\nprint(product_Equal(12345678901))\nprint(product_Equal(123456789012))\nprint(product_Equal(1234567890123))\nprint(product_Equal(12345678901234))\nprint(product_Equal(123456789012345))\nprint(product_Equal(1234567890123456))\nprint(product_Equal(12345678901234567))\nprint(product_Equal(123456789012345678))\nprint(product_Equal(1234567890123456789))\nprint(product_Equal(12345678901234567890))\nprint(product_Equal(123456789012345678901))\nprint(product_Equal(1234567890123456789012))\nprint(product_Equal(12345678901234567890123))\nprint(product_Equal(123456789012345678901234))\nprint(product_Equal(12345678901234567", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(product_Equal(123456789))\nprint(product_Equal(1234567890))\nprint(product_Equal(12345678901))\nprint(product_Equal(123456789012))\nprint(product_Equal(1234567890123))\nprint(product_Equal(12345678901234))\nprint(product_Equal(123456789012345))\nprint(product_Equal(1234567890123456))\nprint(product_Equal(12345678901234567))\nprint(product_Equal(123456789012345678))\nprint(product_Equal(1234567890123456789))\nprint(product_Equal(12345678901234567890))\nprint(product_Equal(123456789012345678901))\nprint(product_Equal(1234567890123456789012))\nprint(product_Equal(12345678901234567890123))\nprint(product_Equal(123456789012345678901234))\nprint(product_Equal(12345678901234567"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\treturn list(map(list, set(map(tuple, list1))))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\twhile n % i == 0:\n\t\t\tcount += 1\n\t\t\tn //= i\n\tif n > 1:\n\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 115, "source": "MBPP:716", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n\treturn a * 4\n\n\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(a):\n\treturn a * a\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\treturn a + b + c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a + b + c) / 2\n\treturn (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\treturn 2 * (a + b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a * b\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef cube_volume(a):\n\treturn a * a * a\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (3.14 * r * r * h) / 3\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4 * 3.14 * r * r * r) / 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a + b + c) / 2\n\treturn (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\treturn 2 * (a + b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a * b\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef cube_volume(a):\n\treturn a * a * a\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (3.14 * r * r * h) / 3\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4 * 3.14 * r * r * r) / 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_2(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_3(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_4(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_5(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_6(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_2(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_3(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_4(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_5(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)\n\tmean = sum(data) / n\n\tvariance = sum((x-mean)**2 for x in data) / n\n\tstd_dev = variance ** 0.5\n\treturn std_dev\n\ndef sd_calc_6(data):\n\t\"\"\"\n\tCalculate the standard deviation of a list of numbers.\n\t\"\"\"\n\tn = len(data)"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]\n\nprint(every_nth_element([1,2,3,4,5,6,7,8,9,10], 2))\n\n\"\"\"\nWrite a function to create a list taking every nth element from another given list.\n\"\"\"\ndef every_nth_element(list1, n):\n\treturn list1[::n]"}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\treturn re.match(r'a[b]*', text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 120, "source": "MBPP:721", "prompt": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t", "predict": "<s> \"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\ndef maxAverageOfPath(cost, N): \n\t# Initialize the maximum sum and its index \n\tmax_sum = -1000000000\n\tmax_index = -1\n\t\n\t# Initialize the sum and index for current path \n\tsum = 0\n\tindex = 0\n\t\n\t# Traverse the matrix in spiral form \n\tfor i in range(N): \n\t\tfor j in range(N): \n\t\t\tsum += cost[i][j] \n\t\t\tindex += 1\n\t\t\t\n\t\t\t# If the sum of elements in current path is greater than the sum of elements in current maximum path \n\t\t\tif sum > max_sum: \n\t\t\t\tmax_sum = sum \n\t\t\t\tmax_index = index \n\t\t\t\n\t\t\t# If the sum of elements in current path is less than the sum of elements in current maximum path \n\t\t\telif sum < max_sum: \n\t\t\t\tsum = 0\n\t\t\t\tindex = 0\n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\telif sum == max_sum: \n\t\t\t\tmax_index = index \n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\t# and the index of current path is less than the index of current maximum path \n\t\t\telif sum == max_sum and index < max_index: \n\t\t\t\tmax_index = index \n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\t# and the index of current path is greater than the index of current maximum path \n\t\t\telif sum == max_sum and index > max_index: \n\t\t\t\tsum = 0\n\t\t\t\tindex = 0\n\t\t\t\t\n\treturn max_sum / max_index \n\n# Driver code \ncost = [[1, 2, 3], \n\t\t[4, 5, 6], \n\t\t[7,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(N): \n\t\tfor j in range(N): \n\t\t\tsum += cost[i][j] \n\t\t\tindex += 1\n\t\t\t\n\t\t\t# If the sum of elements in current path is greater than the sum of elements in current maximum path \n\t\t\tif sum > max_sum: \n\t\t\t\tmax_sum = sum \n\t\t\t\tmax_index = index \n\t\t\t\n\t\t\t# If the sum of elements in current path is less than the sum of elements in current maximum path \n\t\t\telif sum < max_sum: \n\t\t\t\tsum = 0\n\t\t\t\tindex = 0\n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\telif sum == max_sum: \n\t\t\t\tmax_index = index \n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\t# and the index of current path is less than the index of current maximum path \n\t\t\telif sum == max_sum and index < max_index: \n\t\t\t\tmax_index = index \n\t\t\t\t\n\t\t\t# If the sum of elements in current path is equal to the sum of elements in current maximum path \n\t\t\t# and the index of current path is greater than the index of current maximum path \n\t\t\telif sum == max_sum and index > max_index: \n\t\t\t\tsum = 0\n\t\t\t\tindex = 0\n\t\t\t\t"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This is a sample text.\" \"This is another sample text.\"'\nprint(extract_quotation(text1))\n\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using split and join.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\tpattern = r'\"(.*?)\"'\n\treturn re.findall(pattern, text1)\n\ntext1 = '\"This"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\treturn sum(lst1) + sum(lst2)\n\nprint(sum_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(lst1) + sum(lst2)\n\nprint(sum_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef max_list(lst):\n\treturn max(max(inner_lst) for inner_lst in lst)\n\nprint(max_list([[1,2,3],[4,5,6],[7,8,9]]))\n\n\"\"\"\nWrite a function to find the maximum element in a list of lists.\n\"\"\"\ndef"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))"}
{"ID": 129, "source": "MBPP:730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"\ndef consecutive_duplicates(nums):\n\tif not nums:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tif i == 0 or nums[i] != nums[i-1]:\n\t\t\tresult.append(nums[i])\n\treturn result\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn result\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):\n\treturn list(dict.fromkeys(nums))\n\n\ndef consecutive_duplicates(nums):"}
{"ID": 131, "source": "MBPP:732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_specialchar(text):\n\treturn text.replace(\" \",\"\").replace(\",\",\"\").replace(\".\",\"\")\n\nprint(replace_specialchar(\"hello world\"))\nprint(replace_specialchar(\"hello,world\"))\nprint(replace_specialchar(\"hello.world\"))\nprint(replace_specialchar(\"hello,world.com\"))\nprint(replace_specialchar(\"hello,world.com,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world,hello\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world\"))\nprint(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(replace_specialchar(\"hello,world.com,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world,hello,world"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t# first and last bit\n\tfirst_last_bit = n & 2\n\t# middle bits\n\tmiddle_bits = n & ~3\n\t# toggle middle bits\n\tmiddle_bits = middle_bits ^ 2\n\t# combine\n\treturn first_last_bit | middle_bits\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn first_last_bit | middle_bits\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits(n):\n\treturn (n ^ 2) & ~3\n\ndef toggle_middle_bits("}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\"\"\"\n\t:type a: list\n\t:type x: int\n\t:rtype: int\n\t\"\"\"\n\tleft = 0\n\tright = len(a) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif a[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn left\n\ndef left_insertion_recursive(a, x):\n\t\"\"\"\n\t:type a: list\n\t:type x: int\n\t:rtype: int\n\t\"\"\"\n\tif len(a) == 0:\n\t\treturn 0\n\tif a[0] >= x:\n\t\treturn 0\n\tif a[-1] < x:\n\t\treturn len(a)\n\tmid = len(a) // 2\n\tif a[mid] < x:\n\t\treturn left_insertion_recursive(a[:mid], x)\n\telse:\n\t\treturn left_insertion_recursive(a[mid:], x) + mid + 1\n\ndef test_left_insertion():\n\tassert left_insertion([1, 3, 5, 7], 4) == 2\n\tassert left_insertion([1, 3, 5, 7], 6) == 3\n\tassert left_insertion([1, 3, 5, 7], 2) == 1\n\tassert left_insertion([1, 3, 5, 7], 8) == 4\n\tassert left_insertion([1, 3, 5, 7], 0) == 0\n\tassert left_insertion([1, 3, 5, 7], 9) == 4\n\tassert left_insertion([1, 3, 5, 7], 1) == 1\n\tassert left_insertion([1, 3, 5, 7], 3) == 1\n\tassert left_insertion([1, 3, 5, 7], 5) == 2\n\tassert left_insertion([1, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert left_insertion([1, 3, 5, 7], 4) == 2\n\tassert left_insertion([1, 3, 5, 7], 6) == 3\n\tassert left_insertion([1, 3, 5, 7], 2) == 1\n\tassert left_insertion([1, 3, 5, 7], 8) == 4\n\tassert left_insertion([1, 3, 5, 7], 0) == 0\n\tassert left_insertion([1, 3, 5, 7], 9) == 4\n\tassert left_insertion([1, 3, 5, 7], 1) == 1\n\tassert left_insertion([1, 3, 5, 7], 3) == 1\n\tassert left_insertion([1, 3, 5, 7], 5) == 2\n\tassert left_insertion([1, "}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\tif re.match(r'^[aeiou]', string): \n\t\treturn True\n\telse: \n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 139, "source": "MBPP:740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\ttest_dict = {}\n\tfor i in range(0, len(test_tup), 2):\n\t\ttest_dict[test_tup[i]] = test_tup[i+1]\n\treturn test_dict\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2, \"c\", 3)))\n# Output: {'a': 1, 'b': 2, 'c': 3}\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2, \"c\")))\n# Output: {'a': 1, 'b': 2, 'c': None}\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2)))\n# Output: {'a': 1, 'b': 2}\n\nprint(tuple_to_dict((\"a\", 1)))\n# Output: {'a': 1}\n\nprint(tuple_to_dict(()))\n# Output: {}\n\nprint(tuple_to_dict((\"a\")))\n# Output: {'a': None}\n\nprint(tuple_to_dict((\"a\", \"b\")))\n# Output: {'a': 'b'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\")))\n# Output: {'a': 'b', 'c': None}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\")))\n# Output: {'a': 'b', 'c': 'd'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\")))\n# Output: {'a': 'b', 'c': 'd', 'e': None}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\n# Output: {'a': 'b', 'c': 'd', 'e': 'f'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\n# Output: {'a': 'b', 'c': 'd', 'e': 'f', 'g': None}", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn test_dict\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2, \"c\", 3)))\n# Output: {'a': 1, 'b': 2, 'c': 3}\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2, \"c\")))\n# Output: {'a': 1, 'b': 2, 'c': None}\n\nprint(tuple_to_dict((\"a\", 1, \"b\", 2)))\n# Output: {'a': 1, 'b': 2}\n\nprint(tuple_to_dict((\"a\", 1)))\n# Output: {'a': 1}\n\nprint(tuple_to_dict(()))\n# Output: {}\n\nprint(tuple_to_dict((\"a\")))\n# Output: {'a': None}\n\nprint(tuple_to_dict((\"a\", \"b\")))\n# Output: {'a': 'b'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\")))\n# Output: {'a': 'b', 'c': None}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\")))\n# Output: {'a': 'b', 'c': 'd'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\")))\n# Output: {'a': 'b', 'c': 'd', 'e': None}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\n# Output: {'a': 'b', 'c': 'd', 'e': 'f'}\n\nprint(tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\n\n\"\"\"\nWrite a python function to check"}
{"ID": 141, "source": "MBPP:742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate the area of a tetrahedron.\n\"\"\"\ndef area_tetrahedron(side):\n\treturn (side**2 * (3**0.5))/6\n\nprint(area_tetrahedron(5))\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\n\"\"\"\ndef volume_cube(side):\n\treturn side**3\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(radius):\n\treturn (4/3) * 3.14 * radius**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(radius, height):\n\treturn 3.14 * radius**2 * height\n\nprint(volume_cylinder(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a cone.\n\"\"\"\ndef volume_cone(radius, height):\n\treturn (1/3) * 3.14 * radius**2 * height\n\nprint(volume_cone(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(length, width, height):\n\treturn length * width * height\n\nprint(volume_prism(5, 10, 15))\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular pyramid.\n\"\"\"\ndef volume_pyramid(length, width, height):\n\treturn (length * width * height) / 3\n\nprint(volume_pyramid(5, 10, 15))\n\n\"\"\"\nWrite a function to calculate the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(base, height):\n\treturn base * height / 2\n\nprint(volume_triangular_prism(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(base, height):\n\treturn (base * height) / 3\n\nprint(volume_triangular_pyram", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (side**2 * (3**0.5))/6\n\nprint(area_tetrahedron(5))\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\n\"\"\"\ndef volume_cube(side):\n\treturn side**3\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(radius):\n\treturn (4/3) * 3.14 * radius**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(radius, height):\n\treturn 3.14 * radius**2 * height\n\nprint(volume_cylinder(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a cone.\n\"\"\"\ndef volume_cone(radius, height):\n\treturn (1/3) * 3.14 * radius**2 * height\n\nprint(volume_cone(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(length, width, height):\n\treturn length * width * height\n\nprint(volume_prism(5, 10, 15))\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular pyramid.\n\"\"\"\ndef volume_pyramid(length, width, height):\n\treturn (length * width * height) / 3\n\nprint(volume_pyramid(5, 10, 15))\n\n\"\"\"\nWrite a function to calculate the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(base, height):\n\treturn base * height / 2\n\nprint(volume_triangular_prism(5, 10))\n\n\"\"\"\nWrite a function to calculate the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(base, height):"}
{"ID": 142, "source": "MBPP:743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\tlist1.extend(list1[:m])\n\treturn list1[n:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\tfor i in test_tup:\n\t\tif i is None:\n\t\t\treturn True\n\treturn False\n\nprint(check_none((1,2,3,4,5)))\nprint(check_none((1,2,3,4,None)))\nprint(check_none((1,2,3,4,None,None)))\nprint(check_none((1,2,3,4,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_none((1,2,3,4,5)))\nprint(check_none((1,2,3,4,None)))\nprint(check_none((1,2,3,4,None,None)))\nprint(check_none((1,2,3,4,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint("}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid email address.\n\"\"\"\ndef is_valid_email(email):\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', email)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid phone number.\n\"\"\"\ndef is_valid_phone(phone):\n\treturn re.match(r'^\\d{3}-\\d{3}-\\d{4}$', phone)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid IP address.\n\"\"\"\ndef is_valid_ip(ip):\n\treturn re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid URL.\n\"\"\"\ndef is_valid_url(url):\n\treturn re.match(r'^https?://', url)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid credit card number.\n\"\"\"\ndef is_valid_credit_card(cc):\n\treturn re.match(r'^[0-9]{13,19}$', cc)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid social security number.\n\"\"\"\ndef is_valid_ssn(ssn):\n\treturn re.match(r'^\\d{3}-\\d{2}-\\d{4}$', ssn)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid US zip code.\n\"\"\"\ndef is_valid_zip(zip):\n\treturn re.match(r'^\\d{5}(-\\d{4})?$', zip)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid US phone number.\n\"\"\"\ndef is_valid_phone_us(phone):\n\treturn re", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid email address.\n\"\"\"\ndef is_valid_email(email):\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', email)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid phone number.\n\"\"\"\ndef is_valid_phone(phone):\n\treturn re.match(r'^\\d{3}-\\d{3}-\\d{4}$', phone)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid IP address.\n\"\"\"\ndef is_valid_ip(ip):\n\treturn re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid URL.\n\"\"\"\ndef is_valid_url(url):\n\treturn re.match(r'^https?://', url)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid credit card number.\n\"\"\"\ndef is_valid_credit_card(cc):\n\treturn re.match(r'^[0-9]{13,19}$', cc)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid social security number.\n\"\"\"\ndef is_valid_ssn(ssn):\n\treturn re.match(r'^\\d{3}-\\d{2}-\\d{4}$', ssn)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid US zip code.\n\"\"\"\ndef is_valid_zip(zip):\n\treturn re.match(r'^\\d{5}(-\\d{4})?$', zip)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid US phone number.\n\"\"\"\ndef is_valid_phone_us(phone):"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\treturn sorted(nums_str, key=lambda x: float(x))\n\n\ndef test_sort_numeric_strings():\n\tassert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\n\tassert sort_numeric_strings(['5', '4', '3', '2', '1']) == ['1', '2', '3', '4', '5']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50']) == ['10', '20', '30', '40', '50']\n\tassert sort_numeric_strings(['5', '4', '3', '2', '1', '10']) == ['1', '2', '3', '4', '5', '10']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1']) == ['1', '10', '20', '30', '40', '50']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1', '2']) == ['1', '2', '10', '20', '30', '40', '50']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1', '2', '3']) == ['1', '2', '3', '10', '20', '30', '40', '50']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1', '2', '3', '4']) == ['1', '2', '3', '4', '10', '20', '30', '40', '50']\n\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1', '2', '3', '4', '5']) == ['1', '2', '3',", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tassert sort_numeric_strings(['10', '20', '30', '40', '50', '1', '2', '3', '4', '5']) == ['1', '2', '3',"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\tif i >= len(arr) // 2:\n\t\treturn True\n\tif i * 2 + 1 >= len(arr):\n\t\treturn False\n\tif arr[i] > arr[i * 2 + 1]:\n\t\treturn False\n\treturn check_min_heap(arr, i * 2 + 1)\n\ndef check_min_heap_recursive(arr):\n\treturn check_min_heap(arr, 0)\n\ndef check_min_heap_iterative(arr):\n\tn = len(arr)\n\tfor i in range(n // 2):\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\treturn True\n\ndef check_min_heap_iterative_2(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_3(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_4(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_5(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_6(arr):\n\tn = len(arr)\n\ti = 0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef check_min_heap_recursive(arr):\n\treturn check_min_heap(arr, 0)\n\ndef check_min_heap_iterative(arr):\n\tn = len(arr)\n\tfor i in range(n // 2):\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\treturn True\n\ndef check_min_heap_iterative_2(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_3(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_4(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_5(arr):\n\tn = len(arr)\n\ti = 0\n\twhile i < n // 2:\n\t\tif arr[i] > arr[i * 2 + 1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef check_min_heap_iterative_6(arr):"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<s> \"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_2(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_2(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_3(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_3(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_4(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_4(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_5(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_5(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_6(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_6(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_7(l1, l2, l3):\n\treturn [i for", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_2(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_2(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_3(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_3(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_4(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_4(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_5(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_5(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_6(l1, l2, l3):\n\treturn [i for i in l1 if i in l2 and i in l3]\n\ndef extract_index_set_6(l1, l2, l3):\n\treturn set(l1).intersection(set(l2)).intersection(set(l3))\n\ndef extract_index_list_7(l1, l2, l3):"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\tif len(numbers) < 2:\n\t\treturn None\n\tsmallest = None\n\tfor n in numbers:\n\t\tif smallest is None or n < smallest:\n\t\t\tsmallest = n\n\t\telif n > smallest:\n\t\t\treturn n\n\treturn None\n\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(second_smallest([1, 2, 3, 4, 5, 5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(second_smallest([1, 2, 3, 4, 5, 5"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_2(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_3(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_4(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_5(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_6(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_7(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_8(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_9(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_10(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_11(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_12(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_13(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_14(text):\n\tpattern = r\"a[b]?\"\n\treturn re", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_2(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_3(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_4(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_5(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_6(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_7(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_8(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_9(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_10(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_11(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_12(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_13(text):\n\tpattern = r\"a[b]?\"\n\treturn re.match(pattern, text)\n\n\ndef text_match_zero_one_14(text):"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_2(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_3(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_4(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_5(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_6(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_7(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_8(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_9(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_10(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_11(list1):\n\t\"\"\"\n\t:type list1: list\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_2(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_3(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_4(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_5(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_6(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_7(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_8(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(list, list1)))\n\n\ndef unique_sublists_9(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(list1))\n\n\ndef unique_sublists_10(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(map(tuple, list1)))\n\n\ndef unique_sublists_11(list1):\n\t\"\"\"\n\t:type list1: list\n\t"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision(num, precision):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_2(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_3(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_4(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_5(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_6(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_7(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_8(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_9(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_10(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_11(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_12(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_13(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_14(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_15(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision(num, precision):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_2(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_3(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_4(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_5(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_6(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_7(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_8(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_9(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_10(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_11(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_12(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_13(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_14(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_15(num):\n\treturn num.is_integer() or num % 1 == 0\n\ndef is_decimal_precision_"}
{"ID": 162, "source": "MBPP:763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n): \n\tarr.sort() \n\tmin_diff = arr[1] - arr[0] \n\tfor i in range(1, n-1): \n\t\tmin_diff = min(min_diff, arr[i+1] - arr[i]) \n\treturn min_diff \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\treturn sum(c.isdigit() for c in str)\n\nprint(number_ctr(\"hello123\"))\nprint(number_ctr(\"hello1234\"))\nprint(number_ctr(\"hello12345\"))\nprint(number_ctr(\"hello123456\"))\nprint(number_ctr(\"hello1234567\"))\nprint(number_ctr(\"hello12345678\"))\nprint(number_ctr(\"hello123456789\"))\nprint(number_ctr(\"hello1234567890\"))\nprint(number_ctr(\"hello12345678901\"))\nprint(number_ctr(\"hello123456789012\"))\nprint(number_ctr(\"hello1234567890123\"))\nprint(number_ctr(\"hello12345678901234\"))\nprint(number_ctr(\"hello123456789012345\"))\nprint(number_ctr(\"hello1234567890123456\"))\nprint(number_ctr(\"hello12345678901234567\"))\nprint(number_ctr(\"hello123456789012345678\"))\nprint(number_ctr(\"hello1234567890123456789\"))\nprint(number_ctr(\"hello12345678901234567890\"))\nprint(number_ctr(\"hello123456789012345678901\"))\nprint(number_ctr(\"hello1234567890123456789012\"))\nprint(number_ctr(\"hello12345678901234567890123\"))\nprint(number_ctr(\"hello123456789012345678901234\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(number_ctr(\"hello123\"))\nprint(number_ctr(\"hello1234\"))\nprint(number_ctr(\"hello12345\"))\nprint(number_ctr(\"hello123456\"))\nprint(number_ctr(\"hello1234567\"))\nprint(number_ctr(\"hello12345678\"))\nprint(number_ctr(\"hello123456789\"))\nprint(number_ctr(\"hello1234567890\"))\nprint(number_ctr(\"hello12345678901\"))\nprint(number_ctr(\"hello123456789012\"))\nprint(number_ctr(\"hello1234567890123\"))\nprint(number_ctr(\"hello12345678901234\"))\nprint(number_ctr(\"hello123456789012345\"))\nprint(number_ctr(\"hello1234567890123456\"))\nprint(number_ctr(\"hello12345678901234567\"))\nprint(number_ctr(\"hello123456789012345678\"))\nprint(number_ctr(\"hello1234567890123456789\"))\nprint(number_ctr(\"hello12345678901234567890\"))\nprint(number_ctr(\"hello123456789012345678901\"))\nprint(number_ctr(\"hello1234567890123456789012\"))\nprint(number_ctr(\"hello12345678901234567890123\"))\nprint(number_ctr(\"hello123456789012345678901234\"))\nprint("}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\tif len(str(n)) == 1:\n\t\treturn True\n\telse:\n\t\tif len(str(n)) > 1:\n\t\t\tif str(n)[0] == str(n)[1]:\n\t\t\t\tif str(n)[-1] == str(n)[-2]:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn False\n\ndef polite_number(n):\n\ti = 1\n\twhile i < n:\n\t\tif is_polite(i):\n\t\t\ti += 1\n\t\telse:\n\t\t\ti += 1\n\treturn i\n\nprint(polite_number(10))\nprint(polite_number(100))\nprint(polite_number(1000))\nprint(polite_number(10000))\nprint(polite_number(100000))\nprint(polite_number(1000000))\nprint(polite_number(10000000))\nprint(polite_number(100000000))\nprint(polite_number(1000000000))\nprint(polite_number(10000000000))\nprint(polite_number(100000000000))\nprint(polite_number(1000000000000))\nprint(polite_number(10000000000000))\nprint(polite_number(100000000000000))\nprint(polite_number(1000000000000000))\nprint(polite_number(10000000000000000))\nprint(polite_number(100000000000000000))\nprint(polite_number(100000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(polite_number(10))\nprint(polite_number(100))\nprint(polite_number(1000))\nprint(polite_number(10000))\nprint(polite_number(100000))\nprint(polite_number(1000000))\nprint(polite_number(10000000))\nprint(polite_number(100000000))\nprint(polite_number(1000000000))\nprint(polite_number(10000000000))\nprint(polite_number(100000000000))\nprint(polite_number(1000000000000))\nprint(polite_number(10000000000000))\nprint(polite_number(100000000000000))\nprint(polite_number(1000000000000000))\nprint(polite_number(10000000000000000))\nprint(polite_number(100000000000000000))\nprint(polite_number(100000000000"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "<s> \"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\tfor i in range(len(l1)-1):\n\t\tyield (l1[i],l1[i+1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_Parity(x): \n\treturn (x & 1) == 1\n\ndef check_Odd_"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\treturn list(set(li1) - set(li2))\n\ndef test_Diff():\n\tassert Diff([1, 2, 3, 4], [4, 5, 6]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert Diff([1, 2, 3, 4], [4, 5, 6]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3]\n\tassert Diff([1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 10, 11, "}
{"ID": 169, "source": "MBPP:770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tif i % 2 != 0 : \n\t\t\tsum += i ** 4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect squares.\n\"\"\"\ndef perfect_Square_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n cubes.\n\"\"\"\ndef cube_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 3\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n fourth powers.\n\"\"\"\ndef fourth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n fifth powers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n sixth powers.\n\"\"\"\ndef sixth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 6\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n seventh powers.\n\"\"\"\ndef seventh_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 7\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n eighth powers.\n\"\"\"\ndef eighth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(1, n+1) : \n\t\tif i % 2 != 0 : \n\t\t\tsum += i ** 4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect squares.\n\"\"\"\ndef perfect_Square_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n cubes.\n\"\"\"\ndef cube_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 3\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n fourth powers.\n\"\"\"\ndef fourth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 4\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n fifth powers.\n\"\"\"\ndef fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n sixth powers.\n\"\"\"\ndef sixth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 6\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n seventh powers.\n\"\"\"\ndef seventh_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 7\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n eighth powers.\n\"\"\"\ndef eighth_Power_Sum(n) : \n\tsum = 0"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_expression(\"(())\"))\nprint(check_expression(\"(()))\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_expression(\"(())\"))\nprint(check_expression(\"(()))\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\nprint(check_expression(\"((())\"))\n"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\timport re\n\tregex = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\"\n\tif re.search(regex, email):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_email(\"abc@gmail.com\"))\nprint(check_email(\"abc@gmail\"))\nprint(check_email(\"abc@gmail.c\"))\nprint(check_email(\"abc@gmail.co\"))\nprint(check_email(\"abc@gmail.co.in\"))\nprint(check_email(\"abc@gmail.co.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in.in.", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_email(\"abc@gmail.com\"))\nprint(check_email(\"abc@gmail\"))\nprint(check_email(\"abc@gmail.c\"))\nprint(check_email(\"abc@gmail.co\"))\nprint(check_email(\"abc@gmail.co.in\"))\nprint(check_email(\"abc@gmail.co.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in.in\"))\nprint(check_email(\"abc@gmail.co.in.in.in.in.in.in.in.in.in.in.in.in.in."}
{"ID": 174, "source": "MBPP:775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n\tfor i in range(len(nums)):\n\t\tif i % 2 == 0:\n\t\t\tif nums[i] % 2 == 0:\n\t\t\t\treturn False\n\treturn True\n\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(odd_position([1, 2, 3, 4, 5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(odd_position([1, 2, 3, 4, 5"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\tcount = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i] in 'aeiou':\n\t\t\tif i == 0:\n\t\t\t\tif test_str[i] in 'aeiou':\n\t\t\t\t\tcount += 1\n\t\t\telif i == len(test_str) - 1:\n\t\t\t\tif test_str[i - 1] in 'aeiou':\n\t\t\t\t\tcount += 1\n\t\t\telse:\n\t\t\t\tif test_str[i - 1] in 'aeiou' and test_str[i + 1] in 'aeiou':\n\t\t\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels('aeiou'))\nprint(count_vowels('aeioua'))\nprint(count_vowels('aeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouae", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_vowels('aeiou'))\nprint(count_vowels('aeioua'))\nprint(count_vowels('aeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouae"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t# Initialize result\n\tresult = 0\n\t\n\t# Traverse the array.\n\tfor i in range(n): \n\t\tif (i > 0 and i < n and arr[i] == arr[i - 1] and arr[i] == arr[i + 1]): \n\t\t\tcontinue\n\t\tresult += arr[i] \n\treturn result \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divis", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\tif count % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\""}
{"ID": 181, "source": "MBPP:782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n\tn = len(arr)\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(i+1, n+1):\n\t\t\tif j-i+1 % 2 != 0:\n\t\t\t\tsum += sum(arr[i-1:j])\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\n\"\"\""}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t\"\"\"\n\t:type test_str: str\n\t:rtype: tuple\n\t\"\"\"\n\treturn tuple(map(int, test_str.split(',')))\n\ndef test_tuple_str_int():\n\tassert tuple_str_int('') == ()\n\tassert tuple_str_int('1') == (1,)\n\tassert tuple_str_int('1,2') == (1, 2)\n\tassert tuple_str_int('1,2,3') == (1, 2, 3)\n\tassert tuple_str_int('1,2,3,4') == (1, 2, 3, 4)\n\tassert tuple_str_int('1,2,3,4,5') == (1, 2, 3, 4, 5)\n\tassert tuple_str_int('1,2,3,4,5,6') == (1, 2, 3, 4, 5, 6)\n\tassert tuple_str_int('1,2,3,4,5,6,7') == (1, 2, 3, 4, 5, 6, 7)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8') == (1, 2, 3, 4, 5, 6, 7, 8)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9') == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9,10') == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9,10,11') == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\tassert", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert tuple_str_int('') == ()\n\tassert tuple_str_int('1') == (1,)\n\tassert tuple_str_int('1,2') == (1, 2)\n\tassert tuple_str_int('1,2,3') == (1, 2, 3)\n\tassert tuple_str_int('1,2,3,4') == (1, 2, 3, 4)\n\tassert tuple_str_int('1,2,3,4,5') == (1, 2, 3, 4, 5)\n\tassert tuple_str_int('1,2,3,4,5,6') == (1, 2, 3, 4, 5, 6)\n\tassert tuple_str_int('1,2,3,4,5,6,7') == (1, 2, 3, 4, 5, 6, 7)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8') == (1, 2, 3, 4, 5, 6, 7, 8)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9') == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9,10') == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\tassert tuple_str_int('1,2,3,4,5,6,7,8,9,10,11') == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\tassert"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t\"\"\"\n\t:type a: list\n\t:type x: int\n\t:rtype: int\n\t\"\"\"\n\tleft, right = 0, len(a) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif a[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn left\n\n\ndef test_right_insertion():\n\tassert right_insertion([1, 3, 5, 7], 4) == 2\n\tassert right_insertion([1, 3, 5, 7], 0) == 0\n\tassert right_insertion([1, 3, 5, 7], 8) == 4\n\tassert right_insertion([1, 3, 5, 7], 6) == 3\n\tassert right_insertion([1, 3, 5, 7], 2) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 7) == 4\n\tassert right_insertion([1, 3, 5, 7], 5) == 3\n\tassert right_insertion([1, 3, 5, 7], 3) == 2\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) ==", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert right_insertion([1, 3, 5, 7], 4) == 2\n\tassert right_insertion([1, 3, 5, 7], 0) == 0\n\tassert right_insertion([1, 3, 5, 7], 8) == 4\n\tassert right_insertion([1, 3, 5, 7], 6) == 3\n\tassert right_insertion([1, 3, 5, 7], 2) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 7) == 4\n\tassert right_insertion([1, 3, 5, 7], 5) == 3\n\tassert right_insertion([1, 3, 5, 7], 3) == 2\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) == 1\n\tassert right_insertion([1, 3, 5, 7], 1) =="}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\treturn re.match(r'a.*b.*b.*b', text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 187, "source": "MBPP:788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\nprint(new_tuple([\"a\", \"b\", \"c\"], \"hello\"))\n\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\ndef perimeter_polygon_2(s,l):\n\treturn s*2\n\ndef perimeter_polygon_3(s,l):\n\treturn s*3\n\ndef perimeter_polygon_4(s,l):\n\treturn s*4\n\ndef perimeter_polygon_5(s,l):\n\treturn s*5\n\ndef perimeter_polygon_6(s,l):\n\treturn s*6\n\ndef perimeter_polygon_7(s,l):\n\treturn s*7\n\ndef perimeter_polygon_8(s,l):\n\treturn s*8\n\ndef perimeter_polygon_9(s,l):\n\treturn s*9\n\ndef perimeter_polygon_10(s,l):\n\treturn s*10\n\ndef perimeter_polygon_11(s,l):\n\treturn s*11\n\ndef perimeter_polygon_12(s,l):\n\treturn s*12\n\ndef perimeter_polygon_13(s,l):\n\treturn s*13\n\ndef perimeter_polygon_14(s,l):\n\treturn s*14\n\ndef perimeter_polygon_15(s,l):\n\treturn s*15\n\ndef perimeter_polygon_16(s,l):\n\treturn s*16\n\ndef perimeter_polygon_17(s,l):\n\treturn s*17\n\ndef perimeter_polygon_18(s,l):\n\treturn s*18\n\ndef perimeter_polygon_19(s,l):\n\treturn s*19\n\ndef perimeter_polygon_20(s,l):\n\treturn s*20\n\ndef perimeter_polygon_21(s,l):\n\treturn s*21\n\ndef perimeter_polygon_22(s,l):\n\treturn s*22\n\ndef perimeter_polygon_23(s,l):\n\treturn s*23\n\ndef perimeter_polygon_24(s,l):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn s*l\n\ndef perimeter_polygon_2(s,l):\n\treturn s*2\n\ndef perimeter_polygon_3(s,l):\n\treturn s*3\n\ndef perimeter_polygon_4(s,l):\n\treturn s*4\n\ndef perimeter_polygon_5(s,l):\n\treturn s*5\n\ndef perimeter_polygon_6(s,l):\n\treturn s*6\n\ndef perimeter_polygon_7(s,l):\n\treturn s*7\n\ndef perimeter_polygon_8(s,l):\n\treturn s*8\n\ndef perimeter_polygon_9(s,l):\n\treturn s*9\n\ndef perimeter_polygon_10(s,l):\n\treturn s*10\n\ndef perimeter_polygon_11(s,l):\n\treturn s*11\n\ndef perimeter_polygon_12(s,l):\n\treturn s*12\n\ndef perimeter_polygon_13(s,l):\n\treturn s*13\n\ndef perimeter_polygon_14(s,l):\n\treturn s*14\n\ndef perimeter_polygon_15(s,l):\n\treturn s*15\n\ndef perimeter_polygon_16(s,l):\n\treturn s*16\n\ndef perimeter_polygon_17(s,l):\n\treturn s*17\n\ndef perimeter_polygon_18(s,l):\n\treturn s*18\n\ndef perimeter_polygon_19(s,l):\n\treturn s*19\n\ndef perimeter_polygon_20(s,l):\n\treturn s*20\n\ndef perimeter_polygon_21(s,l):\n\treturn s*21\n\ndef perimeter_polygon_22(s,l):\n\treturn s*22\n\ndef perimeter_polygon_23(s,l):\n\treturn s*23\n\ndef perimeter_polygon_24(s,l):"}
{"ID": 189, "source": "MBPP:790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n\tfor i in range(0, len(nums), 2):\n\t\tif nums[i] % 2 != 0:\n\t\t\treturn False\n\treturn True\n\ndef even_position(nums):\n\treturn all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in zip(nums, range(0, len(nums), 2)) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num %", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef even_position(nums):\n\treturn all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in zip(nums, range(0, len(nums), 2)) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)\n\ndef even_position(nums):\n\treturn all(num % 2 == 0 for num, i in enumerate(nums, start=1) if i % 2 == 0)"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\treturn len(input_list)\n\ndef count_list_recursive(input_list):\n\tif len(input_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_list_recursive(input_list[1:])\n\ndef count_list_map(input_list):\n\treturn len(list(map(lambda x: 1, input_list)))\n\ndef count_list_reduce(input_list):\n\treturn len(list(reduce(lambda x, y: x + [1], input_list, [])))\n\ndef count_list_filter(input_list):\n\treturn len(list(filter(lambda x: True, input_list)))\n\ndef count_list_comprehension(input_list):\n\treturn len([x for x in input_list])\n\ndef count_list_comprehension_set(input_list):\n\treturn len(set(input_list))\n\ndef count_list_comprehension_set_comprehension(input_list):\n\treturn len(set([x for x in input_list]))\n\ndef count_list_comprehension_set_comprehension_filter(input_list):\n\treturn len(set([x for x in input_list if x > 0]))\n\ndef count_list_comprehension_set_comprehension_filter_map(input_list):\n\treturn len(set([x for x in map(lambda x: x * 2, filter(lambda x: x > 0, input_list))]))\n\ndef count_list_comprehension_set_comprehension_filter_map_reduce(input_list):\n\treturn len(reduce(lambda x, y: x + y, map(lambda x: x * 2, filter(lambda x: x > 0, input_list)), []))\n\ndef count_list_comprehension_set_comprehension_filter_map_reduce_sorted(input_list):\n\treturn len(sorted(reduce(lambda x, y: x + y, map(lambda x: x * 2, filter(lambda x: x > 0, input_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 1 + count_list_recursive(input_list[1:])\n\ndef count_list_map(input_list):\n\treturn len(list(map(lambda x: 1, input_list)))\n\ndef count_list_reduce(input_list):\n\treturn len(list(reduce(lambda x, y: x + [1], input_list, [])))\n\ndef count_list_filter(input_list):\n\treturn len(list(filter(lambda x: True, input_list)))\n\ndef count_list_comprehension(input_list):\n\treturn len([x for x in input_list])\n\ndef count_list_comprehension_set(input_list):\n\treturn len(set(input_list))\n\ndef count_list_comprehension_set_comprehension(input_list):\n\treturn len(set([x for x in input_list]))\n\ndef count_list_comprehension_set_comprehension_filter(input_list):\n\treturn len(set([x for x in input_list if x > 0]))\n\ndef count_list_comprehension_set_comprehension_filter_map(input_list):\n\treturn len(set([x for x in map(lambda x: x * 2, filter(lambda x: x > 0, input_list))]))\n\ndef count_list_comprehension_set_comprehension_filter_map_reduce(input_list):\n\treturn len(reduce(lambda x, y: x + y, map(lambda x: x * 2, filter(lambda x: x > 0, input_list)), []))\n\ndef count_list_comprehension_set_comprehension_filter_map_reduce_sorted(input_list):"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):\n\tn=len(arr)\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\ndef last(arr,x):"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t# create a min heap\n\theap = []\n\t# loop through the items\n\tfor item in items:\n\t\t# if the heap is empty or the current item is less than the top of the heap\n\t\tif not heap or item < heap[0]:\n\t\t\t# add the item to the heap\n\t\t\theapq.heappush(heap,item)\n\t\t# if the heap is not empty and the current item is greater than the top of the heap\n\t\telif item > heap[0]:\n\t\t\t# remove the top of the heap\n\t\t\theapq.heappop(heap)\n\t\t\t# add the item to the heap\n\t\t\theapq.heappush(heap,item)\n\t# return the heap\n\treturn heap\n\n# test the function\nitems = [1,2,3,4,5,6,7,8,9,10]\nprint(cheap_items(items,3))\n\n\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using priority queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t# create a priority queue\n\tqueue = PriorityQueue()\n\t# loop through the items\n\tfor item in items:\n\t\t# add the item to the queue\n\t\tqueue.put(item)\n\t# loop through the items\n\tfor i in range(n):\n\t\t# remove the top of the queue\n\t\tqueue.get()\n\t# return the queue\n\treturn queue\n\n# test the function\nitems = [1,2,3,4,5,6,7,8,9,10]\nprint(cheap_items(items,3))\n\n\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t# create a min heap\n\theap = []\n\t# loop through the items\n\tfor item in items:\n\t\t# if the heap is empty or the current item is less than the top of the heap\n\t\tif not heap or item < heap[0]:\n\t\t\t# add the item to the heap\n\t\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn heap\n\n# test the function\nitems = [1,2,3,4,5,6,7,8,9,10]\nprint(cheap_items(items,3))\n\n\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using priority queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t# create a priority queue\n\tqueue = PriorityQueue()\n\t# loop through the items\n\tfor item in items:\n\t\t# add the item to the queue\n\t\tqueue.put(item)\n\t# loop through the items\n\tfor i in range(n):\n\t\t# remove the top of the queue\n\t\tqueue.get()\n\t# return the queue\n\treturn queue\n\n# test the function\nitems = [1,2,3,4,5,6,7,8,9,10]\nprint(cheap_items(items,3))\n\n\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t# create a min heap\n\theap = []\n\t# loop through the items"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef sum(arr):\n\treturn sum(arr)\n\ndef"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t# Write your code here\n\treturn n<<d | n>>(32-d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\tcount = 0\n\tif x == y:\n\t\tcount += 1\n\tif y == z:\n\t\tcount += 1\n\tif x == z:\n\t\tcount += 1\n\treturn count\n\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t\"\"\"\n\t:param test_str:\n\t:return:\n\t\"\"\"\n\tmax_run = 0\n\trun = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\trun += 1\n\t\telse:\n\t\t\tif run > max_run:\n\t\t\t\tmax_run = run\n\t\t\trun = 0\n\tif run > max_run:\n\t\tmax_run = run\n\treturn max_run\n\n\nif __name__ == '__main__':\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\tprint(max_run_uppercase(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num\n\treturn None\n\ndef first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2 != 0:\n\t\t\treturn num"}
{"ID": 207, "source": "MBPP:808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n\treturn K in test_tup\n\nprint(check_K((1, 2, 3, 4, 5), 3))\nprint(check_K((1, 2, 3, 4, 5), 6))\nprint(check_K((1, 2, 3, 4, 5), 1))\nprint(check_K((1, 2, 3, 4, 5), 5))\nprint(check_K((1, 2, 3, 4, 5), 10))\nprint(check_K((1, 2, 3, 4, 5), 0))\nprint(check_K((1, 2, 3, 4, 5), -1))\nprint(check_K((1, 2, 3, 4, 5), 1.5))\nprint(check_K((1, 2, 3, 4, 5), \"hello\"))\nprint(check_K((1, 2, 3, 4, 5), []))\nprint(check_K((1, 2, 3, 4, 5), {}))\nprint(check_K((1, 2, 3, 4, 5), None))\nprint(check_K((1, 2, 3, 4, 5), True))\nprint(check_K((1, 2, 3, 4, 5), False))\nprint(check_K((1, 2, 3, 4, 5), 1.0))\nprint(check_K((1, 2, 3, 4, 5), 1.5))\nprint(check_K((1, 2, 3, 4, 5), 1.9))\nprint(check_K((1, 2, 3, 4, 5), 2.1))\nprint(check_K((1, 2, 3, 4, 5), 2.5))\nprint(check_K((1, 2, 3, 4, 5), 2.9))\nprint(check_K((1, 2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_K((1, 2, 3, 4, 5), 3))\nprint(check_K((1, 2, 3, 4, 5), 6))\nprint(check_K((1, 2, 3, 4, 5), 1))\nprint(check_K((1, 2, 3, 4, 5), 5))\nprint(check_K((1, 2, 3, 4, 5), 10))\nprint(check_K((1, 2, 3, 4, 5), 0))\nprint(check_K((1, 2, 3, 4, 5), -1))\nprint(check_K((1, 2, 3, 4, 5), 1.5))\nprint(check_K((1, 2, 3, 4, 5), \"hello\"))\nprint(check_K((1, 2, 3, 4, 5), []))\nprint(check_K((1, 2, 3, 4, 5), {}))\nprint(check_K((1, 2, 3, 4, 5), None))\nprint(check_K((1, 2, 3, 4, 5), True))\nprint(check_K((1, 2, 3, 4, 5), False))\nprint(check_K((1, 2, 3, 4, 5), 1.0))\nprint(check_K((1, 2, 3, 4, 5), 1.5))\nprint(check_K((1, 2, 3, 4, 5), 1.9))\nprint(check_K((1, 2, 3, 4, 5), 2.1))\nprint(check_K((1, 2, 3, 4, 5), 2.5))\nprint(check_K((1, 2, 3, 4, 5), 2.9))\nprint(check_K((1, 2, 3"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\tif len(test_list1) != len(test_list2):\n\t\treturn False\n\tfor i in range(len(test_list1)):\n\t\tif test_list1[i] != test_list2[i]:\n\t\t\treturn False\n\treturn True\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\n"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<s> \"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\treturn street.replace('road', 'rd.')\n\nprint(road_rd('12345 road'))\nprint(road_rd('12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 123", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(road_rd('12345 road'))\nprint(road_rd('12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road 12345 road'))\nprint(road_rd('12345 road 12345 road 12345 road 12345 road 12345 road 123"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\treturn len(str1)\n\nprint(string_length(\"hello\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(string_length(\"hello\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check whether a string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint"}
{"ID": 214, "source": "MBPP:815", "prompt": "\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\t# 0, 1, 2\n\t# 0, 0, 0\n\t# 1, 1, 1\n\t# 2, 2, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t# 0, 1, 2\n\t"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([12,13,14,15,16,17,18,19,20],3,5"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count upper case letters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count digits in a given string.\n\"\"\"\ndef digit_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count special characters in a given string.\n\"\"\"\ndef special_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isalpha() == False and i.isdigit() == False and i.isspace() == False:\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count white spaces in a given string.\n\"\"\"\ndef white_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isspace():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tctr = 0\n\tfor i in str.split():\n\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count unique words in a given string.\n\"\"\"\ndef unique_word_ctr(str):\n\tctr = 0\n\tfor i in set(str.split()):\n\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count vowels in a given string.\n\"\"\"\ndef vowel_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i in 'aeiouAEIOU':\n\t\t\tctr += 1\n\treturn ctr\n\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tctr = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count upper case letters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count digits in a given string.\n\"\"\"\ndef digit_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count special characters in a given string.\n\"\"\"\ndef special_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isalpha() == False and i.isdigit() == False and i.isspace() == False:\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count white spaces in a given string.\n\"\"\"\ndef white_ctr(str):\n\tctr = 0\n\tfor i in str:\n\t\tif i.isspace():\n\t\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tctr = 0\n\tfor i in str.split():\n\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count unique words in a given string.\n\"\"\"\ndef unique_word_ctr(str):\n\tctr = 0\n\tfor i in set(str.split()):\n\t\tctr += 1\n\treturn ctr\n\n\n\n\"\"\"\nWrite a python function to count vowels in a given string.\n\"\"\"\ndef vowel_ctr(str):\n\tctr = 0\n\tfor i in str:"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\tcount = 0\n\tfor i in range(len(lists)-1):\n\t\tif lists[i] == lists[i+1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 0\n\treturn count\n\nprint(count_duplic([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_duplic([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<s> \"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\tif len(p) < 8:\n\t\treturn False\n\tif len(p) > 16:\n\t\treturn False\n\tif p.islower() == False:\n\t\treturn False\n\tif p.isupper() == False:\n\t\treturn False\n\tif p.isdigit() == False:\n\t\treturn False\n\tif p.count('!') == 0:\n\t\treturn False\n\tif p.count('@') == 0:\n\t\treturn False\n\tif p.count('#') == 0:\n\t\treturn False\n\tif p.count('$') == 0:\n\t\treturn False\n\tif p.count('%') == 0:\n\t\treturn False\n\tif p.count('^') == 0:\n\t\treturn False\n\tif p.count('&') == 0:\n\t\treturn False\n\tif p.count('*') == 0:\n\t\treturn False\n\tif p.count('(') == 0:\n\t\treturn False\n\tif p.count(')') == 0:\n\t\treturn False\n\tif p.count('-') == 0:\n\t\treturn False\n\tif p.count('_') == 0:\n\t\treturn False\n\tif p.count('+') == 0:\n\t\treturn False\n\tif p.count('=') == 0:\n\t\treturn False\n\tif p.count('[') == 0:\n\t\treturn False\n\tif p.count(']') == 0:\n\t\treturn False\n\tif p.count('{') == 0:\n\t\treturn False\n\tif p.count('}') == 0:\n\t\treturn False\n\tif p.count('|') == 0:\n\t\treturn False\n\tif p.count('\\\\') == 0:\n\t\treturn False\n\tif p.count(';') == 0:\n\t\treturn False\n\tif p.count(':') == 0:\n\t\treturn False\n\tif p.count(',') == 0:\n\t\treturn False\n\tif p.count('.') == 0:\n\t\treturn False\n\tif p", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(p) < 8:\n\t\treturn False\n\tif len(p) > 16:\n\t\treturn False\n\tif p.islower() == False:\n\t\treturn False\n\tif p.isupper() == False:\n\t\treturn False\n\tif p.isdigit() == False:\n\t\treturn False\n\tif p.count('!') == 0:\n\t\treturn False\n\tif p.count('@') == 0:\n\t\treturn False\n\tif p.count('#') == 0:\n\t\treturn False\n\tif p.count('$') == 0:\n\t\treturn False\n\tif p.count('%') == 0:\n\t\treturn False\n\tif p.count('^') == 0:\n\t\treturn False\n\tif p.count('&') == 0:\n\t\treturn False\n\tif p.count('*') == 0:\n\t\treturn False\n\tif p.count('(') == 0:\n\t\treturn False\n\tif p.count(')') == 0:\n\t\treturn False\n\tif p.count('-') == 0:\n\t\treturn False\n\tif p.count('_') == 0:\n\t\treturn False\n\tif p.count('+') == 0:\n\t\treturn False\n\tif p.count('=') == 0:\n\t\treturn False\n\tif p.count('[') == 0:\n\t\treturn False\n\tif p.count(']') == 0:\n\t\treturn False\n\tif p.count('{') == 0:\n\t\treturn False\n\tif p.count('}') == 0:\n\t\treturn False\n\tif p.count('|') == 0:\n\t\treturn False\n\tif p.count('\\\\') == 0:\n\t\treturn False\n\tif p.count(';') == 0:\n\t\treturn False\n\tif p.count(':') == 0:\n\t\treturn False\n\tif p.count(',') == 0:\n\t\treturn False\n\tif p.count('.') == 0:\n\t\treturn False"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\treturn re.search(r'^' + sample, string)\n\n\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring_end(string, sample) : \n\treturn re.search(r'(?<=^)' + sample + r'$', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring_contain(string, sample) : \n\treturn re.search(r'(?<=^)' + sample + r'(?=$)', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string matches a pattern using regex.\n\"\"\"\ndef check_pattern(string, pattern) : \n\treturn re.search(pattern, string)\n\n\n\n\"\"\"\nWrite a function to check if the given string is a valid email address using regex.\n\"\"\"\ndef check_email(string) : \n\treturn re.search(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string is a valid URL using regex.\n\"\"\"\ndef check_url(string) : \n\treturn re.search(r'^(?:http|ftp)s?://' # http:// or https://\n\t\t\t\t\tr'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n\t\t\t\t\tr'localhost|' #localhost...\n\t\t\t\t\tr'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n\t\t\t\t\tr'(?::\\d+)?' # optional port\n\t\t\t\t\tr'(?:/?|[/?]\\S+)$', string)\n\n\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.search(r'^' + sample, string)\n\n\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring_end(string, sample) : \n\treturn re.search(r'(?<=^)' + sample + r'$', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring_contain(string, sample) : \n\treturn re.search(r'(?<=^)' + sample + r'(?=$)', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string matches a pattern using regex.\n\"\"\"\ndef check_pattern(string, pattern) : \n\treturn re.search(pattern, string)\n\n\n\n\"\"\"\nWrite a function to check if the given string is a valid email address using regex.\n\"\"\"\ndef check_email(string) : \n\treturn re.search(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', string)\n\n\n\n\"\"\"\nWrite a function to check if the given string is a valid URL using regex.\n\"\"\"\ndef check_url(string) : "}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\treturn [x for x in l if x % 2 != 0]\n\n\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\treturn [x for x in l if x % 2 == 0]\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in l if x % 2 != 0]\n\n\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\treturn [x for x in l if x % 2 == 0]\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates("}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "<s> \"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\treturn [nums[i] for i in list_index]\n\ndef test_function(test_case):\n\tresult = access_elements(test_case[0], test_case[1])\n\tprint(result)\n\tif result == test_case[2]:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14, 16], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function([[1, 2, 3, 4, 5], [0, 2, 4], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14, 16], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18], [1, 3, 5]])\ntest_function([[1, 2, 3, 4, 5], [0, 2, "}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2: \n\t\treturn \"Equilateral\"\n\telif a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2: \n\t\treturn \"Scalene\"\n\telse: \n\t\treturn \"Isosceles\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\treturn [sum(i) for i in zip(*list1)]\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 2))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 0))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 3))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 4))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 5))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 6))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 7))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 8))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 9))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 10))\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [sum(i) for i in zip(*list1)]\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 2))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 0))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 3))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 4))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 5))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 6))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 7))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 8))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 9))\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<s> \"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\timport re\n\treturn int(re.findall(r'\\d+', input)[-1])\n\nprint(extract_max(\"abc123\"))\nprint(extract_max(\"abc123def\"))\nprint(extract_max(\"abc123def456\"))\nprint(extract_max(\"abc123def456ghi\"))\nprint(extract_max(\"abc123def456ghi789\"))\nprint(extract_max(\"abc123def456ghi789jkl\"))\nprint(extract_max(\"abc123def456ghi789jkl012\"))\nprint(extract_max(\"abc123def456ghi789jkl01234\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789012\"))\nprint(extract_max(\"abc123def456ghi789jkl012345678901234\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456789\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456789012\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789012345678901234\"))\nprint(extract_max(\"abc123def456ghi7", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_max(\"abc123\"))\nprint(extract_max(\"abc123def\"))\nprint(extract_max(\"abc123def456\"))\nprint(extract_max(\"abc123def456ghi\"))\nprint(extract_max(\"abc123def456ghi789\"))\nprint(extract_max(\"abc123def456ghi789jkl\"))\nprint(extract_max(\"abc123def456ghi789jkl012\"))\nprint(extract_max(\"abc123def456ghi789jkl01234\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789012\"))\nprint(extract_max(\"abc123def456ghi789jkl012345678901234\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456789\"))\nprint(extract_max(\"abc123def456ghi789jkl01234567890123456789012\"))\nprint(extract_max(\"abc123def456ghi789jkl0123456789012345678901234\"))\nprint(extract_max(\"abc123def456ghi7"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "<s> \"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\treturn list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items as a list.\n\"\"\"\ndef get_item(dict): \n\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\treturn list(dict.keys()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items and values as a list.\n\"\"\"\ndef get_item_value(dict): \n\treturn list(dict.items()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary keys and items as a list.\n\"\"\"\ndef get_key_item(dict): \n\treturn list(dict.keys()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary values and items as a list.\n\"\"\"\ndef get_value_item(dict): \n\treturn list(dict.values()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys, values and items as a list.\n\"\"\"\ndef get_key_value_item(dict): \n\treturn list(dict.keys()), list(dict.values()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary values, items and keys as a list.\n\"\"\"\ndef get_value_item_key(dict): \n\treturn list(dict.values()), list(dict.items()), list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary items, values and keys as a list.\n\"\"\"\ndef get_item_value_key(dict): \n\treturn list(dict.items()), list(dict.values()), list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary keys, items and values as a list.\n\"\"\"\ndef get_key_item_value(dict): \n\treturn list(dict.keys()), list(dict.items()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items, keys and", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items as a list.\n\"\"\"\ndef get_item(dict): \n\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\treturn list(dict.keys()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items and values as a list.\n\"\"\"\ndef get_item_value(dict): \n\treturn list(dict.items()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary keys and items as a list.\n\"\"\"\ndef get_key_item(dict): \n\treturn list(dict.keys()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary values and items as a list.\n\"\"\"\ndef get_value_item(dict): \n\treturn list(dict.values()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary keys, values and items as a list.\n\"\"\"\ndef get_key_value_item(dict): \n\treturn list(dict.keys()), list(dict.values()), list(dict.items())\n\n\"\"\"\nWrite a function to get dictionary values, items and keys as a list.\n\"\"\"\ndef get_value_item_key(dict): \n\treturn list(dict.values()), list(dict.items()), list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary items, values and keys as a list.\n\"\"\"\ndef get_item_value_key(dict): \n\treturn list(dict.items()), list(dict.values()), list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary keys, items and values as a list.\n\"\"\"\ndef get_key_item_value(dict): \n\treturn list(dict.keys()), list(dict.items()), list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary items, keys and"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)"}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "<s> \"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\tmax_sum = a[0] \n\tcurrent_sum = 0\n\tfor i in range(0,size): \n\t\tcurrent_sum = current_sum + a[i] \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\telif current_sum > max_sum: \n\t\t\tmax_sum = current_sum \n\treturn max_sum \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 237, "source": "MBPP:838", "prompt": "\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :  \n\t# code here \n\tcount = 0\n\tfor i in range(len(s1)):\n\t\tif s1[i] != s2[i]:\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\nprint(sort_tuple([('a', 1), ('b', 2), ('c', 3)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the second item of each tuple.\n\"\"\"\ndef sort_tuple_by_second(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\nprint(sort_tuple_by_second([('a', 1), ('b', 2), ('c', 3)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the third item of each tuple.\n\"\"\"\ndef sort_tuple_by_third(tup): \n\treturn sorted(tup, key=lambda x: x[2])\n\nprint(sort_tuple_by_third([('a', 1, 4), ('b', 2, 5), ('c', 3, 6)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fourth(tup): \n\treturn sorted(tup, key=lambda x: x[3])\n\nprint(sort_tuple_by_fourth([('a', 1, 4, 7), ('b', 2, 5, 8), ('c', 3, 6, 9)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the fifth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fifth(tup): \n\treturn sorted(tup, key=lambda x: x[4])\n\nprint(sort_tuple_by_fifth([('a', 1, 4, 7, 10), ('b', 2, 5, 8, 11), ('c', 3, 6, 9, 12)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the sixth item of each tuple.\n\"\"\"\ndef sort_tuple_by_sixth(tup): \n\treturn sorted(tup, key=lambda x: x[5", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(tup, key=lambda x: x[0])\n\nprint(sort_tuple([('a', 1), ('b', 2), ('c', 3)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the second item of each tuple.\n\"\"\"\ndef sort_tuple_by_second(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\nprint(sort_tuple_by_second([('a', 1), ('b', 2), ('c', 3)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the third item of each tuple.\n\"\"\"\ndef sort_tuple_by_third(tup): \n\treturn sorted(tup, key=lambda x: x[2])\n\nprint(sort_tuple_by_third([('a', 1, 4), ('b', 2, 5), ('c', 3, 6)]))\n\n\"\"\"\nWrite a function to sort the tuples alphabetically by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fourth(tup): \n\treturn sorted(tup, key=lambda x: x[3])\n"}
{"ID": 240, "source": "MBPP:841", "prompt": "\"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n): \n\tinv_count = 0\n\tfor i in range(0, n): \n\t\tfor j in range(0, n): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tinv_count += 1\n\treturn inv_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t# code here \n    # return kth element from array\n    # arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139,"}
{"ID": 244, "source": "MBPP:845", "prompt": "\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\n\"\"\"\ndef find_Digits(n): \n\t# Initialize result \n\tresult = 0\n\t\n\t# While n is greater than 0 \n\twhile n > 0: \n\t\t# Increment result \n\t\tresult += 1\n\t\t\n\t\t# Divide n by 10 \n\t\tn //= 10\n\t\n\t# Return result \n\treturn result \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<s> \"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to get the first element of a list.\n\"\"\"\ndef lfirst(xs):\n  return xs[0]\n\n\t\n\"\"\"\nWrite a python function to get the last element of a list.\n\"\"\"\ndef llast(xs):\n  return xs[-1]\n\n\t\n\"\"\"\nWrite a python function to get the length of a list.\n\"\"\"\ndef llength(xs):\n  return len(xs)\n\n\t\n\"\"\"\nWrite a python function to get the nth element of a list.\n\"\"\"\ndef lnth(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to first element of a list.\n\"\"\"\ndef lnthtofirst(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to first element of a list.\n\"\"\"\ndef lnthtofirst(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\n\"\"\"\nWrite a python function to get the first element of a list.\n\"\"\"\ndef lfirst(xs):\n  return xs[0]\n\n\t\n\"\"\"\nWrite a python function to get the last element of a list.\n\"\"\"\ndef llast(xs):\n  return xs[-1]\n\n\t\n\"\"\"\nWrite a python function to get the length of a list.\n\"\"\"\ndef llength(xs):\n  return len(xs)\n\n\t\n\"\"\"\nWrite a python function to get the nth element of a list.\n\"\"\"\ndef lnth(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to first element of a list.\n\"\"\"\ndef lnthtofirst(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to first element of a list.\n\"\"\"\ndef lnthtofirst(n, xs):\n  return xs[n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n\n\t\n\"\"\"\nWrite a python function to get the nth to last element of a list.\n\"\"\"\ndef lnthtolast(n, xs):\n  return xs[-n]\n"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(2, N): \n\t\tif N % i == 0: \n\t\t\tsum += i "}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\tif a+b>c and b+c>a and a+c>b:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif n % i != 0: \n\t\t\tcontinue\n\t\tif i % 2 != 0: \n\t\t\tsum += i \n\treturn sum \n\n\n\"\"\"\nWrite a python function to find sum of odd factors of a number."}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "<s> \"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\tif len(rawheap) == 0:\n\t\treturn []\n\telse:\n\t\theap = []\n\t\tfor i in range(len(rawheap)):\n\t\t\theap.append(rawheap[i])\n\t\tfor i in range(len(heap)-1,0,-1):\n\t\t\ttemp = heap[i]\n\t\t\theap[i] = heap[0]\n\t\t\theap[0] = temp\n\t\t\tfor j in range(1,i):\n\t\t\t\tif heap[j] > heap[j+1]:\n\t\t\t\t\ttemp = heap[j]\n\t\t\t\t\theap[j] = heap[j+1]\n\t\t\t\t\theap[j+1] = temp\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\t\ttemp = heap[j]\n\t\t\t\t\theap[j] = heap[j+1]\n\t\t\t\t\theap[j+1] = temp\n\t\treturn heap\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):\n\tif len(my_list) == 0:\n\t\treturn 0\n\telse:\n\t\treturn my_list[0] + my_list[-1]\n\n\"\"\"\nWrite a function which accepts a list of integers and returns the sum of the first and last elements of the list.\n\"\"\"\ndef first_last_sum(my_list):"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\treturn (x%2==0)\n\n\n\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\treturn (x%2!=0)\n\n\n\"\"\"\nWrite a python function to check for prime number of a given number.\n\"\"\"\ndef check_Prime(x): \n\tif x<=1: \n\t\treturn False\n\tfor i in range(2,x): \n\t\tif x%i==0: \n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check for palindrome of a given number.\n\"\"\"\ndef check_Palindrome(x): \n\treturn (str(x)==str(x)[::-1])\n\n\n\"\"\"\nWrite a python function to check for perfect square of a given number.\n\"\"\"\ndef check_Perfect_Square(x): \n\treturn (x**0.5).is_integer()\n\n\n\"\"\"\nWrite a python function to check for armstrong number of a given number.\n\"\"\"\ndef check_Armstrong_Number(x): \n\ttemp=x\n\tsum=0\n\twhile temp>0: \n\t\tsum+=temp%10**2\n\t\ttemp//=10\n\treturn sum==x\n\n\n\"\"\"\nWrite a python function to check for automorphic number of a given number.\n\"\"\"\ndef check_Automorphic_Number(x): \n\treturn (x**(1.0/len(str(x)))==x)\n\n\n\"\"\"\nWrite a python function to check for neon number of a given number.\n\"\"\"\ndef check_Neon_Number(x): \n\treturn (x==sum(int(i) for i in str(x)))\n\n\n\"\"\"\nWrite a python function to check for abramov number of a given number.\n\"\"\"\ndef check_Abramov_Number(x): \n\treturn (x==sum(int(i)**2 for i in str(x)))\n\n\n\"\"\"\nWrite a python function to check for amicable number of a given number.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef check_Perfect_Square(x): \n\treturn (x**0.5).is_integer()\n\n\n\"\"\"\nWrite a python function to check for armstrong number of a given number.\n\"\"\"\ndef check_Armstrong_Number(x): \n\ttemp=x\n\tsum=0\n\twhile temp>0: \n\t\tsum+=temp%10**2\n\t\ttemp//=10\n\treturn sum==x\n\n\n\"\"\"\nWrite a python function to check for automorphic number of a given number.\n\"\"\"\ndef check_Automorphic_Number(x): \n\treturn (x**(1.0/len(str(x)))==x)\n\n\n\"\"\"\nWrite a python function to check for neon number of a given number.\n\"\"\"\ndef check_Neon_Number(x): \n\treturn (x==sum(int(i) for i in str(x)))\n\n\n\"\"\"\nWrite a python function to check for abramov number of a given number.\n\"\"\"\ndef check_Abramov_Number(x): \n\treturn (x==sum(int(i)**2 for i in str(x)))\n\n\n\"\"\"\nWrite a python function to check for amicable number of a given number.\n\"\"\"\n"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: x, list1))\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [x for x in list1]\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.append(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and append.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.append(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and extend.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.extend(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and extend.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.extend(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and extend.\n\"\"\"\ndef listify_list(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [x for x in list1]\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.append(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and append.\n\"\"\"\ndef listify_list(list1):\n\tnew_list = []\n\tfor x in list1:\n\t\tnew_list.append(x)\n\treturn new_list\n\nlist1 = ['a', 'b', 'c']\nprint(listify_list(list1))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using for loop and extend.\n\"\"\""}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s> \"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\ndef count_list_square(input_list): \n\tcount = count_list(input_list)\n\treturn count * count\n\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24], [25,26,27]]))\nprint(count_list_square([[1,2,3],", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_list_square([[1,2,3], [4,5,6], [7,8,9]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24]]))\nprint(count_list_square([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24], [25,26,27]]))\nprint(count_list_square([[1,2,3],"}
{"ID": 258, "source": "MBPP:859", "prompt": "\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[:i+1])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[:i+1])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\"\nWrite a function to generate all sublists of a given list.\n\"\"\"\ndef sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)):\n\t\tsub_lists.append(my_list[i:])\n\treturn sub_lists\n\nprint(sub_lists([1,2,3]))\n\n\"\"\""}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\timport re\n\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\nprint(check_alphanumeric(\"abc\"))\nprint(check_alphanumeric(\"abc123\"))\nprint(check_alphanumeric(\"abc123$\"))\nprint(check_alphanumeric(\"abc123$%\"))\nprint(check_alphanumeric(\"abc123$%^\"))\nprint(check_alphanumeric(\"abc123$%^&*\"))\nprint(check_alphanumeric(\"abc123$%^&*()\"))\nprint(check_alphanumeric(\"abc123$%^&*()_\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,.\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. : \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@ \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@#\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@# \"))\nprint(check_alphanumeric", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_alphanumeric(\"abc\"))\nprint(check_alphanumeric(\"abc123\"))\nprint(check_alphanumeric(\"abc123$\"))\nprint(check_alphanumeric(\"abc123$%\"))\nprint(check_alphanumeric(\"abc123$%^\"))\nprint(check_alphanumeric(\"abc123$%^&*\"))\nprint(check_alphanumeric(\"abc123$%^&*()\"))\nprint(check_alphanumeric(\"abc123$%^&*()_\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,.\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. : \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@ \"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@#\"))\nprint(check_alphanumeric(\"abc123$%^&*()_-=+/,. :@# \"))\nprint(check_alphanumeric"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\treturn [text for text in texts if sorted(text) == sorted(str)]\n\nprint(anagram_lambda([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using filter function.\n\"\"\"\ndef anagram_filter(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str),texts))\n\nprint(anagram_filter([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using list comprehension.\n\"\"\"\ndef anagram_list_comp(texts,str):\n\treturn [text for text in texts if sorted(text) == sorted(str)]\n\nprint(anagram_list_comp([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using map function.\n\"\"\"\ndef anagram_map(texts,str):\n\treturn list(map(lambda x: sorted(x) == sorted(str),texts))\n\nprint(anagram_map([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using set function.\n\"\"\"\ndef anagram_set(texts,str):\n\treturn list(set(texts) & set(str))\n\nprint(anagram_set([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using reduce function.\n\"\"\"\ndef anagram_reduce(texts,str):\n\treturn list(reduce(lambda x,y: x & y, [sorted(text) == sorted(str) for text in texts]))\n\nprint(anagram_reduce([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using itertools.\n\"\"\"\nfrom itertools import product\n\ndef anagram_itertools(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [text for text in texts if sorted(text) == sorted(str)]\n\nprint(anagram_lambda([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using filter function.\n\"\"\"\ndef anagram_filter(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str),texts))\n\nprint(anagram_filter([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using list comprehension.\n\"\"\"\ndef anagram_list_comp(texts,str):\n\treturn [text for text in texts if sorted(text) == sorted(str)]\n\nprint(anagram_list_comp([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using map function.\n\"\"\"\ndef anagram_map(texts,str):\n\treturn list(map(lambda x: sorted(x) == sorted(str),texts))\n\nprint(anagram_map([\"listen\",\"silent\",\"enlist\"],\"listen\"))\n\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using set function.\n\"\"\"\ndef anagram_set(texts,str):"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\timport re\n\timport collections\n\ttext = re.sub(r'[^\\w\\s]','',text.lower())\n\twords = text.split()\n\tcounter = collections.Counter(words)\n\treturn counter.most_common(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 263, "source": "MBPP:864", "prompt": "\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\t", "predict": "<s> \"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_2(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_3(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_4(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_5(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_6(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_7(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_8(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_9(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_10(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_11(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_12(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_13(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_14(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_15(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_16(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_2(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_3(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_4(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_5(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_6(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_7(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_8(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_9(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_10(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_11(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_12(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_13(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_14(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_15(texts):\n\treturn list(filter(lambda x: x == x[::-1], texts))\n\ndef palindrome_lambda_16("}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\treturn len(a.split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.strip().split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n   ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(a.split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.strip().split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1])\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.rsplit(None, 1)[-1].strip())\n\n\ndef length_Of_Last_Word(a):\n    return len(a.split()[-1].strip())\n\n\ndef length_Of_Last_Word(a):"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\tfor i in range(len(list1)):\n\t\tif list1[i][0] < leftrange or list1[i][1] > rigthrange:\n\t\t\tlist1.pop(i)\n\treturn list1\n\nlist1 = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60], [61, 62], [63, 64], [65, 66], [67, 68], [69, 70], [71, 72], [73, 74], [75, 76], [77, 78], [79, 80], [81, 82], [83, 84], [85, 86], [87, 88], [89, 90], [91, 92], [93, 94], [95, 96], [97, 98], [99, 100]]\nprint(remove_list_range(list1, 10, 20))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using map function.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(map(lambda x: x if x>0 else 0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using reduce function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn reduce(lambda x,y: x+y, filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using sum function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using sum function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn sum(map(lambda x: x if x>0 else 0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using sum function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn reduce(lambda x,y: x+y, filter(lambda x: x>0, nums))\n\nprint(sum_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using map function.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(map(lambda x: x if x>0 else 0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using reduce function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn reduce(lambda x,y: x+y, filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using sum function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x>0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using sum function.\n\"\"\"\nfrom functools import reduce\ndef sum_positivenum(nums):\n\treturn sum(map(lambda x: x if x>0 else 0, nums))\n\nprint(sum_positivenum([1,2,3,4,5,6,7,8,9]))\n\n\"\"\""}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\tif len(list1) > len(list2):\n\t\treturn False\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i],list):\n\t\t\tif not check_subset(list1[i],list2[i]):\n\t\t\t\treturn False\n\t\telse:\n\t\t\tif list1[i] not in list2[i]:\n\t\t\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\tif len(str1) == 0:\n\t\treturn False\n\tif len(str2) == 0:\n\t\treturn False\n\tif len(str1) < len(str2):\n\t\treturn False\n\tif len(str2) == 1:\n\t\treturn str2 in str1\n\tfor i in range(len(str1) - len(str2) + 1):\n\t\tif str2 == str1[i:i+len(str2)]:\n\t\t\treturn True\n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\tmin_diff = float('inf')\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tdiff = abs(test_list[j][1] - test_list[i][1])\n\t\t\tif diff < min_diff:\n\t\t\t\tmin_diff = diff\n\treturn min_diff\n\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 30)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27),", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 30)]))\nprint(min_difference([(1, 3), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27),"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\treturn sorted(str)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order.\n\"\"\"\ndef sort_Strings(str_list) : \n\treturn sorted(str_list)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case.\n\"\"\"\ndef sort_Strings_Ignoring_Case(str_list) : \n\treturn sorted(str_list, key=str.lower)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order.\n\"\"\"\ndef sort_Strings(str_list) : \n\treturn sorted(str_list)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case.\n\"\"\"\ndef sort_Strings_Ignoring_Case(str_list) : \n\treturn sorted(str_list, key=str.lower)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical order ignoring the case and also sort the strings in reverse order.\n\"\"\"\ndef sort_Strings_Ignoring_Case_Reverse(str_list) : \n\treturn sorted(str_list, key=str.lower, reverse=True)\n\n\n\"\"\"\nWrite a python function to sort the given list of strings in alphabetical"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\treturn len(test_tuple) == K\n\nprint(check_tuples((1, 2, 3, 4, 5), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_tuples((1, 2, 3, 4, 5), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), 5))\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a.*b\"\n\treturn re.match(pattern, text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 280, "source": "MBPP:881", "prompt": "\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in range(len(list1)):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd(list1))\n\n\"\"\"\nWrite a function to find the sum of first n even and odd numbers of a given list.\n\"\"\"\ndef sum_even_odd_n(list1, n):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd_n(list1, 5))\n\n\"\"\"\nWrite a function to find the sum of first n even and odd numbers of a given list.\n\"\"\"\ndef sum_even_odd_n(list1, n):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd_n(list1, 5))\n\n\"\"\"\nWrite a function to find the sum of first n even and odd numbers of a given list.\n\"\"\"\ndef sum_even_odd_n(list1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(list1)):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd(list1))\n\n\"\"\"\nWrite a function to find the sum of first n even and odd numbers of a given list.\n\"\"\"\ndef sum_even_odd_n(list1, n):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd_n(list1, 5))\n\n\"\"\"\nWrite a function to find the sum of first n even and odd numbers of a given list.\n\"\"\"\ndef sum_even_odd_n(list1, n):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tsum_even += list1[i]\n\t\telse:\n\t\t\tsum_odd += list1[i]\n\treturn sum_even, sum_odd\n"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\treturn 2*b+2*h\n\nprint(parallelogram_perimeter(5,6))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(5,6))\n\n\"\"\"\nWrite a function to calculate perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\nprint(triangle_perimeter(3,4,5))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\ts=(a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(3,4,5))\n\n\"\"\"\nWrite a function to calculate perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,w):\n\treturn 2*(l+w)\n\nprint(rectangle_perimeter(5,6))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l*w\n\nprint(rectangle_area(5,6))\n\n\"\"\"\nWrite a function to calculate perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2*3.14*r\n\nprint(circle_perimeter(5))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3)*3.14*r**3\n\nprint(sphere_volume(5))\n\n\"\"\"\nWrite a function to calculate surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4*3.14*r**2\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*b+2*h\n\nprint(parallelogram_perimeter(5,6))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(5,6))\n\n\"\"\"\nWrite a function to calculate perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\nprint(triangle_perimeter(3,4,5))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(a,b,c):\n\ts=(a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(3,4,5))\n\n\"\"\"\nWrite a function to calculate perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,w):\n\treturn 2*(l+w)\n\nprint(rectangle_perimeter(5,6))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l*w\n\nprint(rectangle_area(5,6))\n\n\"\"\"\nWrite a function to calculate perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2*3.14*r\n\nprint(circle_perimeter(5))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3)*3.14*r**3\n\nprint(sphere_volume(5))\n\n\"\"\"\nWrite a function to calculate surface area of a sphere.\n\"\"\""}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using map function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(map(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using map function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(map(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,50],6,9))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([12,15,20,24,30,36,40,45,"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn all(l<=x<=r for x in bin(n)[2:])\n\ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_3(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_4(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_5(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_6(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_7(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_8(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_9(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_10(n,l,r):\n\treturn all(bin(n)[2:].count(str(x))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn all(l<=x<=r for x in bin(n)[2:])\n\ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_3(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_4(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_5(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_6(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_7(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_8(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_9(n,l,r):\n\treturn all(bin(n)[2:].count(str(x)) for x in range(l,r+1))\n\ndef all_Bits_Set_In_The_Given_Range_10(n,l,r):"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\tif len(str1) != len(str2):\n\t\treturn False\n\t\n\tif len(str1) == 0:\n\t\treturn True\n\t\n\tif str1 == str2:\n\t\treturn True\n\t\n\tif str1[0] == str2[0]:\n\t\treturn is_Isomorphic(str1[1:],str2[1:])\n\t\n\tif is_Isomorphic(str1[1:],str2):\n\t\treturn True\n\t\n\tif is_Isomorphic(str1,str2[1:]):\n\t\treturn True\n\t\n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):\n\treturn len(str(A)) == len(str(B))\n\ndef same_Length(A,B):"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\treturn ' '.join(text.split())\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_2(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_3(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_4(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_5(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_6(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_7(str1, str2):\n\treturn all(str2.find(x) != -1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to check if a string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_2(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_3(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_4(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_5(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence_6(str1, str2):\n\treturn all(str2.find(x) != -1 for x in str1)\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\""}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [i[-1] for i in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\ttry:\n\t\treturn tuple(float(test_str))\n\texcept ValueError:\n\t\treturn (None,)\n\nprint(float_to_tuple(\"1.23\"))\nprint(float_to_tuple(\"1.23.45\"))\nprint(float_to_tuple(\"1.23.45.67\"))\nprint(float_to_tuple(\"1.23.45.67.89\"))\nprint(float_to_tuple(\"1.23.45.67.89.10\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17.18\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17.18.19\"))\nprint(float_to_tuple(\"1.23.", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(float_to_tuple(\"1.23\"))\nprint(float_to_tuple(\"1.23.45\"))\nprint(float_to_tuple(\"1.23.45.67\"))\nprint(float_to_tuple(\"1.23.45.67.89\"))\nprint(float_to_tuple(\"1.23.45.67.89.10\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17.18\"))\nprint(float_to_tuple(\"1.23.45.67.89.10.11.12.13.14.15.16.17.18.19\"))\nprint(float_to_tuple(\"1.23."}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_2(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_3(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_4(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_5(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_2(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_3(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_4(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum, max_sum + A[i], A[i])\n\treturn max_sum\n\ndef max_sum_subseq_5(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tmax_sum = A[0]"}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\treturn word in sentence\n\n\n\n\"\"\"\nWrite a python function to check whether the word is present"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<s> \"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\tif string.startswith('1'):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('8", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('89012'))\nprint(match_num('90123'))\nprint(match_num('01234'))\nprint(match_num('12345'))\nprint(match_num('23456'))\nprint(match_num('34567'))\nprint(match_num('45678'))\nprint(match_num('56789'))\nprint(match_num('67890'))\nprint(match_num('78901'))\nprint(match_num('8"}
{"ID": 301, "source": "MBPP:902", "prompt": "\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\t", "predict": "<s> \"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\n\"\"\"\ndef add_dict(d1,d2):\n\tfor key in d1:\n\t\tif key in d2:\n\t\t\td1[key] += d2[key]\n\treturn d1\n\nprint(add_dict({'a':1,'b':2},{'a':3,'c':4}))\n\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(str_list):\n\tif len(str_list) == 0:\n\t\treturn ''\n\tmin_len = min(len(s) for s in str_list)\n\tfor i in range(min_len):\n\t\tc = str_list[0][i]\n\t\tfor s in str_list:\n\t\t\tif s[i] != c:\n\t\t\t\treturn str_list[0][:i]\n\treturn str_list[0][:min_len]\n\nprint(longest_common_prefix([]))\nprint(longest_common_prefix(['a']))\nprint(longest_common_prefix(['a','a']))\nprint(longest_common_prefix(['a','ab']))\nprint(longest_common_prefix(['a','ab','abc']))\nprint(longest_common_prefix(['a','ab','abc','abcd']))\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(str_list):\n\tif len(str_list) == 0:\n\t\treturn ''\n\tmin_len = min(len(s) for s in str_list)\n\tfor i in range(min_len):\n\t\tc = str_list[0][-i-1]\n\t\tfor s in str_list:\n\t\t\tif s[-i-1] != c:\n\t\t\t\treturn str_list[0][-i-1:]\n\treturn str_list[0][-min_len:]\n\nprint(longest_common_suffix([]))\nprint(longest_common_suffix(['a']))\nprint(longest_common_suffix(['a','a']))\nprint(longest_common_suffix(['a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\n\"\"\"\ndef longest_common_prefix(str_list):\n\tif len(str_list) == 0:\n\t\treturn ''\n\tmin_len = min(len(s) for s in str_list)\n\tfor i in range(min_len):\n\t\tc = str_list[0][i]\n\t\tfor s in str_list:\n\t\t\tif s[i] != c:\n\t\t\t\treturn str_list[0][:i]\n\treturn str_list[0][:min_len]\n\nprint(longest_common_prefix([]))\nprint(longest_common_prefix(['a']))\nprint(longest_common_prefix(['a','a']))\nprint(longest_common_prefix(['a','ab']))\nprint(longest_common_prefix(['a','ab','abc']))\nprint(longest_common_prefix(['a','ab','abc','abcd']))\n\n\"\"\"\nWrite a function to find the longest common suffix string amongst an array of strings.\n\"\"\"\ndef longest_common_suffix(str_list):\n\tif len(str_list) == 0:\n\t\treturn ''\n\tmin_len = min(len(s) for s in str_list)\n\tfor i in range(min_len):\n\t\tc = str_list[0][-i-1]\n\t\tfor s in str_list:\n\t\t\tif s[-i-1] != c:\n\t\t\t\treturn str_list[0][-i-1:]"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\treturn sum([(i**2) for i in range(n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): "}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\timport re\n\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\tmatch = re.search(pattern, url)\n\tif match:\n\t\treturn match.groups()\n\telse:\n\t\treturn None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 306, "source": "MBPP:907", "prompt": "\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num(5))\n\n\"\"\"\nWrite a function to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n\tlucky_list = []\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tlucky_list.append(i)\n\treturn lucky_list\n\nprint(lucky_num"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\tfor i in range(n): \n\t\tif arr[i] == i: \n\t\t\treturn i \n\treturn -1\n\narr = [1, 3, 6, 4, 1, 2] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):\n    if k > len(arr):\n        return -1\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += arr[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(max_sum_k_consecutive(arr, k))\n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):\n    if k > len(arr):\n        return -1\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += arr[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(max_sum_k_consecutive(arr, k))\n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):\n    if k > len(arr):\n        return -1\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(k):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = len(arr) \nprint(find_fixed_point(arr, n)) \n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):\n    if k > len(arr):\n        return -1\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += arr[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(max_sum_k_consecutive(arr, k))\n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):\n    if k > len(arr):\n        return -1\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += arr[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(max_sum_k_consecutive(arr, k))\n\n\"\"\"\nWrite a function to find the maximum sum of k consecutive elements in an array.\n\"\"\"\ndef max_sum_k_consecutive(arr, k):"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tif num == 0:\n\t\treturn 0\n\tif num < 0:\n\t\traise ValueError(\"Negative numbers are not allowed\")\n\tif num == 1:\n\t\treturn 1\n\tif num == 2:\n\t\treturn 2\n\tif num == 3:\n\t\treturn 3\n\tif num == 4:\n\t\treturn 4\n\tif num == 5:\n\t\treturn 5\n\tif num == 6:\n\t\treturn 6\n\tif num == 7:\n\t\treturn 7\n\tif num == 8:\n\t\treturn 8\n\tif num == 9:\n\t\treturn 9\n\tif num == 10:\n\t\treturn 10\n\tif num == 11:\n\t\treturn 11\n\tif num == 12:\n\t\treturn 12\n\tif num == 13:\n\t\treturn 13\n\tif num == 14:\n\t\treturn 14\n\tif num == 15:\n\t\treturn 15\n\tif num == 16:\n\t\treturn 16\n\tif num == 17:\n\t\treturn 17\n\tif num == 18:\n\t\treturn 18\n\tif num == 19:\n\t\treturn 19\n\tif num == 20:\n\t\treturn 20\n\tif num == 21:\n\t\treturn 21\n\tif num == 22:\n\t\treturn 22\n\tif num == 23:\n\t\treturn 23\n\tif num == 24:\n\t\treturn 24\n\tif num == 25:\n\t\treturn 25\n\tif num == 26:\n\t\treturn 26\n\tif num == 27:\n\t\treturn 27\n\tif num == 28:\n\t\treturn 28\n\tif num == 29:\n\t\treturn 29\n\tif num == 30:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif num == 1:\n\t\treturn 1\n\tif num == 2:\n\t\treturn 2\n\tif num == 3:\n\t\treturn 3\n\tif num == 4:\n\t\treturn 4\n\tif num == 5:\n\t\treturn 5\n\tif num == 6:\n\t\treturn 6\n\tif num == 7:\n\t\treturn 7\n\tif num == 8:\n\t\treturn 8\n\tif num == 9:\n\t\treturn 9\n\tif num == 10:\n\t\treturn 10\n\tif num == 11:\n\t\treturn 11\n\tif num == 12:\n\t\treturn 12\n\tif num == 13:\n\t\treturn 13\n\tif num == 14:\n\t\treturn 14\n\tif num == 15:\n\t\treturn 15\n\tif num == 16:\n\t\treturn 16\n\tif num == 17:\n\t\treturn 17\n\tif num == 18:\n\t\treturn 18\n\tif num == 19:\n\t\treturn 19\n\tif num == 20:\n\t\treturn 20\n\tif num == 21:\n\t\treturn 21\n\tif num == 22:\n\t\treturn 22\n\tif num == 23:\n\t\treturn 23\n\tif num == 24:\n\t\treturn 24\n\tif num == 25:\n\t\treturn 25\n\tif num == 26:\n\t\treturn 26\n\tif num == 27:\n\t\treturn 27\n\tif num == 28:\n\t\treturn 28\n\tif num == 29:\n\t\treturn 29"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<s> \"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\tif m < 1 or m > 12:\n\t\treturn False\n\tif d < 1 or d > 31:\n\t\treturn False\n\tif y < 0:\n\t\treturn False\n\tif m == 2 and d > 28:\n\t\treturn False\n\tif m in [4, 6, 9, 11] and d > 30:\n\t\treturn False\n\treturn True\n\nprint(check_date(1, 1, 2018))\nprint(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2017))\nprint(check_date(2, 29, 2019))\nprint(check_date(2, 29, 2020))\nprint(check_date(2, 29, 2021))\nprint(check_date(2, 29, 2022))\nprint(check_date(2, 29, 2023))\nprint(check_date(2, 29, 2024))\nprint(check_date(2, 29, 2025))\nprint(check_date(2, 29, 2026))\nprint(check_date(2, 29, 2027))\nprint(check_date(2, 29, 2028))\nprint(check_date(2, 29, 2029))\nprint(check_date(2, 29, 2030))\nprint(check_date(2, 29, 2031))\nprint(check_date(2, 29, 2032))\nprint(check_date(2, 29, 2033))\nprint(check_date(2, 29, 2034))\nprint(check_date(2, 29, 2035))\nprint(check_date(2, 29, 2036))\nprint(check_date(2, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_date(1, 1, 2018))\nprint(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2017))\nprint(check_date(2, 29, 2019))\nprint(check_date(2, 29, 2020))\nprint(check_date(2, 29, 2021))\nprint(check_date(2, 29, 2022))\nprint(check_date(2, 29, 2023))\nprint(check_date(2, 29, 2024))\nprint(check_date(2, 29, 2025))\nprint(check_date(2, 29, 2026))\nprint(check_date(2, 29, 2027))\nprint(check_date(2, 29, 2028))\nprint(check_date(2, 29, 2029))\nprint(check_date(2, 29, 2030))\nprint(check_date(2, 29, 2031))\nprint(check_date(2, 29, 2032))\nprint(check_date(2, 29, 2033))\nprint(check_date(2, 29, 2034))\nprint(check_date(2, 29, 2035))\nprint(check_date(2, 29, 2036))\nprint(check_date(2, 2"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t# Write your code here\n\tif len(nums) < 3:\n\t\treturn -1\n\t\n\t# Sort the array in ascending order\n\tnums.sort()\n\t\n\t# Return the product of the last three elements\n\treturn nums[-1] * nums[-2] * nums[-3]\n\n# Test cases\nprint(maximum_product([1, 2, 3, 4]))\nprint(maximum_product([1, 2, 3, 4, 5]))\nprint(maximum_product([1, 2, 3, 4, 5, 6]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(maximum_product([1, 2, 3, 4]))\nprint(maximum_product([1, 2, 3, 4, 5]))\nprint(maximum_product([1, 2, 3, 4, 5, 6]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, "}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<s> \"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\tif len(s) < 2:\n\t\treturn False\n\tfor i in range(1, len(s)):\n\t\tif s[i] == s[i-1]:\n\t\t\treturn False\n\treturn True\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s[i] != s[i-1] for i in range(1, len(s)))\n\n\ndef is_Two_Alter(s):\n\treturn len(s) < 2 or all(s["}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn positive_nums + negative_nums\n\n\ndef rearrange_numbs_2(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums) + sorted(negative_nums)\n\n\ndef rearrange_numbs_3(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums)\n\n\ndef rearrange_numbs_4(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums)\n\n\ndef rearrange_numbs_5(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums, reverse=True)\n\n\ndef rearrange_numbs_6(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums, reverse=True)\n\n\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn positive_nums + negative_nums\n\n\ndef rearrange_numbs_2(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums) + sorted(negative_nums)\n\n\ndef rearrange_numbs_3(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums)\n\n\ndef rearrange_numbs_4(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums)\n\n\ndef rearrange_numbs_5(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums, reverse=True)\n\n\ndef rearrange_numbs_6(array_nums):\n\tpositive_nums = list(filter(lambda x: x > 0, array_nums))\n\tnegative_nums = list(filter(lambda x: x < 0, array_nums))\n\treturn sorted(positive_nums, reverse=True) + sorted(negative_nums, reverse=True)\n\n\ndef"}
{"ID": 315, "source": "MBPP:916", "prompt": "\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\t", "predict": "<s> \"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \n\tA.sort() \n\tfor i in range(0, arr_size - 2): \n\t\tleft = i + 1\n\t\tright = arr_size - 1\n\t\twhile left < right: \n\t\t\tcurr_sum = A[i] + A[left] + A[right] \n\t\t\tif curr_sum == sum: \n\t\t\t\treturn True\n\t\t\telif curr_sum < sum: \n\t\t\t\tleft += 1\n\t\t\telse: \n\t\t\t\tright -= 1\n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [text[i:j] for i, c in enumerate(text) if c.isupper() for j in range(i + 1, len(text) + 1) if text[j - 1].islower()]\n\n\nif __name__ == \"__main__\":\n\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WOR", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(text_uppercase_lowercase(\"Hello World\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WORLD\"))\n\tprint(text_uppercase_lowercase(\"Hello WOR"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "<s> \"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\tif len(arr) == 0:\n\t\treturn 0\n\tif len(arr) == 1:\n\t\treturn arr[0]\n\tif len(arr) == 2:\n\t\treturn arr[0] * arr[1]\n\tif len(arr) == 3:\n\t\treturn max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n\tif len(arr) == 4:\n\t\treturn max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])\n\tif len(arr) == 5:\n\t\treturn max(arr[0] * arr[1] * arr[2] * arr[3], arr[0] * arr[1] * arr[2] * arr[4], arr[0] * arr[1] * arr[3] * arr[4], arr[0] * arr[2] * arr[3] * arr[4], arr[1] * arr[2] * arr[3] * arr[4])\n\tif len(arr) == 6:\n\t\treturn max(arr[0] * arr[1] * arr[2] * arr[3] * arr[4], arr[0] * arr[1] * arr[2] * arr[3] * arr[5], arr[0] * arr[1] * arr[2] * arr[4] * arr[5], arr[0] * arr[1] * arr[3] * arr[4] * arr[5], arr[0] * arr[2] * arr[3] * arr[4] * arr[5], arr[1] * arr[2] * arr[3] * arr[4] * arr[5])\n\tif len(arr) == 7:\n\t\treturn max(arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5], arr[0] * arr[1] * arr[2] * arr[3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(arr) == 0:\n\t\treturn 0\n\tif len(arr) == 1:\n\t\treturn arr[0]\n\tif len(arr) == 2:\n\t\treturn arr[0] * arr[1]\n\tif len(arr) == 3:\n\t\treturn max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n\tif len(arr) == 4:\n\t\treturn max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])"}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\treturn x if x > y else y\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\treturn max( x, y, z )\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, w ):\n\treturn max( x, y, z, w )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, w, v ):\n\treturn max( x, y, z, w, v )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, w, v, u ):\n\treturn max( x, y, z, w, v, u )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, w, v, u, t ):\n\treturn max( x, y, z, w, v, u, t )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, w, v, u, t, s ):\n\treturn max( x, y, z, w, v, u, t, s )\n\n\"\"\"\nWrite a function to find maximum of nine numbers.\n\"\"\"\ndef max_of_nine( x, y, z, w, v, u, t, s, r ):\n\treturn max( x, y, z, w, v, u, t, s, r )\n\n\"\"\"\nWrite a function to find maximum of ten numbers.\n\"\"\"\ndef max_of_ten( x, y, z, w, v, u, t, s, r, q ):\n\treturn max( x, y, z, w, v, u, t, s, r, q )\n\n\"\"\"\nWrite a function to find maximum of eleven numbers.\n\"\"\"\ndef max_of_eleven( x, y, z, w, v,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn x if x > y else y\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\treturn max( x, y, z )\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, w ):\n\treturn max( x, y, z, w )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, w, v ):\n\treturn max( x, y, z, w, v )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, w, v, u ):\n\treturn max( x, y, z, w, v, u )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, w, v, u, t ):\n\treturn max( x, y, z, w, v, u, t )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, w, v, u, t, s ):\n\treturn max( x, y, z, w, v, u, t, s )\n\n\"\"\"\nWrite a function to find maximum of nine numbers.\n\"\"\"\ndef max_of_nine( x, y, z, w, v, u, t, s, r ):\n\treturn max( x, y, z, w, v, u, t, s, r )\n\n\"\"\"\nWrite a function to find maximum of ten numbers.\n\"\"\"\ndef max_of_ten( x, y, z, w, v, u, t, s, r, q ):\n\treturn max( x, y, z, w, v, u, t, s, r, q )\n\n\"\"\"\nWrite a function to find maximum of eleven numbers.\n\"\"\"\ndef max_of_eleven( x, y, z, w, v,"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<s> \"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\"\"\"\n\t:param n: the number of the rencontres number\n\t:param m: the number of the rencontres number\n\t:return: the n-th rencontres number\n\t\"\"\"\n\tif n > m:\n\t\treturn -1\n\tif n == 1:\n\t\treturn 1\n\tif n == m:\n\t\treturn m\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 5\n\tif n == 4:\n\t\treturn 6\n\tif n == 5:\n\t\treturn 10\n\tif n == 6:\n\t\treturn 11\n\tif n == 7:\n\t\treturn 18\n\tif n == 8:\n\t\treturn 19\n\tif n == 9:\n\t\treturn 34\n\tif n == 10:\n\t\treturn 35\n\tif n == 11:\n\t\treturn 66\n\tif n == 12:\n\t\treturn 67\n\tif n == 13:\n\t\treturn 130\n\tif n == 14:\n\t\treturn 131\n\tif n == 15:\n\t\treturn 262\n\tif n == 16:\n\t\treturn 263\n\tif n == 17:\n\t\treturn 528\n\tif n == 18:\n\t\treturn 529\n\tif n == 19:\n\t\treturn 1054\n\tif n == 20:\n\t\treturn 1055\n\tif n == 21:\n\t\treturn 2110\n\tif n == 22:\n\t\treturn 2111\n\tif n == 23:\n\t\treturn 4226\n\tif n == 24:\n\t\treturn 4227\n\tif n == 25:\n\t\treturn 8452\n\tif n == 26:\n\t\treturn 8453\n\tif n == 27:\n\t\treturn 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n > m:\n\t\treturn -1\n\tif n == 1:\n\t\treturn 1\n\tif n == m:\n\t\treturn m\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 5\n\tif n == 4:\n\t\treturn 6\n\tif n == 5:\n\t\treturn 10\n\tif n == 6:\n\t\treturn 11\n\tif n == 7:\n\t\treturn 18\n\tif n == 8:\n\t\treturn 19\n\tif n == 9:\n\t\treturn 34\n\tif n == 10:\n\t\treturn 35\n\tif n == 11:\n\t\treturn 66\n\tif n == 12:\n\t\treturn 67\n\tif n == 13:\n\t\treturn 130\n\tif n == 14:\n\t\treturn 131\n\tif n == 15:\n\t\treturn 262\n\tif n == 16:\n\t\treturn 263\n\tif n == 17:\n\t\treturn 528\n\tif n == 18:\n\t\treturn 529\n\tif n == 19:\n\t\treturn 1054\n\tif n == 20:\n\t\treturn 1055\n\tif n == 21:\n\t\treturn 2110\n\tif n == 22:\n\t\treturn 2111\n\tif n == 23:\n\t\treturn 4226\n\tif n == 24:\n\t\treturn 4227\n\tif n == 25:\n\t\treturn 8452\n\tif n == 26:\n\t\treturn 8453\n\tif n == 27:\n\t\treturn 1"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\tself.data = data \n\tself.left = None \n\tself.right = None\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        return max(height(root.left), height(root.right)) + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\tpattern = r\"a[b]*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\treturn list(set(l))\n\ndef remove_duplic_set(l):\n\treturn list(set(l))\n\ndef remove_duplic_dict(l):\n\treturn list(set(l))\n\ndef remove_duplic_list_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_set_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_dict_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_list_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_set_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_dict_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_list_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_set_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_dict_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_list_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_set_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_dict_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_list_sort_key_reverse_sort(l):\n\treturn sorted(sorted(list(set(l)), key=len, reverse=True), key=len)\n\ndef remove_duplic_set_sort_key_reverse_sort(l):\n\treturn sorted(sorted(list(set(l)), key=len, reverse=True), key=len)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(set(l))\n\ndef remove_duplic_set(l):\n\treturn list(set(l))\n\ndef remove_duplic_dict(l):\n\treturn list(set(l))\n\ndef remove_duplic_list_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_set_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_dict_sort(l):\n\treturn sorted(list(set(l)))\n\ndef remove_duplic_list_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_set_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_dict_sort_reverse(l):\n\treturn sorted(list(set(l)), reverse=True)\n\ndef remove_duplic_list_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_set_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_dict_sort_key(l):\n\treturn sorted(list(set(l)), key=len)\n\ndef remove_duplic_list_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_set_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_dict_sort_key_reverse(l):\n\treturn sorted(list(set(l)), key=len, reverse=True)\n\ndef remove_duplic_list_sort_key_reverse_sort(l):\n\treturn sorted(sorted(list(set(l)), key=len, reverse=True), key=len)\n\ndef remove_duplic_set_sort_key_reverse_sort(l):"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):\n\ts1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n\treturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef camel_to_snake(text):"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num(n, m): \n\tif n == 0: \n\t\treturn 1\n\treturn dealnnoy_num(n-1, m-1) * m \n\n\ndef dealnnoy_num"}
{"ID": 337, "source": "MBPP:938", "prompt": "\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\t", "predict": "<s> \"\"\"\nWrite a function to find three closest elements from three sorted arrays.\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \n\tif abs(A[p] - B[q] - C[r]) < abs(A[p] - B[q+1] - C[r]): \n\t\treturn A[p], B[q], C[r] \n\telif abs(A[p+1] - B[q] - C[r]) < abs(A[p] - B[q+1] - C[r]): \n\t\treturn A[p+1], B[q], C[r] \n\telse: \n\t\treturn A[p], B[q+1], C[r] \n\n\ndef three_closest(A, B, C): \n\tp, q, r = 0, 0, 0\n\tresult = [] \n\twhile p < len(A) and q < len(B) and r < len(C): \n\t\tif A[p] < B[q] and A[p] < C[r]: \n\t\t\tresult.append(A[p]) \n\t\t\tp += 1\n\t\telif B[q] < A[p] and B[q] < C[r]: \n\t\t\tresult.append(B[q]) \n\t\t\tq += 1\n\t\telse: \n\t\t\tresult.append(C[r]) \n\t\t\tr += 1\n\treturn result \n\n\nA = [1, 2, 3, 4, 5] \nB = [1, 2, 3, 4, 6] \nC = [1, 2, 3, 4, 7] \nprint(three_closest(A, B, C)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\treturn sorted(models, key=lambda x: x['name'])\n\nmodels = [\n\t{'name': 'BMW', 'year': 2018},\n\t{'name': 'Audi', 'year': 2018},\n\t{'name': 'BMW', 'year': 2017},\n\t{'name': 'Audi', 'year': 2017},\n\t{'name': 'BMW', 'year': 2016},\n\t{'name': 'Audi', 'year': 2016},\n\t{'name': 'BMW', 'year': 2015},\n\t{'name': 'Audi', 'year': 2015},\n\t{'name': 'BMW', 'year': 2014},\n\t{'name': 'Audi', 'year': 2014},\n\t{'name': 'BMW', 'year': 2013},\n\t{'name': 'Audi', 'year': 2013},\n\t{'name': 'BMW', 'year': 2012},\n\t{'name': 'Audi', 'year': 2012},\n\t{'name': 'BMW', 'year': 2011},\n\t{'name': 'Audi', 'year': 2011},\n\t{'name': 'BMW', 'year': 2010},\n\t{'name': 'Audi', 'year': 2010},\n\t{'name': 'BMW', 'year': 2009},\n\t{'name': 'Audi', 'year': 2009},\n\t{'name': 'BMW', 'year': 2008},\n\t{'name': 'Audi', 'year': 2008},\n\t{'name': 'BMW', 'year': 2007},\n\t{'name': 'Audi', 'year': 2007},\n\t{'name': 'BMW', 'year': 2006},\n\t{'name': 'Audi', 'year': 2006},\n\t{'name': 'BMW', 'year': 2005},\n\t{'name': 'A", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t{'name': 'BMW', 'year': 2018},\n\t{'name': 'Audi', 'year': 2018},\n\t{'name': 'BMW', 'year': 2017},\n\t{'name': 'Audi', 'year': 2017},\n\t{'name': 'BMW', 'year': 2016},\n\t{'name': 'Audi', 'year': 2016},\n\t{'name': 'BMW', 'year': 2015},\n\t{'name': 'Audi', 'year': 2015},\n\t{'name': 'BMW', 'year': 2014},\n\t{'name': 'Audi', 'year': 2014},\n\t{'name': 'BMW', 'year': 2013},\n\t{'name': 'Audi', 'year': 2013},\n\t{'name': 'BMW', 'year': 2012},\n\t{'name': 'Audi', 'year': 2012},\n\t{'name': 'BMW', 'year': 2011},\n\t{'name': 'Audi', 'year': 2011},\n\t{'name': 'BMW', 'year': 2010},\n\t{'name': 'Audi', 'year': 2010},\n\t{'name': 'BMW', 'year': 2009},\n\t{'name': 'Audi', 'year': 2009},\n\t{'name': 'BMW', 'year': 2008},\n\t{'name': 'Audi', 'year': 2008},\n\t{'name': 'BMW', 'year': 2007},\n\t{'name': 'Audi', 'year': 2007},\n\t{'name': 'BMW', 'year': 2006},\n\t{'name': 'Audi', 'year': 2006},\n\t{'name': 'BMW', 'year': 2005},\n\t{'name': 'A"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif isinstance(i, tuple):\n\t\t\tbreak\n\t\telse:\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "<s> \"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\treturn heapq.merge(num1,num2)\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21,22]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21,22,23]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn heapq.merge(num1,num2)\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21,22]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,12,13,14,15,16,17,18,19,20,21,22,23]\nprint(combine_lists(num1,num2))\n\nnum1 = [1,2,3,4,5,6,7,8,9]\nnum2 = [10,11,"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t\"\"\"\n\t:param s: a string\n\t:param a: a list of integers\n\t:return: a list of tuples\n\t\"\"\"\n\t# create a dictionary to store the counts of each element\n\tcounts = {}\n\tfor i in a:\n\t\tif i in counts:\n\t\t\tcounts[i] += 1\n\t\telse:\n\t\t\tcounts[i] = 1\n\t# sort the dictionary by value\n\tsorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n\t# create a list of tuples\n\tmost_common = []\n\tfor i in sorted_counts:\n\t\tmost_common.append((i[0],i[1]))\n\treturn most_common\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):\n\treturn len(min(list1, key=len))\n\ndef len_log(list1):"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "<s> \"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\tif year < 1900:\n\t\treturn \"Invalid year\"\n\telif year == 1900:\n\t\treturn \"Rat\"\n\telif year == 1901:\n\t\treturn \"Ox\"\n\telif year == 1902:\n\t\treturn \"Tiger\"\n\telif year == 1903:\n\t\treturn \"Rabbit\"\n\telif year == 1904:\n\t\treturn \"Dragon\"\n\telif year == 1905:\n\t\treturn \"Snake\"\n\telif year == 1906:\n\t\treturn \"Horse\"\n\telif year == 1907:\n\t\treturn \"Goat\"\n\telif year == 1908:\n\t\treturn \"Monkey\"\n\telif year == 1909:\n\t\treturn \"Rooster\"\n\telif year == 1910:\n\t\treturn \"Dog\"\n\telif year == 1911:\n\t\treturn \"Pig\"\n\telse:\n\t\treturn \"Invalid year\"\n\nprint(chinese_zodiac(1900))\nprint(chinese_zodiac(1901))\nprint(chinese_zodiac(1902))\nprint(chinese_zodiac(1903))\nprint(chinese_zodiac(1904))\nprint(chinese_zodiac(1905))\nprint(chinese_zodiac(1906))\nprint(chinese_zodiac(1907))\nprint(chinese_zodiac(1908))\nprint(chinese_zodiac(1909))\nprint(chinese_zodiac(1910))\nprint(chinese_zodiac(1911))\nprint(chinese_zodiac(1912))\nprint(chinese_zodiac(1913))\nprint(chinese_zodiac(1914))\nprint(chinese_zodiac(1915))\nprint(chinese_zodiac(191", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(chinese_zodiac(1900))\nprint(chinese_zodiac(1901))\nprint(chinese_zodiac(1902))\nprint(chinese_zodiac(1903))\nprint(chinese_zodiac(1904))\nprint(chinese_zodiac(1905))\nprint(chinese_zodiac(1906))\nprint(chinese_zodiac(1907))\nprint(chinese_zodiac(1908))\nprint(chinese_zodiac(1909))\nprint(chinese_zodiac(1910))\nprint(chinese_zodiac(1911))\nprint(chinese_zodiac(1912))\nprint(chinese_zodiac(1913))\nprint(chinese_zodiac(1914))\nprint(chinese_zodiac(1915))\nprint(chinese_zodiac(191"}
{"ID": 350, "source": "MBPP:951", "prompt": "\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n\t\"\"\"\n\ttest_list1: list of tuples\n\ttest_list2: list of tuples\n\t\"\"\"\n\tmax_index = 0\n\tmax_value = 0\n\tfor i in range(len(test_list1)):\n\t\tfor j in range(len(test_list2)):\n\t\t\tif test_list1[i][0] == test_list2[j][0] and test_list1[i][1] == test_list2[j][1]:\n\t\t\t\tif test_list1[i][2] > max_value:\n\t\t\t\t\tmax_value = test_list1[i][2]\n\t\t\t\t\tmax_index = i\n\treturn max_index\n\ntest_list1 = [('a', 'b', 1), ('a', 'c', 2), ('a', 'd', 3), ('b', 'c', 4), ('b', 'd', 5), ('c', 'd', 6)]\ntest_list2 = [('a', 'b', 1), ('a', 'c', 2), ('a', 'd', 3), ('b', 'c', 4), ('b', 'd', 5), ('c', 'd', 6)]\nprint(max_similar_indices(test_list1, test_list2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "<s> \"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nCr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nPr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nCr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nPr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nCr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nPr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nCr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n - r: \n\t\tr = n - r \n\tres = 1\n\tfor i in range(r): \n\t\tres = (res * (n - i)) % p\n\t\tres = (res * (r + 1)) % p\n\treturn res \n\n\n\"\"\"\nWrite a function to compute the value of nPr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t# Initialize result \n\tresult = 0\n\t# base case \n\tif (n == 1): \n\t\treturn 1\n\t# Find the minimum number of subsets with distinct elements \n\tfor i in range(1, n): \n\t\tresult += subset(ar, n - i) \n\treturn result \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "<s> \"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\tif actual_cost<sale_amount:\n\t\treturn sale_amount-actual_cost\n\telse:\n\t\treturn None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split('([A-Z])', text)\n\nprint(split_list('Hello World'))\n\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex."}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\treturn sum(lst) / len(lst)\n\n\"\"\"\nWrite a python function to find the sum of a list of numbers.\n\"\"\"\ndef Sum(lst):\n\treturn sum(lst)\n\n\"\"\"\nWrite a python function to find the maximum of a list of numbers.\n\"\"\"\ndef Max(lst):\n\treturn max(lst)\n\n\"\"\"\nWrite a python function to find the minimum of a list of numbers.\n\"\"\"\ndef Min(lst):\n\treturn min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the sum of a list of numbers.\n\"\"\"\ndef Sum(lst):\n\treturn sum(lst)\n\n\"\"\"\nWrite a python function to find the maximum of a list of numbers.\n\"\"\"\ndef Max(lst):\n\treturn max(lst)\n\n\"\"\"\nWrite a python function to find the minimum of a list of numbers.\n\"\"\"\ndef Min(lst):\n\treturn min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of numbers.\n\"\"\"\ndef MaxMin(lst):\n\treturn max(lst), min(lst)\n\n\"\"\"\nWrite a python function to find the maximum and minimum of a list of"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\treturn sum(x for x in range(l,r+1) if x%2==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(l,r): \n\treturn sum(x for x in range(l,r+1) if x%2!=0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 3 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 3.\n\"\"\"\ndef sum_Multiples_of_3(l,r): \n\treturn sum(x for x in range(l,r+1) if x%3==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 4 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 4.\n\"\"\"\ndef sum_Multiples_of_4(l,r): \n\treturn sum(x for x in range(l,r+1) if x%4==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 5 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 5.\n\"\"\"\ndef sum_Multiples_of_5(l,r): \n\treturn sum(x for x in range(l,r+1) if x%5==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 6 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 6.\n\"\"\"\ndef sum_Multiples_of_6(l,r): \n\treturn sum(x for x in range(l,r+1) if x%6==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 7 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 7.\n\"\"\"\ndef sum_Multi", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(l,r): \n\treturn sum(x for x in range(l,r+1) if x%2!=0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 3 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 3.\n\"\"\"\ndef sum_Multiples_of_3(l,r): \n\treturn sum(x for x in range(l,r+1) if x%3==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 4 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 4.\n\"\"\"\ndef sum_Multiples_of_4(l,r): \n\treturn sum(x for x in range(l,r+1) if x%4==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 5 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 5.\n\"\"\"\ndef sum_Multiples_of_5(l,r): \n\treturn sum(x for x in range(l,r+1) if x%5==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 6 within the range l and r (where l and r are inclusive).\nThe function should return sum of multiples of 6.\n\"\"\"\ndef sum_Multiples_of_6(l,r): \n\treturn sum(x for x in range(l,r+1) if x%6==0)\n\n\n\"\"\"\nWrite a python function to find the sum of all multiples of 7 within the range l and r (where l and r are inclusive)."}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\treturn (y**2)-(4*x*z)\n\n\"\"\"\nWrite a function to calculate the quadratic equation.\n\"\"\"\ndef quadratic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the cubic equation.\n\"\"\"\ndef cubic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the quartic equation.\n\"\"\"\ndef quartic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the quintic equation.\n\"\"\"\ndef quintic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the sextic equation.\n\"\"\"\ndef sextic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the septic equation.\n\"\"\"\ndef septic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the octic equation.\n\"\"\"\ndef octic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the nonic equation.\n\"\"\"\ndef nonic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to calculate the quadratic equation.\n\"\"\"\ndef quadratic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the cubic equation.\n\"\"\"\ndef cubic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the quartic equation.\n\"\"\"\ndef quartic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the quintic equation.\n\"\"\"\ndef quintic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the sextic equation.\n\"\"\"\ndef sextic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the septic equation.\n\"\"\"\ndef septic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the octic equation.\n\"\"\"\ndef octic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to calculate the nonic equation.\n\"\"\"\ndef nonic_equation(x,y,z):\n\treturn (-y + (discriminant_value(x,y,z))**0.5)/(2*x)\n\n\"\"\"\nWrite a function to"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): "}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: str\n\t\"\"\"\n\tsnake = ''\n\tfor i, c in enumerate(text):\n\t\tif c.isupper():\n\t\t\tif i != 0:\n\t\t\t\tsnake += '_'\n\t\t\tsnake += c.lower()\n\t\telse:\n\t\t\tsnake += c\n\treturn snake\n\n\ndef test_camel_to_snake():\n\tassert camel_to_snake('CamelCase') == 'camel_case'\n\tassert camel_to_snake('CamelCase2') == 'camel_case2'\n\tassert camel_to_snake('CamelCase3') == 'camel_case3'\n\tassert camel_to_snake('CamelCase4') == 'camel_case4'\n\tassert camel_to_snake('CamelCase5') == 'camel_case5'\n\tassert camel_to_snake('CamelCase6') == 'camel_case6'\n\tassert camel_to_snake('CamelCase7') == 'camel_case7'\n\tassert camel_to_snake('CamelCase8') == 'camel_case8'\n\tassert camel_to_snake('CamelCase9') == 'camel_case9'\n\tassert camel_to_snake('CamelCase10') == 'camel_case10'\n\tassert camel_to_snake('CamelCase11') == 'camel_case11'\n\tassert camel_to_snake('CamelCase12') == 'camel_case12'\n\tassert camel_to_snake('CamelCase13') == 'camel_case13'\n\tassert camel_to_snake('CamelCase14') == 'camel_case14'\n\tassert camel_to_snake('CamelCase15') == 'camel_case15'\n\tassert camel_to_snake('CamelCase16') == 'camel_case16'\n\tassert camel_to", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert camel_to_snake('CamelCase') == 'camel_case'\n\tassert camel_to_snake('CamelCase2') == 'camel_case2'\n\tassert camel_to_snake('CamelCase3') == 'camel_case3'\n\tassert camel_to_snake('CamelCase4') == 'camel_case4'\n\tassert camel_to_snake('CamelCase5') == 'camel_case5'\n\tassert camel_to_snake('CamelCase6') == 'camel_case6'\n\tassert camel_to_snake('CamelCase7') == 'camel_case7'\n\tassert camel_to_snake('CamelCase8') == 'camel_case8'\n\tassert camel_to_snake('CamelCase9') == 'camel_case9'\n\tassert camel_to_snake('CamelCase10') == 'camel_case10'\n\tassert camel_to_snake('CamelCase11') == 'camel_case11'\n\tassert camel_to_snake('CamelCase12') == 'camel_case12'\n\tassert camel_to_snake('CamelCase13') == 'camel_case13'\n\tassert camel_to_snake('CamelCase14') == 'camel_case14'\n\tassert camel_to_snake('CamelCase15') == 'camel_case15'\n\tassert camel_to_snake('CamelCase16') == 'camel_case16'\n\tassert camel_to"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "<s> \"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [t for t in tuple1 if t]\n\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove all duplicates from an unsorted list of integers and return a list of unique elements.\n\"\"\"\ndef remove_duplicates(my_list):\n\treturn list(set(my_list))\n\nmy_list = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "my_list = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "<s> \"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tfor i in vowels:\n\t\tif i not in string:\n\t\t\treturn False\n\treturn True\n\nprint(check(\"aeiou\"))\nprint(check(\"aeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check(\"aeiou\"))\nprint(check(\"aeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\treturn max_val\n\ndef ceil_Max(A,B,N):\n\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,min(A[i],B[i]))\n\treturn max_val\n\ndef periodic_Max(A,B,N):\n\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\treturn max_val\n\ndef periodic_Min(A,B,N):\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmin_val = min(min_val,min(A[i],B[i]))\n\treturn min_val\n\ndef periodic_Max_Min(A,B,N):\n\tmax_val = -1\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\t\tmin_val = min(min_val,min(A[i],B[i]))\n\treturn max_val,min_val\n\ndef periodic_Max_Min_2(A,B,N):\n\tmax_val = -1\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\t\tmin_val = min(min_val,min(A[i],B[i]))\n\treturn max_val,min_val\n\ndef periodic_Max_Min_3(A,B,N):\n\tmax_val = -1\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\treturn max_val\n\ndef ceil_Max(A,B,N):\n\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,min(A[i],B[i]))\n\treturn max_val\n\ndef periodic_Max(A,B,N):\n\tmax_val = -1\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\treturn max_val\n\ndef periodic_Min(A,B,N):\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmin_val = min(min_val,min(A[i],B[i]))\n\treturn min_val\n\ndef periodic_Max_Min(A,B,N):\n\tmax_val = -1\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))\n\t\tmin_val = min(min_val,min(A[i],B[i]))\n\treturn max_val,min_val\n\ndef periodic_Max_Min_2(A,B,N):\n\tmax_val = -1\n\tmin_val = 1000000000\n\tfor i in range(N):\n\t\tmax_val = max(max_val,max(A[i],B[i]))"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "<s> \"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\treturn x if x < y else y\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\treturn min_of_two( x, min_of_two( y, z ) )\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\treturn x if x > y else y\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\treturn max_of_two( x, max_of_two( y, z ) )\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, w ):\n\treturn max_of_two( max_of_two( x, y ), max_of_two( z, w ) )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, w, v ):\n\treturn max_of_two( max_of_three( x, y, z ), max_of_two( w, v ) )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, w, v, u ):\n\treturn max_of_two( max_of_four( x, y, z, w ), max_of_two( v, u ) )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, w, v, u, t ):\n\treturn max_of_two( max_of_five( x, y, z, w, v ), max_of_two( u, t ) )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, w, v, u, t, s ):\n\treturn max_of_two( max_of_six( x, y, z, w, v", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max_of_two( x, max_of_two( y, z ) )\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, w ):\n\treturn max_of_two( max_of_two( x, y ), max_of_two( z, w ) )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, w, v ):\n\treturn max_of_two( max_of_three( x, y, z ), max_of_two( w, v ) )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, w, v, u ):\n\treturn max_of_two( max_of_four( x, y, z, w ), max_of_two( v, u ) )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, w, v, u, t ):\n\treturn max_of_two( max_of_five( x, y, z, w, v ), max_of_two( u, t ) )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, w, v, u, t, s ):"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\treturn min(n // a, n // b, n // c)\n\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, 2, 3, 5))\nprint(maximum_segments(10, "}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "<s> \"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\treturn s[d:] + s[:d]\n\ndef test_function(test_case):\n\toutput = left_rotate(test_case[0],test_case[1])\n\tif output == test_case[2]:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\ntest_case_1 = [\"hello\",2,\"llohel\"]\ntest_case_2 = [\"hello\",3,\"lohel\"]\ntest_case_3 = [\"hello\",4,\"helolo\"]\ntest_case_4 = [\"hello\",5,\"helohel\"]\ntest_case_5 = [\"hello\",6,\"hello\"]\n\ntest_function(test_case_1)\ntest_function(test_case_2)\ntest_function(test_case_3)\ntest_function(test_case_4)\ntest_function(test_case_5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\treturn sorted(M, key=sum)\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(M, key=sum)\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]\nprint(sort_matrix(M))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22,"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_2(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_3(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_4(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_5(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_6(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_7(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_8(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_9(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_10(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_11(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_12(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_2(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_3(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_4(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_5(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_6(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_7(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_8(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_9(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_10(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_11(words):\n\t\"\"\"\n\t:type words: dict\n\t:rtype: int\n\t\"\"\"\n\treturn len(set(words.values()))\n\ndef count_common_12(words):\n\t\"\"\""}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\treturn l*b*h\n\n\"\"\"\nWrite a python function to find the surface area of a triangular prism.\n\"\"\"\ndef find_Surface_Area(l,b,h) : \n\treturn 2*(l*b+l*h+b*h)\n\n\"\"\"\nWrite a python function to find the surface area of a sphere.\n\"\"\"\ndef find_Surface_Area_of_Sphere(r) : \n\treturn 4*r*r\n\n\"\"\"\nWrite a python function to find the volume of a sphere.\n\"\"\"\ndef find_Volume_of_Sphere(r) : \n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a python function to find the surface area of a cylinder.\n\"\"\"\ndef find_Surface_Area_of_Cylinder(r,h) : \n\treturn 2*3.14*r*r+2*3.14*r*h\n\n\"\"\"\nWrite a python function to find the volume of a cylinder.\n\"\"\"\ndef find_Volume_of_Cylinder(r,h) : \n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a python function to find the surface area of a cone.\n\"\"\"\ndef find_Surface_Area_of_Cone(r,h) : \n\treturn 3.14*r*r+3.14*r*h\n\n\"\"\"\nWrite a python function to find the volume of a cone.\n\"\"\"\ndef find_Volume_of_Cone(r,h) : \n\treturn (1/3)*3.14*r*r*h\n\n\"\"\"\nWrite a python function to find the surface area of a cube.\n\"\"\"\ndef find_Surface_Area_of_Cube(s) : \n\treturn 6*s*s\n\n\"\"\"\nWrite a python function to find the volume of a cube.\n\"\"\"\ndef find_Volume_of_Cube(s) : \n\treturn s*s*s\n\n\"\"\"\nWrite a python function to find the surface area of a rect", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the surface area of a triangular prism.\n\"\"\"\ndef find_Surface_Area(l,b,h) : \n\treturn 2*(l*b+l*h+b*h)\n\n\"\"\"\nWrite a python function to find the surface area of a sphere.\n\"\"\"\ndef find_Surface_Area_of_Sphere(r) : \n\treturn 4*r*r\n\n\"\"\"\nWrite a python function to find the volume of a sphere.\n\"\"\"\ndef find_Volume_of_Sphere(r) : \n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a python function to find the surface area of a cylinder.\n\"\"\"\ndef find_Surface_Area_of_Cylinder(r,h) : \n\treturn 2*3.14*r*r+2*3.14*r*h\n\n\"\"\"\nWrite a python function to find the volume of a cylinder.\n\"\"\"\ndef find_Volume_of_Cylinder(r,h) : \n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a python function to find the surface area of a cone.\n\"\"\"\ndef find_Surface_Area_of_Cone(r,h) : \n\treturn 3.14*r*r+3.14*r*h\n\n\"\"\"\nWrite a python function to find the volume of a cone.\n\"\"\"\ndef find_Volume_of_Cone(r,h) : \n\treturn (1/3)*3.14*r*r*h\n\n\"\"\"\nWrite a python function to find the surface area of a cube.\n\"\"\"\ndef find_Surface_Area_of_Cube(s) : \n\treturn 6*s*s\n\n\"\"\"\nWrite a python function to find the volume of a cube.\n\"\"\"\ndef find_Volume_of_Cube(s) : \n\treturn s*s*s\n\n\"\"\"\nWrite a python function to find the surface area of a rect"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_2(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_3(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_4(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_5(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_6(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_7(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_8(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_9(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_10(text):\n\t\"\"\"\n\t:type text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_2(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_3(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_4(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_5(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_6(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_7(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_8(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n\n\ndef split_lowerstring_9(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn re.split(r'(?=[a-z])', text)\n"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0] + [i for i in range(len(text)) if text[i] == '_'],\n\t\t\t\t\t\t\t\t\t [i for i in range(len(text)) if text[i] == '_'] + [len(text)]) if i != j]\n\n\ndef test_text_lowercase_underscore():\n\tassert text_lowercase_underscore('hello_world') == ['hello', 'world']\n\tassert text_lowercase_underscore('hello_world_') == ['hello', 'world']\n\tassert text_lowercase_underscore('hello_world_123') == ['hello', 'world', '123']\n\tassert text_lowercase_underscore('hello_world_123_') == ['hello', 'world', '123']\n\tassert text_lowercase_underscore('hello_world_123_abc') == ['hello', 'world', '123', 'abc']\n\tassert text_lowercase_underscore('hello_world_123_abc_') == ['hello', 'world', '123', 'abc']\n\tassert text_lowercase_underscore('hello_world_123_abc_def') == ['hello', 'world', '123', 'abc', 'def']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_') == ['hello', 'world', '123', 'abc', 'def']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_ghi') == ['hello', 'world', '123', 'abc', 'def', 'ghi']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_ghi_') == ['hello', 'world', '123', 'abc', 'def', 'ghi']\n\tassert text_lowercase_underscore('hello_world_123_abc_def", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert text_lowercase_underscore('hello_world') == ['hello', 'world']\n\tassert text_lowercase_underscore('hello_world_') == ['hello', 'world']\n\tassert text_lowercase_underscore('hello_world_123') == ['hello', 'world', '123']\n\tassert text_lowercase_underscore('hello_world_123_') == ['hello', 'world', '123']\n\tassert text_lowercase_underscore('hello_world_123_abc') == ['hello', 'world', '123', 'abc']\n\tassert text_lowercase_underscore('hello_world_123_abc_') == ['hello', 'world', '123', 'abc']\n\tassert text_lowercase_underscore('hello_world_123_abc_def') == ['hello', 'world', '123', 'abc', 'def']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_') == ['hello', 'world', '123', 'abc', 'def']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_ghi') == ['hello', 'world', '123', 'abc', 'def', 'ghi']\n\tassert text_lowercase_underscore('hello_world_123_abc_def_ghi_') == ['hello', 'world', '123', 'abc', 'def', 'ghi']\n\tassert text_lowercase_underscore('hello_world_123_abc_def"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\treturn a * 4\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base, height):\n\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\treturn a + b + c\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length, width):\n\treturn length * width\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(length, width):\n\treturn 2 * (length + width)\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal):\n\treturn diagonal ** 2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(diagonal):\n\treturn 4 * diagonal\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(base1, base2, height):\n\treturn (base1 + base2) * height / 2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(base1, base2, height):\n\treturn base1 + base2 + height\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base, height):\n\treturn base * height\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(base, height):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a * 4\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base, height):\n\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\treturn a + b + c\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length, width):\n\treturn length * width\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(length, width):\n\treturn 2 * (length + width)\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal):\n\treturn diagonal ** 2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(diagonal):\n\treturn 4 * diagonal\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(base1, base2, height):\n\treturn (base1 + base2) * height / 2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(base1, base2, height):\n\treturn base1 + base2 + height\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base, height):\n\treturn base * height\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(base, height):"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\tif x < 100: \n\t\treturn False\n\tstr_x = str(x)\n\tfor i in range(1, len(str_x)): \n\t\tif int(str_x[i]) < int(str_x[i-1]): \n\t\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_2(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_3(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_4(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_5(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_6(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_7(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_8(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_9(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_2(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_3(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_4(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_5(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_6(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_7(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_8(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\ndef find_first_duplicate_9(nums):"}
{"ID": 386, "source": "MBPP:23", "prompt": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\"\"\"\ndef maximum_Sum(list1): \n\treturn max(sum(i) for i in list1)\n\n\n\n\"\"\"\nWrite a python function to find"}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t# Initialize result\n\tresult = 1\n\t# Traverse the array.\n\tfor i in range(0, n): \n\t\tflag = 0\n\t\t# Check the current element is present at ith index or not\n\t\tfor j in range(0, i): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\t# If repeated, then flag = 1\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\t# If not repeated, then multiply with result\n\t\tif (flag == 0): \n\t\t\tresult *= arr[i]\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 391, "source": "MBPP:28", "prompt": "\"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find binomial co-efficient.\n\"\"\"\ndef binomial_Coeff(n,k): \n\tif k>n-k: \n\t\tk=n-k \n\tres=1\n\tfor i in range(k): \n\t\tres*=n-i \n\t\tres//=i+1\n\treturn res \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using recursion.\n\"\"\"\ndef binomial_Coeff_Rec(n,k): \n\tif k==0 or k==n: \n\t\treturn 1\n\treturn binomial_Coeff_Rec(n-1,k-1)+binomial_Coeff_Rec(n-1,k) \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using dynamic programming.\n\"\"\"\ndef binomial_Coeff_DP(n,k): \n\tif k==0 or k==n: \n\t\treturn 1\n\tif dp[n][k]!=0: \n\t\treturn dp[n][k] \n\tdp[n][k]=binomial_Coeff_DP(n-1,k-1)+binomial_Coeff_DP(n-1,k) \n\treturn dp[n][k] \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n\"\"\"\ndef binomial_Coeff_Bitwise(n,k): \n\tif k>n-k: \n\t\tk=n-k \n\tres=1\n\tfor i in range(k): \n\t\tres*=n-i \n\t\tres//=i+1\n\treturn res \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n\"\"\"\ndef binomial_Coeff_Bitwise_Rec(n,k): \n\tif k==0 or k==n: \n\t\treturn 1\n\treturn binomial_Coeff_Bitwise_Rec(n-1,k-1)+binomial_Coeff_Bitwise_Rec(n-1,k) \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def binomial_Coeff_DP(n,k): \n\tif k==0 or k==n: \n\t\treturn 1\n\tif dp[n][k]!=0: \n\t\treturn dp[n][k] \n\tdp[n][k]=binomial_Coeff_DP(n-1,k-1)+binomial_Coeff_DP(n-1,k) \n\treturn dp[n][k] \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n\"\"\"\ndef binomial_Coeff_Bitwise(n,k): \n\tif k>n-k: \n\t\tk=n-k \n\tres=1\n\tfor i in range(k): \n\t\tres*=n-i \n\t\tres//=i+1\n\treturn res \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n\"\"\"\ndef binomial_Coeff_Bitwise_Rec(n,k): \n\tif k==0 or k==n: \n\t\treturn 1\n\treturn binomial_Coeff_Bitwise_Rec(n-1,k-1)+binomial_Coeff_Bitwise_Rec(n-1,k) \n\n\n\"\"\"\nWrite a python function to find binomial co-efficient using bitwise operation.\n"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t\n\t# Initialize result\n\tresult = -1\n\t\n\t# Traverse the array\n\tfor i in range(arr_size):\n\t\t\n\t\t# If current element is already seen\n\t\tif arr[i] in arr[:i] or arr[i] in arr[i+1:]:\n\t\t\tcontinue\n\t\t\n\t\t# If current element is not seen,\n\t\t# then check if it's occurred odd number of times\n\t\tcount = 0\n\t\tfor j in range(arr_size):\n\t\t\tif arr[j] == arr[i]:\n\t\t\t\tcount += 1\n\t\t\t\tbreak\n\t\t\n\t\t# If current element is occurred odd number of times\n\t\tif count % 2 != 0:\n\t\t\tresult = arr[i]\n\t\t\tbreak\n\t\n\t# Return result\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\tif not nums or not k:\n\t\treturn []\n\t\n\t# create a min heap\n\theap = []\n\t\n\t# create a dictionary to store the count of each number\n\tcount = {}\n\t\n\t# traverse the list of numbers\n\tfor num in nums:\n\t\t# if the number is already in the dictionary\n\t\tif num in count:\n\t\t\t# increment its count\n\t\t\tcount[num] += 1\n\t\telse:\n\t\t\t# else add it to the dictionary\n\t\t\tcount[num] = 1\n\t\t\t\n\t\t\t# add it to the heap\n\t\t\theapq.heappush(heap, (count[num], num))\n\t\t\t\n\t\t\t# if the heap size is greater than k\n\t\t\tif len(heap) > k:\n\t\t\t\t# remove the smallest element from the heap\n\t\t\t\theapq.heappop(heap)\n\t\n\t# return the top k elements from the heap\n\treturn [x[1] for x in heap]\n\n\n# Test cases:\nprint(func([1, 1, 1, 2, 2, 3], 2)) # [1, 2]\nprint(func([1], 1)) # [1]\nprint(func([1, 2, 3], 4)) # [1, 2, 3]\nprint(func([1, 2, 3], 1)) # [1]\nprint(func([1, 2, 3], 0)) # []\nprint(func([], 2)) # []\nprint(func([1, 2, 3], 3)) # [1, 2, 3]\nprint(func([1, 2, 3], 4)) # [1, 2, 3]\nprint(func([1, 2, 3], 5)) # [1, 2, 3]\nprint(func([1, 2, 3], 6)) # [1, 2, 3]\nprint(func([1, 2, 3], 7)) # [1, 2, 3]\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(func([1, 1, 1, 2, 2, 3], 2)) # [1, 2]\nprint(func([1], 1)) # [1]\nprint(func([1, 2, 3], 4)) # [1, 2, 3]\nprint(func([1, 2, 3], 1)) # [1]\nprint(func([1, 2, 3], 0)) # []\nprint(func([], 2)) # []\nprint(func([1, 2, 3], 3)) # [1, 2, 3]\nprint(func([1, 2, 3], 4)) # [1, 2, 3]\nprint(func([1, 2, 3], 5)) # [1, 2, 3]\nprint(func([1, 2, 3], 6)) # [1, 2, 3]\nprint(func([1, 2, 3], 7)) # [1, 2, 3]\n"}
{"ID": 395, "source": "MBPP:32", "prompt": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\n\"\"\"\ndef max_Prime_Factors (n): \n\tif n <= 1: \n\t\treturn n \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n + 1\n\n\n\"\"\"\nWrite a python function to find the largest prime factor"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\tfor i in range(N-1): \n\t\tif ar[i+1] - ar[i] != 1: \n\t\t\treturn ar[i] + 1\n\treturn ar[N-1] + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\treturn n * (n + 1) // 2\n\ndef test_find_rect_num():\n\tassert find_rect_num(1) == 1\n\tassert find_rect_num(2) == 5\n\tassert find_rect_num(3) == 10\n\tassert find_rect_num(4) == 15\n\tassert find_rect_num(5) == 20\n\tassert find_rect_num(6) == 25\n\tassert find_rect_num(7) == 30\n\tassert find_rect_num(8) == 35\n\tassert find_rect_num(9) == 40\n\tassert find_rect_num(10) == 45\n\tassert find_rect_num(11) == 50\n\tassert find_rect_num(12) == 55\n\tassert find_rect_num(13) == 60\n\tassert find_rect_num(14) == 65\n\tassert find_rect_num(15) == 70\n\tassert find_rect_num(16) == 75\n\tassert find_rect_num(17) == 80\n\tassert find_rect_num(18) == 85\n\tassert find_rect_num(19) == 90\n\tassert find_rect_num(20) == 95\n\tassert find_rect_num(21) == 100\n\tassert find_rect_num(22) == 105\n\tassert find_rect_num(23) == 110\n\tassert find_rect_num(24) == 115\n\tassert find_rect_num(25) == 120\n\tassert find_rect_num(26) == 125\n\tassert find_rect_num(27) == 130\n\tassert find_rect_num(28) == 135\n\tassert find_rect_num(29) == 140\n\tassert find_rect_num(30) == 145\n\tassert find_rect_num(3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert find_rect_num(1) == 1\n\tassert find_rect_num(2) == 5\n\tassert find_rect_num(3) == 10\n\tassert find_rect_num(4) == 15\n\tassert find_rect_num(5) == 20\n\tassert find_rect_num(6) == 25\n\tassert find_rect_num(7) == 30\n\tassert find_rect_num(8) == 35\n\tassert find_rect_num(9) == 40\n\tassert find_rect_num(10) == 45\n\tassert find_rect_num(11) == 50\n\tassert find_rect_num(12) == 55\n\tassert find_rect_num(13) == 60\n\tassert find_rect_num(14) == 65\n\tassert find_rect_num(15) == 70\n\tassert find_rect_num(16) == 75\n\tassert find_rect_num(17) == 80\n\tassert find_rect_num(18) == 85\n\tassert find_rect_num(19) == 90\n\tassert find_rect_num(20) == 95\n\tassert find_rect_num(21) == 100\n\tassert find_rect_num(22) == 105\n\tassert find_rect_num(23) == 110\n\tassert find_rect_num(24) == 115\n\tassert find_rect_num(25) == 120\n\tassert find_rect_num(26) == 125\n\tassert find_rect_num(27) == 130\n\tassert find_rect_num(28) == 135\n\tassert find_rect_num(29) == 140\n\tassert find_rect_num(30) == 145\n\tassert find_rect_num(3"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\treturn sorted(mixed_list)\n\ndef test_function(test_case):\n\tsort_mixed_list(test_case[0])\n\tif test_case[0] == test_case[1]:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\n# Test case 1:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\ntest_function(test_case)\n\n# Test case 2:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]]\ntest_function(test_case)\n\n# Test case 3:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Test case 1:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\ntest_function(test_case)\n\n# Test case 2:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]]\ntest_function(test_case)\n\n# Test case 3:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\ntest_case = [mixed_list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t\"\"\"\n\t:type S: str\n\t:rtype: bool\n\t\"\"\"\n\tif len(S) == 0:\n\t\treturn True\n\tif len(S) == 1:\n\t\treturn False\n\t\n\tcount = [0] * 26\n\tfor c in S:\n\t\tcount[ord(c) - ord('a')] += 1\n\t\n\tfor i in range(26):\n\t\tif count[i] > 0:\n\t\t\tcount[i] -= 1\n\t\t\tbreak\n\t\n\tfor i in range(25, -1, -1):\n\t\tif count[i] > 0:\n\t\t\tcount[i] -= 1\n\t\t\tbreak\n\t\n\tfor i in range(26):\n\t\tif count[i] > 0:\n\t\t\treturn False\n\t\n\treturn True\n\nprint(rearange_string(\"aabb\"))\nprint(rearange_string(\"abab\"))\nprint(rearange_string(\"ababab\"))\nprint(rearange_string(\"abababab\"))\nprint(rearange_string(\"ababababab\"))\nprint(rearange_string(\"abababababab\"))\nprint(rearange_string(\"ababababababab\"))\nprint(rearange_string(\"abababababababab\"))\nprint(rearange_string(\"ababababababababab\"))\nprint(rearange_string(\"abababababababababab\"))\nprint(rearange_string(\"ababababababababababab\"))\nprint(rearange_string(\"abababababababababababab\"))\nprint(rearange_string(\"ababababababababababababab\"))\nprint(rearange_string(\"abababababababababababababab\"))\nprint(rearange_string(\"ababababababababababababababab\"))\nprint(rearange_string(\"abababababababababababababababab\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(rearange_string(\"aabb\"))\nprint(rearange_string(\"abab\"))\nprint(rearange_string(\"ababab\"))\nprint(rearange_string(\"abababab\"))\nprint(rearange_string(\"ababababab\"))\nprint(rearange_string(\"abababababab\"))\nprint(rearange_string(\"ababababababab\"))\nprint(rearange_string(\"abababababababab\"))\nprint(rearange_string(\"ababababababababab\"))\nprint(rearange_string(\"abababababababababab\"))\nprint(rearange_string(\"ababababababababababab\"))\nprint(rearange_string(\"abababababababababababab\"))\nprint(rearange_string(\"ababababababababababababab\"))\nprint(rearange_string(\"abababababababababababababab\"))\nprint(rearange_string(\"ababababababababababababababab\"))\nprint(rearange_string(\"abababababababababababababababab\"))\nprint"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\treturn Counter(nums)\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# Counter({1: 2, 2: 3, 3: 2, 4: 2, 5: 2})\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using defaultdict.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(nums):\n\tfreq = defaultdict(int)\n\tfor num in nums:\n\t\tfreq[num] += 1\n\treturn freq\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 2, 4: 2, 5: 2})\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using dict.\n\"\"\"\ndef freq_element(nums):\n\tfreq = {}\n\tfor num in nums:\n\t\tif num in freq:\n\t\t\tfreq[num] += 1\n\t\telse:\n\t\t\tfreq[num] = 1\n\treturn freq\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# {1: 2, 2: 3, 3: 2, 4: 2, 5: 2}\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using set.\n\"\"\"\ndef freq_element(nums):\n\tfreq = {}\n\tfor num in set(nums):\n\t\tfreq[num] = nums.count(num)\n\treturn freq\n\nprint(freq_element([[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfrom collections import Counter\n\treturn Counter(nums)\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# Counter({1: 2, 2: 3, 3: 2, 4: 2, 5: 2})\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using defaultdict.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(nums):\n\tfreq = defaultdict(int)\n\tfor num in nums:\n\t\tfreq[num] += 1\n\treturn freq\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 2, 4: 2, 5: 2})\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using dict.\n\"\"\"\ndef freq_element(nums):\n\tfreq = {}\n\tfor num in nums:\n\t\tif num in freq:\n\t\t\tfreq[num] += 1\n\t\telse:\n\t\t\tfreq[num] = 1\n\treturn freq\n\nprint(freq_element([[1, 2, 2], [3, 4, 5], [1, 2, 3], [3, 4, 5]]))\n# {1: 2, 2: 3, 3: 2, 4: 2, 5: 2}\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using set."}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_evennumbers([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using map function.\n\"\"\"\ndef filter_evennumbers_map(nums):\n\treturn list(map(lambda x: x%2==0, nums))\n\nprint(filter_evennumbers_map([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using filter function.\n\"\"\"\ndef filter_evennumbers_filter(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_evennumbers_filter([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using comprehension.\n\"\"\"\ndef filter_evennumbers_comprehension(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_evennumbers_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using list comprehension.\n\"\"\"\ndef filter_evennumbers_list_comprehension(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_evennumbers_list_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using set comprehension.\n\"\"\"\ndef filter_evennumbers_set_comprehension(nums):\n\treturn {x for x in nums if x%2==0}\n\nprint(filter_evennumbers_set_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using dictionary comprehension.\n\"\"\"\ndef filter_evennumbers_dict_comprehension(nums):\n\treturn {x:x**2 for x in nums", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(filter_evennumbers_filter([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using comprehension.\n\"\"\"\ndef filter_evennumbers_comprehension(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_evennumbers_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using list comprehension.\n\"\"\"\ndef filter_evennumbers_list_comprehension(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_evennumbers_list_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using set comprehension.\n\"\"\"\ndef filter_evennumbers_set_comprehension(nums):\n\treturn {x for x in nums if x%2==0}\n\nprint(filter_evennumbers_set_comprehension([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter even numbers using dictionary comprehension.\n\"\"\"\ndef filter_evennumbers_dict_comprehension(nums):\n\treturn {x:x**2 for x in nums"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):\n\treturn re.findall(r'[a-z]+', text)\n\n\ndef text_match(text):"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^text', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^text', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^text', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, using a regular expression, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(r'^text', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^text', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text, re.IGNORECASE)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'^text', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r'text$', text)\n\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, using a regular expression.\n\"\"\"\ndef text_match_string(text):\n\treturn re.match(r't[a-z]t', text)\n\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, using a regular expression, ignoring case.\n\"\"\"\ndef text_match_string(text):"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set\n\t\"\"\"\n\treturn n | (n & 0x55555555)\n\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with even bits set\n\t\"\"\"\n\treturn n | (n & 0xAAAAAAAA)\n\n\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: number\n\t:return: number with odd bits set"}
{"ID": 412, "source": "MBPP:49", "prompt": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\treturn [nums[i][N-1] for i in range(len(nums))]\n\ndef first_element(nums):\n\treturn [nums[i][0] for i in range(len(nums))]\n\ndef first_or_specified_element(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_2(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_3(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_4(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_5(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_6(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_7(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_8(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_9(nums, N):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [nums[i][N-1] for i in range(len(nums))]\n\ndef first_element(nums):\n\treturn [nums[i][0] for i in range(len(nums))]\n\ndef first_or_specified_element(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_2(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_3(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_4(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_5(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_6(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_7(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_8(nums, N):\n\treturn [nums[i][0] if N == 1 else nums[i][N-1] for i in range(len(nums))]\n\ndef first_or_specified_element_9(nums, N):"}
{"ID": 413, "source": "MBPP:50", "prompt": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list with minimum length using lambda function.\n\"\"\"\ndef min_length_list(input_list):\n\treturn min(input_list, key=len)\n\nprint(min_length_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with maximum length using lambda function.\n\"\"\"\ndef max_length_list(input_list):\n\treturn max(input_list, key=len)\n\nprint(max_length_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with minimum sum of elements using lambda function.\n\"\"\"\ndef min_sum_list(input_list):\n\treturn min(input_list, key=sum)\n\nprint(min_sum_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with maximum sum of elements using lambda function.\n\"\"\"\ndef max_sum_list(input_list):\n\treturn max(input_list, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with minimum average of elements using lambda function.\n\"\"\"\ndef min_avg_list(input_list):\n\treturn min(input_list, key=lambda x: sum(x)/len(x))\n\nprint(min_avg_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with maximum average of elements using lambda function.\n\"\"\"\ndef max_avg_list(input_list):\n\treturn max(input_list, key=lambda x: sum(x)/len(x))\n\nprint(max_avg_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with minimum standard deviation of elements using lambda function.\n\"\"\"\ndef min_std_list(input_list):\n\treturn min(input_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a function to find the list with minimum sum of elements using lambda function.\n\"\"\"\ndef min_sum_list(input_list):\n\treturn min(input_list, key=sum)\n\nprint(min_sum_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with maximum sum of elements using lambda function.\n\"\"\"\ndef max_sum_list(input_list):\n\treturn max(input_list, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with minimum average of elements using lambda function.\n\"\"\"\ndef min_avg_list(input_list):\n\treturn min(input_list, key=lambda x: sum(x)/len(x))\n\nprint(min_avg_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with maximum average of elements using lambda function.\n\"\"\"\ndef max_avg_list(input_list):\n\treturn max(input_list, key=lambda x: sum(x)/len(x))\n\nprint(max_avg_list([[1,2,3], [4,5,6], [7,8,9]]))\n\n\"\"\"\nWrite a function to find the list with minimum standard deviation of elements using lambda function.\n\"\"\"\ndef min_std_list(input_list):\n\treturn min(input_"}
{"ID": 414, "source": "MBPP:51", "prompt": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a function to print check if the triangle is equilateral or not.\n\"\"\"\ndef check_equilateral(x,y,z):\n\tif x==y and y==z:\n\t\treturn \"Equilateral\"\n\telse:\n\t\treturn \"Not Equilateral\"\n\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3,4))\nprint(check_equilateral(3,4,4))\nprint(check_equilateral(4,4,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(4,3,3))\nprint(check_equilateral(4,3,4))\nprint(check_equilateral(4,4,3))\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,3))\nprint(check_equilateral(3,3"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef rectangle_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef rhombus_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef rhombus_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef rectangle_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef rhombus_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef rhombus_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "<s> \"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\tif n == 10:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num(num):\n\tnum_str = str(num)\n\tif num_str == str(num)[::-1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_2(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_3(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_4(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_5(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_6(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_7(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_8(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_9(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_10(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_11(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_12(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_13(num):\n\tif num == num * 2 -", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num(num):\n\tnum_str = str(num)\n\tif num_str == str(num)[::-1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_2(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_3(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_4(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_5(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_6(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_7(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_8(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_9(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_10(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_11(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_12(num):\n\tif num == num * 2 - 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_num_13(num):"}
{"ID": 421, "source": "MBPP:58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y): \n\tif (x^y)<0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x,y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\n\n\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"\ndef opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)\n\n"}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\tif n == 1:\n\t\treturn True\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\tif n % 4 == 3:\n\t\treturn True\n\treturn False\n\ndef octagonal_number(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn n * 3\n\tif n % 4 == 3:\n\t\treturn n * 3 + 2\n\ndef octagonal_number_recursive(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn octagonal_number_recursive(n - 1) * 3\n\tif n % 4 == 3:\n\t\treturn octagonal_number_recursive(n - 1) * 3 + 2\n\ndef octagonal_number_iterative(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn octagonal_number_iterative(n - 1) * 3\n\tif n % 4 == 3:\n\t\treturn octagonal_number_iterative(n - 1) * 3 + 2\n\ndef octagonal_number_recursive_memo(n, memo):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn octagonal_number_recursive_memo(n - 1, memo) * 3\n\tif n % 4 == 3:\n\t\treturn octagonal_number_recursive_memo(n - 1, memo) * 3 + 2\n\ndef octagonal_number_iterative_memo(n, memo):\n\tif n == 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1:\n\t\treturn True\n\tif n == 2:\n\t\treturn True\n\tif n % 2 == 0:\n\t\treturn False\n\tif n % 4 == 3:\n\t\treturn True\n\treturn False\n\ndef octagonal_number(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn n * 3\n\tif n % 4 == 3:\n\t\treturn n * 3 + 2\n\ndef octagonal_number_recursive(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:\n\t\treturn octagonal_number_recursive(n - 1) * 3\n\tif n % 4 == 3:\n\t\treturn octagonal_number_recursive(n - 1) * 3 + 2\n\ndef octagonal_number_iterative(n):\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n % 2 == 0:"}
{"ID": 424, "source": "MBPP:61", "prompt": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\"\"\"\ndef count_Substrings(s,n):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tif sum(s[i:j+1]) == j+1:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "<s> \"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('john', 34), ('jane', 23), ('dave', 19), ('emma', 20)]\nprint(subject_marks(subjectmarks))\n\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\tif A[0] > A[-1]: \n\t\treturn False\n\tfor i in range(len(A) - 1): \n\t\tif A[i] > A[i + 1]: \n\t\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\tfor i in range(len(l) - len(s) + 1):\n\t\tif l[i:i+len(s)] == s:\n\t\t\treturn True\n\treturn False\n\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_sublist([1, 2, 3, 4, 5], [2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3,"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\tif len(colors) != len(patterns):\n\t\treturn False\n\tfor i in range(len(colors)):\n\t\tif colors[i] != patterns[i]:\n\t\t\treturn False\n\treturn True\n\ndef is_samepatterns2(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns3(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns4(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns5(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns6(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns7(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns8(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns9(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns10(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns11(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns12(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns13(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns14(colors, patterns", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef is_samepatterns2(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns3(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns4(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns5(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns6(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns7(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns8(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns9(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns10(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns11(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns12(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns13(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))"}
{"ID": 441, "source": "MBPP:78", "prompt": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i in range(1, n+1): \n\t\tcount += 1 & (bin(i).count('1')) \n\treturn count \n\n\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\n\"\"\"\ndef count_With_Odd_SetBits(n): \n\tcount = 0\n\tfor i"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn b * h / 3\n\n\"\"\"\nWrite a function to find the volume of a rectangular box.\n\"\"\"\ndef volume_box(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(b, h):\n\treturn b * h / 3\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the volume of a rectangular pyramid.\n\"\"\"\ndef volume_rectangular_pyramid(l, w, h):\n\treturn l * w * h / 3\n\n\"\"\"\nWrite a function to find the volume of a rectangular box.\n\"\"\"\ndef volume_rectangular_box(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(b, h):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn b * h / 3\n\n\"\"\"\nWrite a function to find the volume of a rectangular box.\n\"\"\"\ndef volume_box(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(b, h):\n\treturn b * h / 3\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the volume of a rectangular pyramid.\n\"\"\"\ndef volume_rectangular_pyramid(l, w, h):\n\treturn l * w * h / 3\n\n\"\"\"\nWrite a function to find the volume of a rectangular box.\n\"\"\"\ndef volume_rectangular_box(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_triangular_pyramid(b, h):"}
{"ID": 446, "source": "MBPP:83", "prompt": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\ndef get_Char(strr):  \n\t# your code goes here  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * math.pi * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * math.pi * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn math.pi * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn math.pi * r ** 2 + math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * math.pi * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s ** 3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_prism(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a triangular prism.\n\"\"\"\ndef surfacearea_prism_triangular(b, h):\n\treturn b * h + b * h + b * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_triangular(b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 4 * math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * math.pi * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * math.pi * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn math.pi * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn math.pi * r ** 2 + math.pi * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * math.pi * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s ** 3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_prism(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a triangular prism.\n\"\"\"\ndef surfacearea_prism_triangular(b, h):\n\treturn b * h + b * h + b * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_triangular(b"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\tmerged_dict = {}\n\tfor key in dict1:\n\t\tmerged_dict[key] = dict1[key]\n\tfor key in dict2:\n\t\tmerged_dict[key] = dict2[key]\n\tfor key in dict3:\n\t\tmerged_dict[key] = dict3[key]\n\treturn merged_dict\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\tif N == 1:\n\t\treturn 0\n\telif N == 2:\n\t\treturn 1\n\telse:\n\t\tfor i in range(2, N):\n\t\t\tif N % i == 0:\n\t\t\t\treturn i - 1\n\t\treturn N - 1\n\nprint(closest_num(1))\nprint(closest_num(2))\nprint(closest_num(3))\nprint(closest_num(4))\nprint(closest_num(5))\nprint(closest_num(6))\nprint(closest_num(7))\nprint(closest_num(8))\nprint(closest_num(9))\nprint(closest_num(10))\nprint(closest_num(11))\nprint(closest_num(12))\nprint(closest_num(13))\nprint(closest_num(14))\nprint(closest_num(15))\nprint(closest_num(16))\nprint(closest_num(17))\nprint(closest_num(18))\nprint(closest_num(19))\nprint(closest_num(20))\nprint(closest_num(21))\nprint(closest_num(22))\nprint(closest_num(23))\nprint(closest_num(24))\nprint(closest_num(25))\nprint(closest_num(26))\nprint(closest_num(27))\nprint(closest_num(28))\nprint(closest_num(29))\nprint(closest_num(30))\nprint(closest_num(31))\nprint(closest_num(32))\nprint(closest_num(33))\nprint(closest_num(34))\nprint(closest_num(35))\nprint(closest_num(36))\nprint(closest_num(37))\nprint(closest_num(38))\nprint(closest_num(39))\nprint(closest_num(40))\nprint(closest_num(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(closest_num(1))\nprint(closest_num(2))\nprint(closest_num(3))\nprint(closest_num(4))\nprint(closest_num(5))\nprint(closest_num(6))\nprint(closest_num(7))\nprint(closest_num(8))\nprint(closest_num(9))\nprint(closest_num(10))\nprint(closest_num(11))\nprint(closest_num(12))\nprint(closest_num(13))\nprint(closest_num(14))\nprint(closest_num(15))\nprint(closest_num(16))\nprint(closest_num(17))\nprint(closest_num(18))\nprint(closest_num(19))\nprint(closest_num(20))\nprint(closest_num(21))\nprint(closest_num(22))\nprint(closest_num(23))\nprint(closest_num(24))\nprint(closest_num(25))\nprint(closest_num(26))\nprint(closest_num(27))\nprint(closest_num(28))\nprint(closest_num(29))\nprint(closest_num(30))\nprint(closest_num(31))\nprint(closest_num(32))\nprint(closest_num(33))\nprint(closest_num(34))\nprint(closest_num(35))\nprint(closest_num(36))\nprint(closest_num(37))\nprint(closest_num(38))\nprint(closest_num(39))\nprint(closest_num(40))\nprint(closest_num("}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nprint(len_log(list1))\n\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:"}
{"ID": 454, "source": "MBPP:91", "prompt": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a substring is present in a given list of string values.\n\"\"\"\ndef find_substring(str1, sub_str):\n\tfor i in range(len(str1)):\n\t\tif sub_str in str1[i]:\n\t\t\treturn True\n\treturn False\n\nstr1 = [\"abc\", \"def\", \"ghi\"]\nsub_str = \"abc\"\nprint(find_substring(str1, sub_str))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "str1 = [\"abc\", \"def\", \"ghi\"]\nsub_str = \"abc\"\nprint(find_substring(str1, sub_str))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\"\nprint(is_palindrome(str1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nstr1 = \"racecar\""}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\tif n == 1: \n\t\treturn False\n\telif n == 2: \n\t\treturn True\n\telse: \n\t\tfor i in range(2, n): \n\t\t\tif (i % 2 == 0 and n[i] > n[i - 2]) or (i % 2 != 0 and n[i] < n[i - 2]): \n\t\t\t\treturn True\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\tif b == 0:\n\t\treturn 1\n\telif b < 0:\n\t\treturn 1/a**(-b)\n\telse:\n\t\treturn a*power(a,b-1)\n\nprint(power(2,3))\nprint(power(2,-3))\nprint(power(2,0))\nprint(power(2,1))\nprint(power(2,2))\nprint(power(2,4))\nprint(power(2,5))\nprint(power(2,6))\nprint(power(2,7))\nprint(power(2,8))\nprint(power(2,9))\nprint(power(2,10))\nprint(power(2,11))\nprint(power(2,12))\nprint(power(2,13))\nprint(power(2,14))\nprint(power(2,15))\nprint(power(2,16))\nprint(power(2,17))\nprint(power(2,18))\nprint(power(2,19))\nprint(power(2,20))\nprint(power(2,21))\nprint(power(2,22))\nprint(power(2,23))\nprint(power(2,24))\nprint(power(2,25))\nprint(power(2,26))\nprint(power(2,27))\nprint(power(2,28))\nprint(power(2,29))\nprint(power(2,30))\nprint(power(2,31))\nprint(power(2,32))\nprint(power(2,33))\nprint(power(2,34))\nprint(power(2,35))\nprint(power(2,36))\nprint(power(2,37))\nprint(power(2,38))\nprint(power(2,39))\nprint(power(2,40))\nprint(power(2,41))\nprint(power(2,42))\nprint(power(2,43))\nprint(power(2,44))\nprint(power(2,45))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(power(2,3))\nprint(power(2,-3))\nprint(power(2,0))\nprint(power(2,1))\nprint(power(2,2))\nprint(power(2,4))\nprint(power(2,5))\nprint(power(2,6))\nprint(power(2,7))\nprint(power(2,8))\nprint(power(2,9))\nprint(power(2,10))\nprint(power(2,11))\nprint(power(2,12))\nprint(power(2,13))\nprint(power(2,14))\nprint(power(2,15))\nprint(power(2,16))\nprint(power(2,17))\nprint(power(2,18))\nprint(power(2,19))\nprint(power(2,20))\nprint(power(2,21))\nprint(power(2,22))\nprint(power(2,23))\nprint(power(2,24))\nprint(power(2,25))\nprint(power(2,26))\nprint(power(2,27))\nprint(power(2,28))\nprint(power(2,29))\nprint(power(2,30))\nprint(power(2,31))\nprint(power(2,32))\nprint(power(2,33))\nprint(power(2,34))\nprint(power(2,35))\nprint(power(2,36))\nprint(power(2,37))\nprint(power(2,38))\nprint(power(2,39))\nprint(power(2,40))\nprint(power(2,41))\nprint(power(2,42))\nprint(power(2,43))\nprint(power(2,44))\nprint(power(2,45))\nprint"}
{"ID": 457, "source": "MBPP:94", "prompt": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum(test_list):\n\tmin_index = 0\n\tmin_value = test_list[0][1]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][1] < min_value:\n\t\t\tmin_value = test_list[i][1]\n\t\t\tmin_index = i\n\treturn test_list[min_index]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nprint(index_minimum(test_list))\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum(test_list):\n\tmax_index = 0\n\tmax_value = test_list[0][1]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][1] > max_value:\n\t\t\tmax_value = test_list[i][1]\n\t\t\tmax_index = i\n\treturn test_list[max_index]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nprint(index_maximum(test_list))\n\n\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\n\"\"\"\ndef index_minimum_key(test_list, key):\n\tmin_index = 0\n\tmin_value = test_list[0][key]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][key] < min_value:\n\t\t\tmin_value = test_list[i][key]\n\t\t\tmin_index = i\n\treturn test_list[min_index]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nprint(index_minimum_key(test_list, 1))\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmin_value = test_list[0][1]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][1] < min_value:\n\t\t\tmin_value = test_list[i][1]\n\t\t\tmin_index = i\n\treturn test_list[min_index]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nprint(index_minimum(test_list))\n\n\"\"\"\nWrite a function to extract the index maximum value record from the given tuples.\n\"\"\"\ndef index_maximum(test_list):\n\tmax_index = 0\n\tmax_value = test_list[0][1]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i][1] > max_value:\n\t\t\tmax_value = test_list[i][1]\n\t\t\tmax_index = i\n\treturn test_list[max_index]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nprint(index_maximum(test_list))\n\n\"\"\""}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\tmin_length = len(lst)\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1, len(lst)):\n\t\t\tif j-i < min_length:\n\t\t\t\tmin_length = j-i\n\treturn min_length\n\n\n\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_length = 0\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1, len(lst)):\n\t\t\tif j-i > max_length:\n\t\t\t\tmax_length = j-i\n\treturn max_length\n\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list of integers.\n\"\"\"\ndef Sum_List(lst):\n\treturn sum(lst)\n\n\n\"\"\"\nWrite a python function to find the product of all the elements in a list of integers.\n\"\"\"\ndef Product_List(lst):\n\tproduct = 1\n\tfor i in lst:\n\t\tproduct *= i\n\treturn product\n\n\n\"\"\"\nWrite a python function to find the maximum value in a list of integers.\n\"\"\"\ndef Max_List(lst):\n\treturn max(lst)\n\n\n\"\"\"\nWrite a python function to find the minimum value in a list of integers.\n\"\"\"\ndef Min_List(lst):\n\treturn min(lst)\n\n\n\"\"\"\nWrite a python function to find the average of a list of integers.\n\"\"\"\ndef Average_List(lst):\n\treturn sum(lst) / len(lst)\n\n\n\"\"\"\nWrite a python function to find the median of a list of integers.\n\"\"\"\ndef Median_List(lst):\n\tlst.sort()\n\tif len(lst) % 2 == 0:\n\t\tmedian = (lst[len(lst) // 2] + lst[len(lst) // 2 - 1]) / 2\n\telse:\n\t\tmedian = lst[len(lst) // 2]\n\treturn median\n\n\n\"\"\"\nWrite a python function to find the mode", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to find the sum of all the elements in a list of integers.\n\"\"\"\ndef Sum_List(lst):\n\treturn sum(lst)\n\n\n\"\"\"\nWrite a python function to find the product of all the elements in a list of integers.\n\"\"\"\ndef Product_List(lst):\n\tproduct = 1\n\tfor i in lst:\n\t\tproduct *= i\n\treturn product\n\n\n\"\"\"\nWrite a python function to find the maximum value in a list of integers.\n\"\"\"\ndef Max_List(lst):\n\treturn max(lst)\n\n\n\"\"\"\nWrite a python function to find the minimum value in a list of integers.\n\"\"\"\ndef Min_List(lst):\n\treturn min(lst)\n\n\n\"\"\"\nWrite a python function to find the average of a list of integers.\n\"\"\"\ndef Average_List(lst):\n\treturn sum(lst) / len(lst)\n\n\n\"\"\"\nWrite a python function to find the median of a list of integers.\n\"\"\"\ndef Median_List(lst):\n\tlst.sort()"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\tif n <= 1: \n\t\treturn n \n\telse: \n\t\treturn decimal_to_binary(n // 2) + str(n % 2) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:]\n\ndef snake_to_camel_2(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_3(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_4(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_5(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_6(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_7(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_8(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:]\n\ndef snake_to_camel_2(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_3(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_4(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_5(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_6(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_7(word):\n\t\"\"\"\n\t:type word: str\n\t:rtype: str\n\t\"\"\"\n\tif not word:\n\t\treturn word\n\treturn word[0].lower() + word[1:].title().replace('_', '')\n\ndef snake_to_camel_8(word):\n\t\"\"\""}
{"ID": 467, "source": "MBPP:104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists(input_list):\n\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_int(input_list):\n\treturn [sorted(sublist, key=lambda x: x) for sublist in input_list]\n\nprint(sort_sublists_int([[1, 3, 2], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_str(input_list):\n\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists_str([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_int(input_list):\n\treturn [sorted(sublist, key=lambda x: x) for sublist in input_list]\n\nprint(sort_sublists_int([[1, 3, 2], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_str(input_list):\n\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists_str([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_int(input_list):\n\treturn [sorted(sublist, key=lambda x: x) for sublist in input_list]\n\nprint(sort_sublists_int([[1, 3, 2], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_str(input_list):\n\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists_str([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_int(input_list):\n\treturn [sorted(sublist, key=lambda x: x) for sublist in input_list]\n\nprint(sort_sublists_int([[1, 3, 2], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\ndef sort_sublists_str(input_list):\n\treturn [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\nprint(sort_sublists_str([['c', 'a', 'B'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\n\n\"\"\"\nWrite a function to sort each sublist of integers in a given list of lists using lambda function.\n\"\"\"\ndef sort"}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\treturn lst.count(True)\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn lst.count(True)\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\"\nWrite a python function to get the maximum value from the list of dictionary values.\n\"\"\"\ndef get_max_value_from_list_of_dict_values(lst):\n    return max(lst, key=lambda x: x['age'])\n\n\n\"\"\""}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\treturn test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))\n\n\"\"\"\nWrite a function to add the given list to the given set.\n\"\"\"\ndef add_lists(test_list, test_set):\n\treturn test_set | set(test_list)\n\nprint(add_lists([1, 2, 3], {4, 5, 6}))\n\n\"\"\"\nWrite a function to add the given list to the given frozenset.\n\"\"\"\ndef add_lists(test_list, test_frozenset):\n\treturn test_frozenset | frozenset(test_list)\n\nprint(add_lists([1, 2, 3], frozenset({4, 5, 6})))\n\n\"\"\"\nWrite a function to add the given list to the given list.\n\"\"\"\ndef add_lists(test_list, test_list2):\n\treturn test_list + test_list2\n\nprint(add_lists([1, 2, 3], [4, 5, 6]))\n\n\"\"\"\nWrite a function to add the given list to the given dict.\n\"\"\"\ndef add_lists(test_list, test_dict):\n\treturn test_dict | {k: v for k, v in zip(test_list, test_list)}\n\nprint(add_lists([1, 2, 3], {4: 5, 6: 7}))\n\n\"\"\"\nWrite a function to add the given list to the given string.\n\"\"\"\ndef add_lists(test_list, test_str):\n\treturn test_str + ''.join(test_list)\n\nprint(add_lists([1, 2, 3], 'abc'))\n\n\"\"\"\nWrite a function to add the given list to the given bytes.\n\"\"\"\ndef add_lists(test_list, test_bytes):\n\treturn test_bytes + bytes(test_list)\n\nprint(add_lists([1, 2, 3], b'abc'))\n\n\"\"\"\nWrite a function to add the given list to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(add_lists([1, 2, 3], (4, 5, 6)))\n\n\"\"\"\nWrite a function to add the given list to the given set.\n\"\"\"\ndef add_lists(test_list, test_set):\n\treturn test_set | set(test_list)\n\nprint(add_lists([1, 2, 3], {4, 5, 6}))\n\n\"\"\"\nWrite a function to add the given list to the given frozenset.\n\"\"\"\ndef add_lists(test_list, test_frozenset):\n\treturn test_frozenset | frozenset(test_list)\n\nprint(add_lists([1, 2, 3], frozenset({4, 5, 6})))\n\n\"\"\"\nWrite a function to add the given list to the given list.\n\"\"\"\ndef add_lists(test_list, test_list2):\n\treturn test_list + test_list2\n\nprint(add_lists([1, 2, 3], [4, 5, 6]))\n\n\"\"\"\nWrite a function to add the given list to the given dict.\n\"\"\"\ndef add_lists(test_list, test_dict):\n\treturn test_dict | {k: v for k, v in zip(test_list, test_list)}\n\nprint(add_lists([1, 2, 3], {4: 5, 6: 7}))\n\n\"\"\"\nWrite a function to add the given list to the given string.\n\"\"\"\ndef add_lists(test_list, test_str):\n\treturn test_str + ''.join(test_list)\n\nprint(add_lists([1, 2, 3], 'abc'))\n\n\"\"\"\nWrite a function to add the given list to the given bytes.\n\"\"\"\ndef add_lists(test_list, test_bytes):\n\treturn test_bytes + bytes(test_list)\n\nprint(add_lists([1, 2, 3], b'abc'))\n\n\"\"\"\nWrite a function to add the given list to"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\tcount = 0\n\tfor i in range(L,R+1) :\n\t\tif i > 9 and i < 16 :\n\t\t\tcount += 1\n\treturn count\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(1 for i in range(L,R+1) if i > 9 and i < 16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i>9 and i<16 for i in range(L,R+1))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(map(lambda x: x>9 and x<16, range(L,R+1)))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(filter(lambda x: x>9 and x<16, range(L,R+1)))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef count_Hexadecimal(L,R) :  \n\treturn sum(1 for i in range(L,R+1) if i > 9 and i < 16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i>9 and i<16 for i in range(L,R+1))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(map(lambda x: x>9 and x<16, range(L,R+1)))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(filter(lambda x: x>9 and x<16, range(L,R+1)))\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range(L,R+1) if i>9 and i<16)\n\ndef count_Hexadecimal(L,R) :  \n\treturn sum(i for i in range("}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t# Code here\n\tcount = 0\n\tfor i in range(n):\n\t\tif s[i] != s[i+1]:\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\tmissing_ranges = []\n\tfor i in range(strt_val, stop_val+1):\n\t\tif i not in test_list:\n\t\t\tmissing_ranges.append(i)\n\treturn missing_ranges\n\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 9))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 10))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 11))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 12))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 13))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 14))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 15))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 16))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 17))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 18))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 19))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 20))\nprint(extract_missing([1, 2, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 9))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 10))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 11))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 12))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 13))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 14))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 15))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 16))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 17))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 18))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 19))\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8, 9], 1, 20))\nprint(extract_missing([1, 2, "}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "<s> \"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\tcommon_elements = []\n\tfor i in range(len(nestedlist)):\n\t\tfor j in range(i+1, len(nestedlist)):\n\t\t\tcommon_elements = list(set(nestedlist[i]) & set(nestedlist[j]))\n\treturn common_elements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\treturn 2 * (diameter + height)\n\n\"\"\"\nWrite a python function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter(width,height) : \n\treturn 2 * (width + height)\n\n\"\"\"\nWrite a python function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter(side1,side2,side3) : \n\treturn side1 + side2 + side3\n\n\"\"\"\nWrite a python function to find the perimeter of a circle.\n\"\"\"\ndef perimeter(radius) : \n\treturn 2 * 3.14 * radius\n\n\"\"\"\nWrite a python function to find the perimeter of a square.\n\"\"\"\ndef perimeter(side) : \n\treturn 4 * side\n\n\"\"\"\nWrite a python function to find the perimeter of a rhombus.\n\"\"\"\ndef perimeter(side1,side2) : \n\treturn 2 * (side1 + side2)\n\n\"\"\"\nWrite a python function to find the perimeter of a trapezoid.\n\"\"\"\ndef perimeter(side1,side2,side3,side4) : \n\treturn side1 + side2 + side3 + side4\n\n\"\"\"\nWrite a python function to find the perimeter of a parallelogram.\n\"\"\"\ndef perimeter(side1,side2,angle) : \n\treturn side1 + side2 + 2 * (side1 * sin(angle))\n\n\"\"\"\nWrite a python function to find the perimeter of a kite.\n\"\"\"\ndef perimeter(side1,side2,side3,side4) : \n\treturn side1 + side2 + side3 + side4\n\n\"\"\"\nWrite a python function to find the perimeter of a hexagon.\n\"\"\"\ndef perimeter(side1,side2,side3,side4,side5,side6) : \n\treturn side1 + side2 + side3 + side4 + side5 + side6\n\n\"\"\"\nWrite a python function to find the perimeter of a heptagon.\n\"\"\"\ndef perimeter(side1,side2,side3,side4,side5,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * (diameter + height)\n\n\"\"\"\nWrite a python function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter(width,height) : \n\treturn 2 * (width + height)\n\n\"\"\"\nWrite a python function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter(side1,side2,side3) : \n\treturn side1 + side2 + side3\n\n\"\"\"\nWrite a python function to find the perimeter of a circle.\n\"\"\"\ndef perimeter(radius) : \n\treturn 2 * 3.14 * radius\n\n\"\"\"\nWrite a python function to find the perimeter of a square.\n\"\"\"\ndef perimeter(side) : \n\treturn 4 * side\n\n\"\"\"\nWrite a python function to find the perimeter of a rhombus.\n\"\"\"\ndef perimeter(side1,side2) : \n\treturn 2 * (side1 + side2)\n\n\"\"\"\nWrite a python function to find the perimeter of a trapezoid.\n\"\"\"\ndef perimeter(side1,side2,side3,side4) : \n\treturn side1 + side2 + side3 + side4\n\n\"\"\"\nWrite a python function to find the perimeter of a parallelogram.\n\"\"\"\ndef perimeter(side1,side2,angle) : \n\treturn side1 + side2 + 2 * (side1 * sin(angle))\n\n\"\"\"\nWrite a python function to find the perimeter of a kite.\n\"\"\"\ndef perimeter(side1,side2,side3,side4) : \n\treturn side1 + side2 + side3 + side4\n\n\"\"\"\nWrite a python function to find the perimeter of a hexagon.\n\"\"\"\ndef perimeter(side1,side2,side3,side4,side5,side6) : \n\treturn side1 + side2 + side3 + side4 + side5 + side6\n\n\"\"\"\nWrite a python function to find the perimeter of a heptagon.\n\"\"\"\ndef perimeter(side1,side2,side3,side4,side5,"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\nprint(check_integer(\"123\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.456\"))\nprint(check_integer(\"-123\"))\nprint(check_integer(\"+123\"))\nprint(check_integer(\"\"))\nprint(check_integer(\" \"))\nprint(check_integer(\"  \"))\nprint(check_integer(\"123 \"))\nprint(check_integer(\" 123\"))\nprint(check_integer(\" 123 \"))\nprint(check_integer(\"123.0\"))\nprint(check_integer(\"123.00\"))\nprint(check_integer(\"123.000\"))\nprint(check_integer(\"123.0000\"))\nprint(check_integer(\"123.00000\"))\nprint(check_integer(\"123.000000\"))\nprint(check_integer(\"123.0000000\"))\nprint(check_integer(\"123.00000000\"))\nprint(check_integer(\"123.000000000\"))\nprint(check_integer(\"123.0000000000\"))\nprint(check_integer(\"123.00000000000\"))\nprint(check_integer(\"123.000000000000\"))\nprint(check_integer(\"123.0000000000000\"))\nprint(check_integer(\"123.00000000000000\"))\nprint(check_integer(\"123.000000000000000\"))\nprint(check_integer(\"123.0000000000000000\"))\nprint(check_integer(\"123.00000000000000000\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_integer(\"123\"))\nprint(check_integer(\"123a\"))\nprint(check_integer(\"123.456\"))\nprint(check_integer(\"-123\"))\nprint(check_integer(\"+123\"))\nprint(check_integer(\"\"))\nprint(check_integer(\" \"))\nprint(check_integer(\"  \"))\nprint(check_integer(\"123 \"))\nprint(check_integer(\" 123\"))\nprint(check_integer(\" 123 \"))\nprint(check_integer(\"123.0\"))\nprint(check_integer(\"123.00\"))\nprint(check_integer(\"123.000\"))\nprint(check_integer(\"123.0000\"))\nprint(check_integer(\"123.00000\"))\nprint(check_integer(\"123.000000\"))\nprint(check_integer(\"123.0000000\"))\nprint(check_integer(\"123.00000000\"))\nprint(check_integer(\"123.000000000\"))\nprint(check_integer(\"123.0000000000\"))\nprint(check_integer(\"123.00000000000\"))\nprint(check_integer(\"123.000000000000\"))\nprint(check_integer(\"123.0000000000000\"))\nprint(check_integer(\"123.00000000000000\"))\nprint(check_integer(\"123.000000000000000\"))\nprint(check_integer(\"123.0000000000000000\"))\nprint(check_integer(\"123.00000000000000000\"))\nprint("}
{"ID": 477, "source": "MBPP:114", "prompt": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\ndef assign_freq(test_list):\n\t\"\"\"\n\t:param test_list: list of tuples\n\t:return: list of tuples with frequency\n\t\"\"\"\n\tfreq_dict = {}\n\tfor i in test_list:\n\t\tif i not in freq_dict:\n\t\t\tfreq_dict[i] = 1\n\t\telse:\n\t\t\tfreq_dict[i] += 1\n\tfor i in freq_dict:\n\t\ti += (freq_dict[i],)\n\treturn i\n\n\nif __name__ == '__main__':\n\ttest_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', '", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', '"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\tfor i in list1:\n\t\tif i:\n\t\t\treturn False\n\treturn True\n\nprint(empty_dit([{} for i in range(5)]))\nprint(empty_dit([{1:2} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18, 19:20} for i in range(5)]))\nprint(empty_dit([{1:2,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(empty_dit([{} for i in range(5)]))\nprint(empty_dit([{1:2} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18} for i in range(5)]))\nprint(empty_dit([{1:2, 3:4, 5:6, 7:8, 9:10, 11:12, 13:14, 15:16, 17:18, 19:20} for i in range(5)]))\nprint(empty_dit([{1:2,"}
{"ID": 480, "source": "MBPP:117", "prompt": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\n\"\"\"\ndef list_to_float(test_list):\n\tnew_list = []\n\tfor element in test_list:\n\t\ttry:\n\t\t\tnew_list.append(float(element))\n\t\texcept ValueError:\n\t\t\tnew_list.append(element)\n\treturn new_list\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7]))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7]\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f', 'g']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn new_list\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7]))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7]\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f']))\n# [1.0, 2.0, 3.0, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f']\n\nprint(list_to_float([1, 2, 3, 'a', 'b', 'c', 4.5, 5.6, 6.7, 'd', 'e', 'f', 'g']))"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "<s> \"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\treturn list(string)\n\n\"\"\"\nGiven a string, return a list of characters that are not in the string \"aeiou\".\nFor example, if the input string is \"hello\", return the list [\"h\", \"l\", \"l\"].\n\nNote: you may want to use the built-in method in Python.\n\"\"\"\ndef disemvowel(string):\n\treturn [char for char in string if char.lower() not in \"aeiou\"]\n\n\"\"\"\nGiven a string, return a new string where all the whitespace has been removed.\n\nNote: there is a built-in method in Python called str.strip() that can be used to solve this problem.\n\"\"\"\ndef no_whitespace(string):\n\treturn string.strip()\n\n\"\"\"\nGiven a string, return a new string where all the whitespace has been replaced with the given character.\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n\"\"\"\ndef replace_whitespace(string, character):\n\treturn string.replace(\" \", character)\n\n\"\"\"\nGiven a string, return a new string where all the characters are made uppercase.\n\nNote: there is a built-in method in Python called str.upper() that can be used to solve this problem.\n\"\"\"\ndef uppercase(string):\n\treturn string.upper()\n\n\"\"\"\nGiven a string, return a new string where all the characters are made lowercase.\n\nNote: there is a built-in method in Python called str.lower() that can be used to solve this problem.\n\"\"\"\ndef lowercase(string):\n\treturn string.lower()\n\n\"\"\"\nGiven a string, return a new string where all the spaces have been removed.\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n\"\"\"\ndef no_spaces(string):\n\treturn string.replace(\" \", \"\")\n\n\"\"\"\nGiven a string, return a new string where all the instances of \"a\" have been replaced by \"x\".\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Given a string, return a new string where all the whitespace has been replaced with the given character.\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n\"\"\"\ndef replace_whitespace(string, character):\n\treturn string.replace(\" \", character)\n\n\"\"\"\nGiven a string, return a new string where all the characters are made uppercase.\n\nNote: there is a built-in method in Python called str.upper() that can be used to solve this problem.\n\"\"\"\ndef uppercase(string):\n\treturn string.upper()\n\n\"\"\"\nGiven a string, return a new string where all the characters are made lowercase.\n\nNote: there is a built-in method in Python called str.lower() that can be used to solve this problem.\n\"\"\"\ndef lowercase(string):\n\treturn string.lower()\n\n\"\"\"\nGiven a string, return a new string where all the spaces have been removed.\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n\"\"\"\ndef no_spaces(string):\n\treturn string.replace(\" \", \"\")\n\n\"\"\"\nGiven a string, return a new string where all the instances of \"a\" have been replaced by \"x\".\n\nNote: there is a built-in method in Python called str.replace() that can be used to solve this problem.\n"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:\n\t\t\t\tmax_product = j[0] * j[1]\n\treturn max_product\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))\n\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in list1:\n\t\tfor j in i:\n\t\t\tif max_product < j[0] * j[1]:"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\tfor i in range(2, n): \n\t\t\tif i % 2 == 0: \n\t\t\t\tif i % 3 == 0: \n\t\t\t\t\tcontinue\n\t\t\t\telse: \n\t\t\t\t\treturn i \n\t\t\telse: \n\t\t\t\tif i % 3 == 0: \n\t\t\t\t\treturn i \n\t\t\t\telse: \n\t\t\t\t\tcontinue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\tif a == 0 and b == 0:\n\t\treturn 0\n\treturn (math.atan2(b,a))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\treturn a+b \n\ndef sum_of_common_divisors(a, b):\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 490, "source": "MBPP:127", "prompt": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\t", "predict": "<s> \"\"\"\nWrite a function to multiply two integers without using the * operator in python.\n\"\"\"\ndef multiply_int(x, y):\n\treturn x * y\n\ndef multiply_int_recursive(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply_int_recursive(x, y - 1)\n\ndef multiply_int_loop(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tresult += x\n\t\ty -= 1\n\treturn result\n\ndef multiply_int_bitwise(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_2(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_3(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_4(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_5(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 0\n\telse:\n\t\treturn x + multiply_int_recursive(x, y - 1)\n\ndef multiply_int_loop(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tresult += x\n\t\ty -= 1\n\treturn result\n\ndef multiply_int_bitwise(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_2(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_3(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_4(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result\n\ndef multiply_int_bitwise_loop_5(x, y):\n\tresult = 0\n\twhile y > 0:\n\t\tif y & 1:\n\t\t\tresult += x\n\t\ty >>= 1\n\t\tx <<= 1\n\treturn result"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "<s> \"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\treturn [word for word in str if len(word) > n]\n\nprint(long_words(5, ['hello', 'world', 'python', 'java', 'c++']))\n\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix(str):\n\tif not str:\n\t\treturn ''\n\tfor i, char in enumerate(str[0]):\n\t\tfor s in str[1:]:\n\t\t\tif s[i] != char:\n\t\t\t\treturn str[:i]\n\treturn str\n\nprint(longest_common_prefix(['flower', 'flow', 'flight']))\n\n\"\"\"\nWrite a function to find the longest common suffix from a list of strings.\n\"\"\"\ndef longest_common_suffix(str):\n\tif not str:\n\t\treturn ''\n\tfor i in range(len(str[0])):\n\t\tfor s in str[1:]:\n\t\t\tif s[-i-1] != str[0][-i-1]:\n\t\t\t\treturn str[:-i]\n\treturn str\n\nprint(longest_common_suffix(['apple', 'banana', 'cherry']))\n\n\"\"\"\nWrite a function to find the longest common substring from a list of strings.\n\"\"\"\ndef longest_common_substring(str):\n\tif not str:\n\t\treturn ''\n\tfor i in range(len(str[0])):\n\t\tfor s in str[1:]:\n\t\t\tif s[i] != str[0][i]:\n\t\t\t\treturn str[:i]\n\treturn str\n\nprint(longest_common_substring(['banana', 'ban', 'banner']))\n\n\"\"\"\nWrite a function to find the shortest common superstring from a list of strings.\n\"\"\"\ndef shortest_common_superstring(str):\n\tif not str:\n\t\treturn ''\n\tfor i in range(len(str[0])):\n\t\tfor s in str[1:]:\n\t\t\tif s[i] != str[0][i]:\n\t\t\t\treturn str[:i]\n\treturn str\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the longest common prefix from a list of strings.\n\"\"\"\ndef longest_common_prefix(str):\n\tif not str:\n\t\treturn ''\n\tfor i, char in enumerate(str[0]):\n\t\tfor s in str[1:]:\n\t\t\tif s[i] != char:\n\t\t\t\treturn str[:i]\n\treturn str\n\nprint(longest_common_prefix(['flower', 'flow', 'flight']))\n\n\"\"\"\nWrite a function to find the longest common suffix from a list of strings.\n\"\"\"\ndef longest_common_suffix(str):\n\tif not str:\n\t\treturn ''\n\tfor i in range(len(str[0])):\n\t\tfor s in str[1:]:\n\t\t\tif s[-i-1] != str[0][-i-1]:\n\t\t\t\treturn str[:-i]\n\treturn str\n\nprint(longest_common_suffix(['apple', 'banana', 'cherry']))\n\n\"\"\"\nWrite a function to find the longest common substring from a list of strings.\n\"\"\"\ndef longest_common_substring(str):\n\tif not str:\n\t\treturn ''\n\tfor i in range(len(str[0])):"}
{"ID": 492, "source": "MBPP:129", "prompt": "\"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate magic square.\n\"\"\"\ndef magic_square_test(my_matrix):\n\t\"\"\"\n\tTest if a matrix is a magic square.\n\t\"\"\"\n\t# Check if the matrix is a square matrix.\n\tif len(my_matrix) != len(my_matrix[0]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[1]) or sum(my_matrix[1]) != sum(my_matrix[2]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[2]) or sum(my_matrix[2]) != sum(my_matrix[3]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[3]) or sum(my_matrix[3]) != sum(my_matrix[4]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[4]) or sum(my_matrix[4]) != sum(my_matrix[5]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[5]) or sum(my_matrix[5]) != sum(my_matrix[6]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[6]) or sum(my_matrix[6]) != sum(my_matrix[7]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[7]) or sum(my_matrix[7]) != sum(my_matrix[8]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[8]) or sum(my_matrix[8]) != sum(my_matrix[9]):\n\t\treturn False\n\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[1]) or sum(my_matrix[1]) != sum(my_matrix[2]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[2]) or sum(my_matrix[2]) != sum(my_matrix[3]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[3]) or sum(my_matrix[3]) != sum(my_matrix[4]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[4]) or sum(my_matrix[4]) != sum(my_matrix[5]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[5]) or sum(my_matrix[5]) != sum(my_matrix[6]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[6]) or sum(my_matrix[6]) != sum(my_matrix[7]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[7]) or sum(my_matrix[7]) != sum(my_matrix[8]):\n\t\treturn False\n\n\t# Check if the matrix is a magic square.\n\tif sum(my_matrix[0]) != sum(my_matrix[8]) or sum(my_matrix[8]) != sum(my_matrix[9]):"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\treturn int((n * (n + 1)) / 2) \n\ndef hexagonal_num_fast(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestestestest(n):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int((n * (n + 1)) / 2) \n\ndef hexagonal_num_fast(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestestest(n):\n\treturn int((n * (n + 1)) / 2)\n\ndef hexagonal_num_fastestestestestestestestestestestestestest(n):"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True\n\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1 == 1: \n\t\t\treturn False\n\t\tn >>= 1\n\treturn True"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef cylinder_surface_area(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef cone_surface_area(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef rectangular_prism_volume(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef rectangular_prism_surface_area(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef triangular_prism_volume(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the surface area of a triangular", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef cylinder_surface_area(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef cone_surface_area(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef rectangular_prism_volume(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef rectangular_prism_surface_area(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef triangular_prism_volume(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the surface area of a triangular"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums\n\tresult = []\n\tfor i in range(len(nums)-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif nums[j] > nums[max_index]:\n\t\t\t\tmax_index = j\n\t\tif max_index != i:\n\t\t\tresult.append(i+1)\n\t\t\tresult.append(max_index+1)\n\t\t\tnums[max_index], nums[i] = nums[i], nums[max_index]\n\tresult.append(1)\n\treturn result\n\ndef pancake_sort_2(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums\n\tresult = []\n\tfor i in range(len(nums)-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif nums[j] > nums[max_index]:\n\t\t\t\tmax_index = j\n\t\tif max_index != i:\n\t\t\tresult.append(i+1)\n\t\t\tresult.append(max_index+1)\n\t\t\tnums[max_index], nums[i] = nums[i], nums[max_index]\n\tresult.append(1)\n\treturn result\n\ndef pancake_sort_3(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums\n\tresult = []\n\tfor i in range(len(nums)-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif num", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums\n\tresult = []\n\tfor i in range(len(nums)-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif nums[j] > nums[max_index]:\n\t\t\t\tmax_index = j\n\t\tif max_index != i:\n\t\t\tresult.append(i+1)\n\t\t\tresult.append(max_index+1)\n\t\t\tnums[max_index], nums[i] = nums[i], nums[max_index]\n\tresult.append(1)\n\treturn result\n\ndef pancake_sort_2(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) == 1:\n\t\treturn nums\n\tresult = []\n\tfor i in range(len(nums)-1, 0, -1):\n\t\tmax_index = i\n\t\tfor j in range(i):\n\t\t\tif nums[j] > nums[max_index]:\n\t\t\t\tmax_index = j"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<s> \"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\treturn len(Input)\n\n# Test cases:\nprint(find_lists((\"a\", \"b\", \"c\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_lists((\"a\", \"b\", \"c\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\")))\nprint(find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\","}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\tif a==b or b==c or c==a: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain(n): \n\ta,b,c=1,2,3\n\twhile True: \n\t\tif a==n or b==n or c==n: \n\t\t\treturn True\n\t\ta,b,c=b,c,a+b+c \n\nprint(does_Contain(10))\nprint(does_Contain(100))\nprint(does_Contain(1000))\nprint(does_Contain(10000))\nprint(does_Contain(100000))\nprint(does_Contain(1000000))\nprint(does_Contain(10000000))\nprint(does_Contain(100000000))\nprint(does_Contain(1000000000))\nprint(does_Contain(10000000000))\nprint(does_Contain(100000000000))\nprint(does_Contain(1000000000000))\nprint(does_Contain(10000000000000))\nprint(does_Contain(100000000000000))\nprint(does_Contain(1000000000000000))\nprint(does_Contain(10000000000000000))\nprint(does_Contain(100000000000000000))\nprint(does_Contain(1000000000000000000))\nprint(does_Contain(10000000000000000000))\nprint(does_Contain(100000000000000000000))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(does_Contain(10))\nprint(does_Contain(100))\nprint(does_Contain(1000))\nprint(does_Contain(10000))\nprint(does_Contain(100000))\nprint(does_Contain(1000000))\nprint(does_Contain(10000000))\nprint(does_Contain(100000000))\nprint(does_Contain(1000000000))\nprint(does_Contain(10000000000))\nprint(does_Contain(100000000000))\nprint(does_Contain(1000000000000))\nprint(does_Contain(10000000000000))\nprint(does_Contain(100000000000000))\nprint(does_Contain(1000000000000000))\nprint(does_Contain(10000000000000000))\nprint(does_Contain(100000000000000000))\nprint(does_Contain(1000000000000000000))\nprint(does_Contain(10000000000000000000))\nprint(does_Contain(100000000000000000000))"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x==1 or y==1:\n\t\treturn True\n\tfor i in range(2,min(x,y)+1):\n\t\tif x%i==0 and y%i==0:\n\t\t\treturn False\n\treturn True\n\n\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\tif len(x) > 1:\n\t\tmid = len(x) // 2\n\t\tL = x[:mid]\n\t\tR = x[mid:]\n\t\tmerge_sort(L)\n\t\tmerge_sort(R)\n\t\ti = j = k = 0\n\t\twhile i < len(L) and j < len(R):\n\t\t\tif L[i] < R[j]:\n\t\t\t\tx[k] = L[i]\n\t\t\t\ti += 1\n\t\t\telse:\n\t\t\t\tx[k] = R[j]\n\t\t\t\tj += 1\n\t\t\tk += 1\n\t\twhile i < len(L):\n\t\t\tx[k] = L[i]\n\t\t\ti += 1\n\t\t\tk += 1\n\t\twhile j < len(R):\n\t\t\tx[k] = R[j]\n\t\t\tj += 1\n\t\t\tk += 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn -b/(2*a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 517, "source": "MBPP:154", "prompt": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\n\"\"\"\ndef specified_element(nums, N):\n\treturn [nums[i][N-1] for i in range(len(nums))]\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 3))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of at most k elements.\n\"\"\"\ndef max_subarray_sum(arr, k):\n\tif k == 0:\n\t\treturn 0\n\tif k == 1:\n\t\treturn max(arr)\n\tif k == len(arr):\n\t\treturn sum(arr)\n\t\n\tmax_sum = 0\n\tfor i in range(len(arr)):\n\t\tmax_sum = max(max_sum, max_subarray_sum(arr[i+1:], k-1))\n\treturn max(max_sum, max_subarray_sum(arr[i+1:], k-1) + arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_subarray_sum(arr, 3))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of at most k elements.\n\"\"\"\ndef max_subarray_sum(arr, k):\n\tif k == 0:\n\t\treturn 0\n\tif k == 1:\n\t\treturn max(arr)\n\tif k == len(arr):\n\t\treturn sum(arr)\n\t\n\tmax_sum = 0\n\tfor i in range(len(arr)):\n\t\tmax_sum = max(max_sum, max_subarray_sum(arr[i+1:], k-1))\n\treturn max(max_sum, max_subarray_sum(arr[i+1:], k-1) + arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_subarray_sum(arr, 3))\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif k == len(arr):\n\t\treturn sum(arr)\n\t\n\tmax_sum = 0\n\tfor i in range(len(arr)):\n\t\tmax_sum = max(max_sum, max_subarray_sum(arr[i+1:], k-1))\n\treturn max(max_sum, max_subarray_sum(arr[i+1:], k-1) + arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_subarray_sum(arr, 3))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of at most k elements.\n\"\"\"\ndef max_subarray_sum(arr, k):\n\tif k == 0:\n\t\treturn 0\n\tif k == 1:\n\t\treturn max(arr)\n\tif k == len(arr):\n\t\treturn sum(arr)\n\t\n\tmax_sum = 0\n\tfor i in range(len(arr)):\n\t\tmax_sum = max(max_sum, max_subarray_sum(arr[i+1:], k-1))\n\treturn max(max_sum, max_subarray_sum(arr[i+1:], k-1) + arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\treturn n ^ 0xAAAAAAAA \n\n\n\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef odd_bit_toggle_number(n) : \n\treturn n ^ 0x55555555 \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_all_bits_number(n) : \n\treturn n ^ 0xFFFFFFFF \n\n\n\"\"\"\nWrite a python function to toggle all bits of a given number.\n\"\"\"\ndef toggle_"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\treturn tuple(int(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of float values.\n\"\"\"\ndef tuple_float_str(tuple_str):\n\treturn tuple(float(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of boolean values.\n\"\"\"\ndef tuple_bool_str(tuple_str):\n\treturn tuple(bool(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of string values.\n\"\"\"\ndef tuple_str_str(tuple_str):\n\treturn tuple(str(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of tuple values.\n\"\"\"\ndef tuple_tuple_str(tuple_str):\n\treturn tuple(tuple(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of list values.\n\"\"\"\ndef tuple_list_str(tuple_str):\n\treturn tuple(list(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of set values.\n\"\"\"\ndef tuple_set_str(tuple_str):\n\treturn tuple(set(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of dictionary values.\n\"\"\"\ndef tuple_dict_str(tuple_str):\n\treturn tuple(dict(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of frozenset values.\n\"\"\"\ndef tuple_frozenset_str(tuple_str):\n\treturn tuple(frozenset(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of deque values.\n\"\"\"\ndef tuple_deque_str(tuple_str):\n\treturn tuple(deque(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(int(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of float values.\n\"\"\"\ndef tuple_float_str(tuple_str):\n\treturn tuple(float(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of boolean values.\n\"\"\"\ndef tuple_bool_str(tuple_str):\n\treturn tuple(bool(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of string values.\n\"\"\"\ndef tuple_str_str(tuple_str):\n\treturn tuple(str(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of tuple values.\n\"\"\"\ndef tuple_tuple_str(tuple_str):\n\treturn tuple(tuple(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of list values.\n\"\"\"\ndef tuple_list_str(tuple_str):\n\treturn tuple(list(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of set values.\n\"\"\"\ndef tuple_set_str(tuple_str):\n\treturn tuple(set(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of dictionary values.\n\"\"\"\ndef tuple_dict_str(tuple_str):\n\treturn tuple(dict(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of frozenset values.\n\"\"\"\ndef tuple_frozenset_str(tuple_str):\n\treturn tuple(frozenset(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of deque values.\n\"\"\"\ndef tuple_deque_str(tuple_str):"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t\"\"\"\n\t:param list1: list of integers\n\t:return: list of tuples\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif i == 0:\n\t\t\tresult.append((list1[i], 1))\n\t\telse:\n\t\t\tif list1[i] == list1[i-1]:\n\t\t\t\tresult[-1] = (list1[i-1], result[-1][1] + 1)\n\t\t\telse:\n\t\t\t\tresult.append((list1[i], 1))\n\treturn result\n\ndef decode_list(list1):\n\t\"\"\"\n\t:param list1: list of tuples\n\t:return: list of integers\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tresult.extend([list1[i][0]] * list1[i][1])\n\treturn result\n\ndef reflect_list(list1):\n\t\"\"\"\n\t:param list1: list of tuples\n\t:return: list of integers\n\t\"\"\"\n\treturn decode_list(encode_list(list1))\n\nif __name__ == '__main__':\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(reflect_list([(1, 2), (2, 3), (3, 4)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]))\n\tprint(reflect_list([(1, 2), (2, 3), (3, 4), (4,"}
{"ID": 521, "source": "MBPP:158", "prompt": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\n\"\"\"\ndef min_Ops(arr,n,k): \n\t# Your code goes here\n\tarr.sort()\n\tcount = 0\n\tfor i in range(n-1):\n\t\tif arr[i] != arr[i+1]:\n\t\t\tcount += abs(arr[i] - arr[i+1])\n\t\t\tif count > k:\n\t\t\t\treturn -1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<s> \"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tif month in [12,1,2]:\n\t\tif days in [1,2]:\n\t\t\treturn \"Winter\"\n\t\telse:\n\t\t\treturn \"Spring\"\n\telif month in [3,4,5]:\n\t\tif days in [1,2]:\n\t\t\treturn \"Spring\"\n\t\telse:\n\t\t\treturn \"Summer\"\n\telif month in [6,7,8]:\n\t\tif days in [1,2]:\n\t\t\treturn \"Summer\"\n\t\telse:\n\t\t\treturn \"Autumn\"\n\telse:\n\t\tif days in [1,2]:\n\t\t\treturn \"Autumn\"\n\t\telse:\n\t\t\treturn \"Winter\"\n\nprint(month_season(12,1))\nprint(month_season(1,1))\nprint(month_season(3,1))\nprint(month_season(6,1))\nprint(month_season(12,2))\nprint(month_season(1,2))\nprint(month_season(3,2))\nprint(month_season(6,2))\nprint(month_season(12,3))\nprint(month_season(1,3))\nprint(month_season(3,3))\nprint(month_season(6,3))\nprint(month_season(12,4))\nprint(month_season(1,4))\nprint(month_season(3,4))\nprint(month_season(6,4))\nprint(month_season(12,5))\nprint(month_season(1,5))\nprint(month_season(3,5))\nprint(month_season(6,5))\nprint(month_season(12,6))\nprint(month_season(1,6))\nprint(month_season(3,6))\nprint(month_season(6,6))\nprint(month_season(12,7))\nprint(month_season(1,7))\nprint(month_season(3,7))\nprint(month_season(6,7))\nprint(month_season(12,8))\nprint(month_season(1,8))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(month_season(12,1))\nprint(month_season(1,1))\nprint(month_season(3,1))\nprint(month_season(6,1))\nprint(month_season(12,2))\nprint(month_season(1,2))\nprint(month_season(3,2))\nprint(month_season(6,2))\nprint(month_season(12,3))\nprint(month_season(1,3))\nprint(month_season(3,3))\nprint(month_season(6,3))\nprint(month_season(12,4))\nprint(month_season(1,4))\nprint(month_season(3,4))\nprint(month_season(6,4))\nprint(month_season(12,5))\nprint(month_season(1,5))\nprint(month_season(3,5))\nprint(month_season(6,5))\nprint(month_season(12,6))\nprint(month_season(1,6))\nprint(month_season(3,6))\nprint(month_season(6,6))\nprint(month_season(12,7))\nprint(month_season(1,7))\nprint(month_season(3,7))\nprint(month_season(6,7))\nprint(month_season(12,8))\nprint(month_season(1,8))"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\tx = 0\n\ty = 0\n\tfor i in range(1, n+1):\n\t\tif a*i + b == n:\n\t\t\tx = i\n\t\t\ty = n - i\n\treturn x, y\n\nprint(solution(1, 1, 2))\nprint(solution(2, 3, 6))\nprint(solution(3, 5, 15))\nprint(solution(1, 2, 3))\nprint(solution(1, 2, 4))\nprint(solution(1, 2, 5))\nprint(solution(1, 2, 6))\nprint(solution(1, 2, 7))\nprint(solution(1, 2, 8))\nprint(solution(1, 2, 9))\nprint(solution(1, 2, 10))\nprint(solution(1, 2, 11))\nprint(solution(1, 2, 12))\nprint(solution(1, 2, 13))\nprint(solution(1, 2, 14))\nprint(solution(1, 2, 15))\nprint(solution(1, 2, 16))\nprint(solution(1, 2, 17))\nprint(solution(1, 2, 18))\nprint(solution(1, 2, 19))\nprint(solution(1, 2, 20))\nprint(solution(1, 2, 21))\nprint(solution(1, 2, 22))\nprint(solution(1, 2, 23))\nprint(solution(1, 2, 24))\nprint(solution(1, 2, 25))\nprint(solution(1, 2, 26))\nprint(solution(1, 2, 27))\nprint(solution(1, 2, 28))\nprint(solution(1, 2, 29))\nprint(solution(1, 2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(solution(1, 1, 2))\nprint(solution(2, 3, 6))\nprint(solution(3, 5, 15))\nprint(solution(1, 2, 3))\nprint(solution(1, 2, 4))\nprint(solution(1, 2, 5))\nprint(solution(1, 2, 6))\nprint(solution(1, 2, 7))\nprint(solution(1, 2, 8))\nprint(solution(1, 2, 9))\nprint(solution(1, 2, 10))\nprint(solution(1, 2, 11))\nprint(solution(1, 2, 12))\nprint(solution(1, 2, 13))\nprint(solution(1, 2, 14))\nprint(solution(1, 2, 15))\nprint(solution(1, 2, 16))\nprint(solution(1, 2, 17))\nprint(solution(1, 2, 18))\nprint(solution(1, 2, 19))\nprint(solution(1, 2, 20))\nprint(solution(1, 2, 21))\nprint(solution(1, 2, 22))\nprint(solution(1, 2, 23))\nprint(solution(1, 2, 24))\nprint(solution(1, 2, 25))\nprint(solution(1, 2, 26))\nprint(solution(1, 2, 27))\nprint(solution(1, 2, 28))\nprint(solution(1, 2, 29))\nprint(solution(1, 2, 3"}
{"ID": 524, "source": "MBPP:161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"\ndef remove_elements(list1, list2):\n\treturn [x for x in list1 if x not in list2]\n\nprint(remove_elements([1, 2, 3, 4, 5, 6], [1, 2, 3]))\n\n\"\"\"\nWrite a function to find the frequency of the element in a list.\n\"\"\"\ndef frequency(list1, element):\n\treturn list1.count(element)\n\nprint(frequency([1, 2, 3, 4, 5, 6], 3))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list.\n\"\"\"\ndef sum_of_elements(list1):\n\treturn sum(list1)\n\nprint(sum_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the product of the elements in a list.\n\"\"\"\ndef product_of_elements(list1):\n\tresult = 1\n\tfor i in list1:\n\t\tresult *= i\n\treturn result\n\nprint(product_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the average of the elements in a list.\n\"\"\"\ndef average_of_elements(list1):\n\treturn sum(list1) / len(list1)\n\nprint(average_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the median of the elements in a list.\n\"\"\"\ndef median_of_elements(list1):\n\tlist1.sort()\n\tif len(list1) % 2 == 0:\n\t\treturn (list1[len(list1) // 2 - 1] + list1[len(list1) // 2]) / 2\n\telse:\n\t\treturn list1[len(list1) // 2]\n\nprint(median_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the mode of the elements in a list.\n\"\"\"\ndef mode_of_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in list1 if x not in list2]\n\nprint(remove_elements([1, 2, 3, 4, 5, 6], [1, 2, 3]))\n\n\"\"\"\nWrite a function to find the frequency of the element in a list.\n\"\"\"\ndef frequency(list1, element):\n\treturn list1.count(element)\n\nprint(frequency([1, 2, 3, 4, 5, 6], 3))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list.\n\"\"\"\ndef sum_of_elements(list1):\n\treturn sum(list1)\n\nprint(sum_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the product of the elements in a list.\n\"\"\"\ndef product_of_elements(list1):\n\tresult = 1\n\tfor i in list1:\n\t\tresult *= i\n\treturn result\n\nprint(product_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the average of the elements in a list.\n\"\"\"\ndef average_of_elements(list1):\n\treturn sum(list1) / len(list1)\n\nprint(average_of_elements([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the median of the elements in a list.\n\"\"\"\ndef median_of_elements(list1):\n\tlist1.sort()\n\tif len(list1) % 2 == 0:"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\tif num1 == num2: \n\t\treturn True\n\tif num1 < num2: \n\t\tnum1, num2 = num2, num1 \n\tfor i in range(1, num1 + 1): \n\t\tif num1 % i == 0 and num2 % (num1 / i) == 0: \n\t\t\treturn True\n\treturn False\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1 % num2 == 0)\n\n\ndef areEquivalent(num1, num2):\n    return num1 == num2 or (num1 < num2 and num1"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\tcount = 0\n\tfor i in range(len(str1)):\n\t\tif str1[i].isalpha():\n\t\t\tcount += 1\n\treturn count\n\ndef count_char_position(str1):\n\treturn sum(1 for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1)\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn count\n\ndef count_char_position(str1):\n\treturn sum(1 for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1)\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):\n\treturn sum(c.isalpha() for c in str1 if c.isalpha())\n\ndef count_char_position(str1):"}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn a.count(x)\n\n#test case\nprint(frequency([1,2,2,3,4,5,5,5,5],5))\n\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\treturn"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "<s> \"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\treturn sum(list1[m:n+1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_2(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_3(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_4(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_5(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_6(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_7(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_8(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_9(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_10(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_11(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_12(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_13(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_14(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_15(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_16(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_17(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_18(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_19(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_20(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_21(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_22(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_23(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_24(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_25(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_26", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(a)\n\ndef perimeter_pentagon_2(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_3(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_4(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_5(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_6(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_7(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_8(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_9(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_10(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_11(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_12(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_13(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_14(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_15(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_16(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_17(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_18(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_19(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_20(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_21(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_22(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_23(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_24(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_25(a):\n\treturn sum(a)\n\ndef perimeter_pentagon_26"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)-2):\n\t\tif s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance(\"std\"))\nprint(count_occurance(\"stdstd\"))\nprint(count_occurance(\"stdstdstd\"))\nprint(count_occurance(\"stdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occur", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_occurance(\"std\"))\nprint(count_occurance(\"stdstd\"))\nprint(count_occurance(\"stdstdstd\"))\nprint(count_occurance(\"stdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\"))\nprint(count_occur"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<s> \"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\treturn ''.join(i for i in text if i.isalnum()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or i == '_') \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore_dash(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or i == '_' or i == '-') \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore_dash_slash(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ''.join(i for i in text if i.isalnum() or i.isspace()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit()) \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or i == '_') \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore_dash(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or i == '_' or i == '-') \n\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_space_punct_num_underscore_dash_slash(text): \n\treturn ''.join(i for i in text if i.isalnum() or i.isspace() or i.isalpha() or i.isdigit() or"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\tstack = []\n\tfor i in str1:\n\t\tif i == \"(\":\n\t\t\tstack.append(i)\n\t\telif i == \")\":\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(a,b):\n\treturn 2*(a+b)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\treturn 2*3.14*r\n\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\treturn a*b\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\treturn a**3\n\nprint(volume_cube(3))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(a,b,c):\n\treturn a*b*c\n\nprint(volume_rectangular_prism(3,4,5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(3))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\treturn 4*3.1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\treturn a*b\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\treturn a**3\n\nprint(volume_cube(3))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(a,b,c):\n\treturn a*b*c\n\nprint(volume_rectangular_prism(3,4,5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(3))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):"}
{"ID": 540, "source": "MBPP:177", "prompt": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\"\"\"\ndef answer(L,R): \n\tfor i in range(L,R+1):\n\t\tfor j in range(L,R+1):\n\t\t\tif i!=j and i*j==lcm(i,j):\n\t\t\t\treturn [i,j]\n\treturn [-1,-1]\n\ndef lcm(a,b):\n\treturn (a*b)/gcd(a,b)\n\ndef gcd(a,b):\n\tif b==0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\nprint(answer(1,10))\nprint(answer(1,100))\nprint(answer(1,1000))\nprint(answer(1,10000))\nprint(answer(1,100000))\nprint(answer(1,1000000))\nprint(answer(1,10000000))\nprint(answer(1,100000000))\nprint(answer(1,1000000000))\nprint(answer(1,10000000000))\nprint(answer(1,100000000000))\nprint(answer(1,1000000000000))\nprint(answer(1,10000000000000))\nprint(answer(1,100000000000000))\nprint(answer(1,1000000000000000))\nprint(answer(1,10000000000000000))\nprint(answer(1,100000000000000000))\nprint(answer(1,1000000000000000000))\nprint(answer(1,10000000000000000000))\nprint(answer(1,100000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(answer(1,10))\nprint(answer(1,100))\nprint(answer(1,1000))\nprint(answer(1,10000))\nprint(answer(1,100000))\nprint(answer(1,1000000))\nprint(answer(1,10000000))\nprint(answer(1,100000000))\nprint(answer(1,1000000000))\nprint(answer(1,10000000000))\nprint(answer(1,100000000000))\nprint(answer(1,1000000000000))\nprint(answer(1,10000000000000))\nprint(answer(1,100000000000000))\nprint(answer(1,1000000000000000))\nprint(answer(1,10000000000000000))\nprint(answer(1,100000000000000000))\nprint(answer(1,1000000000000000000))\nprint(answer(1,10000000000000000000))\nprint(answer(1,100000000000000"}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "<s> \"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\"\"\"\n\tpatterns: list of strings\n\ttext: string\n\t\"\"\"\n\treturn [pattern for pattern in patterns if pattern in text]\n\nprint(string_literals([\"hello\",\"world\"],\"hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello\"))\nprint(string_literals([\"hello\",\"world\"],\"\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(string_literals([\"hello\",\"world\"],\"hello world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello\"))\nprint(string_literals([\"hello\",\"world\"],\"\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world hello\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"hello world world world world world world world world world\"))\nprint(string_literals([\"hello\",\"world\"],\"world world"}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "<s> \"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_2(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_3(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_4(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_5(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_6(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_7(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_8(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_9(x): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_2(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_3(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_4(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_5(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_6(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_7(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_8(x): \n\tif x < 1: \n\t\treturn False\n\tfor i in range(1, x): \n\t\tif x % i == 0: \n\t\t\treturn False\n\treturn True\n\n\ndef is_num_keith_9(x): "}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\tR = 6371 # km\n\tdlat = math.radians(elat-slat)\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) \\\n\t* math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c\n\treturn d\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef triangle_area(base,height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(side1,side2,side3):\n\treturn side1+side2+side3\n\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(length,width):\n\treturn 2*(length+width)\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef rectangle_area(length,width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(radius):\n\treturn 2*math.pi*radius\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef circle_area(radius):\n\treturn math.pi*radius**2\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef sphere_volume(radius):\n\treturn (4/3)*math.pi*radius**3\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(radius):\n\treturn 4*math.pi*radius**2\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(radius,height):\n\treturn math.pi*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\td = R * c\n\treturn d\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef triangle_area(base,height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(side1,side2,side3):\n\treturn side1+side2+side3\n\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(length,width):\n\treturn 2*(length+width)\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef rectangle_area(length,width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(radius):\n\treturn 2*math.pi*radius\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef circle_area(radius):\n\treturn math.pi*radius**2\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef sphere_volume(radius):\n\treturn (4/3)*math.pi*radius**3\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(radius):\n\treturn 4*math.pi*radius**2\n\n\"\"\"\nWrite a function to calculate the volume of a cylinder.\n\"\"\""}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\tif len(str1) == 0 or len(str2) == 0: \n\t\treturn \"\" \n\tif str1[0] == str2[0]: \n\t\treturn common_prefix_util(str1[1:], str2[1:]) + str1[0] \n\telse: \n\t\treturn \"\" \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\tshortest_str = min(strs, key=len) \n\tfor i in range(len(shortest_str)): \n\t\tif not all(x[i] == shortest_str[i] for x in strs): \n\t\t\treturn shortest_str[:i] \n\treturn shortest_str \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn shortest_str[:i] \n\treturn shortest_str \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\" \n\treturn \"\".join(common_prefix_util(x, y) for x, y in zip(strs, strs[1:])) \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: "}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\tuppercase = re.findall(r'[A-Z]', string)\n\tlowercase = re.findall(r'[a-z]', string)\n\tspecial_character = re.findall(r'[^\\w]', string)\n\tnumeric = re.findall(r'\\d', string)\n\treturn uppercase, lowercase, special_character, numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 546, "source": "MBPP:183", "prompt": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\"\"\"\ndef count_pairs(arr, n, k):\n\t# Initialize two hashmaps\n\thmap1 = {}\n\thmap2 = {}\n\n\t# Initialize result\n\tresult = 0\n\n\t# Traverse the array\n\tfor i in range(n):\n\t\t# If the element is already present in hashmap\n\t\tif arr[i] in hmap1:\n\t\t\t# Increment result\n\t\t\tresult += 1\n\n\t\t\t# If the difference is k\n\t\t\tif abs(hmap1[arr[i]] - arr[i]) == k:\n\t\t\t\t# Decrement result\n\t\t\t\tresult -= 1\n\n\t\t# If the element is not present in hashmap\n\t\telse:\n\t\t\t# Insert the element in hashmap\n\t\t\thmap1[arr[i]] = i\n\n\t# Traverse the array again\n\tfor i in range(n):\n\t\t# If the element is already present in hashmap\n\t\tif arr[i] in hmap2:\n\t\t\t# Increment result\n\t\t\tresult += 1\n\n\t\t\t# If the difference is k\n\t\t\tif abs(hmap2[arr[i]] - arr[i]) == k:\n\t\t\t\t# Decrement result\n\t\t\t\tresult -= 1\n\n\t\t# If the element is not present in hashmap\n\t\telse:\n\t\t\t# Insert the element in hashmap\n\t\t\thmap2[arr[i]] = i\n\n\t# Return result\n\treturn result\n\n# Test cases\narr = [1, 5, 3, 4, 2]\nn = len(arr)\nk = 2\nprint(count_pairs(arr, n, k))\n\narr = [1, 5, 3, 4, 2, 6]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))\n\narr = [1, 5, 3, 4, 2, 6, 7]\nn = len(arr)\nk = 4\nprint(count_pairs(arr, n, k))\n\narr = [1, 5,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Initialize two hashmaps\n\thmap1 = {}\n\thmap2 = {}\n\n\t# Initialize result\n\tresult = 0\n\n\t# Traverse the array\n\tfor i in range(n):\n\t\t# If the element is already present in hashmap\n\t\tif arr[i] in hmap1:\n\t\t\t# Increment result\n\t\t\tresult += 1\n\n\t\t\t# If the difference is k\n\t\t\tif abs(hmap1[arr[i]] - arr[i]) == k:\n\t\t\t\t# Decrement result\n\t\t\t\tresult -= 1\n\n\t\t# If the element is not present in hashmap\n\t\telse:\n\t\t\t# Insert the element in hashmap\n\t\t\thmap1[arr[i]] = i\n\n\t# Traverse the array again\n\tfor i in range(n):\n\t\t# If the element is already present in hashmap\n\t\tif arr[i] in hmap2:\n\t\t\t# Increment result\n\t\t\tresult += 1\n\n\t\t\t# If the difference is k\n\t\t\tif abs(hmap2[arr[i]] - arr[i]) == k:\n\t\t\t\t# Decrement result\n\t\t\t\tresult -= 1\n\n\t\t# If the element is not present in hashmap\n\t\telse:"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specific", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9],3))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]"}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "<s> \"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t\"\"\"\n\t:param text: the text to be searched\n\t:param patterns: a list of literals strings\n\t:return: a list of tuples, each tuple contains the literal string and the index of the first occurrence\n\t\"\"\"\n\timport re\n\treturn [(pattern, re.search(pattern, text).start()) for pattern in patterns]\n\n\nif __name__ == '__main__':\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]))\n\tprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]))\n\tprint(check_literals(\"abcdefg\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]))\n\tprint"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\tfor i in range(n): \n\t\twhile arr[i] != i + 1 and arr[i] != n + 1 and arr[i] != 0: \n\t\t\ttemp = arr[i] \n\t\t\tarr[i] = arr[temp - 1] \n\t\t\tarr[temp - 1] = temp \n\tfor i in range(n): \n\t\tif arr[i] != i + 1: \n\t\t\treturn i + 1\n\treturn n + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i == x1 or i == x2 or j == y1 or j == y2:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\treturn any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n\n\ndef check_String(str):\n    return any(i.isdigit() for i in str) and any(i.isalpha() for i in str)\n\n\ndef check_String(str):"}
{"ID": 556, "source": "MBPP:193", "prompt": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove the duplicates from the given tuple.\n\"\"\"\ndef remove_tuple(test_tup):\n\treturn tuple(set(test_tup))\n\nprint(remove_tuple((1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_tuple((1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\treturn int(n, 8)\n\n\"\"\"\nWrite a python function to convert octal number to hexa decimal number.\n\"\"\"\ndef octal_To_HexaDecimal(n):  \n\treturn int(n, 8)\n\n\"\"\"\nWrite a python function to convert octal number to binary number.\n\"\"\"\ndef octal_To_Binary(n):  \n\treturn bin(int(n, 8))[2:]\n\n\"\"\"\nWrite a python function to convert binary number to octal number.\n\"\"\"\ndef binary_To_Octal(n):  \n\treturn oct(int(n, 2))[1:]\n\n\"\"\"\nWrite a python function to convert binary number to hexa decimal number.\n\"\"\"\ndef binary_To_HexaDecimal(n):  \n\treturn hex(int(n, 2))[2:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to octal number.\n\"\"\"\ndef hexaDecimal_To_Octal(n):  \n\treturn oct(int(n, 16))[1:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to binary number.\n\"\"\"\ndef hexaDecimal_To_Binary(n):  \n\treturn bin(int(n, 16))[2:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to decimal number.\n\"\"\"\ndef hexaDecimal_To_Decimal(n):  \n\treturn int(n, 16)\n\n\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_To_Octal(n):  \n\treturn oct(int(n))[1:]\n\n\"\"\"\nWrite a python function to convert decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(n):  \n\treturn bin(int(n))[2:]\n\n\"\"\"\nWrite a python function to convert decimal number to hexa decimal number.\n\"\"\"\ndef decimal_To_HexaDecimal(n):  \n\treturn hex(int(n))[2:]\n\n\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int(n, 8)\n\n\"\"\"\nWrite a python function to convert octal number to hexa decimal number.\n\"\"\"\ndef octal_To_HexaDecimal(n):  \n\treturn int(n, 8)\n\n\"\"\"\nWrite a python function to convert octal number to binary number.\n\"\"\"\ndef octal_To_Binary(n):  \n\treturn bin(int(n, 8))[2:]\n\n\"\"\"\nWrite a python function to convert binary number to octal number.\n\"\"\"\ndef binary_To_Octal(n):  \n\treturn oct(int(n, 2))[1:]\n\n\"\"\"\nWrite a python function to convert binary number to hexa decimal number.\n\"\"\"\ndef binary_To_HexaDecimal(n):  \n\treturn hex(int(n, 2))[2:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to octal number.\n\"\"\"\ndef hexaDecimal_To_Octal(n):  \n\treturn oct(int(n, 16))[1:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to binary number.\n\"\"\"\ndef hexaDecimal_To_Binary(n):  \n\treturn bin(int(n, 16))[2:]\n\n\"\"\"\nWrite a python function to convert hexa decimal number to decimal number.\n\"\"\"\ndef hexaDecimal_To_Decimal(n):  \n\treturn int(n, 16)\n\n\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_To_Octal(n):  \n\treturn oct(int(n))[1:]\n\n\"\"\"\nWrite a python function to convert decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(n):  \n\treturn bin(int(n))[2:]\n\n\"\"\"\nWrite a python function to convert decimal number to hexa decimal number.\n\"\"\"\ndef decimal_To_HexaDecimal(n):  \n\treturn hex(int(n))[2:]\n\n\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\treturn i; \n\treturn -1; \n\n\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n): \n\tfor i in range(n-1, -1, -1): \n\t\tif(arr[i]==x): \n\t\t\treturn i; \n\treturn -1; \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): \n\tfirst = -1\n\tlast = -1\n\tfor i in range(0,n): \n\t\tif(arr[i]==x): \n\t\t\tif(first==-1): \n\t\t\t\tfirst = i \n\t\t\tlast = i \n\treturn first, last \n\n\n\"\"\"\nWrite a python function to find the first and last position of an element in a sorted array.\n\"\"\"\ndef first_last(arr,x,n): "}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t\"\"\"\n\ta,b: positive integers\n\t\n\treturns: the largest triangle that can be inscribed in an ellipse with semi-axes a and b\n\t\"\"\"\n\t# Your code here\n\timport math\n\t\n\t# Find the semi-minor axis\n\tb2 = b**2\n\ta2 = a**2\n\t\n\t# Find the semi-major axis\n\ta_max = math.sqrt(a2 + b2)\n\t\n\t# Find the semi-minor axis\n\tb_max = math.sqrt(a2 - b2)\n\t\n\t# Find the area of the ellipse\n\tarea = math.pi * a_max * b_max\n\t\n\t# Find the area of the triangle\n\ts = (a_max + b_max) / 2\n\tarea_triangle = (s * (s - a_max) * (s - b_max)) ** 0.5\n\t\n\t# Return the largest triangle\n\treturn area_triangle / area\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\treturn lst.count(lst[0]) == len(lst) \n\n#test case\nprint(chkList([1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4])) # False\nprint(chkList([1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5])) # False\nprint(chkList([1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # False\nprint(chkList([1, 1, 1, 1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(chkList([1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4])) # False\nprint(chkList([1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5])) # False\nprint(chkList([1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(chkList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # False\nprint(chkList([1, 1, 1, 1,"}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif str1[i] not in \"aeiouAEIOU\":\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_even(\"hello\"))\nprint(remove_even(\"hello world\"))\nprint(remove_even(\"hello world!\"))\nprint(remove_even(\"\"))\nprint(remove_even(\" \"))\nprint(remove_even(\"a\"))\nprint(remove_even(\"ab\"))\nprint(remove_even(\"abc\"))\nprint(remove_even(\"abcd\"))\nprint(remove_even(\"abcde\"))\nprint(remove_even(\"abcdef\"))\nprint(remove_even(\"abcdefg\"))\nprint(remove_even(\"abcdefgh\"))\nprint(remove_even(\"abcdefghi\"))\nprint(remove_even(\"abcdefghij\"))\nprint(remove_even(\"abcdefghijk\"))\nprint(remove_even(\"abcdefghijkl\"))\nprint(remove_even(\"abcdefghijklm\"))\nprint(remove_even(\"abcdefghijklmn\"))\nprint(remove_even(\"abcdefghijklmno\"))\nprint(remove_even(\"abcdefghijklmnop\"))\nprint(remove_even(\"abcdefghijklmnopq\"))\nprint(remove_even(\"abcdefghijklmnopqr\"))\nprint(remove_even(\"abcdefghijklmnopqrs\"))\nprint(remove_even(\"abcdefghijklmnopqrst\"))\nprint(remove_even(\"abcdefghijklmnopqrstu\"))\nprint(remove_even(\"abcdefghijklmnopqrstuv\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvw\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwx\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxy\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxyz1\"))\nprint(remove_even(\"abcdefghijklmnopqr", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_even(\"hello\"))\nprint(remove_even(\"hello world\"))\nprint(remove_even(\"hello world!\"))\nprint(remove_even(\"\"))\nprint(remove_even(\" \"))\nprint(remove_even(\"a\"))\nprint(remove_even(\"ab\"))\nprint(remove_even(\"abc\"))\nprint(remove_even(\"abcd\"))\nprint(remove_even(\"abcde\"))\nprint(remove_even(\"abcdef\"))\nprint(remove_even(\"abcdefg\"))\nprint(remove_even(\"abcdefgh\"))\nprint(remove_even(\"abcdefghi\"))\nprint(remove_even(\"abcdefghij\"))\nprint(remove_even(\"abcdefghijk\"))\nprint(remove_even(\"abcdefghijkl\"))\nprint(remove_even(\"abcdefghijklm\"))\nprint(remove_even(\"abcdefghijklmn\"))\nprint(remove_even(\"abcdefghijklmno\"))\nprint(remove_even(\"abcdefghijklmnop\"))\nprint(remove_even(\"abcdefghijklmnopq\"))\nprint(remove_even(\"abcdefghijklmnopqr\"))\nprint(remove_even(\"abcdefghijklmnopqrs\"))\nprint(remove_even(\"abcdefghijklmnopqrst\"))\nprint(remove_even(\"abcdefghijklmnopqrstu\"))\nprint(remove_even(\"abcdefghijklmnopqrstuv\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvw\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwx\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxy\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(remove_even(\"abcdefghijklmnopqrstuvwxyz1\"))\nprint(remove_even(\"abcdefghijklmnopqr"}
{"ID": 566, "source": "MBPP:203", "prompt": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the hamming distance between given two integers.\n\"\"\"\ndef hamming_Distance(n1,n2) : \n\treturn bin(n1^n2).count('1')\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of equal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\treturn sum(ord(c1) != ord(c2) for c1, c2 in zip(str1, str2))\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(ord(c1) != ord(c2) for c1, c2 in zip(str1, str2))\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : \n\t\tstr1, str2 = str2, str1\n\tfor i in range(len(str1)) : \n\t\tif str1[i] != str2[i] : \n\t\t\treturn i + 1\n\treturn len(str1) + 1\n\n\"\"\"\nWrite a python function to find the hamming distance between two strings of unequal length.\n\"\"\"\ndef hamming_Distance(str1,str2) : \n\tif len(str1) > len(str2) : "}
{"ID": 567, "source": "MBPP:204", "prompt": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the occurrence of a given character in a string.\n\"\"\"\ndef count(s,c) : \n\treturn s.count(c)\n\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(s) : \n\treturn s == s[::-1]\n\n\n\"\"\"\nWrite a python function to check if a given string is a permutation of another given string.\n\"\"\"\ndef is_permutation(s1,s2) : \n\treturn sorted(s1) == sorted(s2)\n\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another given string.\n\"\"\"\ndef is_subsequence(s1,s2) : \n\treturn s1 in s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another given string.\n\"\"\"\ndef is_subsequence_2(s1,s2) : \n\treturn s2.find(s1) != -1\n\n\n\"\"\"\nWrite a python function to check if a given string is a supersequence of another given string.\n\"\"\"\ndef is_supersequence(s1,s2) : \n\treturn s1 in s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a supersequence of another given string.\n\"\"\"\ndef is_supersequence_2(s1,s2) : \n\treturn s2.find(s1) == 0\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation(s1,s2) : \n\treturn s2 in s1 + s1\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation_2(s1,s2) : \n\treturn s1 in s2 + s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation_3(s1,s2) : \n\treturn s2 in s1 * 2\n\n\n\"\"\"\nWrite a python function to check if a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(s) : \n\treturn s == s[::-1]\n\n\n\"\"\"\nWrite a python function to check if a given string is a permutation of another given string.\n\"\"\"\ndef is_permutation(s1,s2) : \n\treturn sorted(s1) == sorted(s2)\n\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another given string.\n\"\"\"\ndef is_subsequence(s1,s2) : \n\treturn s1 in s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another given string.\n\"\"\"\ndef is_subsequence_2(s1,s2) : \n\treturn s2.find(s1) != -1\n\n\n\"\"\"\nWrite a python function to check if a given string is a supersequence of another given string.\n\"\"\"\ndef is_supersequence(s1,s2) : \n\treturn s1 in s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a supersequence of another given string.\n\"\"\"\ndef is_supersequence_2(s1,s2) : \n\treturn s2.find(s1) == 0\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation(s1,s2) : \n\treturn s2 in s1 + s1\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation_2(s1,s2) : \n\treturn s1 in s2 + s2\n\n\n\"\"\"\nWrite a python function to check if a given string is a rotation of another given string.\n\"\"\"\ndef is_rotation_3(s1,s2) : \n\treturn s2 in s1 * 2\n\n\n\"\"\"\nWrite a python function to check if a"}
{"ID": 568, "source": "MBPP:205", "prompt": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\"\"\"\ndef inversion_elements(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_2(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_3(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_4(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_5(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_2(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_3(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_4(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count\n\t\"\"\"\n\tinversion_count = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tif test_tup[i] > test_tup[j]:\n\t\t\t\tinversion_count += 1\n\treturn inversion_count\n\n\ndef inversion_elements_5(test_tup):\n\t\"\"\"\n\t:param test_tup: tuple\n\t:return: inversion count"}
{"ID": 570, "source": "MBPP:207", "prompt": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\t", "predict": "<s> \"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n\"\"\"\ndef find_longest_repeating_subseq(str): \n\tn = len(str) \n\tlps = [0] * (n + 1) \n\tlps[0] = 0\n\ti = 1\n\tj = 0\n\twhile i < n: \n\t\tif str[i] == str[j]: \n\t\t\tlps[i] = j + 1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse: \n\t\t\tif j != 0: \n\t\t\t\tj = lps[j - 1] \n\t\t\telse: \n\t\t\t\tlps[i] = 0\n\t\t\t\ti += 1\n\treturn lps[n] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+(\\.[0-9][0-9]?)?$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using string slicing.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(num.split('.')[1]) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using float.\n\"\"\"\ndef is_decimal(num):\n\ttry:\n\t\tfloat(num)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using math.floor.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(math.floor(float(num)*100))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using round.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(round(float(num), 2))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using int.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(int(float(num)*100))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using math.trunc.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tfloat(num)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using math.floor.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(math.floor(float(num)*100))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using round.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(round(float(num), 2))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using int.\n\"\"\"\ndef is_decimal(num):\n\tif '.' in num:\n\t\tif len(str(int(float(num)*100))) > 2:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn True\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using math.trunc.\n\"\"\""}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\treturn re.match(\"^[a-zA-Z0-9]+$\", string)\n\n\"\"\"\nWrite a function to check that the given string contains only a certain"}
{"ID": 575, "source": "MBPP:212", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\n\"\"\"\ndef fourth_Power_Sum(n): \n\treturn sum([i**4 for i in range(1,n+1)])\n\ndef fourth_Power_Sum_2(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_3(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_4(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_5(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_6(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_7(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_8(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_9(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_10(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_11(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_12(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_13(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_14(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_15(n):\n\treturn sum([pow(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum([i**4 for i in range(1,n+1)])\n\ndef fourth_Power_Sum_2(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_3(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_4(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_5(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_6(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_7(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_8(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_9(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_10(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_11(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_12(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_13(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_14(n):\n\treturn sum([pow(i,4) for i in range(1,n+1)])\n\ndef fourth_Power_Sum_15(n):"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t\"\"\"\n\ttest_tup1: a tuple of strings\n\ttest_tup2: a tuple of strings\n\t\n\treturns: a tuple of strings, containing the concatenation of test_tup1 and test_tup2\n\t\"\"\"\n\t# Your code here\n\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n\ndef test_concatenate_strings():\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\")) == (\"ac\", \"bd\")\n\tassert concatenate_strings((\"hello\", \" \"), (\"world\", \"\")) == (\"hello world\", \" \")\n\tassert concatenate_strings((\"\", \"\"), (\"\", \"\")) == (\"\", \"\")\n\tassert concatenate_strings((\"a\", \"\"), (\"b\", \"\")) == (\"ab\", \"\")\n\tassert concatenate_strings((\"a\", \"\"), (\"b\", \"c\")) == (\"ab\", \"c\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"\")) == (\"ac\", \"b\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\")) == (\"ac\", \"bd\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\", \"e\")) == (\"ac\", \"bde\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == (\"ade\", \"bcf\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\")) == (\"ade\", \"bcfg\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\")) == (\"ade\", \"bcfgh\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\", \"i\")) == (\"ade\", \"bcfhi\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")) == (\"ade\", \"bcfh", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\")) == (\"ac\", \"bd\")\n\tassert concatenate_strings((\"hello\", \" \"), (\"world\", \"\")) == (\"hello world\", \" \")\n\tassert concatenate_strings((\"\", \"\"), (\"\", \"\")) == (\"\", \"\")\n\tassert concatenate_strings((\"a\", \"\"), (\"b\", \"\")) == (\"ab\", \"\")\n\tassert concatenate_strings((\"a\", \"\"), (\"b\", \"c\")) == (\"ab\", \"c\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"\")) == (\"ac\", \"b\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\")) == (\"ac\", \"bd\")\n\tassert concatenate_strings((\"a\", \"b\"), (\"c\", \"d\", \"e\")) == (\"ac\", \"bde\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == (\"ade\", \"bcf\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\")) == (\"ade\", \"bcfg\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\")) == (\"ade\", \"bcfgh\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\", \"i\")) == (\"ade\", \"bcfhi\")\n\tassert concatenate_strings((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")) == (\"ade\", \"bcfh"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\tif len(list1) > len(list2): \n\t\treturn False\n\tfor i in range(len(list1)): \n\t\tif list1[i] == list2[i]: \n\t\t\tcontinue\n\t\telif isinstance(list1[i], list) and isinstance(list2[i], list): \n\t\t\tif not check_subset_list(list1[i], list2[i]): \n\t\t\t\treturn False\n\t\telse: \n\t\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str[i]) > 1: \n\t\t\treturn str[i] \n\treturn -1\n\n\n\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str.count(str["}
{"ID": 581, "source": "MBPP:218", "prompt": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\n\"\"\"\ndef min_Operations(A,B):  \n\t# Your code goes here  \n\treturn abs(A-B)\n\n\n\"\"\"\nWrite a python function to"}
{"ID": 584, "source": "MBPP:221", "prompt": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\ndef first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num"}
{"ID": 585, "source": "MBPP:222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"\ndef check_type(test_tuple):\n\tif len(test_tuple) == 0:\n\t\treturn True\n\telse:\n\t\treturn all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n\nprint(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 1, 'c')))\nprint(check_type(('a', 1, 'c', 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_type(('a', 'b', 'c')))\nprint(check_type(('a', 1, 'c')))\nprint(check_type(('a', 1, 'c', 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1, 1.0)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1, 1.0, 1)))\nprint(check_type(('a', 1, 'c', 1.0, 1, 1.0, 1, 1.0, 1, 1.0, "}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\tcount = 0\n\tfor i in range(n):\n\t\tif arr[i] == x:\n\t\t\tcount += 1\n\treturn count > n/2\n\n\ndef is_majority_v2(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v3(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v4(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v5(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v6(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v7(arr, n, x):\n\tleft =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif arr[i] == x:\n\t\t\tcount += 1\n\treturn count > n/2\n\n\ndef is_majority_v2(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v3(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v4(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v5(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n\n\ndef is_majority_v6(arr, n, x):\n\tleft = 0\n\tright = n-1\n\twhile left <= right:\n\t\tif arr[left] != x:\n\t\t\treturn False\n\t\tif arr[right] != x:\n\t\t\treturn False\n\t\tleft += 1"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\tcount = 0\n\twhile n > 0:\n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\tif low == high: \n\t\treturn arr[low] \n\tmid = (low + high) // 2\n\tif arr[mid] < arr[high]: \n\t\treturn find_Min(arr, low, mid) \n\telse: \n\t\treturn find_Min(arr, mid + 1, high) \n\ndef find_Min_rotated_array(arr): \n\treturn find_Min(arr, 0, len(arr) - 1) \n\narr = [1, 3, 5, 7] \nprint(find_Min_rotated_array(arr)) \n\narr = [3, 5, 1, 7, 9] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6] \nprint(find_Min_rotated_array(arr)) \n\narr = [4, 5, 6, 7, 8, 1, 2, 3] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(find_Min_rot", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr = [1, 3, 5, 7] \nprint(find_Min_rotated_array(arr)) \n\narr = [3, 5, 1, 7, 9] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6] \nprint(find_Min_rotated_array(arr)) \n\narr = [4, 5, 6, 7, 8, 1, 2, 3] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_Min_rotated_array(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(find_Min_rot"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a,b,c) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 594, "source": "MBPP:231", "prompt": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\n\"\"\"\ndef max_sum(tri, n): \n\tif n == 1: \n\t\treturn tri[0][0] \n\n\tmax_sum = -1000000000\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tsum = tri[i][j] + tri[i][j-1] \n\t\t\tif sum > max_sum: \n\t\t\t\tmax_sum = sum \n\n\treturn max_sum \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\treturn sorted(list1,reverse=True)[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\treturn 2*3.14*r*r+2*3.14*r*h\n\nprint(lateralsuface_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\nprint(volume_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsuface_cone(r,h):\n\treturn 3.14*r*r+3.14*r*h\n\nprint(lateralsuface_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsuface_sphere(r):\n\treturn 4*3.14*r*r\n\nprint(lateralsuface_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsuface_cube(s):\n\treturn 6*s*s\n\nprint(lateralsuface_cube(5))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a rectangular prism.\n\"\"\"\ndef lateralsuface_prism(l,w,h):\n\treturn 2*(l*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*3.14*r*r+2*3.14*r*h\n\nprint(lateralsuface_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\nprint(volume_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsuface_cone(r,h):\n\treturn 3.14*r*r+3.14*r*h\n\nprint(lateralsuface_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsuface_sphere(r):\n\treturn 4*3.14*r*r\n\nprint(lateralsuface_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsuface_cube(s):\n\treturn 6*s*s\n\nprint(lateralsuface_cube(5))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\nprint(volume_cube(5))\n\n\"\"\"\nWrite a function to find the lateral surface area of a rectangular prism.\n\"\"\"\ndef lateralsuface_prism(l,w,h):"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14159*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14159*r**3\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3)*3.14159*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a rectangular pyramid.\n\"\"\"\ndef volume_pyramid_rect(l, w, h):\n\treturn (1/3)*l*w*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_tri(b, h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_pyramid_tri(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(r):\n\treturn (1/6)*3.14159*r**3\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_pyramid_tri(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_tri(b,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l, w, h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14159*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14159*r**3\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3)*3.14159*r**2*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a rectangular pyramid.\n\"\"\"\ndef volume_pyramid_rect(l, w, h):\n\treturn (1/3)*l*w*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_tri(b, h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_pyramid_tri(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(r):\n\treturn (1/6)*3.14159*r**3\n\n\"\"\"\nWrite a function to find the volume of a triangular pyramid.\n\"\"\"\ndef volume_pyramid_tri(b, h):\n\treturn (1/3)*b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_prism_tri(b,"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\treturn n | 0xAAAAAAAA \n\ndef test_even_bit_set_number():\n\tassert even_bit_set_number(0) == 0\n\tassert even_bit_set_number(1) == 1\n\tassert even_bit_set_number(2) == 2\n\tassert even_bit_set_number(3) == 3\n\tassert even_bit_set_number(4) == 4\n\tassert even_bit_set_number(5) == 5\n\tassert even_bit_set_number(6) == 6\n\tassert even_bit_set_number(7) == 7\n\tassert even_bit_set_number(8) == 8\n\tassert even_bit_set_number(9) == 9\n\tassert even_bit_set_number(10) == 10\n\tassert even_bit_set_number(11) == 11\n\tassert even_bit_set_number(12) == 12\n\tassert even_bit_set_number(13) == 13\n\tassert even_bit_set_number(14) == 14\n\tassert even_bit_set_number(15) == 15\n\tassert even_bit_set_number(16) == 16\n\tassert even_bit_set_number(17) == 17\n\tassert even_bit_set_number(18) == 18\n\tassert even_bit_set_number(19) == 19\n\tassert even_bit_set_number(20) == 20\n\tassert even_bit_set_number(21) == 21\n\tassert even_bit_set_number(22) == 22\n\tassert even_bit_set_number(23) == 23\n\tassert even_bit_set_number(24) == 24\n\tassert even_bit_set_number(25) == 25\n\tassert even_bit_set_number(26) == 26\n\tassert even_bit_set_number(27) == 27\n\tassert even_bit", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert even_bit_set_number(0) == 0\n\tassert even_bit_set_number(1) == 1\n\tassert even_bit_set_number(2) == 2\n\tassert even_bit_set_number(3) == 3\n\tassert even_bit_set_number(4) == 4\n\tassert even_bit_set_number(5) == 5\n\tassert even_bit_set_number(6) == 6\n\tassert even_bit_set_number(7) == 7\n\tassert even_bit_set_number(8) == 8\n\tassert even_bit_set_number(9) == 9\n\tassert even_bit_set_number(10) == 10\n\tassert even_bit_set_number(11) == 11\n\tassert even_bit_set_number(12) == 12\n\tassert even_bit_set_number(13) == 13\n\tassert even_bit_set_number(14) == 14\n\tassert even_bit_set_number(15) == 15\n\tassert even_bit_set_number(16) == 16\n\tassert even_bit_set_number(17) == 17\n\tassert even_bit_set_number(18) == 18\n\tassert even_bit_set_number(19) == 19\n\tassert even_bit_set_number(20) == 20\n\tassert even_bit_set_number(21) == 21\n\tassert even_bit_set_number(22) == 22\n\tassert even_bit_set_number(23) == 23\n\tassert even_bit_set_number(24) == 24\n\tassert even_bit_set_number(25) == 25\n\tassert even_bit_set_number(26) == 26\n\tassert even_bit_set_number(27) == 27\n\tassert even_bit"}
{"ID": 599, "source": "MBPP:236", "prompt": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\"\"\"\ndef No_of_Triangle(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle(N-1,K)\n\ndef No_of_Triangle_2(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_2(N-1,K)\n\ndef No_of_Triangle_3(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_3(N-1,K)\n\ndef No_of_Triangle_4(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_4(N-1,K)\n\ndef No_of_Triangle_5(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_5(N-1,K)\n\ndef No_of_Triangle_6(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_6(N-1,K)\n\ndef No_of_Triangle_7(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_7(N-1,K)\n\ndef No_of_Triangle_8(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle(N-1,K)\n\ndef No_of_Triangle_2(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_2(N-1,K)\n\ndef No_of_Triangle_3(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_3(N-1,K)\n\ndef No_of_Triangle_4(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_4(N-1,K)\n\ndef No_of_Triangle_5(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_5(N-1,K)\n\ndef No_of_Triangle_6(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_6(N-1,K)\n\ndef No_of_Triangle_7(N,K):\n\tif N==1:\n\t\treturn 1\n\telif N==2:\n\t\treturn 2\n\telse:\n\t\treturn (N*K) + No_of_Triangle_7(N-1,K)\n\ndef No_of_Triangle_8(N,K):"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\"\"\"\n\t:param test_list: list of tuples\n\t:return: boolean\n\t\"\"\"\n\treturn len(set(test_list)) != len(test_list)\n\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59,"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):\n\t\tfor j in range(i, len(str)):\n\t\t\tif str[i] != str[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)):"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn (get_total_number_of_sequences(m,n-1) * (m-n+2)) % 1000000007\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"hello\\nworld\"))\n\n\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):\n\tlst.sort(key=lambda x: x[0])\n\treturn lst\n\ndef sort_on_occurence(lst):"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t\n\t# Initialize a variable to store the next perfect square \n\tnext_perfect_square = 0\n\t\n\t# Loop through the numbers from N to infinity \n\tfor i in range(N, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tfor i in range(N, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 608, "source": "MBPP:245", "prompt": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\"\"\"\ndef max_sum(arr, n): \n\t# Initialize the maximum sum \n\tmax_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the sum \n\tsum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence \n\tmax_bi_tonic_sum = 0\n\t# Initialize the maximum sum of bi-tonic sub-sequence "}
{"ID": 610, "source": "MBPP:247", "prompt": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\n\"\"\"\ndef lps(str): \n\tn = len(str) \n\tlps = [0] * n \n\tmax_len = 0 \n\tfor i in range(1, n): \n\t\tlps[i] = max(lps[i-1], 1) \n\t\tfor j in range(i-lps[i-1], i): \n\t\t\tif str[i] == str[j]: \n\t\t\t\tlps[i] = lps[j] + 1\n\t\t\t\tmax_len = max(max_len, lps[i]) \n\treturn max_len \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 612, "source": "MBPP:249", "prompt": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_2(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_3(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_4(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_5(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_6(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_7(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_8(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_9(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_10(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_11(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_2(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_3(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_4(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_5(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_6(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_7(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_8(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_9(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_10(array_nums1,array_nums2):\n\treturn list(set(array_nums1).intersection(set(array_nums2)))\n\ndef intersection_lambda_11(array_nums1,array_nums2):"}
{"ID": 613, "source": "MBPP:250", "prompt": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\n\"\"\"\ndef count_X(tup, x): \n\treturn tup.count(x)\n\nprint(count_X((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to check if a tuple is a sub-tuple of another tuple.\n\"\"\"\ndef is_sub_tuple(tup1, tup2): \n\treturn tup1 in tup2\n\nprint(is_sub_tuple((1, 2, 3), (1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the index of an element in a tuple.\n\"\"\"\ndef index_of(tup, x): \n\treturn tup.index(x)\n\nprint(index_of((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to find the last index of an element in a tuple.\n\"\"\"\ndef last_index_of(tup, x): \n\treturn len(tup) - 1 - tup[::-1].index(x)\n\nprint(last_index_of((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to find the length of a tuple.\n\"\"\"\ndef len_tuple(tup): \n\treturn len(tup)\n\nprint(len_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the maximum element in a tuple.\n\"\"\"\ndef max_tuple(tup): \n\treturn max(tup)\n\nprint(max_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the minimum element in a tuple.\n\"\"\"\ndef min_tuple(tup): \n\treturn min(tup)\n\nprint(min_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the sum of all elements in a tuple.\n\"\"\"\ndef sum_tuple(tup): \n\treturn sum(tup)\n\nprint(sum_tuple((1, 2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tup.count(x)\n\nprint(count_X((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to check if a tuple is a sub-tuple of another tuple.\n\"\"\"\ndef is_sub_tuple(tup1, tup2): \n\treturn tup1 in tup2\n\nprint(is_sub_tuple((1, 2, 3), (1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the index of an element in a tuple.\n\"\"\"\ndef index_of(tup, x): \n\treturn tup.index(x)\n\nprint(index_of((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to find the last index of an element in a tuple.\n\"\"\"\ndef last_index_of(tup, x): \n\treturn len(tup) - 1 - tup[::-1].index(x)\n\nprint(last_index_of((1, 2, 3, 4, 5), 3))\n\n\"\"\"\nWrite a python function to find the length of a tuple.\n\"\"\"\ndef len_tuple(tup): \n\treturn len(tup)\n\nprint(len_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the maximum element in a tuple.\n\"\"\"\ndef max_tuple(tup): \n\treturn max(tup)\n\nprint(max_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the minimum element in a tuple.\n\"\"\"\ndef min_tuple(tup): \n\treturn min(tup)\n\nprint(min_tuple((1, 2, 3, 4, 5)))\n\n\"\"\"\nWrite a python function to find the sum of all elements in a tuple.\n\"\"\"\ndef sum_tuple(tup): "}
{"ID": 614, "source": "MBPP:251", "prompt": "\"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\t", "predict": "<s> \"\"\"\nWrite a function to insert an element before each element of a list.\n\"\"\"\ndef insert_element(list,element):\n\treturn [element+i for i in list]\n\nprint(insert_element([1,2,3,4,5],\"a\"))\n\n\"\"\"\nWrite a function to insert an element after each element of a list.\n\"\"\"\ndef insert_element_after(list,element):\n\treturn [i+element for i in list]\n\nprint(insert_element_after([1,2,3,4,5],\"a\"))\n\n\"\"\"\nWrite a function to insert an element at a specific position in a list.\n\"\"\"\ndef insert_element_at_position(list,element,position):\n\treturn list[:position]+[element]+list[position:]\n\nprint(insert_element_at_position([1,2,3,4,5],\"a\",2))\n\n\"\"\"\nWrite a function to get the middle element of a list.\n\"\"\"\ndef get_middle_element(list):\n\treturn list[len(list)//2]\n\nprint(get_middle_element([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(insert_element_at_position([1,2,3,4,5],\"a\",2))\n\n\"\"\"\nWrite a function to get the middle element of a list.\n\"\"\"\ndef get_middle_element(list):\n\treturn list[len(list)//2]\n\nprint(get_middle_element([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\"\nWrite a function to get the elements of a list which are not in another list.\n\"\"\"\ndef get_elements_not_in(list1,list2):\n\treturn [i for i in list1 if i not in list2]\n\nprint(get_elements_not_in([1,2,3,4,5],[2,4]))\n\n\"\"\""}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\treturn [complex(x).polar for x in numbers]\n\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates."}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\tif n <= 2:\n\t\treturn 0\n\tcount = 1\n\tfor i in range(2, n):\n\t\tif i * i >= n:\n\t\t\tbreak\n\t\tif i % 2 == 0 and i * i >= n:\n\t\t\tcontinue\n\t\tcount += 1\n\t\tfor j in range(i * i, n, i):\n\t\t\tif j % i == 0:\n\t\t\t\tcount -= 1\n\t\t\t\tbreak\n\treturn count\n\ndef count_Primes_list(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_2(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_3(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_4(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def count_Primes_list(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_2(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_3(n):\n\tif n <= 2:\n\t\treturn 0\n\tis_prime = [True] * n\n\tis_prime[0] = is_prime[1] = False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif is_prime[i]:\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn sum(is_prime)\n\ndef count_Primes_list_4("}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 5\n\tif n == 5: \n\t\treturn 7\n\tif n == 6: \n\t\treturn 11\n\tif n == 7: \n\t\treturn 13\n\tif n == 8: \n\t\treturn 17\n\tif n == 9: \n\t\treturn 19\n\tif n == 10: \n\t\treturn 23\n\tif n == 11: \n\t\treturn 29\n\tif n == 12: \n\t\treturn 31\n\tif n == 13: \n\t\treturn 37\n\tif n == 14: \n\t\treturn 41\n\tif n == 15: \n\t\treturn 43\n\tif n == 16: \n\t\treturn 47\n\tif n == 17: \n\t\treturn 53\n\tif n == 18: \n\t\treturn 59\n\tif n == 19: \n\t\treturn 61\n\tif n == 20: \n\t\treturn 67\n\tif n == 21: \n\t\treturn 71\n\tif n == 22: \n\t\treturn 73\n\tif n == 23: \n\t\treturn 79\n\tif n == 24: \n\t\treturn 83\n\tif n == 25: \n\t\treturn 89\n\tif n == 26: \n\t\treturn 97\n\tif n == 27: \n\t\treturn 101\n\tif n == 28: \n\t\treturn 103\n\tif n == 29: \n\t\treturn 107\n\tif n == 30: \n\t\treturn 109\n\tif n == 31: \n\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 5\n\tif n == 5: \n\t\treturn 7\n\tif n == 6: \n\t\treturn 11\n\tif n == 7: \n\t\treturn 13\n\tif n == 8: \n\t\treturn 17\n\tif n == 9: \n\t\treturn 19\n\tif n == 10: \n\t\treturn 23\n\tif n == 11: \n\t\treturn 29\n\tif n == 12: \n\t\treturn 31\n\tif n == 13: \n\t\treturn 37\n\tif n == 14: \n\t\treturn 41\n\tif n == 15: \n\t\treturn 43\n\tif n == 16: \n\t\treturn 47\n\tif n == 17: \n\t\treturn 53\n\tif n == 18: \n\t\treturn 59\n\tif n == 19: \n\t\treturn 61\n\tif n == 20: \n\t\treturn 67\n\tif n == 21: \n\t\treturn 71\n\tif n == 22: \n\t\treturn 73\n\tif n == 23: \n\t\treturn 79\n\tif n == 24: \n\t\treturn 83\n\tif n == 25: \n\t\treturn 89\n\tif n == 26: \n\t\treturn 97\n\tif n == 27: \n\t\treturn 101\n\tif n == 28: \n\t\treturn 103\n\tif n == 29: \n\t\treturn 107\n\tif n == 30: \n\t\treturn 109\n\tif n == 31: \n\t\treturn"}
{"ID": 625, "source": "MBPP:262", "prompt": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\n\"\"\"\ndef split_two_parts(list1, L):\n\tlist2 = list1[L:]\n\tlist1 = list1[:L]\n\treturn list1, list2\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(split_two_parts(list1, 4))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_subarray(list1))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_subarray(list1))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(split_two_parts(list1, 4))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_subarray(list1))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_subarray(list1))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray of a given list.\n\"\"\"\ndef max_subarray(list1):\n\tmax_sum = 0\n\tfor i in range(len(list1)):\n\t\tsum = 0\n\t\tfor j in range(i, len(list1)):\n\t\t\tsum += list1[j]\n\t\t\tif sum > max_sum:\n\t\t\t\tmax_sum = sum\n\treturn max_sum\n\nlist1 = [1,"}
{"ID": 626, "source": "MBPP:263", "prompt": "\"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge two dictionaries.\n\"\"\"\ndef merge_dict(d1,d2):\n\tfor key in d2:\n\t\tif key in d1:\n\t\t\td1[key] = d1[key] + d2[key]\n\t\telse:\n\t\t\td1[key] = d2[key]\n\treturn d1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\treturn 6*l**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*3.14*r**2 + 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\treturn 3.14*r**2 + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a prism.\n\"\"\"\ndef lateralsurface_prism(l,w):\n\treturn 2*(l*w)\n\n\"\"\"\nWrite a function to find the volume of a prism.\n\"\"\"\ndef volume_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a pyramid.\n\"\"\"\ndef lateralsurface_pyramid(l,w,h):\n\treturn (l*w)/2 + h*l\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*3.14*r**2 + 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\treturn 3.14*r**2 + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a prism.\n\"\"\"\ndef lateralsurface_prism(l,w):\n\treturn 2*(l*w)\n\n\"\"\"\nWrite a function to find the volume of a prism.\n\"\"\"\ndef volume_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the lateral surface area of a pyramid.\n\"\"\"\ndef lateralsurface_pyramid(l,w,h):\n\treturn (l*w)/2 + h*l\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\""}
{"ID": 630, "source": "MBPP:267", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i**2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 != 0:"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1) + 1\n\nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint(find_star_num(34))\nprint(find_star_num(35))\nprint(find_star_num(36))\nprint(find_star_num(37))\nprint(find_star_num(38))\nprint(find_star_num(39))\nprint(find_star_num(40))\nprint(find_star_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint(find_star_num(34))\nprint(find_star_num(35))\nprint(find_star_num(36))\nprint(find_star_num(37))\nprint(find_star_num(38))\nprint(find_star_num(39))\nprint(find_star_num(40))\nprint(find_star_"}
{"ID": 636, "source": "MBPP:273", "prompt": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\nprint(substract_elements((1, 2, 3), (4, 5, 6)))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(substract_elements((1, 2, 3), (4, 5, 6)))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n"}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient \n\t# using recursive formula \n\tfor i in range(0, n+1): \n\t\tres += binomialCoeff(n, i) \n\t\n\t# Return result \n\treturn res \n\n# Driver code \nprint(even_binomial_Coeff_Sum(5)) \n\n# This code is contributed by rathbhupendra \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t# Initialize result \n\tres = 0\n\t\n\t# Calculate value of binomial coefficient "}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t# code here\n\tfor i in range(n):\n\t\tif a[i] == m:\n\t\t\treturn i\n\treturn -1\n\n\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        m = int(input())\n        print(get_Position(a,n,m))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\treturn {k:v for k,v in dict.items() if v>n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\treturn n * (n + 1) % 2 == 0\n\ndef find_nth_decagonal(n):\n\tfor i in range(1, n + 1):\n\t\tif is_num_decagonal(i):\n\t\t\tn -= 1\n\t\t\tif n == 0:\n\t\t\t\treturn i\n\treturn -1\n\nprint(find_nth_decagonal(1))\nprint(find_nth_decagonal(2))\nprint(find_nth_decagonal(3))\nprint(find_nth_decagonal(4))\nprint(find_nth_decagonal(5))\nprint(find_nth_decagonal(6))\nprint(find_nth_decagonal(7))\nprint(find_nth_decagonal(8))\nprint(find_nth_decagonal(9))\nprint(find_nth_decagonal(10))\nprint(find_nth_decagonal(11))\nprint(find_nth_decagonal(12))\nprint(find_nth_decagonal(13))\nprint(find_nth_decagonal(14))\nprint(find_nth_decagonal(15))\nprint(find_nth_decagonal(16))\nprint(find_nth_decagonal(17))\nprint(find_nth_decagonal(18))\nprint(find_nth_decagonal(19))\nprint(find_nth_decagonal(20))\nprint(find_nth_decagonal(21))\nprint(find_nth_decagonal(22))\nprint(find_nth_decagonal(23))\nprint(find_nth_decagonal(24))\nprint(find_nth_decagonal(25))\nprint(find_nth_decagonal(26))\nprint(find_nth_decagonal(27))\nprint(find_nth_decagonal(28))\nprint(find_nth_decagonal(29))\nprint(find_nth_decagonal(30))\nprint(find_nth_decagonal(31))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_nth_decagonal(1))\nprint(find_nth_decagonal(2))\nprint(find_nth_decagonal(3))\nprint(find_nth_decagonal(4))\nprint(find_nth_decagonal(5))\nprint(find_nth_decagonal(6))\nprint(find_nth_decagonal(7))\nprint(find_nth_decagonal(8))\nprint(find_nth_decagonal(9))\nprint(find_nth_decagonal(10))\nprint(find_nth_decagonal(11))\nprint(find_nth_decagonal(12))\nprint(find_nth_decagonal(13))\nprint(find_nth_decagonal(14))\nprint(find_nth_decagonal(15))\nprint(find_nth_decagonal(16))\nprint(find_nth_decagonal(17))\nprint(find_nth_decagonal(18))\nprint(find_nth_decagonal(19))\nprint(find_nth_decagonal(20))\nprint(find_nth_decagonal(21))\nprint(find_nth_decagonal(22))\nprint(find_nth_decagonal(23))\nprint(find_nth_decagonal(24))\nprint(find_nth_decagonal(25))\nprint(find_nth_decagonal(26))\nprint(find_nth_decagonal(27))\nprint(find_nth_decagonal(28))\nprint(find_nth_decagonal(29))\nprint(find_nth_decagonal(30))\nprint(find_nth_decagonal(31))"}
{"ID": 644, "source": "MBPP:281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"\ndef all_unique(test_list):\n\treturn len(test_list) == len(set(test_list))\n\nprint(all_unique([1, 2, 3, 4, 5]))\nprint(all_unique([1, 2, 3, 4, 1]))\nprint(all_unique([1, 2, 3, 4, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(all_unique([1, 2, 3, 4, 5]))\nprint(all_unique([1, 2, 3, 4, 1]))\nprint(all_unique([1, 2, 3, 4, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(all_unique([1, 2, 3, 4, 5, 5,"}
{"ID": 645, "source": "MBPP:282", "prompt": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to substaract two lists using map and lambda function.\n\"\"\"\ndef sub_list(nums1,nums2):\n\treturn list(map(lambda x,y:x-y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(sub_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find the sum of two lists using map and lambda function.\n\"\"\"\ndef sum_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(sum_list(nums1,nums2))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(mul_list(nums1,nums2))\n\n\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\treturn list(map(lambda x,y:x/y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(div_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find the maximum of two lists using map and lambda function.\n\"\"\"\ndef max_list(nums1,nums2):\n\treturn list(map(lambda x,y:max(x,y),nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(max_list(nums1,nums2))\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y:x-y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(sub_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find the sum of two lists using map and lambda function.\n\"\"\"\ndef sum_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(sum_list(nums1,nums2))\n\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(mul_list(nums1,nums2))\n\n\"\"\"\nWrite a function to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n\treturn list(map(lambda x,y:x/y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [1,2,3,4,5]\nprint(div_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find the maximum of two lists using map and lambda function.\n\"\"\"\ndef max_list(nums1,nums2):"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\treturn sum([i**2 for i in range(2,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum_Odd(n):  \n\treturn sum([i**2 for i in range(1,n+1,2)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef cube_Sum(n):  \n\treturn sum([i**3 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum([i**2 for i in range(2,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\n\"\"\"\ndef square_Sum_Odd(n):  \n\treturn sum([i**2 for i in range(1,n+1,2)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef cube_Sum(n):  \n\treturn sum([i**3 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  \n\treturn sum([i**2 for i in range(1,n+1)])\n\n\"\"\"\nWrite a python function to find the sum of squares of first n natural numbers.\n\"\"\"\ndef square_Sum_All(n):  "}
{"ID": 651, "source": "MBPP:288", "prompt": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\t", "predict": "<s> \"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\"\"\"\ndef modular_inverse(arr, N, P):\n\tcount = 0\n\tfor i in range(N):\n\t\tif (arr[i] * arr[i] % P) == 1:\n\t\t\tcount += 1\n\treturn count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(modular_inverse(arr, len(arr), 11))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(modular_inverse(arr, len(arr), 11))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers in the array that have a difference of k.\n\"\"\"\ndef find_pair(arr, k):\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[j] - arr[i] == k:\n\t\t\t\treturn True\n\treturn False\n\narr = [1, 5, 3, 7, 8, 9, 10]\nprint(find_pair(arr, 2))\n\n\"\"\"\nGiven an array of integers, find the pair of integers"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t# code here \n\tcount = 0\n\tfor i in range(1,N+1):\n\t\t"}
{"ID": 653, "source": "MBPP:290", "prompt": "\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\"\ndef max_length(list1):\n\treturn max(list1, key=len)\n\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(max_length(list1))\n\n\"\"\"\nWrite a function to find the list of lists with maximum length.\n\"\"\""}
{"ID": 654, "source": "MBPP:291", "prompt": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t", "predict": "<s> \"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\"\"\"\ndef count_no_of_ways(n, k): \n\t# Initialize the dp table \n\tdp = [[0 for j in range(k)] for i in range(n)] \n\n\t# Initialize the first column of the dp table \n\tfor i in range(n): \n\t\tdp[i][0] = 1\n\n\t# Initialize the first row of the dp table \n\tfor j in range(k): \n\t\tdp[0][j] = 1\n\n\t# Fill the dp table in a bottom-up manner \n\tfor i in range(1, n): \n\t\tfor j in range(1, k): \n\t\t\tdp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] \n\n\t# Return the last entry of the last row of the dp table \n\treturn dp[n - 1][k - 1] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\treturn n//m\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(a,b):\n\treturn a+b\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(a,b):\n\treturn a-b\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef prod(a,b):\n\treturn a*b\n\n\"\"\"\nWrite a python function to find the modulus of two numbers.\n\"\"\"\ndef mod(a,b):\n\treturn a%b\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef pow(a,b):\n\treturn a**b\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(a):\n\treturn a**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube_root(a):\n\treturn a**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\n\n\"\"\"\nWrite a python function to find the greatest common divisor of two numbers.\n\"\"\"\ndef gcd(a,b):\n\tif b==0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\n\"\"\"\nWrite a python function to find the least common multiple of two numbers.\n\"\"\"\ndef lcm(a,b):\n\treturn a*b//gcd(a,b)\n\n\"\"\"\nWrite a python function to find the number of digits in a number.\n\"\"\"\ndef digits(n):\n\treturn len(str(n))\n\n\"\"\"\nWrite a python function to find the sum of digits in a number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\"\"\"\nWrite a python function to find the average of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn n//m\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(a,b):\n\treturn a+b\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(a,b):\n\treturn a-b\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef prod(a,b):\n\treturn a*b\n\n\"\"\"\nWrite a python function to find the modulus of two numbers.\n\"\"\"\ndef mod(a,b):\n\treturn a%b\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef pow(a,b):\n\treturn a**b\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(a):\n\treturn a**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube_root(a):\n\treturn a**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in range(1, len(listval)):\n\t\tif listval[i] > max_val:\n\t\t\tmax_val = listval[i]\n\treturn max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"ID": 659, "source": "MBPP:296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"\ndef get_Inv_Count(arr,n): \n\t\n\t# initialize inversion count\n\tinv_count = 0\n\t\n\t# traverse the array\n\tfor i in range(0, n-1): \n\t\t\n\t\t# initialize invocation count\n\t\tinvocation_count = 0\n\t\t\n\t\t# traverse the array\n\t\tfor j in range(i+1, n): \n\t\t\t\n\t\t\t# if current element is \n\t\t\t# smaller than its previous \n\t\t\t# element, then increment \n\t\t\t# inversion count\n\t\t\tif arr[j] < arr[i]: \n\t\t\t\tinvocation_count += 1\n\t\t\t\n\t\t# add invocation count to \n\t\t# total inversion count\n\t\tinv_count += invocation_count\n\t\n\t# return total inversion count\n\treturn inv_count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\tif not list1:\n\t\treturn []\n\tif isinstance(list1[0], list):\n\t\treturn flatten_list(list1[0]) + flatten_list(list1[1:])\n\telse:\n\t\treturn [list1[0]] + flatten_list(list1[1:])\n\n\ndef flatten_list_recursive(list1):\n\tif not list1:\n\t\treturn []\n\tif isinstance(list1[0], list):\n\t\treturn flatten_list_recursive(list1[0]) + flatten_list_recursive(list1[1:])\n\telse:\n\t\treturn [list1[0]] + flatten_list_recursive(list1[1:])\n\n\ndef flatten_list_iterative(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_2(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative_2(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_3(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative_3(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_4(list1):\n\tif not list1:\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef flatten_list_iterative(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_2(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative_2(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_3(list1):\n\tif not list1:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif isinstance(list1[i], list):\n\t\t\tresult.extend(flatten_list_iterative_3(list1[i]))\n\t\telse:\n\t\t\tresult.append(list1[i])\n\treturn result\n\n\ndef flatten_list_iterative_4(list1):\n\tif not list1:"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\treturn [x for x in l1 if x in l2]\n\nprint(intersection_nested_lists([1, [2, 3], 4], [1, [2, 3], 4]))\n\n\"\"\"\nWrite a function to find the intersection of two lists.\n\"\"\"\ndef intersection_lists(l1, l2):\n\treturn list(set(l1).intersection(set(l2)))\n\nprint(intersection_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the union of two lists.\n\"\"\"\ndef union_lists(l1, l2):\n\treturn list(set(l1).union(set(l2)))\n\nprint(union_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the difference of two lists.\n\"\"\"\ndef difference_lists(l1, l2):\n\treturn list(set(l1).difference(set(l2)))\n\nprint(difference_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference_lists(l1, l2):\n\treturn list(set(l1).symmetric_difference(set(l2)))\n\nprint(symmetric_difference_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the intersection of two lists of lists.\n\"\"\"\ndef intersection_lists_of_lists(l1, l2):\n\treturn [x for x in l1 if x in l2]\n\nprint(intersection_lists_of_lists([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]))\n\n\"\"\"\nWrite a function to find the union of two lists of lists.\n\"\"\"\ndef union_lists_of_lists(l1, l", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in l1 if x in l2]\n\nprint(intersection_nested_lists([1, [2, 3], 4], [1, [2, 3], 4]))\n\n\"\"\"\nWrite a function to find the intersection of two lists.\n\"\"\"\ndef intersection_lists(l1, l2):\n\treturn list(set(l1).intersection(set(l2)))\n\nprint(intersection_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the union of two lists.\n\"\"\"\ndef union_lists(l1, l2):\n\treturn list(set(l1).union(set(l2)))\n\nprint(union_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the difference of two lists.\n\"\"\"\ndef difference_lists(l1, l2):\n\treturn list(set(l1).difference(set(l2)))\n\nprint(difference_lists([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\"\"\"\nWrite a function to find the symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference_lists(l1, l2):\n\treturn list(set(l1).symmetric_difference(set(l2)))\n\nprint(symmetric_difference_lists([1, 2, 3, 4], [3, 4, 5, 6]))"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum(i) > max_val:\n\t\t\tmax_val = sum(i)\n\treturn max_val\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata))\n\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_val = 0\n\tfor i in stdata:\n\t\tif sum("}
{"ID": 663, "source": "MBPP:300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"\ndef count_binary_seq(n): \n\tcount = 0\n\tfor i in range(1 << n):\n\t\tif (i & (i << n)) == 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\nprint(count_binary_seq(6))\nprint(count_binary_seq(7))\nprint(count_binary_seq(8))\nprint(count_binary_seq(9))\nprint(count_binary_seq(10))\nprint(count_binary_seq(11))\nprint(count_binary_seq(12))\nprint(count_binary_seq(13))\nprint(count_binary_seq(14))\nprint(count_binary_seq(15))\nprint(count_binary_seq(16))\nprint(count_binary_seq(17))\nprint(count_binary_seq(18))\nprint(count_binary_seq(19))\nprint(count_binary_seq(20))\nprint(count_binary_seq(21))\nprint(count_binary_seq(22))\nprint(count_binary_seq(23))\nprint(count_binary_seq(24))\nprint(count_binary_seq(25))\nprint(count_binary_seq(26))\nprint(count_binary_seq(27))\nprint(count_binary_seq(28))\nprint(count_binary_seq(29))\nprint(count_binary_seq(30))\nprint(count_binary_seq(31))\nprint(count_binary_seq(32))\nprint(count_binary_seq(33))\nprint(count_binary_seq(34))\nprint(count_binary_seq(35))\nprint(count_binary_seq(36))\nprint(count_binary_seq(37))\nprint(count_binary_seq(38))\nprint(count_binary_seq(39))\nprint(count_binary_seq(40))\nprint(count_binary_seq", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\nprint(count_binary_seq(6))\nprint(count_binary_seq(7))\nprint(count_binary_seq(8))\nprint(count_binary_seq(9))\nprint(count_binary_seq(10))\nprint(count_binary_seq(11))\nprint(count_binary_seq(12))\nprint(count_binary_seq(13))\nprint(count_binary_seq(14))\nprint(count_binary_seq(15))\nprint(count_binary_seq(16))\nprint(count_binary_seq(17))\nprint(count_binary_seq(18))\nprint(count_binary_seq(19))\nprint(count_binary_seq(20))\nprint(count_binary_seq(21))\nprint(count_binary_seq(22))\nprint(count_binary_seq(23))\nprint(count_binary_seq(24))\nprint(count_binary_seq(25))\nprint(count_binary_seq(26))\nprint(count_binary_seq(27))\nprint(count_binary_seq(28))\nprint(count_binary_seq(29))\nprint(count_binary_seq(30))\nprint(count_binary_seq(31))\nprint(count_binary_seq(32))\nprint(count_binary_seq(33))\nprint(count_binary_seq(34))\nprint(count_binary_seq(35))\nprint(count_binary_seq(36))\nprint(count_binary_seq(37))\nprint(count_binary_seq(38))\nprint(count_binary_seq(39))\nprint(count_binary_seq(40))\nprint(count_binary_seq"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\tif not d:\n\t\treturn 0\n\treturn 1 + max(dict_depth(v) for v in d.values())\n\nprint(dict_depth({}))\nprint(dict_depth({'a': 1}))\nprint(dict_depth({'a': {'b': 2}}))\nprint(dict_depth({'a': {'b': {'c': 3}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': 4}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': 5}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': 6}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': 7}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': 8}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 9}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': 10}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': 11}}}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': 12}}}}}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': 13}}}}}}}}}}}}}}}}}}}}))\nprint(dict_depth({", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(dict_depth({}))\nprint(dict_depth({'a': 1}))\nprint(dict_depth({'a': {'b': 2}}))\nprint(dict_depth({'a': {'b': {'c': 3}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': 4}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': 5}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': 6}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': 7}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': 8}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 9}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': 10}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': 11}}}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': 12}}}}}}}}}}}}}}}}}}))\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': 13}}}}}}}}}}}}}}}}}}}}))\nprint(dict_depth({"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0\n\n\t# Loop through all bits \n\twhile n > 0: \n\n\t\t# If current bit is set \n\t\tif n & 1: \n\t\t\tresult = n \n\n\t\t# Shift to next bit \n\t\tn >>= 1\n\n\t# Return result \n\treturn result \n\n\n\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t# Initialize result \n\tresult = 0"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\tcount1 = 0\n\tcount2 = 0\n\tfor i in range(0,n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i] > a[j]:\n\t\t\t\tcount1 += 1\n\t\t\telse:\n\t\t\t\tcount2 += 1\n\tif count1 == count2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\tfor i in range(rotations) :\n\t\tarr.append(arr.pop(0))\n\treturn arr[index]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "<s> \"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\treturn [word for word in words if word[0] == 'p']\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] ==", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "words = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\"\ndef start_withp_3(words):\n\treturn [word for word in words if word[0] == 'p' and len(word) == 3]\n\nwords = ['python', 'java', 'php', 'perl', 'pascal']\nprint(start_withp_3(words))\n\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p' and having 3 letters.\n\"\"\""}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\treturn tuplex[m:n]\n\ndef colon_tuple(tuplex,m,n):\n\treturn tuplex[m:]\n\ndef colon_tuple2(tuplex,m,n):\n\treturn tuplex[:n]\n\ndef colon_tuple3(tuplex,m,n):\n\treturn tuplex[:n-m]\n\ndef colon_tuple4(tuplex,m,n):\n\treturn tuplex[m:n-m]\n\ndef colon_tuple5(tuplex,m,n):\n\treturn tuplex[m:n:1]\n\ndef colon_tuple6(tuplex,m,n):\n\treturn tuplex[m:n:2]\n\ndef colon_tuple7(tuplex,m,n):\n\treturn tuplex[m:n:3]\n\ndef colon_tuple8(tuplex,m,n):\n\treturn tuplex[m:n:4]\n\ndef colon_tuple9(tuplex,m,n):\n\treturn tuplex[m:n:5]\n\ndef colon_tuple10(tuplex,m,n):\n\treturn tuplex[m:n:6]\n\ndef colon_tuple11(tuplex,m,n):\n\treturn tuplex[m:n:7]\n\ndef colon_tuple12(tuplex,m,n):\n\treturn tuplex[m:n:8]\n\ndef colon_tuple13(tuplex,m,n):\n\treturn tuplex[m:n:9]\n\ndef colon_tuple14(tuplex,m,n):\n\treturn tuplex[m:n:10]\n\ndef colon_tuple15(tuplex,m,n):\n\treturn tuplex[m:n:11]\n\ndef colon_tuple16(tuplex,m,n):\n\treturn tuplex[m:n:12]\n\ndef colon_tuple17(tuplex,m,n):\n\treturn tuplex[m:n:13]\n\ndef colon_tuple18(tuplex,m,n):\n\treturn tuplex[m:n:14]\n\ndef colon_tuple19(tuplex,m,n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuplex[m:n]\n\ndef colon_tuple(tuplex,m,n):\n\treturn tuplex[m:]\n\ndef colon_tuple2(tuplex,m,n):\n\treturn tuplex[:n]\n\ndef colon_tuple3(tuplex,m,n):\n\treturn tuplex[:n-m]\n\ndef colon_tuple4(tuplex,m,n):\n\treturn tuplex[m:n-m]\n\ndef colon_tuple5(tuplex,m,n):\n\treturn tuplex[m:n:1]\n\ndef colon_tuple6(tuplex,m,n):\n\treturn tuplex[m:n:2]\n\ndef colon_tuple7(tuplex,m,n):\n\treturn tuplex[m:n:3]\n\ndef colon_tuple8(tuplex,m,n):\n\treturn tuplex[m:n:4]\n\ndef colon_tuple9(tuplex,m,n):\n\treturn tuplex[m:n:5]\n\ndef colon_tuple10(tuplex,m,n):\n\treturn tuplex[m:n:6]\n\ndef colon_tuple11(tuplex,m,n):\n\treturn tuplex[m:n:7]\n\ndef colon_tuple12(tuplex,m,n):\n\treturn tuplex[m:n:8]\n\ndef colon_tuple13(tuplex,m,n):\n\treturn tuplex[m:n:9]\n\ndef colon_tuple14(tuplex,m,n):\n\treturn tuplex[m:n:10]\n\ndef colon_tuple15(tuplex,m,n):\n\treturn tuplex[m:n:11]\n\ndef colon_tuple16(tuplex,m,n):\n\treturn tuplex[m:n:12]\n\ndef colon_tuple17(tuplex,m,n):\n\treturn tuplex[m:n:13]\n\ndef colon_tuple18(tuplex,m,n):\n\treturn tuplex[m:n:14]\n\ndef colon_tuple19(tuplex,m,n"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type num", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\treturn sorted(zip(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]\n\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type num"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\treturn max(a,b)\n\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\treturn min(a,b)\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum_of_three(a,b,c):   \n\treturn max(a,b,c)\n\n\"\"\"\nWrite a python function to find the minimum of three numbers.\n\"\"\"\ndef minimum_of_three(a,b,c):   \n\treturn min(a,b,c)\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum_of_four(a,b,c,d):   \n\treturn max(a,b,c,d)\n\n\"\"\"\nWrite a python function to find the minimum of four numbers.\n\"\"\"\ndef minimum_of_four(a,b,c,d):   \n\treturn min(a,b,c,d)\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum_of_five(a,b,c,d,e):   \n\treturn max(a,b,c,d,e)\n\n\"\"\"\nWrite a python function to find the minimum of five numbers.\n\"\"\"\ndef minimum_of_five(a,b,c,d,e):   \n\treturn min(a,b,c,d,e)\n\n\"\"\"\nWrite a python function to find the maximum of six numbers.\n\"\"\"\ndef maximum_of_six(a,b,c,d,e,f):   \n\treturn max(a,b,c,d,e,f)\n\n\"\"\"\nWrite a python function to find the minimum of six numbers.\n\"\"\"\ndef minimum_of_six(a,b,c,d,e,f):   \n\treturn min(a,b,c,d,e,f)\n\n\"\"\"\nWrite a python function to find the maximum of seven numbers.\n\"\"\"\ndef maximum_of_seven(a,b,c,d,e,f,g):   \n\treturn max(a,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max(a,b)\n\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\treturn min(a,b)\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum_of_three(a,b,c):   \n\treturn max(a,b,c)\n\n\"\"\"\nWrite a python function to find the minimum of three numbers.\n\"\"\"\ndef minimum_of_three(a,b,c):   \n\treturn min(a,b,c)\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum_of_four(a,b,c,d):   \n\treturn max(a,b,c,d)\n\n\"\"\"\nWrite a python function to find the minimum of four numbers.\n\"\"\"\ndef minimum_of_four(a,b,c,d):   \n\treturn min(a,b,c,d)\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum_of_five(a,b,c,d,e):   \n\treturn max(a,b,c,d,e)\n\n\"\"\"\nWrite a python function to find the minimum of five numbers.\n\"\"\"\ndef minimum_of_five(a,b,c,d,e):   \n\treturn min(a,b,c,d,e)\n\n\"\"\"\nWrite a python function to find the maximum of six numbers.\n\"\"\"\ndef maximum_of_six(a,b,c,d,e,f):   \n\treturn max(a,b,c,d,e,f)\n\n\"\"\"\nWrite a python function to find the minimum of six numbers.\n\"\"\"\ndef minimum_of_six(a,b,c,d,e,f):   \n\treturn min(a,b,c,d,e,f)\n\n\"\"\"\nWrite a python function to find the maximum of seven numbers.\n\"\"\"\ndef maximum_of_seven(a,b,c,d,e,f,g):   "}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\n\"\"\"\nWrite a function to convert a given string to a frozenset.\n\"\"\"\ndef string_to_frozenset(str1):\n\treturn frozenset(str1)\n\n\"\"\"\nWrite a function to convert a given string to a bytes.\n\"\"\"\ndef string_to_bytes(str1):\n\treturn bytes(str1, 'utf-8')\n\n\"\"\"\nWrite a function to convert a given string to a bytearray.\n\"\"\"\ndef string_to_bytearray(str1):\n\treturn bytearray(str1, 'utf-8')\n\n\"\"\"\nWrite a function to convert a given string to a memoryview.\n\"\"\"\ndef string_to_memoryview(str1):\n\treturn memoryview(str1)\n\n\"\"\"\nWrite a function to convert a given string to a buffer.\n\"\"\"\ndef string_to_buffer(str1):\n\treturn buffer(str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array_array_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(str1)\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\n\"\"\"\nWrite a function to convert a given string to a frozenset.\n\"\"\"\ndef string_to_frozenset(str1):\n\treturn frozenset(str1)\n\n\"\"\"\nWrite a function to convert a given string to a bytes.\n\"\"\"\ndef string_to_bytes(str1):\n\treturn bytes(str1, 'utf-8')\n\n\"\"\"\nWrite a function to convert a given string to a bytearray.\n\"\"\"\ndef string_to_bytearray(str1):\n\treturn bytearray(str1, 'utf-8')\n\n\"\"\"\nWrite a function to convert a given string to a memoryview.\n\"\"\"\ndef string_to_memoryview(str1):\n\treturn memoryview(str1)\n\n\"\"\"\nWrite a function to convert a given string to a buffer.\n\"\"\"\ndef string_to_buffer(str1):\n\treturn buffer(str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_array_array_array(str1):\n\treturn array.array('u', str1)\n\n\"\"\"\nWrite a function to convert a given string to a array.array.\n\"\"\"\ndef string_to_"}
{"ID": 676, "source": "MBPP:313", "prompt": "\"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to print positive numbers in a list.\n\"\"\"\ndef pos_nos(list1):\n\tfor i in list1:\n\t\tif i>0:\n\t\t\tprint(i)\n\nlist1 = [-1, -2, -3, 4, 5, 6]\npos_nos(list1)\n\n\"\"\"\nWrite a python function to print the first and last name of a person from a full name.\nTest Data:\nfull_name = \"John Doe\"\nExpected Output:\nJohn\nDoe\n\"\"\"\ndef first_last_name(full_name):\n\tfirst_name = full_name.split()[0]\n\tlast_name = full_name.split()[-1]\n\tprint(first_name)\n\tprint(last_name)\n\nfull_name = \"John Doe\"\nfirst_last_name(full_name)\n\n\"\"\"\nWrite a python function to print the first character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\nH w\n\"\"\"\ndef first_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[0], end=\" \")\n\ns = \"Hello World\"\nfirst_char_word(s)\n\n\"\"\"\nWrite a python function to print the last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\no l\n\"\"\"\ndef last_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[-1], end=\" \")\n\ns = \"Hello World\"\nlast_char_word(s)\n\n\"\"\"\nWrite a python function to print the first and last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\nHl o\n\"\"\"\ndef first_last_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[0]+i[-1], end=\" \")\n\ns = \"Hello World\"\nfirst_last_char_word(s)\n\n\"\"\"\nWrite a python function to print the first and last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to print the first character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\nH w\n\"\"\"\ndef first_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[0], end=\" \")\n\ns = \"Hello World\"\nfirst_char_word(s)\n\n\"\"\"\nWrite a python function to print the last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\no l\n\"\"\"\ndef last_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[-1], end=\" \")\n\ns = \"Hello World\"\nlast_char_word(s)\n\n\"\"\"\nWrite a python function to print the first and last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:\nHl o\n\"\"\"\ndef first_last_char_word(s):\n\tfor i in s.split():\n\t\tprint(i[0]+i[-1], end=\" \")\n\ns = \"Hello World\"\nfirst_last_char_word(s)\n\n\"\"\"\nWrite a python function to print the first and last character of each word in a given string.\nTest Data:\ns = \"Hello World\"\nExpected Output:"}
{"ID": 678, "source": "MBPP:315", "prompt": "\"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first maximum length of even word.\n\"\"\"\ndef find_Max_Len_Even(str): \n\t# code here \n\tmax_len = 0\n\tfor i in range(len(str)): \n\t\tif (str[i] == 'a' or str[i] == 'e' or str[i] == 'i' or str[i] == 'o' or str[i] == 'u'): \n\t\t\tcontinue\n\t\telse: \n\t\t\tif (len(str[i:]) > max_len): \n\t\t\t\tmax_len = len(str[i:]) \n\treturn max_len \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t\"\"\"\n\t:type A: List[int]\n\t:type x: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(len(A)-1, -1, -1):\n\t\tif A[i] == x:\n\t\t\treturn i\n\treturn -1\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 5\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 10\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 1\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 3\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 4\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 6\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn i\n\treturn -1\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 5\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 10\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 1\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 3\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 4\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10]\nx = 6\nprint(find_last_occurrence(A, x))\n\nA = [1, 2, 3, 3, 3, 4, 5, "}
{"ID": 680, "source": "MBPP:317", "prompt": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t", "predict": "<s> \"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\n\"\"\"\ndef modified_encode(alist):\n\t\"\"\"\n\tModified run-length encoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i])\n\t\telse:\n\t\t\tif alist[i] == alist[i-1]:\n\t\t\t\tnew_list[-1] = (new_list[-1][0], new_list[-1][1] + 1)\n\t\t\telse:\n\t\t\t\tnew_list.append(alist[i])\n\treturn new_list\n\ndef modified_decode(alist):\n\t\"\"\"\n\tModified run-length decoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i][0])\n\t\telse:\n\t\t\tfor j in range(alist[i][1]):\n\t\t\t\tnew_list.append(alist[i][0])\n\treturn new_list\n\ndef reflect_modified_encode(alist):\n\t\"\"\"\n\tReflect modified run-length encoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i])\n\t\telse:\n\t\t\tif alist[i] == alist[i-1]:\n\t\t\t\tnew_list[-1] = (new_list[-1][0], new_list[-1][1] - 1)\n\t\t\telse:\n\t\t\t\tnew_list.append(alist[i])\n\treturn new_list\n\ndef reflect_modified_decode(alist):\n\t\"\"\"\n\tReflect modified run-length decoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i][0])\n\t\telse:\n\t\t\tfor j in range(alist", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\telse:\n\t\t\t\tnew_list.append(alist[i])\n\treturn new_list\n\ndef modified_decode(alist):\n\t\"\"\"\n\tModified run-length decoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i][0])\n\t\telse:\n\t\t\tfor j in range(alist[i][1]):\n\t\t\t\tnew_list.append(alist[i][0])\n\treturn new_list\n\ndef reflect_modified_encode(alist):\n\t\"\"\"\n\tReflect modified run-length encoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:\n\t\t\tnew_list.append(alist[i])\n\t\telse:\n\t\t\tif alist[i] == alist[i-1]:\n\t\t\t\tnew_list[-1] = (new_list[-1][0], new_list[-1][1] - 1)\n\t\t\telse:\n\t\t\t\tnew_list.append(alist[i])\n\treturn new_list\n\ndef reflect_modified_decode(alist):\n\t\"\"\"\n\tReflect modified run-length decoding.\n\t\"\"\"\n\tnew_list = []\n\tfor i in range(len(alist)):\n\t\tif i == 0:"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\treturn (s**3)**(1/2)\n\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): "}
{"ID": 682, "source": "MBPP:319", "prompt": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re\n\treturn re.findall(r'\\w{5}', text)\n\nprint(find_long_word(\"Hello World\"))\n\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\n\"\"\"\ndef find_long_word(text):\n\timport re"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_2(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_3(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_4(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_5(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_6(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_7(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_8(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_9(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_10(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_11(n):\n\treturn (n * (n + 1) * (2 * n + 1)) //", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_2(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_3(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_4(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_5(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_6(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_7(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_8(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_9(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_10(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1)) // 2\n\ndef sum_difference_11(n):"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\tif s == 0: \n\t\treturn 0\n\telse: \n\t\treturn s % 10 + find_demlo(s // 10) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 687, "source": "MBPP:324", "prompt": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\n\"\"\"\ndef sum_of_alternates(test_tuple):\n\t\"\"\"\n\ttest_tuple: a tuple\n\t\n\treturns: the sum of the alternate elements of test_tuple\n\t\"\"\"\n\tsum = 0\n\tfor i in range(len(test_tuple)):\n\t\tif i % 2 == 0:\n\t\t\tsum += test_tuple[i]\n\treturn sum\n\ndef test_sum_of_alternates():\n\tassert sum_of_alternates((1, 2, 3, 4, 5)) == 15\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6)) == 21\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7)) == 28\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8)) == 36\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 45\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 55\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 66\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == 78\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == 91\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert sum_of_alternates((1, 2, 3, 4, 5)) == 15\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6)) == 21\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7)) == 28\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8)) == 36\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 45\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 55\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 66\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == 78\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == 91\n\tassert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, "}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile i * i < n:\n\t\ti += 1\n\treturn i\n\n\ndef get_Min_Squares(n):\n\t\"\"\"\n\t:type n: int"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t\"\"\"\n\t:type test_list: list\n\t:rtype: str\n\t\"\"\"\n\tword_count = {}\n\tfor word in test_list:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\n\tmax_count = 0\n\tmax_word = \"\"\n\tfor word, count in word_count.items():\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_word = word\n\n\treturn max_word\n\nprint(most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world"}
{"ID": 690, "source": "MBPP:327", "prompt": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a function to print check if the triangle is isosceles or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\tif x==y or y==z or x==z:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_isosceles(3,3,4))\nprint(check_isosceles(3,4,3))\nprint(check_isosceles(3,3,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_isosceles(3,3,4))\nprint(check_isosceles(3,4,3))\nprint(check_isosceles(3,3,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check_isosceles(5,4,3))\nprint(check_isosceles(5,3,4))\nprint(check_isosceles(4,5,3))\nprint(check_isosceles(3,4,5))\nprint(check_isosceles(3,5,4))\nprint(check_isosceles(4,3,5))\nprint(check"}
{"ID": 691, "source": "MBPP:328", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_left(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list3+list2\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_2(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_left_2(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right_2(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list3+list2\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_right_2(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_3(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_left(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list3+list2\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_right(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_2(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_left_2(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right_2(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list3+list2\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(rotate_right_2(list1,3,2))\n\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\n\"\"\"\ndef rotate_left_3(list1,m,n):\n\tlist2=list1[m:]\n\tlist3=list1[:m]\n\tlist1=list2+list3\n\treturn list1\n\nlist1=[1,2,3,4,5,6,7,8,9]\nprint"}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\tpattern = r\"[a-zA-Z]{3,5}\"\n\treturn re.findall(pattern, text)\n\nprint(find_char(\"Hello World\"))\nprint(find_char(\"Hello World!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_char(\"Hello World\"))\nprint(find_char(\"Hello World!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char(\"Hello World!!!\"))\nprint(find_char"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\tcount = 0\n\twhile n > 0:\n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\ndef test_function(test_case):\n\tcomputed_output = count_unset_bits(test_case)\n\tprint(computed_output)\n\tif computed_output == test_case:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\nif __name__ == '__main__':\n\ttest_function(1)\n\ttest_function(2)\n\ttest_function(3)\n\ttest_function(4)\n\ttest_function(5)\n\ttest_function(6)\n\ttest_function(7)\n\ttest_function(8)\n\ttest_function(9)\n\ttest_function(10)\n\ttest_function(11)\n\ttest_function(12)\n\ttest_function(13)\n\ttest_function(14)\n\ttest_function(15)\n\ttest_function(16)\n\ttest_function(17)\n\ttest_function(18)\n\ttest_function(19)\n\ttest_function(20)\n\ttest_function(21)\n\ttest_function(22)\n\ttest_function(23)\n\ttest_function(24)\n\ttest_function(25)\n\ttest_function(26)\n\ttest_function(27)\n\ttest_function(28)\n\ttest_function(29)\n\ttest_function(30)\n\ttest_function(31)\n\ttest_function(32)\n\ttest_function(33)\n\ttest_function(34)\n\ttest_function(35)\n\ttest_function(36)\n\ttest_function(37)\n\ttest_function(38)\n\ttest_function(39)\n\ttest_function(40)\n\ttest_function(41)\n\ttest_function(42)\n\ttest_function(43)\n\ttest_function(44)\n\ttest_function(45)\n\ttest_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\ttest_function(1)\n\ttest_function(2)\n\ttest_function(3)\n\ttest_function(4)\n\ttest_function(5)\n\ttest_function(6)\n\ttest_function(7)\n\ttest_function(8)\n\ttest_function(9)\n\ttest_function(10)\n\ttest_function(11)\n\ttest_function(12)\n\ttest_function(13)\n\ttest_function(14)\n\ttest_function(15)\n\ttest_function(16)\n\ttest_function(17)\n\ttest_function(18)\n\ttest_function(19)\n\ttest_function(20)\n\ttest_function(21)\n\ttest_function(22)\n\ttest_function(23)\n\ttest_function(24)\n\ttest_function(25)\n\ttest_function(26)\n\ttest_function(27)\n\ttest_function(28)\n\ttest_function(29)\n\ttest_function(30)\n\ttest_function(31)\n\ttest_function(32)\n\ttest_function(33)\n\ttest_function(34)\n\ttest_function(35)\n\ttest_function(36)\n\ttest_function(37)\n\ttest_function(38)\n\ttest_function(39)\n\ttest_function(40)\n\ttest_function(41)\n\ttest_function(42)\n\ttest_function(43)\n\ttest_function(44)\n\ttest_function(45)\n\ttest_"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "<s> \"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\treturn sorted(sub_li, key=lambda x: x[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  \n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True  \n\telse:  "}
{"ID": 698, "source": "MBPP:335", "prompt": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the sum of arithmetic progression.\n\"\"\"\ndef ap_sum(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_2(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_3(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_4(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_5(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_6(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_7(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_8(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_9(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_10(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_11(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_12(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_13(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_14(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_15(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_16(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_17(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_18(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_19(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_20(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_21(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_22(a,n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (n*d)/2\n\ndef ap_sum_2(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_3(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_4(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_5(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_6(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_7(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_8(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_9(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_10(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_11(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_12(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_13(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_14(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_15(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_16(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_17(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_18(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_19(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_20(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_21(a,n,d):\n\treturn (n*d)/2\n\ndef ap_sum_22(a,n"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers.\n\"\"\"\ndef find_Max_Value(arr):\n\treturn max(arr)\n\n\n\"\"\"\nWrite a python function to find the maximum value in a given array of integers."}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\tlst = sorted(lst)\n\treturn sum(lst[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(filter(lambda x: x > 0, lst))[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else float('inf'))[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(lst[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(filter(lambda x: x > 0, lst))[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else float('inf'))[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else -1)[:3])\n\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst, key=lambda x: x if x > 0 else 0)[:3])\n\ndef sum_three_smallest_nums"}
{"ID": 707, "source": "MBPP:344", "prompt": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\n\"\"\"\ndef count_Odd_Squares(n,m): \n\tcount = 0\n\tfor i in range(n,m+1):\n\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i%2 != 0:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n*(n+1)//2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers, where n is a positive integer."}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\tdiff = []\n\tfor i in range(len(nums)-1):\n\t\tdiff.append(nums[i+1]-nums[i])\n\treturn diff\n\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(diff_consecutivenums([1,2,3,4,5,6,7,8,9]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,1"}
{"ID": 709, "source": "MBPP:346", "prompt": "\"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\t", "predict": "<s> \"\"\"\nWrite a function to find entringer number e(n, k).\n\"\"\"\ndef zigzag(n, k): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag(n - 1, k // 2) \n\telse: \n\t\treturn zigzag(n - 1, (k + 1) // 2) \n\ndef zigzag_recursive(n, k): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_recursive(n - 1, k // 2) \n\telse: \n\t\treturn zigzag_recursive(n - 1, (k + 1) // 2) \n\ndef zigzag_iterative(n, k): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_iterative(n - 1, k // 2) \n\telse: \n\t\treturn zigzag_iterative(n - 1, (k + 1) // 2) \n\ndef zigzag_recursive_memo(n, k, memo): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_recursive_memo(n - 1, k // 2, memo) \n\telse: \n\t\treturn zigzag_recursive_memo(n - 1, (k + 1) // 2, memo) \n\ndef zigzag_iterative_memo(n, k, memo): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag(n - 1, k // 2) \n\telse: \n\t\treturn zigzag(n - 1, (k + 1) // 2) \n\ndef zigzag_recursive(n, k): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_recursive(n - 1, k // 2) \n\telse: \n\t\treturn zigzag_recursive(n - 1, (k + 1) // 2) \n\ndef zigzag_iterative(n, k): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_iterative(n - 1, k // 2) \n\telse: \n\t\treturn zigzag_iterative(n - 1, (k + 1) // 2) \n\ndef zigzag_recursive_memo(n, k, memo): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0: \n\t\treturn zigzag_recursive_memo(n - 1, k // 2, memo) \n\telse: \n\t\treturn zigzag_recursive_memo(n - 1, (k + 1) // 2, memo) \n\ndef zigzag_iterative_memo(n, k, memo): \n\tif n == 1: \n\t\treturn 1\n\tif k == 1: \n\t\treturn n \n\tif k % 2 == 0"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "<s> \"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\tn = len(M) \n\tdp = [0] * (n + 1) \n\tdp[0] = 1\n\tfor i in range(1, n + 1): \n\t\tfor j in range(i, n + 1): \n\t\t\tif M[j - 1] + dp[j - i] == j: \n\t\t\t\tdp[j] += 1\n\treturn dp[n] \n\nM = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_ways(M))\n\n\"\"\"\nGiven an array of integers, find the maximum sum of a subarray of size k.\n\"\"\"\ndef find_max_sum(arr, k):\n    n = len(arr)\n    if n < k:\n        return 0\n\n    # Create a window and calculate sum\n    # for first window of size k\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n\n    # Calculate sum of remaining windows by\n    # removing first element of previous window\n    # and adding last element of current window\n    for i in range(k, n):\n        max_sum += arr[i] - arr[i - k]\n\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_max_sum(arr, 3))\n\n\"\"\"\nGiven an array of integers, find the maximum sum of a subarray of size k.\n\"\"\"\ndef find_max_sum(arr, k):\n    n = len(arr)\n    if n < k:\n        return 0\n\n    # Create a window and calculate sum\n    # for first window of size k\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n\n    # Calculate sum of remaining windows by\n    # removing first element of previous window\n    # and adding last element of current window\n    for i in range(k, n):\n        max_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        return 0\n\n    # Create a window and calculate sum\n    # for first window of size k\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n\n    # Calculate sum of remaining windows by\n    # removing first element of previous window\n    # and adding last element of current window\n    for i in range(k, n):\n        max_sum += arr[i] - arr[i - k]\n\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_max_sum(arr, 3))\n\n\"\"\"\nGiven an array of integers, find the maximum sum of a subarray of size k.\n\"\"\"\ndef find_max_sum(arr, k):\n    n = len(arr)\n    if n < k:\n        return 0\n\n    # Create a window and calculate sum\n    # for first window of size k\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n\n    # Calculate sum of remaining windows by\n    # removing first element of previous window\n    # and adding last element of current window"}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\tfor i in string :\n\t\tif i not in ['0', '1'] :\n\t\t\treturn False\n\treturn True\n\nprint(check('010101'))\nprint(check('0101010'))\nprint(check('010101010'))\nprint(check('01010101010'))\nprint(check('0101010101010'))\nprint(check('010101010101010'))\nprint(check('01010101010101010'))\nprint(check('0101010101010101010'))\nprint(check('010101010101010101010'))\nprint(check('01010101010101010101010'))\nprint(check('0101010101010101010101010'))\nprint(check('010101010101010101010101010'))\nprint(check('01010101010101010101010101010'))\nprint(check('0101010101010101010101010101010'))\nprint(check('010101010101010101010101010101010'))\nprint(check('01010101010101010101010101010101010'))\nprint(check('0101010101010101010101010101010101010'))\nprint(check('01010101010101010", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check('010101'))\nprint(check('0101010'))\nprint(check('010101010'))\nprint(check('01010101010'))\nprint(check('0101010101010'))\nprint(check('010101010101010'))\nprint(check('01010101010101010'))\nprint(check('0101010101010101010'))\nprint(check('010101010101010101010'))\nprint(check('01010101010101010101010'))\nprint(check('0101010101010101010101010'))\nprint(check('010101010101010101010101010'))\nprint(check('01010101010101010101010101010'))\nprint(check('0101010101010101010101010101010'))\nprint(check('010101010101010101010101010101010'))\nprint(check('01010101010101010101010101010101010'))\nprint(check('0101010101010101010101010101010101010'))\nprint(check('01010101010101010"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t\"\"\"\n\ts : string\n\treturn : string\n\t\"\"\"\n\t# Your code goes here\n\tif len(s) == 0 : \n\t\treturn \"\"\n\t\n\t# create a dictionary to store the frequency of each character\n\tfreq = {}\n\tfor i in range(len(s)) : \n\t\tif s[i] in freq : \n\t\t\tfreq[s[i]] += 1\n\t\telse : \n\t\t\tfreq[s[i]] = 1\n\t\n\t# find the character with the maximum frequency\n\tmax_freq = 0\n\tmax_char = \"\"\n\tfor i in freq : \n\t\tif freq[i] > max_freq : \n\t\t\tmax_freq = freq[i]\n\t\t\tmax_char = i\n\t\n\t# remove the character with the maximum frequency\n\ts = s.replace(max_char, \"\")\n\t\n\treturn s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 715, "source": "MBPP:352", "prompt": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\n\"\"\"\ndef unique_Characters(str):\n\treturn len(str) == len(set(str))\n\nprint(unique_Characters(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(unique_Characters(\"abcd\"))\nprint(unique_Characters(\"abcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(unique_Characters(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(unique_Characters(\"abcd\"))\nprint(unique_Characters(\"abcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(unique_Characters(\"abcdabcdabcdabcdabcd"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\tfor i in range(len(list1)):\n\t\tlist1[i].pop(n)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_column(list1, 1))\n\n\"\"\"\nWrite a function to remove a specified row from a given nested list.\n\"\"\"\ndef remove_row(list1, n):\n\tlist1.pop(n)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_row(list1, 1))\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(list1, n):\n\tfor i in range(len(list1)):\n\t\tfor j in range(len(list1[i])):\n\t\t\tif list1[i][j] == n:\n\t\t\t\tlist1[i].pop(j)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_element(list1, 5))\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(list1, n):\n\tfor i in range(len(list1)):\n\t\tfor j in range(len(list1[i])):\n\t\t\tif list1[i][j] == n:\n\t\t\t\tlist1[i].pop(j)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_element(list1, 5))\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlist1.pop(n)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_row(list1, 1))\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(list1, n):\n\tfor i in range(len(list1)):\n\t\tfor j in range(len(list1[i])):\n\t\t\tif list1[i][j] == n:\n\t\t\t\tlist1[i].pop(j)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_element(list1, 5))\n\n\"\"\"\nWrite a function to remove a specified element from a given nested list.\n\"\"\"\ndef remove_element(list1, n):\n\tfor i in range(len(list1)):\n\t\tfor j in range(len(list1[i])):\n\t\t\tif list1[i][j] == n:\n\t\t\t\tlist1[i].pop(j)\n\treturn list1\n\nlist1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9]\n]\n\nprint(remove_element(list1, 5))\n\n\"\"\""}
{"ID": 717, "source": "MBPP:354", "prompt": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\t", "predict": "<s> \"\"\"\nWrite a function to find t-nth term of arithemetic progression.\n\"\"\"\ndef tn_ap(a,n,d):\n\treturn a+n*d\n\ndef tn_ap_2(a,n,d):\n\treturn a+(n-1)*d\n\ndef tn_ap_3(a,n,d):\n\treturn a+(n-2)*d\n\ndef tn_ap_4(a,n,d):\n\treturn a+(n-3)*d\n\ndef tn_ap_5(a,n,d):\n\treturn a+(n-4)*d\n\ndef tn_ap_6(a,n,d):\n\treturn a+(n-5)*d\n\ndef tn_ap_7(a,n,d):\n\treturn a+(n-6)*d\n\ndef tn_ap_8(a,n,d):\n\treturn a+(n-7)*d\n\ndef tn_ap_9(a,n,d):\n\treturn a+(n-8)*d\n\ndef tn_ap_10(a,n,d):\n\treturn a+(n-9)*d\n\ndef tn_ap_11(a,n,d):\n\treturn a+(n-10)*d\n\ndef tn_ap_12(a,n,d):\n\treturn a+(n-11)*d\n\ndef tn_ap_13(a,n,d):\n\treturn a+(n-12)*d\n\ndef tn_ap_14(a,n,d):\n\treturn a+(n-13)*d\n\ndef tn_ap_15(a,n,d):\n\treturn a+(n-14)*d\n\ndef tn_ap_16(a,n,d):\n\treturn a+(n-15)*d\n\ndef tn_ap_17(a,n,d):\n\treturn a+(n-16)*d\n\ndef tn_ap_18(a,n,d):\n\treturn a+(n-17)*d\n\ndef tn_ap_19(a,n,d):\n\treturn a+(n-18)*d\n\ndef tn_ap_20(a,n,d):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a+n*d\n\ndef tn_ap_2(a,n,d):\n\treturn a+(n-1)*d\n\ndef tn_ap_3(a,n,d):\n\treturn a+(n-2)*d\n\ndef tn_ap_4(a,n,d):\n\treturn a+(n-3)*d\n\ndef tn_ap_5(a,n,d):\n\treturn a+(n-4)*d\n\ndef tn_ap_6(a,n,d):\n\treturn a+(n-5)*d\n\ndef tn_ap_7(a,n,d):\n\treturn a+(n-6)*d\n\ndef tn_ap_8(a,n,d):\n\treturn a+(n-7)*d\n\ndef tn_ap_9(a,n,d):\n\treturn a+(n-8)*d\n\ndef tn_ap_10(a,n,d):\n\treturn a+(n-9)*d\n\ndef tn_ap_11(a,n,d):\n\treturn a+(n-10)*d\n\ndef tn_ap_12(a,n,d):\n\treturn a+(n-11)*d\n\ndef tn_ap_13(a,n,d):\n\treturn a+(n-12)*d\n\ndef tn_ap_14(a,n,d):\n\treturn a+(n-13)*d\n\ndef tn_ap_15(a,n,d):\n\treturn a+(n-14)*d\n\ndef tn_ap_16(a,n,d):\n\treturn a+(n-15)*d\n\ndef tn_ap_17(a,n,d):\n\treturn a+(n-16)*d\n\ndef tn_ap_18(a,n,d):\n\treturn a+(n-17)*d\n\ndef tn_ap_19(a,n,d):\n\treturn a+(n-18)*d\n\ndef tn_ap_20(a,n,d):"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n\"\"\"\nWrite a python function to"}
{"ID": 720, "source": "MBPP:357", "prompt": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,2,3), (4,5,6), (7,8,9)]\nprint(find_max(test_list))\n\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,2,3), (4,5,6), (7,8,9)]\nprint(find_max(test_list))\n\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,2,3), (4,5,6), (7,8,9)]\nprint(find_max(test_list))\n\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,2,3), (4,5,6), (7,8,9)]\nprint(find_max(test_list))\n\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,2,3), (4,5,6), (7,8,9)]\nprint(find_max(test_list))\n\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\n\"\"\"\ndef find_max(test_list):\n\tmax_val = None\n\tfor tup in test_list:\n\t\tif max_val is None:\n\t\t\tmax_val = tup[0]\n\t\telif tup[0] > max_val:\n\t\t\tmax_val = tup[0]\n\treturn max_val\n\ntest_list = [(1,"}
{"ID": 721, "source": "MBPP:358", "prompt": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,3,4,5,6]\nprint(moddiv_list(nums1,nums2))\n\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\n\"\"\"\ndef moddiv_list(nums1,nums2):"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\tif a==0: \n\t\treturn False\n\tx1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a) \n\tx2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a) \n\tif x1 == 2*x2: \n\t\treturn True\n\telse: \n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol(n-1) + get_carol(n-2) \n\ndef get_carol_recursive(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_recursive(n-1) + get_carol_recursive(n-2) \n\ndef get_carol_iterative(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\ta = 1\n\t\tb = 1\n\t\tc = 0\n\t\tfor i in range(2, n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn c \n\ndef get_carol_memoization(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_tabulation(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_bottom_up(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_dynamic_programming", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn c \n\ndef get_carol_memoization(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_tabulation(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_bottom_up(n): \n\tmemo = [0] * (n+1) \n\tmemo[1] = 1\n\tmemo[2] = 1\n\tfor i in range(3, n+1): \n\t\tmemo[i] = memo[i-1] + memo[i-2] \n\treturn memo[n] \n\ndef get_carol_dynamic_programming"}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\treturn [sublist for sublist in list1 if sublist]\n\nlist1 = [[1,2,3], [4,5,6], [], [7,8,9], [10]]\nprint(remove_empty(list1))\n\n\"\"\"\nWrite a function to remove duplicates in a list, the\nduplicates are considered consecutive.\n\"\"\"\ndef remove_duplicates(list1):\n\tif not list1:\n\t\treturn list1\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tif i == 0 or list1[i] != list1[i-1]:\n\t\t\tresult.append(list1[i])\n\treturn result\n\nlist1 = [1,2,2,3,3,3,4,4,4,4]\nprint(remove_duplicates(list1))\n\n\"\"\"\nWrite a function to find the first unique character in a given string.\n\"\"\"\ndef first_unique_character(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char_count.get(char):\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn -1\n\nstring = \"leetcode\"\nprint(first_unique_character(string))\n\n\"\"\"\nWrite a function to find the last unique character in a given string.\n\"\"\"\ndef last_unique_character(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char_count.get(char):\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn -1\n\nstring = \"leetcode\"\nprint(last_unique_character(string))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_re", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "list1 = [1,2,2,3,3,3,4,4,4,4]\nprint(remove_duplicates(list1))\n\n\"\"\"\nWrite a function to find the first unique character in a given string.\n\"\"\"\ndef first_unique_character(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char_count.get(char):\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn -1\n\nstring = \"leetcode\"\nprint(first_unique_character(string))\n\n\"\"\"\nWrite a function to find the last unique character in a given string.\n\"\"\"\ndef last_unique_character(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char_count.get(char):\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn -1\n\nstring = \"leetcode\"\nprint(last_unique_character(string))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_re"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn max(set(nums), key=nums.count)\n\nif __name__ == '__main__':\n\tprint(max_occurrences([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tprint(max_occurrences([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\treturn tuple(i + K for i in test_list)\n\nprint(add_K_element((1, 2, 3), 4))\n\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):"}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\tcount = 0\n\tfor i in range(len(str)): \n\t\tif str[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount += 2\n\treturn count \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_2(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_3(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_4(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_5(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_2(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_3(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_4(list_nums):\n\t\"\"\"\n\t:param list_nums: list of integers\n\t:return: largest product of the pair of adjacent elements\n\t\"\"\"\n\tlist_nums.sort()\n\tmax_product = 1\n\tfor i in range(len(list_nums)-1):\n\t\tmax_product = max(max_product, list_nums[i]*list_nums[i+1])\n\treturn max_product\n\ndef adjacent_num_product_5(list_nums):\n\t\"\"\""}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tif abs(height(root.left) - height(root.right)) > 1: \n\t\treturn False\n\treturn is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(height(root.left), height(root.right)) + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\treturn tuple(test_tup for _ in range(N))\n\nprint(repeat_tuples((1, 2, 3), 3))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 0))\n# ()\n\nprint(repeat_tuples((1, 2, 3), -1))\n# ()\n\nprint(repeat_tuples((1, 2, 3), 1))\n# (1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 2))\n# (1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 4))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 5))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 6))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 7))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 8))\n# (1, 2, 3, 1, 2, 3, 1, 2,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(repeat_tuples((1, 2, 3), 3))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 0))\n# ()\n\nprint(repeat_tuples((1, 2, 3), -1))\n# ()\n\nprint(repeat_tuples((1, 2, 3), 1))\n# (1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 2))\n# (1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 4))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 5))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 6))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 7))\n# (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nprint(repeat_tuples((1, 2, 3), 8))\n# (1, 2, 3, 1, 2, 3, 1, 2,"}
{"ID": 733, "source": "MBPP:370", "prompt": "\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\ndef float_sort(price):\n\treturn sorted(price, key=lambda x: float(x[1]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\tif left_element == right_element:\n\t\treturn left_element + 1\n\telif left_element > right_element:\n\t\treturn None\n\telse:\n\t\tmid_element = (left_element + right_element) // 2\n\t\tif A[mid_element] == mid_element:\n\t\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\t\telif A[mid_element] > mid_element:\n\t\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\t\telse:\n\t\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\n\ndef smallest_missing_element(A):\n\treturn smallest_missing(A, 0, len(A) - 1)\n\n\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\ndef volume_cuboid_2(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_3(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_4(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_5(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_6(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_7(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_8(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_9(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_10(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_11(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_12(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_13(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_14(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_15(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_16(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_17(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_18(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_19(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_20(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_21(length,width,height):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l*w*h\n\ndef volume_cuboid_2(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_3(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_4(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_5(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_6(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_7(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_8(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_9(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_10(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_11(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_12(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_13(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_14(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_15(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_16(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_17(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_18(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_19(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_20(length,width,height):\n\treturn length*width*height\n\ndef volume_cuboid_21(length,width,height):"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<s> \"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\treturn round(n/m)*m\n\nprint(round_num(10.5, 1))\nprint(round_num(10.5, 2))\nprint(round_num(10.5, 5))\nprint(round_num(10.5, 10))\nprint(round_num(10.5, 100))\nprint(round_num(10.5, 1000))\nprint(round_num(10.5, 10000))\nprint(round_num(10.5, 100000))\nprint(round_num(10.5, 1000000))\nprint(round_num(10.5, 10000000))\nprint(round_num(10.5, 100000000))\nprint(round_num(10.5, 1000000000))\nprint(round_num(10.5, 10000000000))\nprint(round_num(10.5, 100000000000))\nprint(round_num(10.5, 1000000000000))\nprint(round_num(10.5, 10000000000000))\nprint(round_num(10.5, 100000000000000))\nprint(round_num(10.5, 1000000000000000))\nprint(round_num(10.5, 10000000000000000))\nprint(round_num(10.5, 100000000000000000))\nprint(round_num(10.5, 1000000000000000000))\nprint(round_num(10.5, 1000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(round_num(10.5, 1))\nprint(round_num(10.5, 2))\nprint(round_num(10.5, 5))\nprint(round_num(10.5, 10))\nprint(round_num(10.5, 100))\nprint(round_num(10.5, 1000))\nprint(round_num(10.5, 10000))\nprint(round_num(10.5, 100000))\nprint(round_num(10.5, 1000000))\nprint(round_num(10.5, 10000000))\nprint(round_num(10.5, 100000000))\nprint(round_num(10.5, 1000000000))\nprint(round_num(10.5, 10000000000))\nprint(round_num(10.5, 100000000000))\nprint(round_num(10.5, 1000000000000))\nprint(round_num(10.5, 10000000000000))\nprint(round_num(10.5, 100000000000000))\nprint(round_num(10.5, 1000000000000000))\nprint(round_num(10.5, 10000000000000000))\nprint(round_num(10.5, 100000000000000000))\nprint(round_num(10.5, 1000000000000000000))\nprint(round_num(10.5, 1000"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n"}
{"ID": 744, "source": "MBPP:381", "prompt": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\n\treturn sorted(list_data, key=lambda x: x[index_no])\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(list_data, key=lambda x: x[index_no])\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 0))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 2))\n\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_2(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_3(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_4(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_5(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_6(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_7(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_8(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_9(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_2(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_3(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_4(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_5(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_6(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_7(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_8(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:\n\t\t\tcount += 1\n\treturn count\n\ndef find_rotation_count_9(A):\n\tcount = 0\n\tfor i in range(len(A)-1):\n\t\tif A[i] > A[i+1]:"}
{"ID": 747, "source": "MBPP:384", "prompt": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \n\t# Sort the given array\n\tarr.sort() \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the smallest element\n\t\tif arr[i] == arr[0]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t# Sort the given array in descending order\n\tarr.sort(reverse = True) \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the largest element\n\t\tif arr[i] == arr[0]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the second largest value in a given array.\n\"\"\"\ndef frequency_Of_Second_Largest(n,arr): \n\t# Sort the given array in descending order\n\tarr.sort(reverse = True) \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the second largest element\n\t\tif arr[i] == arr[1]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the second smallest value in a given array.\n\"\"\"\ndef frequency_Of_Second_Smallest(n,arr): \n\t# Sort the given array\n\tarr.sort() \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n):", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Sort the given array\n\tarr.sort() \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the smallest element\n\t\tif arr[i] == arr[0]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t# Sort the given array in descending order\n\tarr.sort(reverse = True) \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the largest element\n\t\tif arr[i] == arr[0]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the second largest value in a given array.\n\"\"\"\ndef frequency_Of_Second_Largest(n,arr): \n\t# Sort the given array in descending order\n\tarr.sort(reverse = True) \n\t\n\t# Initialize result\n\tresult = 0\n\t\n\t# Iterate through the given array\n\tfor i in range(n): \n\t\t# Check if the current element is equal to the second largest element\n\t\tif arr[i] == arr[1]: \n\t\t\t# Increment the result\n\t\t\tresult += 1\n\t\n\t# Return the result\n\treturn result \n\n\n\"\"\"\nWrite a python function to find the frequency of the second smallest value in a given array.\n\"\"\"\ndef frequency_Of_Second_Smallest(n,arr): "}
{"ID": 749, "source": "MBPP:386", "prompt": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\"\"\"\ndef swap_count(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\treturn count\n\ndef min_swaps(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_2(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_3(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_4(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_5(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_6(s):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\treturn count\n\ndef min_swaps(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_2(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_3(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_4(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]\n\treturn count\n\ndef min_swaps_5(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '(':\n\t\t\tcontinue\n\t\telif s[i] == ')':\n\t\t\tcount += 1\n\t\t\ts = s[:i] + '(' + s[i+1:]"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\tif N%2==0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\n\n\"\"\"\nWrite a python function to check whether the given number is strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif N%2==0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\n\n\"\"\"\nWrite a python function to check whether the given number is strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):\n    for i in range(1,n+1):\n        if pow(i,3)==n:\n            return True\n    return False\n\n\n\"\"\"\nWrite a python function to check whether the given number is a strong or not.\nA number is said to be strong if it is a sum of 3 positive cubes.\n\"\"\"\ndef strong_number(n):"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (2 * i) <= n: \n\t\ti = 2 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 3 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_3(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (3 * i) <= n: \n\t\ti = 3 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 4 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_4(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (4 * i) <= n: \n\t\ti = 4 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 5 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_5(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (5 * i) <= n: \n\t\ti = 5 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 6 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_6(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (6 * i) <= n: \n\t\ti = 6 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 7 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_7(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (7 * i) <= n: \n\t\ti = 7 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 8 that is less than or equal to n.\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (2 * i) <= n: \n\t\ti = 2 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 3 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_3(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (3 * i) <= n: \n\t\ti = 3 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 4 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_4(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (4 * i) <= n: \n\t\ti = 4 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 5 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_5(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (5 * i) <= n: \n\t\ti = 5 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 6 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_6(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (6 * i) <= n: \n\t\ti = 6 * i\n\treturn i\n\n\"\"\"\nWrite a python function to find the highest power of 7 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_7(n): \n\tif n == 0: \n\t\treturn 0\n\ti = 1\n\twhile (7 * i) <= n: \n\t\ti = 7 * i"}
{"ID": 754, "source": "MBPP:391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\n\treturn {l1[i]: {l2[i]: l3[i] for i in range(len(l1))} for i in range(len(l1))}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\treturn re.match(r\"^[a-zA-Z0-9]+$\", string)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "<s> \"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\tif r > n-r: \n\t\tr = n-r \n\tres = 1\n\tfor i in range(r+1, n+1): \n\t\tres = (res * i) % p\n\tfor i in range(1, n-r+1): \n\t\tres = (res * i) % p\n\treturn res\n\n\n\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): "}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tpattern = re.compile(\n\t\tr'^(?:http|ftp)s?://' # http:// or https://\n\t\tr'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n\t\tr'localhost|' #localhost...\n\t\tr'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n\t\tr'(?::\\d+)?' # optional port\n\t\tr'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\treturn pattern.match(str) is not None\n\nprint(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8#q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8#q=python&q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..6", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_valid_URL(\"https://www.google.com\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8#q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..69i57j0l5.2051j0j7&sourceid=chrome&ie=UTF-8#q=python&q=python\"))\nprint(is_valid_URL(\"https://www.google.com/search?q=python&oq=python&aqs=chrome..6"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\treturn min(a,b)\n\n\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\treturn max(a,b)\n\n\"\"\"\nWrite a python function to find the absolute difference between two numbers.\n\"\"\"\ndef absolute_difference(a,b):   \n\treturn abs(a-b)\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(a,b):   \n\treturn a+b\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef difference(a,b):   \n\treturn a-b\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef product(a,b):   \n\treturn a*b\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quotient(a,b):   \n\treturn a/b\n\n\"\"\"\nWrite a python function to find the modulus of two numbers.\n\"\"\"\ndef modulus(a,b):   \n\treturn a%b\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef power(a,b):   \n\treturn a**b\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef square_root(a):   \n\treturn a**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube_root(a):   \n\treturn a**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(a):   \n\tif a==0:\n\t\treturn 1\n\telse:\n\t\treturn a*factorial(a-1)\n\n\"\"\"\nWrite a python function to find the gcd of two numbers.\n\"\"\"\ndef gcd(a,b):   \n\tif b==0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\n\"\"\"\nWrite a python function to find the lcm", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min(a,b)\n\n\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\treturn max(a,b)\n\n\"\"\"\nWrite a python function to find the absolute difference between two numbers.\n\"\"\"\ndef absolute_difference(a,b):   \n\treturn abs(a-b)\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(a,b):   \n\treturn a+b\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef difference(a,b):   \n\treturn a-b\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef product(a,b):   \n\treturn a*b\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quotient(a,b):   \n\treturn a/b\n\n\"\"\"\nWrite a python function to find the modulus of two numbers.\n\"\"\"\ndef modulus(a,b):   \n\treturn a%b\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef power(a,b):   \n\treturn a**b\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef square_root(a):   \n\treturn a**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube_root(a):   \n\treturn a**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(a):   "}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\treturn tuplex in tuple1\n\nprint(check_tuplex(('a','b'),('a','b')))\nprint(check_tuplex(('a','c'),('a','b')))\nprint(check_tuplex(('a','b'),('a','b','c')))\nprint(check_tuplex(('a','c'),('a','b','c')))\nprint(check_tuplex(('a','b'),('a','b','c','d')))\nprint(check_tuplex(('a','c'),('a','b','c','d')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h','i')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h','i')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h','i','j')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h','i','j')))\nprint(check_tuplex(('a','b'),('a','b','c", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_tuplex(('a','b'),('a','b')))\nprint(check_tuplex(('a','c'),('a','b')))\nprint(check_tuplex(('a','b'),('a','b','c')))\nprint(check_tuplex(('a','c'),('a','b','c')))\nprint(check_tuplex(('a','b'),('a','b','c','d')))\nprint(check_tuplex(('a','c'),('a','b','c','d')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h','i')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h','i')))\nprint(check_tuplex(('a','b'),('a','b','c','d','e','f','g','h','i','j')))\nprint(check_tuplex(('a','c'),('a','b','c','d','e','f','g','h','i','j')))\nprint(check_tuplex(('a','b'),('a','b','c"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\treturn \"Even\" if x%2==0 else \"Odd\"\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn \"Even\" if x%2==0 else \"Odd\"\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):\n\treturn a+b\n\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(a, b):"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_2(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_3(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_4(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_5(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_6(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_7(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_8(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_9(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_10(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_11(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_12(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_2(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_3(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_4(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_5(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_6(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_7(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_8(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_9(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_10(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_11(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_12(n):\n\tn = str(n)\n\tn = sorted(n, reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k < 0:\n\t\treturn []\n\tif k > len(nums1) * len(nums2):\n\t\treturn []\n\tnums1.sort()\n\tnums2.sort()\n\tresult = []\n\ti = 0\n\tj = 0\n\twhile i < len(nums1) and j < len(nums2) and k > 0:\n\t\tresult.append([nums1[i], nums2[j]])\n\t\ti += 1\n\t\tj += 1\n\t\tk -= 1\n\treturn result\n\nprint(k_smallest_pairs([1, 2], [3, 4], 3))\nprint(k_smallest_pairs([1, 2], [3, 4], 4))\nprint(k_smallest_pairs([1, 2], [3, 4], 5))\nprint(k_smallest_pairs([1, 2], [3, 4], 6))\nprint(k_smallest_pairs([1, 2], [3, 4], 7))\nprint(k_smallest_pairs([1, 2], [3, 4], 8))\nprint(k_smallest_pairs([1, 2], [3, 4], 9))\nprint(k_smallest_pairs([1, 2], [3, 4], 10))\nprint(k_smallest_pairs([1, 2], [3, 4], 11))\nprint(k_smallest_pairs([1, 2], [3, 4], 12))\nprint(k_smallest_pairs([1, 2], [3, 4], 13))\nprint(k_smallest_pairs([1, 2], [3, 4], 14))\nprint(k_smallest_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(k_smallest_pairs([1, 2], [3, 4], 3))\nprint(k_smallest_pairs([1, 2], [3, 4], 4))\nprint(k_smallest_pairs([1, 2], [3, 4], 5))\nprint(k_smallest_pairs([1, 2], [3, 4], 6))\nprint(k_smallest_pairs([1, 2], [3, 4], 7))\nprint(k_smallest_pairs([1, 2], [3, 4], 8))\nprint(k_smallest_pairs([1, 2], [3, 4], 9))\nprint(k_smallest_pairs([1, 2], [3, 4], 10))\nprint(k_smallest_pairs([1, 2], [3, 4], 11))\nprint(k_smallest_pairs([1, 2], [3, 4], 12))\nprint(k_smallest_pairs([1, 2], [3, 4], 13))\nprint(k_smallest_pairs([1, 2], [3, 4], 14))\nprint(k_smallest_"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_product}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\tmin_val = listval[0]\n\tfor i in listval:\n\t\tif i < min_val:\n\t\t\tmin_val = i\n\treturn min_val\n\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n\ndef snake_to_camel_regex(word):\n\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n\ndef snake_to_camel_split(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce_filter(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce_filter_zip(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n\ndef snake_to_camel_split(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce_filter(word):\n\twords = word.split('_')\n\treturn words[0] + ''.join(word[0].upper() + word[1:] for word in words[1:])\n\n\ndef snake_to_camel_split_join_list_map_reduce_filter_zip(word):\n\twords = word.split('_')"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\treturn [x for x in l if x % 2 == 0]\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in l if x % 2 == 0]\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):\n\treturn list(dict.fromkeys(l))\n\n\n\"\"\"\nWrite a python function to remove duplicates from a given list.\n\"\"\"\ndef remove_duplicates(l):"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\tfor i in list1:  \n\t\tfor j in list2:  \n\t\t\tif i == j:  \n\t\t\t\treturn True  \n\treturn False  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\tn = len(arr) \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn arr[0] \n\tif n == 2: \n\t\treturn arr[0] * arr[1] \n\n\tmax1 = arr[0] * arr[1] \n\tmax2 = arr[n - 1] * arr[n - 2] \n\n\tfor i in range(1, n - 1): \n\t\tmax1 = max(max1, arr[i] * arr[0] * arr[i - 1]) \n\t\tmax2 = max(max2, arr[i] * arr[n - 1] * arr[i + 1]) \n\n\treturn max(max1, max2) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30\n\tif n == 3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\treturn max(lst, key=lst.count)\n\n\n\n\"\"\""}
{"ID": 784, "source": "MBPP:421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"\ndef concatenate_tuple(test_tup):\n\treturn tuple(delimiter.join(test_tup) for delimiter in test_tup)\n\nprint(concatenate_tuple((\"a\", \"b\", \"c\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(concatenate_tuple((\"a\", \"b\", \"c\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")))\nprint(concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\","}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i**3\n\treturn sum/(n*(n+1)*(2*n+1))\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(1, n+1):\n\t\tsum += i**3\n\treturn sum/(n*(n+1)*(2*n+1))\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n):\n\treturn n * (n + 1) // 2\n\n\"\"\"\nWrite a python function to find the sum of the first n natural numbers."}
{"ID": 787, "source": "MBPP:424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\ndef extract_rear(test_tuple):\n\treturn tuple(test_tuple[len(test_tuple)-1] for test_tuple in test_tuple)\n\nprint(extract_rear(('abcd', 'efgh', 'ijkl')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678', '90')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678', '90', '!@#$')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678', '90', '!@#$', '5555')))\nprint(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678', '90', '!@#$', '5555', '6666')))", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(extract_rear(('abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz', '1234', '5678', '90', '!@#$', '5555', '6666')))"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using map function.\n\"\"\"\ndef filter_oddnumbers_map(nums):\n\treturn list(map(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers_map([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using filter function.\n\"\"\"\ndef filter_oddnumbers_filter(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers_filter([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using list comprehension.\n\"\"\"\ndef filter_oddnumbers_listcomp(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_oddnumbers_listcomp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using set comprehension.\n\"\"\"\ndef filter_oddnumbers_setcomp(nums):\n\treturn {x for x in nums if x%2==0}\n\nprint(filter_oddnumbers_setcomp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using generator expression.\n\"\"\"\ndef filter_oddnumbers_genexp(nums):\n\treturn (x for x in nums if x%2==0)\n\nprint(filter_oddnumbers_genexp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using filter function.\n\"\"\"\ndef filter_oddnumbers_filter(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers_filter([1,2,3,4,5,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers_filter([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using list comprehension.\n\"\"\"\ndef filter_oddnumbers_listcomp(nums):\n\treturn [x for x in nums if x%2==0]\n\nprint(filter_oddnumbers_listcomp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using set comprehension.\n\"\"\"\ndef filter_oddnumbers_setcomp(nums):\n\treturn {x for x in nums if x%2==0}\n\nprint(filter_oddnumbers_setcomp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using generator expression.\n\"\"\"\ndef filter_oddnumbers_genexp(nums):\n\treturn (x for x in nums if x%2==0)\n\nprint(filter_oddnumbers_genexp([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to filter odd numbers using filter function.\n\"\"\"\ndef filter_oddnumbers_filter(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\nprint(filter_oddnumbers_filter([1,2,3,4,5,"}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\treturn tuple(map(lambda x, y: (x, y), test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))\nprint(and_tuples((1, 2, 3), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4), (4, 5, 6)))\nprint(and_tuples((1, 2, 3, 4), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8), (4, 5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), (4, 5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), (4, 5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (4, 5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(and_tuples((1, 2, 3), (4, 5, 6)))\nprint(and_tuples((1, 2, 3), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4), (4, 5, 6)))\nprint(and_tuples((1, 2, 3, 4), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8), (4, 5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), (4, 5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), (4, 5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (4, 5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\treturn -b/(2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\treturn (-b, -c)/(2*a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn (b/(2*a), -c/(2*a))\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation(a, b, c): \n\treturn a*x**2 + b*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_vertex(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_focus(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_focus(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_vertex(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_focus_vertex(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn -b/(2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\treturn (-b, -c)/(2*a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn (b/(2*a), -c/(2*a))\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation(a, b, c): \n\treturn a*x**2 + b*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_vertex(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_focus(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_focus(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_vertex(a, b, c): \n\treturn a*x**2 + (b-c)*x + c\n\n\"\"\"\nWrite a function to find the equation of a parabola.\n\"\"\"\ndef parabola_equation_directrix_focus_vertex(a, b, c): "}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_2(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_3(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_4(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_5(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_6(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_7(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_8(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_9(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_10(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_11(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_12(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_13(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_14(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_15(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_16(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (base1+base2)/2*height\n\ndef median_trapezium_2(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_3(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_4(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_5(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_6(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_7(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_8(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_9(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_10(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_11(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_12(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_13(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_14(base1,base2,height):\n\treturn (base1*base2)/(base1+base2)*height\n\ndef median_trapezium_15(base1,base2,height):\n\treturn (base1+base2)/2*height\n\ndef median_trapezium_16("}
{"ID": 796, "source": "MBPP:433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"\ndef check_greater(arr, number):\n\tfor i in range(len(arr)):\n\t\tif arr[i] > number:\n\t\t\treturn True\n\treturn False\n\narr = [1, 2, 3, 4, 5]\nnumber = 4\nprint(check_greater(arr, number))\n\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_two(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_three(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_four(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_five(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_six(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_seven(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eight(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_nine(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_ten(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eleven(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_twelve(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_thirteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_fourteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_fifteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_sixteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_seventeen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eighteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_two(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_three(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_four(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_five(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_six(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_seven(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eight(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_nine(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_ten(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eleven(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_twelve(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_thirteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_fourteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_fifteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_sixteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_seventeen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_eighteen(text):\n\treturn re.match(r'a[b]+', text)\n\n\ndef text_match_"}
{"ID": 800, "source": "MBPP:437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"\ndef remove_odd(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_2(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_3(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_4(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_5(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_6(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_7(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_8(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_9(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_2(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_3(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_4(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_5(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_6(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_7(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n\ndef remove_odd_8(str1):\n\t\"\"\"\n\t:type str1: str\n\t:rtype: str\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 == 0])\n\n"}
{"ID": 803, "source": "MBPP:440", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\n\"\"\"\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i].endswith('ly'):\n\t\t\tadverbs.append(text[i])\n\treturn adverbs\n\ndef find_adverb_position(text):\n\tadverbs = []\n\tfor"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\treturn 6*l**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*(r+h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r**2+3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a tetrahedron.\n\"\"\"\ndef surfacearea_tetrahedron(a,b,c):\n\treturn (1/6)*(a+b+c)\n\n\"\"\"\nWrite a function to find the volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(a,b,c):\n\treturn (1/6)*(a+b+c)\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(a,b,c):\n\treturn (1/3)*(a+b+c)\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyram", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 6*l**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*(r+h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r**2+3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a tetrahedron.\n\"\"\"\ndef surfacearea_tetrahedron(a,b,c):\n\treturn (1/6)*(a+b+c)\n\n\"\"\"\nWrite a function to find the volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(a,b,c):\n\treturn (1/6)*(a+b+c)\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(a,b,c):\n\treturn (1/3)*(a+b+c)\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyram"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]\nprint(trim_tuple(test_list, 1))\n\n\"\"\"\nWrite a function to trim each string by k in the given string list.\n\"\"\"\ndef trim_string(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = ['abc', 'def', 'ghi']\nprint(trim_string(test_list, 1))\n\n\"\"\"\nWrite a function to trim each list by k in the given list list.\n\"\"\"\ndef trim_list(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nprint(trim_list(test_list, 1))\n\n\"\"\"\nWrite a function to trim each dictionary by k in the given dictionary list.\n\"\"\"\ndef trim_dict(test_list, K):\n\tfor i in range(len(test_list)):\n\t\tfor key in test_list[i]:\n\t\t\ttest_list[i][key] = test_list[i][key][K:]\n\treturn test_list\n\ntest_list = [{'a': 'abc', 'b': 'def', 'c': 'ghi'}, {'d': 'jkl', 'e': 'mno', 'f': 'pqr'}]\nprint(trim_dict(test_list, 1))\n\n\"\"\"\nWrite a function to trim each set by k in the given set list.\n\"\"\"\ndef trim_set(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]\nprint(trim_tuple(test_list, 1))\n\n\"\"\"\nWrite a function to trim each string by k in the given string list.\n\"\"\"\ndef trim_string(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = ['abc', 'def', 'ghi']\nprint(trim_string(test_list, 1))\n\n\"\"\"\nWrite a function to trim each list by k in the given list list.\n\"\"\"\ndef trim_list(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i][K:]\n\treturn test_list\n\ntest_list = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nprint(trim_list(test_list, 1))\n\n\"\"\""}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\treturn [lambda x: x**3(num) for num in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [lambda x: x**3(num) for num in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\ndef cube_nums(nums):\n\treturn [x**3 for x in nums]\n\nprint(cube_nums([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using map function.\n\"\"\"\ndef cube_nums(nums):"}
{"ID": 812, "source": "MBPP:449", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = (x2-x1) * (y3-y1) - (x3-x1) * (y2-y1)\n\tb = (x3-x1) * (y2-y1) - (x2-x1) * (y3-y1)\n\tc = (x1-x2) * (y3-y2) - (x3-x2) * (y1-y2)\n\tif a>0 and b>0 and c>0:\n\t\treturn True\n\telif a<0 and b<0 and c<0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = (x2-x1) * (y3-y1) - (x3-x1) * (y2-y1)\n\tb = (x3-x1) * (y2-y1) - (x2-x1) * (y3-y1)\n\tc = (x1-x2) * (y3-y2) - (x3-x2) * (y1-y2)\n\tif a>0 and b>0 and c>0:\n\t\treturn True\n\telif a<0 and b<0 and c<0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = (x2-x1) * (y3-y1) - (x3-x1) * (y2-y1)\n\tb = (x3-x1) * (y2-y1) - (x2-x1) * (y3-y1)\n\tc = (x1-x2) * (y3-y2) - (x3-x2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = (x2-x1) * (y3-y1) - (x3-x1) * (y2-y1)\n\tb = (x3-x1) * (y2-y1) - (x2-x1) * (y3-y1)\n\tc = (x1-x2) * (y3-y2) - (x3-x2) * (y1-y2)\n\tif a>0 and b>0 and c>0:\n\t\treturn True\n\telif a<0 and b<0 and c<0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n\ta = (x2-x1) * (y3-y1) - (x3-x1) * (y2-y1)"}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\treturn [str[i:i+l] for i in range(len(str)-l+1)]\n\nprint(extract_string(\"hello\", 3))\nprint(extract_string(\"hello\", 4))\nprint(extract_string(\"hello\", 5))\nprint(extract_string(\"hello\", 6))\nprint(extract_string(\"hello\", 7))\nprint(extract_string(\"hello\", 8))\nprint(extract_string(\"hello\", 9))\nprint(extract_string(\"hello\", 10))\nprint(extract_string(\"hello\", 11))\nprint(extract_string(\"hello\", 12))\nprint(extract_string(\"hello\", 13))\nprint(extract_string(\"hello\", 14))\nprint(extract_string(\"hello\", 15))\nprint(extract_string(\"hello\", 16))\nprint(extract_string(\"hello\", 17))\nprint(extract_string(\"hello\", 18))\nprint(extract_string(\"hello\", 19))\nprint(extract_string(\"hello\", 20))\nprint(extract_string(\"hello\", 21))\nprint(extract_string(\"hello\", 22))\nprint(extract_string(\"hello\", 23))\nprint(extract_string(\"hello\", 24))\nprint(extract_string(\"hello\", 25))\nprint(extract_string(\"hello\", 26))\nprint(extract_string(\"hello\", 27))\nprint(extract_string(\"hello\", 28))\nprint(extract_string(\"hello\", 29))\nprint(extract_string(\"hello\", 30))\nprint(extract_string(\"hello\", 31))\nprint(extract_string(\"hello\", 32))\nprint(extract_string(\"hello\", 33))\nprint(extract_string(\"hello\", 34))\nprint(extract_string(\"hello\", 35))\nprint(extract_string(\"hello\", 36))\nprint(extract_string(\"hello\", 37))\nprint(extract_string(\"hello\", 38))\nprint(extract_string(\"hello\", 39))\nprint(extract_string(\"hello\", 40))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_string(\"hello\", 3))\nprint(extract_string(\"hello\", 4))\nprint(extract_string(\"hello\", 5))\nprint(extract_string(\"hello\", 6))\nprint(extract_string(\"hello\", 7))\nprint(extract_string(\"hello\", 8))\nprint(extract_string(\"hello\", 9))\nprint(extract_string(\"hello\", 10))\nprint(extract_string(\"hello\", 11))\nprint(extract_string(\"hello\", 12))\nprint(extract_string(\"hello\", 13))\nprint(extract_string(\"hello\", 14))\nprint(extract_string(\"hello\", 15))\nprint(extract_string(\"hello\", 16))\nprint(extract_string(\"hello\", 17))\nprint(extract_string(\"hello\", 18))\nprint(extract_string(\"hello\", 19))\nprint(extract_string(\"hello\", 20))\nprint(extract_string(\"hello\", 21))\nprint(extract_string(\"hello\", 22))\nprint(extract_string(\"hello\", 23))\nprint(extract_string(\"hello\", 24))\nprint(extract_string(\"hello\", 25))\nprint(extract_string(\"hello\", 26))\nprint(extract_string(\"hello\", 27))\nprint(extract_string(\"hello\", 28))\nprint(extract_string(\"hello\", 29))\nprint(extract_string(\"hello\", 30))\nprint(extract_string(\"hello\", 31))\nprint(extract_string(\"hello\", 32))\nprint(extract_string(\"hello\", 33))\nprint(extract_string(\"hello\", 34))\nprint(extract_string(\"hello\", 35))\nprint(extract_string(\"hello\", 36))\nprint(extract_string(\"hello\", 37))\nprint(extract_string(\"hello\", 38))\nprint(extract_string(\"hello\", 39))\nprint(extract_string(\"hello\", 40))\n"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\timport re\n\treturn re.sub(r'\\s+', '', text1)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using split and join.\n\"\"\"\ndef remove_whitespaces(text2):\n\treturn ''.join(text2.split())\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using replace.\n\"\"\"\ndef remove_whitespaces(text3):\n\treturn text3.replace(' ', '')\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using strip.\n\"\"\"\ndef remove_whitespaces(text4):\n\treturn text4.strip()\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using translate.\n\"\"\"\ndef remove_whitespaces(text5):\n\timport string\n\treturn text5.translate(string.maketrans('', '', ' '))\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text6):\n\timport re\n\treturn re.sub(r'\\s+', '', text6)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using split and join.\n\"\"\"\ndef remove_whitespaces(text7):\n\treturn ''.join(text7.split())\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using replace.\n\"\"\"\ndef remove_whitespaces(text8):\n\treturn text8.replace(' ', '')\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using strip.\n\"\"\"\ndef remove_whitespaces(text9):\n\treturn text9.strip()\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using translate.\n\"\"\"\ndef remove_whitespaces(text10):\n\timport string\n\treturn text10.translate(string.maketrans('', '', ' '))\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text11):\n\timport re\n\treturn re.sub(r'\\s+', '', text1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(r'\\s+', '', text1)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using split and join.\n\"\"\"\ndef remove_whitespaces(text2):\n\treturn ''.join(text2.split())\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using replace.\n\"\"\"\ndef remove_whitespaces(text3):\n\treturn text3.replace(' ', '')\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using strip.\n\"\"\"\ndef remove_whitespaces(text4):\n\treturn text4.strip()\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using translate.\n\"\"\"\ndef remove_whitespaces(text5):\n\timport string\n\treturn text5.translate(string.maketrans('', '', ' '))\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text6):\n\timport re\n\treturn re.sub(r'\\s+', '', text6)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string using split and join.\n\"\"\"\ndef remove_whitespaces(text7):\n\treturn ''.join(text7.split())\n\n\"\"\""}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "<s> \"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\tif actual_cost > sale_amount:\n\t\treturn actual_cost - sale_amount\n\telse:\n\t\treturn None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i) == 0 : \n\t\t\tsum = sum + i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\treturn re.search(r'\\bz\\w*\\b', text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "<s> \"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_2(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_3(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_4(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_5(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_6(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_7(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_8(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_9(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_10(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_11(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_12(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_13(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_14(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_15(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_16(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_17(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_18(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_19(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_20(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_21(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_22(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn stringlist[::-1]\n\ndef reverse_string_list_2(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_3(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_4(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_5(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_6(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_7(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_8(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_9(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_10(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_11(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_12(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_13(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_14(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_15(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_16(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_17(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_18(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_19(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_20(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_21(stringlist):\n\treturn stringlist[::-1]\n\ndef reverse_string_list_22("}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\treturn min(lst, key=len)\n\n\n\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a,b1,b2):\n\treturn a+b1+b2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(a,b):\n\treturn a+b\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(s):\n\treturn s**2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(s):\n\treturn 4*s\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn 0.5*b*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a,b1,b2):\n\treturn a+b1+b2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(a,b):\n\treturn a+b\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(s):\n\treturn s**2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(s):\n\treturn 4*s\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(b,h):"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn re.sub(r'[A-Z]', '', str1)\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using string slicing.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join([char for char in str1 if char.islower()])\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using list comprehension.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join([char for char in str1 if char.islower()])\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using filter.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(filter(lambda x: x.islower(), str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using map.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(map(lambda x: x.lower(), str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using reduce.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(reduce(lambda x, y: x + y, str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'[A-Z]', '', str1)\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using string slicing.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join([char for char in str1 if char.islower()])\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using list comprehension.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join([char for char in str1 if char.islower()])\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using filter.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(filter(lambda x: x.islower(), str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using map.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(map(lambda x: x.lower(), str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using reduce.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(reduce(lambda x, y: x + y, str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):\n\treturn ''.join(itertools.chain.from_iterable(str1))\n\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using itertools.\n\"\"\"\ndef remove_uppercase(str1):"}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\treturn [sub[0] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef ExtractLast(lst): \n\treturn [sub[-1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\n\"\"\"\ndef ExtractFirstLast(lst): \n\treturn [sub[0], sub[-1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and second element of each sublist.\n\"\"\"\ndef ExtractFirstSecond(lst): \n\treturn [sub[0], sub[1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and third element of each sublist.\n\"\"\"\ndef ExtractFirstThird(lst): \n\treturn [sub[0], sub[2] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and fourth element of each sublist.\n\"\"\"\ndef ExtractFirstFourth(lst): \n\treturn [sub[0], sub[3] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and fifth element of each sublist.\n\"\"\"\ndef ExtractFirstFifth(lst): \n\treturn [sub[0], sub[4] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and sixth element of each sublist.\n\"\"\"\ndef ExtractFirstSixth(lst): \n\treturn [sub[0], sub[5] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and seventh element of each sublist.\n\"\"\"\ndef ExtractFirstSeventh(lst): \n\treturn [sub[0], sub[6] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and eighth element of each sublist.\n\"\"\"\ndef ExtractFirstEighth(lst): \n\treturn [sub[0], sub[7] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and ninth element of each sublist.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [sub[0] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef ExtractLast(lst): \n\treturn [sub[-1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and last element of each sublist.\n\"\"\"\ndef ExtractFirstLast(lst): \n\treturn [sub[0], sub[-1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and second element of each sublist.\n\"\"\"\ndef ExtractFirstSecond(lst): \n\treturn [sub[0], sub[1] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and third element of each sublist.\n\"\"\"\ndef ExtractFirstThird(lst): \n\treturn [sub[0], sub[2] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and fourth element of each sublist.\n\"\"\"\ndef ExtractFirstFourth(lst): \n\treturn [sub[0], sub[3] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and fifth element of each sublist.\n\"\"\"\ndef ExtractFirstFifth(lst): \n\treturn [sub[0], sub[4] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and sixth element of each sublist.\n\"\"\"\ndef ExtractFirstSixth(lst): \n\treturn [sub[0], sub[5] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and seventh element of each sublist.\n\"\"\"\ndef ExtractFirstSeventh(lst): \n\treturn [sub[0], sub[6] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and eighth element of each sublist.\n\"\"\"\ndef ExtractFirstEighth(lst): \n\treturn [sub[0], sub[7] for sub in lst]\n\n\n\"\"\"\nWrite a python function to get the first and ninth element of each sublist.\n\"\"\"\ndef"}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\treturn sum(1 for i in str if i.isupper())\n\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str):\n\treturn str == str[::-1]\n\n\n\"\"\"\nWrite a python function to find the first unique character in a given string.\n\"\"\"\ndef first_unique_char(str):\n\tfor i in str:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the last unique character in a given string.\n\"\"\"\ndef last_unique_char(str):\n\tfor i in str[::-1]:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\tfor i in str:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the last non-repeating character in a given string.\n\"\"\"\ndef last_non_repeating_char(str):\n\tfor i in str[::-1]:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the first character that is not present in the second string.\n\"\"\"\ndef first_char_not_in_second(str1, str2):\n\tfor i in str1:\n\t\tif i not in str2:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the last character that is not present in the second string.\n\"\"\"\ndef last_char_not_in_second(str1, str2):\n\tfor i in str1[::-1]:\n\t\tif i not in str2:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the first character that", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef is_palindrome(str):\n\treturn str == str[::-1]\n\n\n\"\"\"\nWrite a python function to find the first unique character in a given string.\n\"\"\"\ndef first_unique_char(str):\n\tfor i in str:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the last unique character in a given string.\n\"\"\"\ndef last_unique_char(str):\n\tfor i in str[::-1]:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\tfor i in str:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n\n\"\"\"\nWrite a python function to find the last non-repeating character in a given string.\n\"\"\"\ndef last_non_repeating_char(str):\n\tfor i in str[::-1]:\n\t\tif str.count(i) == 1:\n\t\t\treturn i\n\treturn None\n"}
{"ID": 825, "source": "MBPP:462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"\ndef combinations_list(list1):\n\tif len(list1) == 0:\n\t\treturn []\n\telif len(list1) == 1:\n\t\treturn [list1]\n\telse:\n\t\treturn [list1[0:i] + list1[i+1:] for i in range(len(list1))]\n\nprint(combinations_list([1,2,3]))\nprint(combinations_list([1,2,3,4]))\nprint(combinations_list([1,2,3,4,5]))\nprint(combinations_list([1,2,3,4,5,6]))\nprint(combinations_list([1,2,3,4,5,6,7]))\nprint(combinations_list([1,2,3,4,5,6,7,8]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(combinations_list([1,2,3,4,5,6,7", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(combinations_list([1,2,3]))\nprint(combinations_list([1,2,3,4]))\nprint(combinations_list([1,2,3,4,5]))\nprint(combinations_list([1,2,3,4,5,6]))\nprint(combinations_list([1,2,3,4,5,6,7]))\nprint(combinations_list([1,2,3,4,5,6,7,8]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(combinations_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(combinations_list([1,2,3,4,5,6,7"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tmax_product = max(max_product * arr[i], arr[i])\n\t\tmin_product = min(min_product * arr[i], arr[i])\n\t\tmax_so_far = max(max_so_far * arr[i], arr[i])\n\t\tmin_so_far = min(min_so_far * arr[i], arr[i])\n\treturn max(max_so_far, max_product, min_so_far, min_product)\n\n\ndef max_subarray_product_2(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tmax_product = max(max_product * arr[i], arr[i])\n\t\tmin_product = min(min_product * arr[i], arr[i])\n\t\tmax_so_far = max(max_so_far * arr[i], arr[i])\n\t\tmin_so_far = min(min_so_far * arr[i], arr[i])\n\treturn max(max_so_far, max_product, min_so_far, min_product)\n\n\ndef max_subarray_product_3(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tmax_product = max(max_product * arr[i], arr[i])\n\t\tmin_product = min(min_product * arr[i], arr[i])\n\t\tmax_so_far = max(max_so_far * arr[i], arr[i])\n\t\tmin_so_far = min(min_so_far * arr[i], arr[i])\n\treturn max(max_so_far, max_product, min_so_far, min_product)\n\n\ndef max_subarray_product_2(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tmax_product = max(max_product * arr[i], arr[i])\n\t\tmin_product = min(min_product * arr[i], arr[i])"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\tfor key in dict:\n\t\tif dict[key] != n:\n\t\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "<s> \"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\treturn {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': 1, 'b': 2, 'c': 3}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': 0}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': None}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': ''}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': []}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(drop_empty({'a': 1, 'b': 2, 'c': 3}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': 0}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': None}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': ''}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': []}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c': {}}))\nprint(drop_empty({'a': 1, 'b': 2, 'c"}
{"ID": 829, "source": "MBPP:466", "prompt": "\"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the peak element in the given array.\n\"\"\"\ndef find_peak_util(arr, low, high, n): \n\tif (low > high): \n\t\treturn -1\n\tmid = (low + high) // 2\n\tif (mid + 1 < n and arr[mid] < arr[mid + 1]): \n\t\treturn find_peak_util(arr, mid + 1, high, n) \n\tif (mid - 1 >= 0 and arr[mid] < arr[mid - 1]): \n\t\treturn find_peak_util(arr, low, mid - 1, n) \n\treturn mid \n\ndef find_peak(arr): \n\tn = len(arr) \n\tif (n == 0): \n\t\treturn -1\n\treturn find_peak_util(arr, 0, n - 1, n) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_peak(arr)) \n\narr = [1, 2, 1, 3, 5, 6, 4] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(find_peak(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn find_peak_util(arr, 0, n - 1, n) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_peak(arr)) \n\narr = [1, 2, 1, 3, 5, 6, 4] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(find_peak(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(find_peak("}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\treturn sum(arr) % n\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    lens = test_case[1]\n    n = test_case[2]\n    if find_remainder(arr, lens, n) == test_case[3]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 15]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 0]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 1]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 10]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 11]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 12]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 13]\ntest_function(test_case)\n\narr = [1, 2, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 15]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 0]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 1]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 10]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 11]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 12]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nlens = len(arr)\nn = 10\ntest_case = [arr, lens, n, 13]\ntest_function(test_case)\n\narr = [1, 2, "}
{"ID": 837, "source": "MBPP:474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace characters in a string.\n\"\"\"\ndef replace_char(str1,ch,newch):\n\treturn str1.replace(ch,newch)\n\nprint(replace_char(\"hello\",\"l\",\"L\"))\n\n\"\"\"\nWrite a function to check if a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1,str2):\n\treturn sorted(str1) == sorted(str2)\n\nprint(is_permutation(\"racecar\",\"racecar\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to check if a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(str1):\n\treturn str1 == str1[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\nWrite a function to check if a string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1,str2):\n\treturn sorted(str1) == sorted(str2)\n\nprint(is_permutation(\"racecar\",\"racecar\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1,str2):\n\treturn all(x in str2 for x in str1)\n\nprint(is_subsequence(\"abc\",\"abcd\"))\n\n\"\"\"\nWrite a function to check if a string is a subsequence of another string.\n\"\"\"\ndef is_"}
{"ID": 840, "source": "MBPP:477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\t", "predict": "<s> \"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"\ndef is_lower(string):\n\treturn string.lower() == string\n\ndef is_lower_case(string):\n\treturn string.islower()\n\ndef is_lower_case_2(string):\n\treturn all(ord(c) >= ord('a') and ord(c) <= ord('z') for c in string)\n\ndef is_lower_case_3(string):\n\treturn all(c.islower() for c in string)\n\ndef is_lower_case_4(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_5(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_6(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_7(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_8(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_9(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_10(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_11(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_12(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_13(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_14(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_15(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef is_lower_case_2(string):\n\treturn all(ord(c) >= ord('a') and ord(c) <= ord('z') for c in string)\n\ndef is_lower_case_3(string):\n\treturn all(c.islower() for c in string)\n\ndef is_lower_case_4(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_5(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_6(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_7(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_8(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_9(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_10(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_11(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_12(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_13(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_14(string):\n\treturn all(c.isalpha() and c.islower() for c in string)\n\ndef is_lower_case_15(string):\n\treturn all(c.isalpha() and c.islower() for c in string)"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\tstr2 = \"\"\n\tfor i in range(len(str1)):\n\t\tif str1[i].isupper():\n\t\t\tstr2 += str1[i]\n\treturn str2\n\nprint(remove_lowercase(\"hello world\"))\nprint(remove_lowercase(\"hello world hello\"))\nprint(remove_lowercase(\"hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\"))\nprint(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_lowercase(\"hello world hello world hello world hello world hello world hello world hello world hello world hello"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :\n\treturn int(str(n)[0])\n\ndef first_Digit(n) :"}
{"ID": 844, "source": "MBPP:481", "prompt": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\t", "predict": "<s> \"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\"\"\"\ndef is_subset_sum(set, n, sum):\n\tif n == 0:\n\t\treturn False\n\tif sum == 0:\n\t\treturn True\n\tif sum < 0:\n\t\treturn False\n\tif set[n-1] > sum:\n\t\treturn is_subset_sum(set, n-1, sum)\n\treturn is_subset_sum(set, n-1, sum-set[n-1]) or is_subset_sum(set, n-1, sum)\n\nprint(is_subset_sum([1, 2, 3], 3, 5))\nprint(is_subset_sum([1, 2, 3], 3, 4))\nprint(is_subset_sum([1, 2, 3], 3, 6))\nprint(is_subset_sum([1, 2, 3], 3, 0))\nprint(is_subset_sum([1, 2, 3], 3, -1))\nprint(is_subset_sum([1, 2, 3], 3, 1))\nprint(is_subset_sum([1, 2, 3], 3, 2))\nprint(is_subset_sum([1, 2, 3], 3, 3))\nprint(is_subset_sum([1, 2, 3], 3, 4))\nprint(is_subset_sum([1, 2, 3], 3, 5))\nprint(is_subset_sum([1, 2, 3], 3, 6))\nprint(is_subset_sum([1, 2, 3], 3, 7))\nprint(is_subset_sum([1, 2, 3], 3, 8))\nprint(is_subset_sum([1, 2, 3], 3, 9))\nprint(is_subset_sum([1, 2, 3], 3, 10))\nprint(is_subset_sum([1, 2, 3], 3, 11))\nprint(is_subset_sum([1, 2, 3], 3, 12))\nprint(is_subset_sum([1, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_subset_sum([1, 2, 3], 3, 5))\nprint(is_subset_sum([1, 2, 3], 3, 4))\nprint(is_subset_sum([1, 2, 3], 3, 6))\nprint(is_subset_sum([1, 2, 3], 3, 0))\nprint(is_subset_sum([1, 2, 3], 3, -1))\nprint(is_subset_sum([1, 2, 3], 3, 1))\nprint(is_subset_sum([1, 2, 3], 3, 2))\nprint(is_subset_sum([1, 2, 3], 3, 3))\nprint(is_subset_sum([1, 2, 3], 3, 4))\nprint(is_subset_sum([1, 2, 3], 3, 5))\nprint(is_subset_sum([1, 2, 3], 3, 6))\nprint(is_subset_sum([1, 2, 3], 3, 7))\nprint(is_subset_sum([1, 2, 3], 3, 8))\nprint(is_subset_sum([1, 2, 3], 3, 9))\nprint(is_subset_sum([1, 2, 3], 3, 10))\nprint(is_subset_sum([1, 2, 3], 3, 11))\nprint(is_subset_sum([1, 2, 3], 3, 12))\nprint(is_subset_sum([1, "}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\tpattern = r\"[A-Z][a-z]*\"\n\treturn re.findall(pattern, text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\tfor i in range(1,1000000000):\n\t\tif i in range(1,1000000000):\n\t\t\tif i!=0:\n\t\t\t\tif i!=1:\n\t\t\t\t\tif i!=2:\n\t\t\t\t\t\tif i!=3:\n\t\t\t\t\t\t\tif i!=4:\n\t\t\t\t\t\t\t\tif i!=5:\n\t\t\t\t\t\t\t\t\tif i!=6:\n\t\t\t\t\t\t\t\t\t\tif i!=7:\n\t\t\t\t\t\t\t\t\t\t\tif i!=8:\n\t\t\t\t\t\t\t\t\t\t\t\tif i!=9:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=10:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=11:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=12:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=13:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=14:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=15:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=16:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=17:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=18:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=19:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=20:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=21:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=22:", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t\t\t\t\t\tif i!=4:\n\t\t\t\t\t\t\t\tif i!=5:\n\t\t\t\t\t\t\t\t\tif i!=6:\n\t\t\t\t\t\t\t\t\t\tif i!=7:\n\t\t\t\t\t\t\t\t\t\t\tif i!=8:\n\t\t\t\t\t\t\t\t\t\t\t\tif i!=9:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=10:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=11:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=12:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=13:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=14:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=15:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=16:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=17:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=18:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=19:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=20:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=21:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif i!=22:"}
{"ID": 847, "source": "MBPP:484", "prompt": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\n\tresult = []\n\tfor i in test_list1:\n\t\tif i not in test_list2:\n\t\t\tresult.append(i)\n\treturn result\n\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'd')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(remove_matching_tuple(('a', 'b', 'c", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'd')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(remove_matching_tuple(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(remove_matching_tuple(('a', 'b', 'c"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn tup[1]\n\ndef sort_last(my_list): \n\treturn sorted(my_list, key=sort_tuple)\n\nprint(sort_last([(1, 2), (3, 4), (2, 1)]))\n\n\"\"\"\nWrite a function to find the node at which the intersection of two singly linked lists begins.\nNotes:\nIf the two linked lists have no intersection at all, return null.\nThe linked lists must retain their original structure after the function returns.\nYou may assume there are no cycles anywhere in the entire linked structure.\nYour code should preferably run in O(n) time and use only O(1) memory.\n\"\"\"\ndef getIntersectionNode(headA, headB):\n    if not headA or not headB:\n        return None\n    a = headA\n    b = headB\n    while a != b:\n        a = a.next\n        if a == None:\n            a = headB\n        b = b.next\n        if b == None:\n            b = headA\n    return a\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\"\"\"\ndef isPalindrome(s):\n    s = s.lower()\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        while left < right and not s[left].isalnum():\n            left += 1\n        while left < right and not s[right].isalnum():\n            right -= 1\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\"\"\"\ndef isPalindrome(s):\n    s = s.lower()\n    left = 0\n    right = len(s) - 1\n    while left < right:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        a = a.next\n        if a == None:\n            a = headB\n        b = b.next\n        if b == None:\n            b = headA\n    return a\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\"\"\"\ndef isPalindrome(s):\n    s = s.lower()\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        while left < right and not s[left].isalnum():\n            left += 1\n        while left < right and not s[right].isalnum():\n            right -= 1\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\"\"\"\ndef isPalindrome(s):\n    s = s.lower()\n    left = 0\n    right = len(s) - 1\n    while left < right:"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\treturn (5*a**2)/(4*tan(pi/5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (3*a**2)/(2*tan(pi/6))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(a):\n\treturn (7*a**2)/(4*tan(pi/7))\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\ndef area_octagon(a):\n\treturn (4*a**2)/(tan(pi/8))\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef area_nonagon(a):\n\treturn (9*a**2)/(4*tan(pi/9))\n\n\"\"\"\nWrite a function to find the area of a decagon.\n\"\"\"\ndef area_decagon(a):\n\treturn (10*a**2)/(4*tan(pi/10))\n\n\"\"\"\nWrite a function to find the area of a dodecagon.\n\"\"\"\ndef area_dodecagon(a):\n\treturn (12*a**2)/(5*tan(pi/12))\n\n\"\"\"\nWrite a function to find the area of a 20-sided polygon.\n\"\"\"\ndef area_20_sided(a):\n\treturn (20*a**2)/(5*tan(pi/20))\n\n\"\"\"\nWrite a function to find the area of a 24-sided polygon.\n\"\"\"\ndef area_24_sided(a):\n\treturn (24*a**2)/(6*tan(pi/24))\n\n\"\"\"\nWrite a function to find the area of a 28-sided polygon.\n\"\"\"\ndef area_28_sided(a):\n\treturn (28*a**2)/(7*tan(pi/28))\n\n\"\"\"\nWrite a function to find the area of a 30-sided polygon.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (3*a**2)/(2*tan(pi/6))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(a):\n\treturn (7*a**2)/(4*tan(pi/7))\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\ndef area_octagon(a):\n\treturn (4*a**2)/(tan(pi/8))\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef area_nonagon(a):\n\treturn (9*a**2)/(4*tan(pi/9))\n\n\"\"\"\nWrite a function to find the area of a decagon.\n\"\"\"\ndef area_decagon(a):\n\treturn (10*a**2)/(4*tan(pi/10))\n\n\"\"\"\nWrite a function to find the area of a dodecagon.\n\"\"\"\ndef area_dodecagon(a):\n\treturn (12*a**2)/(5*tan(pi/12))\n\n\"\"\"\nWrite a function to find the area of a 20-sided polygon.\n\"\"\"\ndef area_20_sided(a):\n\treturn (20*a**2)/(5*tan(pi/20))\n\n\"\"\"\nWrite a function to find the area of a 24-sided polygon.\n\"\"\"\ndef area_24_sided(a):\n\treturn (24*a**2)/(6*tan(pi/24))\n\n\"\"\"\nWrite a function to find the area of a 28-sided polygon.\n\"\"\"\ndef area_28_sided(a):\n\treturn (28*a**2)/(7*tan(pi/28))\n\n\"\"\"\nWrite a function to find the area of a 30-sided polygon.\n\"\"\""}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t# Sort the array in descending order \n\tarr.sort(reverse=True) \n\t\n\t# Initialize result \n\tresult = 0\n\t\n\t# Traverse the array. If current element is same as the largest element, \n\t# then increment the count \n\tfor i in range(n): \n\t\tif arr[i] == arr[n-1]: \n\t\t\tresult += 1\n\t\n\treturn result \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 854, "source": "MBPP:491", "prompt": "\"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the sum of geometric progression series.\n\"\"\"\ndef sum_gp(a,n,r):\n\treturn (a*((1-r**n)/(1-r)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 855, "source": "MBPP:492", "prompt": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\t", "predict": "<s> \"\"\"\nWrite a function to search an element in the given array by using binary search.\n\"\"\"\ndef binary_search(item_list,item):\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 856, "source": "MBPP:493", "prompt": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tCalculate the coordinates of a hexagon grid.\n\t\"\"\"\n\t# Calculate the number of hexagons in the grid.\n\tnum_hexagons_x = int(abs(endx - startx) / (2 * radius))\n\tnum_hexagons_y = int(abs(endy - starty) / (2 * radius))\n\n\t# Calculate the coordinates of the hexagons.\n\thexagon_coordinates = []\n\tfor i in range(num_hexagons_x):\n\t\tfor j in range(num_hexagons_y):\n\t\t\tx = startx + i * 2 * radius\n\t\t\ty = starty + j * 2 * radius\n\t\t\thexagon_coordinates.append([x, y])\n\n\treturn hexagon_coordinates\n\ndef calculate_polygons_2(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tCalculate the coordinates of a hexagon grid.\n\t\"\"\"\n\t# Calculate the number of hexagons in the grid.\n\tnum_hexagons_x = int(abs(endx - startx) / (2 * radius))\n\tnum_hexagons_y = int(abs(endy - starty) / (2 * radius))\n\n\t# Calculate the coordinates of the hexagons.\n\thexagon_coordinates = []\n\tfor i in range(num_hexagons_x):\n\t\tfor j in range(num_hexagons_y):\n\t\t\tx = startx + i * 2 * radius\n\t\t\ty = starty + j * 2 * radius\n\t\t\thexagon_coordinates.append([x, y])\n\n\treturn hexagon_coordinates\n\ndef calculate_polygons_3(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tCalculate the coordinates of a hexagon grid.\n\t\"\"\"\n\t# Calculate the number of hexagons in the grid.\n\tnum_hexagons_x = int(abs(endx - startx) / (2 * radius))\n\tnum_hexagons_y = int", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tCalculate the coordinates of a hexagon grid.\n\t\"\"\"\n\t# Calculate the number of hexagons in the grid.\n\tnum_hexagons_x = int(abs(endx - startx) / (2 * radius))\n\tnum_hexagons_y = int(abs(endy - starty) / (2 * radius))\n\n\t# Calculate the coordinates of the hexagons.\n\thexagon_coordinates = []\n\tfor i in range(num_hexagons_x):\n\t\tfor j in range(num_hexagons_y):\n\t\t\tx = startx + i * 2 * radius\n\t\t\ty = starty + j * 2 * radius\n\t\t\thexagon_coordinates.append([x, y])\n\n\treturn hexagon_coordinates\n\ndef calculate_polygons_2(startx, starty, endx, endy, radius):\n\t\"\"\"\n\tCalculate the coordinates of a hexagon grid.\n\t\"\"\"\n\t# Calculate the number of hexagons in the grid.\n\tnum_hexagons_x = int(abs(endx - startx) / (2 * radius))\n\tnum_hexagons_y = int(abs(endy - starty) / (2 * radius))\n\n\t# Calculate the coordinates of the hexagons."}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\treturn re.sub(r'[a-z]', '', str1)\n\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):"}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t# create a min heap\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap,nums[i])\n\t# pop the smallest element from the heap\n\tsmallest = []\n\tfor i in range(n):\n\t\tsmallest.append(heapq.heappop(heap))\n\treturn smallest\n\n# test case\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(heap_queue_smallest(nums,5))\n\n\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t# create a max heap\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap,nums[i])\n\t# pop the largest element from the heap\n\tlargest = []\n\tfor i in range(n):\n\t\tlargest.append(heapq.heappop(heap))\n\treturn largest\n\n# test case\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(heap_queue_largest(nums,5))\n\n\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using priority queue algorithm.\n\"\"\"\ndef priority_queue_smallest(nums,n):\n\t# create a priority queue\n\tpq = PriorityQueue()\n\tfor i in range(n):\n\t\tpq.put(nums[i])\n\t# pop the smallest element from the queue\n\tsmallest = []\n\tfor i in range(n):\n\t\tsmallest.append(pq.get())\n\treturn smallest\n\n# test case\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(priority_queue_smallest(nums,5))\n\n\"\"\"\nWrite a function to find the largest integers from a given list of numbers using priority queue algorithm.\n\"\"\"\ndef priority_queue_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# create a min heap\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap,nums[i])\n\t# pop the smallest element from the heap\n\tsmallest = []\n\tfor i in range(n):\n\t\tsmallest.append(heapq.heappop(heap))\n\treturn smallest\n\n# test case\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(heap_queue_smallest(nums,5))\n\n\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t# create a max heap\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap,nums[i])\n\t# pop the largest element from the heap\n\tlargest = []\n\tfor i in range(n):\n\t\tlargest.append(heapq.heappop(heap))\n\treturn largest\n\n# test case\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(heap_queue_largest(nums,5))\n\n\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using priority queue algorithm."}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\treturn 2*r\n\nprint(diameter_circle(5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(5))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\nprint(circumference_circle(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\treturn 4*3.14*r**2\n\nprint(surface_area_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\nprint(volume_cylinder(5,5))\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\treturn 2*3.14*r*h+2*3.14*r**2\n\nprint(surface_area_cylinder(5,5))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,5))\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_area_cone(r,h):\n\treturn 3.14*r**2+3.14*r*h\n\nprint(surface_area_cone(5,5))\n\n\"\"\"\nWrite a function to find the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(diameter_circle(5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(5))\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\nprint(circumference_circle(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\treturn 4*3.14*r**2\n\nprint(surface_area_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\nprint(volume_cylinder(5,5))\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(r,h):\n\treturn 2*3.14*r*h+2*3.14*r**2\n\nprint(surface_area_cylinder(5,5))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,5))\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_area_cone(r,h):\n\treturn 3.14*r**2+3.14*r*h\n\nprint(surface_area_cone(5,5))\n\n\"\"\"\nWrite a function to find the"}
{"ID": 864, "source": "MBPP:501", "prompt": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\n\"\"\"\ndef num_comm_div(x,y):\n\treturn [i for i in range(1,min(x,y)+1) if x%i==0 and y%i==0]\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [i for i in range(1,min(x,y)+1) if x%i==0 and y%i==0]\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\ndef sum_digits"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\treturn n%m\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(n,m):\n\treturn n+m\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(n,m):\n\treturn n-m\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef prod(n,m):\n\treturn n*m\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quot(n,m):\n\treturn n/m\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef pow(n,m):\n\treturn n**m\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(n):\n\treturn n**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube(n):\n\treturn n**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\n\n\"\"\"\nWrite a python function to find the absolute value of a number.\n\"\"\"\ndef abs(n):\n\treturn n if n>=0 else -n\n\n\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef max(n,m):\n\treturn n if n>=m else m\n\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef min(n,m):\n\treturn n if n<=m else m\n\n\"\"\"\nWrite a python function to find the modulus of two numbers.\n\"\"\"\ndef mod(n,m):\n\treturn n%m\n\n\"\"\"\nWrite a python function to find the gcd of two numbers.\n\"\"\"\ndef gcd(n,m):\n\tif m==0:\n\t\treturn n\n\telse:\n\t\treturn gcd(m,n%", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(n,m):\n\treturn n+m\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(n,m):\n\treturn n-m\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef prod(n,m):\n\treturn n*m\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quot(n,m):\n\treturn n/m\n\n\"\"\"\nWrite a python function to find the power of two numbers.\n\"\"\"\ndef pow(n,m):\n\treturn n**m\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(n):\n\treturn n**0.5\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cube(n):\n\treturn n**(1/3)\n\n\"\"\"\nWrite a python function to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n\tif n==0:\n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)\n\n\"\"\"\nWrite a python function to find the absolute value of a number.\n\"\"\"\ndef abs(n):\n\treturn n if n>=0 else -n\n\n\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\""}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_2(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_3(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_4(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_5(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_6(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_7(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_8(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_9(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_10(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_11(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_12(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_13(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_14(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_15(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_16(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_17(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_18(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_19(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_20(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_21(nums):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(nums)\n\ndef add_consecutive_nums_2(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_3(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_4(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_5(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_6(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_7(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_8(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_9(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_10(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_11(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_12(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_13(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_14(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_15(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_16(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_17(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_18(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_19(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_20(nums):\n\treturn sum(nums)\n\ndef add_consecutive_nums_21(nums):"}
{"ID": 867, "source": "MBPP:504", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\n\"\"\"\ndef sum_Of_Series(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_2(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_3(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_4(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_5(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_6(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_7(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_8(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_9(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_10(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_11(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_12(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_13(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_14(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_15(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_16(n): \n\treturn sum(i**3 for i in range", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_2(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_3(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_4(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_5(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_6(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_7(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_8(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_9(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_10(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_11(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_12(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_13(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_14(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_15(n): \n\treturn sum(i**3 for i in range(1, n+1))\n\ndef sum_Of_Series_16(n): "}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<s> \"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: void Do not return anything, modify A in-place instead.\n\t\"\"\"\n\tA.sort()\n\treturn A\n\ndef re_order(A):"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\tif len(l1) != len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i] != l2[i]:\n\t\t\treturn False\n\treturn True\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn sorted(l1) == sorted(l2)\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1 == l2\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn set(l1) == set(l2)\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:r", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn sorted(l1) == sorted(l2)\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1 == l2\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn set(l1) == set(l2)\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:rtype: bool\n\t\"\"\"\n\treturn l1.sort() == l2.sort()\n\ndef same_order(l1, l2):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:r"}
{"ID": 874, "source": "MBPP:511", "prompt": "\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find minimum sum of factors of a given number.\n\"\"\"\ndef find_Min_Sum(num): \n\t# Initialize a variable to store the minimum sum \n\tmin_sum = 0\n\t# Initialize a variable to store the sum of factors \n\tsum_of_factors = 0\n\t# Initialize a variable to store the number of factors \n\tnum_of_factors = 0\n\t# Iterate from 1 to num and check if i is a factor of num \n\tfor i in range(1, num + 1): \n\t\tif num % i == 0: \n\t\t\t# Increment the number of factors \n\t\t\tnum_of_factors += 1\n\t\t\t# Add the factor to the sum of factors \n\t\t\tsum_of_factors += i \n\t# Calculate the minimum sum by dividing the sum of factors \n\t# by the number of factors \n\tmin_sum = sum_of_factors / num_of_factors \n\t# Return the minimum sum \n\treturn min_sum \n\n# Driver Code \nif __name__ == '__main__': \n\t# Test case 1: \n\tprint(find_Min_Sum(12)) \n\n\t# Test case 2: \n\tprint(find_Min_Sum(15)) \n\n\t# Test case 3: \n\tprint(find_Min_Sum(20)) \n\n\t# Test case 4: \n\tprint(find_Min_Sum(25)) \n\n\t# Test case 5: \n\tprint(find_Min_Sum(30)) \n\n\t# Test case 6: \n\tprint(find_Min_Sum(35)) \n\n\t# Test case 7: \n\tprint(find_Min_Sum(40)) \n\n\t# Test case 8: \n\tprint(find_Min_Sum(45)) \n\n\t# Test case 9: \n\tprint(find_Min_Sum(50)) \n\n\t# Test case 10: \n\tprint(find_Min_Sum(55)) \n\n\t# Test case 11: \n\tprint(find_Min_Sum(60)) \n\n\t#", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nif __name__ == '__main__': \n\t# Test case 1: \n\tprint(find_Min_Sum(12)) \n\n\t# Test case 2: \n\tprint(find_Min_Sum(15)) \n\n\t# Test case 3: \n\tprint(find_Min_Sum(20)) \n\n\t# Test case 4: \n\tprint(find_Min_Sum(25)) \n\n\t# Test case 5: \n\tprint(find_Min_Sum(30)) \n\n\t# Test case 6: \n\tprint(find_Min_Sum(35)) \n\n\t# Test case 7: \n\tprint(find_Min_Sum(40)) \n\n\t# Test case 8: \n\tprint(find_Min_Sum(45)) \n\n\t# Test case 9: \n\tprint(find_Min_Sum(50)) \n\n\t# Test case 10: \n\tprint(find_Min_Sum(55)) \n\n\t# Test case 11: \n\tprint(find_Min_Sum(60)) \n\n\t#"}
{"ID": 876, "source": "MBPP:513", "prompt": "\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\n\"\"\"\ndef add_str(test_tup, K):\n\treturn [i+K for i in test_tup]\n\nprint(add_str((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string before every element.\n\"\"\"\ndef add_str_before(test_tup, K):\n\treturn [K+i for i in test_tup]\n\nprint(add_str_before((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string before every element except the first one.\n\"\"\"\ndef add_str_before_except_first(test_tup, K):\n\treturn [K+i if i != test_tup[0] else i for i in test_tup]\n\nprint(add_str_before_except_first((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element except the last one.\n\"\"\"\ndef add_str_after_except_last(test_tup, K):\n\treturn [i+K if i != test_tup[-1] else i for i in test_tup]\n\nprint(add_str_after_except_last((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string before every element except the last one.\n\"\"\"\ndef add_str_before_except_last(test_tup, K):\n\treturn [K+i if i != test_tup[-1] else i for i in test_tup]\n\nprint(add_str_before_except_last((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element except the first one.\n\"\"\"\ndef add_str_after_except_first(test_tup, K):\n\treturn [i+K if i != test_tup[0] else i for i in test_tup]\n\nprint(add_str_after_except_first((\"a\", \"b\", \"c\"), \"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(add_str_before((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string before every element except the first one.\n\"\"\"\ndef add_str_before_except_first(test_tup, K):\n\treturn [K+i if i != test_tup[0] else i for i in test_tup]\n\nprint(add_str_before_except_first((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element except the last one.\n\"\"\"\ndef add_str_after_except_last(test_tup, K):\n\treturn [i+K if i != test_tup[-1] else i for i in test_tup]\n\nprint(add_str_after_except_last((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\"\nWrite a function to convert tuple into list by adding the given string before every element except the last one.\n\"\"\"\ndef add_str_before_except_last(test_tup, K):\n\treturn [K+i if i != test_tup[-1] else i for i in test_tup]\n\nprint(add_str_before_except_last((\"a\", \"b\", \"c\"), \"x\"))\n\n\"\"\""}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nm = 3\nprint(modular_sum(arr, n, m)) \n\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\tif n == 0: \n\t\treturn False\n\tif n % m == 0: \n\t\treturn True\n\treturn modular_sum(arr, n - 1, m) "}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i] > largest:\n\t\t\tlargest = list1[i]\n\treturn largest\n\n\n\"\"\"\nWrite a python function to find the largest postive number from the given list of integers. If there is no positive number, return None.\n\"\"\"\ndef largest_pos(list1): \n\tif len(list1) == 0:\n\t\treturn None\n\tlargest = list1[0]\n\tfor i in range(1, len(list1)):\n\t\tif list1[i]"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef is_perfect_number(num):\n\tif num < 0:\n\t\treturn False\n\telif num == 0:\n\t\treturn False\n\telse:\n\t\tsum = 0\n\t\tfor i in range(1, num):\n\t\t\tif num % i == 0:\n\t\t\t\tsum += i\n\t\t\t\tif sum == num:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\t\treturn False\n\ndef find_perfect_number(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn -1\n\telse:\n\t\tfor i in range(1, num):\n\t\t\tif is_perfect_number(i):\n\t\t\t\treturn i\n\t\treturn -1\n\ndef find_sqrt_root(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_2(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_3(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_4(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_5(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\ndef find_perfect_number(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn -1\n\telse:\n\t\tfor i in range(1, num):\n\t\t\tif is_perfect_number(i):\n\t\t\t\treturn i\n\t\treturn -1\n\ndef find_sqrt_root(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_2(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_3(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_4(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\treturn int(num ** 0.5)\n\ndef find_sqrt_root_5(num):\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\t"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\treturn (num * (num + 1)) / 2\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (num * (num + 1)) / 2\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):\n\treturn a + b\n\n\"\"\"\nWrite a function to calculate the sum of two integers.\n\"\"\"\ndef sum_two_integers(a, b):"}
{"ID": 885, "source": "MBPP:522", "prompt": "\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\n\"\"\"\ndef lbs(arr): \n\tn = len(arr) \n\tL = [1] * n \n\tR = [1] * n \n\tL[0] = R[n-1] = 1\n\n\tfor i in range(1, n): \n\t\tL[i] = max(L[i-1], R[i+1]) \n\n\tfor i in range(n-2, -1, -1): \n\t\tR[i] = max(R[i+1], L[i]) \n\n\treturn max(L) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 887, "source": "MBPP:524", "prompt": "\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \n\t# Initialize the maximum sum \n\tmax_sum = 0\n\t# Initialize the maximum sum subsequence \n\tmax_sum_subsequence = []\n\t# Initialize the maximum sum subsequence sum \n\tmax_sum_subsequence_sum = 0\n\t# Initialize the maximum sum subsequence length \n\tmax_sum_subsequence_length = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Initialize the maximum sum \n\tmax_sum = 0\n\t# Initialize the maximum sum subsequence \n\tmax_sum_subsequence = []\n\t# Initialize the maximum sum subsequence sum \n\tmax_sum_subsequence_sum = 0\n\t# Initialize the maximum sum subsequence length \n\tmax_sum_subsequence_length = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_sum_subsequence_sum_index = 0\n\t# Initialize the maximum sum subsequence length index \n\tmax_sum_subsequence_length_index = 0\n\t# Initialize the maximum sum subsequence index \n\tmax_sum_subsequence_index = 0\n\t# Initialize the maximum sum subsequence sum index \n\tmax_"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t\"\"\"\n\t:param line1: tuple of two points\n\t:param line2: tuple of two points\n\t:return: True if the two lines are parallel, False otherwise\n\t\"\"\"\n\t# Check if the two lines are parallel\n\tif line1[0][0] - line1[1][0] == line2[0][0] - line2[1][0] and line1[0][1] - line1[1][1] == line2[0][1] - line2[1][1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\"\"\""}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\tstr1 = str1.split()\n\tstr1 = [i[0].upper() + i[1:].lower() for i in str1]\n\tstr1 = ' '.join(str1)\n\treturn str1\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower()", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\n\n\ndef capitalize_first_last_letters(str1):\n    return ' '.join([i[0].upper() + i[1:].lower()"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_2(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_3(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_4(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_5(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_6(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_2(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_3(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_4(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_5(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\ndef get_pairs_count_optimized_6(arr, n, sum):\n\tcount = 0"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\tmin_len = len(list1[0])\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\treturn min_len\n\ndef min_length_list(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_2(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_3(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_4(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_5(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\treturn min_len\n\ndef min_length_list(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_2(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_3(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_4(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif len(list1[i]) < min_len:\n\t\t\tmin_len = len(list1[i])\n\t\t\tmin_list = list1[i]\n\treturn min_list\n\ndef min_length_list_5(list1):\n\tmin_len = len(list1[0])\n\tmin_list = list1[0]\n\tfor i in range(len(list1)):\n\t\tif"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\tif len(str1) != len(str2):\n\t\treturn False\n\treturn sorted(str1) == sorted(str2)\n\nprint(check_permutation(\"abc\", \"cba\"))\nprint(check_permutation(\"abc\", \"cab\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_permutation(\"abc\", \"cba\"))\nprint(check_permutation(\"abc\", \"cab\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))\nprint(check_permutation(\"abc\", \"abcd\"))"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<s> \"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:return: a tuple of the location of the pattern in the text and the length of the pattern\n\t\"\"\"\n\t# find the first occurrence of the pattern in the text\n\tindex = text.find(pattern)\n\t# if the pattern is not found, return -1\n\tif index == -1:\n\t\treturn -1, 0\n\t# otherwise, return the index of the first character of the pattern and the length of the pattern\n\treturn index, len(pattern)\n\ndef search_literal_recursive(pattern, text, index=0):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:param index: the index to start searching from\n\t:return: a tuple of the location of the pattern in the text and the length of the pattern\n\t\"\"\"\n\t# find the first occurrence of the pattern in the text\n\tindex = text.find(pattern, index)\n\t# if the pattern is not found, return -1\n\tif index == -1:\n\t\treturn -1, 0\n\t# otherwise, return the index of the first character of the pattern and the length of the pattern\n\treturn index, len(pattern)\n\ndef search_literal_iterative(pattern, text):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:return: a tuple of the location of the pattern in the text and the length of the pattern\n\t\"\"\"\n\t# find the first occurrence of the pattern in the text\n\tindex = text.find(pattern)\n\t# if the pattern is not found, return -1\n\tif index == -1:\n\t\treturn -1, 0\n\t# otherwise, return the index of the first character of the pattern and the length of the pattern\n\treturn index, len(pattern)\n\ndef search_literal_regex(pattern, text):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:return: a tuple of the location of the pattern in the text and the length of the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# if the pattern is not found, return -1\n\tif index == -1:\n\t\treturn -1, 0\n\t# otherwise, return the index of the first character of the pattern and the length of the pattern\n\treturn index, len(pattern)\n\ndef search_literal_iterative(pattern, text):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:return: a tuple of the location of the pattern in the text and the length of the pattern\n\t\"\"\"\n\t# find the first occurrence of the pattern in the text\n\tindex = text.find(pattern)\n\t# if the pattern is not found, return -1\n\tif index == -1:\n\t\treturn -1, 0\n\t# otherwise, return the index of the first character of the pattern and the length of the pattern\n\treturn index, len(pattern)\n\ndef search_literal_regex(pattern, text):\n\t\"\"\"\n\t:param pattern: the pattern to search for\n\t:param text: the text to search in\n\t:return: a tuple of the location of the pattern in the text and the length of the"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\treturn 2*3.14*r*r\n\ndef topbottom_volume(r):\n\treturn 3.14*r*r*r\n\ndef topbottom_surfacearea_volume(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio_ratio_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r, 2*3.1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*3.14*r*r\n\ndef topbottom_volume(r):\n\treturn 3.14*r*r*r\n\ndef topbottom_surfacearea_volume(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio_ratio(r):\n\treturn 2*3.14*r*r, 3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r, 2*3.14*r*r/3.14*r*r*r/3.14*r*r*r/3.14*r*r*r\n\ndef topbottom_surfacearea_volume_ratio_ratio_ratio_ratio(r):"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\tstr1 = str1.lower()\n\tstr_list = str1.split()\n\tfor i in str_list:\n\t\tif str_list.count(i) > 1:\n\t\t\treturn i\n\treturn \"No repeated word\"\n\nprint(first_repeated_word(\"Hello World\"))\nprint(first_repeated_word(\"Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_repeated_word(\"Hello World\"))\nprint(first_repeated_word(\"Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello\"))\nprint(first_repeated_word(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"))\nprint(first_repeated_word(\"Hello World Hello World Hello"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(map(lambda x,y:x**y,bases_num,index))\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using list comprehension.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn [x**y for x,y in zip(bases_num,index)]\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\tresult=[]\n\tfor i in range(len(bases_num)):\n\t\tresult.append(bases_num[i]**index[i])\n\treturn result\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop and if statement.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\tresult=[]\n\tfor i in range(len(bases_num)):\n\t\tif i==len(index):\n\t\t\tbreak\n\t\tresult.append(bases_num[i]**index[i])\n\treturn result\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop and if statement.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\tresult=[]\n\tfor i in range(len(bases", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y:x**y,bases_num,index))\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using list comprehension.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn [x**y for x,y in zip(bases_num,index)]\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\tresult=[]\n\tfor i in range(len(bases_num)):\n\t\tresult.append(bases_num[i]**index[i])\n\treturn result\n\nprint(basesnum_coresspondingnum([2,3,4,5,6],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop and if statement.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\tsum = 0\n\tfor i in range(1, n): \n\t\tif n % i == 0: \n\t\t\tsum += i \n\tif sum > n: \n\t\treturn True\n\treturn False\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant.\n\"\"\"\ndef sum_of_non_abundant(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant.\n\"\"\"\ndef sum_of_non_abundant(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a function to find the sum of all the numbers which are not abundant and not prime.\n\"\"\"\ndef sum_of_non_abundant_and_non_prime(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif not check_abundant(i) and not is_prime(i):\n\t"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 3)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 1)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 2)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 4)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 8)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 16)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 32)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 64)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 128)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 256)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 512)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 1024)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 2048)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 4096)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 8192)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 16384)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 32768)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 65536)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 131072", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (n ^ 3)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 1)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 2)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 4)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 8)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 16)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 32)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 64)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 128)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 256)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 512)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 1024)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 2048)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 4096)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 8192)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 16384)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 32768)\n\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ 65536)\n\ndef toggle_F_and_L_bits(n) :  "}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\tn = len(arr)\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tdp = [1] * n\n\tfor i in range(1, n):\n\t\tfor j in range(i):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1)\n\treturn max(dp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 912, "source": "MBPP:549", "prompt": "\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tif i % 2 != 0 : \n\t\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect cubes.\n\"\"\"\ndef perfect_Cube_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 3\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect squares.\n\"\"\"\ndef perfect_Square_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect fifth powers.\n\"\"\"\ndef perfect_Fifth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect sixth powers.\n\"\"\"\ndef perfect_Sixth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 6\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect seventh powers.\n\"\"\"\ndef perfect_Seventh_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 7\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect eighth powers.\n\"\"\"\ndef perfect_Eighth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 8\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect ninth powers.\n\"\"\"\ndef perfect_Ninth_Sum(n)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i % 2 != 0 : \n\t\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect cubes.\n\"\"\"\ndef perfect_Cube_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 3\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect squares.\n\"\"\"\ndef perfect_Square_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 2\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect fifth powers.\n\"\"\"\ndef perfect_Fifth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 5\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect sixth powers.\n\"\"\"\ndef perfect_Sixth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 6\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect seventh powers.\n\"\"\"\ndef perfect_Seventh_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 7\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect eighth powers.\n\"\"\"\ndef perfect_Eighth_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i ** 8\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n perfect ninth powers.\n\"\"\"\ndef perfect_Ninth_Sum(n)"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\tif low == high: \n\t\treturn arr[low] \n\tmid = (low + high) // 2\n\tif arr[mid] > arr[high]: \n\t\treturn find_Max(arr, low, mid) \n\telse: \n\t\treturn find_Max(arr, mid + 1, high) \n\ndef find_max_rotated_array(arr): \n\treturn find_Max(arr, 0, len(arr) - 1) \n\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99] \nprint(find_max_rotated_array(arr)) \n\n\"\"\"\nInput:\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 8", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 8"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t\"\"\"\n\t:param seq_nums: list of numbers\n\t:return: True if the sequence is linear, False otherwise\n\t\"\"\"\n\tif len(seq_nums) < 2:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(seq_nums) - 1):\n\t\t\tif seq_nums[i] + 1 != seq_nums[i + 1]:\n\t\t\t\treturn False\n\t\treturn True\n\n\ndef test_Seq_Linear():\n\tassert Seq_Linear([1, 2, 3, 4, 5]) == True\n\tassert Seq_Linear([1, 2, 4, 5]) == False\n\tassert Seq_Linear([1, 2, 3, 5]) == False\n\tassert Seq_Linear([1, 2, 4, 5, 6]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 7]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 8]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 9]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert Seq_Linear([1, 2, 3, 4, 5]) == True\n\tassert Seq_Linear([1, 2, 4, 5]) == False\n\tassert Seq_Linear([1, 2, 3, 5]) == False\n\tassert Seq_Linear([1, 2, 4, 5, 6]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 7]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 8]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 9]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False\n\tassert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n\tassert Seq_Linear([1, 2, 3, 4, 5"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\treturn float(test_tup)\n\nprint(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, "}
{"ID": 918, "source": "MBPP:555", "prompt": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\"\"\"\ndef difference(n) :  \n\treturn (n * (n + 1) * (2 * n + 1)) // 6\n\n\n\"\"\"\nWrite a python function to find the sum of first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n) :  \n\treturn n * (n + 1) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n even numbers.\n\"\"\"\ndef sum_of_first_n_even_numbers(n) :  \n\treturn n * (n + 2) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n odd numbers.\n\"\"\"\ndef sum_of_first_n_odd_numbers(n) :  \n\treturn n * (n + 1) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime_numbers(n) :  \n\tsum = 0\n\tfor i in range(2, n + 1) :\n\t\tif is_prime(i) :\n\t\t\tsum += i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of the first n fibonacci numbers.\n\"\"\"\ndef sum_of_first_n_fibonacci_numbers(n) :  \n\ta, b = 0, 1\n\tfor i in range(n) :\n\t\ta, b = b, a + b\n\treturn a\n\n\n\"\"\"\nWrite a python function to find the sum of the first n catalan numbers.\n\"\"\"\ndef sum_of_first_n_catalan_numbers(n) :  \n\ta, b = 0, 1\n\tfor i in range(n) :\n\t\ta, b = b, a + b\n\treturn a\n\n\n\"\"\"\nWrite a python function to find the sum of the first n lucas numbers.\n\"\"\"\ndef sum_of_first_n_lucas_numbers(n) :  \n\ta, b = 2, 1\n\tfor i in range(n) :\n\t\ta, b =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (n * (n + 1) * (2 * n + 1)) // 6\n\n\n\"\"\"\nWrite a python function to find the sum of first n natural numbers.\n\"\"\"\ndef sum_of_first_n_natural_numbers(n) :  \n\treturn n * (n + 1) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n even numbers.\n\"\"\"\ndef sum_of_first_n_even_numbers(n) :  \n\treturn n * (n + 2) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n odd numbers.\n\"\"\"\ndef sum_of_first_n_odd_numbers(n) :  \n\treturn n * (n + 1) // 2\n\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime_numbers(n) :  \n\tsum = 0\n\tfor i in range(2, n + 1) :\n\t\tif is_prime(i) :\n\t\t\tsum += i\n\treturn sum\n\n\n\"\"\"\nWrite a python function to find the sum of the first n fibonacci numbers.\n\"\"\"\ndef sum_of_first_n_fibonacci_numbers(n) :  \n\ta, b = 0, 1"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\"\"\"\n\t:param n1: int\n\t:param n2: int\n\t:return: int\n\t\"\"\"\n\tn1_list = list(str(n1))\n\tn2_list = list(str(n2))\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i] != n2_list[i]:\n\t\t\tdistance += 1\n\treturn distance\n\n\ndef digit_distance_list(n1_list, n2_list):\n\t\"\"\"\n\t:param n1_list: list\n\t:param n2_list: list\n\t:return: int\n\t\"\"\"\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i] != n2_list[i]:\n\t\t\tdistance += 1\n\treturn distance\n\n\ndef digit_distance_str(n1, n2):\n\t\"\"\"\n\t:param n1: str\n\t:param n2: str\n\t:return: int\n\t\"\"\"\n\tn1_list = list(n1)\n\tn2_list = list(n2)\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i] != n2_list[i]:\n\t\t\tdistance += 1\n\treturn distance\n\n\ndef digit_distance_nums_2(n1, n2):\n\t\"\"\"\n\t:param n1: int\n\t:param n2: int\n\t:return: int\n\t\"\"\"\n\tn1_list = list(str(n1))\n\tn2_list = list(str(n2))\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def digit_distance_list(n1_list, n2_list):\n\t\"\"\"\n\t:param n1_list: list\n\t:param n2_list: list\n\t:return: int\n\t\"\"\"\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i] != n2_list[i]:\n\t\t\tdistance += 1\n\treturn distance\n\n\ndef digit_distance_str(n1, n2):\n\t\"\"\"\n\t:param n1: str\n\t:param n2: str\n\t:return: int\n\t\"\"\"\n\tn1_list = list(n1)\n\tn2_list = list(n2)\n\tn1_list.sort()\n\tn2_list.sort()\n\tdistance = 0\n\tfor i in range(len(n1_list)):\n\t\tif n1_list[i] != n2_list[i]:\n\t\t\tdistance += 1\n\treturn distance\n\n\ndef digit_distance_nums_2(n1, n2):\n\t\"\"\"\n\t:param n1: int\n\t:param n2: int\n\t:return: int\n\t\"\"\"\n\tn1_list = list(str(n1))\n\tn2_list = list(str(n2))\n\tn1_list.sort()\n\tn2_list.sort()"}
{"ID": 922, "source": "MBPP:559", "prompt": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\n\"\"\"\ndef max_sub_array_sum(a, size):\n\tmax_sum = a[0]\n\tcurrent_sum = 0\n\tfor i in range(0, size):\n\t\tcurrent_sum = max(current_sum + a[i], a[i])\n\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 923, "source": "MBPP:560", "prompt": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the union of elements of the given tuples.\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n\tunion_list = []\n\tfor element in test_tup1:\n\t\tif element not in union_list:\n\t\t\tunion_list.append(element)\n\tfor element in test_tup2:\n\t\tif element not in union_list:\n\t\t\tunion_list.append(element)\n\treturn union_list\n\nprint(union_elements((1, 2), (2, 3)))\nprint(union_elements((1, 2), (3, 4)))\nprint(union_elements((1, 2, 3), (3, 4, 5)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(union_elements", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(union_elements((1, 2), (2, 3)))\nprint(union_elements((1, 2), (3, 4)))\nprint(union_elements((1, 2, 3), (3, 4, 5)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(union_elements((1, 2, 3), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(union_elements"}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\tresult = {}\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\tif test_list[i] not in result:\n\t\t\t\t\tresult[test_list[i]] = []\n\t\t\t\tresult[test_list[i]].append(test_list[j])\n\treturn result\n\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q')))\nprint(assign_elements(('a', 'b',", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p')))\nprint(assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q')))\nprint(assign_elements(('a', 'b',"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_length = 0\n\tfor i in range(len(lst)):\n\t\tcurrent_length = 1\n\t\tfor j in range(i+1, len(lst)):\n\t\t\tif lst[i] == lst[j]:\n\t\t\t\tcurrent_length += 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tmax_length = max(max_length, current_length)\n\treturn max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 926, "source": "MBPP:563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract values between quotation marks of a string.\n\"\"\"\ndef extract_values(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: list[str]\n\t\"\"\"\n\tvalues = []\n\tstart = text.find('\"')\n\twhile start != -1:\n\t\tend = text.find('\"', start + 1)\n\t\tvalues.append(text[start + 1:end])\n\t\tstart = text.find('\"', end + 1)\n\treturn values\n\n\ndef test_extract_values():\n\tassert extract_values('') == []\n\tassert extract_values('\"a\"') == ['a']\n\tassert extract_values('\"a\" \"b\"') == ['a', 'b']\n\tassert extract_values('\"a\" \"b\" \"c\"') == ['a', 'b', 'c']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\"') == ['a', 'b', 'c', 'd']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\"') == ['a', 'b', 'c', 'd', 'e']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"') == ['a', 'b', 'c', 'd', 'e', 'f']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"') == ['a', '", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert extract_values('') == []\n\tassert extract_values('\"a\"') == ['a']\n\tassert extract_values('\"a\" \"b\"') == ['a', 'b']\n\tassert extract_values('\"a\" \"b\" \"c\"') == ['a', 'b', 'c']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\"') == ['a', 'b', 'c', 'd']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\"') == ['a', 'b', 'c', 'd', 'e']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"') == ['a', 'b', 'c', 'd', 'e', 'f']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\tassert extract_values('\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"') == ['a', '"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "<s> \"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\treturn [char for char in word]\n\n\"\"\"\nWrite a python function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(word):\n\treturn word == word[::-1]\n\n\"\"\"\nWrite a python function to check if a given string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to check if a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(word):\n\treturn word == word[::-1]\n\n\"\"\"\nWrite a python function to check if a given string is a permutation of another string.\n\"\"\"\ndef is_permutation(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\"\"\ndef is_subsequence(str1, str2):\n\treturn all(x in str2 for x in str1)\n\n\"\"\"\nWrite a python function to check if a given string is a subsequence of another string.\n\"\""}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\tfor i in range(len(list1)-1):\n\t\tif list1[i]>list1[i+1]:\n\t\t\treturn False\n\treturn True\n\nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint("}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\n\"\"\""}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\treturn sorted(list1)\n\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nprint(sort_sublists(list1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(sort_sublists(list1))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\nprint(is_palindrome('racecar'))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\tnew_list = []\n\tfor word in list1:\n\t\tif charlist in word:\n\t\t\tcontinue\n\t\telse:\n\t\t\tnew_list.append(word)\n\treturn new_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\tmax_sum = 0\n\tfor i in range(N): \n\t\tfor j in range(i+1, N): \n\t\t\tif abs(arr[i] - arr[j]) <= K: \n\t\t\t\tmax_sum = max(max_sum, arr[i] + arr[j]) \n\treturn max_sum \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 936, "source": "MBPP:573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t", "predict": "<s> \"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\n\"\"\"\ndef unique_product(list_data):\n\t# Write your code here\n\tlist_data = sorted(list_data)\n\tproduct = 1\n\tfor i in range(len(list_data)):\n\t\tif list_data[i] != list_data[i-1]:\n\t\t\tproduct *= list_data[i]\n\treturn product\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*r+2*3.14*r*h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\tif N == 1: \n\t\treturn L \n\tif N == 2: \n\t\treturn R \n\tif N%2 == 0: \n\t\treturn count_no(A,N//2,L,R) \n\telse: \n\t\treturn count_no(A,N//2,L,count_no(A,N//2,L,R)) \n\ndef find_nth_no_multiple(A, N, K):\n    \"\"\"\n    :param A: List of numbers\n    :param N: Nth number\n    :param K: Given number\n    :return: Nth number in the sequence which is not a multiple of K\n    \"\"\"\n    return count_no(A, N, 1, len(A))\n\nif __name__ == '__main__':\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 2))\n    print(find_nth_no_multiple([1, 2, 3, 4, 5, "}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\tfor i in range(n-m+1): \n\t\tif A[i:i+m] == B: \n\t\t\treturn True\n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 940, "source": "MBPP:577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"\ndef last_Digit_Factorial(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 6\n\tif n == 4: \n\t\treturn 24\n\tif n == 5: \n\t\treturn 120\n\tif n == 6: \n\t\treturn 720\n\tif n == 7: \n\t\treturn 5040\n\tif n == 8: \n\t\treturn 40320\n\tif n == 9: \n\t\treturn 362880\n\tif n == 10: \n\t\treturn 3628800\n\treturn last_Digit_Factorial(n-1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "<s> \"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t\"\"\"\n\t:type list1: list\n\t:type list2: list\n\t:type list3: list\n\t:rtype: list\n\t\"\"\"\n\tif len(list1) != len(list2) or len(list2) != len(list3):\n\t\traise ValueError(\"Lists must be of the same length\")\n\tinterleaved_list = []\n\tfor i in range(len(list1)):\n\t\tinterleaved_list.append(list1[i])\n\t\tinterleaved_list.append(list2[i])\n\t\tinterleaved_list.append(list3[i])\n\treturn interleaved_list\n\ndef test_interleave_lists():\n\tassert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\tassert interleave_lists([1,2,3],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5,6],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5,6,7],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\tassert interleave_lists([1,2,3],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5,6],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,3,4,5,6,7],[4,5,6],[7,8,9,10]) == [1,4,7,2,5,8,3,6,9,10]\n\tassert interleave_lists([1,2,"}
{"ID": 942, "source": "MBPP:579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n\treturn tuple(set(test_tup1) ^ set(test_tup2))\n\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s +", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): \n\treturn 2*b*s + 2*b*b\n\ndef surface_Area(b,s): "}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_2(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_3(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_4(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_5(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_6(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_7(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_8(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_9(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_10(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_11(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_12(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_13(text):\n\timport re\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_2(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_3(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_4(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_5(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_6(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_7(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_8(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_9(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_10(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_11(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_12(text):\n\timport re\n\tadverbs = re.findall(r'\\w+ly', text)\n\treturn adverbs\n\ndef find_adverbs_13(text):"}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t#create a min heap\n\theap = []\n\tfor item in items:\n\t\theapq.heappush(heap,item)\n\t#pop the top n items\n\tresult = []\n\tfor i in range(n):\n\t\tresult.append(heapq.heappop(heap))\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a,n,k):  \n\treturn a[n:] + a[:n]\n\ndef split_Arr(a"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\n\"\"\"\nWrite a function to convert a list to a dictionary.\n\"\"\"\ndef list_dict(listx):\n\treturn {listx[i]:listx[i+1] for i in range(0,len(listx),2)}\n\n\"\"\"\nWrite a function to convert a dictionary to a list.\n\"\"\"\ndef dict_list(dictx):\n\treturn [dictx[key] for key in dictx]\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_str(listx):\n\treturn \"\".join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef str_list(strx):\n\treturn list(strx)\n\n\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\n\"\"\"\nWrite a function to convert a list to a dictionary.\n\"\"\"\ndef list_dict(listx):\n\treturn {listx[i]:listx[i+1] for i in range(0,len(listx),2)}\n\n\"\"\"\nWrite a function to convert a dictionary to a list.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\n\"\"\"\nWrite a function to convert a list to a dictionary.\n\"\"\"\ndef list_dict(listx):\n\treturn {listx[i]:listx[i+1] for i in range(0,len(listx),2)}\n\n\"\"\"\nWrite a function to convert a dictionary to a list.\n\"\"\"\ndef dict_list(dictx):\n\treturn [dictx[key] for key in dictx]\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_str(listx):\n\treturn \"\".join(listx)\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef str_list(strx):\n\treturn list(strx)\n\n\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\n\"\"\"\nWrite a function to convert a list to a dictionary.\n\"\"\"\ndef list_dict(listx):"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_2(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_3(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_4(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_5(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_6(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_7(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_8(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_9(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_10(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_11(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_12(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_13(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_14(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_15(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_16(x,y):\n\treturn (x*x+y*y)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_2(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_3(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_4(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_5(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_6(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_7(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_8(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_9(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_10(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_11(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_12(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_13(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_14(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_15(x,y):\n\treturn (x*x+y*y)**0.5, x*y\n\ndef polar_rect_16(x,y):"}
{"ID": 958, "source": "MBPP:595", "prompt": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t# Code here\n\tcount = 0\n\tfor i in range(len(str1)):\n\t\tif str1[i] != str2[i]:\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 961, "source": "MBPP:598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"\ndef armstrong_number(number):\n\t\"\"\"\n\t:param number: int\n\t:return: bool\n\t\"\"\"\n\tif number < 0:\n\t\treturn False\n\tif number == 0:\n\t\treturn True\n\tn = len(str(number))\n\tsum = 0\n\tfor digit in str(number):\n\t\tsum += int(digit) ** n\n\treturn sum == number\n\n\nif __name__ == '__main__':\n\tprint(armstrong_number(153))\n\tprint(armstrong_number(123))\n\tprint(armstrong_number(1534))\n\tprint(armstrong_number(15342))\n\tprint(armstrong_number(153421))\n\tprint(armstrong_number(1534213))\n\tprint(armstrong_number(15342134))\n\tprint(armstrong_number(153421345))\n\tprint(armstrong_number(1534213456))\n\tprint(armstrong_number(15342134567))\n\tprint(armstrong_number(153421345678))\n\tprint(armstrong_number(1534213456789))\n\tprint(armstrong_number(15342134567890))\n\tprint(armstrong_number(153421345678901))\n\tprint(armstrong_number(1534213456789012))\n\tprint(armstrong_number(15342134567890123))\n\tprint(armstrong_number(153421345678901234))\n\tprint(armstrong_number(1534213456789012345))\n\tprint(armstrong_number(15342134567890123456))\n\tprint(armstrong_number(153", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(armstrong_number(153))\n\tprint(armstrong_number(123))\n\tprint(armstrong_number(1534))\n\tprint(armstrong_number(15342))\n\tprint(armstrong_number(153421))\n\tprint(armstrong_number(1534213))\n\tprint(armstrong_number(15342134))\n\tprint(armstrong_number(153421345))\n\tprint(armstrong_number(1534213456))\n\tprint(armstrong_number(15342134567))\n\tprint(armstrong_number(153421345678))\n\tprint(armstrong_number(1534213456789))\n\tprint(armstrong_number(15342134567890))\n\tprint(armstrong_number(153421345678901))\n\tprint(armstrong_number(1534213456789012))\n\tprint(armstrong_number(15342134567890123))\n\tprint(armstrong_number(153421345678901234))\n\tprint(armstrong_number(1534213456789012345))\n\tprint(armstrong_number(15342134567890123456))\n\tprint(armstrong_number(153"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of the first n prime numbers.\n\"\"\"\ndef sum_of_first_n_prime(n):\n\tsum = 0\n\tfor i in range(2, n + 1):\n\t\tif is_prime(i):"}
{"ID": 967, "source": "MBPP:4", "prompt": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_largest(nums,n):\n\t# create a min heap\n\th = []\n\tfor i in range(n):\n\t\theapq.heappush(h,nums[i])\n\t# pop the top element from the heap\n\tfor i in range(n-1):\n\t\theapq.heappop(h)\n\treturn h[0]\n\ndef largest_number(nums):\n\tn = len(nums)\n\tif n == 0:\n\t\treturn None\n\tif n == 1:\n\t\treturn nums[0]\n\treturn heap_queue_largest(nums,n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 13\n\tif n == 6: \n\t\treturn 24\n\tif n == 7: \n\t\treturn 44\n\tif n == 8: \n\t\treturn 84\n\tif n == 9: \n\t\treturn 149\n\tif n == 10: \n\t\treturn 232\n\tif n == 11: \n\t\treturn 371\n\tif n == 12: \n\t\treturn 610\n\tif n == 13: \n\t\treturn 987\n\tif n == 14: \n\t\treturn 1597\n\tif n == 15: \n\t\treturn 2584\n\tif n == 16: \n\t\treturn 4181\n\tif n == 17: \n\t\treturn 6765\n\tif n == 18: \n\t\treturn 10946\n\tif n == 19: \n\t\treturn 17711\n\tif n == 20: \n\t\treturn 28657\n\tif n == 21: \n\t\treturn 46368\n\tif n == 22: \n\t\treturn 75025\n\tif n == 23: \n\t\treturn 121393\n\tif n == 24: \n\t\treturn 196418\n\tif n == 25: \n\t\treturn 317811\n\tif n == 26: \n\t\treturn 514229\n\tif n == 27: \n\t\treturn 832040\n\tif n == 28: \n\t\treturn 13462", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 13\n\tif n == 6: \n\t\treturn 24\n\tif n == 7: \n\t\treturn 44\n\tif n == 8: \n\t\treturn 84\n\tif n == 9: \n\t\treturn 149\n\tif n == 10: \n\t\treturn 232\n\tif n == 11: \n\t\treturn 371\n\tif n == 12: \n\t\treturn 610\n\tif n == 13: \n\t\treturn 987\n\tif n == 14: \n\t\treturn 1597\n\tif n == 15: \n\t\treturn 2584\n\tif n == 16: \n\t\treturn 4181\n\tif n == 17: \n\t\treturn 6765\n\tif n == 18: \n\t\treturn 10946\n\tif n == 19: \n\t\treturn 17711\n\tif n == 20: \n\t\treturn 28657\n\tif n == 21: \n\t\treturn 46368\n\tif n == 22: \n\t\treturn 75025\n\tif n == 23: \n\t\treturn 121393\n\tif n == 24: \n\t\treturn 196418\n\tif n == 25: \n\t\treturn 317811\n\tif n == 26: \n\t\treturn 514229\n\tif n == 27: \n\t\treturn 832040\n\tif n == 28: \n\t\treturn 13462"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t\"\"\"\n\t:type a: int\n\t:type b: int\n\t:rtype: bool\n\t\"\"\"\n\treturn bin(a^b).count('1') == 1\n\nprint(differ_At_One_Bit_Pos(1,2))\nprint(differ_At_One_Bit_Pos(1,3))\nprint(differ_At_One_Bit_Pos(1,4))\nprint(differ_At_One_Bit_Pos(1,5))\nprint(differ_At_One_Bit_Pos(1,6))\nprint(differ_At_One_Bit_Pos(1,7))\nprint(differ_At_One_Bit_Pos(1,8))\nprint(differ_At_One_Bit_Pos(1,9))\nprint(differ_At_One_Bit_Pos(1,10))\nprint(differ_At_One_Bit_Pos(1,11))\nprint(differ_At_One_Bit_Pos(1,12))\nprint(differ_At_One_Bit_Pos(1,13))\nprint(differ_At_One_Bit_Pos(1,14))\nprint(differ_At_One_Bit_Pos(1,15))\nprint(differ_At_One_Bit_Pos(1,16))\nprint(differ_At_One_Bit_Pos(1,17))\nprint(differ_At_One_Bit_Pos(1,18))\nprint(differ_At_One_Bit_Pos(1,19))\nprint(differ_At_One_Bit_Pos(1,20))\nprint(differ_At_One_Bit_Pos(1,21))\nprint(differ_At_One_Bit_Pos(1,22))\nprint(differ_At_One_Bit_Pos(1,23))\nprint(differ_At_One_Bit_Pos(1,24))\nprint(differ_At_One_Bit_Pos(1,25))\nprint(differ_At_One_Bit_Pos(1,26))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(differ_At_One_Bit_Pos(1,2))\nprint(differ_At_One_Bit_Pos(1,3))\nprint(differ_At_One_Bit_Pos(1,4))\nprint(differ_At_One_Bit_Pos(1,5))\nprint(differ_At_One_Bit_Pos(1,6))\nprint(differ_At_One_Bit_Pos(1,7))\nprint(differ_At_One_Bit_Pos(1,8))\nprint(differ_At_One_Bit_Pos(1,9))\nprint(differ_At_One_Bit_Pos(1,10))\nprint(differ_At_One_Bit_Pos(1,11))\nprint(differ_At_One_Bit_Pos(1,12))\nprint(differ_At_One_Bit_Pos(1,13))\nprint(differ_At_One_Bit_Pos(1,14))\nprint(differ_At_One_Bit_Pos(1,15))\nprint(differ_At_One_Bit_Pos(1,16))\nprint(differ_At_One_Bit_Pos(1,17))\nprint(differ_At_One_Bit_Pos(1,18))\nprint(differ_At_One_Bit_Pos(1,19))\nprint(differ_At_One_Bit_Pos(1,20))\nprint(differ_At_One_Bit_Pos(1,21))\nprint(differ_At_One_Bit_Pos(1,22))\nprint(differ_At_One_Bit_Pos(1,23))\nprint(differ_At_One_Bit_Pos(1,24))\nprint(differ_At_One_Bit_Pos(1,25))\nprint(differ_At_One_Bit_Pos(1,26))\n"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\treturn re.findall(r'\\b\\w{4,}\\b', text)\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and filter.\n\"\"\"\ndef find_char_long(text):\n\treturn list(filter(lambda word: len(word) >= 4, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and list comprehension.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and generator expression.\n\"\"\"\ndef find_char_long(text):\n\treturn (word for word in text.split() if len(word) >= 4)\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and map.\n\"\"\"\ndef find_char_long(text):\n\treturn list(map(lambda word: word if len(word) >= 4 else None, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and filter.\n\"\"\"\ndef find_char_long(text):\n\treturn list(filter(lambda word: len(word) >= 4, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and list comprehension.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and generator expression.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.findall(r'\\b\\w{4,}\\b', text)\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and filter.\n\"\"\"\ndef find_char_long(text):\n\treturn list(filter(lambda word: len(word) >= 4, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and list comprehension.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and generator expression.\n\"\"\"\ndef find_char_long(text):\n\treturn (word for word in text.split() if len(word) >= 4)\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and map.\n\"\"\"\ndef find_char_long(text):\n\treturn list(map(lambda word: word if len(word) >= 4 else None, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and filter.\n\"\"\"\ndef find_char_long(text):\n\treturn list(filter(lambda word: len(word) >= 4, text.split()))\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and list comprehension.\n\"\"\"\ndef find_char_long(text):\n\treturn [word for word in text.split() if len(word) >= 4]\n\n\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using split and generator expression.\n\"\"\"\n"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn [lambda x: x**2(x) for x in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [lambda x: x**2(x) for x in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):\n\treturn [lambda x: sum(x) for x in nums]\n\nprint(sum_elements([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of the elements in a list using lambda function.\n\"\"\"\ndef sum_elements(nums):"}
{"ID": 972, "source": "MBPP:9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\n\"\"\"\ndef find_Rotations(str): \n\tn = len(str) \n\tif n == 0: \n\t\treturn 0\n\ti = 0\n\twhile i < n-1: \n\t\tif str[i] == str[i+1]: \n\t\t\ti += 1\n\t\telse: \n\t\t\tbreak\n\tif i == n-1: \n\t\treturn 1\n\tj = n-2\n\twhile j >= 0: \n\t\tif str[j] == str[0]: \n\t\t\tj -= 1\n\t\telse: \n\t\t\tbreak\n\tif j < 0: \n\t\treturn 2\n\treturn (n-j) + (j+1) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\treturn sorted(list1)[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
