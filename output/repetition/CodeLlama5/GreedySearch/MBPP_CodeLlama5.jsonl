{"ID": 1, "source": "MBPP:602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n\t\"\"\"\n\tReturns the first repeated character in a given string.\n\t\"\"\"\n\tfor i in range(len(str1)):\n\t\tif str1.count(str1[i]) > 1:\n\t\t\treturn str1[i]\n\treturn None\n\nprint(first_repeated_char(\"abcd\"))\nprint(first_repeated_char(\"abcdab\"))\nprint(first_repeated_char(\"abcdabc\"))\nprint(first_repeated_char(\"abcdabcab\"))\nprint(first_repeated_char(\"abcdabcabc\"))\nprint(first_repeated_char(\"abcdabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabc", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_repeated_char(\"abcd\"))\nprint(first_repeated_char(\"abcdab\"))\nprint(first_repeated_char(\"abcdabc\"))\nprint(first_repeated_char(\"abcdabcab\"))\nprint(first_repeated_char(\"abcdabcabc\"))\nprint(first_repeated_char(\"abcdabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabcabcabcabcabcab\"))\nprint(first_repeated_char(\"abcdabcabcabcabcabcabc"}
{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\tif num == 1:\n\t\treturn False\n\tfor i in range(2, num):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(prime_num(1))\nprint(prime_num(2))\nprint(prime_num(3))\nprint(prime_num(4))\nprint(prime_num(5))\nprint(prime_num(6))\nprint(prime_num(7))\nprint(prime_num(8))\nprint(prime_num(9))\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\nprint(prime_num(47))\nprint(prime_num(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(prime_num(1))\nprint(prime_num(2))\nprint(prime_num(3))\nprint(prime_num(4))\nprint(prime_num(5))\nprint(prime_num(6))\nprint(prime_num(7))\nprint(prime_num(8))\nprint(prime_num(9))\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\nprint(prime_num(47))\nprint(prime_num("}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "<s>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\timport re\n\tpattern = re.compile(pattern)\n\treturn pattern.findall(text)\n\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\"))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 1))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 2))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 3))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 4))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 5))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 6))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 7))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 8))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 9))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 10))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 11))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 12))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 13))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 14))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 15))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 16))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 17))\nprint(find_literals(\"The quick brown fox jumps over", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\"))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 1))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 2))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 3))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 4))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 5))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 6))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 7))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 8))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 9))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 10))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 11))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 12))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 13))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 14))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 15))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 16))\nprint(find_literals(\"The quick brown fox jumps over the lazy dog\", \"the\", 17))\nprint(find_literals(\"The quick brown fox jumps over"}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "<s>\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\tif a == 0 and b == 0: \n\t\treturn 0\n\tif a < 0 or b < 0: \n\t\treturn -1\n\tif a == d and b == 0: \n\t\treturn 1\n\tif a == 0 and b != 0: \n\t\treturn min_Jumps(a, b - d, d) + 1\n\tif b == 0 and a != 0: \n\t\treturn min_Jumps(a - d, b, d) + 1\n\treturn min(min_Jumps(a - d, b, d), min_Jumps(a, b - d, d)) + 1\n\nprint(min_Jumps(1, 1, 2))\nprint(min_Jumps(1, 1, 1))\nprint(min_Jumps(1, 1, 3))\nprint(min_Jumps(1, 1, 4))\nprint(min_Jumps(1, 1, 5))\nprint(min_Jumps(1, 1, 6))\nprint(min_Jumps(1, 1, 7))\nprint(min_Jumps(1, 1, 8))\nprint(min_Jumps(1, 1, 9))\nprint(min_Jumps(1, 1, 10))\nprint(min_Jumps(1, 1, 11))\nprint(min_Jumps(1, 1, 12))\nprint(min_Jumps(1, 1, 13))\nprint(min_Jumps(1, 1, 14))\nprint(min_Jumps(1, 1, 15))\nprint(min_Jumps(1, 1, 16))\nprint(min_Jumps(1, 1, 17))\nprint(min_Jumps(1, 1, 18))\nprint(min_Jumps(1, 1, 19))\nprint(min_Jumps(1, 1, 20))\nprint(min_Jumps(1, 1, 21))\nprint(min", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_Jumps(1, 1, 2))\nprint(min_Jumps(1, 1, 1))\nprint(min_Jumps(1, 1, 3))\nprint(min_Jumps(1, 1, 4))\nprint(min_Jumps(1, 1, 5))\nprint(min_Jumps(1, 1, 6))\nprint(min_Jumps(1, 1, 7))\nprint(min_Jumps(1, 1, 8))\nprint(min_Jumps(1, 1, 9))\nprint(min_Jumps(1, 1, 10))\nprint(min_Jumps(1, 1, 11))\nprint(min_Jumps(1, 1, 12))\nprint(min_Jumps(1, 1, 13))\nprint(min_Jumps(1, 1, 14))\nprint(min_Jumps(1, 1, 15))\nprint(min_Jumps(1, 1, 16))\nprint(min_Jumps(1, 1, 17))\nprint(min_Jumps(1, 1, 18))\nprint(min_Jumps(1, 1, 19))\nprint(min_Jumps(1, 1, 20))\nprint(min_Jumps(1, 1, 21))\nprint(min"}
{"ID": 18, "source": "MBPP:619", "prompt": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t", "predict": "<s>\"\"\"\nWrite a function to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n\t# your code here\n\treturn ''.join(filter(lambda x: not x.isdigit(), test_str))\n\nif __name__ == '__main__':\n\tprint(move_num('ab12c3d4e'))\n\tprint(move_num('ab12c3d4e5'))\n\tprint(move_num('ab12c3d4e5f'))\n\tprint(move_num('ab12c3d4e5f6'))\n\tprint(move_num('ab12c3d4e5f6g'))\n\tprint(move_num('ab12c3d4e5f6gh'))\n\tprint(move_num('ab12c3d4e5f6gh7'))\n\tprint(move_num('ab12c3d4e5f6gh7i'))\n\tprint(move_num('ab12c3d4e5f6gh7i8'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9k'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9kl'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klm'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmn'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnop'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopq'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopqr'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopqrs'))\n\tprint(move_num", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(move_num('ab12c3d4e'))\n\tprint(move_num('ab12c3d4e5'))\n\tprint(move_num('ab12c3d4e5f'))\n\tprint(move_num('ab12c3d4e5f6'))\n\tprint(move_num('ab12c3d4e5f6g'))\n\tprint(move_num('ab12c3d4e5f6gh'))\n\tprint(move_num('ab12c3d4e5f6gh7'))\n\tprint(move_num('ab12c3d4e5f6gh7i'))\n\tprint(move_num('ab12c3d4e5f6gh7i8'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9k'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9kl'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klm'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmn'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnop'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopq'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopqr'))\n\tprint(move_num('ab12c3d4e5f6gh7i8j9klmnopqrs'))\n\tprint(move_num"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "<s>\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t# your code here\n\tfor i in range(len(test_list)):\n\t\tfor j in range(len(test_list[i])):\n\t\t\tif test_list[i][j].isdigit():\n\t\t\t\ttest_list[i] = test_list[i][:j] + str(int(test_list[i][j]) + K) + test_list[i][j+1:]\n\treturn test_list\n\n\nif __name__ == '__main__':\n\ttest_list = ['123', 'abc', '456']\n\tprint(increment_numerics(test_list, 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<s>\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theapq.heappush(heap, value)\n\treturn [heapq.heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\n\"\"\"\ndef sum_list(iterable):\n\treturn sum(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef max_list(iterable):\n\treturn max(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef min_list(iterable):\n\treturn min(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average of all the numbers.\n\"\"\"\ndef avg_list(iterable):\n\treturn sum(iterable) / len(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the median of the list.\n\"\"\"\ndef median_list(iterable):\n\treturn sorted(iterable)[len(iterable) // 2]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the mode of the list.\n\"\"\"\ndef mode_list(iterable):\n\treturn max(set(iterable), key=iterable.count)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the range of the list.\n\"\"\"\ndef range_list(iterable):\n\treturn max(iterable) - min(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the variance of the list.\n\"\"\"\ndef variance_list(iterable):\n\treturn sum([(x - avg_list(iterable)) ** 2 for x in iterable]) / len(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the standard deviation of the list.\n\"\"\"\ndef std_list(iterable):\n\treturn variance_list(iterable) ** 0.5\n\n\"\"\"\nWrite a function that takes a list of numbers and returns", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [heapq.heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\n\"\"\"\ndef sum_list(iterable):\n\treturn sum(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef max_list(iterable):\n\treturn max(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef min_list(iterable):\n\treturn min(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average of all the numbers.\n\"\"\"\ndef avg_list(iterable):\n\treturn sum(iterable) / len(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the median of the list.\n\"\"\"\ndef median_list(iterable):\n\treturn sorted(iterable)[len(iterable) // 2]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the mode of the list.\n\"\"\"\ndef mode_list(iterable):\n\treturn max(set(iterable), key=iterable.count)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the range of the list.\n\"\"\"\ndef range_list(iterable):\n\treturn max(iterable) - min(iterable)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the variance of the list.\n\"\"\"\ndef variance_list(iterable):"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\"\"\"\n\tRemove the parenthesis area in a string.\n\t\"\"\"\n\tif not items:\n\t\treturn items\n\tif items[0] == '(':\n\t\treturn remove_parenthesis(items[1:])\n\tif items[-1] == ')':\n\t\treturn remove_parenthesis(items[:-1])\n\treturn items[0] + remove_parenthesis(items[1:])\n\n\nif __name__ == '__main__':\n\tprint(remove_parenthesis('(hello)'))\n\tprint(remove_parenthesis('(hello) world'))\n\tprint(remove_parenthesis('(hello) (world)'))\n\tprint(remove_parenthesis('(hello) (world) (again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(remove_parenthesis('(hello)'))\n\tprint(remove_parenthesis('(hello) world'))\n\tprint(remove_parenthesis('(hello) (world)'))\n\tprint(remove_parenthesis('(hello) (world) (again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) (and again) (and again) (and again) (and again) (and again) (and again) (and again) (and again)'))\n\tprint(remove_parenthesis('(hello) (world) (again) ("}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\treturn (n * (3 * n - 1)) % 8 == 0\n\ndef nth_nonagonal(n):\n\ti = 1\n\twhile True:\n\t\tif is_nonagonal(i):\n\t\t\tn -= 1\n\t\t\tif n == 0:\n\t\t\t\treturn i\n\t\ti += 1\n\nprint(nth_nonagonal(10))\nprint(nth_nonagonal(100))\nprint(nth_nonagonal(1000))\nprint(nth_nonagonal(10000))\nprint(nth_nonagonal(100000))\nprint(nth_nonagonal(1000000))\nprint(nth_nonagonal(10000000))\nprint(nth_nonagonal(100000000))\nprint(nth_nonagonal(1000000000))\nprint(nth_nonagonal(10000000000))\nprint(nth_nonagonal(100000000000))\nprint(nth_nonagonal(1000000000000))\nprint(nth_nonagonal(10000000000000))\nprint(nth_nonagonal(100000000000000))\nprint(nth_nonagonal(1000000000000000))\nprint(nth_nonagonal(10000000000000000))\nprint(nth_nonagonal(100000000000000000))\nprint(nth_nonagonal(1000000000000000000))\nprint(nth_nonagonal(10000000000000000000))\nprint(nth_nonagonal(100000000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(nth_nonagonal(10))\nprint(nth_nonagonal(100))\nprint(nth_nonagonal(1000))\nprint(nth_nonagonal(10000))\nprint(nth_nonagonal(100000))\nprint(nth_nonagonal(1000000))\nprint(nth_nonagonal(10000000))\nprint(nth_nonagonal(100000000))\nprint(nth_nonagonal(1000000000))\nprint(nth_nonagonal(10000000000))\nprint(nth_nonagonal(100000000000))\nprint(nth_nonagonal(1000000000000))\nprint(nth_nonagonal(10000000000000))\nprint(nth_nonagonal(100000000000000))\nprint(nth_nonagonal(1000000000000000))\nprint(nth_nonagonal(10000000000000000))\nprint(nth_nonagonal(100000000000000000))\nprint(nth_nonagonal(1000000000000000000))\nprint(nth_nonagonal(10000000000000000000))\nprint(nth_nonagonal(100000000000000000"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'(?<!^)\\b\\w*z\\w*\\b(?!$)', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the"}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "<s>\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\treturn sum(nums[m:n+1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 50, "source": "MBPP:651", "prompt": "\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n\t# check if the length of the first tuple is less than the second\n\tif len(test_tup1) < len(test_tup2):\n\t\t# if so, then the first tuple cannot be a subset of the second\n\t\treturn False\n\telse:\n\t\t# if not, then check if the first tuple is a subset of the second\n\t\tfor i in test_tup1:\n\t\t\tif i not in test_tup2:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(check_subset((1, 2, 3), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_subset((1, 2,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_subset((1, 2, 3), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_subset((1, 2,"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t\"\"\"\n\tReturns the perimeter of a rectangle.\n\t\"\"\"\n\treturn 2*(l+b)\n\nprint(rectangle_perimeter(2,3))\nprint(rectangle_perimeter(3,4))\nprint(rectangle_perimeter(4,5))\nprint(rectangle_perimeter(5,6))\nprint(rectangle_perimeter(6,7))\nprint(rectangle_perimeter(7,8))\nprint(rectangle_perimeter(8,9))\nprint(rectangle_perimeter(9,10))\nprint(rectangle_perimeter(10,11))\nprint(rectangle_perimeter(11,12))\nprint(rectangle_perimeter(12,13))\nprint(rectangle_perimeter(13,14))\nprint(rectangle_perimeter(14,15))\nprint(rectangle_perimeter(15,16))\nprint(rectangle_perimeter(16,17))\nprint(rectangle_perimeter(17,18))\nprint(rectangle_perimeter(18,19))\nprint(rectangle_perimeter(19,20))\nprint(rectangle_perimeter(20,21))\nprint(rectangle_perimeter(21,22))\nprint(rectangle_perimeter(22,23))\nprint(rectangle_perimeter(23,24))\nprint(rectangle_perimeter(24,25))\nprint(rectangle_perimeter(25,26))\nprint(rectangle_perimeter(26,27))\nprint(rectangle_perimeter(27,28))\nprint(rectangle_perimeter(28,29))\nprint(rectangle_perimeter(29,30))\nprint(rectangle_perimeter(30,31))\nprint(rectangle_perimeter(31,32))\nprint(rectangle_perimeter(32,33))\nprint(rectangle_perimeter(33,34))\nprint(rectangle_perimeter(34,35))\nprint(rect", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(rectangle_perimeter(2,3))\nprint(rectangle_perimeter(3,4))\nprint(rectangle_perimeter(4,5))\nprint(rectangle_perimeter(5,6))\nprint(rectangle_perimeter(6,7))\nprint(rectangle_perimeter(7,8))\nprint(rectangle_perimeter(8,9))\nprint(rectangle_perimeter(9,10))\nprint(rectangle_perimeter(10,11))\nprint(rectangle_perimeter(11,12))\nprint(rectangle_perimeter(12,13))\nprint(rectangle_perimeter(13,14))\nprint(rectangle_perimeter(14,15))\nprint(rectangle_perimeter(15,16))\nprint(rectangle_perimeter(16,17))\nprint(rectangle_perimeter(17,18))\nprint(rectangle_perimeter(18,19))\nprint(rectangle_perimeter(19,20))\nprint(rectangle_perimeter(20,21))\nprint(rectangle_perimeter(21,22))\nprint(rectangle_perimeter(22,23))\nprint(rectangle_perimeter(23,24))\nprint(rectangle_perimeter(24,25))\nprint(rectangle_perimeter(25,26))\nprint(rectangle_perimeter(26,27))\nprint(rectangle_perimeter(27,28))\nprint(rectangle_perimeter(28,29))\nprint(rectangle_perimeter(29,30))\nprint(rectangle_perimeter(30,31))\nprint(rectangle_perimeter(31,32))\nprint(rectangle_perimeter(32,33))\nprint(rectangle_perimeter(33,34))\nprint(rectangle_perimeter(34,35))\nprint(rect"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t# your code goes here\n\tmax_count = 0\n\tmax_item = None\n\tfor item in list1:\n\t\tcount = list1.count(item)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_item = item\n\treturn max_item\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "<s>\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\tnew_string = \"\"\n\tfor i in string:\n\t\tif i != char:\n\t\t\tnew_string += i\n\t\telse:\n\t\t\tif new_string[-1] != char:\n\t\t\t\tnew_string += i\n\treturn new_string\n\nprint(replace(\"aaabbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(replace(\"aaabbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<s>\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\timport re\n\tregex = \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n\tif(re.search(regex,Ip)): \n\t\treturn True\n\telse: \n\t\treturn False\n\nprint(check_IP(\"192.168.1.1\"))\nprint(check_IP(\"192.168.1.1000\"))\nprint(check_IP(\"192.168.1.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(check_IP(\"192.168.1.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 69, "source": "MBPP:670", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] > nums[i+1]:\n\t\t\treturn False\n\treturn True\n\nprint(decreasing_trend([1,2,3,4,5]))\nprint(decreasing_trend([5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(decreasing_trend([10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(decreasing_trend([20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(decreasing_trend([21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(decreasing_trend([22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decreasing_trend([1,2,3,4,5]))\nprint(decreasing_trend([5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(decreasing_trend([10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(decreasing_trend([20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(decreasing_trend([21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]))\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(decreasing_trend([22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,"}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\tfrom collections import OrderedDict\n\twords = string.split()\n\tunique_words = OrderedDict.fromkeys(words).keys()\n\treturn ' '.join(unique_words)\n\nprint(remove_duplicate(\"This is a sample string\"))\nprint(remove_duplicate(\"This is a sample string is\"))\nprint(remove_duplicate(\"This is a sample string is a\"))\nprint(remove_duplicate(\"This is a sample string is a sample\"))\nprint(remove_duplicate(\"This is a sample string is a sample string\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample string\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample string is\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample string is a\"))\nprint(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample string is a sample", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(remove_duplicate(\"This is a sample string is a sample string is a sample string is a sample string is a sample string is a sample"}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\tif x+y >= m and x+y <= n:\n\t\treturn 20\n\telse:\n\t\treturn x+y\n\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))\nprint(sum_nums(10,20,15,25))"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', text1)\n\nprint(remove_extra_char(\"Hello, World!\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_extra_char(\"Hello, World!\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint(remove_extra_char(\"Hey, I'm learning Python\"))\nprint("}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\tif a+b>c and a+c>b and b+c>a:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(validity_triangle(1,2,3))\nprint(validity_triangle(1,2,4))\nprint(validity_triangle(1,2,1))\nprint(validity_triangle(1,1,1))\nprint(validity_triangle(1,1,2))\nprint(validity_triangle(1,1,3))\nprint(validity_triangle(1,1,4))\nprint(validity_triangle(1,1,5))\nprint(validity_triangle(1,1,6))\nprint(validity_triangle(1,1,7))\nprint(validity_triangle(1,1,8))\nprint(validity_triangle(1,1,9))\nprint(validity_triangle(1,1,10))\nprint(validity_triangle(1,1,11))\nprint(validity_triangle(1,1,12))\nprint(validity_triangle(1,1,13))\nprint(validity_triangle(1,1,14))\nprint(validity_triangle(1,1,15))\nprint(validity_triangle(1,1,16))\nprint(validity_triangle(1,1,17))\nprint(validity_triangle(1,1,18))\nprint(validity_triangle(1,1,19))\nprint(validity_triangle(1,1,20))\nprint(validity_triangle(1,1,21))\nprint(validity_triangle(1,1,22))\nprint(validity_triangle(1,1,23))\nprint(validity_triangle(1,1,24))\nprint(validity_triangle(1,1,25))\nprint(validity_triangle(1,1,26))\nprint(validity_triangle(1,1,27))\nprint(validity_triangle(1,1,28))\nprint(validity_triangle(1,1,29))\nprint(validity_triangle(1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(validity_triangle(1,2,3))\nprint(validity_triangle(1,2,4))\nprint(validity_triangle(1,2,1))\nprint(validity_triangle(1,1,1))\nprint(validity_triangle(1,1,2))\nprint(validity_triangle(1,1,3))\nprint(validity_triangle(1,1,4))\nprint(validity_triangle(1,1,5))\nprint(validity_triangle(1,1,6))\nprint(validity_triangle(1,1,7))\nprint(validity_triangle(1,1,8))\nprint(validity_triangle(1,1,9))\nprint(validity_triangle(1,1,10))\nprint(validity_triangle(1,1,11))\nprint(validity_triangle(1,1,12))\nprint(validity_triangle(1,1,13))\nprint(validity_triangle(1,1,14))\nprint(validity_triangle(1,1,15))\nprint(validity_triangle(1,1,16))\nprint(validity_triangle(1,1,17))\nprint(validity_triangle(1,1,18))\nprint(validity_triangle(1,1,19))\nprint(validity_triangle(1,1,20))\nprint(validity_triangle(1,1,21))\nprint(validity_triangle(1,1,22))\nprint(validity_triangle(1,1,23))\nprint(validity_triangle(1,1,24))\nprint(validity_triangle(1,1,25))\nprint(validity_triangle(1,1,26))\nprint(validity_triangle(1,1,27))\nprint(validity_triangle(1,1,28))\nprint(validity_triangle(1,1,29))\nprint(validity_triangle(1,"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t\"\"\"\n\t:param nums: list of numbers\n\t:return: True if the sequence of numbers has an increasing trend, False otherwise\n\t\"\"\"\n\tfor i in range(len(nums) - 1):\n\t\tif nums[i] > nums[i + 1]:\n\t\t\treturn False\n\treturn True\n\n\nif __name__ == '__main__':\n\tprint(increasing_trend([1, 2, 3, 4, 5]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(increasing_trend([1, 2, 3, 4, 5]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n\tprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,"}
{"ID": 89, "source": "MBPP:690", "prompt": "\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\t", "predict": "<s>\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n\tif len(nums) == 0:\n\t\treturn 0\n\telif len(nums) == 1:\n\t\treturn nums[0]\n\telse:\n\t\treturn nums[0] * mul_consecutive_nums(nums[1:])\n\nprint(mul_consecutive_nums([1, 2, 3, 4, 5]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(mul_consecutive_nums([1, 2, 3, 4, 5]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8,"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "<s>\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\treturn [list(x) for x in zip(list1,list2)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\tcount = 0\n\tfor i in li:\n\t\tif i >= min and i <= max:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 6))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 8))\nprint(count_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 6))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 7))\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 8))\nprint(count_"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\"\"\"\n\t:param arr: list of integers\n\t:return: int\n\t\"\"\"\n\tif len(arr) == 0:\n\t\treturn -1\n\tif len(arr) == 1:\n\t\treturn 0\n\tleft_sum = 0\n\tright_sum = sum(arr) - arr[0]\n\tfor i in range(1, len(arr)):\n\t\tleft_sum += arr[i - 1]\n\t\tright_sum -= arr[i]\n\t\tif left_sum == right_sum:\n\t\t\treturn i\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5,"}
{"ID": 103, "source": "MBPP:704", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\"\"\"\n\tCalculate the harmonic sum of n-1.\n\t\"\"\"\n\tif n == 1:\n\t\treturn 0\n\telse:\n\t\treturn 1/n + harmonic_sum(n-1)\n\ndef test_harmonic_sum():\n\t\"\"\"\n\tTest the harmonic_sum function.\n\t\"\"\"\n\tassert harmonic_sum(1) == 0\n\tassert harmonic_sum(2) == 1\n\tassert harmonic_sum(3) == 1.5\n\tassert harmonic_sum(4) == 1.8333333333333333\n\tassert harmonic_sum(5) == 2.0833333333333335\n\tassert harmonic_sum(6) == 2.25\n\tassert harmonic_sum(7) == 2.375\n\tassert harmonic_sum(8) == 2.466666666666667\n\tassert harmonic_sum(9) == 2.5333333333333335\n\tassert harmonic_sum(10) == 2.583333333333333\n\tassert harmonic_sum(11) == 2.616666666666667\n\tassert harmonic_sum(12) == 2.6333333333333335\n\tassert harmonic_sum(13) == 2.641666666666667\n\tassert harmonic_sum(14) == 2.6458333333333335\n\tassert harmonic_sum(15) == 2.6475\n\tassert harmonic_sum(16) == 2.6483333333333335\n\tassert harmonic_sum(17) == 2.64875\n\tassert harmonic_sum(18) == 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert harmonic_sum(1) == 0\n\tassert harmonic_sum(2) == 1\n\tassert harmonic_sum(3) == 1.5\n\tassert harmonic_sum(4) == 1.8333333333333333\n\tassert harmonic_sum(5) == 2.0833333333333335\n\tassert harmonic_sum(6) == 2.25\n\tassert harmonic_sum(7) == 2.375\n\tassert harmonic_sum(8) == 2.466666666666667\n\tassert harmonic_sum(9) == 2.5333333333333335\n\tassert harmonic_sum(10) == 2.583333333333333\n\tassert harmonic_sum(11) == 2.616666666666667\n\tassert harmonic_sum(12) == 2.6333333333333335\n\tassert harmonic_sum(13) == 2.641666666666667\n\tassert harmonic_sum(14) == 2.6458333333333335\n\tassert harmonic_sum(15) == 2.6475\n\tassert harmonic_sum(16) == 2.6483333333333335\n\tassert harmonic_sum(17) == 2.64875\n\tassert harmonic_sum(18) == 2"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<s>\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\treturn list(string)\n\n\"\"\"\nWrite a python function to check whether a string is empty or not.\n\"\"\"\ndef IsEmpty(string):\n\treturn len(string) == 0\n\n\"\"\"\nWrite a python function to check whether a string is alphanumeric or not.\n\"\"\"\ndef IsAlphaNumeric(string):\n\treturn string.isalnum()\n\n\"\"\"\nWrite a python function to check whether a string is alphabetical or not.\n\"\"\"\ndef IsAlphabetical(string):\n\treturn string.isalpha()\n\n\"\"\"\nWrite a python function to check whether a string is digit or not.\n\"\"\"\ndef IsDigit(string):\n\treturn string.isdigit()\n\n\"\"\"\nWrite a python function to check whether a string is lowercase or not.\n\"\"\"\ndef IsLowerCase(string):\n\treturn string.islower()\n\n\"\"\"\nWrite a python function to check whether a string is uppercase or not.\n\"\"\"\ndef IsUpperCase(string):\n\treturn string.isupper()\n\n\"\"\"\nWrite a python function to check whether a string is titlecase or not.\n\"\"\"\ndef IsTitleCase(string):\n\treturn string.istitle()\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef IsPalindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return list(string)\n\n\"\"\"\nWrite a python function to check whether a string is empty or not.\n\"\"\"\ndef IsEmpty(string):\n\treturn len(string) == 0\n\n\"\"\"\nWrite a python function to check whether a string is alphanumeric or not.\n\"\"\"\ndef IsAlphaNumeric(string):\n\treturn string.isalnum()\n\n\"\"\"\nWrite a python function to check whether a string is alphabetical or not.\n\"\"\"\ndef IsAlphabetical(string):\n\treturn string.isalpha()\n\n\"\"\"\nWrite a python function to check whether a string is digit or not.\n\"\"\"\ndef IsDigit(string):\n\treturn string.isdigit()\n\n\"\"\"\nWrite a python function to check whether a string is lowercase or not.\n\"\"\"\ndef IsLowerCase(string):\n\treturn string.islower()\n\n\"\"\"\nWrite a python function to check whether a string is uppercase or not.\n\"\"\"\ndef IsUpperCase(string):\n\treturn string.isupper()\n\n\"\"\"\nWrite a python function to check whether a string is titlecase or not.\n\"\"\"\ndef IsTitleCase(string):\n\treturn string.istitle()\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef IsPalindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a python function to check whether a string is a pangram or not.\n\"\"\"\ndef IsPangram(string):"}
{"ID": 108, "source": "MBPP:709", "prompt": "\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\t", "predict": "<s>\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\ndef get_unique(test_list):\n\tunique_dict = {}\n\tfor i in test_list:\n\t\tif i not in unique_dict:\n\t\t\tunique_dict[i] = 1\n\t\telse:\n\t\t\tunique_dict[i] += 1\n\treturn unique_dict\n\ntest_list = (1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = (1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,"}
{"ID": 110, "source": "MBPP:711", "prompt": "\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n): \n\teven_product = 1\n\todd_product = 1\n\twhile n > 0:\n\t\tlast_digit = n % 10\n\t\tif last_digit % 2 == 0:\n\t\t\teven_product *= last_digit\n\t\telse:\n\t\t\todd_product *= last_digit\n\t\tn = n // 10\n\treturn even_product == odd_product\n\nprint(product_Equal(123456))\nprint(product_Equal(12345))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(123454))\nprint(product_Equal(123455))\nprint(product_Equal(123456))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(123454))\nprint(product_Equal(123455))\nprint(product_Equal(123456))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(12", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(product_Equal(123456))\nprint(product_Equal(12345))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(123454))\nprint(product_Equal(123455))\nprint(product_Equal(123456))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(123454))\nprint(product_Equal(123455))\nprint(product_Equal(123456))\nprint(product_Equal(123457))\nprint(product_Equal(123458))\nprint(product_Equal(123459))\nprint(product_Equal(123450))\nprint(product_Equal(123451))\nprint(product_Equal(123452))\nprint(product_Equal(123453))\nprint(product_Equal(12"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<s>\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile n % 2 == 0:  \n\t\tcount += 1\n\t\tn = n / 2\n\tfor i in range(3,int(math.sqrt(n))+1,2):  \n\t\twhile n % i== 0:  \n\t\t\tcount += 1\n\t\t\tn = n / i  \n\tif n > 2:  \n\t\tcount += 1\n\treturn count  \n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n / count_Fac(n)\n\treturn count\n\nprint(count_distinct_power_of_prime_factor(12))\nprint(count_distinct_power_of_prime_factor(18))\nprint(count_distinct_power_of_prime_factor(19))\nprint(count_distinct_power_of_prime_factor(20))\nprint(count_distinct_power_of_prime_factor(21))\nprint(count_distinct_power_of_prime_factor(22))\nprint(count_distinct_power_of_prime_factor(23))\nprint(count_distinct_power_of_prime_factor(24))\nprint(count_distinct_power_of_prime_factor(25))\nprint(count_distinct_power_of_prime_factor(26))\nprint(count_distinct_power_of_prime_factor(27))\nprint(count_distinct_power_of_prime_factor(28))\nprint(count_distinct_power_of_prime_factor(29))\nprint(count_distinct_power_of_prime_factor(30))\nprint(count_distinct_power_of_prime_factor(31))\nprint(count_distinct_power_of_prime_factor(32))\nprint(count_distinct_power_of_prime_factor(33))\nprint(count_distinct_power_of_prime_factor(34))\nprint(count_dist", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_distinct_power_of_prime_factor(12))\nprint(count_distinct_power_of_prime_factor(18))\nprint(count_distinct_power_of_prime_factor(19))\nprint(count_distinct_power_of_prime_factor(20))\nprint(count_distinct_power_of_prime_factor(21))\nprint(count_distinct_power_of_prime_factor(22))\nprint(count_distinct_power_of_prime_factor(23))\nprint(count_distinct_power_of_prime_factor(24))\nprint(count_distinct_power_of_prime_factor(25))\nprint(count_distinct_power_of_prime_factor(26))\nprint(count_distinct_power_of_prime_factor(27))\nprint(count_distinct_power_of_prime_factor(28))\nprint(count_distinct_power_of_prime_factor(29))\nprint(count_distinct_power_of_prime_factor(30))\nprint(count_distinct_power_of_prime_factor(31))\nprint(count_distinct_power_of_prime_factor(32))\nprint(count_distinct_power_of_prime_factor(33))\nprint(count_distinct_power_of_prime_factor(34))\nprint(count_dist"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data)/n\n\tsd = 0\n\tfor i in data:\n\t\tsd += (i-mean)**2\n\tsd = (sd/n)**0.5\n\treturn sd\n\n\n\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn ="}
{"ID": 119, "source": "MBPP:720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\t", "predict": "<s>\"\"\"\nWrite a function to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n\treturn test_tup + (test_dict,)\n\n\n\"\"\"\nWrite a function to add a list to the tuple.\n\"\"\"\ndef add_list_to_tuple(test_tup, test_list):\n\treturn test_tup + (test_list,)\n\n\n\"\"\"\nWrite a function to add a string to the tuple.\n\"\"\"\ndef add_str_to_tuple(test_tup, test_str):\n\treturn test_tup + (test_str,)\n\n\n\"\"\"\nWrite a function to add an integer to the tuple.\n\"\"\"\ndef add_int_to_tuple(test_tup, test_int):\n\treturn test_tup + (test_int,)\n\n\n\"\"\"\nWrite a function to add a float to the tuple.\n\"\"\"\ndef add_float_to_tuple(test_tup, test_float):\n\treturn test_tup + (test_float,)\n\n\n\"\"\"\nWrite a function to add a boolean to the tuple.\n\"\"\"\ndef add_bool_to_tuple(test_tup, test_bool):\n\treturn test_tup + (test_bool,)\n\n\n\"\"\"\nWrite a function to add a set to the tuple.\n\"\"\"\ndef add_set_to_tuple(test_tup, test_set):\n\treturn test_tup + (test_set,)\n\n\n\"\"\"\nWrite a function to add a tuple to the tuple.\n\"\"\"\ndef add_tuple_to_tuple(test_tup, test_tuple):\n\treturn test_tup + test_tuple\n\n\n\"\"\"\nWrite a function to add a dictionary to the list.\n\"\"\"\ndef add_dict_to_list(test_list, test_dict):\n\treturn test_list + [test_dict]\n\n\n\"\"\"\nWrite a function to add a tuple to the list.\n\"\"\"\ndef add_tuple_to_list(test_list, test_tuple):\n\treturn test_list + [test_tuple]\n\n\n\"\"\"\nWrite a function to add a string to the list.\n\"\"\"\ndef add_str_to_list(test_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return test_tup + (test_dict,)\n\n\n\"\"\"\nWrite a function to add a list to the tuple.\n\"\"\"\ndef add_list_to_tuple(test_tup, test_list):\n\treturn test_tup + (test_list,)\n\n\n\"\"\"\nWrite a function to add a string to the tuple.\n\"\"\"\ndef add_str_to_tuple(test_tup, test_str):\n\treturn test_tup + (test_str,)\n\n\n\"\"\"\nWrite a function to add an integer to the tuple.\n\"\"\"\ndef add_int_to_tuple(test_tup, test_int):\n\treturn test_tup + (test_int,)\n\n\n\"\"\"\nWrite a function to add a float to the tuple.\n\"\"\"\ndef add_float_to_tuple(test_tup, test_float):\n\treturn test_tup + (test_float,)\n\n\n\"\"\"\nWrite a function to add a boolean to the tuple.\n\"\"\"\ndef add_bool_to_tuple(test_tup, test_bool):\n\treturn test_tup + (test_bool,)\n\n\n\"\"\"\nWrite a function to add a set to the tuple.\n\"\"\"\ndef add_set_to_tuple(test_tup, test_set):\n\treturn test_tup + (test_set,)\n\n\n\"\"\"\nWrite a function to add a tuple to the tuple.\n\"\"\"\ndef add_tuple_to_tuple(test_tup, test_tuple):\n\treturn test_tup + test_tuple\n\n\n\"\"\"\nWrite a function to add a dictionary to the list.\n\"\"\"\ndef add_dict_to_list(test_list, test_dict):\n\treturn test_list + [test_dict]\n\n\n\"\"\"\nWrite a function to add a tuple to the list.\n\"\"\"\ndef add_tuple_to_list(test_list, test_tuple):\n\treturn test_list + [test_tuple]\n\n\n\"\"\"\nWrite a function to add a string to the list.\n\"\"\"\ndef add_str_to_list(test_"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t# Your code here\n\t\n\t# base = 10\n\t# power = 2\n\t\n\t# 10^2 = 100\n\t# 1 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 3\n\t\n\t# 10^3 = 1000\n\t# 1 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 4\n\t\n\t# 10^4 = 10000\n\t# 1 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 5\n\t\n\t# 10^5 = 100000\n\t# 1 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 6\n\t\n\t# 10^6 = 1000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 7\n\t\n\t# 10^7 = 10000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 8\n\t\n\t# 10^8 = 100000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 9\n\t\n\t# 10^9 = 1000000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 10\n\t\n\t# 10^1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Your code here\n\t\n\t# base = 10\n\t# power = 2\n\t\n\t# 10^2 = 100\n\t# 1 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 3\n\t\n\t# 10^3 = 1000\n\t# 1 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 4\n\t\n\t# 10^4 = 10000\n\t# 1 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 5\n\t\n\t# 10^5 = 100000\n\t# 1 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 6\n\t\n\t# 10^6 = 1000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 7\n\t\n\t# 10^7 = 10000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 8\n\t\n\t# 10^8 = 100000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 9\n\t\n\t# 10^9 = 1000000000\n\t# 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n\t\n\t# base = 10\n\t# power = 10\n\t\n\t# 10^1"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "import re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t# your code goes here\n\treturn (n & 1) | ((n & 2) >> 1) | ((n & 4) << 1) | ((n & 8) >> 2) | ((n & 16) << 2) | ((n & 32) >> 3) | ((n & 64) << 3) | ((n & 128) >> 4) | ((n & 256) << 4) | ((n & 512) >> 5) | ((n & 1024) << 5) | ((n & 2048) >> 6) | ((n & 4096) << 6) | ((n & 8192) >> 7) | ((n & 16384) << 7) | ((n & 32768) >> 8) | ((n & 65536) << 8) | ((n & 131072) >> 9) | ((n & 262144) << 9) | ((n & 524288) >> 10) | ((n & 1048576) << 10) | ((n & 2097152) >> 11) | ((n & 4194304) << 11) | ((n & 8388608) >> 12) | ((n & 16777216) << 12) | ((n & 33554432) >> 13) | ((n & 67108864) << 13) | ((n & 134217728) >> 14) | ((n & 268435456) << 14) | ((n & 536870912) >> 15) | ((n & 1073741824) << 15) | ((n & 2147483648) >> 16) | ((n & 4294", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn (n & 1) | ((n & 2) >> 1) | ((n & 4) << 1) | ((n & 8) >> 2) | ((n & 16) << 2) | ((n & 32) >> 3) | ((n & 64) << 3) | ((n & 128) >> 4) | ((n & 256) << 4) | ((n & 512) >> 5) | ((n & 1024) << 5) | ((n & 2048) >> 6) | ((n & 4096) << 6) | ((n & 8192) >> 7) | ((n & 16384) << 7) | ((n & 32768) >> 8) | ((n & 65536) << 8) | ((n & 131072) >> 9) | ((n & 262144) << 9) | ((n & 524288) >> 10) | ((n & 1048576) << 10) | ((n & 2097152) >> 11) | ((n & 4194304) << 11) | ((n & 8388608) >> 12) | ((n & 16777216) << 12) | ((n & 33554432) >> 13) | ((n & 67108864) << 13) | ((n & 134217728) >> 14) | ((n & 268435456) << 14) | ((n & 536870912) >> 15) | ((n & 1073741824) << 15) | ((n & 2147483648) >> 16) | ((n & 4294"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<s>\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\tif len(a) == 0:\n\t\treturn 0\n\tif x < a[0]:\n\t\treturn 0\n\tif x > a[-1]:\n\t\treturn len(a)\n\tif x == a[0]:\n\t\treturn 0\n\tif x == a[-1]:\n\t\treturn len(a) - 1\n\tfor i in range(len(a)):\n\t\tif x > a[i] and x < a[i+1]:\n\t\t\treturn i + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t# your code goes here\n\ti = 1\n\twhile True:\n\t\tif len(str(i*(i+1)//2)) == n:\n\t\t\treturn i\n\t\ti += 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "<s>\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t# TODO: Write your code here\n\tnums_str.sort(key=int)\n\treturn nums_str\n\n\n# Test cases\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"]))\nprint(sort_numeric_strings([\"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \""}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<s>\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\tindex_list = []\n\tfor i in range(len(l1)):\n\t\tif l1[i] == l2[i] == l3[i]:\n\t\t\tindex_list.append(i)\n\treturn index_list\n\n\nif __name__ == '__main__':\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nif __name__ == '__main__':\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t# +? means zero or one\n\treturn re.match(r'a+?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b'.\n\"\"\"\ndef text_match_zero_more(text):\n\t# *? means zero or more\n\treturn re.match(r'a*?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b'.\n\"\"\"\ndef text_match_one_more(text):\n\t# +? means one or more\n\treturn re.match(r'a+?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and one or more 'c'.\n\"\"\"\ndef text_match_zero_one_one_more(text):\n\t# +? means zero or one\n\treturn re.match(r'a+?b+?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and one or more 'c'.\n\"\"\"\ndef text_match_zero_more_one_more(text):\n\t# *? means zero or more\n\treturn re.match(r'a*?b+?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_one_more_zero_more(text):\n\t# +? means one or more\n\treturn re.match(r'a+?b*?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_zero_one_zero_more(text):\n\t# +? means zero or one\n\treturn re.match(r'a+?b*?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_zero_more_zero_more(text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# +? means zero or one\n\treturn re.match(r'a+?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b'.\n\"\"\"\ndef text_match_zero_more(text):\n\t# *? means zero or more\n\treturn re.match(r'a*?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b'.\n\"\"\"\ndef text_match_one_more(text):\n\t# +? means one or more\n\treturn re.match(r'a+?b', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and one or more 'c'.\n\"\"\"\ndef text_match_zero_one_one_more(text):\n\t# +? means zero or one\n\treturn re.match(r'a+?b+?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and one or more 'c'.\n\"\"\"\ndef text_match_zero_more_one_more(text):\n\t# *? means zero or more\n\treturn re.match(r'a*?b+?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_one_more_zero_more(text):\n\t# +? means one or more\n\treturn re.match(r'a+?b*?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_zero_one_zero_more(text):\n\t# +? means zero or one\n\treturn re.match(r'a+?b*?c', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more 'b' and zero or more 'c'.\n\"\"\"\ndef text_match_zero_more_zero_more(text"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\"\"\"\n\tReturns the number of unique sublists within a list.\n\t\"\"\"\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\n\nif __name__ == '__main__':\n\tlist1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tlist1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, "}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\ttry:\n\t\tfloat(num)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\ndef is_precision_2(num):\n\tif is_decimal(num):\n\t\tif len(num.split('.')[1]) == 2:\n\t\t\treturn True\n\treturn False\n\nprint(is_precision_2('1.23'))\nprint(is_precision_2('1.234'))\nprint(is_precision_2('1.2'))\nprint(is_precision_2('1.2345'))\nprint(is_precision_2('1.23456'))\nprint(is_precision_2('1.234567'))\nprint(is_precision_2('1.2345678'))\nprint(is_precision_2('1.23456789'))\nprint(is_precision_2('1.234567890'))\nprint(is_precision_2('1.2345678901'))\nprint(is_precision_2('1.23456789012'))\nprint(is_precision_2('1.234567890123'))\nprint(is_precision_2('1.2345678901234'))\nprint(is_precision_2('1.23456789012345'))\nprint(is_precision_2('1.234567890123456'))\nprint(is_precision_2('1.2345678901234567'))\nprint(is_precision_2('1.23456789012345678'))\nprint(is_precision_2('1.234567890123456789'))\nprint(is_precision_2('1.2345678901234567890'))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_precision_2('1.23'))\nprint(is_precision_2('1.234'))\nprint(is_precision_2('1.2'))\nprint(is_precision_2('1.2345'))\nprint(is_precision_2('1.23456'))\nprint(is_precision_2('1.234567'))\nprint(is_precision_2('1.2345678'))\nprint(is_precision_2('1.23456789'))\nprint(is_precision_2('1.234567890'))\nprint(is_precision_2('1.2345678901'))\nprint(is_precision_2('1.23456789012'))\nprint(is_precision_2('1.234567890123'))\nprint(is_precision_2('1.2345678901234'))\nprint(is_precision_2('1.23456789012345'))\nprint(is_precision_2('1.234567890123456'))\nprint(is_precision_2('1.2345678901234567'))\nprint(is_precision_2('1.23456789012345678'))\nprint(is_precision_2('1.234567890123456789'))\nprint(is_precision_2('1.2345678901234567890'))"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "<s>\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nprint(number_ctr(\"1234567890\"))\nprint(number_ctr(\"1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890a1234567890\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(number_ctr(\"1234567890\"))\nprint(number_ctr(\"1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890a\"))\nprint(number_ctr(\"1234567890a1234567890a1234567890a1234567890a1234567890a1234567890\"))\n"}
{"ID": 164, "source": "MBPP:765", "prompt": "\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find nth polite number.\n\"\"\"\ndef is_polite(n): \n\tif n < 10: \n\t\treturn True\n\telse: \n\t\treturn n % int(str(n)[0]) == 0\n\ndef nth_polite(n): \n\ti = 1\n\twhile n > 0: \n\t\tif is_polite(i): \n\t\t\tn -= 1\n\t\ti += 1\n\treturn i - 1\n\nprint(nth_polite(10))\nprint(nth_polite(100))\nprint(nth_polite(1000))\nprint(nth_polite(10000))\nprint(nth_polite(100000))\nprint(nth_polite(1000000))\nprint(nth_polite(10000000))\nprint(nth_polite(100000000))\nprint(nth_polite(1000000000))\nprint(nth_polite(10000000000))\nprint(nth_polite(100000000000))\nprint(nth_polite(1000000000000))\nprint(nth_polite(10000000000000))\nprint(nth_polite(100000000000000))\nprint(nth_polite(1000000000000000))\nprint(nth_polite(10000000000000000))\nprint(nth_polite(100000000000000000))\nprint(nth_polite(1000000000000000000))\nprint(nth_polite(10000000000000000000))\nprint(nth_polite(100000000000000000000))\nprint(nth_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(nth_polite(10))\nprint(nth_polite(100))\nprint(nth_polite(1000))\nprint(nth_polite(10000))\nprint(nth_polite(100000))\nprint(nth_polite(1000000))\nprint(nth_polite(10000000))\nprint(nth_polite(100000000))\nprint(nth_polite(1000000000))\nprint(nth_polite(10000000000))\nprint(nth_polite(100000000000))\nprint(nth_polite(1000000000000))\nprint(nth_polite(10000000000000))\nprint(nth_polite(100000000000000))\nprint(nth_polite(1000000000000000))\nprint(nth_polite(10000000000000000))\nprint(nth_polite(100000000000000000))\nprint(nth_polite(1000000000000000000))\nprint(nth_polite(10000000000000000000))\nprint(nth_polite(100000000000000000000))\nprint(nth_"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "<s>\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\timport re\n\tregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\tif(re.search(regex,email)): \n\t\treturn True\n\telse: \n\t\treturn False\n\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail\"))\nprint(check_email(\"john.doe@gmail.c\"))\nprint(check_email(\"john.doe@gmail.co\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail\"))\nprint(check_email(\"john.doe@gmail.c\"))\nprint(check_email(\"john.doe@gmail.co\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\nprint(check_email(\"john.doe@gmail.com\"))\n"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "<s>\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor i in range(len(test_str)):\n\t\tif i == 0:\n\t\t\tif test_str[i] in vowels and test_str[i+1] in vowels:\n\t\t\t\tcount += 1\n\t\telif i == len(test_str) - 1:\n\t\t\tif test_str[i] in vowels and test_str[i-1] in vowels:\n\t\t\t\tcount += 1\n\t\telse:\n\t\t\tif test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels('abcd'))\nprint(count_vowels('abcde'))\nprint(count_vowels('abcdef'))\nprint(count_vowels('abcdefg'))\nprint(count_vowels('abcdefgh'))\nprint(count_vowels('abcdefghi'))\nprint(count_vowels('abcdefghij'))\nprint(count_vowels('abcdefghijk'))\nprint(count_vowels('abcdefghijkl'))\nprint(count_vowels('abcdefghijklm'))\nprint(count_vowels('abcdefghijklmn'))\nprint(count_vowels('abcdefghijklmno'))\nprint(count_vowels('abcdefghijklmnop'))\nprint(count_vowels('abcdefghijklmnopq'))\nprint(count_vowels('abcdefghijklmnopqr'))\nprint(count_vowels('abcdefghijklmnopqrs'))\nprint(count_vowels('abcdefghijklmnopqrst'))\nprint(count_vowels('abcdefghijklmnopqrstu'))\nprint(count_vowels('abcdefghijklmnopqrstuv'))\nprint(count_vowels", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_vowels('abcd'))\nprint(count_vowels('abcde'))\nprint(count_vowels('abcdef'))\nprint(count_vowels('abcdefg'))\nprint(count_vowels('abcdefgh'))\nprint(count_vowels('abcdefghi'))\nprint(count_vowels('abcdefghij'))\nprint(count_vowels('abcdefghijk'))\nprint(count_vowels('abcdefghijkl'))\nprint(count_vowels('abcdefghijklm'))\nprint(count_vowels('abcdefghijklmn'))\nprint(count_vowels('abcdefghijklmno'))\nprint(count_vowels('abcdefghijklmnop'))\nprint(count_vowels('abcdefghijklmnopq'))\nprint(count_vowels('abcdefghijklmnopqr'))\nprint(count_vowels('abcdefghijklmnopqrs'))\nprint(count_vowels('abcdefghijklmnopqrst'))\nprint(count_vowels('abcdefghijklmnopqrstu'))\nprint(count_vowels('abcdefghijklmnopqrstuv'))\nprint(count_vowels"}
{"ID": 177, "source": "MBPP:778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\ndef pack_consecutive_duplicates(list1):\n\t\"\"\"\n\tReturns a list of sublists of the given list with consecutive duplicates packed together.\n\t\"\"\"\n\tif len(list1) == 0:\n\t\treturn []\n\telse:\n\t\tsublist = [list1[0]]\n\t\tpacked_list = []\n\t\tfor i in range(1, len(list1)):\n\t\t\tif list1[i] == list1[i-1]:\n\t\t\t\tsublist.append(list1[i])\n\t\t\telse:\n\t\t\t\tpacked_list.append(sublist)\n\t\t\t\tsublist = [list1[i]]\n\t\tpacked_list.append(sublist)\n\t\treturn packed_list\n\n\nif __name__ == '__main__':\n\tprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t\"\"\"\n\tReturns the number of unique sublists in a list.\n\t\"\"\"\n\tunique_list = []\n\tfor sublist in list1:\n\t\tif sublist not in unique_list:\n\t\t\tunique_list.append(sublist)\n\treturn len(unique_list)\n\n\nif __name__ == '__main__':\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 4]]))\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4]]))\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4]]))\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4]]))\n\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3], ["}
{"ID": 180, "source": "MBPP:781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\n\"\"\"\ndef count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif n % i == 0 : \n\t\t\tcount += 1\n\treturn count\n\ndef is_even(n) : \n\tif count_Divisors(n) % 2 == 0 : \n\t\treturn True\n\telse : \n\t\treturn False\n\nprint(is_even(10))\nprint(is_even(11))\nprint(is_even(12))\nprint(is_even(13))\nprint(is_even(14))\nprint(is_even(15))\nprint(is_even(16))\nprint(is_even(17))\nprint(is_even(18))\nprint(is_even(19))\nprint(is_even(20))\nprint(is_even(21))\nprint(is_even(22))\nprint(is_even(23))\nprint(is_even(24))\nprint(is_even(25))\nprint(is_even(26))\nprint(is_even(27))\nprint(is_even(28))\nprint(is_even(29))\nprint(is_even(30))\nprint(is_even(31))\nprint(is_even(32))\nprint(is_even(33))\nprint(is_even(34))\nprint(is_even(35))\nprint(is_even(36))\nprint(is_even(37))\nprint(is_even(38))\nprint(is_even(39))\nprint(is_even(40))\nprint(is_even(41))\nprint(is_even(42))\nprint(is_even(43))\nprint(is_even(44))\nprint(is_even(45))\nprint(is_even(46))\nprint(is_even(47))\nprint(is_even(48))\nprint(is_even(49))\nprint(is_even(50))\nprint(is_even(51))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_even(10))\nprint(is_even(11))\nprint(is_even(12))\nprint(is_even(13))\nprint(is_even(14))\nprint(is_even(15))\nprint(is_even(16))\nprint(is_even(17))\nprint(is_even(18))\nprint(is_even(19))\nprint(is_even(20))\nprint(is_even(21))\nprint(is_even(22))\nprint(is_even(23))\nprint(is_even(24))\nprint(is_even(25))\nprint(is_even(26))\nprint(is_even(27))\nprint(is_even(28))\nprint(is_even(29))\nprint(is_even(30))\nprint(is_even(31))\nprint(is_even(32))\nprint(is_even(33))\nprint(is_even(34))\nprint(is_even(35))\nprint(is_even(36))\nprint(is_even(37))\nprint(is_even(38))\nprint(is_even(39))\nprint(is_even(40))\nprint(is_even(41))\nprint(is_even(42))\nprint(is_even(43))\nprint(is_even(44))\nprint(is_even(45))\nprint(is_even(46))\nprint(is_even(47))\nprint(is_even(48))\nprint(is_even(49))\nprint(is_even(50))\nprint(is_even(51))\nprint"}
{"ID": 182, "source": "MBPP:783", "prompt": "\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert hsv color to rgb color.\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to hsl color.\n\"\"\"\ndef rgb_to_hsl(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert hsl color to rgb color.\n\"\"\"\ndef hsl_to_rgb(h, s, l):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to cmyk color.\n\"\"\"\ndef rgb_to_cmyk(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert cmyk color to rgb color.\n\"\"\"\ndef cmyk_to_rgb(c, m, y, k):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to yuv color.\n\"\"\"\ndef rgb_to_yuv(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert yuv color to rgb color.\n\"\"\"\ndef yuv_to_rgb(y, u, v):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to ycbcr color.\n\"\"\"\ndef rgb_to_ycbcr(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert ycbcr color to rgb color.\n\"\"\"\ndef ycbcr_to_rgb(y, cb, cr):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to xyz color.\n\"\"\"\ndef rgb_to_xyz(r, g, b):\n\t# TODO: Write your code here\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert hsv color to rgb color.\n\"\"\"\ndef hsv_to_rgb(h, s, v):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to hsl color.\n\"\"\"\ndef rgb_to_hsl(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert hsl color to rgb color.\n\"\"\"\ndef hsl_to_rgb(h, s, l):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to cmyk color.\n\"\"\"\ndef rgb_to_cmyk(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert cmyk color to rgb color.\n\"\"\"\ndef cmyk_to_rgb(c, m, y, k):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to yuv color.\n\"\"\"\ndef rgb_to_yuv(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert yuv color to rgb color.\n\"\"\"\ndef yuv_to_rgb(y, u, v):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to ycbcr color.\n\"\"\"\ndef rgb_to_ycbcr(r, g, b):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert ycbcr color to rgb color.\n\"\"\"\ndef ycbcr_to_rgb(y, cb, cr):\n\t# TODO: Write your code here\n\tpass\n\n\n\"\"\"\nWrite a function to convert rgb color to xyz color.\n\"\"\"\ndef rgb_to_xyz(r, g, b):"}
{"ID": 185, "source": "MBPP:786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\t", "predict": "<s>\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\tif len(a) == 0:\n\t\treturn 0\n\tif x > a[-1]:\n\t\treturn len(a)\n\tif x < a[0]:\n\t\treturn 0\n\tif x == a[0]:\n\t\treturn 1\n\tif x == a[-1]:\n\t\treturn len(a)\n\tif x in a:\n\t\treturn a.index(x) + 1\n\tfor i in range(len(a)):\n\t\tif a[i] < x and a[i+1] > x:\n\t\t\treturn i + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a'.\n\"\"\"\ndef text_match_four(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}a', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's.\n\"\"\"\ndef text_match_five(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a'.\n\"\"\"\ndef text_match_six(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}a', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a' and then three 'b's.\n\"\"\"\ndef text_match_seven(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}aab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a' and then three 'b's and then an 'a'.\n\"\"\"\ndef text_match_eight(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a'.\n\"\"\"\ndef text_match_four(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}a', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's.\n\"\"\"\ndef text_match_five(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a'.\n\"\"\"\ndef text_match_six(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}a', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a' and then three 'b's.\n\"\"\"\ndef text_match_seven(text):\n\t# + means one or more\n\t# {3} means exactly 3\n\treturn bool(re.search(r'ab{3}aab{3}aab{3}', text))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b's and then an 'a' and then three 'b's and then an 'a' and then three 'b's and then an 'a'.\n\"\"\"\ndef text_match_eight(text):"}
{"ID": 192, "source": "MBPP:793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr,x,n):\n\tl=0\n\th=n-1\n\twhile l<=h:\n\t\tmid=(l+h)//2\n\t\tif arr[mid]==x:\n\t\t\tif mid==n-1 or arr[mid+1]>x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tl=mid+1\n\t\telif arr[mid]<x:\n\t\t\tl=mid+1\n\t\telse:\n\t\t\th=mid-1\n\treturn -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = re.compile(r'a.*b')\n\treturn pattern.match(text)\n\nprint(text_starta_endb('abc'))\nprint(text_starta_endb('ab'))\nprint(text_starta_endb('aab'))\nprint(text_starta_endb('aac'))\nprint(text_starta_endb('aabbb'))\nprint(text_starta_endb('a'))\nprint(text_starta_endb('b'))\nprint(text_starta_endb('c'))\nprint(text_starta_endb('aa'))\nprint(text_starta_endb('bb'))\nprint(text_starta_endb('cc'))\nprint(text_starta_endb('aaa'))\nprint(text_starta_endb('bbb'))\nprint(text_starta_endb('ccc'))\nprint(text_starta_endb('aaaa'))\nprint(text_starta_endb('bbbb'))\nprint(text_starta_endb('cccc'))\nprint(text_starta_endb('aaaaa'))\nprint(text_starta_endb('bbbbb'))\nprint(text_starta_endb('ccccc'))\nprint(text_starta_endb('aaaaaa'))\nprint(text_starta_endb('bbbbbb'))\nprint(text_starta_endb('cccccc'))\nprint(text_starta_endb('aaaaaaa'))\nprint(text_starta_endb('bbbbbbb'))\nprint(text_starta_endb('ccccccc'))\nprint(text_starta_endb('aaaaaaaa'))\nprint(text_starta_endb('bbbbbbbb'))\nprint(text_starta_endb('cccccccc'))\nprint(text_starta_endb('aaaaaaaaa'))\nprint(text_starta_endb('bbbbbbbbb'))\nprint(text_starta_endb('ccccccccc'))\nprint(text_starta_endb('aaaaaaaaaa'))\nprint(text_starta_endb('bbbbbbbb", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(text_starta_endb('abc'))\nprint(text_starta_endb('ab'))\nprint(text_starta_endb('aab'))\nprint(text_starta_endb('aac'))\nprint(text_starta_endb('aabbb'))\nprint(text_starta_endb('a'))\nprint(text_starta_endb('b'))\nprint(text_starta_endb('c'))\nprint(text_starta_endb('aa'))\nprint(text_starta_endb('bb'))\nprint(text_starta_endb('cc'))\nprint(text_starta_endb('aaa'))\nprint(text_starta_endb('bbb'))\nprint(text_starta_endb('ccc'))\nprint(text_starta_endb('aaaa'))\nprint(text_starta_endb('bbbb'))\nprint(text_starta_endb('cccc'))\nprint(text_starta_endb('aaaaa'))\nprint(text_starta_endb('bbbbb'))\nprint(text_starta_endb('ccccc'))\nprint(text_starta_endb('aaaaaa'))\nprint(text_starta_endb('bbbbbb'))\nprint(text_starta_endb('cccccc'))\nprint(text_starta_endb('aaaaaaa'))\nprint(text_starta_endb('bbbbbbb'))\nprint(text_starta_endb('ccccccc'))\nprint(text_starta_endb('aaaaaaaa'))\nprint(text_starta_endb('bbbbbbbb'))\nprint(text_starta_endb('cccccccc'))\nprint(text_starta_endb('aaaaaaaaa'))\nprint(text_starta_endb('bbbbbbbbb'))\nprint(text_starta_endb('ccccccccc'))\nprint(text_starta_endb('aaaaaaaaaa'))\nprint(text_starta_endb('bbbbbbbb"}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\theap = []\n\tfor item in items:\n\t\tif len(heap) < n:\n\t\t\theapq.heappush(heap,item)\n\t\telse:\n\t\t\tif item[1] < heap[0][1]:\n\t\t\t\theapq.heappop(heap)\n\t\t\t\theapq.heappush(heap,item)\n\treturn heap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<s>\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t\"\"\"\n\tReturns the number of equal numbers from three given integers.\n\t\"\"\"\n\tif x == y == z:\n\t\treturn 3\n\telif x == y or x == z or y == z:\n\t\treturn 2\n\telse:\n\t\treturn 0\n\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,3,3))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(3,3,3))\nprint(test_three_equal(3,3,1))\nprint(test_three_equal(3,1,3))\nprint(test_three_equal(3,1,1))\nprint(test_three_equal(1,3,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(2,2,3))\nprint(test_three_equal(2,3,3))\nprint(test_three_equal(2,3,1))\nprint(test_three_equal(2,1,3))\nprint(test_three_equal(3,3,2))\nprint(test_three_equal(3,2,2))\nprint(test_three_equal(3,2,3))\nprint(test_three_equal(3,2,1))\nprint(test_three_equal(3,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,3,2))\nprint(test_three_equal(1,3,3))\nprint(test_three_equal(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,3))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,3,3))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(3,3,3))\nprint(test_three_equal(3,3,1))\nprint(test_three_equal(3,1,3))\nprint(test_three_equal(3,1,1))\nprint(test_three_equal(1,3,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(2,2,3))\nprint(test_three_equal(2,3,3))\nprint(test_three_equal(2,3,1))\nprint(test_three_equal(2,1,3))\nprint(test_three_equal(3,3,2))\nprint(test_three_equal(3,2,2))\nprint(test_three_equal(3,2,3))\nprint(test_three_equal(3,2,1))\nprint(test_three_equal(3,1,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,3,2))\nprint(test_three_equal(1,3,3))\nprint(test_three_equal(1"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\tif n < 0 :\n\t\treturn False\n\tif n == 0 :\n\t\treturn True\n\tif n == 1 :\n\t\treturn True\n\tif n == 4 :\n\t\treturn True\n\tif n == 9 :\n\t\treturn True\n\tif n == 16 :\n\t\treturn True\n\tif n == 25 :\n\t\treturn True\n\tif n == 36 :\n\t\treturn True\n\tif n == 49 :\n\t\treturn True\n\tif n == 64 :\n\t\treturn True\n\tif n == 81 :\n\t\treturn True\n\tif n == 100 :\n\t\treturn True\n\tif n == 121 :\n\t\treturn True\n\tif n == 144 :\n\t\treturn True\n\tif n == 169 :\n\t\treturn True\n\tif n == 196 :\n\t\treturn True\n\tif n == 225 :\n\t\treturn True\n\tif n == 256 :\n\t\treturn True\n\tif n == 289 :\n\t\treturn True\n\tif n == 324 :\n\t\treturn True\n\tif n == 361 :\n\t\treturn True\n\tif n == 400 :\n\t\treturn True\n\tif n == 441 :\n\t\treturn True\n\tif n == 484 :\n\t\treturn True\n\tif n == 529 :\n\t\treturn True\n\tif n == 576 :\n\t\treturn True\n\tif n == 625 :\n\t\treturn True\n\tif n == 676 :\n\t\treturn True\n\tif n == 729 :\n\t\treturn True\n\tif n == 784 :\n\t\treturn True\n\tif n == 841 :\n\t\treturn True\n\tif n == 900 :\n\t\treturn True\n\tif n == 961 :\n\t\treturn True\n\tif n == 1024 :\n\t\treturn True\n\tif n == 1089 :\n\t\treturn True\n\tif", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "if n < 0 :\n\t\treturn False\n\tif n == 0 :\n\t\treturn True\n\tif n == 1 :\n\t\treturn True\n\tif n == 4 :\n\t\treturn True\n\tif n == 9 :\n\t\treturn True\n\tif n == 16 :\n\t\treturn True\n\tif n == 25 :\n\t\treturn True\n\tif n == 36 :\n\t\treturn True\n\tif n == 49 :\n\t\treturn True\n\tif n == 64 :\n\t\treturn True\n\tif n == 81 :\n\t\treturn True\n\tif n == 100 :\n\t\treturn True\n\tif n == 121 :\n\t\treturn True\n\tif n == 144 :\n\t\treturn True\n\tif n == 169 :\n\t\treturn True\n\tif n == 196 :\n\t\treturn True\n\tif n == 225 :\n\t\treturn True\n\tif n == 256 :\n\t\treturn True\n\tif n == 289 :\n\t\treturn True\n\tif n == 324 :\n\t\treturn True\n\tif n == 361 :\n\t\treturn True\n\tif n == 400 :\n\t\treturn True\n\tif n == 441 :\n\t\treturn True\n\tif n == 484 :\n\t\treturn True\n\tif n == 529 :\n\t\treturn True\n\tif n == 576 :\n\t\treturn True\n\tif n == 625 :\n\t\treturn True\n\tif n == 676 :\n\t\treturn True\n\tif n == 729 :\n\t\treturn True\n\tif n == 784 :\n\t\treturn True\n\tif n == 841 :\n\t\treturn True\n\tif n == 900 :\n\t\treturn True\n\tif n == 961 :\n\t\treturn True\n\tif n == 1024 :\n\t\treturn True\n\tif n == 1089 :\n\t\treturn True"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = []\n\tfor l in lists:\n\t\tsum = 0\n\t\tfor i in l:\n\t\t\tsum += i\n\t\tif sum > max_sum:\n\t\t\tmax_sum = sum\n\t\t\tmax_list = l\n\treturn max_list\n\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_sum_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<s>\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t# your code here\n\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in test_str:\n\t\tif i.isupper():\n\t\t\tcurrent_run += 1\n\t\telse:\n\t\t\tcurrent_run = 0\n\t\tif current_run > max_run:\n\t\t\tmax_run = current_run\n\treturn max_run\n\nprint(max_run_uppercase(\"abcdEfGhIJKL\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmno\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRST\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWX\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234567890\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@#$%^&*()_+\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@#$%^&*()_+ABCD\"))\nprint(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@#$%^&*()_+ABCDabcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_run_uppercase(\"abcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@#$%^&*()_+ABCDabcdEfGhIJKLmnoPQRSTuVWXyZ1234567890-=!@"}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\tfor i in nums:\n\t\tif i%2 != 0:\n\t\t\treturn i\n\treturn None\n\nprint(first_odd([1,2,3,4,5,6,7,8,9,10]))\nprint(first_odd([2,4,6,8,10]))\nprint(first_odd([1,3,5,7,9]))\nprint(first_odd([2,4,6,8,10,11]))\nprint(first_odd([2,4,6,8,10,12]))\nprint(first_odd([2,4,6,8,10,13]))\nprint(first_odd([2,4,6,8,10,14]))\nprint(first_odd([2,4,6,8,10,15]))\nprint(first_odd([2,4,6,8,10,16]))\nprint(first_odd([2,4,6,8,10,17]))\nprint(first_odd([2,4,6,8,10,18]))\nprint(first_odd([2,4,6,8,10,19]))\nprint(first_odd([2,4,6,8,10,20]))\nprint(first_odd([2,4,6,8,10,21]))\nprint(first_odd([2,4,6,8,10,22]))\nprint(first_odd([2,4,6,8,10,23]))\nprint(first_odd([2,4,6,8,10,24]))\nprint(first_odd([2,4,6,8,10,25]))\nprint(first_odd([2,4,6,8,10,26]))\nprint(first_odd([2,4,6,8,10,27]))\nprint(first_odd([2,4,6,8,10,28]))\nprint(first_odd([2,4,6,8,10,29]))\nprint(first_odd([2,4,6,8,10,30]))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_odd([1,2,3,4,5,6,7,8,9,10]))\nprint(first_odd([2,4,6,8,10]))\nprint(first_odd([1,3,5,7,9]))\nprint(first_odd([2,4,6,8,10,11]))\nprint(first_odd([2,4,6,8,10,12]))\nprint(first_odd([2,4,6,8,10,13]))\nprint(first_odd([2,4,6,8,10,14]))\nprint(first_odd([2,4,6,8,10,15]))\nprint(first_odd([2,4,6,8,10,16]))\nprint(first_odd([2,4,6,8,10,17]))\nprint(first_odd([2,4,6,8,10,18]))\nprint(first_odd([2,4,6,8,10,19]))\nprint(first_odd([2,4,6,8,10,20]))\nprint(first_odd([2,4,6,8,10,21]))\nprint(first_odd([2,4,6,8,10,22]))\nprint(first_odd([2,4,6,8,10,23]))\nprint(first_odd([2,4,6,8,10,24]))\nprint(first_odd([2,4,6,8,10,25]))\nprint(first_odd([2,4,6,8,10,26]))\nprint(first_odd([2,4,6,8,10,27]))\nprint(first_odd([2,4,6,8,10,28]))\nprint(first_odd([2,4,6,8,10,29]))\nprint(first_odd([2,4,6,8,10,30]))\n"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "<s>\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\treturn a,b,c,d\n\ndef repeat_elements(elements):\n\tfor i in elements:\n\t\tfor j in range(i[1]):\n\t\t\tprint(i[0],end=\" \")\n\tprint()\n\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "repeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,4))\nrepeat_elements(count_variable(1,2,3,"}
{"ID": 210, "source": "MBPP:811", "prompt": "\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n\tif len(test_list1) != len(test_list2):\n\t\treturn False\n\tfor i in range(len(test_list1)):\n\t\tif test_list1[i] != test_list2[i]:\n\t\t\treturn False\n\treturn True\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6), (7,8)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,7)]\nprint(check_identical(test_list1, test_list2))\n\ntest_list1"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<s>\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t# Your code here\n\treturn street.replace(\"road\", \"rd.\")\n\nprint(road_rd(\"road\"))\nprint(road_rd(\"road road road\"))\nprint(road_rd(\"road road road road\"))\nprint(road_rd(\"road road road road road\"))\nprint(road_rd(\"road road road road road road\"))\nprint(road_rd(\"road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(road_rd(\"road\"))\nprint(road_rd(\"road road road\"))\nprint(road_rd(\"road road road road\"))\nprint(road_rd(\"road road road road road\"))\nprint(road_rd(\"road road road road road road\"))\nprint(road_rd(\"road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road road road road road road road road road road road road road road road road road road road\"))\nprint(road_rd(\"road road road road road road"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "<s>\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tcount += 1\n\treturn count\n\nprint(lower_ctr(\"Hello World\"))\nprint(lower_ctr(\"Hello world\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(lower_ctr(\"Hello World\"))\nprint(lower_ctr(\"Hello world\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello World!\"))\nprint(lower_ctr(\"Hello"}
{"ID": 218, "source": "MBPP:819", "prompt": "\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n\tcount = 0\n\tfor i in range(len(lists)-1):\n\t\tif lists[i] == lists[i+1]:\n\t\t\tcount += 1\n\treturn count\n\n\nprint(count_duplic([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_duplic([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<s>\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\tif len(p) < 8:\n\t\treturn False\n\tif not any(char.isdigit() for char in p):\n\t\treturn False\n\tif not any(char.isupper() for char in p):\n\t\treturn False\n\tif not any(char.islower() for char in p):\n\t\treturn False\n\treturn True\n\nprint(pass_validity(\"Abc1234\"))\nprint(pass_validity(\"Abc12345\"))\nprint(pass_validity(\"Abc123456\"))\nprint(pass_validity(\"Abc1234567\"))\nprint(pass_validity(\"Abc12345678\"))\nprint(pass_validity(\"Abc123456789\"))\nprint(pass_validity(\"Abc1234567890\"))\nprint(pass_validity(\"Abc12345678901\"))\nprint(pass_validity(\"Abc123456789012\"))\nprint(pass_validity(\"Abc1234567890123\"))\nprint(pass_validity(\"Abc12345678901234\"))\nprint(pass_validity(\"Abc123456789012345\"))\nprint(pass_validity(\"Abc1234567890123456\"))\nprint(pass_validity(\"Abc12345678901234567\"))\nprint(pass_validity(\"Abc123456789012345678\"))\nprint(pass_validity(\"Abc1234567890123456789\"))\nprint(pass_validity(\"Abc12345678901234567890\"))\nprint(pass_validity(\"Abc123456789012345678901\"))\nprint(pass_validity", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(pass_validity(\"Abc1234\"))\nprint(pass_validity(\"Abc12345\"))\nprint(pass_validity(\"Abc123456\"))\nprint(pass_validity(\"Abc1234567\"))\nprint(pass_validity(\"Abc12345678\"))\nprint(pass_validity(\"Abc123456789\"))\nprint(pass_validity(\"Abc1234567890\"))\nprint(pass_validity(\"Abc12345678901\"))\nprint(pass_validity(\"Abc123456789012\"))\nprint(pass_validity(\"Abc1234567890123\"))\nprint(pass_validity(\"Abc12345678901234\"))\nprint(pass_validity(\"Abc123456789012345\"))\nprint(pass_validity(\"Abc1234567890123456\"))\nprint(pass_validity(\"Abc12345678901234567\"))\nprint(pass_validity(\"Abc123456789012345678\"))\nprint(pass_validity(\"Abc1234567890123456789\"))\nprint(pass_validity(\"Abc12345678901234567890\"))\nprint(pass_validity(\"Abc123456789012345678901\"))\nprint(pass_validity"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<s>\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\timport re\n\tif re.match(sample, string) : \n\t\treturn True\n\telse : \n\t\treturn False\n\nprint(check_substring(\"Hello World\", \"Hello\"))\nprint(check_substring(\"Hello World\", \"World\"))\nprint(check_substring(\"Hello World\", \"He\"))\nprint(check_substring(\"Hello World\", \"H\"))\nprint(check_substring(\"Hello World\", \"ello\"))\nprint(check_substring(\"Hello World\", \"ello World\"))\nprint(check_substring(\"Hello World\", \"o World\"))\nprint(check_substring(\"Hello World\", \"World\"))\nprint(check_substring(\"Hello World\", \"d\"))\nprint(check_substring(\"Hello World\", \"Hello World\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_substring(\"Hello World\", \"Hello\"))\nprint(check_substring(\"Hello World\", \"World\"))\nprint(check_substring(\"Hello World\", \"He\"))\nprint(check_substring(\"Hello World\", \"H\"))\nprint(check_substring(\"Hello World\", \"ello\"))\nprint(check_substring(\"Hello World\", \"ello World\"))\nprint(check_substring(\"Hello World\", \"o World\"))\nprint(check_substring(\"Hello World\", \"World\"))\nprint(check_substring(\"Hello World\", \"d\"))\nprint(check_substring(\"Hello World\", \"Hello World\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint(check_substring(\"Hello World\", \"Hello World!\"))\nprint("}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "<s>\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t# your code goes here\n\t\n\t# return the second most frequent string\n\treturn \"\"\n\n\nif __name__ == '__main__':\n\tinput = [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tinput = [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \""}
{"ID": 229, "source": "MBPP:830", "prompt": "\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t", "predict": "<s>\"\"\"\nWrite a function to round up a number to specific digits.\n\"\"\"\ndef round_up(a, digits):\n\t\"\"\"\n\tRound up a number to specific digits.\n\t\"\"\"\n\tif digits == 0:\n\t\treturn int(a)\n\telse:\n\t\treturn round(a, digits - int(str(a)[::-1].find('.') + 1))\n\n\nif __name__ == '__main__':\n\tprint(round_up(1.23456789, 2))\n\tprint(round_up(1.23456789, 3))\n\tprint(round_up(1.23456789, 4))\n\tprint(round_up(1.23456789, 5))\n\tprint(round_up(1.23456789, 6))\n\tprint(round_up(1.23456789, 7))\n\tprint(round_up(1.23456789, 8))\n\tprint(round_up(1.23456789, 9))\n\tprint(round_up(1.23456789, 10))\n\tprint(round_up(1.23456789, 11))\n\tprint(round_up(1.23456789, 12))\n\tprint(round_up(1.23456789, 13))\n\tprint(round_up(1.23456789, 14))\n\tprint(round_up(1.23456789, 15))\n\tprint(round_up(1.23456789, 16))\n\tprint(round_up(1.23456789, 17))\n\tprint(round_up(1.23456789, 18))\n\tprint(round_up(1.23456789, 19))\n\tprint(round_up(1.23456789, 20))\n\tprint(round_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(round_up(1.23456789, 2))\n\tprint(round_up(1.23456789, 3))\n\tprint(round_up(1.23456789, 4))\n\tprint(round_up(1.23456789, 5))\n\tprint(round_up(1.23456789, 6))\n\tprint(round_up(1.23456789, 7))\n\tprint(round_up(1.23456789, 8))\n\tprint(round_up(1.23456789, 9))\n\tprint(round_up(1.23456789, 10))\n\tprint(round_up(1.23456789, 11))\n\tprint(round_up(1.23456789, 12))\n\tprint(round_up(1.23456789, 13))\n\tprint(round_up(1.23456789, 14))\n\tprint(round_up(1.23456789, 15))\n\tprint(round_up(1.23456789, 16))\n\tprint(round_up(1.23456789, 17))\n\tprint(round_up(1.23456789, 18))\n\tprint(round_up(1.23456789, 19))\n\tprint(round_up(1.23456789, 20))\n\tprint(round_"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<s>\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\timport re\n\tmax_num = 0\n\tfor i in re.findall(r'\\d+', input):\n\t\tif int(i) > max_num:\n\t\t\tmax_num = int(i)\n\treturn max_num\n\nprint(extract_max(\"123456789\"))\nprint(extract_max(\"123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_max(\"123456789\"))\nprint(extract_max(\"123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"))\nprint(extract_max(\"123456789 123456789 123456789 "}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\nprint(slope(1,2,3,6))\nprint(slope(1,2,3,8))\nprint(slope(1,2,3,10))\nprint(slope(1,2,3,12))\nprint(slope(1,2,3,14))\nprint(slope(1,2,3,16))\nprint(slope(1,2,3,18))\nprint(slope(1,2,3,20))\nprint(slope(1,2,3,22))\nprint(slope(1,2,3,24))\nprint(slope(1,2,3,26))\nprint(slope(1,2,3,28))\nprint(slope(1,2,3,30))\nprint(slope(1,2,3,32))\nprint(slope(1,2,3,34))\nprint(slope(1,2,3,36))\nprint(slope(1,2,3,38))\nprint(slope(1,2,3,40))\nprint(slope(1,2,3,42))\nprint(slope(1,2,3,44))\nprint(slope(1,2,3,46))\nprint(slope(1,2,3,48))\nprint(slope(1,2,3,50))\nprint(slope(1,2,3,52))\nprint(slope(1,2,3,54))\nprint(slope(1,2,3,56))\nprint(slope(1,2,3,58))\nprint(slope(1,2,3,60))\nprint(slope(1,2,3,62))\nprint(slope(1,2,3,64))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(slope(1,2,3,4))\nprint(slope(1,2,3,6))\nprint(slope(1,2,3,8))\nprint(slope(1,2,3,10))\nprint(slope(1,2,3,12))\nprint(slope(1,2,3,14))\nprint(slope(1,2,3,16))\nprint(slope(1,2,3,18))\nprint(slope(1,2,3,20))\nprint(slope(1,2,3,22))\nprint(slope(1,2,3,24))\nprint(slope(1,2,3,26))\nprint(slope(1,2,3,28))\nprint(slope(1,2,3,30))\nprint(slope(1,2,3,32))\nprint(slope(1,2,3,34))\nprint(slope(1,2,3,36))\nprint(slope(1,2,3,38))\nprint(slope(1,2,3,40))\nprint(slope(1,2,3,42))\nprint(slope(1,2,3,44))\nprint(slope(1,2,3,46))\nprint(slope(1,2,3,48))\nprint(slope(1,2,3,50))\nprint(slope(1,2,3,52))\nprint(slope(1,2,3,54))\nprint(slope(1,2,3,56))\nprint(slope(1,2,3,58))\nprint(slope(1,2,3,60))\nprint(slope(1,2,3,62))\nprint(slope(1,2,3,64))\nprint("}
{"ID": 241, "source": "MBPP:842", "prompt": "\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n\tres = 0\n\tfor i in range(0, arr_size):\n\t\tres = res ^ arr[i]\n\treturn res\n\n\narr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, "}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\todd = [i for i in range(n) if i%2 != 0]\n\teven = [i for i in range(n) if i%2 == 0]\n\todd.extend(even)\n\treturn odd[k-1]\n\nprint(get_Number(5, 3))\nprint(get_Number(6, 3))\nprint(get_Number(6, 4))\nprint(get_Number(6, 5))\nprint(get_Number(6, 6))\nprint(get_Number(6, 7))\nprint(get_Number(6, 8))\nprint(get_Number(6, 9))\nprint(get_Number(6, 10))\nprint(get_Number(6, 11))\nprint(get_Number(6, 12))\nprint(get_Number(6, 13))\nprint(get_Number(6, 14))\nprint(get_Number(6, 15))\nprint(get_Number(6, 16))\nprint(get_Number(6, 17))\nprint(get_Number(6, 18))\nprint(get_Number(6, 19))\nprint(get_Number(6, 20))\nprint(get_Number(6, 21))\nprint(get_Number(6, 22))\nprint(get_Number(6, 23))\nprint(get_Number(6, 24))\nprint(get_Number(6, 25))\nprint(get_Number(6, 26))\nprint(get_Number(6, 27))\nprint(get_Number(6, 28))\nprint(get_Number(6, 29))\nprint(get_Number(6, 30))\nprint(get_Number(6, 31))\nprint(get_Number(6, 32))\nprint(get_Number(6, 33))\nprint(get_Number(6, 34))\nprint(get_Number(6, 35))\nprint(get_Number(6, 36))\nprint(get_Number(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(get_Number(5, 3))\nprint(get_Number(6, 3))\nprint(get_Number(6, 4))\nprint(get_Number(6, 5))\nprint(get_Number(6, 6))\nprint(get_Number(6, 7))\nprint(get_Number(6, 8))\nprint(get_Number(6, 9))\nprint(get_Number(6, 10))\nprint(get_Number(6, 11))\nprint(get_Number(6, 12))\nprint(get_Number(6, 13))\nprint(get_Number(6, 14))\nprint(get_Number(6, 15))\nprint(get_Number(6, 16))\nprint(get_Number(6, 17))\nprint(get_Number(6, 18))\nprint(get_Number(6, 19))\nprint(get_Number(6, 20))\nprint(get_Number(6, 21))\nprint(get_Number(6, 22))\nprint(get_Number(6, 23))\nprint(get_Number(6, 24))\nprint(get_Number(6, 25))\nprint(get_Number(6, 26))\nprint(get_Number(6, 27))\nprint(get_Number(6, 28))\nprint(get_Number(6, 29))\nprint(get_Number(6, 30))\nprint(get_Number(6, 31))\nprint(get_Number(6, 32))\nprint(get_Number(6, 33))\nprint(get_Number(6, 34))\nprint(get_Number(6, 35))\nprint(get_Number(6, 36))\nprint(get_Number("}
{"ID": 253, "source": "MBPP:854", "prompt": "\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\t", "predict": "<s>\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\ndef raw_heap(rawheap):\n\tfor i in range(len(rawheap)-1, 0, -1):\n\t\tparent = (i-1)//2\n\t\tif rawheap[parent] < rawheap[i]:\n\t\t\trawheap[parent], rawheap[i] = rawheap[i], rawheap[parent]\n\treturn rawheap\n\ndef heap_sort(rawheap):\n\tfor i in range(len(rawheap)-1, 0, -1):\n\t\tparent = (i-1)//2\n\t\tif rawheap[parent] < rawheap[i]:\n\t\t\trawheap[parent], rawheap[i] = rawheap[i], rawheap[parent]\n\treturn rawheap\n\ndef heap_insert(rawheap, value):\n\trawheap.append(value)\n\tparent = (len(rawheap)-1)//2\n\twhile parent >= 0:\n\t\tif rawheap[parent] < rawheap[len(rawheap)-1]:\n\t\t\trawheap[parent], rawheap[len(rawheap)-1] = rawheap[len(rawheap)-1], rawheap[parent]\n\t\tparent = (parent-1)//2\n\treturn rawheap\n\ndef heap_delete(rawheap, value):\n\tif value in rawheap:\n\t\trawheap.remove(value)\n\t\tparent = (len(rawheap)-1)//2\n\t\twhile parent >= 0:\n\t\t\tif rawheap[parent] < rawheap[len(rawheap)-1]:\n\t\t\t\trawheap[parent], rawheap[len(rawheap)-1] = rawheap[len(rawheap)-1], rawheap[parent]\n\t\t\tparent = (parent-1)//2\n\treturn rawheap\n\ndef heap_search(rawheap, value):\n\tif value in rawheap:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef heap_max(rawheap):\n\treturn rawheap[0]\n\ndef heap_min", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\trawheap[parent], rawheap[i] = rawheap[i], rawheap[parent]\n\treturn rawheap\n\ndef heap_insert(rawheap, value):\n\trawheap.append(value)\n\tparent = (len(rawheap)-1)//2\n\twhile parent >= 0:\n\t\tif rawheap[parent] < rawheap[len(rawheap)-1]:\n\t\t\trawheap[parent], rawheap[len(rawheap)-1] = rawheap[len(rawheap)-1], rawheap[parent]\n\t\tparent = (parent-1)//2\n\treturn rawheap\n\ndef heap_delete(rawheap, value):\n\tif value in rawheap:\n\t\trawheap.remove(value)\n\t\tparent = (len(rawheap)-1)//2\n\t\twhile parent >= 0:\n\t\t\tif rawheap[parent] < rawheap[len(rawheap)-1]:\n\t\t\t\trawheap[parent], rawheap[len(rawheap)-1] = rawheap[len(rawheap)-1], rawheap[parent]\n\t\t\tparent = (parent-1)//2\n\treturn rawheap\n\ndef heap_search(rawheap, value):\n\tif value in rawheap:\n\t\treturn True\n\telse:"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s>\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count**2\n\nprint(count_list([[1,2,3], [4,5,6], [7,8,9]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24], [25,26,27]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_list([[1,2,3], [4,5,6], [7,8,9]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24], [25,26,27]]))\nprint(count_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [1"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "<s>\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\treturn list(filter(lambda x:sorted(x)==sorted(str),texts))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\treturn sorted(word_count,key=word_count.get,reverse=True)[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\tif len(str1)%len(str2)==0:\n\t\tcount=0\n\t\tfor i in range(0,len(str1),len(str2)):\n\t\t\tif str1[i:i+len(str2)]==str2:\n\t\t\t\tcount+=1\n\t\tif count==len(str1)/len(str2):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\nprint check_Concat(\"abcd\",\"ab\")\nprint check_Concat(\"abcd\",\"abcd\")\nprint check_Concat(\"abcd\",\"abab\")\nprint check_Concat(\"abcd\",\"ababab\")\nprint check_Concat(\"abcd\",\"abababab\")\nprint check_Concat(\"abcd\",\"ababababab\")\nprint check_Concat(\"abcd\",\"abababababab\")\nprint check_Concat(\"abcd\",\"ababababababab\")\nprint check_Concat(\"abcd\",\"abababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababab", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print check_Concat(\"abcd\",\"ab\")\nprint check_Concat(\"abcd\",\"abcd\")\nprint check_Concat(\"abcd\",\"abab\")\nprint check_Concat(\"abcd\",\"ababab\")\nprint check_Concat(\"abcd\",\"abababab\")\nprint check_Concat(\"abcd\",\"ababababab\")\nprint check_Concat(\"abcd\",\"abababababab\")\nprint check_Concat(\"abcd\",\"ababababababab\")\nprint check_Concat(\"abcd\",\"abababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababababababababababababab\")\nprint check_Concat(\"abcd\",\"abababababababababababababababababab\")\nprint check_Concat(\"abcd\",\"ababababababab"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\treturn ''.join(sorted(str))\n\nprint(sort_String(\"Hello\"))\nprint(sort_String(\"World\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sort_String(\"Hello\"))\nprint(sort_String(\"World\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python\"))\nprint(sort_String(\"Programming\"))\nprint(sort_String(\"Language\"))\nprint(sort_String(\"Python"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a.*b')\n\treturn pattern.match(text)\n\nprint(text_match('abc'))\nprint(text_match('abb'))\nprint(text_match('ab'))\nprint(text_match('aab'))\nprint(text_match('aabb'))\nprint(text_match('aabbb'))\nprint(text_match('aabbbb'))\nprint(text_match('aabbbbb'))\nprint(text_match('aabbbbbb'))\nprint(text_match('aabbbbbbb'))\nprint(text_match('aabbbbbbbb'))\nprint(text_match('aabbbbbbbbb'))\nprint(text_match('aabbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('a", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(text_match('abc'))\nprint(text_match('abb'))\nprint(text_match('ab'))\nprint(text_match('aab'))\nprint(text_match('aabb'))\nprint(text_match('aabbb'))\nprint(text_match('aabbbb'))\nprint(text_match('aabbbbb'))\nprint(text_match('aabbbbbb'))\nprint(text_match('aabbbbbbb'))\nprint(text_match('aabbbbbbbb'))\nprint(text_match('aabbbbbbbbb'))\nprint(text_match('aabbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('a"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\tfor i in range(l,r+1): \n\t\tif (n & (1 << i)) == 0: \n\t\t\treturn False\n\treturn True\n\n# Driver code \nn = 15\nl = 1\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 1\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 2\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 2\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 3\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 3\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 4\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\treturn True\n\n# Driver code \nn = 15\nl = 1\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 1\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 2\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 2\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 3\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 3\nr = 3\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): \n\tprint(\"All bits are set\") \nelse: \n\tprint(\"All bits are not set\") \n\nn = 15\nl = 4\nr = 4\nif (all_Bits_Set_In_The_Given_Range(n, l, r)): "}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t# TODO: Write your code here\n\treturn text\n\n\n# Provided test cases\nprint(remove_spaces(\"Hello    World\"))\nprint(remove_spaces(\"  Hello    World  \"))\nprint(remove_spaces(\"Hello World\"))\nprint(remove_spaces(\"Hello     World\"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_spaces(\"Hello    World\"))\nprint(remove_spaces(\"  Hello    World  \"))\nprint(remove_spaces(\"Hello World\"))\nprint(remove_spaces(\"Hello     World\"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_spaces(\"Hello     World     \"))\nprint(remove_"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<s>\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\treturn string.startswith('1')\n\nprint(match_num('12345'))\nprint(match_num('123456'))\nprint(match_num('1234567'))\nprint(match_num('12345678'))\nprint(match_num('123456789'))\nprint(match_num('1234567890'))\nprint(match_num('12345678901'))\nprint(match_num('123456789012'))\nprint(match_num('1234567890123'))\nprint(match_num('12345678901234'))\nprint(match_num('123456789012345'))\nprint(match_num('1234567890123456'))\nprint(match_num('12345678901234567'))\nprint(match_num('123456789012345678'))\nprint(match_num('1234567890123456789'))\nprint(match_num('12345678901234567890'))\nprint(match_num('123456789012345678901'))\nprint(match_num('1234567890123456789012'))\nprint(match_num('12345678901234567890123'))\nprint(match_num('123456789012345678901234'))\nprint(match_num('1234567890123456789012345'))\nprint(match_num('1234567890123", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(match_num('12345'))\nprint(match_num('123456'))\nprint(match_num('1234567'))\nprint(match_num('12345678'))\nprint(match_num('123456789'))\nprint(match_num('1234567890'))\nprint(match_num('12345678901'))\nprint(match_num('123456789012'))\nprint(match_num('1234567890123'))\nprint(match_num('12345678901234'))\nprint(match_num('123456789012345'))\nprint(match_num('1234567890123456'))\nprint(match_num('12345678901234567'))\nprint(match_num('123456789012345678'))\nprint(match_num('1234567890123456789'))\nprint(match_num('12345678901234567890'))\nprint(match_num('123456789012345678901'))\nprint(match_num('1234567890123456789012'))\nprint(match_num('12345678901234567890123'))\nprint(match_num('123456789012345678901234'))\nprint(match_num('1234567890123456789012345'))\nprint(match_num('1234567890123"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t# Your code here\n\tnum = str(num)\n\tif len(num) == 1:\n\t\treturn -1\n\telif len(num) == 2:\n\t\tif num[0] == num[1]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn -1\n\telse:\n\t\tif num[0] == num[-1]:\n\t\t\tif num[1] == num[-2]:\n\t\t\t\treturn int(num)\n\t\t\telse:\n\t\t\t\treturn int(num[0] + num[1] + num[1] + num[0])\n\t\telse:\n\t\t\treturn -1\n\n\nprint(previous_palindrome(123))\nprint(previous_palindrome(1221))\nprint(previous_palindrome(1234321))\nprint(previous_palindrome(123455))\nprint(previous_palindrome(123444))\nprint(previous_palindrome(123456))\nprint(previous_palindrome(12345))\nprint(previous_palindrome(1234))\nprint(previous_palindrome(123))\nprint(previous_palindrome(12))\nprint(previous_palindrome(1))\nprint(previous_palindrome(10))\nprint(previous_palindrome(100))\nprint(previous_palindrome(1000))\nprint(previous_palindrome(10000))\nprint(previous_palindrome(100000))\nprint(previous_palindrome(1000000))\nprint(previous_palindrome(10000000))\nprint(previous_palindrome(100000000))\nprint(previous_palindrome(1000000000))\nprint(previous_palindrome(10000000000))\nprint(previous_palindrome(100000000000))\nprint(previous_pal", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(previous_palindrome(123))\nprint(previous_palindrome(1221))\nprint(previous_palindrome(1234321))\nprint(previous_palindrome(123455))\nprint(previous_palindrome(123444))\nprint(previous_palindrome(123456))\nprint(previous_palindrome(12345))\nprint(previous_palindrome(1234))\nprint(previous_palindrome(123))\nprint(previous_palindrome(12))\nprint(previous_palindrome(1))\nprint(previous_palindrome(10))\nprint(previous_palindrome(100))\nprint(previous_palindrome(1000))\nprint(previous_palindrome(10000))\nprint(previous_palindrome(100000))\nprint(previous_palindrome(1000000))\nprint(previous_palindrome(10000000))\nprint(previous_palindrome(100000000))\nprint(previous_palindrome(1000000000))\nprint(previous_palindrome(10000000000))\nprint(previous_palindrome(100000000000))\nprint(previous_pal"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<s>\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\tif m < 1 or m > 12:\n\t\treturn False\n\tif d < 1 or d > 31:\n\t\treturn False\n\tif y < 1 or y > 9999:\n\t\treturn False\n\tif m == 2:\n\t\tif d > 28:\n\t\t\treturn False\n\t\tif d == 29:\n\t\t\tif y % 4 != 0:\n\t\t\t\treturn False\n\t\t\tif y % 100 == 0 and y % 400 != 0:\n\t\t\t\treturn False\n\treturn True\n\nprint(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2015))\nprint(check_date(2, 29, 2014))\nprint(check_date(2, 29, 2013))\nprint(check_date(2, 29, 2012))\nprint(check_date(2, 29, 2011))\nprint(check_date(2, 29, 2010))\nprint(check_date(2, 29, 2009))\nprint(check_date(2, 29, 2008))\nprint(check_date(2, 29, 2007))\nprint(check_date(2, 29, 2006))\nprint(check_date(2, 29, 2005))\nprint(check_date(2, 29, 2004))\nprint(check_date(2, 29, 2003))\nprint(check_date(2, 29, 2002))\nprint(check_date(2, 29, 2001))\nprint(check_date(2, 29, 2000))\nprint(check_date(2, 29, 1999))\nprint(check_date(2, 29, 1998))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2015))\nprint(check_date(2, 29, 2014))\nprint(check_date(2, 29, 2013))\nprint(check_date(2, 29, 2012))\nprint(check_date(2, 29, 2011))\nprint(check_date(2, 29, 2010))\nprint(check_date(2, 29, 2009))\nprint(check_date(2, 29, 2008))\nprint(check_date(2, 29, 2007))\nprint(check_date(2, 29, 2006))\nprint(check_date(2, 29, 2005))\nprint(check_date(2, 29, 2004))\nprint(check_date(2, 29, 2003))\nprint(check_date(2, 29, 2002))\nprint(check_date(2, 29, 2001))\nprint(check_date(2, 29, 2000))\nprint(check_date(2, 29, 1999))\nprint(check_date(2, 29, 1998))\nprint("}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "<s>\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\tif len(nums) < 3:\n\t\treturn None\n\tmax_heap = []\n\tfor num in nums:\n\t\tif len(max_heap) < 3:\n\t\t\tmax_heap.append(num)\n\t\t\theapify(max_heap)\n\t\telse:\n\t\t\tif num > max_heap[0]:\n\t\t\t\tmax_heap[0] = num\n\t\t\t\theapify(max_heap)\n\treturn max_heap[0] * max_heap[1] * max_heap[2]\n\ndef heapify(nums):\n\tfor i in range(len(nums) - 1, -1, -1):\n\t\tmax_index = i\n\t\tleft_index = 2 * i + 1\n\t\tright_index = 2 * i + 2\n\t\tif left_index < len(nums) and nums[left_index] > nums[max_index]:\n\t\t\tmax_index = left_index\n\t\tif right_index < len(nums) and nums[right_index] > nums[max_index]:\n\t\t\tmax_index = right_index\n\t\tif max_index != i:\n\t\t\tnums[i], nums[max_index] = nums[max_index], nums[i]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\tif len(s)%2 != 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(0,len(s),2):\n\t\t\tif s[i] == s[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(is_Two_Alter(\"abcd\"))\nprint(is_Two_Alter(\"abab\"))\nprint(is_Two_Alter(\"abba\"))\nprint(is_Two_Alter(\"ababab\"))\nprint(is_Two_Alter(\"abababab\"))\nprint(is_Two_Alter(\"ababababa\"))\nprint(is_Two_Alter(\"ababababab\"))\nprint(is_Two_Alter(\"abababababa\"))\nprint(is_Two_Alter(\"abababababab\"))\nprint(is_Two_Alter(\"ababababababa\"))\nprint(is_Two_Alter(\"ababababababab\"))\nprint(is_Two_Alter(\"abababababababa\"))\nprint(is_Two_Alter(\"abababababababab\"))\nprint(is_Two_Alter(\"ababababababababa\"))\nprint(is_Two_Alter(\"ababababababababab\"))\nprint(is_Two_Alter(\"abababababababababa\"))\nprint(is_Two_Alter(\"abababababababababab\"))\nprint(is_Two_Alter(\"ababababababababababa\"))\nprint(is_Two_Alter(\"ababababababababababab\"))\nprint(is_Two_Alter(\"abababababababababababa\"))\nprint(is_Two_Alter(\"abababababababababababab\"))\nprint(is_Two_Alter(\"ababababababababababababa\"))\nprint(is_Two_Alter(\"ababababababababababababab\"))\nprint(is_Two_Alter(\"abababababababababababababa\"))\nprint(is", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Two_Alter(\"abcd\"))\nprint(is_Two_Alter(\"abab\"))\nprint(is_Two_Alter(\"abba\"))\nprint(is_Two_Alter(\"ababab\"))\nprint(is_Two_Alter(\"abababab\"))\nprint(is_Two_Alter(\"ababababa\"))\nprint(is_Two_Alter(\"ababababab\"))\nprint(is_Two_Alter(\"abababababa\"))\nprint(is_Two_Alter(\"abababababab\"))\nprint(is_Two_Alter(\"ababababababa\"))\nprint(is_Two_Alter(\"ababababababab\"))\nprint(is_Two_Alter(\"abababababababa\"))\nprint(is_Two_Alter(\"abababababababab\"))\nprint(is_Two_Alter(\"ababababababababa\"))\nprint(is_Two_Alter(\"ababababababababab\"))\nprint(is_Two_Alter(\"abababababababababa\"))\nprint(is_Two_Alter(\"abababababababababab\"))\nprint(is_Two_Alter(\"ababababababababababa\"))\nprint(is_Two_Alter(\"ababababababababababab\"))\nprint(is_Two_Alter(\"abababababababababababa\"))\nprint(is_Two_Alter(\"abababababababababababab\"))\nprint(is_Two_Alter(\"ababababababababababababa\"))\nprint(is_Two_Alter(\"ababababababababababababab\"))\nprint(is_Two_Alter(\"abababababababababababababa\"))\nprint(is"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t# your code here\n\t\n\t# return result\n\treturn result\n\nif __name__ == '__main__':\n\t# Test cases\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'))\n\tprint(text_uppercase_lowercase('AaaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz11'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz111'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1111'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz11111'))\n\tprint(text_uppercase_lower", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'))\n\tprint(text_uppercase_lowercase('AaaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz11'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz111'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1111'))\n\tprint(text_uppercase_lowercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz11111'))\n\tprint(text_uppercase_lower"}
{"ID": 321, "source": "MBPP:922", "prompt": "\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\t", "predict": "<s>\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr): \n\tmax_product = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i] * arr[j] > max_product:\n\t\t\t\tmax_product = arr[i] * arr[j]\n\treturn max_product\n\n\nprint(max_product([1, 2, 3, 4, 5]))\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_product([1, 2, 3, 4", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_product([1, 2, 3, 4, 5]))\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_product([1, 2, 3, 4"}
{"ID": 326, "source": "MBPP:927", "prompt": "\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\ndef __init__(self, data): \n\tself.data = data \n\tself.left = None\n\tself.right = None\n\ndef height(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\tlheight = height(root.left)\n\t\trheight = height(root.right)\n\t\tif lheight > rheight:\n\t\t\treturn lheight + 1\n\t\telse:\n\t\t\treturn rheight + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.match(text)\n\treturn result\n\nprint(text_match('a'))\nprint(text_match('ab'))\nprint(text_match('abb'))\nprint(text_match('abbb'))\nprint(text_match('abbbb'))\nprint(text_match('abbbbb'))\nprint(text_match('abbbbbb'))\nprint(text_match('abbbbbbb'))\nprint(text_match('abbbbbbbb'))\nprint(text_match('abbbbbbbbb'))\nprint(text_match('abbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(text_match('a'))\nprint(text_match('ab'))\nprint(text_match('abb'))\nprint(text_match('abbb'))\nprint(text_match('abbbb'))\nprint(text_match('abbbbb'))\nprint(text_match('abbbbbb'))\nprint(text_match('abbbbbbb'))\nprint(text_match('abbbbbbbb'))\nprint(text_match('abbbbbbbbb'))\nprint(text_match('abbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match('abbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(set(l))\n\n\ndef remove_duplic_list_2(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l))\n\n\ndef remove_duplic_list_3(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_4(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).values())\n\n\ndef remove_duplic_list_5(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).items())\n\n\ndef remove_duplic_list_6(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_7(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).values())\n\n\ndef remove_duplic_list_8(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).items())\n\n\ndef remove_duplic_list_9(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_10(l):\n\t\"\"\"\n\t:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(set(l))\n\n\ndef remove_duplic_list_2(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l))\n\n\ndef remove_duplic_list_3(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_4(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).values())\n\n\ndef remove_duplic_list_5(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).items())\n\n\ndef remove_duplic_list_6(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_7(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).values())\n\n\ndef remove_duplic_list_8(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).items())\n\n\ndef remove_duplic_list_9(l):\n\t\"\"\"\n\t:param l: list of strings\n\t:return: list of strings without duplicate words\n\t\"\"\"\n\treturn list(dict.fromkeys(l).keys())\n\n\ndef remove_duplic_list_10(l):"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\treturn text.lower().replace(\" \", \"_\")\n\ndef camel_to_snake_regex(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_2(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_3(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_4(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_5(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_6(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_7(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_8(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_9(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_10(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_11(text):\n\timport re\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return text.lower().replace(\" \", \"_\")\n\ndef camel_to_snake_regex(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_2(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_3(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_4(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_5(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_6(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_7(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_8(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_9(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_10(text):\n\timport re\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\ndef camel_to_snake_regex_11(text):\n\timport re"}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t# create a dictionary to store the count of each character\n\tchar_count = {}\n\t# loop through each character in the string\n\tfor char in str1:\n\t\t# if the character is not in the dictionary, add it with a count of 1\n\t\tif char not in char_count:\n\t\t\tchar_count[char] = 1\n\t\t# if the character is in the dictionary, increment its count\n\t\telse:\n\t\t\tchar_count[char] += 1\n\t# loop through each character in the string\n\tfor char in str1:\n\t\t# if the character is not the most common, remove it from the dictionary\n\t\tif char_count[char] != max(char_count.values()):\n\t\t\tdel char_count[char]\n\t# return the most common character\n\treturn max(char_count, key=char_count.get)\n\nprint(max_char(\"abcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_char(\"abcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"}
{"ID": 338, "source": "MBPP:939", "prompt": "\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\t", "predict": "<s>\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\ndef sorted_models(models):\n\treturn sorted(models, key=lambda x: x['model'])\n\n\nif __name__ == '__main__':\n\tmodels = [\n\t\t{'model': 'BMW', 'year': 2019},\n\t\t{'model': 'Audi', 'year': 2018},\n\t\t{'model': 'Mercedes', 'year': 2017},\n\t\t{'model': 'BMW', 'year': 2016},\n\t\t{'model': 'Audi', 'year': 2015},\n\t\t{'model': 'Mercedes', 'year': 2014},\n\t\t{'model': 'BMW', 'year': 2013},\n\t\t{'model': 'Audi', 'year': 2012},\n\t\t{'model': 'Mercedes', 'year': 2011},\n\t\t{'model': 'BMW', 'year': 2010},\n\t\t{'model': 'Audi', 'year': 2009},\n\t\t{'model': 'Mercedes', 'year': 2008},\n\t\t{'model': 'BMW', 'year': 2007},\n\t\t{'model': 'Audi', 'year': 2006},\n\t\t{'model': 'Mercedes', 'year': 2005},\n\t\t{'model': 'BMW', 'year': 2004},\n\t\t{'model': 'Audi', 'year': 2003},\n\t\t{'model': 'Mercedes', 'year': 2002},\n\t\t{'model': 'BMW', 'year': 2001},\n\t\t{'model': 'Audi', 'year': 2000},\n\t\t{'model': 'Mercedes', 'year': 1999},\n\t\t{'model': 'BMW', 'year': 1998},\n\t\t{'model': 'Audi', 'year': 1997},\n\t\t{'model': 'Mercedes', 'year': 1996},\n\t\t{'model': 'BMW', 'year': 1995},\n\t\t{'model", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t{'model': 'BMW', 'year': 2019},\n\t\t{'model': 'Audi', 'year': 2018},\n\t\t{'model': 'Mercedes', 'year': 2017},\n\t\t{'model': 'BMW', 'year': 2016},\n\t\t{'model': 'Audi', 'year': 2015},\n\t\t{'model': 'Mercedes', 'year': 2014},\n\t\t{'model': 'BMW', 'year': 2013},\n\t\t{'model': 'Audi', 'year': 2012},\n\t\t{'model': 'Mercedes', 'year': 2011},\n\t\t{'model': 'BMW', 'year': 2010},\n\t\t{'model': 'Audi', 'year': 2009},\n\t\t{'model': 'Mercedes', 'year': 2008},\n\t\t{'model': 'BMW', 'year': 2007},\n\t\t{'model': 'Audi', 'year': 2006},\n\t\t{'model': 'Mercedes', 'year': 2005},\n\t\t{'model': 'BMW', 'year': 2004},\n\t\t{'model': 'Audi', 'year': 2003},\n\t\t{'model': 'Mercedes', 'year': 2002},\n\t\t{'model': 'BMW', 'year': 2001},\n\t\t{'model': 'Audi', 'year': 2000},\n\t\t{'model': 'Mercedes', 'year': 1999},\n\t\t{'model': 'BMW', 'year': 1998},\n\t\t{'model': 'Audi', 'year': 1997},\n\t\t{'model': 'Mercedes', 'year': 1996},\n\t\t{'model': 'BMW', 'year': 1995},\n\t\t{'model"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif type(i) == tuple:\n\t\t\tbreak\n\t\tcount += 1\n\treturn count\n\nprint(count_elim([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_elim([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,1"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\tfor i in test_tup:\n\t\tif i in check_list:\n\t\t\treturn True\n\treturn False\n\nprint(check_element((1,2,3,4,5), [1,2,3]))\nprint(check_element((1,2,3,4,5), [1,2,3,6]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14,15]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_element((1,2,3,4,5), [1,2,3]))\nprint(check_element((1,2,3,4,5), [1,2,3,6]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14,15]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_element((1,2,3,4,5), [1,2,3,6,7,8,9,10,"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t\"\"\"\n\ts: string\n\ta: number of most common elements to return\n\t\"\"\"\n\t# your code here\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 349, "source": "MBPP:950", "prompt": "\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t", "predict": "<s>\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n\t\"\"\"\n\tReturns the chinese zodiac for the given year.\n\t\"\"\"\n\tzodiac = {\n\t\t1900: 'Rat',\n\t\t1901: 'Ox',\n\t\t1902: 'Tiger',\n\t\t1903: 'Rabbit',\n\t\t1904: 'Dragon',\n\t\t1905: 'Snake',\n\t\t1906: 'Horse',\n\t\t1907: 'Goat',\n\t\t1908: 'Monkey',\n\t\t1909: 'Rooster',\n\t\t1910: 'Dog',\n\t\t1911: 'Pig',\n\t\t1912: 'Rat',\n\t\t1913: 'Ox',\n\t\t1914: 'Tiger',\n\t\t1915: 'Rabbit',\n\t\t1916: 'Dragon',\n\t\t1917: 'Snake',\n\t\t1918: 'Horse',\n\t\t1919: 'Goat',\n\t\t1920: 'Monkey',\n\t\t1921: 'Rooster',\n\t\t1922: 'Dog',\n\t\t1923: 'Pig',\n\t\t1924: 'Rat',\n\t\t1925: 'Ox',\n\t\t1926: 'Tiger',\n\t\t1927: 'Rabbit',\n\t\t1928: 'Dragon',\n\t\t1929: 'Snake',\n\t\t1930: 'Horse',\n\t\t1931: 'Goat',\n\t\t1932: 'Monkey',\n\t\t1933: 'Rooster',\n\t\t1934: 'Dog',\n\t\t1935: 'Pig',\n\t\t1936: 'Rat',\n\t\t1937: 'Ox',\n\t\t1938: 'Tiger',\n\t\t1939: 'Rabbit',", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tzodiac = {\n\t\t1900: 'Rat',\n\t\t1901: 'Ox',\n\t\t1902: 'Tiger',\n\t\t1903: 'Rabbit',\n\t\t1904: 'Dragon',\n\t\t1905: 'Snake',\n\t\t1906: 'Horse',\n\t\t1907: 'Goat',\n\t\t1908: 'Monkey',\n\t\t1909: 'Rooster',\n\t\t1910: 'Dog',\n\t\t1911: 'Pig',\n\t\t1912: 'Rat',\n\t\t1913: 'Ox',\n\t\t1914: 'Tiger',\n\t\t1915: 'Rabbit',\n\t\t1916: 'Dragon',\n\t\t1917: 'Snake',\n\t\t1918: 'Horse',\n\t\t1919: 'Goat',\n\t\t1920: 'Monkey',\n\t\t1921: 'Rooster',\n\t\t1922: 'Dog',\n\t\t1923: 'Pig',\n\t\t1924: 'Rat',\n\t\t1925: 'Ox',\n\t\t1926: 'Tiger',\n\t\t1927: 'Rabbit',\n\t\t1928: 'Dragon',\n\t\t1929: 'Snake',\n\t\t1930: 'Horse',\n\t\t1931: 'Goat',\n\t\t1932: 'Monkey',\n\t\t1933: 'Rooster',\n\t\t1934: 'Dog',\n\t\t1935: 'Pig',\n\t\t1936: 'Rat',\n\t\t1937: 'Ox',\n\t\t1938: 'Tiger',"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\timport re\n\treturn re.split('(?=[A-Z])', text)\n\nif __name__ == '__main__':\n\tprint(split_list('HelloWorld'))\n\tprint(split_list('HelloWorldPython'))\n\tprint(split_list('HelloWorldPython3'))\n\tprint(split_list('HelloWorldPython36'))\n\tprint(split_list('HelloWorldPython360'))\n\tprint(split_list('HelloWorldPython3600'))\n\tprint(split_list('HelloWorldPython36000'))\n\tprint(split_list('HelloWorldPython360000'))\n\tprint(split_list('HelloWorldPython3600000'))\n\tprint(split_list('HelloWorldPython36000000'))\n\tprint(split_list('HelloWorldPython360000000'))\n\tprint(split_list('HelloWorldPython3600000000'))\n\tprint(split_list('HelloWorldPython36000000000'))\n\tprint(split_list('HelloWorldPython360000000000'))\n\tprint(split_list('HelloWorldPython3600000000000'))\n\tprint(split_list('HelloWorldPython36000000000000'))\n\tprint(split_list('HelloWorldPython360000000000000'))\n\tprint(split_list('HelloWorldPython3600000000000000'))\n\tprint(split_list('HelloWorldPython36000000000000000'))\n\tprint(split_list('HelloWorldPython360000000000000000'))\n\tprint(split_list('HelloWorldPython3600000000000000000'))\n\tprint(split_list('HelloWorldPython36000000000000000000'))\n\tprint(split_list('Hello", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(split_list('HelloWorld'))\n\tprint(split_list('HelloWorldPython'))\n\tprint(split_list('HelloWorldPython3'))\n\tprint(split_list('HelloWorldPython36'))\n\tprint(split_list('HelloWorldPython360'))\n\tprint(split_list('HelloWorldPython3600'))\n\tprint(split_list('HelloWorldPython36000'))\n\tprint(split_list('HelloWorldPython360000'))\n\tprint(split_list('HelloWorldPython3600000'))\n\tprint(split_list('HelloWorldPython36000000'))\n\tprint(split_list('HelloWorldPython360000000'))\n\tprint(split_list('HelloWorldPython3600000000'))\n\tprint(split_list('HelloWorldPython36000000000'))\n\tprint(split_list('HelloWorldPython360000000000'))\n\tprint(split_list('HelloWorldPython3600000000000'))\n\tprint(split_list('HelloWorldPython36000000000000'))\n\tprint(split_list('HelloWorldPython360000000000000'))\n\tprint(split_list('HelloWorldPython3600000000000000'))\n\tprint(split_list('HelloWorldPython36000000000000000'))\n\tprint(split_list('HelloWorldPython360000000000000000'))\n\tprint(split_list('HelloWorldPython3600000000000000000'))\n\tprint(split_list('HelloWorldPython36000000000000000000'))\n\tprint(split_list('Hello"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "<s>\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in tuple1 if x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty tuples from a list of tuples.\n\"\"\"\ndef remove_all_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in tuple1 if x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings from a list of strings.\n\"\"\"\ndef remove_empty_str(str1): #L = ['', 'a', 'b', 'c', '']\n\treturn [x for x in str1 if x != '']\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', '", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return [x for x in tuple1 if x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty tuples from a list of tuples.\n\"\"\"\ndef remove_all_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in tuple1 if x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings from a list of strings.\n\"\"\"\ndef remove_empty_str(str1): #L = ['', 'a', 'b', 'c', '']\n\treturn [x for x in str1 if x != '']\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', 'c', '', (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in str1 if x != '' and x != ()]\n\n\n\"\"\"\nWrite a function to remove all empty strings and tuples from a list of strings and tuples.\n\"\"\"\ndef remove_empty_str_tuple(str1): #L = ['', 'a', 'b', '"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "<s>\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tfor i in vowels:\n\t\tif i not in string:\n\t\t\treturn False\n\treturn True\n\nprint(check('aeiou'))\nprint(check('aeiou1'))\nprint(check('aeiou123'))\nprint(check('aeiou1234'))\nprint(check('aeiou12345'))\nprint(check('aeiou123456'))\nprint(check('aeiou1234567'))\nprint(check('aeiou12345678'))\nprint(check('aeiou123456789'))\nprint(check('aeiou1234567890'))\nprint(check('aeiou12345678901'))\nprint(check('aeiou123456789012'))\nprint(check('aeiou1234567890123'))\nprint(check('aeiou12345678901234'))\nprint(check('aeiou123456789012345'))\nprint(check('aeiou1234567890123456'))\nprint(check('aeiou12345678901234567'))\nprint(check('aeiou123456789012345678'))\nprint(check('aeiou1234567890123456789'))\nprint(check('aeiou12345678901234567890'))\nprint(check('aeiou123456789012345678901'))\nprint(check('aeiou1234567890123456789012'))\nprint(check('aeiou1234567", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check('aeiou'))\nprint(check('aeiou1'))\nprint(check('aeiou123'))\nprint(check('aeiou1234'))\nprint(check('aeiou12345'))\nprint(check('aeiou123456'))\nprint(check('aeiou1234567'))\nprint(check('aeiou12345678'))\nprint(check('aeiou123456789'))\nprint(check('aeiou1234567890'))\nprint(check('aeiou12345678901'))\nprint(check('aeiou123456789012'))\nprint(check('aeiou1234567890123'))\nprint(check('aeiou12345678901234'))\nprint(check('aeiou123456789012345'))\nprint(check('aeiou1234567890123456'))\nprint(check('aeiou12345678901234567'))\nprint(check('aeiou123456789012345678'))\nprint(check('aeiou1234567890123456789'))\nprint(check('aeiou12345678901234567890'))\nprint(check('aeiou123456789012345678901'))\nprint(check('aeiou1234567890123456789012'))\nprint(check('aeiou1234567"}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t\"\"\"\n\tA: Amplitude\n\tB: Period\n\tN: Number of terms\n\t\"\"\"\n\treturn A*(N//B)\n\nprint(floor_Max(10,3,10))\nprint(floor_Max(10,3,11))\nprint(floor_Max(10,3,12))\nprint(floor_Max(10,3,13))\nprint(floor_Max(10,3,14))\nprint(floor_Max(10,3,15))\nprint(floor_Max(10,3,16))\nprint(floor_Max(10,3,17))\nprint(floor_Max(10,3,18))\nprint(floor_Max(10,3,19))\nprint(floor_Max(10,3,20))\nprint(floor_Max(10,3,21))\nprint(floor_Max(10,3,22))\nprint(floor_Max(10,3,23))\nprint(floor_Max(10,3,24))\nprint(floor_Max(10,3,25))\nprint(floor_Max(10,3,26))\nprint(floor_Max(10,3,27))\nprint(floor_Max(10,3,28))\nprint(floor_Max(10,3,29))\nprint(floor_Max(10,3,30))\nprint(floor_Max(10,3,31))\nprint(floor_Max(10,3,32))\nprint(floor_Max(10,3,33))\nprint(floor_Max(10,3,34))\nprint(floor_Max(10,3,35))\nprint(floor_Max(10,3,36))\nprint(floor_Max(10,3,37))\nprint(floor_Max(10,3,38))\nprint(floor_Max(10,3,39))\nprint(floor_Max(10,3,40))\nprint(floor_Max(10,3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(floor_Max(10,3,10))\nprint(floor_Max(10,3,11))\nprint(floor_Max(10,3,12))\nprint(floor_Max(10,3,13))\nprint(floor_Max(10,3,14))\nprint(floor_Max(10,3,15))\nprint(floor_Max(10,3,16))\nprint(floor_Max(10,3,17))\nprint(floor_Max(10,3,18))\nprint(floor_Max(10,3,19))\nprint(floor_Max(10,3,20))\nprint(floor_Max(10,3,21))\nprint(floor_Max(10,3,22))\nprint(floor_Max(10,3,23))\nprint(floor_Max(10,3,24))\nprint(floor_Max(10,3,25))\nprint(floor_Max(10,3,26))\nprint(floor_Max(10,3,27))\nprint(floor_Max(10,3,28))\nprint(floor_Max(10,3,29))\nprint(floor_Max(10,3,30))\nprint(floor_Max(10,3,31))\nprint(floor_Max(10,3,32))\nprint(floor_Max(10,3,33))\nprint(floor_Max(10,3,34))\nprint(floor_Max(10,3,35))\nprint(floor_Max(10,3,36))\nprint(floor_Max(10,3,37))\nprint(floor_Max(10,3,38))\nprint(floor_Max(10,3,39))\nprint(floor_Max(10,3,40))\nprint(floor_Max(10,3,"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "<s>\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t# code goes here\n\treturn (test_tup1, test_tup2)\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# code goes here\n\treturn (test_tup1, test_tup2)\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):\n\t# code goes here\n\treturn isinstance(test_tup[0], tuple)\n\n\n\"\"\"\nWrite a function to flatten a nested tuple.\n\"\"\"\ndef flatten_nested(test_tup):\n\t# code goes here\n\treturn test_tup[0] + test_tup[1]\n\n\n\"\"\"\nWrite a function to check if the given tuple contains a nested tuple.\n\"\"\"\ndef check_nested(test_tup):"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t# TODO: Fill this in.\n\treturn None\n\n# Provided test\nwords = ['hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "words = ['hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t# your code here\n\treturn text.split('a')\n\nif __name__ == '__main__':\n\tprint(split_lowerstring('hello'))\n\t# ['he', 'llo']\n\tprint(split_lowerstring('hello world'))\n\t# ['he', 'llo worl', 'd']\n\tprint(split_lowerstring('Hello World'))\n\t# ['Hello World']\n\tprint(split_lowerstring('1234567890'))\n\t# ['1234567890']\n\tprint(split_lowerstring(''))\n\t# []\n\tprint(split_lowerstring('a'))\n\t# ['', '']\n\tprint(split_lowerstring('A'))\n\t# ['A']\n\tprint(split_lowerstring('Aa'))\n\t# ['A', 'a']\n\tprint(split_lowerstring('Aaa'))\n\t# ['A', 'a', 'a']\n\tprint(split_lowerstring('Aaaa'))\n\t# ['A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaa'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaAaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaaAaaa'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaAaaaAaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaaAaaaAaaa", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "if __name__ == '__main__':\n\tprint(split_lowerstring('hello'))\n\t# ['he', 'llo']\n\tprint(split_lowerstring('hello world'))\n\t# ['he', 'llo worl', 'd']\n\tprint(split_lowerstring('Hello World'))\n\t# ['Hello World']\n\tprint(split_lowerstring('1234567890'))\n\t# ['1234567890']\n\tprint(split_lowerstring(''))\n\t# []\n\tprint(split_lowerstring('a'))\n\t# ['', '']\n\tprint(split_lowerstring('A'))\n\t# ['A']\n\tprint(split_lowerstring('Aa'))\n\t# ['A', 'a']\n\tprint(split_lowerstring('Aaa'))\n\t# ['A', 'a', 'a']\n\tprint(split_lowerstring('Aaaa'))\n\t# ['A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaa'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaAaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaaAaaa'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A', 'a', 'a', 'a']\n\tprint(split_lowerstring('AaaaAaaaAaaaA'))\n\t# ['A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A', 'a', 'a', 'a', 'A']\n\tprint(split_lowerstring('AaaaAaaaAaaaAaaa"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\treturn 4*a\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(a, b):\n\treturn 3*a*b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(a, b):\n\treturn 3*a*b/2\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(a, b):"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<s>\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n\nprint(remove_dirty_chars('abcd', 'bc'))\nprint(remove_dirty_chars('abcd', 'bd'))\nprint(remove_dirty_chars('abcd', 'cd'))\nprint(remove_dirty_chars('abcd', 'ab'))\nprint(remove_dirty_chars('abcd', 'abcd'))\nprint(remove_dirty_chars('abcd', 'abc'))\nprint(remove_dirty_chars('abcd', 'abcde'))\nprint(remove_dirty_chars('abcd', 'abcdef'))\nprint(remove_dirty_chars('abcd', 'abcdefg'))\nprint(remove_dirty_chars('abcd', 'abcdefgh'))\nprint(remove_dirty_chars('abcd', 'abcdefghi'))\nprint(remove_dirty_chars('abcd', 'abcdefghij'))\nprint(remove_dirty_chars('abcd', 'abcdefghijk'))\nprint(remove_dirty_chars('abcd', 'abcdefghijkl'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklm'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmn'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmno'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnop'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopq'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqr'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrs'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrst'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrstu'))\nprint(remove_dirty_chars('abcd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_dirty_chars('abcd', 'bc'))\nprint(remove_dirty_chars('abcd', 'bd'))\nprint(remove_dirty_chars('abcd', 'cd'))\nprint(remove_dirty_chars('abcd', 'ab'))\nprint(remove_dirty_chars('abcd', 'abcd'))\nprint(remove_dirty_chars('abcd', 'abc'))\nprint(remove_dirty_chars('abcd', 'abcde'))\nprint(remove_dirty_chars('abcd', 'abcdef'))\nprint(remove_dirty_chars('abcd', 'abcdefg'))\nprint(remove_dirty_chars('abcd', 'abcdefgh'))\nprint(remove_dirty_chars('abcd', 'abcdefghi'))\nprint(remove_dirty_chars('abcd', 'abcdefghij'))\nprint(remove_dirty_chars('abcd', 'abcdefghijk'))\nprint(remove_dirty_chars('abcd', 'abcdefghijkl'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklm'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmn'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmno'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnop'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopq'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqr'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrs'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrst'))\nprint(remove_dirty_chars('abcd', 'abcdefghijklmnopqrstu'))\nprint(remove_dirty_chars('abcd"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<s>\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\tif x < 10: \n\t\treturn False\n\tsum = 0\n\twhile x > 0: \n\t\tsum += x % 10\n\t\tx = x // 10\n\treturn sum == 9\n\nprint(is_woodall(18))\nprint(is_woodall(10))\nprint(is_woodall(19))\nprint(is_woodall(100))\nprint(is_woodall(101))\nprint(is_woodall(102))\nprint(is_woodall(103))\nprint(is_woodall(104))\nprint(is_woodall(105))\nprint(is_woodall(106))\nprint(is_woodall(107))\nprint(is_woodall(108))\nprint(is_woodall(109))\nprint(is_woodall(110))\nprint(is_woodall(111))\nprint(is_woodall(112))\nprint(is_woodall(113))\nprint(is_woodall(114))\nprint(is_woodall(115))\nprint(is_woodall(116))\nprint(is_woodall(117))\nprint(is_woodall(118))\nprint(is_woodall(119))\nprint(is_woodall(120))\nprint(is_woodall(121))\nprint(is_woodall(122))\nprint(is_woodall(123))\nprint(is_woodall(124))\nprint(is_woodall(125))\nprint(is_woodall(126))\nprint(is_woodall(127))\nprint(is_woodall(128))\nprint(is_woodall(129))\nprint(is_woodall(130))\nprint(is_woodall(131))\nprint(is_woodall(132))\nprint(is_woodall(133))\nprint(is_woodall(134))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_woodall(18))\nprint(is_woodall(10))\nprint(is_woodall(19))\nprint(is_woodall(100))\nprint(is_woodall(101))\nprint(is_woodall(102))\nprint(is_woodall(103))\nprint(is_woodall(104))\nprint(is_woodall(105))\nprint(is_woodall(106))\nprint(is_woodall(107))\nprint(is_woodall(108))\nprint(is_woodall(109))\nprint(is_woodall(110))\nprint(is_woodall(111))\nprint(is_woodall(112))\nprint(is_woodall(113))\nprint(is_woodall(114))\nprint(is_woodall(115))\nprint(is_woodall(116))\nprint(is_woodall(117))\nprint(is_woodall(118))\nprint(is_woodall(119))\nprint(is_woodall(120))\nprint(is_woodall(121))\nprint(is_woodall(122))\nprint(is_woodall(123))\nprint(is_woodall(124))\nprint(is_woodall(125))\nprint(is_woodall(126))\nprint(is_woodall(127))\nprint(is_woodall(128))\nprint(is_woodall(129))\nprint(is_woodall(130))\nprint(is_woodall(131))\nprint(is_woodall(132))\nprint(is_woodall(133))\nprint(is_woodall(134))\nprint("}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num in seen:\n\t\t\treturn num\n\t\tseen.add(num)\n\treturn -1\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\"\ndef find_first_non_repeating(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tseen = set()\n\tfor num in nums:\n\t\tif num not in seen:\n\t\t\tseen.add(num)\n\t\telse:\n\t\t\tseen.remove(num)\n\treturn next(iter(seen))\n\n\n\"\"\"\nWrite a function to find the first non-repeating element in a given array of integers.\n\"\"\""}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<s>\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] == s[j]:\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_Substring_With_Equal_Ends(\"abcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Substring_With_Equal_Ends(\"abcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(count_Substring_With_Equal_Ends(\"abcdabcd"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\tfor i in range(N):\n\t\tif ar[i] != i:\n\t\t\treturn i\n\treturn N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\"\"\"\n\tReturns the n-th rectangular number.\n\t\"\"\"\n\tif n < 1:\n\t\traise ValueError(\"n must be a positive integer.\")\n\treturn n * (n + 1) // 2\n\ndef test_find_rect_num():\n\tassert find_rect_num(1) == 1\n\tassert find_rect_num(2) == 4\n\tassert find_rect_num(3) == 9\n\tassert find_rect_num(4) == 16\n\tassert find_rect_num(5) == 25\n\tassert find_rect_num(6) == 36\n\tassert find_rect_num(7) == 49\n\tassert find_rect_num(8) == 64\n\tassert find_rect_num(9) == 81\n\tassert find_rect_num(10) == 100\n\tassert find_rect_num(11) == 121\n\tassert find_rect_num(12) == 144\n\tassert find_rect_num(13) == 169\n\tassert find_rect_num(14) == 196\n\tassert find_rect_num(15) == 225\n\tassert find_rect_num(16) == 256\n\tassert find_rect_num(17) == 289\n\tassert find_rect_num(18) == 324\n\tassert find_rect_num(19) == 361\n\tassert find_rect_num(20) == 400\n\tassert find_rect_num(21) == 441\n\tassert find_rect_num(22) == 484\n\tassert find_rect_num(23) == 529\n\tassert find_rect_num(24) == 576\n\tassert find_rect_num(25) == 625\n\tassert find_rect_num(26) == 676\n\tassert find_rect_num(27) == 729\n\tassert find_rect_num(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert find_rect_num(1) == 1\n\tassert find_rect_num(2) == 4\n\tassert find_rect_num(3) == 9\n\tassert find_rect_num(4) == 16\n\tassert find_rect_num(5) == 25\n\tassert find_rect_num(6) == 36\n\tassert find_rect_num(7) == 49\n\tassert find_rect_num(8) == 64\n\tassert find_rect_num(9) == 81\n\tassert find_rect_num(10) == 100\n\tassert find_rect_num(11) == 121\n\tassert find_rect_num(12) == 144\n\tassert find_rect_num(13) == 169\n\tassert find_rect_num(14) == 196\n\tassert find_rect_num(15) == 225\n\tassert find_rect_num(16) == 256\n\tassert find_rect_num(17) == 289\n\tassert find_rect_num(18) == 324\n\tassert find_rect_num(19) == 361\n\tassert find_rect_num(20) == 400\n\tassert find_rect_num(21) == 441\n\tassert find_rect_num(22) == 484\n\tassert find_rect_num(23) == 529\n\tassert find_rect_num(24) == 576\n\tassert find_rect_num(25) == 625\n\tassert find_rect_num(26) == 676\n\tassert find_rect_num(27) == 729\n\tassert find_rect_num("}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t# p and q are the two numbers\n\t# N is the nth digit\n\t# p and q are integers\n\t# N is an integer\n\t# p and q are positive\n\t# N is positive\n\t# p and q are not equal to 0\n\t# N is not equal to 0\n\t# p and q are not equal to 1\n\t# N is not equal to 1\n\t# p and q are not equal to 2\n\t# N is not equal to 2\n\t# p and q are not equal to 3\n\t# N is not equal to 3\n\t# p and q are not equal to 4\n\t# N is not equal to 4\n\t# p and q are not equal to 5\n\t# N is not equal to 5\n\t# p and q are not equal to 6\n\t# N is not equal to 6\n\t# p and q are not equal to 7\n\t# N is not equal to 7\n\t# p and q are not equal to 8\n\t# N is not equal to 8\n\t# p and q are not equal to 9\n\t# N is not equal to 9\n\t# p and q are not equal to 10\n\t# N is not equal to 10\n\t# p and q are not equal to 11\n\t# N is not equal to 11\n\t# p and q are not equal to 12\n\t# N is not equal to 12\n\t# p and q are not equal to 13\n\t# N is not equal to 13\n\t# p and q are not equal to 14\n\t# N is not equal to 14\n\t# p and q are not equal to 15\n\t# N is not equal to 15\n\t# p and q are not equal to 16\n\t# N is not equal to 16\n\t# p and q are not equal to 17\n\t# N is not equal to 17\n\t# p and q are not equal to 18\n\t# N is not equal to 18\n\t# p and q are not equal to 19\n\t# N is not equal to 19\n\t# p and q", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t# p and q are not equal to 0\n\t# N is not equal to 0\n\t# p and q are not equal to 1\n\t# N is not equal to 1\n\t# p and q are not equal to 2\n\t# N is not equal to 2\n\t# p and q are not equal to 3\n\t# N is not equal to 3\n\t# p and q are not equal to 4\n\t# N is not equal to 4\n\t# p and q are not equal to 5\n\t# N is not equal to 5\n\t# p and q are not equal to 6\n\t# N is not equal to 6\n\t# p and q are not equal to 7\n\t# N is not equal to 7\n\t# p and q are not equal to 8\n\t# N is not equal to 8\n\t# p and q are not equal to 9\n\t# N is not equal to 9\n\t# p and q are not equal to 10\n\t# N is not equal to 10\n\t# p and q are not equal to 11\n\t# N is not equal to 11\n\t# p and q are not equal to 12\n\t# N is not equal to 12\n\t# p and q are not equal to 13\n\t# N is not equal to 13\n\t# p and q are not equal to 14\n\t# N is not equal to 14\n\t# p and q are not equal to 15\n\t# N is not equal to 15\n\t# p and q are not equal to 16\n\t# N is not equal to 16\n\t# p and q are not equal to 17\n\t# N is not equal to 17\n\t# p and q are not equal to 18\n\t# N is not equal to 18\n\t# p and q are not equal to 19\n\t# N is not equal to 19"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\tif len(S) < 2:\n\t\treturn True\n\t\n\tcount = {}\n\tfor c in S:\n\t\tif c not in count:\n\t\t\tcount[c] = 1\n\t\telse:\n\t\t\tcount[c] += 1\n\t\n\tmax_count = max(count.values())\n\tif max_count > (len(S) + 1) / 2:\n\t\treturn False\n\t\n\treturn True\n\nprint(rearange_string(\"aappp\"))\nprint(rearange_string(\"aapa\"))\nprint(rearange_string(\"aapa\"))\nprint(rearange_string(\"aapp\"))\nprint(rearange_string(\"a\"))\nprint(rearange_string(\"\"))\nprint(rearange_string(\"aaabbb\"))\nprint(rearange_string(\"aabb\"))\nprint(rearange_string(\"aabbcc\"))\nprint(rearange_string(\"aabbccc\"))\nprint(rearange_string(\"aabbcccc\"))\nprint(rearange_string(\"aabbccccc\"))\nprint(rearange_string(\"aabbcccccc\"))\nprint(rearange_string(\"aabbccccccc\"))\nprint(rearange_string(\"aabbcccccccc\"))\nprint(rearange_string(\"aabbccccccccc\"))\nprint(rearange_string(\"aabbcccccccccc\"))\nprint(rearange_string(\"aabbccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccccccc\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(rearange_string(\"aappp\"))\nprint(rearange_string(\"aapa\"))\nprint(rearange_string(\"aapa\"))\nprint(rearange_string(\"aapp\"))\nprint(rearange_string(\"a\"))\nprint(rearange_string(\"\"))\nprint(rearange_string(\"aaabbb\"))\nprint(rearange_string(\"aabb\"))\nprint(rearange_string(\"aabbcc\"))\nprint(rearange_string(\"aabbccc\"))\nprint(rearange_string(\"aabbcccc\"))\nprint(rearange_string(\"aabbccccc\"))\nprint(rearange_string(\"aabbcccccc\"))\nprint(rearange_string(\"aabbccccccc\"))\nprint(rearange_string(\"aabbcccccccc\"))\nprint(rearange_string(\"aabbccccccccc\"))\nprint(rearange_string(\"aabbcccccccccc\"))\nprint(rearange_string(\"aabbccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccccc\"))\nprint(rearange_string(\"aabbcccccccccccccccccc\"))\nprint(rearange_string(\"aabbccccccccccccccccccc\"))\n"}
{"ID": 405, "source": "MBPP:42", "prompt": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\tsum = 0\n\tfor i in range(n): \n\t\tsum += arr[i] \n\treturn sum \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'[a-z]+_[a-z]+')\n\treturn pattern.findall(text)\n\n\nif __name__ == '__main__':\n\tprint(text_match('_this_is_a_test_'))\n\tprint(text_match('this_is_a_test'))\n\tprint(text_match('this_is_a_test_'))\n\tprint(text_match('this_is_a_test_1'))\n\tprint(text_match('this_is_a_test_1_'))\n\tprint(text_match('this_is_a_test_1_2'))\n\tprint(text_match('this_is_a_test_1_2_'))\n\tprint(text_match('this_is_a_test_1_2_3'))\n\tprint(text_match('this_is_a_test_1_2_3_'))\n\tprint(text_match('this_is_a_test_1_2_3_4'))\n\tprint(text_match('this_is_a_test_1_2_3_4_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_8'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_8_'))\n\tprint(text_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(text_match('_this_is_a_test_'))\n\tprint(text_match('this_is_a_test'))\n\tprint(text_match('this_is_a_test_'))\n\tprint(text_match('this_is_a_test_1'))\n\tprint(text_match('this_is_a_test_1_'))\n\tprint(text_match('this_is_a_test_1_2'))\n\tprint(text_match('this_is_a_test_1_2_'))\n\tprint(text_match('this_is_a_test_1_2_3'))\n\tprint(text_match('this_is_a_test_1_2_3_'))\n\tprint(text_match('this_is_a_test_1_2_3_4'))\n\tprint(text_match('this_is_a_test_1_2_3_4_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_8'))\n\tprint(text_match('this_is_a_test_1_2_3_4_5_6_7_8_'))\n\tprint(text_"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t#+\n\treturn text[0:4]\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t#+\n\treturn text[-4:]\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_middle(text):\n\t#+\n\treturn text[4:8]\n\t#-\n\n\n\"\"\"\nWrite a function that matches any character except the word \"and\".\n\"\"\"\ndef text_match_except(text):\n\t#+\n\treturn text.replace(\"and\", \"\")\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case.\n\"\"\"\ndef text_match_case(text):\n\t#+\n\treturn text[0:4].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case.\n\"\"\"\ndef text_match_middle_case(text):\n\t#+\n\treturn text[4:8].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case.\n\"\"\"\ndef text_match_end_case(text):\n\t#+\n\treturn text[-4:].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_method(text):\n\t#+\n\treturn text.match(\"[A-Za-z]{4}\")\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_middle_method(text):\n\t#+\n\treturn text.match(\"[A-Za-z]{4}\", 4)\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_end", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "#+\n\treturn text[0:4]\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\t#+\n\treturn text[-4:]\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_middle(text):\n\t#+\n\treturn text[4:8]\n\t#-\n\n\n\"\"\"\nWrite a function that matches any character except the word \"and\".\n\"\"\"\ndef text_match_except(text):\n\t#+\n\treturn text.replace(\"and\", \"\")\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case.\n\"\"\"\ndef text_match_case(text):\n\t#+\n\treturn text[0:4].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case.\n\"\"\"\ndef text_match_middle_case(text):\n\t#+\n\treturn text[4:8].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case.\n\"\"\"\ndef text_match_end_case(text):\n\t#+\n\treturn text[-4:].lower()\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_method(text):\n\t#+\n\treturn text.match(\"[A-Za-z]{4}\")\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_middle_method(text):\n\t#+\n\treturn text.match(\"[A-Za-z]{4}\", 4)\n\t#-\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string, ignoring case and using the match method.\n\"\"\"\ndef text_match_end"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\tgcd = l[0]\n\tfor i in range(1, len(l)):\n\t\tgcd = gcd_of_two_numbers(gcd, l[i])\n\treturn gcd\n\ndef gcd_of_two_numbers(x, y):\n\tif x > y:\n\t\tsmaller = y\n\telse:\n\t\tsmaller = x\n\tfor i in range(1, smaller+1):\n\t\tif((x % i == 0) and (y % i == 0)):\n\t\t\tgcd = i\n\treturn gcd\n\nprint(get_gcd([12, 16, 18]))\nprint(get_gcd([12, 16, 18, 20]))\nprint(get_gcd([12, 16, 18, 20, 24]))\nprint(get_gcd([12, 16, 18, 20, 24, 28]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36, 38]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36, 38, 40]))\nprint(get_g", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(get_gcd([12, 16, 18]))\nprint(get_gcd([12, 16, 18, 20]))\nprint(get_gcd([12, 16, 18, 20, 24]))\nprint(get_gcd([12, 16, 18, 20, 24, 28]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36, 38]))\nprint(get_gcd([12, 16, 18, 20, 24, 28, 30, 32, 34, 36, 38, 40]))\nprint(get_g"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t\"\"\"\n\t:param n: int\n\t:return: int\n\t\"\"\"\n\treturn n | 0xaaaaaaaa\n\n\nif __name__ == '__main__':\n\tprint(odd_bit_set_number(10))\n\tprint(odd_bit_set_number(11))\n\tprint(odd_bit_set_number(12))\n\tprint(odd_bit_set_number(13))\n\tprint(odd_bit_set_number(14))\n\tprint(odd_bit_set_number(15))\n\tprint(odd_bit_set_number(16))\n\tprint(odd_bit_set_number(17))\n\tprint(odd_bit_set_number(18))\n\tprint(odd_bit_set_number(19))\n\tprint(odd_bit_set_number(20))\n\tprint(odd_bit_set_number(21))\n\tprint(odd_bit_set_number(22))\n\tprint(odd_bit_set_number(23))\n\tprint(odd_bit_set_number(24))\n\tprint(odd_bit_set_number(25))\n\tprint(odd_bit_set_number(26))\n\tprint(odd_bit_set_number(27))\n\tprint(odd_bit_set_number(28))\n\tprint(odd_bit_set_number(29))\n\tprint(odd_bit_set_number(30))\n\tprint(odd_bit_set_number(31))\n\tprint(odd_bit_set_number(32))\n\tprint(odd_bit_set_number(33))\n\tprint(odd_bit_set_number(34))\n\tprint(odd_bit_set_number(35))\n\tprint(odd_bit_set_number(36))\n\tprint(odd_bit_set_number(37))\n\tprint(odd_bit_set_number(38))\n\tprint(odd_bit_set_number(39))\n\tprint(odd_bit_set_number(40))\n\tprint(odd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(odd_bit_set_number(10))\n\tprint(odd_bit_set_number(11))\n\tprint(odd_bit_set_number(12))\n\tprint(odd_bit_set_number(13))\n\tprint(odd_bit_set_number(14))\n\tprint(odd_bit_set_number(15))\n\tprint(odd_bit_set_number(16))\n\tprint(odd_bit_set_number(17))\n\tprint(odd_bit_set_number(18))\n\tprint(odd_bit_set_number(19))\n\tprint(odd_bit_set_number(20))\n\tprint(odd_bit_set_number(21))\n\tprint(odd_bit_set_number(22))\n\tprint(odd_bit_set_number(23))\n\tprint(odd_bit_set_number(24))\n\tprint(odd_bit_set_number(25))\n\tprint(odd_bit_set_number(26))\n\tprint(odd_bit_set_number(27))\n\tprint(odd_bit_set_number(28))\n\tprint(odd_bit_set_number(29))\n\tprint(odd_bit_set_number(30))\n\tprint(odd_bit_set_number(31))\n\tprint(odd_bit_set_number(32))\n\tprint(odd_bit_set_number(33))\n\tprint(odd_bit_set_number(34))\n\tprint(odd_bit_set_number(35))\n\tprint(odd_bit_set_number(36))\n\tprint(odd_bit_set_number(37))\n\tprint(odd_bit_set_number(38))\n\tprint(odd_bit_set_number(39))\n\tprint(odd_bit_set_number(40))\n\tprint(odd"}
{"ID": 416, "source": "MBPP:53", "prompt": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\"\"\"\ndef check_Equality(str):\n\tif str[0] == str[-1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_Equality(\"abc\"))\nprint(check_Equality(\"abcd\"))\nprint(check_Equality(\"abcdc\"))\nprint(check_Equality(\"abcdcd\"))\nprint(check_Equality(\"abcdcde\"))\nprint(check_Equality(\"abcdcdef\"))\nprint(check_Equality(\"abcdcdefg\"))\nprint(check_Equality(\"abcdcdefgh\"))\nprint(check_Equality(\"abcdcdefghi\"))\nprint(check_Equality(\"abcdcdefghij\"))\nprint(check_Equality(\"abcdcdefghijk\"))\nprint(check_Equality(\"abcdcdefghijkl\"))\nprint(check_Equality(\"abcdcdefghijklm\"))\nprint(check_Equality(\"abcdcdefghijklmn\"))\nprint(check_Equality(\"abcdcdefghijklmno\"))\nprint(check_Equality(\"abcdcdefghijklmnop\"))\nprint(check_Equality(\"abcdcdefghijklmnopq\"))\nprint(check_Equality(\"abcdcdefghijklmnopqr\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrs\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrst\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstu\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuv\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvw\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwx\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxy\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxyz\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxyz1\"))\nprint(check_Equality(\"abcdcdefghij", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Equality(\"abc\"))\nprint(check_Equality(\"abcd\"))\nprint(check_Equality(\"abcdc\"))\nprint(check_Equality(\"abcdcd\"))\nprint(check_Equality(\"abcdcde\"))\nprint(check_Equality(\"abcdcdef\"))\nprint(check_Equality(\"abcdcdefg\"))\nprint(check_Equality(\"abcdcdefgh\"))\nprint(check_Equality(\"abcdcdefghi\"))\nprint(check_Equality(\"abcdcdefghij\"))\nprint(check_Equality(\"abcdcdefghijk\"))\nprint(check_Equality(\"abcdcdefghijkl\"))\nprint(check_Equality(\"abcdcdefghijklm\"))\nprint(check_Equality(\"abcdcdefghijklmn\"))\nprint(check_Equality(\"abcdcdefghijklmno\"))\nprint(check_Equality(\"abcdcdefghijklmnop\"))\nprint(check_Equality(\"abcdcdefghijklmnopq\"))\nprint(check_Equality(\"abcdcdefghijklmnopqr\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrs\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrst\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstu\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuv\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvw\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwx\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxy\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxyz\"))\nprint(check_Equality(\"abcdcdefghijklmnopqrstuvwxyz1\"))\nprint(check_Equality(\"abcdcdefghij"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "<s>\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\tif n == 0:\n\t\treturn False\n\telse:\n\t\trev = 0\n\t\twhile n > 0:\n\t\t\trem = n % 10\n\t\t\trev = rev * 10 + rem\n\t\t\tn = n // 10\n\t\tif rev == n - 1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(check(121))\nprint(check(122))\nprint(check(123))\nprint(check(124))\nprint(check(125))\nprint(check(126))\nprint(check(127))\nprint(check(128))\nprint(check(129))\nprint(check(130))\nprint(check(131))\nprint(check(132))\nprint(check(133))\nprint(check(134))\nprint(check(135))\nprint(check(136))\nprint(check(137))\nprint(check(138))\nprint(check(139))\nprint(check(140))\nprint(check(141))\nprint(check(142))\nprint(check(143))\nprint(check(144))\nprint(check(145))\nprint(check(146))\nprint(check(147))\nprint(check(148))\nprint(check(149))\nprint(check(150))\nprint(check(151))\nprint(check(152))\nprint(check(153))\nprint(check(154))\nprint(check(155))\nprint(check(156))\nprint(check(157))\nprint(check(158))\nprint(check(159))\nprint(check(160))\nprint(check(161))\nprint(check(162))\nprint(check(163))\nprint(check(164))\nprint(check(165))\nprint(check(166))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check(121))\nprint(check(122))\nprint(check(123))\nprint(check(124))\nprint(check(125))\nprint(check(126))\nprint(check(127))\nprint(check(128))\nprint(check(129))\nprint(check(130))\nprint(check(131))\nprint(check(132))\nprint(check(133))\nprint(check(134))\nprint(check(135))\nprint(check(136))\nprint(check(137))\nprint(check(138))\nprint(check(139))\nprint(check(140))\nprint(check(141))\nprint(check(142))\nprint(check(143))\nprint(check(144))\nprint(check(145))\nprint(check(146))\nprint(check(147))\nprint(check(148))\nprint(check(149))\nprint(check(150))\nprint(check(151))\nprint(check(152))\nprint(check(153))\nprint(check(154))\nprint(check(155))\nprint(check(156))\nprint(check(157))\nprint(check(158))\nprint(check(159))\nprint(check(160))\nprint(check(161))\nprint(check(162))\nprint(check(163))\nprint(check(164))\nprint(check(165))\nprint(check(166))\nprint("}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<s>\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t# check if s is empty\n\tif len(s) == 0:\n\t\treturn True\n\t# check if l is empty\n\tif len(l) == 0:\n\t\treturn False\n\t# check if the first element of s is in l\n\tif s[0] in l:\n\t\t# if it is, check if the rest of s is in the rest of l\n\t\treturn is_sublist(l[l.index(s[0])+1:], s[1:])\n\t# if the first element of s is not in l, return False\n\treturn False\n\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_sublist([1, 2, 3, 4", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(is_sublist([1, 2, 3, 4"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<s>\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tfor i in range(len(colors)):\n\t\tif colors[i] != patterns[i]:\n\t\t\treturn False\n\treturn True\n\n\ndef is_samepatterns_recursive(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_2(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_2(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_3(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_3(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_4(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_4(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_5(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\treturn True\n\n\ndef is_samepatterns_recursive(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_2(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_2(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_3(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_3(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_4(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\t\n\treturn is_samepatterns_recursive_4(colors[1:], patterns[1:])\n\n\ndef is_samepatterns_recursive_5(colors, patterns):\n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tif len(colors) == 0:\n\t\treturn True\n\t\n\tif colors[0]"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\tif len(s) % 2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\nprint(word_len(\"Hello\"))\nprint(word_len(\"World\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Programming\"))\nprint(word_len(\"Language\"))\nprint(word_len(\"Coding\"))\nprint(word_len(\"Java\"))\nprint(word_len(\"C\"))\nprint(word_len(\"C++\"))\nprint(word_len(\"C#\"))\nprint(word_len(\"JavaScript\"))\nprint(word_len(\"TypeScript\"))\nprint(word_len(\"Kotlin\"))\nprint(word_len(\"Dart\"))\nprint(word_len(\"Swift\"))\nprint(word_len(\"Objective-C\"))\nprint(word_len(\"Ruby\"))\nprint(word_len(\"PHP\"))\nprint(word_len(\"Perl\"))\nprint(word_len(\"Go\"))\nprint(word_len(\"Rust\"))\nprint(word_len(\"Julia\"))\nprint(word_len(\"Fortran\"))\nprint(word_len(\"Pascal\"))\nprint(word_len(\"Lua\"))\nprint(word_len(\"Haskell\"))\nprint(word_len(\"Scala\"))\nprint(word_len(\"Scheme\"))\nprint(word_len(\"Prolog\"))\nprint(word_len(\"Erlang\"))\nprint(word_len(\"Elixir\"))\nprint(word_len(\"Clojure\"))\nprint(word_len(\"Common Lisp\"))\nprint(word_len(\"R\"))\nprint(word_len(\"Matlab\"))\nprint(word_len(\"Octave\"))\nprint(word_len(\"Scilab\"))\nprint(word_len(\"ABAP\"))\nprint(word_len(\"COBOL\"))\nprint(word_len(\"Fortran\"))\nprint(word_len(\"Modula-2\"))\nprint(word_len(\"Ada\"))\nprint(word_len(\"PL/I\"))\nprint(word_len(\"PL/SQL\"))\nprint(word_len(\"Visual Basic\"))\nprint(word_len(\"Visual Basic .NET\"))\nprint(word_len(\"C#\"))\nprint(word_len(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(word_len(\"Hello\"))\nprint(word_len(\"World\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Programming\"))\nprint(word_len(\"Language\"))\nprint(word_len(\"Coding\"))\nprint(word_len(\"Java\"))\nprint(word_len(\"C\"))\nprint(word_len(\"C++\"))\nprint(word_len(\"C#\"))\nprint(word_len(\"JavaScript\"))\nprint(word_len(\"TypeScript\"))\nprint(word_len(\"Kotlin\"))\nprint(word_len(\"Dart\"))\nprint(word_len(\"Swift\"))\nprint(word_len(\"Objective-C\"))\nprint(word_len(\"Ruby\"))\nprint(word_len(\"PHP\"))\nprint(word_len(\"Perl\"))\nprint(word_len(\"Go\"))\nprint(word_len(\"Rust\"))\nprint(word_len(\"Julia\"))\nprint(word_len(\"Fortran\"))\nprint(word_len(\"Pascal\"))\nprint(word_len(\"Lua\"))\nprint(word_len(\"Haskell\"))\nprint(word_len(\"Scala\"))\nprint(word_len(\"Scheme\"))\nprint(word_len(\"Prolog\"))\nprint(word_len(\"Erlang\"))\nprint(word_len(\"Elixir\"))\nprint(word_len(\"Clojure\"))\nprint(word_len(\"Common Lisp\"))\nprint(word_len(\"R\"))\nprint(word_len(\"Matlab\"))\nprint(word_len(\"Octave\"))\nprint(word_len(\"Scilab\"))\nprint(word_len(\"ABAP\"))\nprint(word_len(\"COBOL\"))\nprint(word_len(\"Fortran\"))\nprint(word_len(\"Modula-2\"))\nprint(word_len(\"Ada\"))\nprint(word_len(\"PL/I\"))\nprint(word_len(\"PL/SQL\"))\nprint(word_len(\"Visual Basic\"))\nprint(word_len(\"Visual Basic .NET\"))\nprint(word_len(\"C#\"))\nprint(word_len(\""}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\treturn n * (n + 1) * (n + 2) // 6\n\nprint(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(10))\nprint(tetrahedral_number(11))\nprint(tetrahedral_number(12))\nprint(tetrahedral_number(13))\nprint(tetrahedral_number(14))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(16))\nprint(tetrahedral_number(17))\nprint(tetrahedral_number(18))\nprint(tetrahedral_number(19))\nprint(tetrahedral_number(20))\nprint(tetrahedral_number(21))\nprint(tetrahedral_number(22))\nprint(tetrahedral_number(23))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(25))\nprint(tetrahedral_number(26))\nprint(tetrahedral_number(27))\nprint(tetrahedral_number(28))\nprint(tetrahedral_number(29))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(31))\nprint(tetrahedral_number(32))\nprint(tetrahedral_number(33))\nprint(tetrahedral_number(34))\nprint(tetrahedral_number(35))\nprint(tetrahedral_number(36))\nprint(tetrahedral_number(37))\nprint(tetrahedral_number(38))\nprint(tetrahedral", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(10))\nprint(tetrahedral_number(11))\nprint(tetrahedral_number(12))\nprint(tetrahedral_number(13))\nprint(tetrahedral_number(14))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(16))\nprint(tetrahedral_number(17))\nprint(tetrahedral_number(18))\nprint(tetrahedral_number(19))\nprint(tetrahedral_number(20))\nprint(tetrahedral_number(21))\nprint(tetrahedral_number(22))\nprint(tetrahedral_number(23))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(25))\nprint(tetrahedral_number(26))\nprint(tetrahedral_number(27))\nprint(tetrahedral_number(28))\nprint(tetrahedral_number(29))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(31))\nprint(tetrahedral_number(32))\nprint(tetrahedral_number(33))\nprint(tetrahedral_number(34))\nprint(tetrahedral_number(35))\nprint(tetrahedral_number(36))\nprint(tetrahedral_number(37))\nprint(tetrahedral_number(38))\nprint(tetrahedral"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "<s>\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t# code goes here\n\treturn zip(test_tup1, test_tup2)\n\nif __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n\tprint(list(zip_tuples(test_tup1, test_t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "if __name__ == '__main__':\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\tprint(list(zip_tuples(test_tup1, test_tup2)))\n\n\ttest_tup1 = (1, 2, 3, 4, 5)\n\ttest_tup2 = (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n\tprint(list(zip_tuples(test_tup1, test_t"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3 * 3.14159265359 * r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14159265359 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 1/3 * 3.14159265359 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn 1/3 * b * h\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, b, h):\n\treturn l * b * h\n\n\"\"\"\nWrite a function to find the volume of a trapezoid.\n\"\"\"\ndef volume_trapezoid(a, b, h):\n\treturn 1/2 * (a + b) * h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_parallelepiped(a, b, c):\n\treturn a * b * c\n\n\"\"\"\nWrite a function to find the volume of a frustum.\n\"\"\"\ndef volume_frustum(r1, r2, h):\n\treturn 3.14159265359 * (r1**2 + r2**2 + r1*r2) * h / 3\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(R, r):\n\treturn 2 * 3.14159265359 * R * r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere cap.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return 4/3 * 3.14159265359 * r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14159265359 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 1/3 * 3.14159265359 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn 1/3 * b * h\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, b, h):\n\treturn l * b * h\n\n\"\"\"\nWrite a function to find the volume of a trapezoid.\n\"\"\"\ndef volume_trapezoid(a, b, h):\n\treturn 1/2 * (a + b) * h\n\n\"\"\"\nWrite a function to find the volume of a parallelepiped.\n\"\"\"\ndef volume_parallelepiped(a, b, c):\n\treturn a * b * c\n\n\"\"\"\nWrite a function to find the volume of a frustum.\n\"\"\"\ndef volume_frustum(r1, r2, h):\n\treturn 3.14159265359 * (r1**2 + r2**2 + r1*r2) * h / 3\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(R, r):\n\treturn 2 * 3.14159265359 * R * r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere cap.\n\"\"\"\ndef"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\tif n == 1:\n\t\treturn [1]\n\telif n == 2:\n\t\treturn [1,1]\n\telse:\n\t\tsequence = [1,1]\n\t\tfor i in range(2,n):\n\t\t\tsequence.append(sequence[sequence[i-1]-1]+sequence[i-sequence[i-1]])\n\t\treturn sequence\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\"\"\"\n\tReturns the nth centered hexagonal number.\n\t\"\"\"\n\treturn 3 * n * n - 3 * n + 1\n\ndef test_function(test_case):\n\t\"\"\"\n\tTest the centered_hexagonal_number function.\n\t\"\"\"\n\tn = test_case[0]\n\tsolution = test_case[1]\n\toutput = centered_hexagonal_number(n)\n\tif output == solution:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\ntest_function([1, 1])\ntest_function([2, 7])\ntest_function([3, 19])\ntest_function([4, 37])\ntest_function([5, 61])\ntest_function([6, 91])\ntest_function([7, 127])\ntest_function([8, 169])\ntest_function([9, 217])\ntest_function([10, 271])\ntest_function([11, 331])\ntest_function([12, 397])\ntest_function([13, 469])\ntest_function([14, 547])\ntest_function([15, 631])\ntest_function([16, 721])\ntest_function([17, 817])\ntest_function([18, 919])\ntest_function([19, 1027])\ntest_function([20, 1141])\ntest_function([21, 1261])\ntest_function([22, 1387])\ntest_function([23, 1521])\ntest_function([24, 1661])\ntest_function([25, 1807])\ntest_function([26, 1961])\ntest_function([27, 2121])\ntest_function([28, 2287])\ntest_function([29, 2459])\ntest_function([30, 264", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function([1, 1])\ntest_function([2, 7])\ntest_function([3, 19])\ntest_function([4, 37])\ntest_function([5, 61])\ntest_function([6, 91])\ntest_function([7, 127])\ntest_function([8, 169])\ntest_function([9, 217])\ntest_function([10, 271])\ntest_function([11, 331])\ntest_function([12, 397])\ntest_function([13, 469])\ntest_function([14, 547])\ntest_function([15, 631])\ntest_function([16, 721])\ntest_function([17, 817])\ntest_function([18, 919])\ntest_function([19, 1027])\ntest_function([20, 1141])\ntest_function([21, 1261])\ntest_function([22, 1387])\ntest_function([23, 1521])\ntest_function([24, 1661])\ntest_function([25, 1807])\ntest_function([26, 1961])\ntest_function([27, 2121])\ntest_function([28, 2287])\ntest_function([29, 2459])\ntest_function([30, 264"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "<s>\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\treturn {**dict1, **dict2, **dict3}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_two(dict1,dict2):\n\treturn {**dict1, **dict2}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_one(dict1):\n\treturn {**dict1}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_none():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return {**dict1, **dict2, **dict3}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_two(dict1,dict2):\n\treturn {**dict1, **dict2}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_one(dict1):\n\treturn {**dict1}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_none():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_and_dicts_and_dicts_and_dicts_and_dicts_and_dicts():\n\treturn {}\n\n\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_empty_dicts_"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\"\"\"\n\t:type N: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tstack = []\n\tresult = []\n\tfor i in N:\n\t\twhile stack and stack[-1] >= i:\n\t\t\tstack.pop()\n\t\tif stack:\n\t\t\tresult.append(stack[-1])\n\t\telse:\n\t\t\tresult.append(-1)\n\t\tstack.append(i)\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\tmin_len = len(lst[0])\n\tfor i in range(1,len(lst)):\n\t\tif len(lst[i]) < min_len:\n\t\t\tmin_len = len(lst[i])\n\treturn min_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\"\"\"\n\t:param list1: list of lists\n\t:return: dictionary of frequency count\n\t\"\"\"\n\tfrequency_count = {}\n\tfor i in list1:\n\t\tif i in frequency_count:\n\t\t\tfrequency_count[i] += 1\n\t\telse:\n\t\t\tfrequency_count[i] = 1\n\treturn frequency_count\n\n\nif __name__ == '__main__':\n\tlist1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tlist1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\tbinary = \"\"\n\twhile n > 0:\n\t\tbinary = str(n % 2) + binary\n\t\tn = n // 2\n\treturn binary\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(1000))\nprint(decimal_to_binary(10000))\nprint(decimal_to_binary(100000))\nprint(decimal_to_binary(1000000))\nprint(decimal_to_binary(10000000))\nprint(decimal_to_binary(100000000))\nprint(decimal_to_binary(1000000000))\nprint(decimal_to_binary(10000000000))\nprint(decimal_to_binary(100000000000))\nprint(decimal_to_binary(1000000000000))\nprint(decimal_to_binary(10000000000000))\nprint(decimal_to_binary(100000000000000))\nprint(decimal_to_binary(1000000000000000))\nprint(decimal_to_binary(10000000000000000))\nprint(decimal_to_binary(100000000000000000))\nprint(decimal_to_binary(1000000000000000000))\nprint(decimal_to_binary(10000000000000000000))\nprint(decimal_to_binary(100000000000000000000))\nprint(decimal_to_binary(1000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decimal_to_binary(10))\nprint(decimal_to_binary(100))\nprint(decimal_to_binary(1000))\nprint(decimal_to_binary(10000))\nprint(decimal_to_binary(100000))\nprint(decimal_to_binary(1000000))\nprint(decimal_to_binary(10000000))\nprint(decimal_to_binary(100000000))\nprint(decimal_to_binary(1000000000))\nprint(decimal_to_binary(10000000000))\nprint(decimal_to_binary(100000000000))\nprint(decimal_to_binary(1000000000000))\nprint(decimal_to_binary(10000000000000))\nprint(decimal_to_binary(100000000000000))\nprint(decimal_to_binary(1000000000000000))\nprint(decimal_to_binary(10000000000000000))\nprint(decimal_to_binary(100000000000000000))\nprint(decimal_to_binary(1000000000000000000))\nprint(decimal_to_binary(10000000000000000000))\nprint(decimal_to_binary(100000000000000000000))\nprint(decimal_to_binary(1000000000000"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t# your code here\n\tnum = str(num)\n\tif len(num) == 1:\n\t\treturn int(num)\n\tif len(num) == 2:\n\t\tif num[0] == num[1]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[1] + num[0])\n\tif len(num) == 3:\n\t\tif num[0] == num[2]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[2] + num[0] + num[1])\n\tif len(num) == 4:\n\t\tif num[0] == num[3]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[3] + num[0] + num[1] + num[2])\n\tif len(num) == 5:\n\t\tif num[0] == num[4]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[4] + num[0] + num[1] + num[2] + num[3])\n\tif len(num) == 6:\n\t\tif num[0] == num[5]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[5] + num[0] + num[1] + num[2] + num[3] + num[4])\n\tif len(num) == 7:\n\t\tif num[0] == num[6]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[6] + num[0] + num[1] + num[2] + num[3] + num[4] + num[5])\n\tif len(num) == 8:\n\t\tif num[0] == num[7]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[7] + num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(num) == 1:\n\t\treturn int(num)\n\tif len(num) == 2:\n\t\tif num[0] == num[1]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[1] + num[0])\n\tif len(num) == 3:\n\t\tif num[0] == num[2]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[2] + num[0] + num[1])\n\tif len(num) == 4:\n\t\tif num[0] == num[3]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[3] + num[0] + num[1] + num[2])\n\tif len(num) == 5:\n\t\tif num[0] == num[4]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[4] + num[0] + num[1] + num[2] + num[3])\n\tif len(num) == 6:\n\t\tif num[0] == num[5]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[5] + num[0] + num[1] + num[2] + num[3] + num[4])\n\tif len(num) == 7:\n\t\tif num[0] == num[6]:\n\t\t\treturn int(num)\n\t\telse:\n\t\t\treturn int(num[6] + num[0] + num[1] + num[2] + num[3] + num[4] + num[5])\n\tif len(num) == 8:\n\t\tif num[0] == num[7]:\n\t\t\treturn int(num)"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "<s>\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t#your code here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<s>\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t\"\"\"\n\t:param test_list: list of integers\n\t:param strt_val: start value of the range\n\t:param stop_val: end value of the range\n\t:return: list of missing ranges\n\t\"\"\"\n\tmissing_ranges = []\n\tfor i in range(strt_val, stop_val + 1):\n\t\tif i not in test_list:\n\t\t\tmissing_ranges.append(i)\n\treturn missing_ranges\n\n\ndef main():\n\ttest_list = [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\tfor i in list1:\n\t\tif i:\n\t\t\treturn False\n\treturn True\n\nprint(empty_dit([{}, {}, {}]))\nprint(empty_dit([{}, {}, {'a': 1}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, '", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(empty_dit([{}, {}, {}]))\nprint(empty_dit([{}, {}, {'a': 1}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}]))\nprint(empty_dit([{}, {}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, '"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "<s>\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\treturn list(string)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a string.\n\"\"\"\ndef list_to_string(list): \n\treturn \"\".join(list)\n\nprint(list_to_string([\"h\", \"e\", \"l\", \"l\", \"o\"]))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string): \n\treturn string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog.\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is an isogram.\n\"\"\"\ndef is_isogram(string): \n\treturn len(string) == len(set(string.lower()))\n\nprint(is_isogram(\"Dermatoglyphics\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog.\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is an isogram.\n\"\"\"\ndef is_isogram(string): \n\treturn len(string) == len(set(string.lower()))\n\nprint(is_is", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string): \n\treturn string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog.\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is an isogram.\n\"\"\"\ndef is_isogram(string): \n\treturn len(string) == len(set(string.lower()))\n\nprint(is_isogram(\"Dermatoglyphics\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\nprint(is_pangram(\"The quick brown fox jumps over the lazy dog.\"))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is an isogram.\n\"\"\""}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[j][1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product\n\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]))\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]))", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]))"}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "<s>\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t# your code goes here\n\treturn [word for word in str.split() if len(word) > n]\n\n\nif __name__ == '__main__':\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words(4, \"I am a good boy\"))\n\tprint(\"Long words: \", long_words("}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t# Write your code here.\n\tmax_count = 0\n\tmax_num = None\n\tcounts = {}\n\tfor num in nums:\n\t\tif num not in counts:\n\t\t\tcounts[num] = 1\n\t\telse:\n\t\t\tcounts[num] += 1\n\t\t\t\n\t\tif counts[num] > max_count:\n\t\t\tmax_count = counts[num]\n\t\t\tmax_num = num\n\treturn max_num\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\tfor i in range(p):\n\t\tarr[0],arr[n-1] = arr[n-1],arr[0]\n\tif arr[n-1]%2 == 0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<s>\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count\n\nprint(find_lists(([1,2,3], 4, 5, [6,7,8])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17], [18,19,20])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17], [18,19,20], [21,22,23])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17], [18,19,20], [21,22,23], [24,25,26])))\nprint(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17], [18,19,20], [21,22,23], [", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(find_lists(([1,2,3], 4, 5, [6,7,8], [9,10,11], [12,13,14], [15,16,17], [18,19,20], [21,22,23], ["}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\tif a == 0:\n\t\treturn False\n\telif a == 1:\n\t\treturn True\n\telse:\n\t\treturn does_Contain_B(b,c,a%(b+c))\n\nprint(does_Contain_B(10,2,3))\nprint(does_Contain_B(10,3,2))\nprint(does_Contain_B(10,2,4))\nprint(does_Contain_B(10,4,2))\nprint(does_Contain_B(10,3,4))\nprint(does_Contain_B(10,4,3))\nprint(does_Contain_B(10,5,6))\nprint(does_Contain_B(10,6,5))\nprint(does_Contain_B(10,7,8))\nprint(does_Contain_B(10,8,7))\nprint(does_Contain_B(10,9,10))\nprint(does_Contain_B(10,10,9))\nprint(does_Contain_B(10,11,12))\nprint(does_Contain_B(10,12,11))\nprint(does_Contain_B(10,13,14))\nprint(does_Contain_B(10,14,13))\nprint(does_Contain_B(10,15,16))\nprint(does_Contain_B(10,16,15))\nprint(does_Contain_B(10,17,18))\nprint(does_Contain_B(10,18,17))\nprint(does_Contain_B(10,19,20))\nprint(does_Contain_B(10,20,19))\nprint(does_Contain_B(10,21,22))\nprint(does_Contain_B(10,22,21))\nprint(does_Contain_B(10,23,24))\nprint(does_Contain_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(does_Contain_B(10,2,3))\nprint(does_Contain_B(10,3,2))\nprint(does_Contain_B(10,2,4))\nprint(does_Contain_B(10,4,2))\nprint(does_Contain_B(10,3,4))\nprint(does_Contain_B(10,4,3))\nprint(does_Contain_B(10,5,6))\nprint(does_Contain_B(10,6,5))\nprint(does_Contain_B(10,7,8))\nprint(does_Contain_B(10,8,7))\nprint(does_Contain_B(10,9,10))\nprint(does_Contain_B(10,10,9))\nprint(does_Contain_B(10,11,12))\nprint(does_Contain_B(10,12,11))\nprint(does_Contain_B(10,13,14))\nprint(does_Contain_B(10,14,13))\nprint(does_Contain_B(10,15,16))\nprint(does_Contain_B(10,16,15))\nprint(does_Contain_B(10,17,18))\nprint(does_Contain_B(10,18,17))\nprint(does_Contain_B(10,19,20))\nprint(does_Contain_B(10,20,19))\nprint(does_Contain_B(10,21,22))\nprint(does_Contain_B(10,22,21))\nprint(does_Contain_B(10,23,24))\nprint(does_Contain_"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t# a = 1\n\t# b = 0\n\t# c = 0\n\t# a = 1\n\t# b = 2\n\t# c = 1\n\t# a = 1\n\t# b = 3\n\t# c = 2\n\t# a = 1\n\t# b = 4\n\t# c = 3\n\t# a = 1\n\t# b = 5\n\t# c = 4\n\t# a = 1\n\t# b = 6\n\t# c = 5\n\t# a = 1\n\t# b = 7\n\t# c = 6\n\t# a = 1\n\t# b = 8\n\t# c = 7\n\t# a = 1\n\t# b = 9\n\t# c = 8\n\t# a = 1\n\t# b = 10\n\t# c = 9\n\t# a = 1\n\t# b = 11\n\t# c = 10\n\t# a = 1\n\t# b = 12\n\t# c = 11\n\t# a = 1\n\t# b = 13\n\t# c = 12\n\t# a = 1\n\t# b = 14\n\t# c = 13\n\t# a = 1\n\t# b = 15\n\t# c = 14\n\t# a = 1\n\t# b = 16\n\t# c = 15\n\t# a = 1\n\t# b = 17\n\t# c = 16\n\t# a = 1\n\t# b = 18\n\t# c = 17\n\t# a = 1\n\t# b = 19\n\t# c = 18\n\t# a = 1\n\t# b = 20\n\t# c = 19\n\t# a = 1\n\t# b = 21\n\t# c = 20\n\t# a = 1\n\t# b = 22\n\t# c = 21\n\t# a = 1\n\t# b = 23\n\t# c = 22\n\t# a", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "# a = 1\n\t# b = 0\n\t# c = 0\n\t# a = 1\n\t# b = 2\n\t# c = 1\n\t# a = 1\n\t# b = 3\n\t# c = 2\n\t# a = 1\n\t# b = 4\n\t# c = 3\n\t# a = 1\n\t# b = 5\n\t# c = 4\n\t# a = 1\n\t# b = 6\n\t# c = 5\n\t# a = 1\n\t# b = 7\n\t# c = 6\n\t# a = 1\n\t# b = 8\n\t# c = 7\n\t# a = 1\n\t# b = 9\n\t# c = 8\n\t# a = 1\n\t# b = 10\n\t# c = 9\n\t# a = 1\n\t# b = 11\n\t# c = 10\n\t# a = 1\n\t# b = 12\n\t# c = 11\n\t# a = 1\n\t# b = 13\n\t# c = 12\n\t# a = 1\n\t# b = 14\n\t# c = 13\n\t# a = 1\n\t# b = 15\n\t# c = 14\n\t# a = 1\n\t# b = 16\n\t# c = 15\n\t# a = 1\n\t# b = 17\n\t# c = 16\n\t# a = 1\n\t# b = 18\n\t# c = 17\n\t# a = 1\n\t# b = 19\n\t# c = 18\n\t# a = 1\n\t# b = 20\n\t# c = 19\n\t# a = 1\n\t# b = 21\n\t# c = 20\n\t# a = 1\n\t# b = 22\n\t# c = 21\n\t# a = 1\n\t# b = 23\n\t# c = 22"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\treturn n ^ 0xAAAAAAAA\n\nif __name__ == \"__main__\" : \n\tn = int(input(\"Enter a number : \"))\n\tprint(even_bit_toggle_number(n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\tencoded_list = []\n\tfor i in range(len(list1)):\n\t\tcount = 1\n\t\twhile i+1 < len(list1) and list1[i] == list1[i+1]:\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\tencoded_list.append((count, list1[i]))\n\treturn encoded_list\n\ndef decode_list(list1):\n\tdecoded_list = []\n\tfor i in range(len(list1)):\n\t\tfor j in range(list1[i][0]):\n\t\t\tdecoded_list.append(list1[i][1])\n\treturn decoded_list\n\nlist1 = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "list1 = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\tx = 0\n\ty = 0\n\tif a == 0 and b == 0:\n\t\treturn x, y\n\telif a == 0:\n\t\ty = n / b\n\t\treturn x, y\n\telif b == 0:\n\t\tx = n / a\n\t\treturn x, y\n\telse:\n\t\tif n % gcd(a, b) != 0:\n\t\t\treturn x, y\n\t\telse:\n\t\t\tx = n / gcd(a, b)\n\t\t\ty = x * (b / gcd(a, b))\n\t\t\treturn x, y\n\ndef gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\telse:\n\t\treturn gcd(b % a, a)\n\nprint solution(2, 3, 10)\nprint solution(2, 3, 11)\nprint solution(2, 3, 12)\nprint solution(2, 3, 13)\nprint solution(2, 3, 14)\nprint solution(2, 3, 15)\nprint solution(2, 3, 16)\nprint solution(2, 3, 17)\nprint solution(2, 3, 18)\nprint solution(2, 3, 19)\nprint solution(2, 3, 20)\nprint solution(2, 3, 21)\nprint solution(2, 3, 22)\nprint solution(2, 3, 23)\nprint solution(2, 3, 24)\nprint solution(2, 3, 25)\nprint solution(2, 3, 26)\nprint solution(2, 3, 27)\nprint solution(2, 3, 28)\nprint solution(2, 3, 29)\nprint solution(2, 3, 30)\nprint solution(2, 3, 31)\nprint solution(2, 3, 32)\nprint solution(2, 3, 33)\nprint solution(2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print solution(2, 3, 10)\nprint solution(2, 3, 11)\nprint solution(2, 3, 12)\nprint solution(2, 3, 13)\nprint solution(2, 3, 14)\nprint solution(2, 3, 15)\nprint solution(2, 3, 16)\nprint solution(2, 3, 17)\nprint solution(2, 3, 18)\nprint solution(2, 3, 19)\nprint solution(2, 3, 20)\nprint solution(2, 3, 21)\nprint solution(2, 3, 22)\nprint solution(2, 3, 23)\nprint solution(2, 3, 24)\nprint solution(2, 3, 25)\nprint solution(2, 3, 26)\nprint solution(2, 3, 27)\nprint solution(2, 3, 28)\nprint solution(2, 3, 29)\nprint solution(2, 3, 30)\nprint solution(2, 3, 31)\nprint solution(2, 3, 32)\nprint solution(2, 3, 33)\nprint solution(2, 3"}
{"ID": 529, "source": "MBPP:166", "prompt": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\t", "predict": "<s>\"\"\"\nWrite a python function to count the pairs with xor as an even number.\n\"\"\"\ndef find_even_Pair(A,N): \n\tcount = 0\n\tfor i in range(N):\n\t\tfor j in range(i+1,N):\n\t\t\tif (A[i]^A[j])%2 == 0:\n\t\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 531, "source": "MBPP:168", "prompt": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the frequency of a number in a given array.\n\"\"\"\ndef frequency(a,x): \n\tcount = 0\n\tfor i in a:\n\t\tif i == x:\n\t\t\tcount += 1\n\treturn count\n\na = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "a = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)-2):\n\t\tif s[i:i+3] == 'std':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<s>\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', text)\n\n\n\"\"\"\nWrite a function to remove all duplicate characters from a string.\n\"\"\"\ndef remove_duplicate(text):\n\treturn ''.join(set(text))\n\n\n\"\"\"\nWrite a function to check if a string is palindrome or not.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\n\"\"\"\nWrite a function to check if a string is pangram or not.\n\"\"\"\ndef is_pangram(text):\n\treturn len(set(text)) == 26\n\n\n\"\"\"\nWrite a function to check if a string is anagram or not.\n\"\"\"\ndef is_anagram(text1, text2):\n\treturn sorted(text1) == sorted(text2)\n\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(set(text)) == len(text)\n\n\n\"\"\"\nWrite a function to check if a string is a permutation of a palindrome or not.\n\"\"\"\ndef is_palindrome_permutation(text):\n\treturn len(set(text)) <= 1\n\n\n\"\"\"\nWrite a function to check if a string is one edit away or not.\n\"\"\"\ndef is_one_edit_away(text1, text2):\n\tif len(text1) == len(text2):\n\t\treturn sum(text1[i] != text2[i] for i in range(len(text1))) == 1\n\telif len(text1) == len(text2) + 1:\n\t\treturn sum(text1[i] != text2[i] for i in range(len(text2))) == 1\n\telif len(text1) == len(text2) - 1:\n\t\treturn sum(text1[i] != text2[i] for i in range(len(text1))) == 1\n\telse:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to check if a string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef remove_duplicate(text):\n\treturn ''.join(set(text))\n\n\n\"\"\"\nWrite a function to check if a string is palindrome or not.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\n\"\"\"\nWrite a function to check if a string is pangram or not.\n\"\"\"\ndef is_pangram(text):\n\treturn len(set(text)) == 26\n\n\n\"\"\"\nWrite a function to check if a string is anagram or not.\n\"\"\"\ndef is_anagram(text1, text2):\n\treturn sorted(text1) == sorted(text2)\n\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(set(text)) == len(text)\n\n\n\"\"\"\nWrite a function to check if a string is a permutation of a palindrome or not.\n\"\"\"\ndef is_palindrome_permutation(text):\n\treturn len(set(text)) <= 1\n\n\n\"\"\"\nWrite a function to check if a string is one edit away or not."}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<s>\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\tstack = []\n\tfor i in str1:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nprint(is_valid_parenthese('()'))\nprint(is_valid_parenthese('(())'))\nprint(is_valid_parenthese('()()'))\nprint(is_valid_parenthese('(()'))\nprint(is_valid_parenthese(')()'))\nprint(is_valid_parentheseis_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(is_valid_parenthese}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)  # deg2rad below\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c # Distance in km\n\treturn d\n\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)  # deg2rad below\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c # Distance in km\n\treturn d\n\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)  # deg2rad below\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "import math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)  # deg2rad below\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c # Distance in km\n\treturn d\n\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)  # deg2rad below\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\ti = 0\n\twhile i < len(str1) and i < len(str2): \n\t\tif str1[i] != str2[i]: \n\t\t\tbreak\n\t\ti += 1\n\treturn str1[:i]\n\ndef common_prefix(strs): \n\tif not strs: \n\t\treturn \"\"\n\tprefix = strs[0]\n\tfor i in range(1, len(strs)): \n\t\tprefix = common_prefix_util(prefix, strs[i]) \n\treturn prefix\n\ndef main():\n  print(common_prefix([\"flower\",\"flow\",\"flight\"]))\n  print(common_prefix([\"dog\",\"racecar\",\"car\"]))\n\nmain()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 545, "source": "MBPP:182", "prompt": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\t", "predict": "<s>\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\ndef find_character(string):\n\tuppercase = re.findall('[A-Z]', string)\n\tlowercase = re.findall('[a-z]', string)\n\tspecial_char = re.findall('[!@#$%^&*()]', string)\n\tnumeric = re.findall('[0-9]', string)\n\treturn uppercase, lowercase, special_char, numeric\n\n\n\"\"\"\nWrite a function to find the number of words in a string.\n\"\"\"\ndef count_words(string):\n\treturn len(string.split())\n\n\n\"\"\"\nWrite a function to find the number of characters in a string.\n\"\"\"\ndef count_characters(string):\n\treturn len(string)\n\n\n\"\"\"\nWrite a function to find the number of vowels in a string.\n\"\"\"\ndef count_vowels(string):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of consonants in a string.\n\"\"\"\ndef count_consonants(string):\n\tconsonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n\tcount = 0\n\tfor char in string:\n\t\tif char in consonants:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of digits in a string.\n\"\"\"\ndef count_digits(string):\n\tdigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\tcount = 0\n\tfor char in string:\n\t\tif char in digits:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of spaces in a string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef count_vowels(string):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of consonants in a string.\n\"\"\"\ndef count_consonants(string):\n\tconsonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n\tcount = 0\n\tfor char in string:\n\t\tif char in consonants:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of digits in a string.\n\"\"\"\ndef count_digits(string):\n\tdigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\tcount = 0\n\tfor char in string:\n\t\tif char in digits:\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to find the number of spaces in a string"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t# your code here\n\treturn (-b/(2*a))\n\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t# your code here\n\treturn (-b/(2*a), -c/(2*a))\n\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola.\n\"\"\"\ndef parabola_axis(a, b, c): \n\t# your code here\n\treturn (-b/(2*a))\n\n\n\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t# your code here\n\treturn (-b/(2*a))\n\n\n\"\"\"\nWrite a function to find the equation of the tangent line to a parabola at a given point.\n\"\"\"\ndef parabola_tangent(a, b, c, x): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the equation of the normal line to a parabola at a given point.\n\"\"\"\ndef parabola_normal(a, b, c, x): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the chord of a parabola through two given points.\n\"\"\"\ndef parabola_chord(a, b, c, x1, x2): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabolic segment.\n\"\"\"\ndef parabola_segment(a, b, c, x1, x2): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabola.\n\"\"\"\ndef parabola_area(a, b, c): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabolic segment.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t# your code here\n\treturn (-b/(2*a), -c/(2*a))\n\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola.\n\"\"\"\ndef parabola_axis(a, b, c): \n\t# your code here\n\treturn (-b/(2*a))\n\n\n\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t# your code here\n\treturn (-b/(2*a))\n\n\n\"\"\"\nWrite a function to find the equation of the tangent line to a parabola at a given point.\n\"\"\"\ndef parabola_tangent(a, b, c, x): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the equation of the normal line to a parabola at a given point.\n\"\"\"\ndef parabola_normal(a, b, c, x): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the chord of a parabola through two given points.\n\"\"\"\ndef parabola_chord(a, b, c, x1, x2): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabolic segment.\n\"\"\"\ndef parabola_segment(a, b, c, x1, x2): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabola.\n\"\"\"\ndef parabola_area(a, b, c): \n\t# your code here\n\treturn (a*x + b)\n\n\n\"\"\"\nWrite a function to find the area of a parabolic segment."}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\tfor i in range(1,n+1):\n\t\tfor j in range(1,n+1):\n\t\t\tif i*j == n:\n\t\t\t\treturn True\n\treturn False\n\nprint(prod_Square(10))\nprint(prod_Square(11))\nprint(prod_Square(12))\nprint(prod_Square(13))\nprint(prod_Square(14))\nprint(prod_Square(15))\nprint(prod_Square(16))\nprint(prod_Square(17))\nprint(prod_Square(18))\nprint(prod_Square(19))\nprint(prod_Square(20))\nprint(prod_Square(21))\nprint(prod_Square(22))\nprint(prod_Square(23))\nprint(prod_Square(24))\nprint(prod_Square(25))\nprint(prod_Square(26))\nprint(prod_Square(27))\nprint(prod_Square(28))\nprint(prod_Square(29))\nprint(prod_Square(30))\nprint(prod_Square(31))\nprint(prod_Square(32))\nprint(prod_Square(33))\nprint(prod_Square(34))\nprint(prod_Square(35))\nprint(prod_Square(36))\nprint(prod_Square(37))\nprint(prod_Square(38))\nprint(prod_Square(39))\nprint(prod_Square(40))\nprint(prod_Square(41))\nprint(prod_Square(42))\nprint(prod_Square(43))\nprint(prod_Square(44))\nprint(prod_Square(45))\nprint(prod_Square(46))\nprint(prod_Square(47))\nprint(prod_Square(48))\nprint(prod_Square(49))\nprint(prod_Square(50))\nprint(prod_Square(51))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(prod_Square(10))\nprint(prod_Square(11))\nprint(prod_Square(12))\nprint(prod_Square(13))\nprint(prod_Square(14))\nprint(prod_Square(15))\nprint(prod_Square(16))\nprint(prod_Square(17))\nprint(prod_Square(18))\nprint(prod_Square(19))\nprint(prod_Square(20))\nprint(prod_Square(21))\nprint(prod_Square(22))\nprint(prod_Square(23))\nprint(prod_Square(24))\nprint(prod_Square(25))\nprint(prod_Square(26))\nprint(prod_Square(27))\nprint(prod_Square(28))\nprint(prod_Square(29))\nprint(prod_Square(30))\nprint(prod_Square(31))\nprint(prod_Square(32))\nprint(prod_Square(33))\nprint(prod_Square(34))\nprint(prod_Square(35))\nprint(prod_Square(36))\nprint(prod_Square(37))\nprint(prod_Square(38))\nprint(prod_Square(39))\nprint(prod_Square(40))\nprint(prod_Square(41))\nprint(prod_Square(42))\nprint(prod_Square(43))\nprint(prod_Square(44))\nprint(prod_Square(45))\nprint(prod_Square(46))\nprint(prod_Square(47))\nprint(prod_Square(48))\nprint(prod_Square(49))\nprint(prod_Square(50))\nprint(prod_Square(51))\nprint"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "<s>\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tif x1>x2:\n\t\tx1,x2=x2,x1\n\tif y1>y2:\n\t\ty1,y2=y2,y1\n\treturn (x2-x1+1)*(y2-y1+1)\n\nprint(count_Intgral_Points(1,1,2,2))\nprint(count_Intgral_Points(1,1,3,3))\nprint(count_Intgral_Points(1,1,4,4))\nprint(count_Intgral_Points(1,1,5,5))\nprint(count_Intgral_Points(1,1,6,6))\nprint(count_Intgral_Points(1,1,7,7))\nprint(count_Intgral_Points(1,1,8,8))\nprint(count_Intgral_Points(1,1,9,9))\nprint(count_Intgral_Points(1,1,10,10))\nprint(count_Intgral_Points(1,1,11,11))\nprint(count_Intgral_Points(1,1,12,12))\nprint(count_Intgral_Points(1,1,13,13))\nprint(count_Intgral_Points(1,1,14,14))\nprint(count_Intgral_Points(1,1,15,15))\nprint(count_Intgral_Points(1,1,16,16))\nprint(count_Intgral_Points(1,1,17,17))\nprint(count_Intgral_Points(1,1,18,18))\nprint(count_Intgral_Points(1,1,19,19))\nprint(count_Intgral_Points(1,1,20,20))\nprint(count_Intgral_Points(1,1,21,21))\nprint(count_Intgral_Points(1,1,22,22))\nprint(count_Intgral_Points(1,1,23,23))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Intgral_Points(1,1,2,2))\nprint(count_Intgral_Points(1,1,3,3))\nprint(count_Intgral_Points(1,1,4,4))\nprint(count_Intgral_Points(1,1,5,5))\nprint(count_Intgral_Points(1,1,6,6))\nprint(count_Intgral_Points(1,1,7,7))\nprint(count_Intgral_Points(1,1,8,8))\nprint(count_Intgral_Points(1,1,9,9))\nprint(count_Intgral_Points(1,1,10,10))\nprint(count_Intgral_Points(1,1,11,11))\nprint(count_Intgral_Points(1,1,12,12))\nprint(count_Intgral_Points(1,1,13,13))\nprint(count_Intgral_Points(1,1,14,14))\nprint(count_Intgral_Points(1,1,15,15))\nprint(count_Intgral_Points(1,1,16,16))\nprint(count_Intgral_Points(1,1,17,17))\nprint(count_Intgral_Points(1,1,18,18))\nprint(count_Intgral_Points(1,1,19,19))\nprint(count_Intgral_Points(1,1,20,20))\nprint(count_Intgral_Points(1,1,21,21))\nprint(count_Intgral_Points(1,1,22,22))\nprint(count_Intgral_Points(1,1,23,23))"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_2(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_3(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_4(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_5(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_6(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_7(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_8(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_9(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_10(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_11(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_12(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_13(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "for i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_2(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_3(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_4(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_5(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_6(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_7(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_8(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_9(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_10(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_11(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_12(str): \n\tfor i in str: \n\t\tif i.isalpha(): \n\t\t\treturn True\n\treturn False\n\ndef check_String_13(str): \n\tfor i in str: \n\t\tif i.isdigit(): \n\t\t\treturn True\n\treturn False\n\n"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "<s>\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\tnum = 0\n\tfor i in range(len(n)):\n\t\tnum += int(n[i]) * pow(8, len(n) - i - 1)\n\treturn num\n\nprint(octal_To_Decimal(\"123\"))\nprint(octal_To_Decimal(\"1234\"))\nprint(octal_To_Decimal(\"12345\"))\nprint(octal_To_Decimal(\"123456\"))\nprint(octal_To_Decimal(\"1234567\"))\nprint(octal_To_Decimal(\"12345678\"))\nprint(octal_To_Decimal(\"123456789\"))\nprint(octal_To_Decimal(\"1234567890\"))\nprint(octal_To_Decimal(\"12345678901\"))\nprint(octal_To_Decimal(\"123456789012\"))\nprint(octal_To_Decimal(\"1234567890123\"))\nprint(octal_To_Decimal(\"12345678901234\"))\nprint(octal_To_Decimal(\"123456789012345\"))\nprint(octal_To_Decimal(\"1234567890123456\"))\nprint(octal_To_Decimal(\"12345678901234567\"))\nprint(octal_To_Decimal(\"123456789012345678\"))\nprint(octal_To_Decimal(\"1234567890123456789\"))\nprint(octal_To_Decimal(\"12345678901234567890\"))\nprint(octal_To_Decimal(\"123456789012345678901\"))\nprint(octal_To_Decimal(\"1234567890123456789", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(octal_To_Decimal(\"123\"))\nprint(octal_To_Decimal(\"1234\"))\nprint(octal_To_Decimal(\"12345\"))\nprint(octal_To_Decimal(\"123456\"))\nprint(octal_To_Decimal(\"1234567\"))\nprint(octal_To_Decimal(\"12345678\"))\nprint(octal_To_Decimal(\"123456789\"))\nprint(octal_To_Decimal(\"1234567890\"))\nprint(octal_To_Decimal(\"12345678901\"))\nprint(octal_To_Decimal(\"123456789012\"))\nprint(octal_To_Decimal(\"1234567890123\"))\nprint(octal_To_Decimal(\"12345678901234\"))\nprint(octal_To_Decimal(\"123456789012345\"))\nprint(octal_To_Decimal(\"1234567890123456\"))\nprint(octal_To_Decimal(\"12345678901234567\"))\nprint(octal_To_Decimal(\"123456789012345678\"))\nprint(octal_To_Decimal(\"1234567890123456789\"))\nprint(octal_To_Decimal(\"12345678901234567890\"))\nprint(octal_To_Decimal(\"123456789012345678901\"))\nprint(octal_To_Decimal(\"1234567890123456789"}
{"ID": 558, "source": "MBPP:195", "prompt": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\n\"\"\"\ndef first(arr,x,n): \n\tl,h = 0,n-1\n\twhile l<=h:\n\t\tmid = (l+h)//2\n\t\tif arr[mid]==x:\n\t\t\tif mid==0 or arr[mid-1]!=x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\th = mid-1\n\t\telif arr[mid]<x:\n\t\t\tl = mid+1\n\t\telse:\n\t\t\th = mid-1\n\treturn -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\tmax_value = max(list1)\n\tmax_index = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == max_value:\n\t\t\tmax_index.append(i)\n\treturn max_index\n\nprint(position_max([1,2,3,4,5,6,7,8,9,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(position_max([1,2,3,4,5,6,7,8,9,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]))\nprint(position_max([1,2,3,4,5,6,7,8,9,10,10,10,10"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s>\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t# your code here\n\timport re\n\treturn re.match(r'^\\d+\\.\\d{2}$', num)\n\nprint(is_decimal('12.34'))\nprint(is_decimal('12.345'))\nprint(is_decimal('12.3'))\nprint(is_decimal('12'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_decimal('12.34'))\nprint(is_decimal('12.345'))\nprint(is_decimal('12.3'))\nprint(is_decimal('12'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34.5'))\nprint(is_decimal('12.34."}
{"ID": 572, "source": "MBPP:209", "prompt": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\t", "predict": "<s>\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\"\"\"\ndef heap_replace(heap,a):\n\theap[0] = a\n\theapify(heap)\n\ndef heapify(heap):\n\tn = len(heap)\n\ti = 0\n\twhile True:\n\t\tleft = 2*i+1\n\t\tright = 2*i+2\n\t\tsmallest = i\n\t\tif left < n and heap[left] < heap[smallest]:\n\t\t\tsmallest = left\n\t\tif right < n and heap[right] < heap[smallest]:\n\t\t\tsmallest = right\n\t\tif smallest != i:\n\t\t\theap[i],heap[smallest] = heap[smallest],heap[i]\n\t\t\ti = smallest\n\t\telse:\n\t\t\tbreak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<s>\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list(list1, list2): \n\tfor i in list1: \n\t\tif isinstance(i, list): \n\t\t\tif not check_subset_nested_list(i, list2): \n\t\t\t\treturn False\n\t\telif i not in list2: \n\t\t\treturn False\n\treturn True\n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] \nprint(check_subset_nested_list(list1, list2)) \n\nlist1 = [[1, 2], [3, 4]] \nlist2 = [[1, 2], [3, 4], [5, 6]] "}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\tif n == 0:\n\t\treturn text\n\telse:\n\t\tif text[0] in [',','.',' ']:\n\t\t\treturn ':' + replace_max_specialchar(text[1:],n-1)\n\t\telse:\n\t\t\treturn text[0] + replace_max_specialchar(text[1:],n)\n\n\nprint(replace_max_specialchar('a,b.c d',2))\nprint(replace_max_specialchar('a,b.c d',3))\nprint(replace_max_specialchar('a,b.c d',4))\nprint(replace_max_specialchar('a,b.c d',5))\nprint(replace_max_specialchar('a,b.c d',6))\nprint(replace_max_specialchar('a,b.c d',7))\nprint(replace_max_specialchar('a,b.c d',8))\nprint(replace_max_specialchar('a,b.c d',9))\nprint(replace_max_specialchar('a,b.c d',10))\nprint(replace_max_specialchar('a,b.c d',11))\nprint(replace_max_specialchar('a,b.c d',12))\nprint(replace_max_specialchar('a,b.c d',13))\nprint(replace_max_specialchar('a,b.c d',14))\nprint(replace_max_specialchar('a,b.c d',15))\nprint(replace_max_specialchar('a,b.c d',16))\nprint(replace_max_specialchar('a,b.c d',17))\nprint(replace_max_specialchar('a,b.c d',18))\nprint(replace_max_specialchar('a,b.c d',19))\nprint(replace_max_specialchar('a,b.c d',20))\nprint(replace_max_specialchar('a,b.c d',21))\nprint(replace_max_specialchar('a,b.c d',22))\nprint(replace_max_specialchar('a,b.", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(replace_max_specialchar('a,b.c d',2))\nprint(replace_max_specialchar('a,b.c d',3))\nprint(replace_max_specialchar('a,b.c d',4))\nprint(replace_max_specialchar('a,b.c d',5))\nprint(replace_max_specialchar('a,b.c d',6))\nprint(replace_max_specialchar('a,b.c d',7))\nprint(replace_max_specialchar('a,b.c d',8))\nprint(replace_max_specialchar('a,b.c d',9))\nprint(replace_max_specialchar('a,b.c d',10))\nprint(replace_max_specialchar('a,b.c d',11))\nprint(replace_max_specialchar('a,b.c d',12))\nprint(replace_max_specialchar('a,b.c d',13))\nprint(replace_max_specialchar('a,b.c d',14))\nprint(replace_max_specialchar('a,b.c d',15))\nprint(replace_max_specialchar('a,b.c d',16))\nprint(replace_max_specialchar('a,b.c d',17))\nprint(replace_max_specialchar('a,b.c d',18))\nprint(replace_max_specialchar('a,b.c d',19))\nprint(replace_max_specialchar('a,b.c d',20))\nprint(replace_max_specialchar('a,b.c d',21))\nprint(replace_max_specialchar('a,b.c d',22))\nprint(replace_max_specialchar('a,b."}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\tif high < low: \n\t\treturn -1\n\tif high == low: \n\t\treturn arr[low] \n\tif high == low + 1: \n\t\treturn min(arr[low], arr[high]) \n\t\t\n\tmid = (high + low) // 2\n\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\treturn arr[mid + 1] \n\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\treturn arr[mid] \n\tif arr[high] > arr[mid]: \n\t\treturn find_Min(arr, low, mid - 1) \n\treturn find_Min(arr, mid + 1, high) \n\narr = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, "}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "<s>\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\tnew_str = \"\"\n\tfor i in range(len(str)):\n\t\tif i % 2 == 0:\n\t\t\tnew_str += str[i]\n\treturn new_str\n\nprint(odd_values_string(\"abcdef\"))\nprint(odd_values_string(\"python\"))\nprint(odd_values_string(\"practice\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"for\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"ge", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(odd_values_string(\"abcdef\"))\nprint(odd_values_string(\"python\"))\nprint(odd_values_string(\"practice\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"for\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"geeks\"))\nprint(odd_values_string(\"ge"}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\tlist1.sort()\n\tlist1.reverse()\n\treturn list1[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 598, "source": "MBPP:235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"\ndef even_bit_set_number(n): \n\treturn n | 0xAAAAAAAA\n\nprint(even_bit_set_number(10))\nprint(even_bit_set_number(100))\nprint(even_bit_set_number(1000))\nprint(even_bit_set_number(10000))\nprint(even_bit_set_number(100000))\nprint(even_bit_set_number(1000000))\nprint(even_bit_set_number(10000000))\nprint(even_bit_set_number(100000000))\nprint(even_bit_set_number(1000000000))\nprint(even_bit_set_number(10000000000))\nprint(even_bit_set_number(100000000000))\nprint(even_bit_set_number(1000000000000))\nprint(even_bit_set_number(10000000000000))\nprint(even_bit_set_number(100000000000000))\nprint(even_bit_set_number(1000000000000000))\nprint(even_bit_set_number(10000000000000000))\nprint(even_bit_set_number(100000000000000000))\nprint(even_bit_set_number(1000000000000000000))\nprint(even_bit_set_number(10000000000000000000))\nprint(even_bit_set_number(100000000000000000000))\nprint(even_bit_set_number(1000000000000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(even_bit_set_number(10))\nprint(even_bit_set_number(100))\nprint(even_bit_set_number(1000))\nprint(even_bit_set_number(10000))\nprint(even_bit_set_number(100000))\nprint(even_bit_set_number(1000000))\nprint(even_bit_set_number(10000000))\nprint(even_bit_set_number(100000000))\nprint(even_bit_set_number(1000000000))\nprint(even_bit_set_number(10000000000))\nprint(even_bit_set_number(100000000000))\nprint(even_bit_set_number(1000000000000))\nprint(even_bit_set_number(10000000000000))\nprint(even_bit_set_number(100000000000000))\nprint(even_bit_set_number(1000000000000000))\nprint(even_bit_set_number(10000000000000000))\nprint(even_bit_set_number(100000000000000000))\nprint(even_bit_set_number(1000000000000000000))\nprint(even_bit_set_number(10000000000000000000))\nprint(even_bit_set_number(100000000000000000000))\nprint(even_bit_set_number(1000000000000000000000"}
{"ID": 602, "source": "MBPP:239", "prompt": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\"\"\"\ndef get_total_number_of_sequences(m,n): \n\t# Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    if n == 3:\n        return m * m\n    if n == 4:\n        return m * m * m\n    if n == 5:\n        return m * m * m * m\n    if n == 6:\n        return m * m * m * m * m\n    if n == 7:\n        return m * m * m * m * m * m\n    if n == 8:\n        return m * m * m * m * m * m * m\n    if n == 9:\n        return m * m * m * m * m * m * m * m\n    if n == 10:\n        return m * m * m * m * m * m * m * m * m\n    if n == 11:\n        return m * m * m * m * m * m * m * m * m * m\n    if n == 12:\n        return m * m * m * m * m * m * m * m * m * m * m\n    if n == 13:\n        return m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 14:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 15:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 16:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 17:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 18:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 19:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    if n == 3:\n        return m * m\n    if n == 4:\n        return m * m * m\n    if n == 5:\n        return m * m * m * m\n    if n == 6:\n        return m * m * m * m * m\n    if n == 7:\n        return m * m * m * m * m * m\n    if n == 8:\n        return m * m * m * m * m * m * m\n    if n == 9:\n        return m * m * m * m * m * m * m * m\n    if n == 10:\n        return m * m * m * m * m * m * m * m * m\n    if n == 11:\n        return m * m * m * m * m * m * m * m * m * m\n    if n == 12:\n        return m * m * m * m * m * m * m * m * m * m * m\n    if n == 13:\n        return m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 14:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 15:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 16:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 17:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 18:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "<s>\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t# your code goes here\n\t\n\t# return sorted(lst, key=lambda x: x[0])\n\treturn sorted(lst, key=lambda x: x[0], reverse=True)\n\n\nif __name__ == '__main__':\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7), (1, 8)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nif __name__ == '__main__':\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7), (1, 8)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), (2, 5), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]\n\tprint(sort_on_occurence(lst))\n\n\tlst = [(1, 2), (3, 4), (1, 3), (3, 5), (1, 4), ("}
{"ID": 611, "source": "MBPP:248", "prompt": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\n\"\"\"\ndef harmonic_sum(n):\n\t\"\"\"\n\tCalculate the harmonic sum of n-1.\n\t\"\"\"\n\tif n == 1:\n\t\treturn 0\n\telse:\n\t\treturn 1/n + harmonic_sum(n-1)\n\ndef test_harmonic_sum():\n\t\"\"\"\n\tTest the harmonic_sum function.\n\t\"\"\"\n\tassert harmonic_sum(1) == 0\n\tassert harmonic_sum(2) == 1\n\tassert harmonic_sum(3) == 1.5\n\tassert harmonic_sum(4) == 1.8333333333333333\n\tassert harmonic_sum(5) == 2.0833333333333335\n\tassert harmonic_sum(6) == 2.25\n\tassert harmonic_sum(7) == 2.375\n\tassert harmonic_sum(8) == 2.466666666666667\n\tassert harmonic_sum(9) == 2.5333333333333335\n\tassert harmonic_sum(10) == 2.583333333333333\n\tassert harmonic_sum(11) == 2.616666666666667\n\tassert harmonic_sum(12) == 2.6333333333333335\n\tassert harmonic_sum(13) == 2.641666666666667\n\tassert harmonic_sum(14) == 2.6458333333333335\n\tassert harmonic_sum(15) == 2.6475\n\tassert harmonic_sum(16) == 2.6483333333333335\n\tassert harmonic_sum(17) == 2.64875\n\tassert harmonic_sum(18) == 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert harmonic_sum(1) == 0\n\tassert harmonic_sum(2) == 1\n\tassert harmonic_sum(3) == 1.5\n\tassert harmonic_sum(4) == 1.8333333333333333\n\tassert harmonic_sum(5) == 2.0833333333333335\n\tassert harmonic_sum(6) == 2.25\n\tassert harmonic_sum(7) == 2.375\n\tassert harmonic_sum(8) == 2.466666666666667\n\tassert harmonic_sum(9) == 2.5333333333333335\n\tassert harmonic_sum(10) == 2.583333333333333\n\tassert harmonic_sum(11) == 2.616666666666667\n\tassert harmonic_sum(12) == 2.6333333333333335\n\tassert harmonic_sum(13) == 2.641666666666667\n\tassert harmonic_sum(14) == 2.6458333333333335\n\tassert harmonic_sum(15) == 2.6475\n\tassert harmonic_sum(16) == 2.6483333333333335\n\tassert harmonic_sum(17) == 2.64875\n\tassert harmonic_sum(18) == 2"}
{"ID": 617, "source": "MBPP:254", "prompt": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\ndef words_ae(text):\n\twords = text.split()\n\tresult = []\n\tfor word in words:\n\t\tif word[0] == 'a' or word[0] == 'e':\n\t\t\tresult.append(word)\n\treturn result\n\nprint(words_ae(\"a b c d e f g\"))\nprint(words_ae(\"a b c d e f g h\"))\nprint(words_ae(\"a b c d e f g h i\"))\nprint(words_ae(\"a b c d e f g h i j\"))\nprint(words_ae(\"a b c d e f g h i j k\"))\nprint(words_ae(\"a b c d e f g h i j k l\"))\nprint(words_ae(\"a b c d e f g h i j k l m\"))\nprint(words_ae(\"a b c d e f g h i j k l m n\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w x\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w x y\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(words_ae(\"a b c d e f g\"))\nprint(words_ae(\"a b c d e f g h\"))\nprint(words_ae(\"a b c d e f g h i\"))\nprint(words_ae(\"a b c d e f g h i j\"))\nprint(words_ae(\"a b c d e f g h i j k\"))\nprint(words_ae(\"a b c d e f g h i j k l\"))\nprint(words_ae(\"a b c d e f g h i j k l m\"))\nprint(words_ae(\"a b c d e f g h i j k l m n\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w x\"))\nprint(words_ae(\"a b c d e f g h i j k l m n o p q r s t u v w x y\"))\nprint"}
{"ID": 619, "source": "MBPP:256", "prompt": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\n\"\"\"\ndef count_Primes_nums(n):\n\tcount = 0\n\tfor i in range(2,n):\n\t\tif is_Prime(i):\n\t\t\tcount += 1\n\treturn count\n\ndef is_Prime(n):\n\tfor i in range(2,n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(count_Primes_nums(10))\nprint(count_Primes_nums(100))\nprint(count_Primes_nums(1000))\nprint(count_Primes_nums(10000))\nprint(count_Primes_nums(100000))\nprint(count_Primes_nums(1000000))\nprint(count_Primes_nums(10000000))\nprint(count_Primes_nums(100000000))\nprint(count_Primes_nums(1000000000))\nprint(count_Primes_nums(10000000000))\nprint(count_Primes_nums(100000000000))\nprint(count_Primes_nums(1000000000000))\nprint(count_Primes_nums(10000000000000))\nprint(count_Primes_nums(100000000000000))\nprint(count_Primes_nums(1000000000000000))\nprint(count_Primes_nums(10000000000000000))\nprint(count_Primes_nums(100000000000000000))\nprint(count_Primes_nums(1000000000000000000))\nprint(count_Primes_nums(100000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Primes_nums(10))\nprint(count_Primes_nums(100))\nprint(count_Primes_nums(1000))\nprint(count_Primes_nums(10000))\nprint(count_Primes_nums(100000))\nprint(count_Primes_nums(1000000))\nprint(count_Primes_nums(10000000))\nprint(count_Primes_nums(100000000))\nprint(count_Primes_nums(1000000000))\nprint(count_Primes_nums(10000000000))\nprint(count_Primes_nums(100000000000))\nprint(count_Primes_nums(1000000000000))\nprint(count_Primes_nums(10000000000000))\nprint(count_Primes_nums(100000000000000))\nprint(count_Primes_nums(1000000000000000))\nprint(count_Primes_nums(10000000000000000))\nprint(count_Primes_nums(100000000000000000))\nprint(count_Primes_nums(1000000000000000000))\nprint(count_Primes_nums(100000000000000"}
{"ID": 624, "source": "MBPP:261", "prompt": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t", "predict": "<s>\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n\t# code goes here\n\treturn tuple(map(lambda x,y: x/y, test_tup1, test_tup2))\n\nif __name__ == '__main__':\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "if __name__ == '__main__':\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_tup2))\n\n\ttest_tup1 = (10, 20, 30)\n\ttest_tup2 = (2, 4, 6)\n\tprint(division_elements(test_tup1, test_t"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\treturn h_age * 7\n\n\"\"\"\nWrite a function that takes a string and returns the number of vowels\n\"\"\"\ndef vowels(string):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a function that takes a string and returns the number of consonants\n\"\"\"\ndef consonants(string):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor char in string:\n\t\tif char not in vowels:\n\t\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a function that takes a string and returns the number of words\n\"\"\"\ndef words(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char == ' ':\n\t\t\tcount += 1\n\treturn count + 1\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor char in string:\n\t\tif char == ' ':\n\t\t\tcount += 1\n\treturn count + 1\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters\n\"\"\"\ndef characters(string):\n\treturn len(string)\n\n\"\"\"\nWrite a function that takes a string and returns the number of characters"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "<s>\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\nif __name__ == '__main__':\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 5))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 1))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 4))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 6))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 7))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 8))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 9))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 10))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 11))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 12))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 13))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 14))\n\tprint(list_split([1,2,3,4,5,6,7,8", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 3))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 5))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 1))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 4))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 6))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 7))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 8))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 9))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 10))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 11))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 12))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 13))\n\tprint(list_split([1,2,3,4,5,6,7,8,9,10], 14))\n\tprint(list_split([1,2,3,4,5,6,7,8"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\treturn ord(k)\n\nprint(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\nprint(ascii_value('e'))\nprint(ascii_value('f'))\nprint(ascii_value('g'))\nprint(ascii_value('h'))\nprint(ascii_value('i'))\nprint(ascii_value('j'))\nprint(ascii_value('k'))\nprint(ascii_value('l'))\nprint(ascii_value('m'))\nprint(ascii_value('n'))\nprint(ascii_value('o'))\nprint(ascii_value('p'))\nprint(ascii_value('q'))\nprint(ascii_value('r'))\nprint(ascii_value('s'))\nprint(ascii_value('t'))\nprint(ascii_value('u'))\nprint(ascii_value('v'))\nprint(ascii_value('w'))\nprint(ascii_value('x'))\nprint(ascii_value('y'))\nprint(ascii_value('z'))\nprint(ascii_value('A'))\nprint(ascii_value('B'))\nprint(ascii_value('C'))\nprint(ascii_value('D'))\nprint(ascii_value('E'))\nprint(ascii_value('F'))\nprint(ascii_value('G'))\nprint(ascii_value('H'))\nprint(ascii_value('I'))\nprint(ascii_value('J'))\nprint(ascii_value('K'))\nprint(ascii_value('L'))\nprint(ascii_value('M'))\nprint(ascii_value('N'))\nprint(ascii_value('O'))\nprint(ascii_value('P'))\nprint(ascii_value('Q'))\nprint(ascii_value('R'))\nprint(ascii_value('S'))\nprint(ascii_value('T'))\nprint(ascii_value('U'))\nprint(ascii_value('V'))\nprint(ascii_value('W'))\nprint(ascii_value('X'))\nprint(ascii_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\nprint(ascii_value('e'))\nprint(ascii_value('f'))\nprint(ascii_value('g'))\nprint(ascii_value('h'))\nprint(ascii_value('i'))\nprint(ascii_value('j'))\nprint(ascii_value('k'))\nprint(ascii_value('l'))\nprint(ascii_value('m'))\nprint(ascii_value('n'))\nprint(ascii_value('o'))\nprint(ascii_value('p'))\nprint(ascii_value('q'))\nprint(ascii_value('r'))\nprint(ascii_value('s'))\nprint(ascii_value('t'))\nprint(ascii_value('u'))\nprint(ascii_value('v'))\nprint(ascii_value('w'))\nprint(ascii_value('x'))\nprint(ascii_value('y'))\nprint(ascii_value('z'))\nprint(ascii_value('A'))\nprint(ascii_value('B'))\nprint(ascii_value('C'))\nprint(ascii_value('D'))\nprint(ascii_value('E'))\nprint(ascii_value('F'))\nprint(ascii_value('G'))\nprint(ascii_value('H'))\nprint(ascii_value('I'))\nprint(ascii_value('J'))\nprint(ascii_value('K'))\nprint(ascii_value('L'))\nprint(ascii_value('M'))\nprint(ascii_value('N'))\nprint(ascii_value('O'))\nprint(ascii_value('P'))\nprint(ascii_value('Q'))\nprint(ascii_value('R'))\nprint(ascii_value('S'))\nprint(ascii_value('T'))\nprint(ascii_value('U'))\nprint(ascii_value('V'))\nprint(ascii_value('W'))\nprint(ascii_value('X'))\nprint(ascii_"}
{"ID": 642, "source": "MBPP:279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef is_num_decagonal(n): \n\tif n % 10 == 0: \n\t\treturn True\n\treturn False\n\ndef decagonal_number(n): \n\tif is_num_decagonal(n): \n\t\treturn n / 10\n\treturn 0\n\ndef nth_decagonal(n): \n\ti = 1\n\twhile True: \n\t\tif is_num_decagonal(i): \n\t\t\tif n == 1: \n\t\t\t\treturn i\n\t\t\tn -= 1\n\t\ti += 1\n\nprint(nth_decagonal(10))\nprint(nth_decagonal(100))\nprint(nth_decagonal(1000))\nprint(nth_decagonal(10000))\nprint(nth_decagonal(100000))\nprint(nth_decagonal(1000000))\nprint(nth_decagonal(10000000))\nprint(nth_decagonal(100000000))\nprint(nth_decagonal(1000000000))\nprint(nth_decagonal(10000000000))\nprint(nth_decagonal(100000000000))\nprint(nth_decagonal(1000000000000))\nprint(nth_decagonal(10000000000000))\nprint(nth_decagonal(100000000000000))\nprint(nth_decagonal(1000000000000000))\nprint(nth_decagonal(10000000000000000))\nprint(nth_decagonal(100000000000000000))\nprint(nth_decagonal(1000000000000000000))\nprint(nth_decagonal(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(nth_decagonal(10))\nprint(nth_decagonal(100))\nprint(nth_decagonal(1000))\nprint(nth_decagonal(10000))\nprint(nth_decagonal(100000))\nprint(nth_decagonal(1000000))\nprint(nth_decagonal(10000000))\nprint(nth_decagonal(100000000))\nprint(nth_decagonal(1000000000))\nprint(nth_decagonal(10000000000))\nprint(nth_decagonal(100000000000))\nprint(nth_decagonal(1000000000000))\nprint(nth_decagonal(10000000000000))\nprint(nth_decagonal(100000000000000))\nprint(nth_decagonal(1000000000000000))\nprint(nth_decagonal(10000000000000000))\nprint(nth_decagonal(100000000000000000))\nprint(nth_decagonal(1000000000000000000))\nprint(nth_decagonal("}
{"ID": 647, "source": "MBPP:284", "prompt": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\t", "predict": "<s>\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\n\"\"\"\ndef check_element(list,element):\n\tfor i in list:\n\t\tif i != element:\n\t\t\treturn False\n\treturn True\n\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"a\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"b\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"c\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"d\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"e\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"f\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"g\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"h\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"i\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"j\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"k\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"l\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"m\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"n\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"o\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"p\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"q\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"r\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"s\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"t\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"u\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"v\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"w\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"x\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"y\"))\nprint(check_element([\"a\",\"a\",\"a", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_element([\"a\",\"a\",\"a\",\"a\"],\"a\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"b\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"c\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"d\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"e\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"f\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"g\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"h\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"i\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"j\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"k\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"l\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"m\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"n\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"o\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"p\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"q\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"r\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"s\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"t\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"u\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"v\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"w\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"x\"))\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"y\"))\nprint(check_element([\"a\",\"a\",\"a"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\timport re\n\treturn re.search(r'a[b]{2,3}', text)\n\nprint(text_match_two_three('aabbb'))\nprint(text_match_two_three('aabbbbb'))\nprint(text_match_two_three('aabbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(text_match_two_three('aabbb'))\nprint(text_match_two_three('aabbbbb'))\nprint(text_match_two_three('aabbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\nprint(text_match_two_three('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in range(1,len(listval)):\n\t\tif listval[i] > max_val:\n\t\t\tmax_val = listval[i]\n\treturn max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "<s>\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div(10))\nprint(sum_div(12))\nprint(sum_div(15))\nprint(sum_div(21))\nprint(sum_div(22))\nprint(sum_div(25))\nprint(sum_div(27))\nprint(sum_div(30))\nprint(sum_div(33))\nprint(sum_div(36))\nprint(sum_div(39))\nprint(sum_div(40))\nprint(sum_div(42))\nprint(sum_div(45))\nprint(sum_div(48))\nprint(sum_div(50))\nprint(sum_div(52))\nprint(sum_div(55))\nprint(sum_div(57))\nprint(sum_div(60))\nprint(sum_div(63))\nprint(sum_div(66))\nprint(sum_div(69))\nprint(sum_div(72))\nprint(sum_div(75))\nprint(sum_div(78))\nprint(sum_div(80))\nprint(sum_div(81))\nprint(sum_div(84))\nprint(sum_div(87))\nprint(sum_div(90))\nprint(sum_div(93))\nprint(sum_div(96))\nprint(sum_div(99))\nprint(sum_div(100))\nprint(sum_div(102))\nprint(sum_div(105))\nprint(sum_div(108))\nprint(sum_div(111))\nprint(sum_div(114))\nprint(sum_div(117))\nprint(sum_div(120))\nprint(sum_div(123))\nprint(sum_div(126))\nprint(sum_div(129))\nprint(sum_div(132))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_div(10))\nprint(sum_div(12))\nprint(sum_div(15))\nprint(sum_div(21))\nprint(sum_div(22))\nprint(sum_div(25))\nprint(sum_div(27))\nprint(sum_div(30))\nprint(sum_div(33))\nprint(sum_div(36))\nprint(sum_div(39))\nprint(sum_div(40))\nprint(sum_div(42))\nprint(sum_div(45))\nprint(sum_div(48))\nprint(sum_div(50))\nprint(sum_div(52))\nprint(sum_div(55))\nprint(sum_div(57))\nprint(sum_div(60))\nprint(sum_div(63))\nprint(sum_div(66))\nprint(sum_div(69))\nprint(sum_div(72))\nprint(sum_div(75))\nprint(sum_div(78))\nprint(sum_div(80))\nprint(sum_div(81))\nprint(sum_div(84))\nprint(sum_div(87))\nprint(sum_div(90))\nprint(sum_div(93))\nprint(sum_div(96))\nprint(sum_div(99))\nprint(sum_div(100))\nprint(sum_div(102))\nprint(sum_div(105))\nprint(sum_div(108))\nprint(sum_div(111))\nprint(sum_div(114))\nprint(sum_div(117))\nprint(sum_div(120))\nprint(sum_div(123))\nprint(sum_div(126))\nprint(sum_div(129))\nprint(sum_div(132))"}
{"ID": 662, "source": "MBPP:299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"\ndef max_aggregate(stdata):\n\tmax_aggregate = 0\n\tfor i in stdata:\n\t\tif i[1] > max_aggregate:\n\t\t\tmax_aggregate = i[1]\n\treturn max_aggregate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\tcount = 0\n\twhile n: \n\t\tn >>= 1\n\t\tcount += 1\n\treturn count \n\ndef most_Significant_Bit(n): \n\tcount = 0\n\twhile n: \n\t\tn >>= 1\n\t\tcount += 1\n\treturn count \n\ndef most_Significant_Set_Bit(n): \n\tcount = 0\n\twhile n: \n\t\tn >>= 1\n\t\tcount += 1\n\treturn count \n\ndef main():\n\tn = 12\n\tprint(\"The number of set bits in\", n, \"is\", set_Bit_Number(n))\n\tprint(\"The most significant bit number in\", n, \"is\", most_Significant_Bit(n))\n\tprint(\"The most significant set bit number in\", n, \"is\", most_Significant_Set_Bit(n))\n\nif __name__ == '__main__':\n\tmain()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<s>\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\tif index >= len(arr) :\n\t\treturn -1\n\telse :\n\t\trotations = rotations % len(arr)\n\t\tindex = (index - rotations) % len(arr)\n\t\tif index < 0 :\n\t\t\tindex += len(arr)\n\t\treturn arr[index]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a list.\n\"\"\"\ndef colon_list(listx,m,n):\n\treturn listx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a string.\n\"\"\"\ndef colon_string(stringx,m,n):\n\treturn stringx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a dictionary.\n\"\"\"\ndef colon_dict(dictx,m,n):\n\treturn dictx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a set.\n\"\"\"\ndef colon_set(setx,m,n):\n\treturn setx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a frozenset.\n\"\"\"\ndef colon_frozenset(frozensetx,m,n):\n\treturn frozensetx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_bytearray(bytearrayx,m,n):\n\treturn bytearrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytes.\n\"\"\"\ndef colon_bytes(bytesx,m,n):\n\treturn bytesx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a memoryview.\n\"\"\"\ndef colon_memoryview(memoryviewx,m,n):\n\treturn memoryviewx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a range.\n\"\"\"\ndef colon_range(rangex,m,n):\n\treturn rangex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a slice.\n\"\"\"\ndef colon_slice(slicex,m,n):\n\treturn slicex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a complex.\n\"\"\"\ndef colon_complex(complexx,m,n):\n\treturn complexx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a float.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a list.\n\"\"\"\ndef colon_list(listx,m,n):\n\treturn listx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a string.\n\"\"\"\ndef colon_string(stringx,m,n):\n\treturn stringx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a dictionary.\n\"\"\"\ndef colon_dict(dictx,m,n):\n\treturn dictx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a set.\n\"\"\"\ndef colon_set(setx,m,n):\n\treturn setx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a frozenset.\n\"\"\"\ndef colon_frozenset(frozensetx,m,n):\n\treturn frozensetx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_bytearray(bytearrayx,m,n):\n\treturn bytearrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytes.\n\"\"\"\ndef colon_bytes(bytesx,m,n):\n\treturn bytesx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a memoryview.\n\"\"\"\ndef colon_memoryview(memoryviewx,m,n):\n\treturn memoryviewx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a range.\n\"\"\"\ndef colon_range(rangex,m,n):\n\treturn rangex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a slice.\n\"\"\"\ndef colon_slice(slicex,m,n):\n\treturn slicex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a complex.\n\"\"\"\ndef colon_complex(complexx,m,n):\n\treturn complexx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a float.\n\"\"\"\n"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\tReturns the N largest products from two given lists.\n\t\"\"\"\n\tif N > len(nums1) * len(nums2):\n\t\traise ValueError(\"N is too large.\")\n\t\n\tproducts = []\n\tfor num1 in nums1:\n\t\tfor num2 in nums2:\n\t\t\tproducts.append(num1 * num2)\n\t\n\tproducts.sort(reverse=True)\n\treturn products[:N]\n\n\ndef test_large_product():\n\t\"\"\"\n\tTest the large_product function.\n\t\"\"\"\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 5\n\tassert large_product(nums1, nums2, N) == [90, 80, 70, 60, 50]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 10\n\tassert large_product(nums1, nums2, N) == [90, 80, 70, 60, 50, 40, 30, 20, 10, 5]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 1\n\tassert large_product(nums1, nums2, N) == [90]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 0\n\tassert large_product(nums1, nums2, N) == []\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tTest the large_product function.\n\t\"\"\"\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 5\n\tassert large_product(nums1, nums2, N) == [90, 80, 70, 60, 50]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 10\n\tassert large_product(nums1, nums2, N) == [90, 80, 70, 60, 50, 40, 30, 20, 10, 5]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 1\n\tassert large_product(nums1, nums2, N) == [90]\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9, 10]\n\tN = 0\n\tassert large_product(nums1, nums2, N) == []\n\n\tnums1 = [1, 2, 3, 4, 5]\n\tnums2 = [6, 7, 8, 9"}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t# code goes here\n    return tuple(str1)\n\n\n\"\"\"\nWrite a function to convert a given tuple to a string.\n\"\"\"\ndef tuple_to_string(tup1):\n\t# code goes here\n    return ''.join(tup1)\n\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef palindrome(str1):\n\t# code goes here\n    return str1 == str1[::-1]\n\n\n\"\"\"\nWrite a function to check if a given string is a pangram.\n\"\"\"\ndef pangram(str1):\n\t# code goes here\n    return len(set(str1)) == 26\n\n\n\"\"\"\nWrite a function to check if a given string is a isogram.\n\"\"\"\ndef isogram(str1):\n\t# code goes here\n    return len(str1) == len(set(str1))\n\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram(str1, str2):\n\t# code goes here\n    return sorted(str1) == sorted(str2)\n\n\n\"\"\"\nWrite a function to check if a given string is a permutation.\n\"\"\"\ndef permutation(str1, str2):\n\t# code goes here\n    return sorted(str1) == sorted(str2)\n\n\n\"\"\"\nWrite a function to check if a given string is a one edit distance away from another string.\n\"\"\"\ndef one_away(str1, str2):\n\t# code goes here\n    if len(str1) == len(str2):\n        return sum(1 for i, j in zip(str1, str2) if i != j) == 1\n    elif len(str1) - len(str2) == 1:\n        return str1[:-1] == str2\n    elif len(str2) - len(str1) == 1:\n        return str2[:-1] == str1\n    else:\n        return False\n\n\n\"\"\"\nWrite a function to check if a given string is a rotation of another string.\n\"\"\"\ndef rotation(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# code goes here\n    return tuple(str1)\n\n\n\"\"\"\nWrite a function to convert a given tuple to a string.\n\"\"\"\ndef tuple_to_string(tup1):\n\t# code goes here\n    return ''.join(tup1)\n\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef palindrome(str1):\n\t# code goes here\n    return str1 == str1[::-1]\n\n\n\"\"\"\nWrite a function to check if a given string is a pangram.\n\"\"\"\ndef pangram(str1):\n\t# code goes here\n    return len(set(str1)) == 26\n\n\n\"\"\"\nWrite a function to check if a given string is a isogram.\n\"\"\"\ndef isogram(str1):\n\t# code goes here\n    return len(str1) == len(set(str1))\n\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram(str1, str2):\n\t# code goes here\n    return sorted(str1) == sorted(str2)\n\n\n\"\"\"\nWrite a function to check if a given string is a permutation.\n\"\"\"\ndef permutation(str1, str2):\n\t# code goes here\n    return sorted(str1) == sorted(str2)\n\n\n\"\"\"\nWrite a function to check if a given string is a one edit distance away from another string.\n\"\"\"\ndef one_away(str1, str2):"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to toggle the right most set bit.\n\"\"\"\ndef toggle_right_most_set_bit(n): \n\treturn n ^ (n & (n - 1))\n\n\"\"\"\nWrite a python function to toggle the left most set bit.\n\"\"\"\ndef toggle_left_most_set_bit(n): \n\treturn n ^ (n + 1)\n\n\"\"\"\nWrite a python function to toggle the right most unset bit.\n\"\"\"\ndef toggle_right_most_unset_bit(n): \n\treturn n ^ (n - 1)\n\n\"\"\"\nWrite a python function to toggle the left most unset bit.\n\"\"\"\ndef toggle_left_most_unset_bit(n): \n\treturn n ^ (n + 1)\n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_right_most_set_bit(n): \n\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to clear the left most set bit.\n\"\"\"\ndef clear_left_most_set_bit(n): \n\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_right_most_unset_bit(n): \n\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to clear the left most unset bit.\n\"\"\"\ndef clear_left_most_unset_bit(n): \n\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to check if a number is a power of 2.\n\"\"\"\ndef is_power_of_2(n): \n\treturn n & (n - 1) == 0\n\n\"\"\"\nWrite a python function to check if a number is a power of 4.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to toggle the right most set bit.\n\"\"\"\ndef toggle_right_most_set_bit(n): \n\treturn n ^ (n & (n - 1))\n\n\"\"\"\nWrite a python function to toggle the left most set bit.\n\"\"\"\ndef toggle_left_most_set_bit(n): \n\treturn n ^ (n + 1)\n\n\"\"\"\nWrite a python function to toggle the right most unset bit.\n\"\"\"\ndef toggle_right_most_unset_bit(n): \n\treturn n ^ (n - 1)\n\n\"\"\"\nWrite a python function to toggle the left most unset bit.\n\"\"\"\ndef toggle_left_most_unset_bit(n): \n\treturn n ^ (n + 1)\n\n\"\"\"\nWrite a python function to clear the right most set bit.\n\"\"\"\ndef clear_right_most_set_bit(n): \n\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to clear the left most set bit.\n\"\"\"\ndef clear_left_most_set_bit(n): \n\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to clear the right most unset bit.\n\"\"\"\ndef clear_right_most_unset_bit(n): \n\treturn n & (n + 1)\n\n\"\"\"\nWrite a python function to clear the left most unset bit.\n\"\"\"\ndef clear_left_most_unset_bit(n): \n\treturn n & (n - 1)\n\n\"\"\"\nWrite a python function to check if a number is a power of 2.\n\"\"\"\ndef is_power_of_2(n): \n\treturn n & (n - 1) == 0\n\n\"\"\"\nWrite a python function to check if a number is a power of 4.\n\"\"\"\n"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t\"\"\"\n\tr: radius of the base of the cone\n\th: height of the cone\n\t\"\"\"\n\treturn 1/3 * 3.14159265359 * r**2 * h\n\nprint(volume_cone(1,2))\nprint(volume_cone(2,3))\nprint(volume_cone(3,4))\nprint(volume_cone(4,5))\nprint(volume_cone(5,6))\nprint(volume_cone(6,7))\nprint(volume_cone(7,8))\nprint(volume_cone(8,9))\nprint(volume_cone(9,10))\nprint(volume_cone(10,11))\nprint(volume_cone(11,12))\nprint(volume_cone(12,13))\nprint(volume_cone(13,14))\nprint(volume_cone(14,15))\nprint(volume_cone(15,16))\nprint(volume_cone(16,17))\nprint(volume_cone(17,18))\nprint(volume_cone(18,19))\nprint(volume_cone(19,20))\nprint(volume_cone(20,21))\nprint(volume_cone(21,22))\nprint(volume_cone(22,23))\nprint(volume_cone(23,24))\nprint(volume_cone(24,25))\nprint(volume_cone(25,26))\nprint(volume_cone(26,27))\nprint(volume_cone(27,28))\nprint(volume_cone(28,29))\nprint(volume_cone(29,30))\nprint(volume_cone(30,31))\nprint(volume_cone(31,32))\nprint(volume_cone(32,33))\nprint(volume_cone(33,34))\nprint(volume_cone(34,35", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(volume_cone(1,2))\nprint(volume_cone(2,3))\nprint(volume_cone(3,4))\nprint(volume_cone(4,5))\nprint(volume_cone(5,6))\nprint(volume_cone(6,7))\nprint(volume_cone(7,8))\nprint(volume_cone(8,9))\nprint(volume_cone(9,10))\nprint(volume_cone(10,11))\nprint(volume_cone(11,12))\nprint(volume_cone(12,13))\nprint(volume_cone(13,14))\nprint(volume_cone(14,15))\nprint(volume_cone(15,16))\nprint(volume_cone(16,17))\nprint(volume_cone(17,18))\nprint(volume_cone(18,19))\nprint(volume_cone(19,20))\nprint(volume_cone(20,21))\nprint(volume_cone(21,22))\nprint(volume_cone(22,23))\nprint(volume_cone(23,24))\nprint(volume_cone(24,25))\nprint(volume_cone(25,26))\nprint(volume_cone(26,27))\nprint(volume_cone(27,28))\nprint(volume_cone(28,29))\nprint(volume_cone(29,30))\nprint(volume_cone(30,31))\nprint(volume_cone(31,32))\nprint(volume_cone(32,33))\nprint(volume_cone(33,34))\nprint(volume_cone(34,35"}
{"ID": 679, "source": "MBPP:316", "prompt": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\n\"\"\"\ndef find_last_occurrence(A, x):\n\tstart = 0\n\tend = len(A) - 1\n\twhile start <= end:\n\t\tmid = (start + end) // 2\n\t\tif A[mid] == x:\n\t\t\tif A[mid + 1] == x:\n\t\t\t\tstart = mid + 1\n\t\t\telse:\n\t\t\t\treturn mid\n\t\telif A[mid] < x:\n\t\t\tstart = mid + 1\n\t\telse:\n\t\t\tend = mid - 1\n\treturn -1\n\n\nA = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "A = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"ID": 683, "source": "MBPP:320", "prompt": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\"\"\"\ndef sum_difference(n):\n\tsum_of_squares = 0\n\tsquare_of_sum = 0\n\tfor i in range(1, n+1):\n\t\tsum_of_squares += i**2\n\t\tsquare_of_sum += i\n\tsquare_of_sum = square_of_sum**2\n\treturn square_of_sum - sum_of_squares\n\nprint(sum_difference(10))\nprint(sum_difference(100))\nprint(sum_difference(1000))\nprint(sum_difference(10000))\nprint(sum_difference(100000))\nprint(sum_difference(1000000))\nprint(sum_difference(10000000))\nprint(sum_difference(100000000))\nprint(sum_difference(1000000000))\nprint(sum_difference(10000000000))\nprint(sum_difference(100000000000))\nprint(sum_difference(1000000000000))\nprint(sum_difference(10000000000000))\nprint(sum_difference(100000000000000))\nprint(sum_difference(1000000000000000))\nprint(sum_difference(10000000000000000))\nprint(sum_difference(100000000000000000))\nprint(sum_difference(1000000000000000000))\nprint(sum_difference(10000000000000000000))\nprint(sum_difference(100000000000000000000))\nprint(sum_difference(10000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_difference(10))\nprint(sum_difference(100))\nprint(sum_difference(1000))\nprint(sum_difference(10000))\nprint(sum_difference(100000))\nprint(sum_difference(1000000))\nprint(sum_difference(10000000))\nprint(sum_difference(100000000))\nprint(sum_difference(1000000000))\nprint(sum_difference(10000000000))\nprint(sum_difference(100000000000))\nprint(sum_difference(1000000000000))\nprint(sum_difference(10000000000000))\nprint(sum_difference(100000000000000))\nprint(sum_difference(1000000000000000))\nprint(sum_difference(10000000000000000))\nprint(sum_difference(100000000000000000))\nprint(sum_difference(1000000000000000000))\nprint(sum_difference(10000000000000000000))\nprint(sum_difference(100000000000000000000))\nprint(sum_difference(10000000"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "<s>\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\tif s == 0: \n\t\treturn 0\n\telse: \n\t\treturn s % 10 + 10 * find_demlo(s // 10)\n\n\nif __name__ == \"__main__\":\n\tprint(find_demlo(1234))\n\tprint(find_demlo(12345))\n\tprint(find_demlo(123456))\n\tprint(find_demlo(1234567))\n\tprint(find_demlo(12345678))\n\tprint(find_demlo(123456789))\n\tprint(find_demlo(1234567890))\n\tprint(find_demlo(12345678901))\n\tprint(find_demlo(123456789012))\n\tprint(find_demlo(1234567890123))\n\tprint(find_demlo(12345678901234))\n\tprint(find_demlo(123456789012345))\n\tprint(find_demlo(1234567890123456))\n\tprint(find_demlo(12345678901234567))\n\tprint(find_demlo(123456789012345678))\n\tprint(find_demlo(1234567890123456789))\n\tprint(find_demlo(12345678901234567890))\n\tprint(find_demlo(123456789012345678901))\n\tprint(find_demlo(1234567890123456789012))\n\tprint(find_demlo(1234567890", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(find_demlo(1234))\n\tprint(find_demlo(12345))\n\tprint(find_demlo(123456))\n\tprint(find_demlo(1234567))\n\tprint(find_demlo(12345678))\n\tprint(find_demlo(123456789))\n\tprint(find_demlo(1234567890))\n\tprint(find_demlo(12345678901))\n\tprint(find_demlo(123456789012))\n\tprint(find_demlo(1234567890123))\n\tprint(find_demlo(12345678901234))\n\tprint(find_demlo(123456789012345))\n\tprint(find_demlo(1234567890123456))\n\tprint(find_demlo(12345678901234567))\n\tprint(find_demlo(123456789012345678))\n\tprint(find_demlo(1234567890123456789))\n\tprint(find_demlo(12345678901234567890))\n\tprint(find_demlo(123456789012345678901))\n\tprint(find_demlo(1234567890123456789012))\n\tprint(find_demlo(1234567890"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "<s>\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t# your code here\n\t\n\t# return the word with most occurrences\n\treturn word\n\n\nif __name__ == '__main__':\n\ttest_list = [\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello"}
{"ID": 695, "source": "MBPP:332", "prompt": "\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\t", "predict": "<s>\"\"\"\nWrite a function to count character frequency of a given string.\n\"\"\"\ndef char_frequency(str1):\n\tchar_dict = {}\n\tfor char in str1:\n\t\tif char in char_dict:\n\t\t\tchar_dict[char] += 1\n\t\telse:\n\t\t\tchar_dict[char] = 1\n\treturn char_dict\n\nprint(char_frequency(\"abcdabcd\"))\nprint(char_frequency(\"abcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(char_frequency(\"abcdabcd\"))\nprint(char_frequency(\"abcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(char_frequency(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint("}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'[a-zA-Z]+[.?!]*$', text)\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'^[a-zA-Z]+[.?!]*', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'[a-zA-Z]+[.?!]*', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]+[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]+[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation, but only if the word is at least 3 characters long.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]{3,}[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation, but only if the word is at least 3 characters long and is followed by a space.\n\"\"\"\ndef text_match_word(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# your code here\n\timport re\n\treturn re.search(r'[a-zA-Z]+[.?!]*$', text)\n\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'^[a-zA-Z]+[.?!]*', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'[a-zA-Z]+[.?!]*', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]+[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]+[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation, but only if the word is at least 3 characters long.\n\"\"\"\ndef text_match_word(text):\n\t# your code here\n\timport re\n\treturn re.search(r'([a-zA-Z]{3,}[.?!]*)', text)\n\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation, and captures the word and the punctuation, but only if the word is at least 3 characters long and is followed by a space.\n\"\"\"\ndef text_match_word("}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t# Your code here\n\treturn tuple(sorted(s))\n\n\n\"\"\"\nWrite a function to convert the given tuple into a set.\n\"\"\"\ndef tuple_to_set(t):\n\t# Your code here\n\treturn set(t)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(sorted(s))\n\n\n\"\"\"\nWrite a function to convert the given tuple into a set.\n\"\"\"\ndef tuple_to_set(t):\n\t# Your code here\n\treturn set(t)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\t# Your code here\n\treturn dict(l)\n\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\t# Your code here\n\treturn list(d.items())\n\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\tmin_range = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "min_range}
{"ID": 708, "source": "MBPP:345", "prompt": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\n\"\"\"\ndef diff_consecutivenums(nums):\n\tdiff = []\n\tfor i in range(len(nums)-1):\n\t\tdiff.append(nums[i+1]-nums[i])\n\treturn diff\n\nprint(diff_consecutivenums([1,2,3,4,5]))\nprint(diff_consecutivenums([1,2,3,4,5,6]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(diff_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(diff_consecutivenums([1,2,3,4,5]))\nprint(diff_consecutivenums([1,2,3,4,5,6]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(diff_"}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "<s>\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\tn = len(M)\n\tdp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\tfor i in range(n+1):\n\t\tdp[i][0] = 1\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, n+1):\n\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1]\n\t\t\tif M[i-1] == 1:\n\t\t\t\tdp[i][j] -= dp[i-1][j-1]\n\treturn dp[n][n]\n\n\nif __name__ == \"__main__\":\n\tM = [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tM = [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\tfor i in string :\n\t\tif i != '0' and i != '1' :\n\t\t\treturn False\n\treturn True\n\nprint(check('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(check('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\tif len(s) == 0:\n\t\treturn 0\n\tif len(s) == 1:\n\t\treturn 1\n\t\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == s[0]:\n\t\t\tcount += 1\n\t\n\tif count == len(s):\n\t\treturn 1\n\t\n\treturn minimum_Length(s[count:]) + minimum_Length(s[:count])\n\n\nprint(minimum_Length(\"abccccdd\"))\nprint(minimum_Length(\"abccccdddd\"))\nprint(minimum_Length(\"abccccddddd\"))\nprint(minimum_Length(\"abccccdddddd\"))\nprint(minimum_Length(\"abccccddddddd\"))\nprint(minimum_Length(\"abccccdddddddd\"))\nprint(minimum_Length(\"abccccddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddddddd\"))\nprint(minimum", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(minimum_Length(\"abccccdd\"))\nprint(minimum_Length(\"abccccdddd\"))\nprint(minimum_Length(\"abccccddddd\"))\nprint(minimum_Length(\"abccccdddddd\"))\nprint(minimum_Length(\"abccccddddddd\"))\nprint(minimum_Length(\"abccccdddddddd\"))\nprint(minimum_Length(\"abccccddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccdddddddddddddddddddddd\"))\nprint(minimum_Length(\"abccccddddddddddddddddddddddd\"))\nprint(minimum"}
{"ID": 716, "source": "MBPP:353", "prompt": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove a specified column from a given nested list.\n\"\"\"\ndef remove_column(list1, n):\n\t# your code here\n\tfor i in range(len(list1)):\n\t\tdel list1[i][n]\n\treturn list1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b*b - 4*a*c\n\tif d < 0:\n\t\treturn False\n\telse:\n\t\tx1 = (-b + d**0.5)/(2*a)\n\t\tx2 = (-b - d**0.5)/(2*a)\n\t\tif x1 == 2*x2 or x2 == 2*x1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\"\"\"\n\t:param nums: list of numbers\n\t:return: item with maximum occurrences\n\t\"\"\"\n\tmax_count = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tcount = nums.count(item)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_item = item\n\treturn max_item\n\n\nif __name__ == '__main__':\n\tnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9,"}
{"ID": 728, "source": "MBPP:365", "prompt": "\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to count the number of digits of a given number.\n\"\"\"\ndef count_Digit(n):\n\tcount = 0\n\twhile n > 0:\n\t\tn = n // 10\n\t\tcount += 1\n\treturn count\n\nprint(count_Digit(12345))\nprint(count_Digit(123456789))\nprint(count_Digit(1234567890))\nprint(count_Digit(12345678901))\nprint(count_Digit(123456789012))\nprint(count_Digit(1234567890123))\nprint(count_Digit(12345678901234))\nprint(count_Digit(123456789012345))\nprint(count_Digit(1234567890123456))\nprint(count_Digit(12345678901234567))\nprint(count_Digit(123456789012345678))\nprint(count_Digit(1234567890123456789))\nprint(count_Digit(12345678901234567890))\nprint(count_Digit(123456789012345678901))\nprint(count_Digit(1234567890123456789012))\nprint(count_Digit(12345678901234567890123))\nprint(count_Digit(123456789012345678901234))\nprint(count_Digit(1234567890123456789012345))\nprint(count_Digit(12345678901234", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Digit(12345))\nprint(count_Digit(123456789))\nprint(count_Digit(1234567890))\nprint(count_Digit(12345678901))\nprint(count_Digit(123456789012))\nprint(count_Digit(1234567890123))\nprint(count_Digit(12345678901234))\nprint(count_Digit(123456789012345))\nprint(count_Digit(1234567890123456))\nprint(count_Digit(12345678901234567))\nprint(count_Digit(123456789012345678))\nprint(count_Digit(1234567890123456789))\nprint(count_Digit(12345678901234567890))\nprint(count_Digit(123456789012345678901))\nprint(count_Digit(1234567890123456789012))\nprint(count_Digit(12345678901234567890123))\nprint(count_Digit(123456789012345678901234))\nprint(count_Digit(1234567890123456789012345))\nprint(count_Digit(12345678901234"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t\"\"\"\n\tReturns the largest product of the pair of adjacent elements from a given list of integers.\n\t\"\"\"\n\tif len(list_nums) < 2:\n\t\treturn None\n\tmax_product = list_nums[0] * list_nums[1]\n\tfor i in range(1, len(list_nums) - 1):\n\t\tif list_nums[i] * list_nums[i + 1] > max_product:\n\t\t\tmax_product = list_nums[i] * list_nums[i + 1]\n\treturn max_product\n\n\nprint(adjacent_num_product([1, 2, 3, 4, 5]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(adjacent_num_product([1, 2, 3, 4, 5]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, "}
{"ID": 730, "source": "MBPP:367", "prompt": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\t", "predict": "<s>\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tif abs(height(root.left) - height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right): \n\t\treturn True\n\treturn False\n\ndef height(root): \n\tif root is None: \n\t\treturn 0\n\treturn 1 + max(height(root.left), height(root.right))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\tif left_element > right_element:\n\t\treturn left_element\n\tmid_element = (left_element + right_element) // 2\n\tif A[mid_element] == mid_element:\n\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\telse:\n\t\treturn smallest_missing(A, left_element, mid_element)\n\ndef smallest_missing_element(A):\n\treturn smallest_missing(A, 0, len(A) - 1)\n\nA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<s>\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\treturn int(n/m)*m\n\nprint(round_num(12,5))\nprint(round_num(13,5))\nprint(round_num(14,5))\nprint(round_num(15,5))\nprint(round_num(16,5))\nprint(round_num(17,5))\nprint(round_num(18,5))\nprint(round_num(19,5))\nprint(round_num(20,5))\nprint(round_num(21,5))\nprint(round_num(22,5))\nprint(round_num(23,5))\nprint(round_num(24,5))\nprint(round_num(25,5))\nprint(round_num(26,5))\nprint(round_num(27,5))\nprint(round_num(28,5))\nprint(round_num(29,5))\nprint(round_num(30,5))\nprint(round_num(31,5))\nprint(round_num(32,5))\nprint(round_num(33,5))\nprint(round_num(34,5))\nprint(round_num(35,5))\nprint(round_num(36,5))\nprint(round_num(37,5))\nprint(round_num(38,5))\nprint(round_num(39,5))\nprint(round_num(40,5))\nprint(round_num(41,5))\nprint(round_num(42,5))\nprint(round_num(43,5))\nprint(round_num(44,5))\nprint(round_num(45,5))\nprint(round_num(46,5))\nprint(round_num(47,5))\nprint(round_num(48,5))\nprint(round_num(49,5))\nprint(round_num(50,5))\nprint(round_num(51,5))\nprint(round_num(52,5))\nprint(round_num(53,5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(round_num(12,5))\nprint(round_num(13,5))\nprint(round_num(14,5))\nprint(round_num(15,5))\nprint(round_num(16,5))\nprint(round_num(17,5))\nprint(round_num(18,5))\nprint(round_num(19,5))\nprint(round_num(20,5))\nprint(round_num(21,5))\nprint(round_num(22,5))\nprint(round_num(23,5))\nprint(round_num(24,5))\nprint(round_num(25,5))\nprint(round_num(26,5))\nprint(round_num(27,5))\nprint(round_num(28,5))\nprint(round_num(29,5))\nprint(round_num(30,5))\nprint(round_num(31,5))\nprint(round_num(32,5))\nprint(round_num(33,5))\nprint(round_num(34,5))\nprint(round_num(35,5))\nprint(round_num(36,5))\nprint(round_num(37,5))\nprint(round_num(38,5))\nprint(round_num(39,5))\nprint(round_num(40,5))\nprint(round_num(41,5))\nprint(round_num(42,5))\nprint(round_num(43,5))\nprint(round_num(44,5))\nprint(round_num(45,5))\nprint(round_num(46,5))\nprint(round_num(47,5))\nprint(round_num(48,5))\nprint(round_num(49,5))\nprint(round_num(50,5))\nprint(round_num(51,5))\nprint(round_num(52,5))\nprint(round_num(53,5"}
{"ID": 745, "source": "MBPP:382", "prompt": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\n\"\"\"\ndef find_rotation_count(A):\n\t\"\"\"\n\t:param A: list, sorted in ascending order, with some number of elements rotated\n\t:return: int, number of elements rotated\n\t\"\"\"\n\tif len(A) == 0:\n\t\treturn 0\n\tif len(A) == 1:\n\t\treturn 0\n\tif len(A) == 2:\n\t\treturn 1\n\tif A[0] < A[1]:\n\t\treturn 0\n\tif A[0] > A[1]:\n\t\treturn 1\n\tif A[0] == A[1]:\n\t\treturn 1\n\tif A[0] == A[2]:\n\t\treturn 2\n\tif A[0] < A[2]:\n\t\treturn 2\n\tif A[0] > A[2]:\n\t\treturn 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\treturn n ^ 0xaaaaaaaa\n\nif __name__ == \"__main__\" : \n\tn = int(input(\"Enter the number : \"))\n\tprint(even_bit_toggle_number(n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\ti = 1\n\twhile i <= n: \n\t\ti = i * 2\n\treturn i // 2\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(45))\nprint(highest_Power_of_2(50))\nprint(highest_Power_of_2(51))\nprint(highest_Power_of_2(64))\nprint(highest_Power_of_2(65))\nprint(highest_Power_of_2(70))\nprint(highest_Power_of_2(71))\nprint(highest_Power_of_2(80))\nprint(highest_Power_of_2(81))\nprint(highest_Power_of_2(90))\nprint(highest_Power_of_2(91))\nprint(highest_Power_of_2(100))\nprint(highest_Power_of_2(101))\nprint(highest_Power_of_2(110))\nprint(highest_Power_of_2(111))\nprint(highest_Power_of_2(120))\nprint(highest_Power_of_2(121))\nprint(highest_Power_of_2(130))\nprint(highest_Power_of_2(131))\nprint(highest_Power_of_2(140))\nprint(highest_Power_of_2(141))\nprint(highest_Power_of_2(150))\nprint(highest_Power_of_2(151))\nprint(highest_Power_of_2(160))\nprint(highest", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(highest_Power_of_2(10))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(45))\nprint(highest_Power_of_2(50))\nprint(highest_Power_of_2(51))\nprint(highest_Power_of_2(64))\nprint(highest_Power_of_2(65))\nprint(highest_Power_of_2(70))\nprint(highest_Power_of_2(71))\nprint(highest_Power_of_2(80))\nprint(highest_Power_of_2(81))\nprint(highest_Power_of_2(90))\nprint(highest_Power_of_2(91))\nprint(highest_Power_of_2(100))\nprint(highest_Power_of_2(101))\nprint(highest_Power_of_2(110))\nprint(highest_Power_of_2(111))\nprint(highest_Power_of_2(120))\nprint(highest_Power_of_2(121))\nprint(highest_Power_of_2(130))\nprint(highest_Power_of_2(131))\nprint(highest_Power_of_2(140))\nprint(highest_Power_of_2(141))\nprint(highest_Power_of_2(150))\nprint(highest_Power_of_2(151))\nprint(highest_Power_of_2(160))\nprint(highest"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t\"\"\"\n\tReturns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in range(len(str1)):\n\t\tif str1.count(str1[i]) == 1:\n\t\t\treturn str1[i]\n\treturn None\n\nprint(first_non_repeating_character(\"abcdabcd\"))\nprint(first_non_repeating_character(\"abcdabcde\"))\nprint(first_non_repeating_character(\"abcabc\"))\nprint(first_non_repeating_character(\"abcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_non_repeating_character(\"abcdabcd\"))\nprint(first_non_repeating_character(\"abcdabcde\"))\nprint(first_non_repeating_character(\"abcabc\"))\nprint(first_non_repeating_character(\"abcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(first_non_repeating_character(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<s>\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\timport re\n\tif re.match(r'^([a-zA-Z]).*\\1$', string):\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(check_char('abc'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_char('abc'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcd'))\n"}
{"ID": 762, "source": "MBPP:399", "prompt": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t", "predict": "<s>\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\n\t# your code here\n\treturn tuple(x^y for x,y in zip(test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))\n# (5, 7, 5)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7)))\n# (5, 7, 5, 7)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8)))\n# (5, 7, 5, 7, 8)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9)))\n# (5, 7, 5, 7, 8, 9)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10)))\n# (5, 7, 5, 7, 8, 9, 10)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11)))\n# (5, 7, 5, 7, 8, 9, 10, 11)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12)))\n# (5, 7, 5, 7, 8, 9, 10, 11, 12)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n# (5, 7, 5, 7, 8, 9, 10, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))\n# (5, 7, 5)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7)))\n# (5, 7, 5, 7)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8)))\n# (5, 7, 5, 7, 8)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9)))\n# (5, 7, 5, 7, 8, 9)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10)))\n# (5, 7, 5, 7, 8, 9, 10)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11)))\n# (5, 7, 5, 7, 8, 9, 10, 11)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12)))\n# (5, 7, 5, 7, 8, 9, 10, 11, 12)\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n# (5, 7, 5, 7, 8, 9, 10, "}
{"ID": 763, "source": "MBPP:400", "prompt": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\t", "predict": "<s>\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\n\"\"\"\ndef extract_freq(test_list):\n\tfreq_dict = {}\n\tfor i in test_list:\n\t\tif i in freq_dict:\n\t\t\tfreq_dict[i] += 1\n\t\telse:\n\t\t\tfreq_dict[i] = 1\n\treturn freq_dict\n\n\ntest_list = [(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = [(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n# Driver Code\nstr = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Driver Code\nstr = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_valid_URL(str)):\n\tprint(\"Valid URL\")\nelse:\n\tprint(\"Invalid URL\")\n\nstr = \"https://www.geeksforgeeks.org/python-programming-language\"\nif(is_"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t# convert to string\n\ts = str(n)\n\t# convert to list\n\tl = list(s)\n\t# sort list\n\tl.sort()\n\t# reverse list\n\tl.reverse()\n\t# convert back to string\n\ts = ''.join(l)\n\t# convert back to int\n\tn = int(s)\n\treturn n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<s>\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2:\n\t\treturn []\n\tif k == 0:\n\t\treturn []\n\tif k == 1:\n\t\treturn [[nums1[0], nums2[0]]]\n\tif k == 2:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]]]\n\tif k == 3:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]]]\n\tif k == 4:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]]]\n\tif k == 5:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]], [nums1[2], nums2[0]]]\n\tif k == 6:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]], [nums1[2], nums2[0]], [nums1[2], nums2[1]]]\n\tif k == 7:\n\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]], [nums1[2], nums2[0]], [nums1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\t\treturn [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]], [nums1[2], nums2[0]], [nums1"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = list1[0][0] * list1[0][1]\n\tfor i in range(len(list1)):\n\t\tif list1[i][0] * list1[i][1] < min_product:\n\t\t\tmin_product = list1[i][0] * list1[i][1]\n\treturn min_product\n\nprint(min_product_tuple([(1,2), (3,4), (5,6)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_product_tuple([(1,2), (3,4), (5,6)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20)]))\nprint(min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (1"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "<s>\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t# code goes here\n    return [i[0] for i in Input if i[0] in [j[0] for j in Input]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t# + means one or more\n\treturn text.match(\"a+b\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's.\n\"\"\"\ndef text_match_two(text):\n\t# + means one or more\n\treturn text.match(\"a+b+c\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's.\n\"\"\"\ndef text_match_three(text):\n\t# + means one or more\n\treturn text.match(\"a+b+c+d\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's and then one or more e's.\n\"\"\"\ndef text_match_four(text):\n\t# + means one or more\n\treturn text.match(\"a+b+c+d+e\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's and then one or more e's and then one or more f's.\n\"\"\"\ndef text_match_five(text):\n\t# + means one or more\n\treturn text.match(\"a+b+c+d+e+f\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's and then one or more e's and then one or more f's and then one or more g's.\n\"\"\"\ndef text_match_six(text):\n\t# + means one or more\n\treturn text.match(\"a+b+c+d+e+f+g\")\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's and then one or more e's and then one or more f's and then one or", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "Write a function that matches a string that has an a followed by one or more b's and then one or more c's and then one or more d's and then one or more e's and then one or more f's and then one or"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\timport re\n\treturn re.sub(r\"\\s+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not digits in the given string using regex.\n\"\"\"\ndef remove_non_digits(text1):\n\timport re\n\treturn re.sub(r\"\\D+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not alphabets in the given string using regex.\n\"\"\"\ndef remove_non_alphabets(text1):\n\timport re\n\treturn re.sub(r\"\\W+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not alphanumeric in the given string using regex.\n\"\"\"\ndef remove_non_alphanumeric(text1):\n\timport re\n\treturn re.sub(r\"\\W+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not vowels in the given string using regex.\n\"\"\"\ndef remove_non_vowels(text1):\n\timport re\n\treturn re.sub(r\"[^aeiouAEIOU]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not consonants in the given string using regex.\n\"\"\"\ndef remove_non_consonants(text1):\n\timport re\n\treturn re.sub(r\"[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not uppercase in the given string using regex.\n\"\"\"\ndef remove_non_uppercase(text1):\n\timport re\n\treturn re.sub(r\"[^A-Z]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not lowercase in the given string using regex.\n\"\"\"\ndef remove_non_lowercase(text1):\n\timport re\n\treturn re.sub(r\"[^a-z]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not punctu", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a function to remove all the characters which are not digits in the given string using regex.\n\"\"\"\ndef remove_non_digits(text1):\n\timport re\n\treturn re.sub(r\"\\D+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not alphabets in the given string using regex.\n\"\"\"\ndef remove_non_alphabets(text1):\n\timport re\n\treturn re.sub(r\"\\W+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not alphanumeric in the given string using regex.\n\"\"\"\ndef remove_non_alphanumeric(text1):\n\timport re\n\treturn re.sub(r\"\\W+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not vowels in the given string using regex.\n\"\"\"\ndef remove_non_vowels(text1):\n\timport re\n\treturn re.sub(r\"[^aeiouAEIOU]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not consonants in the given string using regex.\n\"\"\"\ndef remove_non_consonants(text1):\n\timport re\n\treturn re.sub(r\"[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not uppercase in the given string using regex.\n\"\"\"\ndef remove_non_uppercase(text1):\n\timport re\n\treturn re.sub(r\"[^A-Z]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not lowercase in the given string using regex.\n\"\"\"\ndef remove_non_lowercase(text1):\n\timport re\n\treturn re.sub(r\"[^a-z]+\", \"\", text1)\n\n\n\"\"\"\nWrite a function to remove all the characters which are not punctu"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<s>\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w*\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b',", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w*\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re\n\treturn re.search(r'\\b\\w*z\\w{1,}\\b', text)\n\t# LAB(replace solution)\n\t# return\n\t# LAB(end solution)\n\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last letter.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\t# +++your code here+++\n\t# LAB(begin solution)\n\timport re"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "<s>\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\toctalNum = 0\n\ti = 1\n\twhile deciNum > 0:\n\t\tremainder = deciNum % 8\n\t\toctalNum = octalNum + (remainder * i)\n\t\tdeciNum = deciNum // 8\n\t\ti = i * 10\n\treturn octalNum\n\nprint(decimal_to_Octal(10))\nprint(decimal_to_Octal(100))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(10000))\nprint(decimal_to_Octal(100000))\nprint(decimal_to_Octal(1000000))\nprint(decimal_to_Octal(10000000))\nprint(decimal_to_Octal(100000000))\nprint(decimal_to_Octal(1000000000))\nprint(decimal_to_Octal(10000000000))\nprint(decimal_to_Octal(100000000000))\nprint(decimal_to_Octal(1000000000000))\nprint(decimal_to_Octal(10000000000000))\nprint(decimal_to_Octal(100000000000000))\nprint(decimal_to_Octal(1000000000000000))\nprint(decimal_to_Octal(10000000000000000))\nprint(decimal_to_Octal(100000000000000000))\nprint(decimal_to_Octal(1000000000000000000))\nprint(decimal_to_Octal(1000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decimal_to_Octal(10))\nprint(decimal_to_Octal(100))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(10000))\nprint(decimal_to_Octal(100000))\nprint(decimal_to_Octal(1000000))\nprint(decimal_to_Octal(10000000))\nprint(decimal_to_Octal(100000000))\nprint(decimal_to_Octal(1000000000))\nprint(decimal_to_Octal(10000000000))\nprint(decimal_to_Octal(100000000000))\nprint(decimal_to_Octal(1000000000000))\nprint(decimal_to_Octal(10000000000000))\nprint(decimal_to_Octal(100000000000000))\nprint(decimal_to_Octal(1000000000000000))\nprint(decimal_to_Octal(10000000000000000))\nprint(decimal_to_Octal(100000000000000000))\nprint(decimal_to_Octal(1000000000000000000))\nprint(decimal_to_Octal(1000000000000"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\tl.sort()\n\tfor i in range(len(l)-1):\n\t\tif l[i+1]-l[i] != 1:\n\t\t\treturn False\n\treturn True\n\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,4,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,4,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,"}
{"ID": 836, "source": "MBPP:473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t", "predict": "<s>\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n\t# your code goes here\n\treturn tuple(set(test_list1) & set(test_list2))\n\n\nif __name__ == '__main__':\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (4, 5, 6, 7, 8)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (4, 5, 6, 7, 8)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nif __name__ == '__main__':\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (4, 5, 6, 7, 8)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (4, 5, 6, 7, 8)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_list2 = (1, 2, 3, 4, 5)\n\tprint(tuple_intersection(test_list1, test_list2))\n\n\ttest_list1 = (1, 2, 3, 4, 5)\n\ttest_"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<s>\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key.\n\"\"\"\ndef sort_counter_by_key(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\n\"\"\"\nWrite a function to sort counter by value in descending order.\n\"\"\"\ndef sort_counter_by_value_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\n\"\"\"\nWrite a function to sort counter by key in descending order.\n\"\"\"\ndef sort_counter_by_key_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0], reverse=True)\n\n\n\"\"\"\nWrite a function to sort counter by value in ascending order.\n\"\"\"\ndef sort_counter_by_value_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key in ascending order.\n\"\"\"\ndef sort_counter_by_key_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\n\"\"\"\nWrite a function to sort counter by value in ascending order.\n\"\"\"\ndef sort_counter_by_value_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key in ascending order.\n\"\"\"\ndef sort_counter_by_key_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\n\"\"\"\nWrite a function to sort counter by value in ascending order.\n\"\"\"\ndef sort_counter_by_value_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key in ascending order.\n\"\"\"\ndef sort_counter_by_key_asc(dict1):\n\treturn sorted(dict1.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\n\"\"\"\nWrite a function to sort counter by value in descending order.\n\"\"\"\ndef sort_counter_by_value_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\n\"\"\"\nWrite a function to sort counter by key in descending order.\n\"\"\"\ndef sort_counter_by_key_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0], reverse=True)\n\n\n\"\"\"\nWrite a function to sort counter by value in ascending order.\n\"\"\"\ndef sort_counter_by_value_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key in ascending order.\n\"\"\"\ndef sort_counter_by_key_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\n\"\"\"\nWrite a function to sort counter by value in ascending order.\n\"\"\"\ndef sort_counter_by_value_asc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\n\"\"\"\nWrite a function to sort counter by key in ascending order.\n\"\"\"\ndef sort_counter_by_key_asc(dict1):"}
{"ID": 841, "source": "MBPP:478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\"\"\"\ndef remove_lowercase(str1):\n\t\"\"\"\n\tReturns a string with all lowercase substrings removed.\n\t\"\"\"\n\tresult = \"\"\n\tfor i in range(len(str1)):\n\t\tif str1[i].isupper():\n\t\t\tresult += str1[i]\n\treturn result\n\nprint(remove_lowercase(\"abcdEfGh\"))\nprint(remove_lowercase(\"abcdefg\"))\nprint(remove_lowercase(\"ABCDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcdefg\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_lowercase(\"abcdEfGh\"))\nprint(remove_lowercase(\"abcdefg\"))\nprint(remove_lowercase(\"ABCDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcdefg\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))\nprint(remove_lowercase(\"abcDEFG\"))"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\tmax_char = str1[0]\n\tmax_count = 0\n\tfor char in str1:\n\t\tcount = str1.count(char)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_char = char\n\treturn max_char\n\nprint(get_max_occuring_char(\"abcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(get_max_occuring_char(\"abcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max_occuring_char(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"))\nprint(get_max"}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "<s>\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\nif __name__ == '__main__':\n\tprint(match('A string with 26 letters'))\n\tprint(match('A string with 26 letters and 1 number 5'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol #'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b and 1 null character\\0'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b and 1 null character\\0 and 1 escape character\\e'))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(match('A string with 26 letters'))\n\tprint(match('A string with 26 letters and 1 number 5'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol #'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b and 1 null character\\0'))\n\tprint(match('A string with 26 letters and 1 number 5 and 1 symbol # and 1 space and 1 tab\\t and 1 newline\\n and 1 carriage return\\r and 1 form feed\\f and 1 backspace\\b and 1 null character\\0 and 1 escape character\\e'))\n"}
{"ID": 852, "source": "MBPP:489", "prompt": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\n\"\"\"\ndef frequency_Of_Largest(n,arr): \n\tmax_freq = 0\n\tmax_value = arr[0]\n\tfor i in range(1, n):\n\t\tif arr[i] > max_value:\n\t\t\tmax_value = arr[i]\n\t\t\tmax_freq = 1\n\t\telif arr[i] == max_value:\n\t\t\tmax_freq += 1\n\treturn max_freq\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t# your code here\n\treturn int(''.join(map(str, test_tup)), 2)\n\nif __name__ == '__main__':\n\ttest_tup = (1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_tup = (1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"ID": 861, "source": "MBPP:498", "prompt": "\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find gcd of two positive integers.\n\"\"\"\ndef gcd(x, y):\n\tif x > y:\n\t\tsmaller = y\n\telse:\n\t\tsmaller = x\n\tfor i in range(1, smaller+1):\n\t\tif((x % i == 0) and (y % i == 0)):\n\t\t\tgcd = i\n\treturn gcd\n\nprint(gcd(12, 18))\nprint(gcd(12, 24))\nprint(gcd(12, 30))\nprint(gcd(12, 36))\nprint(gcd(12, 48))\nprint(gcd(12, 60))\nprint(gcd(12, 72))\nprint(gcd(12, 84))\nprint(gcd(12, 96))\nprint(gcd(12, 108))\nprint(gcd(12, 120))\nprint(gcd(12, 132))\nprint(gcd(12, 144))\nprint(gcd(12, 156))\nprint(gcd(12, 168))\nprint(gcd(12, 180))\nprint(gcd(12, 192))\nprint(gcd(12, 204))\nprint(gcd(12, 216))\nprint(gcd(12, 228))\nprint(gcd(12, 240))\nprint(gcd(12, 252))\nprint(gcd(12, 264))\nprint(gcd(12, 276))\nprint(gcd(12, 288))\nprint(gcd(12, 300))\nprint(gcd(12, 312))\nprint(gcd(12, 324))\nprint(gcd(12, 336))\nprint(gcd(12, 348))\nprint(gcd(12, 360))\nprint(gcd(12, 372))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(gcd(12, 18))\nprint(gcd(12, 24))\nprint(gcd(12, 30))\nprint(gcd(12, 36))\nprint(gcd(12, 48))\nprint(gcd(12, 60))\nprint(gcd(12, 72))\nprint(gcd(12, 84))\nprint(gcd(12, 96))\nprint(gcd(12, 108))\nprint(gcd(12, 120))\nprint(gcd(12, 132))\nprint(gcd(12, 144))\nprint(gcd(12, 156))\nprint(gcd(12, 168))\nprint(gcd(12, 180))\nprint(gcd(12, 192))\nprint(gcd(12, 204))\nprint(gcd(12, 216))\nprint(gcd(12, 228))\nprint(gcd(12, 240))\nprint(gcd(12, 252))\nprint(gcd(12, 264))\nprint(gcd(12, 276))\nprint(gcd(12, 288))\nprint(gcd(12, 300))\nprint(gcd(12, 312))\nprint(gcd(12, 324))\nprint(gcd(12, 336))\nprint(gcd(12, 348))\nprint(gcd(12, 360))\nprint(gcd(12, 372))\nprint"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "<s>\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t# your code here\n\treturn ''.join(list)\n\nif __name__ == '__main__':\n\tprint(concatenate_elements(['a', 'b', 'c', 'd']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', '", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(concatenate_elements(['a', 'b', 'c', 'd']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']))\n\tprint(concatenate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', '"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<s>\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t# Write your code here\n\tn = len(A)\n\ti = 0\n\tj = 0\n\twhile i < n:\n\t\tif A[i] != 0:\n\t\t\tA[j] = A[i]\n\t\t\tj += 1\n\t\ti += 1\n\twhile j < n:\n\t\tA[j] = 0\n\t\tj += 1\n\treturn A\n\n\nA = [1, 2, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "A = [1, 2, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\ti = 0\n\tj = 0\n\twhile i < len(l1) and j < len(l2):\n\t\tif l1[i] == l2[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\treturn False\n\treturn True\n\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2"}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\tsum = 0\n\tcount = 0\n\twhile n > 0 : \n\t\tif n % 2 != 0 : \n\t\t\tsum += n\n\t\t\tcount += 1\n\t\tn -= 1\n\treturn sum / count\n\nprint(average_Odd(5))\nprint(average_Odd(15))\nprint(average_Odd(100))\nprint(average_Odd(1000))\nprint(average_Odd(10000))\nprint(average_Odd(100000))\nprint(average_Odd(1000000))\nprint(average_Odd(10000000))\nprint(average_Odd(100000000))\nprint(average_Odd(1000000000))\nprint(average_Odd(10000000000))\nprint(average_Odd(100000000000))\nprint(average_Odd(1000000000000))\nprint(average_Odd(10000000000000))\nprint(average_Odd(100000000000000))\nprint(average_Odd(1000000000000000))\nprint(average_Odd(10000000000000000))\nprint(average_Odd(100000000000000000))\nprint(average_Odd(1000000000000000000))\nprint(average_Odd(10000000000000000000))\nprint(average_Odd(100000000000000000000))\nprint(average_Odd(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(average_Odd(5))\nprint(average_Odd(15))\nprint(average_Odd(100))\nprint(average_Odd(1000))\nprint(average_Odd(10000))\nprint(average_Odd(100000))\nprint(average_Odd(1000000))\nprint(average_Odd(10000000))\nprint(average_Odd(100000000))\nprint(average_Odd(1000000000))\nprint(average_Odd(10000000000))\nprint(average_Odd(100000000000))\nprint(average_Odd(1000000000000))\nprint(average_Odd(10000000000000))\nprint(average_Odd(100000000000000))\nprint(average_Odd(1000000000000000))\nprint(average_Odd(10000000000000000))\nprint(average_Odd(100000000000000000))\nprint(average_Odd(1000000000000000000))\nprint(average_Odd(10000000000000000000))\nprint(average_Odd(100000000000000000000))\nprint(average_Odd(1"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<s>\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t\"\"\"\n\t:param test_tuple: tuple\n\t:return: dict\n\t\"\"\"\n\telement_freq = {}\n\tfor element in test_tuple:\n\t\tif type(element) == tuple:\n\t\t\tfor sub_element in element:\n\t\t\t\tif sub_element in element_freq:\n\t\t\t\t\telement_freq[sub_element] += 1\n\t\t\t\telse:\n\t\t\t\t\telement_freq[sub_element] = 1\n\t\telse:\n\t\t\tif element in element_freq:\n\t\t\t\telement_freq[element] += 1\n\t\t\telse:\n\t\t\t\telement_freq[element] = 1\n\treturn element_freq\n\n\nif __name__ == '__main__':\n\ttest_tuple = (1, 2, 3, (4, 5, 6, 7, 8, 9, 10), 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_tuple = (1, 2, 3, (4, 5, 6, 7, 8, 9, 10), 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,"}
{"ID": 890, "source": "MBPP:527", "prompt": "\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\t", "predict": "<s>\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\n\"\"\"\ndef get_pairs_count(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\n\nif __name__ == '__main__':\n\tarr = [1, 5, 7, -1, 5]\n\tsum = 6\n\tn = len(arr)\n\tprint(get_pairs_count(arr, n, sum))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<s>\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\tif len(str1) != len(str2):\n\t\treturn False\n\t\n\tstr1_dict = {}\n\tfor char in str1:\n\t\tif char in str1_dict:\n\t\t\tstr1_dict[char] += 1\n\t\telse:\n\t\t\tstr1_dict[char] = 1\n\t\n\tfor char in str2:\n\t\tif char in str1_dict:\n\t\t\tstr1_dict[char] -= 1\n\t\telse:\n\t\t\treturn False\n\t\n\tfor key in str1_dict:\n\t\tif str1_dict[key] != 0:\n\t\t\treturn False\n\t\n\treturn True\n\nprint(check_permutation('abc', 'bca'))\nprint(check_permutation('abc', 'bcd'))\nprint(check_permutation('abc', 'bcaa'))\nprint(check_permutation('abc', 'bca'))\nprint(check_permutation('abc', 'bcaa'))\nprint(check_permutation('abc', 'bcaaa'))\nprint(check_permutation('abc', 'bcaaaa'))\nprint(check_permutation('abc', 'bcaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaaaa'))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_permutation('abc', 'bca'))\nprint(check_permutation('abc', 'bcd'))\nprint(check_permutation('abc', 'bcaa'))\nprint(check_permutation('abc', 'bca'))\nprint(check_permutation('abc', 'bcaa'))\nprint(check_permutation('abc', 'bcaaa'))\nprint(check_permutation('abc', 'bcaaaa'))\nprint(check_permutation('abc', 'bcaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaaa'))\nprint(check_permutation('abc', 'bcaaaaaaaaaaaaaaaaa'))\nprint"}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<s>\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn 0\n\tfor i in range(len(text)):\n\t\tif text[i] == pattern[0]:\n\t\t\tmatch = True\n\t\t\tfor j in range(len(pattern)):\n\t\t\t\tif text[i+j] != pattern[j]:\n\t\t\t\t\tmatch = False\n\t\t\t\t\tbreak\n\t\t\tif match:\n\t\t\t\treturn i\n\treturn -1\n\ndef search_literal_location(pattern,text):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn 0\n\tfor i in range(len(text)):\n\t\tif text[i] == pattern[0]:\n\t\t\tmatch = True\n\t\t\tfor j in range(len(pattern)):\n\t\t\t\tif text[i+j] != pattern[j]:\n\t\t\t\t\tmatch = False\n\t\t\t\t\tbreak\n\t\t\tif match:\n\t\t\t\treturn i\n\treturn -1\n\ndef search_literal_location_recursive(pattern,text,location=0):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn location\n\tif len(text) == 0:\n\t\treturn -1\n\tif text[0] == pattern[0]:\n\t\tmatch = True\n\t\tfor j in range(len(pattern)):\n\t\t\tif text[j] != pattern[j]:\n\t\t\t\tmatch = False\n\t\t\t\tbreak\n\t\tif match:\n\t\t\treturn location\n\treturn search_literal_location_recursive(pattern,text[1:],location+1)\n\ndef search_literal_location_recursive_2(pattern,text,location=0):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn 0\n\tfor i in range(len(text)):\n\t\tif text[i] == pattern[0]:\n\t\t\tmatch = True\n\t\t\tfor j in range(len(pattern)):\n\t\t\t\tif text[i+j] != pattern[j]:\n\t\t\t\t\tmatch = False\n\t\t\t\t\tbreak\n\t\t\tif match:\n\t\t\t\treturn i\n\treturn -1\n\ndef search_literal_location(pattern,text):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn 0\n\tfor i in range(len(text)):\n\t\tif text[i] == pattern[0]:\n\t\t\tmatch = True\n\t\t\tfor j in range(len(pattern)):\n\t\t\t\tif text[i+j] != pattern[j]:\n\t\t\t\t\tmatch = False\n\t\t\t\t\tbreak\n\t\t\tif match:\n\t\t\t\treturn i\n\treturn -1\n\ndef search_literal_location_recursive(pattern,text,location=0):\n\t\"\"\"\n\tSearch a pattern in a text and return the location of the pattern in the text.\n\t\"\"\"\n\tif len(pattern) == 0:\n\t\treturn location\n\tif len(text) == 0:\n\t\treturn -1\n\tif text[0] == pattern[0]:"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\n\n\"\"\"\nWrite a function to select the even items of a list.\n\"\"\"\ndef even_items(list):\n\treturn [list[i] for i in range(0,len(list),2)]\n\n\n\"\"\"\nWrite a function to select the odd items of a list.\n\"\"\"\ndef odd_items(list):\n\treturn [list[i] for i in range(1,len(list),2)]\n\n\n\"\"\"\nWrite a function to select the first items of a list.\n\"\"\"\ndef first_items(list,n):\n\treturn [list[i] for i in range(n)]\n\n\n\"\"\"\nWrite a function to select the last items of a list.\n\"\"\"\ndef last_items(list,n):\n\treturn [list[i] for i in range(len(list)-n,len(list))]\n\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list,n):\n\treturn [list[i] for i in range(len(list)//2-n//2,len(list)//2+n//2)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to select the even items of a list.\n\"\"\"\ndef even_items(list):\n\treturn [list[i] for i in range(0,len(list),2)]\n\n\n\"\"\"\nWrite a function to select the odd items of a list.\n\"\"\"\ndef odd_items(list):\n\treturn [list[i] for i in range(1,len(list),2)]\n\n\n\"\"\"\nWrite a function to select the first items of a list.\n\"\"\"\ndef first_items(list,n):\n\treturn [list[i] for i in range(n)]\n\n\n\"\"\"\nWrite a function to select the last items of a list.\n\"\"\"\ndef last_items(list,n):\n\treturn [list[i] for i in range(len(list)-n,len(list))]\n\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list,n):\n\treturn [list[i] for i in range(len(list)//2-n//2,len(list)//2+n//2)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a list in a given range.\n\"\"\"\ndef range_items(list,start,end):\n\treturn [list[i] for i in range(start,end)]\n\n\n\"\"\"\nWrite a function to select the items of a"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', ':', text)\n\nprint(fill_spaces('Hello, World!'))\nprint(fill_spaces('Hello World!'))\nprint(fill_spaces('Hello.World!'))\nprint(fill_spaces('Hello World'))\nprint(fill_spaces('Hello World.'))\nprint(fill_spaces('Hello World,'))\nprint(fill_spaces('Hello World,.'))\nprint(fill_spaces('Hello World, .'))\nprint(fill_spaces('Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . '))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World, .'))\nprint(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(fill_spaces('Hello World, . Hello World, . Hello World, . Hello World, . Hello World, . Hello World"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "<s>\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\treturn (n ^ (1 << 0) ^ (1 << 31))\n\n\n#test\nprint(toggle_F_and_L_bits(10))\nprint(toggle_F_and_L_bits(100))\nprint(toggle_F_and_L_bits(1000))\nprint(toggle_F_and_L_bits(10000))\nprint(toggle_F_and_L_bits(100000))\nprint(toggle_F_and_L_bits(1000000))\nprint(toggle_F_and_L_bits(10000000))\nprint(toggle_F_and_L_bits(100000000))\nprint(toggle_F_and_L_bits(1000000000))\nprint(toggle_F_and_L_bits(10000000000))\nprint(toggle_F_and_L_bits(100000000000))\nprint(toggle_F_and_L_bits(1000000000000))\nprint(toggle_F_and_L_bits(10000000000000))\nprint(toggle_F_and_L_bits(100000000000000))\nprint(toggle_F_and_L_bits(1000000000000000))\nprint(toggle_F_and_L_bits(10000000000000000))\nprint(toggle_F_and_L_bits(100000000000000000))\nprint(toggle_F_and_L_bits(1000000000000000000))\nprint(toggle_F_and_L_bits(10000000000000000000))\nprint(toggle_F_and_L_bits(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(toggle_F_and_L_bits(10))\nprint(toggle_F_and_L_bits(100))\nprint(toggle_F_and_L_bits(1000))\nprint(toggle_F_and_L_bits(10000))\nprint(toggle_F_and_L_bits(100000))\nprint(toggle_F_and_L_bits(1000000))\nprint(toggle_F_and_L_bits(10000000))\nprint(toggle_F_and_L_bits(100000000))\nprint(toggle_F_and_L_bits(1000000000))\nprint(toggle_F_and_L_bits(10000000000))\nprint(toggle_F_and_L_bits(100000000000))\nprint(toggle_F_and_L_bits(1000000000000))\nprint(toggle_F_and_L_bits(10000000000000))\nprint(toggle_F_and_L_bits(100000000000000))\nprint(toggle_F_and_L_bits(1000000000000000))\nprint(toggle_F_and_L_bits(10000000000000000))\nprint(toggle_F_and_L_bits(100000000000000000))\nprint(toggle_F_and_L_bits(1000000000000000000))\nprint(toggle_F_and_L_bits(10000000000000000000))\nprint(toggle_F_and_L_bits(1"}
{"ID": 913, "source": "MBPP:550", "prompt": "\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\n\"\"\"\ndef find_Max(arr,low,high): \n\tif high < low: \n\t\treturn -1\n\tif high == low: \n\t\treturn arr[low] \n\tif high == low + 1: \n\t\treturn max(arr[low], arr[high]) \n\t\t\n\tmid = (high + low) // 2\n\t\n\tif mid < high and arr[mid] < arr[mid + 1]: \n\t\treturn arr[mid + 1] \n\t\n\tif mid > low and arr[mid - 1] > arr[mid]: \n\t\treturn arr[mid] \n\t\n\tif arr[high] > arr[mid]: \n\t\treturn find_Max(arr, low, mid - 1) \n\t\n\treturn find_Max(arr, mid + 1, high) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 8", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 8"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\tif len(seq_nums) == 1:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(seq_nums)-1):\n\t\t\tif seq_nums[i+1] - seq_nums[i] != 1:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(Seq_Linear([1,2,3,4,5]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Seq_Linear([1,2,3,4,5]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint("}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t# your code here\n\treturn float(test_tup[0]) + float(test_tup[1])/10\n\nif __name__ == '__main__':\n\tprint(tuple_to_float((1, 2)))\n\tprint(tuple_to_float((2, 3)))\n\tprint(tuple_to_float((3, 4)))\n\tprint(tuple_to_float((4, 5)))\n\tprint(tuple_to_float((5, 6)))\n\tprint(tuple_to_float((6, 7)))\n\tprint(tuple_to_float((7, 8)))\n\tprint(tuple_to_float((8, 9)))\n\tprint(tuple_to_float((9, 0)))\n\tprint(tuple_to_float((1, 0)))\n\tprint(tuple_to_float((0, 0)))\n\tprint(tuple_to_float((0, 1)))\n\tprint(tuple_to_float((0, 2)))\n\tprint(tuple_to_float((0, 3)))\n\tprint(tuple_to_float((0, 4)))\n\tprint(tuple_to_float((0, 5)))\n\tprint(tuple_to_float((0, 6)))\n\tprint(tuple_to_float((0, 7)))\n\tprint(tuple_to_float((0, 8)))\n\tprint(tuple_to_float((0, 9)))\n\tprint(tuple_to_float((1, 1)))\n\tprint(tuple_to_float((1, 2)))\n\tprint(tuple_to_float((1, 3)))\n\tprint(tuple_to_float((1, 4)))\n\tprint(tuple_to_float((1, 5)))\n\tprint(tuple_to_float((1, 6)))\n\tprint(tuple_to_float((1, 7)))\n\tprint(tuple_to_float((1, 8)))\n\tprint(tuple_to_float((1, 9)))\n\tprint(tuple_to_float((2, 0)))\n\tprint(tuple_to_float((2, 1)))\n\tprint(tuple_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(tuple_to_float((1, 2)))\n\tprint(tuple_to_float((2, 3)))\n\tprint(tuple_to_float((3, 4)))\n\tprint(tuple_to_float((4, 5)))\n\tprint(tuple_to_float((5, 6)))\n\tprint(tuple_to_float((6, 7)))\n\tprint(tuple_to_float((7, 8)))\n\tprint(tuple_to_float((8, 9)))\n\tprint(tuple_to_float((9, 0)))\n\tprint(tuple_to_float((1, 0)))\n\tprint(tuple_to_float((0, 0)))\n\tprint(tuple_to_float((0, 1)))\n\tprint(tuple_to_float((0, 2)))\n\tprint(tuple_to_float((0, 3)))\n\tprint(tuple_to_float((0, 4)))\n\tprint(tuple_to_float((0, 5)))\n\tprint(tuple_to_float((0, 6)))\n\tprint(tuple_to_float((0, 7)))\n\tprint(tuple_to_float((0, 8)))\n\tprint(tuple_to_float((0, 9)))\n\tprint(tuple_to_float((1, 1)))\n\tprint(tuple_to_float((1, 2)))\n\tprint(tuple_to_float((1, 3)))\n\tprint(tuple_to_float((1, 4)))\n\tprint(tuple_to_float((1, 5)))\n\tprint(tuple_to_float((1, 6)))\n\tprint(tuple_to_float((1, 7)))\n\tprint(tuple_to_float((1, 8)))\n\tprint(tuple_to_float((1, 9)))\n\tprint(tuple_to_float((2, 0)))\n\tprint(tuple_to_float((2, 1)))\n\tprint(tuple_"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<s>\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t\"\"\"\n\tReturns the digit distance between two integers.\n\t\"\"\"\n\tn1_digits = [int(digit) for digit in str(n1)]\n\tn2_digits = [int(digit) for digit in str(n2)]\n\treturn sum([abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)])\n\n\nprint(digit_distance_nums(123, 321))\nprint(digit_distance_nums(123, 123))\nprint(digit_distance_nums(123, 1234))\nprint(digit_distance_nums(123, 12345))\nprint(digit_distance_nums(123, 123456))\nprint(digit_distance_nums(123, 1234567))\nprint(digit_distance_nums(123, 12345678))\nprint(digit_distance_nums(123, 123456789))\nprint(digit_distance_nums(123, 1234567890))\nprint(digit_distance_nums(123, 12345678901))\nprint(digit_distance_nums(123, 123456789012))\nprint(digit_distance_nums(123, 1234567890123))\nprint(digit_distance_nums(123, 12345678901234))\nprint(digit_distance_nums(123, 123456789012345))\nprint(digit_distance_nums(123, 1234567890123456))\nprint(digit_distance_nums(123, 12345678901234567", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(digit_distance_nums(123, 321))\nprint(digit_distance_nums(123, 123))\nprint(digit_distance_nums(123, 1234))\nprint(digit_distance_nums(123, 12345))\nprint(digit_distance_nums(123, 123456))\nprint(digit_distance_nums(123, 1234567))\nprint(digit_distance_nums(123, 12345678))\nprint(digit_distance_nums(123, 123456789))\nprint(digit_distance_nums(123, 1234567890))\nprint(digit_distance_nums(123, 12345678901))\nprint(digit_distance_nums(123, 123456789012))\nprint(digit_distance_nums(123, 1234567890123))\nprint(digit_distance_nums(123, 12345678901234))\nprint(digit_distance_nums(123, 123456789012345))\nprint(digit_distance_nums(123, 1234567890123456))\nprint(digit_distance_nums(123, 12345678901234567"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<s>\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_length = 0\n\tfor i in range(len(lst)):\n\t\tif len(lst[i]) > max_length:\n\t\t\tmax_length = len(lst[i])\n\treturn max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "<s>\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t\"\"\"\n\tReturns the sum of the digits of a non-negative integer.\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn (n % 10) + sum_digits(n // 10)\n\nprint(sum_digits(123))\nprint(sum_digits(1234))\nprint(sum_digits(12345))\nprint(sum_digits(123456))\nprint(sum_digits(1234567))\nprint(sum_digits(12345678))\nprint(sum_digits(123456789))\nprint(sum_digits(1234567890))\nprint(sum_digits(12345678901))\nprint(sum_digits(123456789012))\nprint(sum_digits(1234567890123))\nprint(sum_digits(12345678901234))\nprint(sum_digits(123456789012345))\nprint(sum_digits(1234567890123456))\nprint(sum_digits(12345678901234567))\nprint(sum_digits(123456789012345678))\nprint(sum_digits(1234567890123456789))\nprint(sum_digits(12345678901234567890))\nprint(sum_digits(123456789012345678901))\nprint(sum_digits(1234567890123456789012))\nprint(sum_digits(1234567890", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_digits(123))\nprint(sum_digits(1234))\nprint(sum_digits(12345))\nprint(sum_digits(123456))\nprint(sum_digits(1234567))\nprint(sum_digits(12345678))\nprint(sum_digits(123456789))\nprint(sum_digits(1234567890))\nprint(sum_digits(12345678901))\nprint(sum_digits(123456789012))\nprint(sum_digits(1234567890123))\nprint(sum_digits(12345678901234))\nprint(sum_digits(123456789012345))\nprint(sum_digits(1234567890123456))\nprint(sum_digits(12345678901234567))\nprint(sum_digits(123456789012345678))\nprint(sum_digits(1234567890123456789))\nprint(sum_digits(12345678901234567890))\nprint(sum_digits(123456789012345678901))\nprint(sum_digits(1234567890123456789012))\nprint(sum_digits(1234567890"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<s>\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\tfor i in range(len(list1)-1):\n\t\tif list1[i] > list1[i+1]:\n\t\t\treturn False\n\treturn True\n\nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,"}
{"ID": 933, "source": "MBPP:570", "prompt": "\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\n\"\"\"\ndef remove_words(list1, charlist):\n\t\"\"\"\n\t:param list1: list of strings\n\t:param charlist: list of characters\n\t:return: list of strings\n\t\"\"\"\n\tnew_list = []\n\tfor word in list1:\n\t\tfor char in charlist:\n\t\t\tif char in word:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tnew_list.append(word)\n\treturn new_list\n\n\nif __name__ == '__main__':\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'g']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm', 'n']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm', 'n', 'b']))\n\tprint(remove_words(['apple", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'g']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm', 'n']))\n\tprint(remove_words(['apple', 'banana', 'mango', 'guava', 'pear'], ['a', 'e', 'i', 'o', 'u', 'p', 'r', 'g', 'm', 'n', 'b']))\n\tprint(remove_words(['apple"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "<s>\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t# Your code here\n\t\n\t# Test Cases\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17,18]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17,18,19]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17,18]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11,12,13,14,15,16,17,18,19]))\n\tprint(interleave_lists([1,2,3],[4,5,6],[7,8,9"}
{"ID": 943, "source": "MBPP:580", "prompt": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t", "predict": "<s>\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\n\"\"\"\ndef extract_even(test_tuple):\n\t# your code here\n\treturn tuple(x for x in test_tuple if isinstance(x, int) and x % 2 == 0)\n\n\nif __name__ == '__main__':\n\tprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n\t# (2, 4, 6, 8, 10)\n\n\tprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (11, 12, 13, 14, 15, 16, 17, 18, 19, 20))))\n\t# (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n\n\tprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, 22, 23, 24, 25, 26, 27, 28, 29, 30))))\n\t# (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)\n\n\tprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, 22, 23, 24, 25, 26, 27, 28, 2", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tprint(extract_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, 22, 23, 24, 25, 26, 27, 28, 2"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<s>\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\treturn x*cos(y), x*sin(y)\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n\"\"\"\ndef rect_polar(x,y):\n\treturn sqrt(x**2 + y**2), atan2(y,x)\n\n\"\"\"\nWrite a function to convert rectangular coordinates to spherical coordinates.\n\"\"\"\ndef rect_spherical(x,y,z):\n\treturn sqrt(x**2 + y**2 + z**2), atan2(y,x), atan2(sqrt(x**2 + y**2),z)\n\n\"\"\"\nWrite a function to convert spherical coordinates to rectangular coordinates.\n\"\"\"\ndef spherical_rect(r,theta,phi):\n\treturn r*sin(phi)*cos(theta), r*sin(phi)*sin(theta), r*cos(phi)\n\n\"\"\"\nWrite a function to convert spherical coordinates to polar coordinates.\n\"\"\"\ndef spherical_polar(r,theta,phi):\n\treturn r*sin(phi), r*cos(phi)\n\n\"\"\"\nWrite a function to convert polar coordinates to spherical coordinates.\n\"\"\"\ndef polar_spherical(r,theta):\n\treturn r, theta, pi/2\n\n\"\"\"\nWrite a function to convert rectangular coordinates to cylindrical coordinates.\n\"\"\"\ndef rect_cylindrical(x,y,z):\n\treturn sqrt(x**2 + y**2), atan2(y,x), z\n\n\"\"\"\nWrite a function to convert cylindrical coordinates to rectangular coordinates.\n\"\"\"\ndef cylindrical_rect(r,theta,z):\n\treturn r*cos(theta), r*sin(theta), z\n\n\"\"\"\nWrite a function to convert cylindrical coordinates to spherical coordinates.\n\"\"\"\ndef cylindrical_spherical(r,theta,z):\n\treturn r, theta, atan2(sqrt(r**2 - z**2),z)\n\n\"\"\"\nWrite a function to convert spherical coordinates to cylindrical coordinates.\n\"\"\"\ndef spherical_cylindrical(r,theta,phi):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return x*cos(y), x*sin(y)\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n\"\"\"\ndef rect_polar(x,y):\n\treturn sqrt(x**2 + y**2), atan2(y,x)\n\n\"\"\"\nWrite a function to convert rectangular coordinates to spherical coordinates.\n\"\"\"\ndef rect_spherical(x,y,z):\n\treturn sqrt(x**2 + y**2 + z**2), atan2(y,x), atan2(sqrt(x**2 + y**2),z)\n\n\"\"\"\nWrite a function to convert spherical coordinates to rectangular coordinates.\n\"\"\"\ndef spherical_rect(r,theta,phi):\n\treturn r*sin(phi)*cos(theta), r*sin(phi)*sin(theta), r*cos(phi)\n\n\"\"\"\nWrite a function to convert spherical coordinates to polar coordinates.\n\"\"\"\ndef spherical_polar(r,theta,phi):\n\treturn r*sin(phi), r*cos(phi)\n\n\"\"\"\nWrite a function to convert polar coordinates to spherical coordinates.\n\"\"\"\ndef polar_spherical(r,theta):\n\treturn r, theta, pi/2\n\n\"\"\"\nWrite a function to convert rectangular coordinates to cylindrical coordinates.\n\"\"\"\ndef rect_cylindrical(x,y,z):"}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "<s>\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\tip = ip.split('.')\n\tfor i in range(len(ip)):\n\t\tif ip[i] == '0':\n\t\t\tip[i] = ''\n\treturn '.'.join(ip)\n\nprint(removezero_ip('000.000.000.000'))\nprint(removezero_ip('000.000.000.001'))\nprint(removezero_ip('000.000.000.010'))\nprint(removezero_ip('000.000.000.100'))\nprint(removezero_ip('000.000.001.000'))\nprint(removezero_ip('000.000.010.000'))\nprint(removezero_ip('000.000.100.000'))\nprint(removezero_ip('000.001.000.000'))\nprint(removezero_ip('000.010.000.000'))\nprint(removezero_ip('000.100.000.000'))\nprint(removezero_ip('001.000.000.000'))\nprint(removezero_ip('010.000.000.000'))\nprint(removezero_ip('100.000.000.000'))\nprint(removezero_ip('100.000.000.001'))\nprint(removezero_ip('100.000.000.010'))\nprint(removezero_ip('100.000.000.100'))\nprint(removezero_ip('100.000.001.000'))\nprint(removezero_ip('100.000.010.000'))\nprint(removezero_ip('100.000.100.000'))\nprint(removezero_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(removezero_ip('000.000.000.000'))\nprint(removezero_ip('000.000.000.001'))\nprint(removezero_ip('000.000.000.010'))\nprint(removezero_ip('000.000.000.100'))\nprint(removezero_ip('000.000.001.000'))\nprint(removezero_ip('000.000.010.000'))\nprint(removezero_ip('000.000.100.000'))\nprint(removezero_ip('000.001.000.000'))\nprint(removezero_ip('000.010.000.000'))\nprint(removezero_ip('000.100.000.000'))\nprint(removezero_ip('001.000.000.000'))\nprint(removezero_ip('010.000.000.000'))\nprint(removezero_ip('100.000.000.000'))\nprint(removezero_ip('100.000.000.001'))\nprint(removezero_ip('100.000.000.010'))\nprint(removezero_ip('100.000.000.100'))\nprint(removezero_ip('100.000.001.000'))\nprint(removezero_ip('100.000.010.000'))\nprint(removezero_ip('100.000.100.000'))\nprint(removezero_"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<s>\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t\"\"\"\n\tReturns True if n is not prime, False otherwise.\n\t\"\"\"\n\tif n < 2:\n\t\treturn True\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn True\n\treturn False\n\nprint(is_not_prime(1))\nprint(is_not_prime(2))\nprint(is_not_prime(3))\nprint(is_not_prime(4))\nprint(is_not_prime(5))\nprint(is_not_prime(6))\nprint(is_not_prime(7))\nprint(is_not_prime(8))\nprint(is_not_prime(9))\nprint(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_not_prime(1))\nprint(is_not_prime(2))\nprint(is_not_prime(3))\nprint(is_not_prime(4))\nprint(is_not_prime(5))\nprint(is_not_prime(6))\nprint(is_not_prime(7))\nprint(is_not_prime(8))\nprint(is_not_prime(9))\nprint(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<s>\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\treturn bin(a^b).count('1') == 1\n\nprint(differ_At_One_Bit_Pos(10,11))\nprint(differ_At_One_Bit_Pos(10,12))\nprint(differ_At_One_Bit_Pos(10,13))\nprint(differ_At_One_Bit_Pos(10,14))\nprint(differ_At_One_Bit_Pos(10,15))\nprint(differ_At_One_Bit_Pos(10,16))\nprint(differ_At_One_Bit_Pos(10,17))\nprint(differ_At_One_Bit_Pos(10,18))\nprint(differ_At_One_Bit_Pos(10,19))\nprint(differ_At_One_Bit_Pos(10,20))\nprint(differ_At_One_Bit_Pos(10,21))\nprint(differ_At_One_Bit_Pos(10,22))\nprint(differ_At_One_Bit_Pos(10,23))\nprint(differ_At_One_Bit_Pos(10,24))\nprint(differ_At_One_Bit_Pos(10,25))\nprint(differ_At_One_Bit_Pos(10,26))\nprint(differ_At_One_Bit_Pos(10,27))\nprint(differ_At_One_Bit_Pos(10,28))\nprint(differ_At_One_Bit_Pos(10,29))\nprint(differ_At_One_Bit_Pos(10,30))\nprint(differ_At_One_Bit_Pos(10,31))\nprint(differ_At_One_Bit_Pos(10,32))\nprint(differ_At_One_Bit_Pos(10,33))\nprint(differ_At_One_Bit_Pos(10,34))\nprint(differ_At_One_Bit_Pos(10,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(differ_At_One_Bit_Pos(10,11))\nprint(differ_At_One_Bit_Pos(10,12))\nprint(differ_At_One_Bit_Pos(10,13))\nprint(differ_At_One_Bit_Pos(10,14))\nprint(differ_At_One_Bit_Pos(10,15))\nprint(differ_At_One_Bit_Pos(10,16))\nprint(differ_At_One_Bit_Pos(10,17))\nprint(differ_At_One_Bit_Pos(10,18))\nprint(differ_At_One_Bit_Pos(10,19))\nprint(differ_At_One_Bit_Pos(10,20))\nprint(differ_At_One_Bit_Pos(10,21))\nprint(differ_At_One_Bit_Pos(10,22))\nprint(differ_At_One_Bit_Pos(10,23))\nprint(differ_At_One_Bit_Pos(10,24))\nprint(differ_At_One_Bit_Pos(10,25))\nprint(differ_At_One_Bit_Pos(10,26))\nprint(differ_At_One_Bit_Pos(10,27))\nprint(differ_At_One_Bit_Pos(10,28))\nprint(differ_At_One_Bit_Pos(10,29))\nprint(differ_At_One_Bit_Pos(10,30))\nprint(differ_At_One_Bit_Pos(10,31))\nprint(differ_At_One_Bit_Pos(10,32))\nprint(differ_At_One_Bit_Pos(10,33))\nprint(differ_At_One_Bit_Pos(10,34))\nprint(differ_At_One_Bit_Pos(10,"}
{"ID": 970, "source": "MBPP:7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\t", "predict": "<s>\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\n\"\"\"\ndef find_char_long(text):\n\timport re\n\treturn re.findall(r'\\b\\w{4,}\\b', text)\n\nprint(find_char_long(\"I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy\"))\nprint(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(find_char_long(\"I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy. I am a good boy"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "<s>\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
