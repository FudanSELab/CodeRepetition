{"ID": 1, "source": "HumanEval:HumanEval/1", "prompt": "from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\"\"\"\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass\n\n\n\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other"}
{"ID": 2, "source": "HumanEval:HumanEval/2", "prompt": "\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:", "predict": "<s>\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n\"\"\"\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return number - int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n3\n\"\"\"\ndef truncate_number(number: float) -> int:\n    return int(number)\n\n\n\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than"}
{"ID": 4, "source": "HumanEval:HumanEval/4", "prompt": "from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:", "predict": "<s>from typing import List\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Median Absolute Deviation\naround the median of this dataset.\nMedian Absolute Deviation is the median absolute difference between each\nelement and a centerpoint (median in this case):\nMAD = median | x - x_median |\n>>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\"\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Percentage\nError around the mean of this dataset.\nMean Absolute Percentage Error is the average absolute difference between\neach element and a centerpoint (mean in this case) divided by the centerpoint:\nMAPE = average | x - x_mean | / x_mean\n>>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0])\n0.25\n\"\"\"\ndef mean_absolute_percentage_error(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) / mean for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Median Absolute Percentage\nError around the median of this dataset.\nMedian Absolute Percentage Error is the median absolute difference between\neach element and a centerpoint (median in this case) divided by the centerpoint:\nMAPE = median | x - x_median | / x_median\n>>> median_absolute_percent", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    if len(numbers) == 0:\n        return 0.0\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Mean Absolute Percentage\nError around the mean of this dataset.\nMean Absolute Percentage Error is the average absolute difference between\neach element and a centerpoint (mean in this case) divided by the centerpoint:\nMAPE = average | x - x_mean | / x_mean\n>>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0])\n0.25\n\"\"\"\ndef mean_absolute_percentage_error(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) / mean for x in numbers) / len(numbers)\n\n\n\"\"\" For a given list of input numbers, calculate Median Absolute Percentage\nError around the median of this dataset.\nMedian Absolute Percentage Error is the median absolute difference between\neach element and a centerpoint (median in this case) divided by the centerpoint:\nMAPE = median | x - x_median | / x_median"}
{"ID": 5, "source": "HumanEval:HumanEval/5", "prompt": "from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v2([], 4)\n[]\n>>> intersperse_v2([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v2(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + intersperse_v2(numbers[1:], delimeter) + [delimeter]\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v3([], 4)\n[]\n>>> intersperse_v3([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v3(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse_v3(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v4([], 4)\n[]\n>>> intersperse_v4([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v4(numbers: List[int], delimeter: int) -> List[int]:\n   ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v2([], 4)\n[]\n>>> intersperse_v2([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v2(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + intersperse_v2(numbers[1:], delimeter) + [delimeter]\n\n\n\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse_v3([], 4)\n[]\n>>> intersperse_v3([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\"\"\"\ndef intersperse_v3(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse_v3(numbers[1:], delimeter)\n\n"}
{"ID": 7, "source": "HumanEval:HumanEval/7", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda([], 'a')\n[]\n>>> filter_by_substring_with_lambda(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda_and_map(strings: List[str], substring: str) -> List[str]:\n    return list(map(lambda s: s if substring in s else None, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map_and_filter([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map_and_filter(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda_and_map_and_filter(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: s is not None, map(lambda s: s if substring in s else None, strings)))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map_and_filter_and_comprehension([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda([], 'a')\n[]\n>>> filter_by_substring_with_lambda(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map([], 'a')\n[]\n>>> filter_by_substring_with_lambda_and_map(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\"\"\"\ndef filter_by_substring_with_lambda_and_map(strings: List[str], substring: str) -> List[str]:\n    return list(map(lambda s: s if substring in s else None, strings))\n\n\n\"\"\" Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring_with_lambda_and_map_and_filter([], 'a')"}
{"ID": 9, "source": "HumanEval:HumanEval/9", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:", "predict": "<s>from typing import List, Tuple\n\n\n\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\"\"\"\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\nin the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 1, 1, 1, 2, 2, 2]\n\"\"\"\ndef rolling_min(numbers: List[int]) -> List[int]:\n    min_so_far = numbers[0]\n    result = [min_so_far]\n    for i in range(1, len(numbers)):\n        min_so_far = min(min_so_far, numbers[i])\n        result.append(min_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling sum of elements found until given moment\nin the sequence.\n>>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n[1, 3, 6, 8, 11, 15, 17]\n\"\"\"\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    sum_so_far = numbers[0]\n    result = [sum_so_far]\n    for i in range(1, len(numbers)):\n        sum_so_far += numbers[i]\n        result.append(sum_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling product of elements found until given moment\nin the sequence.\n>>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 6, 12, 24, 96, 192]\n\"\"\"\ndef rolling_product(numbers: List[int]) -> List[int]:\n    product", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\nin the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 1, 1, 1, 2, 2, 2]\n\"\"\"\ndef rolling_min(numbers: List[int]) -> List[int]:\n    min_so_far = numbers[0]\n    result = [min_so_far]\n    for i in range(1, len(numbers)):\n        min_so_far = min(min_so_far, numbers[i])\n        result.append(min_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling sum of elements found until given moment\nin the sequence.\n>>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n[1, 3, 6, 8, 11, 15, 17]\n\"\"\"\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    sum_so_far = numbers[0]\n    result = [sum_so_far]\n    for i in range(1, len(numbers)):\n        sum_so_far += numbers[i]\n        result.append(sum_so_far)\n    return result\n\n\n\"\"\" From a given list of integers, generate a list of rolling product of elements found until given moment\nin the sequence."}
{"ID": 10, "source": "HumanEval:HumanEval/10", "prompt": "\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:", "predict": "<s>\n\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n\"\"\"\ndef is_palindrome(string: str) -> bool:\n\"\"\" Test if given string is a palindrome \"\"\"\nreturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:"}
{"ID": 11, "source": "HumanEval:HumanEval/11", "prompt": "from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:", "predict": "<s>from typing import List\n\n\n\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n\"\"\"\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings('00110011')\n6\n\"\"\"\ndef count_binary_substrings(s: str) -> int:\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_2('00110011')\n6\n\"\"\"\ndef count_binary_substrings_2(s: str) -> int:\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            while i < len(s) and s[i] == '0':\n                i += 1\n        elif s[i] == '1':\n            while i < len(s) and s[i] == '1':\n                i += 1\n        count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_3('00110011')\n6\n\"\"\"\ndef count_binary_substrings_3(s: str) -> int:\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            while i < len(s) and s[i] == '0':\n                i += 1\n        elif s[i] == '1':\n            while i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings('00110011')\n6\n\"\"\"\ndef count_binary_substrings(s: str) -> int:\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_2('00110011')\n6\n\"\"\"\ndef count_binary_substrings_2(s: str) -> int:\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            while i < len(s) and s[i] == '0':\n                i += 1\n        elif s[i] == '1':\n            while i < len(s) and s[i] == '1':\n                i += 1\n        count += 1\n    return count\n\n\n\"\"\" Input is a string s consisting only of 1s and 0s.\nReturn the number of contiguous substrings of s that have equal number of 0s and 1s.\n>>> count_binary_substrings_3('00110011')\n6\n\"\"\"\ndef count_binary_substrings_3(s: str) -> int:"}
{"ID": 13, "source": "HumanEval:HumanEval/13", "prompt": "\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:", "predict": "<s>\n\n\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n\"\"\"\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\"\"\" Return a least common multiple of two integers a and b\n>>> least_common_multiple(3, 5)\n15\n>>> least_common_multiple(25, 15)\n75\n\"\"\"\ndef least_common_multiple(a: int, b: int) -> int:\n    return a * b // greatest_common_divisor(a, b)\n\n\n\"\"\" Return a greatest common divisor of a list of integers\n>>> greatest_common_divisor_list([3, 5, 15])\n1\n>>> greatest_common_divisor_list([25, 15, 30])\n5\n\"\"\"\ndef greatest_common_divisor_list(numbers: list) -> int:\n    result = numbers[0]\n    for number in numbers[1:]:\n        result = greatest_common_divisor(result, number)\n    return result\n\n\n\"\"\" Return a least common multiple of a list of integers\n>>> least_common_multiple_list([3, 5, 15])\n15\n>>> least_common_multiple_list([25, 15, 30])\n75\n\"\"\"\ndef least_common_multiple_list(numbers: list) -> int:\n    result = numbers[0]\n    for number in numbers[1:]:\n        result = least_common_multiple(result, number)\n    return result\n\n\n\"\"\" Return a greatest common divisor of a list of integers\n>>> greatest_common_divisor_list_recursive([3, 5, 15])\n1\n>>> greatest_common_divisor_list_recursive([25, 15, 30])\n5\n\"\"\"\ndef greatest_common_divisor_list_recursive(numbers: list) -> int:\n    if len(numbers) == 1:\n        return numbers[0]\n    return greatest_common_divisor(numbers[0], greatest_common_divisor_list_recursive(numbers[1:]))\n\n\n\"\"\" Return", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        result = greatest_common_divisor(result, number)\n    return result\n\n\n\"\"\" Return a least common multiple of a list of integers\n>>> least_common_multiple_list([3, 5, 15])\n15\n>>> least_common_multiple_list([25, 15, 30])\n75\n\"\"\"\ndef least_common_multiple_list(numbers: list) -> int:\n    result = numbers[0]\n    for number in numbers[1:]:\n        result = least_common_multiple(result, number)\n    return result\n\n\n\"\"\" Return a greatest common divisor of a list of integers\n>>> greatest_common_divisor_list_recursive([3, 5, 15])\n1\n>>> greatest_common_divisor_list_recursive([25, 15, 30])\n5\n\"\"\"\ndef greatest_common_divisor_list_recursive(numbers: list) -> int:\n    if len(numbers) == 1:\n        return numbers[0]\n    return greatest_common_divisor(numbers[0], greatest_common_divisor_list_recursive(numbers[1:]))\n\n\n\"\"\" Return"}
{"ID": 14, "source": "HumanEval:HumanEval/14", "prompt": "from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n\"\"\"\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n\"\"\" Return list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'bc', 'abc']\n\"\"\"\ndef all_suffixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def all_suffixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\n\"\"\" Return list of all substrings of the input string\n>>> all_substrings('abc')\n['a', 'ab', 'abc', 'b', 'bc', 'c']\n\"\"\"\ndef all_substrings(string: str) -> List[str]:\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n"}
{"ID": 15, "source": "HumanEval:HumanEval/15", "prompt": "\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:", "predict": "<s>\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n\n\n\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n\"\"\"\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"ID": 16, "source": "HumanEval:HumanEval/16", "prompt": "\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:", "predict": "<s>\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n\"\"\"\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v2('xyzXYZ')\n3\n>>> count_distinct_characters_v2('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v2(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v3('xyzXYZ')\n3\n>>> count_distinct_characters_v3('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v3(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v4('xyzXYZ')\n3\n>>> count_distinct_characters_v4('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v4(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v5('xyzXYZ')\n3\n>>> count_distinct_characters_v5('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v5(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v6('xyzXYZ')\n3\n>>> count_distinct_characters_v6('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v6(string: str) -> int:\n    return len({char", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v2('xyzXYZ')\n3\n>>> count_distinct_characters_v2('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v2(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v3('xyzXYZ')\n3\n>>> count_distinct_characters_v3('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v3(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v4('xyzXYZ')\n3\n>>> count_distinct_characters_v4('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v4(string: str) -> int:\n    return len({char.lower() for char in string})\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v5('xyzXYZ')\n3\n>>> count_distinct_characters_v5('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v5(string: str) -> int:\n    return len(set(string.lower()))\n\n\n\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters_v6('xyzXYZ')\n3\n>>> count_distinct_characters_v6('Jerry')\n4\n\"\"\"\ndef count_distinct_characters_v6(string: str) -> int:\n    return len({char"}
{"ID": 20, "source": "HumanEval:HumanEval/20", "prompt": "from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:", "predict": "<s>from typing import List, Tuple\n\n\n\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\"\"\"\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # TODO: implement this function\n    pass\n\n\nif __name__ == '__main__':\n    # Tests\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3]) == (2.0, 2.3)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3, 2.4]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3]) == (2.0, 2.3)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3, 2.4]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.1, 2.0, 2.3"}
{"ID": 21, "source": "HumanEval:HumanEval/21", "prompt": "from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:", "predict": "<s>from typing import List\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace(numbers: List[float]) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace_with_min_max(numbers: List[float], min_val: float, max_val: float) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace(numbers: List[float]) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\"\"\"\ndef rescale_to_unit_inplace_with_min_max(numbers: List[float], min_val: float, max_val: float) -> None:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\n\"\"\" Given list of numbers (of at least two elements), apply a linear transform"}
{"ID": 22, "source": "HumanEval:HumanEval/22", "prompt": "from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:", "predict": "<s>from typing import List, Any\n\n\n\"\"\" Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\"\"\"\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n\n\"\"\" Filter given list of any python values only for floats\n>>> filter_floats(['a', 3.14, 5])\n[3.14]\n>>> filter_floats([1, 2, 3, 'abc', {}, []])\n[]\n\"\"\"\ndef filter_floats(values: List[Any]) -> List[float]:\n    return [value for value in values if isinstance(value, float)]\n\n\n\"\"\" Filter given list of any python values only for strings\n>>> filter_strings(['a', 3.14, 5])\n['a']\n>>> filter_strings([1, 2, 3, 'abc', {}, []])\n['abc']\n\"\"\"\ndef filter_strings(values: List[Any]) -> List[str]:\n    return [value for value in values if isinstance(value, str)]\n\n\n\"\"\" Filter given list of any python values only for lists\n>>> filter_lists(['a', 3.14, 5])\n[]\n>>> filter_lists([1, 2, 3, 'abc', {}, []])\n[{}, []]\n\"\"\"\ndef filter_lists(values: List[Any]) -> List[list]:\n    return [value for value in values if isinstance(value, list)]\n\n\n\"\"\" Filter given list of any python values only for dictionaries\n>>> filter_dictionaries(['a', 3.14, 5])\n[]\n>>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n[{}]\n\"\"\"\ndef filter_dictionaries(values: List[Any]) -> List[dict]:\n    return [value for value in values if isinstance(value, dict)]\n\n\n\"\"\" Filter given list of any python values only for booleans\n>>> filter_booleans(['a', 3.14, 5])\n[]\n>>> filter_booleans([1, 2, 3, 'abc', {}, [], True, False])\n[True, False]\n\"\"\"\ndef filter_booleans(values: List[Any]) -> List[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "[3.14]\n>>> filter_floats([1, 2, 3, 'abc', {}, []])\n[]\n\"\"\"\ndef filter_floats(values: List[Any]) -> List[float]:\n    return [value for value in values if isinstance(value, float)]\n\n\n\"\"\" Filter given list of any python values only for strings\n>>> filter_strings(['a', 3.14, 5])\n['a']\n>>> filter_strings([1, 2, 3, 'abc', {}, []])\n['abc']\n\"\"\"\ndef filter_strings(values: List[Any]) -> List[str]:\n    return [value for value in values if isinstance(value, str)]\n\n\n\"\"\" Filter given list of any python values only for lists\n>>> filter_lists(['a', 3.14, 5])\n[]\n>>> filter_lists([1, 2, 3, 'abc', {}, []])\n[{}, []]\n\"\"\"\ndef filter_lists(values: List[Any]) -> List[list]:\n    return [value for value in values if isinstance(value, list)]\n\n\n\"\"\" Filter given list of any python values only for dictionaries\n>>> filter_dictionaries(['a', 3.14, 5])\n[]\n>>> filter_dictionaries([1, 2, 3, 'abc', {}, []])"}
{"ID": 23, "source": "HumanEval:HumanEval/23", "prompt": "\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:", "predict": "<s>\n\n\"\"\" Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n\"\"\"\ndef strlen(string: str) -> int:\n    return len(string)\n\n\n\"\"\" Return True if given string is empty\n>>> is_empty('')\nTrue\n>>> is_empty('abc')\nFalse\n\"\"\"\ndef is_empty(string: str) -> bool:\n    return len(string) == 0\n\n\n\"\"\" Return True if given string is not empty\n>>> is_not_empty('')\nFalse\n>>> is_not_empty('abc')\nTrue\n\"\"\"\ndef is_not_empty(string: str) -> bool:\n    return len(string) > 0\n\n\n\"\"\" Return True if given string is whitespace\n>>> is_whitespace('')\nFalse\n>>> is_whitespace(' ')\nTrue\n>>> is_whitespace('abc')\nFalse\n\"\"\"\ndef is_whitespace(string: str) -> bool:\n    return len(string.strip()) == 0\n\n\n\"\"\" Return True if given string is not whitespace\n>>> is_not_whitespace('')\nTrue\n>>> is_not_whitespace(' ')\nFalse\n>>> is_not_whitespace('abc')\nTrue\n\"\"\"\ndef is_not_whitespace(string: str) -> bool:\n    return len(string.strip()) > 0\n\n\n\"\"\" Return True if given string is alphabetic\n>>> is_alphabetic('')\nFalse\n>>> is_alphabetic('abc')\nTrue\n>>> is_alphabetic('abc123')\nFalse\n\"\"\"\ndef is_alphabetic(string: str) -> bool:\n    return string.isalpha()\n\n\n\"\"\" Return True if given string is not alphabetic\n>>> is_not_alphabetic('')\nTrue\n>>> is_not_alphabetic('abc')\nFalse\n>>> is_not_alphabetic('abc123')\nTrue\n\"\"\"\ndef is_not_alphabetic(string: str) -> bool:\n    return not string.isalpha()\n\n\n\"\"\" Return True if given string is alphanumeric\n>>> is_alphanumeric('')\nFalse\n>>> is_alphanumeric('abc')\nTrue", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return len(string)\n\n\n\"\"\" Return True if given string is empty\n>>> is_empty('')\nTrue\n>>> is_empty('abc')\nFalse\n\"\"\"\ndef is_empty(string: str) -> bool:\n    return len(string) == 0\n\n\n\"\"\" Return True if given string is not empty\n>>> is_not_empty('')\nFalse\n>>> is_not_empty('abc')\nTrue\n\"\"\"\ndef is_not_empty(string: str) -> bool:\n    return len(string) > 0\n\n\n\"\"\" Return True if given string is whitespace\n>>> is_whitespace('')\nFalse\n>>> is_whitespace(' ')\nTrue\n>>> is_whitespace('abc')\nFalse\n\"\"\"\ndef is_whitespace(string: str) -> bool:\n    return len(string.strip()) == 0\n\n\n\"\"\" Return True if given string is not whitespace\n>>> is_not_whitespace('')\nTrue\n>>> is_not_whitespace(' ')\nFalse\n>>> is_not_whitespace('abc')\nTrue\n\"\"\"\ndef is_not_whitespace(string: str) -> bool:\n    return len(string.strip()) > 0\n\n\n\"\"\" Return True if given string is alphabetic\n>>> is_alphabetic('')"}
{"ID": 24, "source": "HumanEval:HumanEval/24", "prompt": "\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:", "predict": "<s>\n\n\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n\"\"\"\ndef largest_divisor(n: int) -> int:\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n\n\n\"\"\" For a given number n, find the smallest number that divides n evenly, larger than 1\n>>> smallest_divisor(15)\n3\n\"\"\"\ndef smallest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n\n\"\"\" For a given number n, find the prime factors of n\n>>> prime_factors(15)\n[3, 5]\n\"\"\"\ndef prime_factors(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\n\"\"\" For a given number n, find the prime factors of n, with multiplicity\n>>> prime_factors_mult(15)\n[(3, 1), (5, 1)]\n\"\"\"\ndef prime_factors_mult(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n = n // i\n        if count > 0:\n            factors.append((i, count))\n    if n > 2:\n        factors.append((n, 1))\n    return factors\n\n\n\"\"\" For a given number n, find the prime factors of n, with multiplicity, in a dictionary\n>>> prime_factors_dict(15)\n{3: 1, 5: 1}\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n\n\"\"\" For a given number n, find the prime factors of n\n>>> prime_factors(15)\n[3, 5]\n\"\"\"\ndef prime_factors(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\n\"\"\" For a given number n, find the prime factors of n, with multiplicity\n>>> prime_factors_mult(15)\n[(3, 1), (5, 1)]\n\"\"\"\ndef prime_factors_mult(n: int) -> list:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        while n % i == 0:\n            count += 1"}
{"ID": 26, "source": "HumanEval:HumanEval/26", "prompt": "from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:", "predict": "<s>from typing import List\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_2([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_3([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_4([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_4(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_5([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_5(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_6([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_6(numbers: List[int]) -> List[int]:\n   ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_2([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_3([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_4([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_4(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_5([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_5(numbers: List[int]) -> List[int]:\n    # TODO: implement this function\n    pass\n\n\n\"\"\" From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates_6([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\ndef remove_duplicates_6(numbers: List[int]) -> List[int]:\n   "}
{"ID": 29, "source": "HumanEval:HumanEval/29", "prompt": "from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:", "predict": "<s>from typing import List\n\n\n\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n\n\"\"\" Filter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    return [s for s in strings if s.endswith(suffix)]\n\n\n\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that match a given regular expression.\n>>> filter_by_regex([], 'a')\n[]\n>>> filter_by_regex(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    import re\n    return [s for s in strings if re.search(regex, s)]\n\n\n\"\"\" Filter an input list of strings only for ones that are equal to a given string.\n>>> filter_by_equality([], 'a')\n[]\n>>> filter_by_equality(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\"\"\"\ndef filter_by_equality(strings: List[str], string: str) -> List[str]:\n    return [s for s in strings if s == string]\n\n\n\"\"\" Filter an input list of strings only for ones that are not equal to a given string.\n>>> filter_by_inequality([], 'a')\n[]\n>>> filter_by_ine", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\" Filter an input list of strings only for ones that contain a given substring.\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n\"\"\" Filter an input list of strings only for ones that match a given regular expression.\n>>> filter_by_regex([], 'a')\n[]\n>>> filter_by_regex(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\"\"\"\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    import re\n    return [s for s in strings if re.search(regex, s)]\n\n\n\"\"\" Filter an input list of strings only for ones that are equal to a given string.\n>>> filter_by_equality([], 'a')\n[]\n>>> filter_by_equality(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc']\n\"\"\"\ndef filter_by_equality(strings: List[str], string: str) -> List[str]:\n    return [s for s in strings if s == string]\n\n\n\"\"\" Filter an input list of strings only for ones that are not equal to a given string.\n>>> filter_by_inequality([], 'a')\n[]"}
{"ID": 30, "source": "HumanEval:HumanEval/30", "prompt": "\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):", "predict": "<s>\n\n\"\"\"Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\"\"\"\ndef get_positive(l: list):\n    return [i for i in l if i > 0]\n\n\n\"\"\"Return only negative numbers in the list.\n>>> get_negative([-1, 2, -4, 5, 6])\n[-1, -4]\n>>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[-5, -3, -10]\n\"\"\"\ndef get_negative(l: list):\n    return [i for i in l if i < 0]\n\n\n\"\"\"Return only even numbers in the list.\n>>> get_even([-1, 2, -4, 5, 6])\n[2, 6]\n>>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[2, -4, 0]\n\"\"\"\ndef get_even(l: list):\n    return [i for i in l if i % 2 == 0]\n\n\n\"\"\"Return only odd numbers in the list.\n>>> get_odd([-1, 2, -4, 5, 6])\n[-1, 5]\n>>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, -5, 3, 3, 9, 1, -10]\n\"\"\"\ndef get_odd(l: list):\n    return [i for i in l if i % 2 != 0]\n\n\n\"\"\"Return only numbers in the list that are divisible by 3.\n>>> get_divisible_by_3([-1, 2, -4, 5, 6])\n[-1, 2, 6]\n>>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[3, -3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"Return only negative numbers in the list.\n>>> get_negative([-1, 2, -4, 5, 6])\n[-1, -4]\n>>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[-5, -3, -10]\n\"\"\"\ndef get_negative(l: list):\n    return [i for i in l if i < 0]\n\n\n\"\"\"Return only even numbers in the list.\n>>> get_even([-1, 2, -4, 5, 6])\n[2, 6]\n>>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[2, -4, 0]\n\"\"\"\ndef get_even(l: list):\n    return [i for i in l if i % 2 == 0]\n\n\n\"\"\"Return only odd numbers in the list.\n>>> get_odd([-1, 2, -4, 5, 6])"}
{"ID": 31, "source": "HumanEval:HumanEval/31", "prompt": "\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):", "predict": "<s>\n\n\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n\"\"\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 32, "source": "HumanEval:HumanEval/32", "prompt": "import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):", "predict": "<s>import math\n\n\n\"\"\"\nEvaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\"\"\"\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\" xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\"\"\"\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\nif len(xs) % 2 != 0:\nraise ValueError(\"xs must have even number of coefficients\")\n\n\ndef poly(xs: list, x: float):\nreturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])"}
{"ID": 33, "source": "HumanEval:HumanEval/33", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):", "predict": "<s>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\"\"\"\ndef sort_third(l: list):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_copy[i] = l[i]\n    return l_copy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 34, "source": "HumanEval:HumanEval/34", "prompt": "\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):", "predict": "<s>\n\n\"\"\"Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\"\"\"\ndef unique(l: list):\n    return sorted(set(l))\n\n\n\"\"\"Return the first element of a list\n>>> first([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5\n\"\"\"\ndef first(l: list):\n    return l[0]\n\n\n\"\"\"Return the last element of a list\n>>> last([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef last(l: list):\n    return l[-1]\n\n\n\"\"\"Return the length of a list\n>>> length([5, 3, 5, 2, 3, 3, 9, 0, 123])\n9\n\"\"\"\ndef length(l: list):\n    return len(l)\n\n\n\"\"\"Return the sum of all elements in a list\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n212\n\"\"\"\ndef sum(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in a list\n>>> average([5, 3, 5, 2, 3, 3, 9, 0, 123])\n23.555555555555557\n\"\"\"\ndef average(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the minimum element in a list\n>>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0\n\"\"\"\ndef min(l: list):\n    return min(l)\n\n\n\"\"\"Return the maximum element in a list\n>>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef max(l: list):\n    return max(l)\n\n\n\"\"\"Return the median of all elements in a list\n>>>", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"Return the first element of a list\n>>> first([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5\n\"\"\"\ndef first(l: list):\n    return l[0]\n\n\n\"\"\"Return the last element of a list\n>>> last([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef last(l: list):\n    return l[-1]\n\n\n\"\"\"Return the length of a list\n>>> length([5, 3, 5, 2, 3, 3, 9, 0, 123])\n9\n\"\"\"\ndef length(l: list):\n    return len(l)\n\n\n\"\"\"Return the sum of all elements in a list\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n212\n\"\"\"\ndef sum(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in a list\n>>> average([5, 3, 5, 2, 3, 3, 9, 0, 123])\n23.555555555555557\n\"\"\"\ndef average(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the minimum element in a list\n>>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0\n\"\"\"\ndef min(l: list):\n    return min(l)\n\n\n\"\"\"Return the maximum element in a list\n>>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n123\n\"\"\"\ndef max(l: list):\n    return max(l)\n\n\n\"\"\"Return the median of all elements in a list\n>>>"}
{"ID": 35, "source": "HumanEval:HumanEval/35", "prompt": "\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):", "predict": "<s>\n\n\"\"\"Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\"\"\"\ndef max_element(l: list):\n    return max(l)\n\n\n\"\"\"Return minimum element in the list.\n>>> min_element([1, 2, 3])\n1\n>>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-10\n\"\"\"\ndef min_element(l: list):\n    return min(l)\n\n\n\"\"\"Return the sum of all elements in the list.\n>>> sum_list([1, 2, 3])\n6\n>>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n121\n\"\"\"\ndef sum_list(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in the list.\n>>> avg_list([1, 2, 3])\n2.0\n>>> avg_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n12.1\n\"\"\"\ndef avg_list(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the median of all elements in the list.\n>>> median_list([1, 2, 3])\n2.0\n>>> median_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n2.0\n\"\"\"\ndef median_list(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\n\"\"\"Return the mode of all elements in the list.\n>>> mode_list([1, 2, 3])\n1\n>>> mode_list([5, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return max(l)\n\n\n\"\"\"Return minimum element in the list.\n>>> min_element([1, 2, 3])\n1\n>>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-10\n\"\"\"\ndef min_element(l: list):\n    return min(l)\n\n\n\"\"\"Return the sum of all elements in the list.\n>>> sum_list([1, 2, 3])\n6\n>>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n121\n\"\"\"\ndef sum_list(l: list):\n    return sum(l)\n\n\n\"\"\"Return the average of all elements in the list.\n>>> avg_list([1, 2, 3])\n2.0\n>>> avg_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n12.1\n\"\"\"\ndef avg_list(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the median of all elements in the list.\n>>> median_list([1, 2, 3])"}
{"ID": 37, "source": "HumanEval:HumanEval/37", "prompt": "\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):", "predict": "<s>\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n\"\"\"\ndef sort_even(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i]))\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that\nl' is identical to l in the even indicies, while its values at the odd indicies are equal\nto the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 6, 3, 4]\n\"\"\"\ndef sort_odd(l: list):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(sorted(l[i]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\"\"\"This function takes a list l and returns a list l' such that"}
{"ID": 38, "source": "HumanEval:HumanEval/38", "prompt": "\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):", "predict": "<s>\n\n\"\"\"\nreturns encoded string by cycling groups of three characters.\n\"\"\"\n# split string to groups. Each of length 3.\ngroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\ngroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\"\"\"\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n\"\"\"\ndef encode_cyclic(s: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 40, "source": "HumanEval:HumanEval/40", "prompt": "\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):", "predict": "<s>\n\n\"\"\"\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n\"\"\"\ndef triples_sum_to_zero(l: list):\n    # your code here\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 41, "source": "HumanEval:HumanEval/41", "prompt": "\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):", "predict": "<s>\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_recursive(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_memoized(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_recursive(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n\"\"\"\ndef car_race_collision_memoized(n: int):\n    # TODO: Fill this in.\n    return 0\n\n\n\"\"\"\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide"}
{"ID": 42, "source": "HumanEval:HumanEval/42", "prompt": "\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):", "predict": "<s>\n\n\"\"\"Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\"\"\"\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n\n\n\"\"\"Return list with elements decremented by 1.\n>>> decr_list([1, 2, 3])\n[0, 1, 2]\n>>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[4, 2, 4, 1, 2, 2, 8, -1, 122]\n\"\"\"\ndef decr_list(l: list):\n    return [x - 1 for x in l]\n\n\n\"\"\"Return list with elements multiplied by 2.\n>>> double_list([1, 2, 3])\n[2, 4, 6]\n>>> double_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[10, 6, 10, 4, 6, 6, 18, 0, 246]\n\"\"\"\ndef double_list(l: list):\n    return [x * 2 for x in l]\n\n\n\"\"\"Return list with elements divided by 2.\n>>> half_list([1, 2, 3])\n[0.5, 1.0, 1.5]\n>>> half_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[2.5, 1.5, 2.5, 1.0, 1.5, 1.5, 4.5, 0.0, 61.5]\n\"\"\"\ndef half_list(l: list):\n    return [x / 2 for x in l]\n\n\n\"\"\"Return list with elements squared.\n>>> square_list([1, 2, 3])\n[1, 4, 9]\n>>> square_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[25,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return [x + 1 for x in l]\n\n\n\"\"\"Return list with elements decremented by 1.\n>>> decr_list([1, 2, 3])\n[0, 1, 2]\n>>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[4, 2, 4, 1, 2, 2, 8, -1, 122]\n\"\"\"\ndef decr_list(l: list):\n    return [x - 1 for x in l]\n\n\n\"\"\"Return list with elements multiplied by 2.\n>>> double_list([1, 2, 3])\n[2, 4, 6]\n>>> double_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[10, 6, 10, 4, 6, 6, 18, 0, 246]\n\"\"\"\ndef double_list(l: list):\n    return [x * 2 for x in l]\n\n\n\"\"\"Return list with elements divided by 2.\n>>> half_list([1, 2, 3])\n[0.5, 1.0, 1.5]"}
{"ID": 43, "source": "HumanEval:HumanEval/43", "prompt": "\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):", "predict": "<s>\n\n\"\"\"\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero(l):\n    # your code here\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_2 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero_2([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero_2([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero_2([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero_2([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero_2(l):\n    # your code here\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_3 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero_3([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero_3([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero_3([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_2 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero_2([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero_2([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero_2([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero_2([1])\nFalse\n\"\"\"\ndef pairs_sum_to_zero_2(l):\n    # your code here\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n\n\n\"\"\"\npairs_sum_to_zero_3 takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise."}
{"ID": 44, "source": "HumanEval:HumanEval/44", "prompt": "\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):", "predict": "<s>\n\n\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\ndef change_base(x: int, base: int):\n    if x < 0:\n        sign = -1\n    elif x == 0:\n        return '0'\n    else:\n        sign = 1\n    x *= sign\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    if sign == -1:\n        digits.append('-')\n    digits.reverse()\n    return ''.join(digits)\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\"\"\"\n\n\n\"\"\"\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'"}
{"ID": 45, "source": "HumanEval:HumanEval/45", "prompt": "\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):", "predict": "<s>\n\n\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n\"\"\"\ndef triangle_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a rectangle.\n>>> rectangle_area(5, 3)\n15\n\"\"\"\ndef rectangle_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a square.\n>>> square_area(5)\n25\n\"\"\"\ndef square_area(a):\n    return a * a\n\n\n\"\"\"Given length of a side and high return area for a circle.\n>>> circle_area(5)\n78.53981633974483\n\"\"\"\ndef circle_area(r):\n    from math import pi\n    return pi * r * r\n\n\n\"\"\"Given length of a side and high return area for a trapezoid.\n>>> trapezoid_area(5, 3, 2)\n10\n\"\"\"\ndef trapezoid_area(a, h, b):\n    return (a + b) * h / 2\n\n\n\"\"\"Given length of a side and high return area for a parallelogram.\n>>> parallelogram_area(5, 3)\n15\n\"\"\"\ndef parallelogram_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a rhombus.\n>>> rhombus_area(5, 3)\n7.5\n\"\"\"\ndef rhombus_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a kite.\n>>> kite_area(5, 3)\n15\n\"\"\"\ndef kite_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a pentagon.\n>>> pentagon_area(5, 3)\n15\n\"\"\"\ndef pentagon_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a hexagon.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"Given length of a side and high return area for a rectangle.\n>>> rectangle_area(5, 3)\n15\n\"\"\"\ndef rectangle_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a square.\n>>> square_area(5)\n25\n\"\"\"\ndef square_area(a):\n    return a * a\n\n\n\"\"\"Given length of a side and high return area for a circle.\n>>> circle_area(5)\n78.53981633974483\n\"\"\"\ndef circle_area(r):\n    from math import pi\n    return pi * r * r\n\n\n\"\"\"Given length of a side and high return area for a trapezoid.\n>>> trapezoid_area(5, 3, 2)\n10\n\"\"\"\ndef trapezoid_area(a, h, b):\n    return (a + b) * h / 2\n\n\n\"\"\"Given length of a side and high return area for a parallelogram.\n>>> parallelogram_area(5, 3)\n15\n\"\"\"\ndef parallelogram_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a rhombus.\n>>> rhombus_area(5, 3)\n7.5\n\"\"\"\ndef rhombus_area(a, h):\n    return a * h / 2\n\n\n\"\"\"Given length of a side and high return area for a kite.\n>>> kite_area(5, 3)\n15\n\"\"\"\ndef kite_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a pentagon.\n>>> pentagon_area(5, 3)\n15\n\"\"\"\ndef pentagon_area(a, h):\n    return a * h\n\n\n\"\"\"Given length of a side and high return area for a hexagon."}
{"ID": 47, "source": "HumanEval:HumanEval/47", "prompt": "\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):", "predict": "<s>\n\n\"\"\"Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\n\"\"\"Return the mode of elements in the list l.\n>>> mode([3, 1, 2, 4, 5])\n3\n>>> mode([-10, 4, 6, 1000, 10, 20])\n10\n\"\"\"\ndef mode(l: list):\n    l.sort()\n    max_count = 0\n    mode = None\n    for i in range(len(l)):\n        count = 0\n        for j in range(len(l)):\n            if l[i] == l[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            mode = l[i]\n    return mode\n\n\n\"\"\"Return the mean of elements in the list l.\n>>> mean([3, 1, 2, 4, 5])\n3\n>>> mean([-10, 4, 6, 1000, 10, 20])\n15.0\n\"\"\"\ndef mean(l: list):\n    return sum(l) / len(l)\n\n\n\"\"\"Return the variance of elements in the list l.\n>>> variance([3, 1, 2, 4, 5])\n2\n>>> variance([-10, 4, 6, 1000, 10, 20])\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 49, "source": "HumanEval:HumanEval/49", "prompt": "\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):", "predict": "<s>\n\n\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n\"\"\"\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n\n\n\"\"\"Return the number of bits in the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n>>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n6\n>>> bit_length(38)\n6\n>>> bit_length(39)\n6\n>>> bit_length(40)\n6\n>>", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": ">>> bit_length(0)\n0\n>>> bit_length(1)\n1\n>>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n6\n>>> bit_length(38)\n6\n>>> bit_length(39)\n6\n>>> bit_length(40)\n6"}
{"ID": 50, "source": "HumanEval:HumanEval/50", "prompt": "\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):", "predict": "<s>\n\n\"\"\"\nreturns encoded string by shifting every character by 5 in the alphabet.\n\"\"\"\nreturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string.\n\"\"\"\ndef encode_shift(s: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 51, "source": "HumanEval:HumanEval/51", "prompt": "\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):", "predict": "<s>\n\n\"\"\"\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n\"\"\"\ndef remove_vowels(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_consonants is a function that takes string and returns string without consonants.\n>>> remove_consonants('')\n''\n>>> remove_consonants(\"abcdef\\nghijklm\")\n'aeiou\\n'\n>>> remove_consonants('abcdef')\n'aeiou'\n>>> remove_consonants('aaaaa')\n'aaaaa'\n>>> remove_consonants('aaBAA')\n'aaAA'\n>>> remove_consonants('zbcd')\n''\n\"\"\"\ndef remove_consonants(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_punctuation is a function that takes string and returns string without punctuation.\n>>> remove_punctuation('')\n''\n>>> remove_punctuation(\"abcdef\\nghijklm\")\n'abcdef\\nghijklm'\n>>> remove_punctuation('abcdef')\n'abcdef'\n>>> remove_punctuation('aaaaa')\n'aaaaa'\n>>> remove_punctuation('aaBAA')\n'aaBAA'\n>>> remove_punctuation('zbcd')\n'zbcd'\n>>> remove_punctuation('zbcd.')\n'zbcd'\n>>> remove_punctuation('zbcd,')\n'zbcd'\n>>> remove_punctuation('zbcd!')\n'zbcd'\n>>> remove_punctuation('zbcd?')\n'zbcd'\n>>> remove_punctuation('zbcd:')\n'zbcd'\n>>> remove_punctuation('zbcd;')\n'", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_consonants is a function that takes string and returns string without consonants.\n>>> remove_consonants('')\n''\n>>> remove_consonants(\"abcdef\\nghijklm\")\n'aeiou\\n'\n>>> remove_consonants('abcdef')\n'aeiou'\n>>> remove_consonants('aaaaa')\n'aaaaa'\n>>> remove_consonants('aaBAA')\n'aaAA'\n>>> remove_consonants('zbcd')\n''\n\"\"\"\ndef remove_consonants(text):\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() in vowels:\n            new_text += char\n    return new_text\n\n\n\"\"\"\nremove_punctuation is a function that takes string and returns string without punctuation.\n>>> remove_punctuation('')\n''\n>>> remove_punctuation(\"abcdef\\nghijklm\")\n'abcdef\\nghijklm'"}
{"ID": 52, "source": "HumanEval:HumanEval/52", "prompt": "\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):", "predict": "<s>\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\ndef below_threshold(l: list, t: int):\n    return not any(i > t for i in l)\n\n\n\"\"\"Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse"}
{"ID": 53, "source": "HumanEval:HumanEval/53", "prompt": "\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):", "predict": "<s>\n\n\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\ndef add(x: int, y: int):\n    return x + y\n\n\n\"\"\"Subtract two numbers x and y\n>>> subtract(2, 3)\n-1\n>>> subtract(5, 7)\n-2\n\"\"\"\ndef subtract(x: int, y: int):\n    return x - y\n\n\n\"\"\"Multiply two numbers x and y\n>>> multiply(2, 3)\n6\n>>> multiply(5, 7)\n35\n\"\"\"\ndef multiply(x: int, y: int):\n    return x * y\n\n\n\"\"\"Divide two numbers x and y\n>>> divide(2, 3)\n0.6666666666666666\n>>> divide(5, 7)\n0.7142857142857143\n\"\"\"\ndef divide(x: int, y: int):\n    return x / y\n\n\n\"\"\"Find the remainder of two numbers x and y\n>>> remainder(2, 3)\n2\n>>> remainder(5, 7)\n5\n\"\"\"\ndef remainder(x: int, y: int):\n    return x % y\n\n\n\"\"\"Find the power of two numbers x and y\n>>> power(2, 3)\n8\n>>> power(5, 7)\n78125\n\"\"\"\ndef power(x: int, y: int):\n    return x ** y\n\n\n\"\"\"Find the square root of a number x\n>>> square_root(2)\n1.4142135623730951\n>>> square_root(5)\n2.23606797749979\n\"\"\"\ndef square_root(x: int):\n    return x ** 0.5\n\n\n\"\"\"Find the cube root of a number x\n>>> cube_root(2)\n1.2599210498948732\n>>> cube_root(5)\n1.7099759466766947\n\"\"\"\ndef cube_root(x: int):\n    return", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return x + y\n\n\n\"\"\"Subtract two numbers x and y\n>>> subtract(2, 3)\n-1\n>>> subtract(5, 7)\n-2\n\"\"\"\ndef subtract(x: int, y: int):\n    return x - y\n\n\n\"\"\"Multiply two numbers x and y\n>>> multiply(2, 3)\n6\n>>> multiply(5, 7)\n35\n\"\"\"\ndef multiply(x: int, y: int):\n    return x * y\n\n\n\"\"\"Divide two numbers x and y\n>>> divide(2, 3)\n0.6666666666666666\n>>> divide(5, 7)\n0.7142857142857143\n\"\"\"\ndef divide(x: int, y: int):\n    return x / y\n\n\n\"\"\"Find the remainder of two numbers x and y\n>>> remainder(2, 3)\n2\n>>> remainder(5, 7)\n5\n\"\"\"\ndef remainder(x: int, y: int):\n    return x % y\n\n\n\"\"\"Find the power of two numbers x and y\n>>> power(2, 3)\n8\n>>> power(5, 7)\n78125\n\"\"\""}
{"ID": 56, "source": "HumanEval:HumanEval/56", "prompt": "\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<s>\n\n\"\"\" brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n\"\"\"\n\n\n\"\"\"\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n"}
{"ID": 58, "source": "HumanEval:HumanEval/58", "prompt": "\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):", "predict": "<s>\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common(l1: list, l2: list):\n    return sorted(set(l1).intersection(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v2([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v2(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v3([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v3(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v4([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v4([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v4(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v5([1, 4, 3, 34, 653, 2, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return sorted(set(l1).intersection(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v2([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v2(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists.\n>>> common_v3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common_v3([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n\"\"\"\ndef common_v3(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n\n\n\"\"\"Return sorted unique common elements for two lists."}
{"ID": 59, "source": "HumanEval:HumanEval/59", "prompt": "\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):", "predict": "<s>\n\n\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n\"\"\"\ndef largest_prime_factor(n: int):\n    # Find the largest prime factor of n. Assume n > 1 and is not a prime.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ...,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?\n    # Hint: try dividing n by 2, 3, 4, ... and check if the result is prime.\n    # Hint: remember to update n as you find prime factors of n.\n    # Hint: when n is no longer divisible by 2, 3, 4, ..., you are done.\n    # Hint: use a while loop.\n    # Hint: use the helper function is_prime?"}
{"ID": 60, "source": "HumanEval:HumanEval/60", "prompt": "\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):", "predict": "<s>\n\n\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n\"\"\"\ndef sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\n\"\"\"sum_to_n_recursive is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive(30)\n465\n>>> sum_to_n_recursive(100)\n5050\n>>> sum_to_n_recursive(5)\n15\n>>> sum_to_n_recursive(10)\n55\n>>> sum_to_n_recursive(1)\n1\n\"\"\"\ndef sum_to_n_recursive(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive(n-1)\n\n\n\"\"\"sum_to_n_recursive_2 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_2(30)\n465\n>>> sum_to_n_recursive_2(100)\n5050\n>>> sum_to_n_recursive_2(5)\n15\n>>> sum_to_n_recursive_2(10)\n55\n>>> sum_to_n_recursive_2(1)\n1\n\"\"\"\ndef sum_to_n_recursive_2(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive_2(n-1)\n\n\n\"\"\"sum_to_n_recursive_3 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_3(30)\n465\n>>> sum_to_n_recursive_3(100)\n5050\n>>> sum_to_n_recursive_3(5)\n15\n>>> sum_to_n_recursive_3(10)\n55\n>>> sum_to_n_recursive_3(1)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def sum_to_n_recursive(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive(n-1)\n\n\n\"\"\"sum_to_n_recursive_2 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_2(30)\n465\n>>> sum_to_n_recursive_2(100)\n5050\n>>> sum_to_n_recursive_2(5)\n15\n>>> sum_to_n_recursive_2(10)\n55\n>>> sum_to_n_recursive_2(1)\n1\n\"\"\"\ndef sum_to_n_recursive_2(n: int):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive_2(n-1)\n\n\n\"\"\"sum_to_n_recursive_3 is a recursive function that sums numbers from 1 to n.\n>>> sum_to_n_recursive_3(30)\n465\n>>> sum_to_n_recursive_3(100)\n5050\n>>> sum_to_n_recursive_3(5)\n15\n>>> sum_to_n_recursive_3(10)\n55\n>>> sum_to_n_recursive_3(1)\n"}
{"ID": 61, "source": "HumanEval:HumanEval/61", "prompt": "\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):", "predict": "<s>\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n\"\"\" brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n\"\"\"\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:"}
{"ID": 62, "source": "HumanEval:HumanEval/62", "prompt": "\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):", "predict": "<s>\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n\"\"\"\ndef derivative(xs: list):\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n\n\n\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs"}
{"ID": 65, "source": "HumanEval:HumanEval/65", "prompt": "\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):", "predict": "<s>\n\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\"\"\"\ndef circular_shift(x, shift):\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n\n\"\"\"Return the number of digits in x.\n>>> num_digits(12)\n2\n>>> num_digits(1234)\n4\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the sum of the digits of x.\n>>> sum_digits(123)\n6\n>>> sum_digits(1234)\n10\n\"\"\"\ndef sum_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\n\"\"\"Return the number of digits in x that are even.\n>>> num_even_digits(123)\n1\n>>> num_even_digits(1234)\n2\n\"\"\"\ndef num_even_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 0)\n\n\n\"\"\"Return the number of digits in x that are odd.\n>>> num_odd_digits(123)\n2\n>>> num_odd_digits(1234)\n2\n\"\"\"\ndef num_odd_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 1)\n\n\n\"\"\"Return the number of digits in x that are prime.\n>>> num_prime_digits(123)\n2\n>>> num_prime_digits(1234)\n1\n\"\"\"\ndef num_prime_digits(x):\n    return sum(1 for digit in str(x) if is_prime(int(digit)))\n\n\n\"\"\"Return the number of digits in x that are composite.\n>>> num_composite_digits(123)\n1\n>>> num_composite_digits(1234)\n3\n\"\"\"\ndef num_composite_digits(x):\n    return sum(1 for digit", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    else:\n        return digits[shift:] + digits[:shift]\n\n\n\"\"\"Return the number of digits in x.\n>>> num_digits(12)\n2\n>>> num_digits(1234)\n4\n\"\"\"\ndef num_digits(x):\n    return len(str(x))\n\n\n\"\"\"Return the sum of the digits of x.\n>>> sum_digits(123)\n6\n>>> sum_digits(1234)\n10\n\"\"\"\ndef sum_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\n\"\"\"Return the number of digits in x that are even.\n>>> num_even_digits(123)\n1\n>>> num_even_digits(1234)\n2\n\"\"\"\ndef num_even_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 0)\n\n\n\"\"\"Return the number of digits in x that are odd.\n>>> num_odd_digits(123)\n2\n>>> num_odd_digits(1234)\n2\n\"\"\"\ndef num_odd_digits(x):\n    return sum(1 for digit in str(x) if int(digit) % 2 == 1)\n\n\n\"\"\"Return the number of digits in x that are prime."}
{"ID": 67, "source": "HumanEval:HumanEval/67", "prompt": "\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):", "predict": "<s>\n\"\"\"\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\"\"\"\ndef fruit_distribution(s,n):\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[3])\n    return n - apples - oranges\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 71, "source": "HumanEval:HumanEval/71", "prompt": "\n\ndef triangle_area(a, b, c):", "predict": "<s>\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_2d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_3d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_3d_vectorized(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_2d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------\n    a : float\n        Length of side a.\n    b : float\n        Length of side b.\n    c : float\n        Length of side c.\n\n    Returns\n    -------\n    area : float\n        Area of the triangle.\n\n    \"\"\"\n    s = (a + b + c) / 2\n    area = np.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n\ndef triangle_area_3d(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters\n    ----------"}
{"ID": 72, "source": "HumanEval:HumanEval/72", "prompt": "\n\ndef will_it_fly(q,w):", "predict": "<s>\n\ndef will_it_fly(q,w):\n    if q == 0 and w == 0:\n        return \"Maybe\"\n    elif q == 0 and w != 0:\n        return \"No\"\n    elif q != 0 and w == 0:\n        return \"No\"\n    elif q > 0 and w > 0:\n        return \"Yes\"\n    elif q < 0 and w < 0:\n        return \"Yes\"\n    elif q > 0 and w < 0:\n        return \"No\"\n    elif q < 0 and w > 0:\n        return \"No\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 73, "source": "HumanEval:HumanEval/73", "prompt": "\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):", "predict": "<s>\n\"\"\"\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n\"\"\"\ndef smallest_change(arr):\n    # Your code here\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:\n        return 28\n    if", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # Your code here\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:\n        return 28\n    if"}
{"ID": 75, "source": "HumanEval:HumanEval/75", "prompt": "\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):", "predict": "<s>\n\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\ndef is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                if is_prime(i):\n                    for j in range(2, a):\n                        if a % j == 0:\n                            if is_prime(j):\n                                for k in range(2, a):\n                                    if a % k == 0:\n                                        if is_prime(k):\n                                            return True\n    return False\n\ndef is_prime(a):\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\nprint(is_multiply_prime(30))\nprint(is_multiply_prime(100))\nprint(is_multiply_prime(101))\nprint(is_multiply_prime(102))\nprint(is_multiply_prime(103))\nprint(is_multiply_prime(104))\nprint(is_multiply_prime(105))\nprint(is_multiply_prime(106))\nprint(is_multiply_prime(107))\nprint(is_multiply_prime(108))\nprint(is_multiply_prime(109))\nprint(is_multiply_prime(110))\nprint(is_multiply_prime(111))\nprint(is_multiply_prime(112))\nprint(is_multiply_prime(113))\nprint(is_multiply_prime(114))\nprint(is_multiply_prime(115))\nprint(is_multiply_prime(116))\nprint(is_multiply_prime(117))\nprint(is_multiply_prime(118))\nprint(is_multiply_prime(119))\nprint(is_multiply_prime(120))\nprint(is_multiply_prime(121))\nprint(is_multiply_prime(122))\nprint(is_multiply_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_multiply_prime(30))\nprint(is_multiply_prime(100))\nprint(is_multiply_prime(101))\nprint(is_multiply_prime(102))\nprint(is_multiply_prime(103))\nprint(is_multiply_prime(104))\nprint(is_multiply_prime(105))\nprint(is_multiply_prime(106))\nprint(is_multiply_prime(107))\nprint(is_multiply_prime(108))\nprint(is_multiply_prime(109))\nprint(is_multiply_prime(110))\nprint(is_multiply_prime(111))\nprint(is_multiply_prime(112))\nprint(is_multiply_prime(113))\nprint(is_multiply_prime(114))\nprint(is_multiply_prime(115))\nprint(is_multiply_prime(116))\nprint(is_multiply_prime(117))\nprint(is_multiply_prime(118))\nprint(is_multiply_prime(119))\nprint(is_multiply_prime(120))\nprint(is_multiply_prime(121))\nprint(is_multiply_prime(122))\nprint(is_multiply_"}
{"ID": 77, "source": "HumanEval:HumanEval/77", "prompt": "\n\ndef iscube(a):", "predict": "<s>\n\ndef iscube(a):\n    \"\"\"\n    Check if array is a cube.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array to check.\n\n    Returns\n    -------\n    iscube : bool\n        Return True if the input array is a cube, False otherwise.\n\n    \"\"\"\n    a = np.asanyarray(a)\n    shape = a.shape\n    if len(shape) != 3:\n        return False\n    elif shape[0] == shape[1] == shape[2]:\n        return True\n    else:\n        return False\n\n\ndef is_power2(num):\n    \"\"\"\n    Check if a number is a power of 2.\n\n    Parameters\n    ----------\n    num : int\n        Input number to check.\n\n    Returns\n    -------\n    is_power2 : bool\n        Return True if the input number is a power of 2, False otherwise.\n\n    \"\"\"\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef is_iterable(obj):\n    \"\"\"\n    Check if an object is iterable.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_iterable : bool\n        Return True if the input object is iterable, False otherwise.\n\n    \"\"\"\n    try:\n        iter(obj)\n    except TypeError:\n        return False\n    else:\n        return True\n\n\ndef is_scalar(obj):\n    \"\"\"\n    Check if an object is a scalar.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_scalar : bool\n        Return True if the input object is a scalar, False otherwise.\n\n    \"\"\"\n    return np.isscalar(obj)\n\n\ndef is_integer(obj):\n    \"\"\"\n    Check if an object is an integer.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_integer : bool\n        Return True if the input object is an integer", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    \"\"\"\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef is_iterable(obj):\n    \"\"\"\n    Check if an object is iterable.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_iterable : bool\n        Return True if the input object is iterable, False otherwise.\n\n    \"\"\"\n    try:\n        iter(obj)\n    except TypeError:\n        return False\n    else:\n        return True\n\n\ndef is_scalar(obj):\n    \"\"\"\n    Check if an object is a scalar.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_scalar : bool\n        Return True if the input object is a scalar, False otherwise.\n\n    \"\"\"\n    return np.isscalar(obj)\n\n\ndef is_integer(obj):\n    \"\"\"\n    Check if an object is an integer.\n\n    Parameters\n    ----------\n    obj : object\n        Input object to check.\n\n    Returns\n    -------\n    is_integer : bool\n        Return True if the input object is an integer"}
{"ID": 78, "source": "HumanEval:HumanEval/78", "prompt": "\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):", "predict": "<s>\n\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n\"\"\"\ndef hex_key(num):\n    count = 0\n    for i in num:\n        if i in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count\n\n\ndef hex_key(num):\n    return sum(i in ['2', '3', '5', '7', 'B', 'D'] for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef hex_key(num):\n    return sum(i in ['2', '3', '5', '7', 'B', 'D'] for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2357BD' for i in num)\n\n\ndef hex_key(num):\n    return sum(i in '2"}
{"ID": 79, "source": "HumanEval:HumanEval/79", "prompt": "\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):", "predict": "<s>\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\"\"\"You will be given a number in binary form and your task is to convert it to\ndecimal format. The function should return an integer.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nbinary_to_decimal(\"db1111db\")   # returns 15\nbinary_to_decimal(\"db100000db\") # returns 32\n\"\"\"\ndef binary_to_decimal(binary):\n    return int(binary[2:-2], 2)\n\n\n\"\"\"You will be given a number in decimal form and your task is to convert it to\nhexadecimal format. The function should return a string, with each character representing a hexadecimal\nnumber. Each character in the string will be '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_hexadecimal(15)   # returns \"hx0fhx\"\ndecimal_to_hexadecimal(32)   # returns \"hx20hx\"\n\"\"\"\ndef decimal_to_hexadecimal(decimal):\n    return \"hx\" + hex(decimal)[2:] + \"hx\"\n\n\n\"\"\"You will be given a number in hexadecimal form and your task is to convert it to\ndecimal format. The function should return an integer.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nhexadecimal_to_decimal(\"hx0fhx\")   # returns 15\nhexadecimal_to_decimal(\"hx", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"You will be given a number in decimal form and your task is to convert it to\nhexadecimal format. The function should return a string, with each character representing a hexadecimal\nnumber. Each character in the string will be '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_hexadecimal(15)   # returns \"hx0fhx\"\ndecimal_to_hexadecimal(32)   # returns \"hx20hx\"\n\"\"\"\ndef decimal_to_hexadecimal(decimal):\n    return \"hx\" + hex(decimal)[2:] + \"hx\"\n\n\n\"\"\"You will be given a number in hexadecimal form and your task is to convert it to\ndecimal format. The function should return an integer.\n\nThere will be an extra couple of characters 'hx' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\nhexadecimal_to_decimal(\"hx0fhx\")   # returns 15\nhexadecimal_to_decimal(\"hx"}
{"ID": 81, "source": "HumanEval:HumanEval/81", "prompt": "\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):", "predict": "<s>\n\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\"\"\"\ndef numerical_letter_grade(grades):\n  # Your code here\n  return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 83, "source": "HumanEval:HumanEval/83", "prompt": "\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):", "predict": "<s>\n\"\"\"\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n\"\"\"\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36"}
{"ID": 92, "source": "HumanEval:HumanEval/92", "prompt": "\n\ndef any_int(x, y, z):", "predict": "<s>\n\ndef any_int(x, y, z):\n    \"\"\"Returns the first integer in the list of arguments.\n\n    >>> any_int(1, 2, 3)\n    1\n    >>> any_int(2.5, 3.5, 4.5)\n    2\n    >>> any_int(True, False, 1)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    >>> any_int(1, 2, 3)\n    1\n    >>> any_int(2.5, 3.5, 4.5)\n    2\n    >>> any_int(True, False, 1)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)\n    1\n    >>> any_int(True, False, 1.0)"}
{"ID": 98, "source": "HumanEval:HumanEval/98", "prompt": "\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):", "predict": "<s>\n\"\"\"\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n\"\"\"\ndef count_upper(s):\n  # Your code here\n  count = 0\n  for i in range(len(s)):\n    if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"code\" appears in the string s.\n\nFor example:\ncount_code('aaacodebbb') returns 1\ncount_code('codexxcode') returns 2\ncount_code('cozexxcope') returns 2\n\"\"\"\ndef count_code(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'code':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s.\n\nFor example:\ncount_hi('abc hi ho') returns 1\ncount_hi('ABChi hi') returns 2\ncount_hi('hihi') returns 2\n\"\"\"\ndef count_hi(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 1):\n    if s[i:i+2] == 'hi':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s, but the each \"hi\" is separated by a number of characters that is divisible by 3.\n\nFor example:\ncount_hi3('abc hi ho') returns 1\ncount_hi3('ABChi hi') returns 0\ncount_hi3('hihi') returns 0\ncount_hi3('hihihihi') returns 1\ncount_hi3('hihihihihihi') returns 2\n\"\"\"\ndef count_hi3(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 1):\n    if s[i:i+2] == 'hi' and (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n  # Your code here\n  count = 0\n  for i in range(len(s)):\n    if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"code\" appears in the string s.\n\nFor example:\ncount_code('aaacodebbb') returns 1\ncount_code('codexxcode') returns 2\ncount_code('cozexxcope') returns 2\n\"\"\"\ndef count_code(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'code':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s.\n\nFor example:\ncount_hi('abc hi ho') returns 1\ncount_hi('ABChi hi') returns 2\ncount_hi('hihi') returns 2\n\"\"\"\ndef count_hi(s):\n  # Your code here\n  count = 0\n  for i in range(len(s) - 1):\n    if s[i:i+2] == 'hi':\n      count += 1\n  return count\n\n\n\"\"\"\nGiven a string s, return the number of times that the string \"hi\" appears in the string s, but the each \"hi\" is separated by a number of characters that is divisible by 3.\n\nFor example:\ncount_hi3('abc hi ho') returns 1"}
{"ID": 101, "source": "HumanEval:HumanEval/101", "prompt": "\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):", "predict": "<s>\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\"\"\"\ndef words_string(s):\n    return s.split(\", \")\n\n\"\"\"\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n"}
{"ID": 109, "source": "HumanEval:HumanEval/109", "prompt": "\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):", "predict": "<s>\n\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            \n\"\"\"\ndef move_one_ball(arr):\n    \"\"\"\n    :param: arr - input array\n    return - True if it is possible to get non-decreasing order by performing\n             right shift operations else return False\n    \"\"\"\n    #Your code goes here\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return False\n        else:\n            return True\n    if arr[0] > arr[1]:\n        return False\n    else:\n        return move_one_ball(arr[1:])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 115, "source": "HumanEval:HumanEval/115", "prompt": "\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):", "predict": "<s>\n\"\"\"\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n\"\"\"\ndef max_fill(grid, capacity):\n    \"\"\"\n    Time: O(n*m)\n    Space: O(n*m)\n    \"\"\"\n    n, m = len(grid), len(grid[0])\n    water = [[0 for _ in range(m)] for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                water[i][j] = 1\n                count += 1\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i+1, n):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j+1, m):\n                    if water[i][k] == 0:\n                        water[i][k] = 1\n                        count += 1\n                    else:\n                        break\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i-1, -1, -1):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j-1, -1, -1):\n                    if water[i][k] == 0:\n                        water[i][k] = 1\n                        count += 1\n                    else:\n                        break\n\n    return count\n\n\nif __name__ == \"__main__\":\n    grid = [[0,0,1,0], [0,1,0,0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "            if grid[i][j] == 1:\n                water[i][j] = 1\n                count += 1\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i+1, n):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j+1, m):\n                    if water[i][k] == 0:\n                        water[i][k] = 1\n                        count += 1\n                    else:\n                        break\n\n    for i in range(n):\n        for j in range(m):\n            if water[i][j] == 1:\n                for k in range(i-1, -1, -1):\n                    if water[k][j] == 0:\n                        water[k][j] = 1\n                        count += 1\n                    else:\n                        break\n\n    for j in range(m):\n        for i in range(n):\n            if water[i][j] == 1:\n                for k in range(j-1, -1, -1):"}
{"ID": 119, "source": "HumanEval:HumanEval/119", "prompt": "\n\ndef match_parens(lst):", "predict": "<s>\n\ndef match_parens(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    result = []\n    for s in lst:\n        if len(s) == 1:\n            result.append(s)\n        elif len(s) == 2:\n            if s[0] == '(' and s[1] == ')':\n                result.append(s)\n        else:\n            if s[0] == '(' and s[-1] == ')':\n                result.append(s)\n    return result\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    result = []\n    for s in lst:\n        if re.match(r'^[()]$', s):\n            result.append(s)\n        elif re.match(r'^\\([^()]*\\)$', s):\n            result.append(s)\n    return result\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re2(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    return [s for s in lst if re.match(r'^[()]$|^(\\([^()]*\\))$', s)]\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re3(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    result = []\n    for s in lst:\n        if re.match(r'^[()]$', s):\n            result.append(s)\n        elif re.match(r'^\\([^()]*\\)$', s):\n            result.append(s)\n    return result\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re2(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where each string\n    is either a single parenthesis or a balanced pair of parenthesis.\n    \"\"\"\n    # +++your code here+++\n    # LAB(begin solution)\n    import re\n    return [s for s in lst if re.match(r'^[()]$|^(\\([^()]*\\))$', s)]\n    # LAB(replace solution)\n    # return\n    # LAB(end solution)\n\n\ndef match_parens_re3(lst):\n    \"\"\"\n    Given a list of strings, return a list of strings where"}
{"ID": 124, "source": "HumanEval:HumanEval/124", "prompt": "\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):", "predict": "<s>\n\"\"\"You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n\"\"\"\ndef valid_date(date):\n    if date == \"\":\n        return False\n    if date.count(\"-\") != 2:\n        return False\n    if date.count(\"-\") == 2:\n        month, day, year = date.split(\"-\")\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(year) < 1:\n            return False\n        if int(month) == 2:\n            if int(day) > 29:\n                return False\n        if int(month) in [1,3,5,7,8,10,12]:\n            if int(day) > 31:\n                return False\n        if int(month) in [4,6,9,11]:\n            if int(day) > 30:\n                return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 126, "source": "HumanEval:HumanEval/126", "prompt": "\n\ndef is_sorted(lst):", "predict": "<s>\n\ndef is_sorted(lst):\n    \"\"\"\n    Checks if a list is sorted.\n\n    :param lst: The list to check.\n    :return: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\ndef bubble_sort(lst):\n    \"\"\"\n    Sorts a list using the bubble sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - 1 - i):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\n\ndef selection_sort(lst):\n    \"\"\"\n    Sorts a list using the selection sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        min_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n\n\ndef insertion_sort(lst):\n    \"\"\"\n    Sorts a list using the insertion sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(1, len(lst)):\n        j = i\n        while j > 0 and lst[j - 1] > lst[j]:\n            lst[j - 1], lst[j] = lst[j], lst[j - 1]\n            j -= 1\n    return lst\n\n\ndef merge_sort(lst):\n    \"\"\"\n    Sorts a list using the merge sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\ndef bubble_sort(lst):\n    \"\"\"\n    Sorts a list using the bubble sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - 1 - i):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\n\ndef selection_sort(lst):\n    \"\"\"\n    Sorts a list using the selection sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        min_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n\n\ndef insertion_sort(lst):\n    \"\"\"\n    Sorts a list using the insertion sort algorithm.\n\n    :param lst: The list to sort.\n    :return: The sorted list."}
{"ID": 132, "source": "HumanEval:HumanEval/132", "prompt": "\n\ndef is_nested(string):", "predict": "<s>\n\ndef is_nested(string):\n    \"\"\"\n    Checks if a string is nested.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is nested, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    return string.count(\"(\") == string.count(\")\")\n\n\ndef is_valid(string):\n    \"\"\"\n    Checks if a string is valid.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is valid, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_nested(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_balanced(string):\n    \"\"\"\n    Checks if a string is balanced.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is balanced, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_valid(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_complete(string):\n    \"\"\"\n    Checks if a string is complete.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is complete, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_balanced(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            stack.pop()\n\n    return len(stack) == 0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    \"\"\"\n    Checks if a string is valid.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is valid, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_nested(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_balanced(string):\n    \"\"\"\n    Checks if a string is balanced.\n\n    :param string: The string to check.\n    :type string: str\n    :return: True if the string is balanced, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    if not is_valid(string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\ndef is_complete(string):\n    \"\"\"\n    Checks if a string is complete."}
{"ID": 134, "source": "HumanEval:HumanEval/134", "prompt": "\n\ndef check_if_last_char_is_a_letter(txt):", "predict": "<s>\n\ndef check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_digit(txt):\n    if txt[-1].isdigit():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_punctuation(txt):\n    if txt[-1] in string.punctuation:\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_space(txt):\n    if txt[-1] == \" \":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_newline(txt):\n    if txt[-1] == \"\\n\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_tab(txt):\n    if txt[-1] == \"\\t\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_whitespace(txt):\n    if txt[-1].isspace():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_lowercase(txt):\n    if txt[-1].islower():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_uppercase(txt):\n    if txt[-1].isupper():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_special_char(txt):\n    if txt[-1] in string.punctuation or txt[-1] in string.digits or txt[-1] in string.ascii_letters:\n        return False\n    else:\n        return True\n\n\ndef check_if_last_char_is_a_printable_char(txt):\n    if txt[-1] in string.printable:\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_hex_char", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_digit(txt):\n    if txt[-1].isdigit():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_punctuation(txt):\n    if txt[-1] in string.punctuation:\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_space(txt):\n    if txt[-1] == \" \":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_newline(txt):\n    if txt[-1] == \"\\n\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_tab(txt):\n    if txt[-1] == \"\\t\":\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_whitespace(txt):\n    if txt[-1].isspace():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_lowercase(txt):\n    if txt[-1].islower():\n        return True\n    else:\n        return False\n\n\ndef check_if_last_char_is_a_uppercase(txt):\n    if txt[-1].isupper():\n        return True\n    else:\n        return False\n\n"}
{"ID": 136, "source": "HumanEval:HumanEval/136", "prompt": "\n\ndef largest_smallest_integers(lst):", "predict": "<s>\n\ndef largest_smallest_integers(lst):\n    \"\"\"Returns the largest and smallest integers in a list.\n\n    >>> largest_smallest_integers([1, 2, 3, 4, 5])\n    (5, 1)\n    >>> largest_smallest_integers([5, 4, 3, 2, 1])\n    (5, 1)\n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    (9, 1)\n    >>> largest_smallest_integers([9, 8, 7, 6, 5, 4, 3, 2, 1])\n    (9, 1)\n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    (10, 1)\n    >>> largest_smallest_integers([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    (10, 1)\n    >>> largest_smallest_integers([])\n    Traceback (most recent call last):\n        ...\n    ValueError: largest_smallest_integers() arg is an empty sequence\n    \"\"\"\n    if len(lst) == 0:\n        raise ValueError(\"largest_smallest_integers() arg is an empty sequence\")\n    else:\n        return max(lst), min(lst)\n\n\ndef largest_smallest_integers_2(lst):\n    \"\"\"Returns the largest and smallest integers in a list.\n\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5])\n    (5, 1)\n    >>> largest_smallest_integers_2([5, 4, 3, 2, 1])\n    (5, 1)\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    (9, 1)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    (9, 1)\n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    (10, 1)\n    >>> largest_smallest_integers([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    (10, 1)\n    >>> largest_smallest_integers([])\n    Traceback (most recent call last):\n        ...\n    ValueError: largest_smallest_integers() arg is an empty sequence\n    \"\"\"\n    if len(lst) == 0:\n        raise ValueError(\"largest_smallest_integers() arg is an empty sequence\")\n    else:\n        return max(lst), min(lst)\n\n\ndef largest_smallest_integers_2(lst):\n    \"\"\"Returns the largest and smallest integers in a list.\n\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5])\n    (5, 1)\n    >>> largest_smallest_integers_2([5, 4, 3, 2, 1])\n    (5, 1)\n    >>> largest_smallest_integers_2([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    (9, 1)\n"}
{"ID": 138, "source": "HumanEval:HumanEval/138", "prompt": "\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):", "predict": "<s>\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j % 2 == 0:\n                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j % 2 == 0:\n                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n\"\"\"\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if n - i % 2 == 0:\n            for j in range(1, n):\n                if n - i - j % 2 == 0:\n                    for k in range(1, n):\n                        if n - i - j - k % 2 == 0:\n                            for l in range(1, n):\n                                if n - i - j - k - l % 2 == 0:\n                                    return True\n    return False\n\n\n\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers"}
{"ID": 140, "source": "HumanEval:HumanEval/140", "prompt": "\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):", "predict": "<s>\n\"\"\"\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n\"\"\"\ndef fix_spaces(text):\n    return text.replace(\" \",\"_\")\n\n\n\"\"\"\nGiven a string text, return a new string with the reversed order of characters.\n\nreverse(\"Example\") == \"elpmaxE\"\nreverse(\"12345\") == \"54321\"\nreverse(\"\") == \"\"\n\"\"\"\ndef reverse(text):\n    return text[::-1]\n\n\n\"\"\"\nGiven a string text, return a new string with the reversed order of words.\n\nreverse_words(\"Example\") == \"elpmaxE\"\nreverse_words(\"12345\") == \"54321\"\nreverse_words(\"\") == \"\"\n\"\"\"\ndef reverse_words(text):\n    return \" \".join(text.split(\" \")[::-1])\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") ==", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef reverse_words(text):\n    return \" \".join(text.split(\" \")[::-1])\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped.\n\nswap_first_last(\"Example\") == \"emapleE\"\nswap_first_last(\"12345\") == \"52341\"\nswap_first_last(\"\") == \"\"\n\"\"\"\ndef swap_first_last(text):\n    return text[1:] + text[0]\n\n\n\"\"\"\nGiven a string text, return a new string with the first and last characters swapped."}
{"ID": 141, "source": "HumanEval:HumanEval/141", "prompt": "\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):", "predict": "<s>\n\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\"\"\"\ndef file_name_check(file_name):\n    # your code here\n    if len(file_name) == 0:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0].count('0') > 3:\n            return 'No'\n    return 'Yes'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 142, "source": "HumanEval:HumanEval/142", "prompt": "\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):", "predict": "<s>\n\n\n\"\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\"\"\"\ndef sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 148, "source": "HumanEval:HumanEval/148", "prompt": "\n\ndef bf(planet1, planet2):", "predict": "<s>\n\ndef bf(planet1, planet2):\n    return planet1.distance_to(planet2)\n\n\ndef bf_with_planet_name(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name\n\n\ndef bf_with_planet_name_and_distance(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2)\n\n\ndef bf_with_planet_name_and_distance_and_planet_type(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size_and_planet_color(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size, planet1.color, planet2.color\n\n\ndef bf_with_planet_name_and_distance_and_planet_type_and_planet_size_and_planet_color_and_planet_age(planet1, planet2):\n    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size, planet1.color, planet2", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    return planet1.distance_to(planet2), planet1.name, planet2.name, planet1.distance_to(planet2), planet1.type, planet2.type, planet1.size, planet2.size, planet1.color, planet2"}
{"ID": 149, "source": "HumanEval:HumanEval/149", "prompt": "\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):", "predict": "<s>\n\"\"\"Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\"\"\"\ndef sorted_list_sum(lst):\n    return sorted(lst, key=len)\n\n\ndef list_sort(lst):\n    return sorted(lst, key=len)\n\n\ndef list_sort_2(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_3(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_4(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_5(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_6(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_7(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_8(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_9(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_10(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_11(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_12(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_13(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_14(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_15(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_16(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_17(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_18(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_19(lst", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    return sorted(lst, key=len)\n\n\ndef list_sort(lst):\n    return sorted(lst, key=len)\n\n\ndef list_sort_2(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_3(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_4(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_5(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_6(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_7(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_8(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_9(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_10(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_11(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_12(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_13(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_14(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_15(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_16(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_17(lst):\n    return sorted(lst, key=len, reverse=True)\n\n\ndef list_sort_18(lst):\n    return sorted(lst, key=len, reverse=True)\n\n"}
{"ID": 151, "source": "HumanEval:HumanEval/151", "prompt": "\n\ndef double_the_difference(lst):", "predict": "<s>\n\ndef double_the_difference(lst):\n    \"\"\"\n    Given a list of integers, return the sum of the absolute value of the\n    difference between each pair of integers.\n\n    >>> double_the_difference([1, 2, 3, 4])\n    4\n    >>> double_the_difference([1, 2, 3, 4, 5])\n    8\n    >>> double_the_difference([1, 2, 3, 4, 5, 6])\n    12\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7])\n    16\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8])\n    20\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    24\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    28\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    32\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    36\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    40\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    44\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n    >>> double_the_difference([1, 2, 3, 4])\n    4\n    >>> double_the_difference([1, 2, 3, 4, 5])\n    8\n    >>> double_the_difference([1, 2, 3, 4, 5, 6])\n    12\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7])\n    16\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8])\n    20\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    24\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    28\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    32\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    36\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    40\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    44\n    >>> double_the_difference([1, 2, 3, 4, 5, 6, 7"}
{"ID": 152, "source": "HumanEval:HumanEval/152", "prompt": "\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):", "predict": "<s>\n\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\"\"\"\ndef compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 153, "source": "HumanEval:HumanEval/153", "prompt": "\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):", "predict": "<s>\n\"\"\"You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\"\"\"\ndef Strongest_Extension(class_name, extensions):\n    # your code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB']) == 'my_class.bB'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc']) == 'my_class.cc'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee']) == 'my_class.ee'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF']) == 'my_class.FF'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF', 'gg']) == 'my_class.gg'\n    assert Strongest_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz']) == 'my_class.ZZ'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB']) == 'my_class.bB'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc']) == 'my_class.cc'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee']) == 'my_class.ee'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF']) == 'my_class.FF'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'ZZ', 'aA', 'zz', 'bB', 'cc', 'ee', 'FF', 'gg']) == 'my_class.gg'\n    assert Strongest_"}
{"ID": 158, "source": "HumanEval:HumanEval/158", "prompt": "\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):", "predict": "<s>\n\"\"\"Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\ndef find_max(words):\n  # Your code here\n  max_word = \"\"\n  max_count = 0\n  for word in words:\n    if len(set(word)) > max_count:\n      max_count = len(set(word))\n      max_word = word\n    elif len(set(word)) == max_count:\n      if word < max_word:\n        max_word = word\n  return max_word\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 162, "source": "HumanEval:HumanEval/162", "prompt": "\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):", "predict": "<s>\n\"\"\"\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\"\"\"\ndef string_to_md5(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha1 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha1('Hello world') == '2ef7bde608ce5404e97d5f042f95f89f1c232871'\n\"\"\"\ndef string_to_sha1(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.sha1(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha256 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha256('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'\n\"\"\"\ndef string_to_sha256(text):\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\n\n\n\"\"\"\nGiven a string 'text', return its sha512 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_sha512('Hello world') == 'f7fbba6e0636f890e56fbbf3283e524c6fa3204ae298382d624741d0dc6638326e282c41be5e4254d8820772c5518a2c5a8c0c7f7eda19594a7eb53945", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": ">>> string_to_sha512('Hello world') == 'f7fbba6e0636f890e56fbbf3283e524c6fa3204ae298382d624741d0dc6638326e282c41be5e4254d8820772c5518a2c5a8c0c7f7eda19594a7eb53945"}
