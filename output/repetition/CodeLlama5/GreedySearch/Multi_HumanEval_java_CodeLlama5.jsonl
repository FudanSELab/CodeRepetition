{"ID": 41, "source": "Multi_HumanEval_java:HumanEval_java/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n\t\t// Your code here\n        // return false;\n        // return true;\n        // return l.size() > 1;\n        // return l.size() > 2;\n        // return l.size() > 3;\n        // return l.size() > 4;\n        // return l.size() > 5;\n        // return l.size() > 6;\n        // return l.size() > 7;\n        // return l.size() > 8;\n        // return l.size() > 9;\n        // return l.size() > 10;\n        // return l.size() > 11;\n        // return l.size() > 12;\n        // return l.size() > 13;\n        // return l.size() > 14;\n        // return l.size() > 15;\n        // return l.size() > 16;\n        // return l.size() > 17;\n        // return l.size() > 18;\n        // return l.size() > 19;\n        // return l.size() > 20;\n        // return l.size() > 21;\n        // return l.size() > 22;\n        // return l.size() > 23;\n        // return l.size() > 24;\n        // return l.size() > 25;\n        // return l.size() > 26;\n        // return l.size() > 27;\n        // return l.size() > 28;\n        // return l.size() > 29;\n        // return l.size() > 30;\n        // return l.size() > 31;\n        // return l.size() > 32;\n        // return l.size() > 33;\n        // return l.size() > 34;\n        // return l.size() > 35;\n        // return l.size() > 36;\n        // return l.size() > 37;\n        // return l.size() > 38;\n        // return l.size() > ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "        // return false;\n        // return true;\n        // return l.size() > 1;\n        // return l.size() > 2;\n        // return l.size() > 3;\n        // return l.size() > 4;\n        // return l.size() > 5;\n        // return l.size() > 6;\n        // return l.size() > 7;\n        // return l.size() > 8;\n        // return l.size() > 9;\n        // return l.size() > 10;\n        // return l.size() > 11;\n        // return l.size() > 12;\n        // return l.size() > 13;\n        // return l.size() > 14;\n        // return l.size() > 15;\n        // return l.size() > 16;\n        // return l.size() > 17;\n        // return l.size() > 18;\n        // return l.size() > 19;\n        // return l.size() > 20;\n        // return l.size() > 21;\n        // return l.size() > 22;\n        // return l.size() > 23;\n        // return l.size() > 24;\n        // return l.size() > 25;\n        // return l.size() > 26;\n        // return l.size() > 27;\n        // return l.size() > 28;\n        // return l.size() > 29;\n        // return l.size() > 30;\n        // return l.size() > 31;\n        // return l.size() > 32;\n        // return l.size() > 33;\n        // return l.size() > 34;\n        // return l.size() > 35;\n        // return l.size() > 36;\n        // return l.size() > 37;\n        // return l.size() > 38;\n        // return l.size() > "}
{"ID": 47, "source": "Multi_HumanEval_java:HumanEval_java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}\n\n\nclass Modp2 {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}\n\n\nclass Modp3 {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}\n\n\nclass Modp4 {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     *", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}\n\n\nclass Modp2 {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}\n\n\nclass Modp3 {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t\tint result = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tresult = (result * 2) % p;\n\t\t}\n\t\treturn result;\n    }\n}"}
{"ID": 50, "source": "Multi_HumanEval_java:HumanEval_java/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n\treturn x + y;\n    }\n}\n\nclass Subtract {\n    /**\n     * Subtract two numbers x and y\n     * >>> subtract(2, 3)\n     * -1\n     * >>> subtract(5, 7)\n     * -2\n     *\n     */\n    public static int subtract(int x, int y) {\n\treturn x - y;\n    }\n}\n\nclass Multiply {\n    /**\n     * Multiply two numbers x and y\n     * >>> multiply(2, 3)\n     * 6\n     * >>> multiply(5, 7)\n     * 35\n     *\n     */\n    public static int multiply(int x, int y) {\n\treturn x * y;\n    }\n}\n\nclass Divide {\n    /**\n     * Divide two numbers x and y\n     * >>> divide(2, 3)\n     * 0\n     * >>> divide(5, 7)\n     * 0\n     *\n     */\n    public static int divide(int x, int y) {\n\treturn x / y;\n    }\n}\n\nclass Modulo {\n    /**\n     * Modulo of two numbers x and y\n     * >>> modulo(2, 3)\n     * 2\n     * >>> modulo(5, 7)\n     * 5\n     *\n     */\n    public static int modulo(int x, int y) {\n\treturn x % y;\n    }\n}\n\nclass Power {\n    /**\n     * Power of two numbers x and y\n     * >>> power(2, 3)\n     * 8\n     * >>> power(5, 7)\n     * 78125\n     *\n     */\n    public static int power(int x, int y) {\n\treturn (int) Math.pow(x, y);\n    }\n}\n\nclass Factorial {\n    /**\n     * Factorial of a number x\n     * >>> factorial(2)\n     * 2\n     * >>> factorial(5)\n     * 120\n     *\n     */\n    public static int factorial(int x) {", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "return x + y;\n    }\n}\n\nclass Subtract {\n    /**\n     * Subtract two numbers x and y\n     * >>> subtract(2, 3)\n     * -1\n     * >>> subtract(5, 7)\n     * -2\n     *\n     */\n    public static int subtract(int x, int y) {\n\treturn x - y;\n    }\n}\n\nclass Multiply {\n    /**\n     * Multiply two numbers x and y\n     * >>> multiply(2, 3)\n     * 6\n     * >>> multiply(5, 7)\n     * 35\n     *\n     */\n    public static int multiply(int x, int y) {\n\treturn x * y;\n    }\n}\n\nclass Divide {\n    /**\n     * Divide two numbers x and y\n     * >>> divide(2, 3)\n     * 0\n     * >>> divide(5, 7)\n     * 0\n     *\n     */\n    public static int divide(int x, int y) {\n\treturn x / y;\n    }\n}\n\nclass Modulo {\n    /**\n     * Modulo of two numbers x and y\n     * >>> modulo(2, 3)\n     * 2\n     * >>> modulo(5, 7)\n     * 5\n     *\n     */\n    public static int modulo(int x, int y) {\n\treturn x % y;\n    }\n}\n\nclass Power {\n    /**\n     * Power of two numbers x and y\n     * >>> power(2, 3)\n     * 8\n     * >>> power(5, 7)\n     * 78125\n     *\n     */\n    public static int power(int x, int y) {"}
{"ID": 75, "source": "Multi_HumanEval_java:HumanEval_java/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(Object num) {\n\t\tint count = 0;\n\t\tString str = num.toString();\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (isPrime(str.charAt(i))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static boolean isPrime(char c) {\n\t\tint num = 0;\n\t\tswitch (c) {\n\t\t\tcase '0':\n\t\t\t\tnum = 0;\n\t\t\t\tbreak;\n\t\t\tcase '1':\n\t\t\t\tnum = 1;\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tnum = 2;\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\tnum = 3;\n\t\t\t\tbreak;\n\t\t\tcase '4':\n\t\t\t\tnum = 4;\n\t\t\t\tbreak;\n\t\t\tcase '5':\n\t\t\t\tnum = 5;\n\t\t\t\tbreak;\n\t\t\tcase '6':\n\t\t\t\tnum = 6;\n\t\t\t\tbreak;\n\t\t\tcase '7':\n\t\t\t\tnum = 7;\n\t\t\t\tbreak;\n\t\t\tcase '8':\n\t\t\t\tnum = 8;\n\t\t\t\tbreak;\n\t\t\tcase '9':\n\t\t\t\tnum = 9;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tnum = 10;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tnum = 11;\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tnum = 12;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum = 13;\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tnum = 14;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tnum = 15;\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tswitch (c) {\n\t\t\tcase '0':\n\t\t\t\tnum = 0;\n\t\t\t\tbreak;\n\t\t\tcase '1':\n\t\t\t\tnum = 1;\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tnum = 2;\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\tnum = 3;\n\t\t\t\tbreak;\n\t\t\tcase '4':\n\t\t\t\tnum = 4;\n\t\t\t\tbreak;\n\t\t\tcase '5':\n\t\t\t\tnum = 5;\n\t\t\t\tbreak;\n\t\t\tcase '6':\n\t\t\t\tnum = 6;\n\t\t\t\tbreak;\n\t\t\tcase '7':\n\t\t\t\tnum = 7;\n\t\t\t\tbreak;\n\t\t\tcase '8':\n\t\t\t\tnum = 8;\n\t\t\t\tbreak;\n\t\t\tcase '9':\n\t\t\t\tnum = 9;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tnum = 10;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tnum = 11;\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tnum = 12;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tnum = 13;\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tnum = 14;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tnum = 15;"}
{"ID": 79, "source": "Multi_HumanEval_java:HumanEval_java/82", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n\t\tint length = string.length();\n\t\tif (length == 2 || length == 3 || length == 5 || length == 7 || length == 11 || length == 13 || length == 17 || length == 19 || length == 23 || length == 29 || length == 31 || length == 37 || length == 41 || length == 43 || length == 47 || length == 53 || length == 59 || length == 61 || length == 67 || length == 71 || length == 73 || length == 79 || length == 83 || length == 89 || length == 97 || length == 101 || length == 103 || length == 107 || length == 109 || length == 113 || length == 127 || length == 131 || length == 137 || length == 139 || length == 149 || length == 151 || length == 157 || length == 163 || length == 167 || length == 173 || length == 179 || length == 181 || length == 191 || length == 193 || length == 197 || length == 199 || length == 211 || length == 223 || length == 227 || length == 229 || length == 233 || length == 239 || length == 241 || length == 251 || length == 257 || length == 263 || length == 269 || length == 271 || length == 277 || length == 281 || length == 283 || length == 293 || length == 307 || length == 311 || length == 313 || length == 317 || length == 331 || length == 337 || length == 347 || length == 349 || length == 353 || length == 359 || length == 367 || length == 373 || length == 379 || length == ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\t\tif (length == 2 || length == 3 || length == 5 || length == 7 || length == 11 || length == 13 || length == 17 || length == 19 || length == 23 || length == 29 || length == 31 || length == 37 || length == 41 || length == 43 || length == 47 || length == 53 || length == 59 || length == 61 || length == 67 || length == 71 || length == 73 || length == 79 || length == 83 || length == 89 || length == 97 || length == 101 || length == 103 || length == 107 || length == 109 || length == 113 || length == 127 || length == 131 || length == 137 || length == 139 || length == 149 || length == 151 || length == 157 || length == 163 || length == 167 || length == 173 || length == 179 || length == 181 || length == 191 || length == 193 || length == 197 || length == 199 || length == 211 || length == 223 || length == 227 || length == 229 || length == 233 || length == 239 || length == 241 || length == 251 || length == 257 || length == 263 || length == 269 || length == 271 || length == 277 || length == 281 || length == 283 || length == 293 || length == 307 || length == 311 || length == 313 || length == 317 || length == 331 || length == 337 || length == 347 || length == 349 || length == 353 || length == 359 || length == 367 || length == 373 || length == 379 || length == "}
{"ID": 90, "source": "Multi_HumanEval_java:HumanEval_java/93", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString encoded = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar c = message.charAt(i);\n\t\t\tif (vowels.indexOf(c) != -1) {\n\t\t\t\tint index = vowels.indexOf(c);\n\t\t\t\tif (index < 5) {\n\t\t\t\t\tindex += 5;\n\t\t\t\t} else {\n\t\t\t\t\tindex -= 5;\n\t\t\t\t}\n\t\t\t\tencoded += vowels.charAt(index);\n\t\t\t} else {\n\t\t\t\tencoded += c;\n\t\t\t}\n\t\t}\n\t\treturn encoded;\n    }\n}\n\nclass Decode {\n    /**\n     * * Write a function that takes a message, and decodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> decode('TGST')\n     * 'test'\n     * >>> decode('tHKS KS C MGSSCGG')\n     * 'This is a message'\n     *\n     */\n    public static String decode(String message) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString decoded = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar c = message.charAt(i);\n\t\t\tif (vowels.indexOf(c) != -1) {\n\t\t\t\tint index = vowels.indexOf(c);\n\t\t\t\tif (index < 5) {\n\t\t\t\t\tindex += 5;\n\t\t\t\t} else {\n\t\t\t\t\tindex -= 5;\n\t\t\t\t}\n\t\t\t\tdecoded += vowels.charAt(index);\n\t\t\t} else", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\tint index = vowels.indexOf(c);\n\t\t\t\tif (index < 5) {\n\t\t\t\t\tindex += 5;\n\t\t\t\t} else {\n\t\t\t\t\tindex -= 5;\n\t\t\t\t}\n\t\t\t\tencoded += vowels.charAt(index);\n\t\t\t} else {\n\t\t\t\tencoded += c;\n\t\t\t}\n\t\t}\n\t\treturn encoded;\n    }\n}\n\nclass Decode {\n    /**\n     * * Write a function that takes a message, and decodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> decode('TGST')\n     * 'test'\n     * >>> decode('tHKS KS C MGSSCGG')\n     * 'This is a message'\n     *\n     */\n    public static String decode(String message) {\n\t\tString vowels = \"aeiouAEIOU\";\n\t\tString decoded = \"\";\n\t\tfor (int i = 0; i < message.length(); i++) {\n\t\t\tchar c = message.charAt(i);\n\t\t\tif (vowels.indexOf(c) != -1) {\n\t\t\t\tint index = vowels.indexOf(c);\n\t\t\t\tif (index < 5) {\n\t\t\t\t\tindex += 5;\n\t\t\t\t} else {\n\t\t\t\t\tindex -= 5;\n\t\t\t\t}\n\t\t\t\tdecoded += vowels.charAt(index);\n\t\t\t} else"}
{"ID": 102, "source": "Multi_HumanEval_java:HumanEval_java/105", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n\t\tList<Object> result = new ArrayList<Object>();\n\t\tList<Object> temp = new ArrayList<Object>();\n\t\t\n\t\tfor(Object i : arr) {\n\t\t\tif(i instanceof Integer) {\n\t\t\t\tint num = (int) i;\n\t\t\t\tif(num >= 1 && num <= 9) {\n\t\t\t\t\ttemp.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tCollections.sort(temp);\n\t\tCollections.reverse(temp);\n\t\t\n\t\tfor(Object i : temp) {\n\t\t\tint num = (int) i;\n\t\t\tswitch(num) {\n\t\t\t\tcase 1:\n\t\t\t\t\tresult.add(\"One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tresult.add(\"Two\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tresult.add(\"Three\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tresult.add(\"Four\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tresult.add(\"Five\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tresult.add(\"Six\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tresult.add(\"Seven\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tresult.add(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tresult.add(\"Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n    }\n}\n\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        List<Object> arr = new ArrayList<Object>();\n        int n = scan.nextInt();\n        for", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tfor(Object i : temp) {\n\t\t\tint num = (int) i;\n\t\t\tswitch(num) {\n\t\t\t\tcase 1:\n\t\t\t\t\tresult.add(\"One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tresult.add(\"Two\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tresult.add(\"Three\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tresult.add(\"Four\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tresult.add(\"Five\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tresult.add(\"Six\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tresult.add(\"Seven\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tresult.add(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tresult.add(\"Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n    }\n}"}
{"ID": 126, "source": "Multi_HumanEval_java:HumanEval_java/129", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     *\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n\t\t// Write your code here\n        int n = grid.size();\n        int[][] visited = new int[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                visited[i][j] = 0;\n            }\n        }\n        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        int[][][] dp = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    dp[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] parent = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    parent[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] path = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    path[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] path_len = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    path_len[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] path_len_parent = new int[n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "        int[][][] dp = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    dp[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] parent = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    parent[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] path = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    path[i][j][l] = -1;\n                }\n            }\n        }\n        int[][][] path_len = new int[n][n][k+1];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int l = 0; l <= k; l++) {\n                    path_len[i][j][l] = -1;\n                }\n            }\n        }"}
{"ID": 145, "source": "Multi_HumanEval_java:HumanEval_java/148", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t", "predict": "<s>import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n\t\tList<Object> planets = new ArrayList<Object>();\n\t\tif (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n\t\t\tif (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n\t\t\t\tif (planet1.equals(\"Mercury\")) {\n\t\t\t\t\tif (planet2.equals(\"Venus\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t} else if (planet2.equals(\"Earth\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t} else if (planet2.equals(\"Mars\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t} else if (planet2.equals(\"Jupiter\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t\tplanets.add(\"Jupiter\");\n\t\t\t\t\t} else if (planet2.equals(\"Saturn\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t\tplanets.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\t\t} else if (planet2.equals(\"Mars\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t} else if (planet2.equals(\"Jupiter\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t\tplanets.add(\"Jupiter\");\n\t\t\t\t\t} else if (planet2.equals(\"Saturn\")) {\n\t\t\t\t\t\tplanets.add(\"Venus\");\n\t\t\t\t\t\tplanets.add(\"Earth\");\n\t\t\t\t\t\tplanets.add(\"Mars\");\n\t\t\t\t\t\tplanets."}
